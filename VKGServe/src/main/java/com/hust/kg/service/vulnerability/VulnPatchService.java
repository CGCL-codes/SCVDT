package com.hust.kg.service.vulnerability;

import com.hust.kg.parse.ParseToJson;
import com.hust.kg.entity.PathConfig;
import com.hust.kg.entity.vulnerability.VulnPatch;
import com.hust.kg.repository.vulnerability.VulnPatchRepository;
import com.hust.kg.service.CypherService;
import org.neo4j.driver.Driver;
import org.springframework.data.neo4j.core.DatabaseSelectionProvider;
import org.springframework.data.neo4j.core.Neo4jClient;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import java.io.File;
import java.util.List;

/**
 * @Author wk
 * @Date 2021/03/29 16:15
 * @Description:
 */
@Service
public class VulnPatchService {
    private final VulnPatchRepository repository;

    private final Neo4jClient neo4jClient;

    private final Driver driver;

    private final DatabaseSelectionProvider databaseSelectionProvider;

    private final CypherService cypherService;

    public VulnPatchService(VulnPatchRepository repository, Neo4jClient neo4jClient, Driver driver, DatabaseSelectionProvider databaseSelectionProvider, CypherService cypherService) {
        this.repository = repository;
        this.neo4jClient = neo4jClient;
        this.driver = driver;
        this.databaseSelectionProvider = databaseSelectionProvider;
        this.cypherService = cypherService;
    }

    public String findAll(){
        List<VulnPatch> vulnPatches = this.repository.findAll();
        return ParseToJson.listToJson(vulnPatches, "VulnPatch");
    }

    public String findPatchesByCVE(String cveID){
        String cypher = "match p=(:Vulnerability{cve_id:\"" + cveID + "\"})-[]->(:VulnPatch) return p";
        return cypherService.executeCypher(cypher);
    }

    public String findPatchesBySoftware(String software){
        String cypher = "match p=(:VulnPatch)-[]->(:SoftwareVersion)-[]->(s:Software)-[]->(:SoftwareVendor) where s.software_name=~\".*" + software + ".*\" return p";
        return cypherService.executeCypher(cypher);
    }

    public String addPatch(MultipartFile file, String cveID, String software){
        String fileName = file.getOriginalFilename();
        String codeFile = PathConfig.uploadDiffPath + "\\" + fileName;
        try{
            String cypher = "create (:VulnPatch{cve_id:'" + cveID + "',software:'" + software + "', diff_file:'" + codeFile.replace("\\","\\\\") + "', diff_url:'" + "User Add." +"'})";
            System.out.println(cypher);
            this.driver.session().run(cypher);
            Thread.sleep(100);
            cypher = "match (n:Vulnerability{cve_id:'" + cveID + "'}),(m:VulnPatch{cve_id:'" + cveID + "',software:'" + software + "',diff_url:'User Add.',diff_file:'" + codeFile.replace("\\","\\\\") + "'}) merge (n)-[:has]->(m)";
            System.out.println(cypher);
            this.driver.session().run(cypher);
            Thread.sleep(100);
            cypher = "match (n:Vulnerability{cve_id:'" + cveID + "'})-[]->(s:SoftwareVersion{software_name:'" + software + "'}),(m:VulnPatch{cve_id:'" + cveID + "',software:'" + software + "',diff_url:'User Add.',diff_file:'" + codeFile.replace("\\","\\\\") + "'}) merge (m)-[:`belong to`]->(s)";
            System.out.println(cypher);
            this.driver.session().run(cypher);
            File dest = new File(codeFile);
            file.transferTo(dest);
            return "添加成功";
        }catch (Exception e){
            e.printStackTrace();
        }
        return "添加失败";
    }
}
