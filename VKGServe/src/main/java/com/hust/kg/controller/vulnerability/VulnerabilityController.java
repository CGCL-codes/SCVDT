package com.hust.kg.controller.vulnerability;
import com.hust.kg.entity.vulnerability.*;
import com.hust.kg.service.CypherService;
import com.hust.kg.service.vulnerability.*;
import org.neo4j.driver.Result;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.repository.query.Param;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.sql.ResultSet;
import java.util.Collection;
import java.util.List;

/**
 * @Author wk
 * @Date 2021/03/25 10:28
 * @Description:
 */
@RestController
public class VulnerabilityController {

    private final VulnerabilityService vulnerabilityService;
    private final VulnTypeService vulnTypeService;
    private final SoftwareService softwareService;
    private final CVSSService cvssService;
    private final ExploitService exploitService;
    private final VulnPatchService vulnPatchService;
    private final SoftwareVersionService softwareVersionService;
    private final SoftwareVendorService softwareVendorService;

    public VulnerabilityController(VulnerabilityService vulnerabilityService, VulnTypeService vulnTypeService, SoftwareService softwareService, CVSSService cvssService, ExploitService exploitService, VulnPatchService vulnPatchService, SoftwareVersionService softwareVersionService, SoftwareVendorService softwareVendorService) {
        this.vulnerabilityService = vulnerabilityService;
        this.vulnTypeService = vulnTypeService;
        this.softwareService = softwareService;
        this.cvssService = cvssService;
        this.exploitService = exploitService;
        this.vulnPatchService = vulnPatchService;
        this.softwareVersionService = softwareVersionService;
        this.softwareVendorService = softwareVendorService;
    }

    @RequestMapping("/test")
    public List<Vulnerability> test(@RequestParam("cve_id")String cveID){
        return vulnerabilityService.findByCVE(cveID);
    }

    @RequestMapping("/vulnerability")
    public String findCVEs(@RequestParam("cve_id")String cveID){
        return vulnerabilityService.fuzzyFind(cveID);
    }

    @RequestMapping("/vulnerability/all-top-200")
    public String findAllCVEs(){
        return vulnerabilityService.findAllCVEs();
    }

    @RequestMapping("/cwe")
    public String findCWE(@RequestParam("cwe_id")String cweID){
        return vulnTypeService.fuzzyFindCWE(cweID);
    }

    @RequestMapping("/cwe/all")
    public String findAllCWE(){
        return vulnTypeService.findAll();
    }

    @RequestMapping("/cvss/all")
    public String findAllCVSS(){
        return cvssService.findAllCVSS();
    }

    @RequestMapping("/cvss")
    public String findCVSSBy(@RequestParam("cvss")String word){
        return cvssService.fuzzyFindCVSS(word);
    }

    @RequestMapping("/exploit/all-top-200")
    public String findAllExploit(){
        return exploitService.findAllExploit();
    }

    @RequestMapping("/exploit")
    public String findExploitByCVE(@RequestParam("cve_id")String cveID){
        return exploitService.findExploitByCVE(cveID);
    }

    @RequestMapping("/patch/all-top-200")
    public String findAllPatches(){
        return vulnPatchService.findAll();
    }

    @RequestMapping("/patchCVE")
    public String findPatchesByCVE(@RequestParam("cve_id")String cveID){
        return vulnPatchService.findPatchesByCVE(cveID);
    }

    @RequestMapping("/patchSoftware")
    public String findPatchesBySoftware(@RequestParam("software")String software){
        return vulnPatchService.findPatchesBySoftware(software);
    }

    @RequestMapping("/softwareVersion/all-top-200")
    public String findAllSoftwareVersion(){
        return softwareVersionService.findAll();
    }

    @RequestMapping("/software/all-top-200")
    public String findAllSoftware(){
        return softwareService.findAllSoftware();
    }

    @RequestMapping("/software")
    public String fuzzyFindSoftware(@RequestParam("software")String software){
        return softwareService.fuzzyFindSoftware(software);
    }

    @RequestMapping("/software/all-version")
    public String findSoftwareAllVersion(@RequestParam("software")String software){
        return softwareService.findSoftwareAllVersion(software);
    }

    @RequestMapping("/vendor/all-top-200")
    public String findAllVendor(){
        return softwareVendorService.findAll();
    }

    @RequestMapping("/vendor")
    public String fuzzyFindVendor(@RequestParam("vendor")String vendor){
        return softwareVendorService.fuzzyFindVendor(vendor);
    }

    @RequestMapping("/vendorSoftware")
    public String findVendorAllSoftware(@RequestParam("vendor")String vendor){
        return softwareVendorService.findVendorAllSoftware(vendor);
    }

    @RequestMapping("/addPatch")
    public String addPatch(@RequestParam("file") MultipartFile file, @RequestParam("cve_id")String cveID, @RequestParam("software")String software){
        return vulnPatchService.addPatch(file, cveID, software);
    }

    @RequestMapping("/addExploit")
    public String addExploit(@RequestParam("file") MultipartFile file, @RequestParam("cve_id")String cveID, @RequestParam("description")String description){
        return exploitService.addExploit(file, cveID, description);
    }

    @RequestMapping("/test/software")
    public List<Software> findSoftware(@RequestParam("name")String name){
        return softwareService.findSoftware(name);
    }


    @RequestMapping("/test/findCVERelation")
    public String findCVERelations(@RequestParam("cve_id") String cveID){
        return vulnerabilityService.findAllRelations(cveID);
    }

}
