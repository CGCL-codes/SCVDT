import urllib
from urllib import request
from urllib import error
import socket
from bs4 import BeautifulSoup
import os
import pymysql

from common.config import EXPLOIT_DIR, LOG_DIR
from common.io import write_log
from data_process.crawl import spider, exploit_bs4_html
from graph_process.database import query_vulnerability, add_exploit, add_relation


def download_exploit(cve, eid):
    url = 'https://www.exploit-db.com/download/' + str(eid)
    try:
        r = request.urlopen(url, timeout=10)
    except socket.timeout as e:
        file = r'{0}/exploit-log.txt'.format(LOG_DIR)
        info = 'download error, socket.timeout'
        write_log(file, info)
        return 'error'
    except error.URLError as e:
        file = r'{0}/exploit-log.txt'.format(LOG_DIR)
        info = 'download error, URLError'
        write_log(file, info)
        return 'error'
    file_name = ''
    os.chdir(EXPLOIT_DIR)
    if not os.path.exists(cve):
        os.mkdir(cve)
    os.chdir(cve)
    try:
        if 'Content-Disposition' in r.info():
            file_name = r.info()['Content-Disposition'].split('filename=')[1]
            file_name = file_name.replace('"', '').replace("'", "")
    except:
        file_name = url.split('/')[-1] + '.txt'
    socket.setdefaulttimeout(30)
    try:
        request.urlretrieve(url, file_name)
    except socket.timeout:
        count = 1
        while count <= 5:
            try:
                request.urlretrieve(url, file_name)
                break
            except socket.timeout:
                err_info = 'Reloading for %d time' % count if count == 1 else 'Reloading for %d times' % count
                print(err_info)
                count += 1
        if count > 5:
            print("download job failed!")
            file = r'{0}/exploit-log.txt'.format(LOG_DIR)
            info = '{0} download error'.format(eid)
            write_log(file, info)
            file_name = 'null'
    return file_name


def add_to_mysql(exploit):
    connection = pymysql.connect(host='127.0.0.1', user='root', passwd='123456', port=3306, db='test',
                                 charset='utf8')
    cursor = connection.cursor()
    sql = "insert into exploit_graph(CVE_ID,EDB_ID,URL,Description,Code_File) values(%s,%s,%s,%s,%s)"
    result = cursor.execute(sql,
                            [exploit.cve_id, str(exploit.eid), exploit.url, exploit.description, exploit.code_file])
    connection.commit()
    cursor.close()
    connection.close()
    return result


def get_exploit():
    urlbase = 'https://www.exploit-db.com/exploits/'
    for i in range(1, 50000):
        url = urlbase + str(i) + '/'
        print('[+]' + url)
        html = spider(url)
        if html[0:5] == 'error':
            file = r'{0}/exploit-log.txt'.format(LOG_DIR)
            info = str(i) + ' ' + html
            write_log(file, info)
            continue
        exploit = exploit_bs4_html(html)
        if exploit.eid == 0 or len(exploit.cve_id.split('-')) != 3:
            continue
        exploit.setUrl('https://www.exploit-db.com/exploits/' + str(i))
        file_name = download_exploit(exploit.cve_id, exploit.eid)
        if file_name == 'error':
            file_name = 'null'
        exploit.setCodeFile(r'{0}\{1}\{2}'.format(EXPLOIT_DIR, exploit.cve_id, file_name))
        try:
            add_to_mysql(exploit)
        except Exception as e:
            file = r'{0}/exploit-log.txt'.format(LOG_DIR)
            info = str(i) + ' ' + 'error, Unknow'
            write_log(file, info)
            continue
        print(url + ' OK ')


def add_to_graph(id):
    connection = pymysql.connect(host='127.0.0.1', user='root', passwd='123456', port=3306, db='test',
                                 charset='utf8')
    cursor = connection.cursor()
    sql = "select * from exploit_graph where ID >= %s"
    cursor.execute(sql, id)
    results = cursor.fetchall()
    for result in results:
        cve_id = result[1]
        url = result[3]
        description = result[4]
        code_file = result[5].replace('\\', '/')
        if 'null' in code_file:
            code_file = 'null'
        print(cve_id, url, description, code_file)
        node = query_vulnerability(cve_id)
        if node is None or len(node) == 0:
            log_file = r'{0}/add-exploit-log.txt'.format(LOG_DIR)
            write_log(log_file, '{0} not exists in knowledge graph.'.format(cve_id))
            continue
        vuln_node = node[0]['a']
        exploit_node = add_exploit(url, description, code_file)
        add_relation(vuln_node, 'has', exploit_node)
    cursor.close()
    connection.close()


if __name__ == '__main__':
    # download_exploit('CVE-2016-4437', 48410)
    get_exploit()
    add_to_graph(0)
