import os
import json
import traceback
import pandas as pd

from common import config
from common.config import NVD_FEEDS_DIR, LOG_DIR, BASE_DIR
from common.models import Vulnerability, VulnType, CVSS, Software
from graph_process.database import query_vulnerability, add_vulnerability, query_vuln_type, add_vuln_type, add_relation, \
    query_cvss, add_cvss, query_software_version, query_software, query_vendor, add_software_version, add_software, \
    add_vendor, set_cwe_description

'''
解析CPE获得软件名、软件版本和软件厂商
注意：不能简单用:分割，因为存在两个冒号并列的特殊情况
'''


def parse_cpe(cpe):
    # string = 'cpe:2.3:a:convert::asn1_project:convert::asn1:*:*:*:*:*:perl:*:*'
    # string = 'cpe:2.3:a:moodle:moodle:2.5.0:*:*:*:*:*:*:*'
    cpe = cpe.replace('\\', '')
    temp = cpe[10:]
    vendor_name = ''
    software_name = ''
    software_version = ''
    flag = 0
    i = 0
    while i < len(temp):
        if temp[i] == ':':
            if i + 1 < len(temp) and temp[i + 1] == ':':
                if flag == 0:
                    vendor_name += '::'
                elif flag == 1:
                    software_name += '::'
                else:
                    software_version += '::'
                i += 1
            else:
                if flag == 2:
                    break
                else:
                    flag += 1
        else:
            if flag == 0:
                vendor_name += temp[i]
            elif flag == 1:
                software_name += temp[i]
            else:
                software_version += temp[i]
        i += 1
    return vendor_name, software_name, software_version


'''
解析NVD的json文件，并将漏洞基本信息、影响的软件信息等导入知识图谱
'''


def parse_nvd(json_path):
    try:
        print('[+] Parse the nvd feeds: {0}'.format(json_path.split('/')[-1]))
        with open(json_path, 'r', encoding='utf-8') as f:
            json_obj = json.load(f)
            cve_dict = json_obj["CVE_Items"]
            for cve in cve_dict:
                cve_id = cve["cve"]["CVE_data_meta"]["ID"]
                # 判断该结点是否存在
                result = query_vulnerability(cve_id)
                if len(result) != 0:
                    print(cve_id, 'exist in neo4j database.')
                    continue
                vulnerability = Vulnerability()
                vuln_type = VulnType()
                cvss = CVSS()
                softwares = []
                vulnerability.setCveId(cve_id)
                link = 'https://nvd.nist.gov/vuln/detail/' + cve_id
                vulnerability.setLink(link)
                try:
                    author = cve["cve"]["CVE_data_meta"]["ASSIGNER"]
                except Exception as e:
                    # print(e)
                    # traceback.print_exc()
                    author = "null"
                try:
                    description = cve["cve"]["description"]["description_data"][0]["value"].strip()
                except Exception as e:
                    # print(e)
                    # traceback.print_exc()
                    description = "null"
                try:
                    publish_time = cve["publishedDate"]
                    # 将utc时间字符串转换成本地时间
                    # utc_date = datetime.datetime.strptime(publish_date, "%Y-%m-%dT%H:%MZ")
                    # local_date = utc_date + datetime.timedelta(hours=8)
                    # publish_date = datetime.datetime.strftime(local_date, '%Y-%m-%d %H:%M')
                except Exception as e:
                    # print(e)
                    # traceback.print_exc()
                    publish_date = "null"
                try:
                    cwe_id = cve["cve"]["problemtype"]["problemtype_data"][0]["description"][0]["value"]
                except Exception as e:
                    # print(e)
                    # traceback.print_exc()
                    cwe_id = "null"
                try:
                    cvssScore = cve["impact"]["baseMetricV2"]["cvssV2"]["baseScore"]
                except Exception as e:
                    # print(e)
                    # traceback.print_exc()
                    cvssScore = 0.0
                try:
                    vector = cve["impact"]["baseMetricV2"]["cvssV2"]["vectorString"]
                except Exception as e:
                    # print(e)
                    # traceback.print_exc()
                    vector = "null"
                try:
                    nodes = cve["configurations"]["nodes"]
                    # 避免重复计数
                    tempSet = []
                    for node in nodes:
                        operator = node["operator"]
                        if operator == "OR":
                            cpe_match = node["cpe_match"]
                            for item in cpe_match:
                                software_info = item["cpe23Uri"]
                                flag = software_info.split(":")[2]
                                if flag not in ["o", "a"]:
                                    continue
                                vendor, software_name, software_version = parse_cpe(software_info)
                                if software_version is None or software_version == '*':
                                    if "versionEndIncluding" in item:
                                        software_version = item["versionEndIncluding"].strip().replace('\\', '')
                                    elif "versionEndExcluding" in item:
                                        software_version = item["versionEndExcluding"].strip().replace('\\', '')
                                    else:
                                        software_version = 'null'
                                software_info = flag + "#" + vendor + ":" + software_name + ":" + software_version
                                if software_info in tempSet:
                                    continue
                                tempSet.append(software_info)
                                software = Software()
                                software.setSoftwareName(software_name)
                                software.setVersion(software_version)
                                software.setVendor(vendor)
                                softwares.append(software)
                        # 有 operator:"and"属性就有children标签，要再往里面套一层获取软件名
                        elif operator == "AND":
                            # print('have children')
                            childrens = node["children"]
                            for children in childrens:
                                cpe_match = children["cpe_match"]
                                for item in cpe_match:
                                    software_info = item["cpe23Uri"]
                                    flag = software_info.split(":")[2]
                                    if flag not in ["o", "a"]:
                                        continue
                                    vendor, software_name, software_version = parse_cpe(software_info)
                                    if software_version == None or software_version == '*':
                                        if "versionEndIncluding" in item:
                                            software_version = item["versionEndIncluding"].strip().replace('\\', '')
                                        elif "versionEndExcluding" in item:
                                            software_version = item["versionEndExcluding"].strip().replace('\\', '')
                                        else:
                                            software_version = 'null'
                                    software_info = flag + "#" + vendor + ":" + software_name + ":" + software_version
                                    if software_info in tempSet:
                                        continue
                                    tempSet.append(software_info)
                                    software = Software()
                                    software.setSoftwareName(software_name)
                                    software.setVersion(software_version)
                                    software.setVendor(vendor)
                                    softwares.append(software)
                except Exception as e:
                    # print(e)
                    # traceback.print_exc()
                    software_info = "none"
                vulnerability.setAuthor(author)
                vulnerability.setDescription(description)
                vulnerability.setPublishedTime(publish_time)
                vuln_node = add_vulnerability(vulnerability)
                vuln_type.setCweId(cwe_id)
                result = query_vuln_type(cwe_id)
                if len(result) == 0:
                    vuln_type_node = add_vuln_type(vuln_type)
                else:
                    vuln_type_node = result[0]['a']
                add_relation(vuln_node, 'has', vuln_type_node)
                cvss.setBaseScore(cvssScore)
                cvss.setVector(vector)
                print(cve_id)
                cvss_node = query_cvss(cvss)
                if cvss_node is None:
                    cvss_node = add_cvss(cvss)
                # else:
                #     cvss_node = result[0]['a']
                add_relation(vuln_node, 'has', cvss_node)
                for software in softwares:
                    software_version_node = query_software_version(software)
                    software_node = query_software(software)
                    software_vendor_node = query_vendor(software.vendor)
                    if software_version_node is None:
                        software_version_node = add_software_version(software)
                    if software_node is None:
                        software_node = add_software(software)
                    if software_vendor_node is None:
                        software_vendor_node = add_vendor(software.vendor)
                    add_relation(vuln_node, "affect", software_version_node)
                    add_relation(software_version_node, "belong to", software_node)
                    add_relation(software_node, "belong to", software_vendor_node)
        print('Successfully finished parse the nvd feed: {0}'.format(json_path.split('/')[-1]))
    except Exception as e:
        print('[-] Parse {0} error.'.format(json_path.split('/')[-1]))
        f = open(r'{0}/errors.log'.format(LOG_DIR), 'a')
        print(e, file=f)
        traceback.print_exc(file=f)
        f.close()


def create_nvd_graph():
    for i in range(2002, 2021):
        json_path = '{0}/nvdcve-1.1-{1}.json'.format(NVD_FEEDS_DIR, i)
        if not os.path.exists(json_path):
            continue
        parse_nvd(json_path)


def checkCWE():
    excel_file = config.CWE_DATA_DIR
    dataframe = pd.read_excel(excel_file)
    cwes = dict()
    for index, data in dataframe.iterrows():
        cwes[data['cwe_id']] = data['vulnerability_type']
    csv_file = r'D:\下载\export.csv'
    dataframe = pd.read_csv(csv_file)
    for data in dataframe['m.cwe_id']:
        if data not in cwes:
            print(data)
        else:
            print(str(data) + '\t' + str(cwes[data]))


def get_cwe_description():
    cwe_file = '{0}/cwe-info.xlsx'.format(BASE_DIR)
    dataframe = pd.read_excel(cwe_file)
    for index, data in dataframe.iterrows():
        cwe_id = data['cwe_id']
        description = data['description']
        if cwe_id is None or type(cwe_id) is float:
            cwe_id = 'null'
        if description is None or type(description) is float:
            description = 'null'
        # print(cwe_id + '\t' + description)
        set_cwe_description(cwe_id, description)


if __name__ == '__main__':
    create_nvd_graph()
    # get_cwe_description()
