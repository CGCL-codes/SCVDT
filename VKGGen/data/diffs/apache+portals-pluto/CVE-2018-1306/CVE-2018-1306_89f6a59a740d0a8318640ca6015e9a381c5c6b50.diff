diff --git a/PortletV3AnnotatedDemo/src/main/java/org/apache/portals/samples/MultipartPortlet.java b/PortletV3AnnotatedDemo/src/main/java/org/apache/portals/samples/MultipartPortlet.java
index 8b1b01c68..b0a1042bc 100644
--- a/PortletV3AnnotatedDemo/src/main/java/org/apache/portals/samples/MultipartPortlet.java
+++ b/PortletV3AnnotatedDemo/src/main/java/org/apache/portals/samples/MultipartPortlet.java
@@ -26,6 +26,8 @@
 import java.io.InputStream;
 import java.io.InputStreamReader;
 import java.io.OutputStream;
+import java.io.PrintWriter;
+import java.io.StringWriter;
 import java.nio.file.Files;
 import java.nio.file.StandardCopyOption;
 import java.util.ArrayList;
@@ -60,7 +62,7 @@
    private static final Logger LOGGER = Logger.getLogger(MultipartPortlet.class.getName());
 
    private static final String JSP    = "/WEB-INF/jsp/multipartDialog.jsp";
-   private static final String TMP    = "/temp/";
+   private static final String TMP    = "/MultipartPortlet/temp/";
 
    @ActionMethod(portletName = "MultipartPortlet")
    public void handleDialog(ActionRequest req, ActionResponse resp) throws IOException, PortletException {
@@ -107,19 +109,10 @@ public void handleDialog(ActionRequest req, ActionResponse resp) throws IOExcept
          // quick solution that doesn't require additional Tomcat configuration.
 
          try {
-            String path = req.getPortletContext().getRealPath(TMP);
-            File dir = new File(path);
-            lines.add("Temp path: " + dir.getCanonicalPath());
-            if (!dir.exists()) {
-               lines.add("Creating directory. Path: " + dir.getCanonicalPath());
-               Files.createDirectories(dir.toPath());
-            }
-            String fn = TMP + part.getSubmittedFileName();
-            lines.add("Temp file: " + fn);
-            path = req.getPortletContext().getRealPath(fn);
-            File img = new File(path);
+            String fn = part.getSubmittedFileName();
+            File img = getFile(fn);
             if (img.exists()) {
-               lines.add("deleting existing temp file.");
+               lines.add("deleting existing temp file: " + img.getCanonicalPath());
                img.delete();
             }
             InputStream is = part.getInputStream();
@@ -130,6 +123,15 @@ public void handleDialog(ActionRequest req, ActionResponse resp) throws IOExcept
 
          } catch (Exception e) {
             lines.add("Exception doing I/O: " + e.toString());
+            
+            txt.setLength(0);
+            txt.append("Problem getting temp file: " + e.getMessage() + "\n");
+            StringWriter sw = new StringWriter();
+            PrintWriter pw = new PrintWriter(sw);
+            e.printStackTrace(pw);
+            pw.flush();
+            txt.append(sw.toString());
+            LOGGER.warning(txt.toString());
          }
       } else {
          lines.add("file part was null");
@@ -172,8 +174,7 @@ public void render(RenderRequest req, RenderResponse resp) throws PortletExcepti
          FileInputStream fis = null;
          BufferedReader rdr = null;
          try {
-            String path = req.getPortletContext().getRealPath(fn);
-            File file = new File(path);
+            File file = getFile(fn);
             fis = new FileInputStream(file);
 
             if (ct.equals("text/plain")) {
@@ -232,10 +233,45 @@ public void serveImage(ResourceRequest req, ResourceResponse resp) throws IOExce
       
       resp.setContentType(ct);
 
-      String path = req.getPortletContext().getRealPath(fn);
-      File file = new File(path);
-      OutputStream os = resp.getPortletOutputStream();
-      Files.copy(file.toPath(), os);
-      os.flush();
+      try {
+         File file = getFile(fn);
+         OutputStream os = resp.getPortletOutputStream();
+         Files.copy(file.toPath(), os);
+         os.flush();
+      } catch (Exception e) {
+         StringBuilder txt = new StringBuilder(128);
+         txt.append("Problem retrieving temp file: " + e.getMessage() + "\n");
+         StringWriter sw = new StringWriter();
+         PrintWriter pw = new PrintWriter(sw);
+         e.printStackTrace(pw);
+         pw.flush();
+         txt.append(sw.toString());
+         LOGGER.warning(txt.toString());
+      }
+      
+   }
+
+   /**
+    * Returns a File object representing the uploaded temporary file location. Note that the file may or may not exist.
+    * The temp directories are created as necessary.
+    * 
+    * @param fn
+    *           the file name
+    * @return the File object
+    * @throws IOException 
+    */
+   private File getFile(String fn) throws IOException {
+      File tmp = null;
+
+      String path = System.getProperty("java.io.tmpdir") + TMP;
+      File dir = new File(path);
+      if (!dir.exists()) {
+         LOGGER.fine("Creating directory. Path: " + dir.getCanonicalPath());
+         Files.createDirectories(dir.toPath());
+      }
+      tmp = new File(dir, fn);
+      LOGGER.fine("Temp file: " + tmp.getCanonicalPath());
+
+      return tmp;
    }
 }
