diff --git a/pom.xml b/pom.xml
index 7e069e333..f7ecbb649 100644
--- a/pom.xml
+++ b/pom.xml
@@ -45,6 +45,7 @@
 
 	<properties>
 		<wicket.version>7.9.0</wicket.version>
+		<owasp-sanitizer.version>20171016.1</owasp-sanitizer.version>
 		<junit.version>4.12</junit.version>
 		<jetty.version>8.1.16.v20140903</jetty.version>
 		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
diff --git a/wicket-jquery-ui-plugins/pom.xml b/wicket-jquery-ui-plugins/pom.xml
index cebf85026..f8ac35d5a 100644
--- a/wicket-jquery-ui-plugins/pom.xml
+++ b/wicket-jquery-ui-plugins/pom.xml
@@ -43,7 +43,7 @@
 		<dependency>
 			<groupId>com.googlecode.owasp-java-html-sanitizer</groupId>
 			<artifactId>owasp-java-html-sanitizer</artifactId>
-			<version>20171016.1</version>
+			<version>${owasp-sanitizer.version}</version>
 		</dependency>
 
 		<!-- JUNIT DEPENDENCY FOR TESTING -->
diff --git a/wicket-jquery-ui-plugins/src/main/java/com/googlecode/wicket/jquery/ui/plugins/wysiwyg/WysiwygEditor.java b/wicket-jquery-ui-plugins/src/main/java/com/googlecode/wicket/jquery/ui/plugins/wysiwyg/WysiwygEditor.java
index 51ff60602..fbec3c8ea 100644
--- a/wicket-jquery-ui-plugins/src/main/java/com/googlecode/wicket/jquery/ui/plugins/wysiwyg/WysiwygEditor.java
+++ b/wicket-jquery-ui-plugins/src/main/java/com/googlecode/wicket/jquery/ui/plugins/wysiwyg/WysiwygEditor.java
@@ -114,29 +114,13 @@ public String getEditorMarkupId()
 
 	// Methods //
 
-	/**
-	 * Gets a new {@link PolicyFactory} to sanitize editor input
-	 * 
-	 * @return a new {@code PolicyFactory}
-	 */
-	protected PolicyFactory newPolicyFactory()
-	{
-		return new HtmlPolicyBuilder() // lf
-				.allowCommonInlineFormattingElements() // lf
-				.allowCommonBlockElements() // lf
-				.allowElements("a").allowAttributes("href", "target").onElements("a") // lf
-				.allowAttributes("size").onElements("font") // lf
-				.allowAttributes("class", "style").globally() // lf
-				.toFactory();
-	}
-
 	@Override
 	public void convertInput()
 	{
-		final PolicyFactory policy = this.newPolicyFactory();
-		final String html = this.textarea.getConvertedInput();
+		final PolicyFactory policy = newPolicyFactory();
+		final String input = this.textarea.getConvertedInput();
 
-		this.setConvertedInput(policy.sanitize(html));
+		this.setConvertedInput(policy.sanitize(input));
 	}
 
 	@Override
@@ -201,4 +185,20 @@ protected void onComponentTag(ComponentTag tag)
 			}
 		};
 	}
+
+	/**
+	 * Gets a new {@link PolicyFactory} to sanitize editor input
+	 * 
+	 * @return a new {@code PolicyFactory}
+	 */
+	protected static PolicyFactory newPolicyFactory()
+	{
+		return new HtmlPolicyBuilder() // lf
+				.allowCommonInlineFormattingElements() // lf
+				.allowCommonBlockElements() // lf
+				.allowElements("a").allowAttributes("href", "target").onElements("a") // lf
+				.allowAttributes("size").onElements("font") // lf
+				.allowAttributes("class", "style").globally() // lf
+				.toFactory();
+	}
 }
diff --git a/wicket-jquery-ui-samples/src/main/java/com/googlecode/wicket/jquery/ui/samples/kendoui/editor/DefaultEditorPage.java b/wicket-jquery-ui-samples/src/main/java/com/googlecode/wicket/jquery/ui/samples/kendoui/editor/DefaultEditorPage.java
index 2ec2a06cb..89d2a7f93 100644
--- a/wicket-jquery-ui-samples/src/main/java/com/googlecode/wicket/jquery/ui/samples/kendoui/editor/DefaultEditorPage.java
+++ b/wicket-jquery-ui-samples/src/main/java/com/googlecode/wicket/jquery/ui/samples/kendoui/editor/DefaultEditorPage.java
@@ -21,7 +21,7 @@ public DefaultEditorPage()
 		form.add(feedback);
 
 		// ComboBox //
-		final Editor<String> editor = new Editor<String>("editor", Model.of("<p>test</p>"));
+		final Editor editor = new Editor("editor", Model.of("<p>test</p>"));
 		form.add(editor.setEscapeModelStrings(false));
 
 		// Buttons //
diff --git a/wicket-kendo-ui/pom.xml b/wicket-kendo-ui/pom.xml
index be8905bbe..7e1cfa1a2 100644
--- a/wicket-kendo-ui/pom.xml
+++ b/wicket-kendo-ui/pom.xml
@@ -39,6 +39,13 @@
 			<scope>provided</scope>
 		</dependency>
 
+		<!-- SANITIZER DEPENDENCIES -->
+		<dependency>
+			<groupId>com.googlecode.owasp-java-html-sanitizer</groupId>
+			<artifactId>owasp-java-html-sanitizer</artifactId>
+			<version>${owasp-sanitizer.version}</version>
+		</dependency>
+
 		<!-- JUNIT DEPENDENCY FOR TESTING -->
 		<dependency>
 			<groupId>junit</groupId>
diff --git a/wicket-kendo-ui/src/main/java/com/googlecode/wicket/kendo/ui/widget/editor/Editor.java b/wicket-kendo-ui/src/main/java/com/googlecode/wicket/kendo/ui/widget/editor/Editor.java
index f765047da..8876dfd3b 100644
--- a/wicket-kendo-ui/src/main/java/com/googlecode/wicket/kendo/ui/widget/editor/Editor.java
+++ b/wicket-kendo-ui/src/main/java/com/googlecode/wicket/kendo/ui/widget/editor/Editor.java
@@ -19,6 +19,8 @@
 import org.apache.wicket.markup.html.form.TextArea;
 import org.apache.wicket.model.IModel;
 import org.apache.wicket.util.lang.Args;
+import org.owasp.html.HtmlPolicyBuilder;
+import org.owasp.html.PolicyFactory;
 
 import com.googlecode.wicket.jquery.core.IJQueryWidget;
 import com.googlecode.wicket.jquery.core.JQueryBehavior;
@@ -30,10 +32,8 @@
  * It should be created on a HTML &lt;textarea /&gt; element
  *
  * @author Sebastien Briquet - sebfz1
- *
- * @param <T> the object model type
  */
-public class Editor<T> extends TextArea<T> implements IJQueryWidget
+public class Editor extends TextArea<String> implements IJQueryWidget
 {
 	private static final long serialVersionUID = 1L;
 	public static final String METHOD = "kendoEditor";
@@ -41,8 +41,7 @@
 	protected final Options options;
 
 	/**
-	 * Constructor that provides a default {@link Options} that indicates the {@link Editor}
-	 * should submit encoded HTML tags (<code>{ encoded: false }</code>)
+	 * Constructor that provides a default {@link Options} that indicates the {@link Editor} should submit encoded HTML tags (<code>{ encoded: false }</code>)
 	 *
 	 * @param id the markup id
 	 */
@@ -65,13 +64,12 @@ public Editor(String id, Options options)
 	}
 
 	/**
-	 * Constructor that provides a default {@link Options} that indicates the {@link Editor}
-	 * should submit encoded HTML tags (<code>{ encoded: false }</code>)
+	 * Constructor that provides a default {@link Options} that indicates the {@link Editor} should submit encoded HTML tags (<code>{ encoded: false }</code>)
 	 *
 	 * @param id the markup id
 	 * @param model the {@link IModel}
 	 */
-	public Editor(String id, IModel<T> model)
+	public Editor(String id, IModel<String> model)
 	{
 		this(id, model, new Options("encoded", false));
 	}
@@ -83,13 +81,28 @@ public Editor(String id, IModel<T> model)
 	 * @param model the {@link IModel}
 	 * @param options the {@link Options}
 	 */
-	public Editor(String id, IModel<T> model, Options options)
+	public Editor(String id, IModel<String> model, Options options)
 	{
 		super(id, model);
 
 		this.options = Args.notNull(options, "options");
 	}
 
+	// Methods //
+
+	@Override
+	public void convertInput()
+	{
+		super.convertInput();
+
+		final PolicyFactory policy = newPolicyFactory();
+		final String input = this.getConvertedInput();
+
+		this.setConvertedInput(policy.sanitize(input));
+	}
+
+	// Events //
+
 	@Override
 	protected void onInitialize()
 	{
@@ -112,10 +125,28 @@ public void onBeforeRender(JQueryBehavior behavior)
 	}
 
 	// IJQueryWidget //
+
 	@Override
 	public JQueryBehavior newWidgetBehavior(String selector)
 	{
 		return new KendoUIBehavior(selector, Editor.METHOD, this.options);
 	}
 
+	// Factories //
+
+	/**
+	 * Gets a new {@link PolicyFactory} to sanitize editor input
+	 * 
+	 * @return a new {@code PolicyFactory}
+	 */
+	protected static PolicyFactory newPolicyFactory()
+	{
+		return new HtmlPolicyBuilder() // lf
+				.allowCommonInlineFormattingElements() // lf
+				.allowCommonBlockElements() // lf
+				.allowElements("a").allowAttributes("href", "target").onElements("a") // lf
+				.allowAttributes("size").onElements("font") // lf
+				.allowAttributes("class", "style").globally() // lf
+				.toFactory();
+	}
 }
