diff --git a/README.md b/README.md
index 637555bcf..5775a5560 100644
--- a/README.md
+++ b/README.md
@@ -18,7 +18,7 @@ Once done, just include the jar(s) in your project's build path.
 <dependency>
     <groupId>com.googlecode.wicket-jquery-ui</groupId>
     <artifactId>wicket-jquery-ui</artifactId>
-    <version>7.8.0</version>
+    <version>7.9.0</version>
 </dependency>
 ```
 
@@ -48,7 +48,6 @@ If the version you specified is *snapshot*, you might define this repository:
 <tr><td>8.0.0-M3</td><td>8.0.0-M3</td><td>1.12.1</td></tr>
 <tr><td>8.0.0-M2</td><td>8.0.0-M2</td><td>1.12.0</td></tr>
 <tr><td>8.0.0-M1</td><td>8.0.0-M1</td><td>1.12.0</td></tr>
-<tr><td>7.9.1</td><td>7.9.1</td><td>1.12.1</td></tr>
 <tr><td>7.9.0</td><td>7.9.0</td><td>1.12.1</td></tr>
 <tr><td>7.8.0</td><td>7.8.0</td><td>1.12.1</td></tr>
 <tr><td>7.7.0</td><td>7.7.0</td><td>1.12.1</td></tr>
@@ -96,6 +95,7 @@ If the version you specified is *snapshot*, you might define this repository:
 <tr><td>8.0.0-M3</td><td>8.0.0-M3</td><td>2016.3.1118 (ASFv2)</td></tr>
 <tr><td>8.0.0-M2</td><td>8.0.0-M2</td><td>2016.3.1028 (ASFv2)</td></tr>
 <tr><td>8.0.0-M1</td><td>8.0.0-M1</td><td>2016.2.714 (ASFv2)</td></tr>
+<tr><td>7.9.0</td><td>7.9.0</td><td>2017.2.621 (ASFv2)</td></tr>
 <tr><td>7.8.0</td><td>7.8.0</td><td>2017.2.621 (ASFv2)</td></tr>
 <tr><td>7.7.0</td><td>7.7.0</td><td>2017.1.223 (ASFv2)</td></tr>
 <tr><td>7.6.0</td><td>7.6.0</td><td>2016.3.1118 (ASFv2)</td></tr>
@@ -142,7 +142,7 @@ To use wicket-jquery-ui with a standard theme, just add the corresponding theme
 <dependency>
 	<groupId>com.googlecode.wicket-jquery-ui</groupId>
 	<artifactId>wicket-jquery-ui-theme-uilightness</artifactId>
-	<version>7.8.0</version>
+	<version>7.9.0</version>
 </dependency>
 ```
 
diff --git a/wicket-jquery-ui-core/src/main/java/com/googlecode/wicket/jquery/core/ajax/AjaxPayload.java b/wicket-jquery-ui-core/src/main/java/com/googlecode/wicket/jquery/core/ajax/AjaxPayload.java
index 5097256c0..283f9683e 100644
--- a/wicket-jquery-ui-core/src/main/java/com/googlecode/wicket/jquery/core/ajax/AjaxPayload.java
+++ b/wicket-jquery-ui-core/src/main/java/com/googlecode/wicket/jquery/core/ajax/AjaxPayload.java
@@ -24,7 +24,9 @@
  * 
  * @author Sebastien Briquet - sebfz1
  * @see Component#send(org.apache.wicket.event.IEventSink, org.apache.wicket.event.Broadcast, Object)
+ * @deprecated use {@link HandlerPayload} instead
  */
+@Deprecated
 public class AjaxPayload
 {
 	private final AjaxRequestTarget target;
diff --git a/wicket-jquery-ui-core/src/main/java/com/googlecode/wicket/jquery/core/ajax/FeedbackPayload.java b/wicket-jquery-ui-core/src/main/java/com/googlecode/wicket/jquery/core/ajax/FeedbackPayload.java
index e09957cce..50f2c6d35 100644
--- a/wicket-jquery-ui-core/src/main/java/com/googlecode/wicket/jquery/core/ajax/FeedbackPayload.java
+++ b/wicket-jquery-ui-core/src/main/java/com/googlecode/wicket/jquery/core/ajax/FeedbackPayload.java
@@ -18,6 +18,7 @@
 
 import org.apache.wicket.Component;
 import org.apache.wicket.ajax.AjaxRequestTarget;
+import org.apache.wicket.core.request.handler.IPartialPageRequestHandler;
 import org.apache.wicket.feedback.FeedbackMessage;
 
 /**
@@ -33,15 +34,15 @@
  * 	if (event.getPayload() instanceof FeedbackPayload)
  * 	{
  * 		FeedbackPayload payload = (FeedbackPayload) event.getPayload();
+ * 		IPartialPageRequestHandler handler = payload.getHandler();
  * 		String message = payload.getMessage();
- * 		AjaxRequestTarget target = payload.getTarget();
  *
  * 		if (payload.getLevel() == FeedbackMessage.DEBUG)
  * 		{
  * 			this.debug(message);
  * 		}
  *
- * 		target.add(feedback);
+ * 		handler.add(feedback);
  * 	}
  * }
  * </code>
@@ -51,7 +52,7 @@
  * @see Component#send(org.apache.wicket.event.IEventSink, org.apache.wicket.event.Broadcast, Object)
  *
  */
-public class FeedbackPayload extends AjaxPayload
+public class FeedbackPayload extends HandlerPayload
 {
 	private final String message;
 	private final int level;
@@ -59,23 +60,23 @@
 	/**
 	 * Constructor, designed to only refresh
 	 * 
-	 * @param target the {@link AjaxRequestTarget}
+	 * @param handler the {@link AjaxRequestTarget}
 	 */
-	public FeedbackPayload(AjaxRequestTarget target)
+	public FeedbackPayload(IPartialPageRequestHandler handler)
 	{
-		this(target, FeedbackMessage.UNDEFINED, null);
+		this(handler, FeedbackMessage.UNDEFINED, null);
 	}
 
 	/**
 	 * Constructor
 	 * 
-	 * @param target the {@link AjaxRequestTarget}
+	 * @param handler the {@link AjaxRequestTarget}
 	 * @param level the level (ie: {@link FeedbackMessage#INFO}, etc)
 	 * @param message the message
 	 */
-	public FeedbackPayload(AjaxRequestTarget target, int level, String message)
+	public FeedbackPayload(IPartialPageRequestHandler handler, int level, String message)
 	{
-		super(target);
+		super(handler);
 
 		this.level = level;
 		this.message = message;
diff --git a/wicket-jquery-ui-core/src/main/java/com/googlecode/wicket/jquery/core/utils/BroadcastUtils.java b/wicket-jquery-ui-core/src/main/java/com/googlecode/wicket/jquery/core/utils/BroadcastUtils.java
index a8abd4de4..6556141d7 100644
--- a/wicket-jquery-ui-core/src/main/java/com/googlecode/wicket/jquery/core/utils/BroadcastUtils.java
+++ b/wicket-jquery-ui-core/src/main/java/com/googlecode/wicket/jquery/core/utils/BroadcastUtils.java
@@ -17,12 +17,15 @@
 package com.googlecode.wicket.jquery.core.utils;
 
 import org.apache.wicket.Component;
+import org.apache.wicket.Page;
+import org.apache.wicket.core.request.handler.IPartialPageRequestHandler;
 import org.apache.wicket.event.Broadcast;
 
 import com.googlecode.wicket.jquery.core.ajax.AjaxPayload;
+import com.googlecode.wicket.jquery.core.ajax.HandlerPayload;
 
 /**
- * Utility class for handling for broadcasting {@link AjaxPayload}{@code s}
+ * Utility class for handling for broadcasting {@link HandlerPayload}{@code s}
  * 
  * @author Sebastien Briquet - sebfz1
  *
@@ -43,41 +46,133 @@ private BroadcastUtils()
 	 * @param component the sink {@link Component}, likely a page
 	 * @param payload the {@link AjaxPayload}
 	 */
+	@Deprecated
 	public static void breadth(Component component, AjaxPayload payload)
 	{
 		component.send(component, Broadcast.BREADTH, payload);
 	}
 
+	/**
+	 * Sends an {@link HandlerPayload} in {@link Broadcast#BREADTH} mode
+	 * 
+	 * @param component the sink {@link Component}, likely a page
+	 * @param payload the {@link HandlerPayload}
+	 */
+	public static void breadth(Component component, HandlerPayload payload)
+	{
+		component.send(component, Broadcast.BREADTH, payload);
+	}
+
+	/**
+	 * Sends an {@link HandlerPayload} in {@link Broadcast#BREADTH} mode
+	 * 
+	 * @param handler the {@link IPartialPageRequestHandler} holding the sink {@link Page}
+	 * @param payload the {@link HandlerPayload}
+	 */
+	public static void breadth(IPartialPageRequestHandler handler, HandlerPayload payload)
+	{
+		BroadcastUtils.breadth((Page) handler.getPage(), payload);
+	}
+
 	/**
 	 * Sends an {@link AjaxPayload} in {@link Broadcast#BUBBLE} mode
 	 * 
 	 * @param component the sink {@link Component}
 	 * @param payload the {@link AjaxPayload}
 	 */
+	@Deprecated
 	public static void bubble(Component component, AjaxPayload payload)
 	{
 		component.send(component, Broadcast.BUBBLE, payload);
 	}
 
+	/**
+	 * Sends an {@link HandlerPayload} in {@link Broadcast#BUBBLE} mode
+	 * 
+	 * @param component the sink {@link Component}
+	 * @param payload the {@link HandlerPayload}
+	 */
+	public static void bubble(Component component, HandlerPayload payload)
+	{
+		component.send(component, Broadcast.BUBBLE, payload);
+	}
+
+	/**
+	 * Sends an {@link HandlerPayload} in {@link Broadcast#BUBBLE} mode
+	 * 
+	 * @param handler the {@link IPartialPageRequestHandler} holding the sink {@link Page}
+	 * @param payload the {@link HandlerPayload}
+	 */
+	public static void bubble(IPartialPageRequestHandler handler, HandlerPayload payload)
+	{
+		BroadcastUtils.bubble((Page) handler.getPage(), payload);
+	}
+
 	/**
 	 * Sends an {@link AjaxPayload} in {@link Broadcast#DEPTH} mode
 	 * 
 	 * @param component the sink {@link Component}
 	 * @param payload the {@link AjaxPayload}
 	 */
+	@Deprecated
 	public static void depth(Component component, AjaxPayload payload)
 	{
 		component.send(component, Broadcast.DEPTH, payload);
 	}
 
+	/**
+	 * Sends an {@link HandlerPayload} in {@link Broadcast#DEPTH} mode
+	 * 
+	 * @param component the sink {@link Component}
+	 * @param payload the {@link HandlerPayload}
+	 */
+	public static void depth(Component component, HandlerPayload payload)
+	{
+		component.send(component, Broadcast.DEPTH, payload);
+	}
+
+	/**
+	 * Sends an {@link HandlerPayload} in {@link Broadcast#DEPTH} mode
+	 * 
+	 * @param handler the {@link IPartialPageRequestHandler} holding the sink {@link Page}
+	 * @param payload the {@link HandlerPayload}
+	 */
+	public static void depth(IPartialPageRequestHandler handler, HandlerPayload payload)
+	{
+		BroadcastUtils.depth((Page) handler.getPage(), payload);
+	}
+
 	/**
 	 * Sends an {@link AjaxPayload} in {@link Broadcast#EXACT} mode
 	 * 
 	 * @param component the sink {@link Component}
 	 * @param payload the {@link AjaxPayload}
 	 */
+	@Deprecated
 	public static void exact(Component component, AjaxPayload payload)
 	{
 		component.send(component, Broadcast.EXACT, payload);
 	}
+
+	/**
+	 * Sends an {@link HandlerPayload} in {@link Broadcast#EXACT} mode
+	 * 
+	 * @param component the sink {@link Component}
+	 * @param payload the {@link HandlerPayload}
+	 */
+	public static void exact(Component component, HandlerPayload payload)
+	{
+		component.send(component, Broadcast.EXACT, payload);
+	}
+
+	/**
+	 * Sends an {@link HandlerPayload} in {@link Broadcast#EXACT} mode
+	 * 
+	 * @param handler the {@link IPartialPageRequestHandler} holding the sink {@link Page}
+	 * @param payload the {@link HandlerPayload}
+	 */
+	public static void exact(IPartialPageRequestHandler handler, HandlerPayload payload)
+	{
+		BroadcastUtils.exact((Page) handler.getPage(), payload);
+	}
 }
diff --git a/wicket-jquery-ui-core/src/main/java/com/googlecode/wicket/jquery/core/utils/FeedbackUtils.java b/wicket-jquery-ui-core/src/main/java/com/googlecode/wicket/jquery/core/utils/FeedbackUtils.java
index 9ffc02cc2..c21ac429e 100644
--- a/wicket-jquery-ui-core/src/main/java/com/googlecode/wicket/jquery/core/utils/FeedbackUtils.java
+++ b/wicket-jquery-ui-core/src/main/java/com/googlecode/wicket/jquery/core/utils/FeedbackUtils.java
@@ -16,8 +16,7 @@
  */
 package com.googlecode.wicket.jquery.core.utils;
 
-import org.apache.wicket.Component;
-import org.apache.wicket.ajax.AjaxRequestTarget;
+import org.apache.wicket.core.request.handler.IPartialPageRequestHandler;
 import org.apache.wicket.event.Broadcast;
 import org.apache.wicket.feedback.FeedbackMessage;
 import org.apache.wicket.markup.html.panel.FeedbackPanel;
@@ -28,6 +27,7 @@
 /**
  * Utility class for handling feedback session messages and feedback ajax messages.<br>
  * The hosting page should implement a code like:
+ * 
  * <pre>
  * <code>
  * public void onEvent(IEvent&lt;?&gt; event)
@@ -41,7 +41,7 @@
  *         if (payload.getLevel() == FeedbackMessage.INFO)
  *         {
  *             this.info(payload.getMessage());
- *             payload.getTarget().add(this.feedbackPanel);
+ *             payload.getHandler().add(this.feedbackPanel);
  *         }
  *     }
  * }
@@ -61,224 +61,265 @@ private FeedbackUtils()
 		// noop
 	}
 
-	// Session based //
-
 	/**
-	 * Register a debug at session level so the message is available even if the page is redirected
+	 * Aims to reload a {@link FeedbackPanel} using {@link Broadcast#BREADTH} mode.<br>
+	 * The hosting page should implement a code like:<br>
 	 * 
-	 * @param message the message
+	 * <pre>
+	 * <code>
+	 * public void onEvent(IEvent&lt;?&gt; event)
+	 * {
+	 *     super.onEvent(event);
+	 * 
+	 *     if (event.getPayload() instanceof FeedbackPayload)
+	 *     {
+	 *         FeedbackPayload payload = (FeedbackPayload) event.getPayload();
+	 * 
+	 *         if (payload.getLevel() == FeedbackMessage.UNDEFINED)
+	 *         {
+	 *             payload.getHandler().add(this.feedbackPanel);
+	 *         }
+	 *     }
+	 * }
+	 * </code>
+	 * </pre>
+	 * 
+	 * @param handler the {@link IPartialPageRequestHandler}
 	 */
-	public static void debug(String message)
+	public static void reload(IPartialPageRequestHandler handler)
 	{
-		WebSession.get().debug(message);
+		BroadcastUtils.breadth(handler, new FeedbackPayload(handler));
 	}
 
 	/**
-	 * Register an info at session level so the message is available even if the page is redirected
+	 * Register a debug at session level so the message is available even if the page is redirected
 	 * 
 	 * @param message the message
 	 */
-	public static void info(String message)
+	public static void debug(String message)
 	{
-		WebSession.get().info(message);
+		IPartialPageRequestHandler handler = RequestCycleUtils.getRequestHandler();
+
+		if (handler != null)
+		{
+			FeedbackUtils.debug(handler, message);
+		}
+		else
+		{
+			WebSession.get().debug(message);
+		}
 	}
 
 	/**
-	 * Register a success at session level so the message is available even if the page is redirected
+	 * Sends an ajax {@link FeedbackMessage#DEBUG} message to the hosting page
 	 * 
+	 * @param handler the {@link IPartialPageRequestHandler}
 	 * @param message the message
 	 */
-	public static void success(String message)
+	public static void debug(IPartialPageRequestHandler handler, String message)
 	{
-		WebSession.get().success(message);
+		BroadcastUtils.breadth(handler, new FeedbackPayload(handler, FeedbackMessage.DEBUG, message));
 	}
 
 	/**
-	 * Register a warn at session level so the message is available even if the page is redirected
+	 * Register an info at session level so the message is available even if the page is redirected
 	 * 
-	 * @param e the {@link Exception}
+	 * @param message the message
 	 */
-	public static void warn(Exception e)
+	public static void info(String message)
 	{
-		FeedbackUtils.warn(e.getMessage());
+		IPartialPageRequestHandler handler = RequestCycleUtils.getRequestHandler();
+
+		if (handler != null)
+		{
+			FeedbackUtils.info(handler, message);
+		}
+		else
+		{
+			WebSession.get().info(message);
+		}
 	}
 
 	/**
-	 * Register a warn at session level so the message is available even if the page is redirected
+	 * Sends an ajax {@link FeedbackMessage#INFO} message to the hosting page
 	 * 
+	 * @param handler the {@link IPartialPageRequestHandler}
 	 * @param message the message
 	 */
-	public static void warn(String message)
+	public static void info(IPartialPageRequestHandler handler, String message)
 	{
-		WebSession.get().warn(message);
+		BroadcastUtils.breadth(handler, new FeedbackPayload(handler, FeedbackMessage.INFO, message));
 	}
 
 	/**
-	 * Register an error at session level so the message is available even if the page is redirected
+	 * Register a success at session level so the message is available even if the page is redirected
 	 * 
-	 * @param e the {@link Exception}
+	 * @param message the message
 	 */
-	public static void error(Exception e)
+	public static void success(String message)
 	{
-		FeedbackUtils.error(e.getMessage());
+		IPartialPageRequestHandler handler = RequestCycleUtils.getRequestHandler();
+
+		if (handler != null)
+		{
+			FeedbackUtils.success(handler, message);
+		}
+		else
+		{
+			WebSession.get().success(message);
+		}
 	}
 
 	/**
-	 * Register an error at session level so the message is available even if the page is redirected
+	 * Sends an ajax {@link FeedbackMessage#SUCCESS} message to the hosting page
 	 * 
+	 * @param handler the {@link IPartialPageRequestHandler}
 	 * @param message the message
 	 */
-	public static void error(String message)
+	public static void success(IPartialPageRequestHandler handler, String message)
 	{
-		WebSession.get().error(message);
+		BroadcastUtils.breadth(handler, new FeedbackPayload(handler, FeedbackMessage.SUCCESS, message));
 	}
 
 	/**
-	 * Register a fatal at session level so the message is available even if the page is redirected
+	 * Register a warn at session level so the message is available even if the page is redirected
 	 * 
 	 * @param e the {@link Exception}
 	 */
-	public static void fatal(Exception e)
+	public static void warn(Exception e)
 	{
-		FeedbackUtils.error(e.getMessage());
+		FeedbackUtils.warn(e.getMessage());
 	}
 
 	/**
-	 * Register a fatal at session level so the message is available even if the page is redirected
+	 * Register a warn at session level so the message is available even if the page is redirected
 	 * 
 	 * @param message the message
 	 */
-	public static void fatal(String message)
+	public static void warn(String message)
 	{
-		WebSession.get().fatal(message);
-	}
+		IPartialPageRequestHandler handler = RequestCycleUtils.getRequestHandler();
 
-	// Ajax based //
+		if (handler != null)
+		{
+			FeedbackUtils.warn(handler, message);
+		}
+		else
+		{
+			WebSession.get().warn(message);
+		}
+	}
 
 	/**
-	 * Sends an ajax {@link FeedbackMessage#DEBUG} message to the hosting page
+	 * Sends an ajax {@link FeedbackMessage#WARNING} message to the hosting page
 	 * 
-	 * @param component the {@link Component} sending the event
-	 * @param target the {@link AjaxRequestTarget}
+	 * @param handler the {@link IPartialPageRequestHandler}
 	 * @param message the message
 	 */
-	public static void debug(Component component, AjaxRequestTarget target, String message)
+	public static void warn(IPartialPageRequestHandler handler, String message)
 	{
-		BroadcastUtils.breadth(component.getPage(), new FeedbackPayload(target, FeedbackMessage.DEBUG, message));
+		BroadcastUtils.breadth(handler, new FeedbackPayload(handler, FeedbackMessage.WARNING, message));
 	}
 
 	/**
-	 * Sends an ajax {@link FeedbackMessage#INFO} message to the hosting page
+	 * Register an error at session level so the message is available even if the page is redirected
 	 * 
-	 * @param component the {@link Component} sending the event
-	 * @param target the {@link AjaxRequestTarget}
-	 * @param message the message
+	 * @param e the {@link Exception}
 	 */
-	public static void info(Component component, AjaxRequestTarget target, String message)
+	public static void error(Exception e)
 	{
-		BroadcastUtils.breadth(component.getPage(), new FeedbackPayload(target, FeedbackMessage.INFO, message));
+		FeedbackUtils.error(e.getMessage());
 	}
 
 	/**
-	 * Sends an ajax {@link FeedbackMessage#SUCCESS} message to the hosting page
+	 * Sends an ajax {@link FeedbackMessage#ERROR} exception message to the hosting page
 	 * 
-	 * @param component the {@link Component} sending the event
-	 * @param target the {@link AjaxRequestTarget}
-	 * @param message the message
+	 * @param handler the {@link IPartialPageRequestHandler}
+	 * @param exception the {@link Exception}
 	 */
-	public static void success(Component component, AjaxRequestTarget target, String message)
+	public static void error(IPartialPageRequestHandler handler, Exception exception)
 	{
-		BroadcastUtils.breadth(component.getPage(), new FeedbackPayload(target, FeedbackMessage.SUCCESS, message));
+		FeedbackUtils.error(handler, exception.getMessage());
 	}
 
 	/**
-	 * Sends an ajax {@link FeedbackMessage#WARNING} message to the hosting page
+	 * Register an error at session level so the message is available even if the page is redirected
 	 * 
-	 * @param component the {@link Component} sending the event
-	 * @param target the {@link AjaxRequestTarget}
 	 * @param message the message
 	 */
-	public static void warn(Component component, AjaxRequestTarget target, String message)
+	public static void error(String message)
 	{
-		BroadcastUtils.breadth(component.getPage(), new FeedbackPayload(target, FeedbackMessage.WARNING, message));
+		IPartialPageRequestHandler handler = RequestCycleUtils.getRequestHandler();
+
+		if (handler != null)
+		{
+			FeedbackUtils.error(handler, message);
+		}
+		else
+		{
+			WebSession.get().error(message);
+		}
 	}
 
 	/**
-	 * Sends an ajax {@link FeedbackMessage#ERROR} exception message to the hosting page
+	 * Sends an ajax {@link FeedbackMessage#ERROR} message to the hosting page
 	 * 
-	 * @param component the {@link Component} sending the event
-	 * @param target the {@link AjaxRequestTarget}
-	 * @param exception the {@link Exception}
+	 * @param handler the {@link IPartialPageRequestHandler}
+	 * @param message the message
 	 */
-	public static void error(Component component, AjaxRequestTarget target, Exception exception)
+	public static void error(IPartialPageRequestHandler handler, String message)
 	{
-		FeedbackUtils.error(component, target, exception.getMessage());
+		BroadcastUtils.breadth(handler, new FeedbackPayload(handler, FeedbackMessage.ERROR, message));
 	}
 
 	/**
-	 * Sends an ajax {@link FeedbackMessage#ERROR} message to the hosting page
+	 * Register a fatal at session level so the message is available even if the page is redirected
 	 * 
-	 * @param component the {@link Component} sending the event
-	 * @param target the {@link AjaxRequestTarget}
-	 * @param message the message
+	 * @param e the {@link Exception}
 	 */
-	public static void error(Component component, AjaxRequestTarget target, String message)
+	public static void fatal(Exception e)
 	{
-		BroadcastUtils.breadth(component.getPage(), new FeedbackPayload(target, FeedbackMessage.ERROR, message));
+		FeedbackUtils.fatal(e.getMessage());
 	}
 
 	/**
 	 * Sends an ajax {@link FeedbackMessage#FATAL} exception message to the hosting page
 	 * 
-	 * @param component the {@link Component} sending the event
-	 * @param target the {@link AjaxRequestTarget}
+	 * @param handler the {@link IPartialPageRequestHandler}
 	 * @param exception the {@link Exception}
 	 */
-	public static void fatal(Component component, AjaxRequestTarget target, Exception exception)
+	public static void fatal(IPartialPageRequestHandler handler, Exception exception)
 	{
-		FeedbackUtils.fatal(component, target, exception.getMessage());
+		FeedbackUtils.fatal(handler, exception.getMessage());
 	}
 
 	/**
-	 * Sends an ajax {@link FeedbackMessage#FATAL} message to the hosting page
+	 * Register a fatal at session level so the message is available even if the page is redirected
 	 * 
-	 * @param component the {@link Component} sending the event
-	 * @param target the {@link AjaxRequestTarget}
 	 * @param message the message
 	 */
-	public static void fatal(Component component, AjaxRequestTarget target, String message)
+	public static void fatal(String message)
 	{
-		BroadcastUtils.breadth(component.getPage(), new FeedbackPayload(target, FeedbackMessage.FATAL, message));
+		IPartialPageRequestHandler handler = RequestCycleUtils.getRequestHandler();
+
+		if (handler != null)
+		{
+			FeedbackUtils.fatal(handler, message);
+		}
+		else
+		{
+			WebSession.get().fatal(message);
+		}
 	}
 
 	/**
-	 * Aims the reload a {@link FeedbackPanel} using {@link Broadcast#BREADTH} mode.<br>
-	 * The hosting page should implement a code like:<br>
-	 * 
-	 * <pre>
-	 * <code>
-	 * public void onEvent(IEvent&lt;?&gt; event)
-	 * {
-	 *     super.onEvent(event);
-	 * 
-	 *     if (event.getPayload() instanceof FeedbackPayload)
-	 *     {
-	 *         FeedbackPayload payload = (FeedbackPayload) event.getPayload();
-	 * 
-	 *         if (payload.getLevel() == FeedbackMessage.UNDEFINED)
-	 *         {
-	 *             payload.getTarget().add(this.feedbackPanel);
-	 *         }
-	 *     }
-	 * }
-	 * </code>
-	 * </pre>
+	 * Sends an ajax {@link FeedbackMessage#FATAL} message to the hosting page
 	 * 
-	 * @param component the {@link Component} sending the event
-	 * @param target the {@link AjaxRequestTarget}
+	 * @param handler the {@link IPartialPageRequestHandler}
+	 * @param message the message
 	 */
-	public static void reload(Component component, AjaxRequestTarget target)
+	public static void fatal(IPartialPageRequestHandler handler, String message)
 	{
-		BroadcastUtils.breadth(component.getPage(), new FeedbackPayload(target));
+		BroadcastUtils.breadth(handler, new FeedbackPayload(handler, FeedbackMessage.FATAL, message));
 	}
 }
diff --git a/wicket-jquery-ui-plugins/src/main/java/com/googlecode/wicket/jquery/ui/plugins/wysiwyg/WysiwygEditor.java b/wicket-jquery-ui-plugins/src/main/java/com/googlecode/wicket/jquery/ui/plugins/wysiwyg/WysiwygEditor.java
index fbec3c8ea..52c1f918a 100644
--- a/wicket-jquery-ui-plugins/src/main/java/com/googlecode/wicket/jquery/ui/plugins/wysiwyg/WysiwygEditor.java
+++ b/wicket-jquery-ui-plugins/src/main/java/com/googlecode/wicket/jquery/ui/plugins/wysiwyg/WysiwygEditor.java
@@ -117,7 +117,7 @@ public String getEditorMarkupId()
 	@Override
 	public void convertInput()
 	{
-		final PolicyFactory policy = newPolicyFactory();
+		final PolicyFactory policy = this.newPolicyFactory();
 		final String input = this.textarea.getConvertedInput();
 
 		this.setConvertedInput(policy.sanitize(input));
@@ -191,7 +191,7 @@ protected void onComponentTag(ComponentTag tag)
 	 * 
 	 * @return a new {@code PolicyFactory}
 	 */
-	protected static PolicyFactory newPolicyFactory()
+	protected PolicyFactory newPolicyFactory()
 	{
 		return new HtmlPolicyBuilder() // lf
 				.allowCommonInlineFormattingElements() // lf
diff --git a/wicket-kendo-ui/src/main/java/com/googlecode/wicket/kendo/ui/dataviz/chart/ChartPayload.java b/wicket-kendo-ui/src/main/java/com/googlecode/wicket/kendo/ui/dataviz/chart/ChartPayload.java
index eea5f4ad8..9c5733023 100644
--- a/wicket-kendo-ui/src/main/java/com/googlecode/wicket/kendo/ui/dataviz/chart/ChartPayload.java
+++ b/wicket-kendo-ui/src/main/java/com/googlecode/wicket/kendo/ui/dataviz/chart/ChartPayload.java
@@ -17,18 +17,19 @@
 package com.googlecode.wicket.kendo.ui.dataviz.chart;
 
 import org.apache.wicket.ajax.AjaxRequestTarget;
+import org.apache.wicket.core.request.handler.IPartialPageRequestHandler;
 import org.apache.wicket.util.io.IClusterable;
 
-import com.googlecode.wicket.jquery.core.ajax.AjaxPayload;
+import com.googlecode.wicket.jquery.core.ajax.HandlerPayload;
 
 /**
- * Provides a convenient {@link AjaxPayload} that can be used to broadcast a point information
+ * Provides a convenient {@link HandlerPayload} that can be used to broadcast a point information
  * 
  * @see Chart#onSeriesClick(AjaxRequestTarget, String, String, String, long)
  * @author Sebastien Briquet - sebfz1
  *
  */
-public class ChartPayload extends AjaxPayload implements IClusterable
+public class ChartPayload extends HandlerPayload implements IClusterable // NOSONAR
 {
 	private static final long serialVersionUID = 1L;
 
@@ -40,15 +41,15 @@
 	/**
 	 * Constructor
 	 * 
-	 * @param target the {@link AjaxRequestTarget}
+	 * @param handler the {@link IPartialPageRequestHandler}
 	 * @param seriesName the series name
 	 * @param seriesField the series field
 	 * @param category the category
 	 * @param value the value of the point
 	 */
-	public ChartPayload(AjaxRequestTarget target, String seriesName, String seriesField, String category, long value)
+	public ChartPayload(IPartialPageRequestHandler handler, String seriesName, String seriesField, String category, long value)
 	{
-		super(target);
+		super(handler);
 
 		this.value = value;
 		this.category = category;
diff --git a/wicket-kendo-ui/src/main/java/com/googlecode/wicket/kendo/ui/utils/KendoEffectUtils.java b/wicket-kendo-ui/src/main/java/com/googlecode/wicket/kendo/ui/utils/KendoEffectUtils.java
index 87f816e69..49556ff40 100644
--- a/wicket-kendo-ui/src/main/java/com/googlecode/wicket/kendo/ui/utils/KendoEffectUtils.java
+++ b/wicket-kendo-ui/src/main/java/com/googlecode/wicket/kendo/ui/utils/KendoEffectUtils.java
@@ -17,7 +17,7 @@
 package com.googlecode.wicket.kendo.ui.utils;
 
 import org.apache.wicket.Component;
-import org.apache.wicket.ajax.AjaxRequestTarget;
+import org.apache.wicket.core.request.handler.IPartialPageRequestHandler;
 
 import com.googlecode.wicket.jquery.core.IJQueryWidget.JQueryWidget;
 import com.googlecode.wicket.kendo.ui.effect.KendoEffect;
@@ -43,39 +43,39 @@ private KendoEffectUtils()
 	/**
 	 * Reloads a {@link Component} using a default {@link KendoEffect}
 	 *
-	 * @param target the {@link AjaxRequestTarget}
+	 * @param handler the {@link IPartialPageRequestHandler}
 	 * @param component the {@link Component}
 	 */
-	public static void reload(AjaxRequestTarget target, Component component)
+	public static void reload(IPartialPageRequestHandler handler, Component component)
 	{
-		KendoEffectUtils.reload(target, component, KendoEffectUtils.effect);
+		KendoEffectUtils.reload(handler, component, KendoEffectUtils.effect);
 	}
 
 	/**
 	 * Reloads a {@link Component} using a specified {@link KendoEffect}
 	 *
-	 * @param target the {@link AjaxRequestTarget}
+	 * @param handler the {@link IPartialPageRequestHandler}
 	 * @param component the {@link Component}
 	 * @param effect the {@link KendoEffect}
 	 */
-	public static void reload(AjaxRequestTarget target, Component component, KendoEffect effect)
+	public static void reload(IPartialPageRequestHandler handler, Component component, KendoEffect effect)
 	{
-		KendoEffectUtils.reload(target, component, effect, false);
+		KendoEffectUtils.reload(handler, component, effect, false);
 	}
 
 	/**
 	 * Reloads a {@link Component} using a specified {@link KendoEffect}
 	 *
-	 * @param target the {@link AjaxRequestTarget}
+	 * @param handler the {@link IPartialPageRequestHandler}
 	 * @param component the {@link Component}
 	 * @param effect the {@link KendoEffect}
 	 * @param reverse indicates whether the effect should be played or reverse-played
 	 */
-	public static void reload(AjaxRequestTarget target, Component component, KendoEffect effect, boolean reverse)
+	public static void reload(IPartialPageRequestHandler handler, Component component, KendoEffect effect, boolean reverse)
 	{
 		String selector = JQueryWidget.getSelector(component);
 
-		target.add(component);
-		target.appendJavaScript(String.format("kendo.fx(jQuery('%s')).%s.%s();", selector, effect, !reverse ? "play" : "reverse"));
+		handler.add(component);
+		handler.appendJavaScript(String.format("kendo.fx(jQuery('%s')).%s.%s();", selector, effect, !reverse ? "play" : "reverse"));
 	}
 }
diff --git a/wicket-kendo-ui/src/main/java/com/googlecode/wicket/kendo/ui/widget/editor/Editor.java b/wicket-kendo-ui/src/main/java/com/googlecode/wicket/kendo/ui/widget/editor/Editor.java
index 8876dfd3b..bc861bd86 100644
--- a/wicket-kendo-ui/src/main/java/com/googlecode/wicket/kendo/ui/widget/editor/Editor.java
+++ b/wicket-kendo-ui/src/main/java/com/googlecode/wicket/kendo/ui/widget/editor/Editor.java
@@ -95,7 +95,7 @@ public void convertInput()
 	{
 		super.convertInput();
 
-		final PolicyFactory policy = newPolicyFactory();
+		final PolicyFactory policy = this.newPolicyFactory();
 		final String input = this.getConvertedInput();
 
 		this.setConvertedInput(policy.sanitize(input));
@@ -139,7 +139,7 @@ public JQueryBehavior newWidgetBehavior(String selector)
 	 * 
 	 * @return a new {@code PolicyFactory}
 	 */
-	protected static PolicyFactory newPolicyFactory()
+	protected PolicyFactory newPolicyFactory()
 	{
 		return new HtmlPolicyBuilder() // lf
 				.allowCommonInlineFormattingElements() // lf
diff --git a/wicket-kendo-ui/src/main/java/com/googlecode/wicket/kendo/ui/widget/tabs/TabbedPanelNavigator.java b/wicket-kendo-ui/src/main/java/com/googlecode/wicket/kendo/ui/widget/tabs/TabbedPanelNavigator.java
index 2fd8d0b09..90fe1ff2e 100644
--- a/wicket-kendo-ui/src/main/java/com/googlecode/wicket/kendo/ui/widget/tabs/TabbedPanelNavigator.java
+++ b/wicket-kendo-ui/src/main/java/com/googlecode/wicket/kendo/ui/widget/tabs/TabbedPanelNavigator.java
@@ -17,9 +17,10 @@
 package com.googlecode.wicket.kendo.ui.widget.tabs;
 
 import org.apache.wicket.ajax.AjaxRequestTarget;
+import org.apache.wicket.core.request.handler.IPartialPageRequestHandler;
 import org.apache.wicket.event.IEvent;
 
-import com.googlecode.wicket.jquery.core.ajax.AjaxPayload;
+import com.googlecode.wicket.jquery.core.ajax.HandlerPayload;
 import com.googlecode.wicket.kendo.ui.form.button.AjaxButton;
 import com.googlecode.wicket.kendo.ui.widget.NavigationPanel;
 
@@ -103,15 +104,15 @@ public void onEvent(IEvent<?> event)
 	/* Classes */
 
 	/**
-	 * Provides a {@link AjaxPayload} designed to reload the {@link TabbedPanelNavigator}
+	 * Provides a {@link HandlerPayload} designed to reload the {@link TabbedPanelNavigator}
 	 */
-	public static class RefreshPayload extends AjaxPayload
+	public static class RefreshPayload extends HandlerPayload
 	{
 		private final int index;
 
-		public RefreshPayload(int index, AjaxRequestTarget target)
+		public RefreshPayload(int index, IPartialPageRequestHandler handler)
 		{
-			super(target);
+			super(handler);
 
 			this.index = index;
 		}
