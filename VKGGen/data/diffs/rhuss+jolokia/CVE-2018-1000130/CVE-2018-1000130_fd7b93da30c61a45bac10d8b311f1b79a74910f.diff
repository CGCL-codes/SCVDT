diff --git a/agent/core/src/main/java/org/jolokia/http/AgentServlet.java b/agent/core/src/main/java/org/jolokia/http/AgentServlet.java
index 0eb41a0b3..a8acbe3d5 100755
--- a/agent/core/src/main/java/org/jolokia/http/AgentServlet.java
+++ b/agent/core/src/main/java/org/jolokia/http/AgentServlet.java
@@ -157,18 +157,30 @@ public void init(ServletConfig pServletConfig) throws ServletException {
      * @param pConfig configuration to update
      */
     private void addJsr160DispatcherIfExternallyConfigured(Configuration pConfig) {
-        for (String param : new String[] {
-            System.getProperty("org.jolokia.jsr160ProxyEnabled"),
-            System.getenv("JOLOKIA_JSR160_PROXY_ENABLED")
-        }) {
-            if (param !=null && (param.isEmpty() || Boolean.parseBoolean(param))){
-                String dispatchers = pConfig.get(ConfigKey.DISPATCHER_CLASSES);
-
-                pConfig.updateGlobalConfiguration(
-                    Collections.singletonMap(
-                        ConfigKey.DISPATCHER_CLASSES.getKeyValue(),
-                        (dispatchers != null ? dispatchers + "," : "") + "org.jolokia.jsr160.Jsr160RequestDispatcher"));
-                return;
+        String dispatchers = pConfig.get(ConfigKey.DISPATCHER_CLASSES);
+        String jsr160DispatcherClass = "org.jolokia.jsr160.Jsr160RequestDispatcher";
+
+        if (dispatchers == null || !dispatchers.contains(jsr160DispatcherClass)) {
+            for (String param : new String[]{
+                System.getProperty("org.jolokia.jsr160ProxyEnabled"),
+                System.getenv("JOLOKIA_JSR160_PROXY_ENABLED")
+            }) {
+                if (param != null && (param.isEmpty() || Boolean.parseBoolean(param))) {
+                    {
+                        pConfig.updateGlobalConfiguration(
+                            Collections.singletonMap(
+                                ConfigKey.DISPATCHER_CLASSES.getKeyValue(),
+                                (dispatchers != null ? dispatchers + "," : "") + jsr160DispatcherClass));
+                    }
+                    return;
+                }
+            }
+            if (dispatchers == null) {
+                // We add a breaking dispatcher to avoid silently ignoring a JSR160 proxy request
+                // when it is now enabled
+                pConfig.updateGlobalConfiguration(Collections.singletonMap(
+                    ConfigKey.DISPATCHER_CLASSES.getKeyValue(),
+                    Jsr160ProxyNotEnabledByDefaultAnymoreDispatcher.class.getCanonicalName()));
             }
         }
     }
diff --git a/agent/core/src/main/java/org/jolokia/http/Jsr160ProxyNotEnabledByDefaultAnymoreDispatcher.java b/agent/core/src/main/java/org/jolokia/http/Jsr160ProxyNotEnabledByDefaultAnymoreDispatcher.java
new file mode 100644
index 000000000..389e7f42a
--- /dev/null
+++ b/agent/core/src/main/java/org/jolokia/http/Jsr160ProxyNotEnabledByDefaultAnymoreDispatcher.java
@@ -0,0 +1,54 @@
+package org.jolokia.http;
+
+import java.io.IOException;
+
+import javax.management.AttributeNotFoundException;
+import javax.management.InstanceNotFoundException;
+import javax.management.MBeanException;
+import javax.management.ReflectionException;
+
+import org.jolokia.backend.RequestDispatcher;
+import org.jolokia.backend.executor.NotChangedException;
+import org.jolokia.config.Configuration;
+import org.jolokia.converter.Converters;
+import org.jolokia.detector.ServerHandle;
+import org.jolokia.handler.RequestHandlerManager;
+import org.jolokia.request.JmxRequest;
+import org.jolokia.restrictor.Restrictor;
+
+/**
+ * Temporary dispatcher added to avoid confusion for users which use 1.5.0 as a drop in replacement
+ * for a JSR-160 proxy server. Otherwise Jolokia requests for a JSR-160 target will be silently
+ * ignored and the MBeans of the Proxy server would be queried.
+ *
+ * @author roland
+ * @since 08.02.18
+ */
+public class Jsr160ProxyNotEnabledByDefaultAnymoreDispatcher implements RequestDispatcher {
+
+
+    // Constructor required for the backend to be able to crete the constructor
+    public Jsr160ProxyNotEnabledByDefaultAnymoreDispatcher(Converters pConverters,
+                                                           ServerHandle pServerInfo,
+                                                           Restrictor pRestrictor,
+                                                           Configuration pConfig) {
+    }
+
+    @Override
+    public Object dispatchRequest(JmxRequest pJmxReq) throws InstanceNotFoundException, AttributeNotFoundException, ReflectionException, MBeanException, IOException, NotChangedException {
+        throw new IllegalArgumentException(
+            "No JSR-160 proxy is enabled by default since Jolokia 1.5.0. " +
+            "Please refer to the reference manual, section \"Proxy Mode\", " +
+            "for how to switch on JSR-160 proxy mode again.");
+    }
+
+    @Override
+    public boolean canHandle(JmxRequest pJmxRequest) {
+        return pJmxRequest.getTargetConfig() != null;
+    }
+
+    @Override
+    public boolean useReturnValueWithPath(JmxRequest pJmxRequest) {
+        return false;
+    }
+}
