commit 0093c190596d3cce893204ea2f64d2881d1b677f
Author:     Scott Gray <lektran@apache.org>
AuthorDate: Mon Mar 8 16:11:00 2010 +0000
Commit:     Scott Gray <lektran@apache.org>
CommitDate: Mon Mar 8 16:11:00 2010 +0000

    [CVE-2010-0432] Merged from trunk r920370
    Added an OFBiz specific FreeMarker TemplateExceptionHandler, ensures that any stack trace error messages are properly encoded before being dumped to the browser (or anywhere else).
    
    
    git-svn-id: https://svn.apache.org/repos/asf/ofbiz/branches@920380 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/release09.04/framework/base/src/org/ofbiz/base/util/template/FreeMarkerWorker.java b/release09.04/framework/base/src/org/ofbiz/base/util/template/FreeMarkerWorker.java
index d6ba984002..4431693ff7 100644
--- a/release09.04/framework/base/src/org/ofbiz/base/util/template/FreeMarkerWorker.java
+++ b/release09.04/framework/base/src/org/ofbiz/base/util/template/FreeMarkerWorker.java
@@ -21,8 +21,10 @@ package org.ofbiz.base.util.template;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.InputStreamReader;
+import java.io.PrintWriter;
 import java.io.Reader;
 import java.io.StringReader;
+import java.io.StringWriter;
 import java.io.Writer;
 import java.net.MalformedURLException;
 import java.net.URL;
@@ -50,6 +52,7 @@ import org.ofbiz.base.util.UtilGenerics;
 import org.ofbiz.base.util.UtilMisc;
 import org.ofbiz.base.util.UtilProperties;
 import org.ofbiz.base.util.UtilValidate;
+import org.ofbiz.base.util.StringUtil.SimpleEncoder;
 import org.ofbiz.base.util.cache.UtilCache;
 
 import freemarker.cache.TemplateLoader;
@@ -61,6 +64,7 @@ import freemarker.template.SimpleHash;
 import freemarker.template.SimpleScalar;
 import freemarker.template.Template;
 import freemarker.template.TemplateException;
+import freemarker.template.TemplateExceptionHandler;
 import freemarker.template.TemplateModel;
 import freemarker.template.TemplateModelException;
 
@@ -84,6 +88,7 @@ public class FreeMarkerWorker {
         newConfig.setLocalizedLookup(false);
         newConfig.setSharedVariable("StringUtil", new BeanModel(new StringUtil(), wrapper));
         newConfig.setTemplateLoader(new FlexibleTemplateLoader());
+        newConfig.setTemplateExceptionHandler(new FreeMarkerWorker.OFBizTemplateExceptionHandler());
         try {
             newConfig.setSetting("datetime_format", "yyyy-MM-dd HH:mm:ss.SSS");
             newConfig.setSetting("number_format", "0.##########");
@@ -618,4 +623,30 @@ public class FreeMarkerWorker {
             // do nothing
         }
     }
+
+    /**
+     * OFBiz specific TemplateExceptionHandler.  Sanitizes any error messages present in
+     * the stack trace prior to printing to the output writer.
+     *
+     */
+    static class OFBizTemplateExceptionHandler implements TemplateExceptionHandler {
+
+        @Override
+        public void handleTemplateException(TemplateException te, Environment env, Writer out) throws TemplateException {
+            StringWriter tempWriter = new StringWriter();
+            PrintWriter pw = new PrintWriter(tempWriter, true);
+            te.printStackTrace(pw);
+            String stackTrace = tempWriter.toString();
+
+            StringUtil.SimpleEncoder simpleEncoder = (SimpleEncoder) FreeMarkerWorker.getWrappedObject("simpleEncoder", env);
+            if (simpleEncoder != null) {
+                stackTrace = simpleEncoder.encode(stackTrace);
+            }
+            try {
+                out.write(stackTrace);
+            } catch (IOException e) {
+                Debug.logError(e, module);
+            }
+        }
+    }
 }
