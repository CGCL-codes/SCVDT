commit 2574c9afa51d7343a9f801ff8e3b5ce22e1af325
Author:     Adrian Crum <adrianc@apache.org>
AuthorDate: Thu Apr 5 15:18:22 2012 +0000
Commit:     Adrian Crum <adrianc@apache.org>
CommitDate: Thu Apr 5 15:18:22 2012 +0000

    CVE-2012-1622: Disable support for nested scripts in FlexibleStringExpander.
    
    
    git-svn-id: https://svn.apache.org/repos/asf/ofbiz/branches/release10.04@1309897 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/framework/base/src/org/ofbiz/base/util/string/FlexibleStringExpander.java b/framework/base/src/org/ofbiz/base/util/string/FlexibleStringExpander.java
index 469e90ed2e..6caa570598 100644
--- a/framework/base/src/org/ofbiz/base/util/string/FlexibleStringExpander.java
+++ b/framework/base/src/org/ofbiz/base/util/string/FlexibleStringExpander.java
@@ -60,6 +60,26 @@ public abstract class FlexibleStringExpander implements Serializable {
     protected static final UtilCache<Key, FlexibleStringExpander> exprCache = UtilCache.createUtilCache("flexibleStringExpander.ExpressionCache");
     protected static final FlexibleStringExpander nullExpr = new ConstSimpleElem(new char[0]);
 
+    /**
+     * Returns <code>true</code> if <code>fse</code> contains a script.
+     * @param fse The <code>FlexibleStringExpander</code> to test
+     * @return <code>true</code> if <code>fse</code> contains a script
+     */
+    public static boolean containsScript(FlexibleStringExpander fse) {
+        if (fse instanceof BshElem || fse instanceof GroovyElem) {
+            return true;
+        }
+        if (fse instanceof Elements) {
+            Elements fseElements = (Elements) fse;
+            for (FlexibleStringExpander childElement : fseElements.childElems) {
+                if (containsScript(childElement)) {
+                    return true;
+                }
+            }
+        }
+        return false;
+    }
+
     /** Evaluate an expression and return the result as a <code>String</code>.
      * Null expressions return <code>null</code>.
      * A null <code>context</code> argument will return the original expression.
@@ -697,6 +717,9 @@ public abstract class FlexibleStringExpander implements Serializable {
                     String str = (String) obj;
                     if (str.contains(openBracket)) {
                         FlexibleStringExpander fse = FlexibleStringExpander.getInstance(str);
+                        if (containsScript(fse)) {
+                            throw new UnsupportedOperationException("Nested scripts are not supported");
+                        }
                         return fse.get(context, timeZone, locale);
                     }
                 } catch (ClassCastException e) {}
diff --git a/framework/base/src/org/ofbiz/base/util/string/test/FlexibleStringExpanderTests.java b/framework/base/src/org/ofbiz/base/util/string/test/FlexibleStringExpanderTests.java
index fc7c5dc7d3..ae503f0c55 100644
--- a/framework/base/src/org/ofbiz/base/util/string/test/FlexibleStringExpanderTests.java
+++ b/framework/base/src/org/ofbiz/base/util/string/test/FlexibleStringExpanderTests.java
@@ -283,6 +283,16 @@ public class FlexibleStringExpanderTests extends TestCase {
         List<String> testList = new ArrayList<String>();
         testList.add("World");
         testMap.put("testList", testList);
+        testMap.put("testScript", "${groovy:return null;}");
+        UnsupportedOperationException caught = null;
+        try {
+            FlexibleStringExpander fse = FlexibleStringExpander.getInstance("${testScript}");
+            fse.expandString(testMap);
+        } catch (UnsupportedOperationException e) {
+            caught = e;
+        } finally {
+            assertNotNull("UnsupportedOperationException thrown for nested script", caught);
+        }
         fseTest("null FlexibleStringExpander, null map", null, null, null, null, "", null, true);
         fseTest("null FlexibleStringExpander", null, testMap, null, null, "", null, true);
         fseTest("null context", "Hello World!", null, null, null, "Hello World!", null, false);
