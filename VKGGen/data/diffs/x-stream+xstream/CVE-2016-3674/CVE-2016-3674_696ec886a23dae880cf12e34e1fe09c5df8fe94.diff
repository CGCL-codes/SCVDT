diff --git a/xstream/src/java/com/thoughtworks/xstream/io/xml/DomDriver.java b/xstream/src/java/com/thoughtworks/xstream/io/xml/DomDriver.java
index b582756e..0c672dc1 100644
--- a/xstream/src/java/com/thoughtworks/xstream/io/xml/DomDriver.java
+++ b/xstream/src/java/com/thoughtworks/xstream/io/xml/DomDriver.java
@@ -64,7 +64,7 @@ public DomDriver(String encoding, NameCoder nameCoder) {
         this.encoding = encoding;
         documentBuilderFactory = DocumentBuilderFactory.newInstance();
         try {
-            documentBuilderFactory.setFeature("http://apache.org/xml/features/disallow-doctype-decl", false);
+            documentBuilderFactory.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
         } catch (final ParserConfigurationException e) {
             throw new StreamException(e);
         }
diff --git a/xstream/src/java/com/thoughtworks/xstream/io/xml/JDom2Driver.java b/xstream/src/java/com/thoughtworks/xstream/io/xml/JDom2Driver.java
index 876630e9..f45e00ed 100644
--- a/xstream/src/java/com/thoughtworks/xstream/io/xml/JDom2Driver.java
+++ b/xstream/src/java/com/thoughtworks/xstream/io/xml/JDom2Driver.java
@@ -47,8 +47,8 @@ public JDom2Driver(NameCoder nameCoder) {
 
     public HierarchicalStreamReader createReader(Reader reader) {
         try {
-            SAXBuilder builder = new SAXBuilder();
-            Document document = builder.build(reader);
+            final SAXBuilder builder = createBuilder();
+            final Document document = builder.build(reader);
             return new JDom2Reader(document, getNameCoder());
         } catch (IOException e) {
             throw new StreamException(e);
@@ -59,8 +59,8 @@ public HierarchicalStreamReader createReader(Reader reader) {
 
     public HierarchicalStreamReader createReader(InputStream in) {
         try {
-            SAXBuilder builder = new SAXBuilder();
-            Document document = builder.build(in);
+            final SAXBuilder builder = createBuilder();
+            final Document document = builder.build(in);
             return new JDom2Reader(document, getNameCoder());
         } catch (IOException e) {
             throw new StreamException(e);
@@ -71,8 +71,8 @@ public HierarchicalStreamReader createReader(InputStream in) {
 
     public HierarchicalStreamReader createReader(URL in) {
         try {
-            SAXBuilder builder = new SAXBuilder();
-            Document document = builder.build(in);
+            final SAXBuilder builder = createBuilder();
+            final Document document = builder.build(in);
             return new JDom2Reader(document, getNameCoder());
         } catch (IOException e) {
             throw new StreamException(e);
@@ -83,8 +83,8 @@ public HierarchicalStreamReader createReader(URL in) {
 
     public HierarchicalStreamReader createReader(File in) {
         try {
-            SAXBuilder builder = new SAXBuilder();
-            Document document = builder.build(in);
+            final SAXBuilder builder = createBuilder();
+            final Document document = builder.build(in);
             return new JDom2Reader(document, getNameCoder());
         } catch (IOException e) {
             throw new StreamException(e);
@@ -100,5 +100,17 @@ public HierarchicalStreamWriter createWriter(Writer out) {
     public HierarchicalStreamWriter createWriter(OutputStream out) {
         return new PrettyPrintWriter(new OutputStreamWriter(out));
     }
+
+    /**
+     * Create and initialize the SAX builder.
+     * 
+     * @return the SAX builder instance.
+     * @since upcoming
+     */
+    protected SAXBuilder createBuilder() {
+        final SAXBuilder builder = new SAXBuilder();
+        builder.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
+        return builder;
+    }
 }
 
diff --git a/xstream/src/java/com/thoughtworks/xstream/io/xml/JDomDriver.java b/xstream/src/java/com/thoughtworks/xstream/io/xml/JDomDriver.java
index 6bc3255f..25d927dc 100644
--- a/xstream/src/java/com/thoughtworks/xstream/io/xml/JDomDriver.java
+++ b/xstream/src/java/com/thoughtworks/xstream/io/xml/JDomDriver.java
@@ -55,8 +55,8 @@ public JDomDriver(XmlFriendlyReplacer replacer) {
 
     public HierarchicalStreamReader createReader(Reader reader) {
         try {
-            SAXBuilder builder = new SAXBuilder();
-            Document document = builder.build(reader);
+            final SAXBuilder builder = createBuilder();
+            final Document document = builder.build(reader);
             return new JDomReader(document, getNameCoder());
         } catch (IOException e) {
             throw new StreamException(e);
@@ -67,8 +67,8 @@ public HierarchicalStreamReader createReader(Reader reader) {
 
     public HierarchicalStreamReader createReader(InputStream in) {
         try {
-            SAXBuilder builder = new SAXBuilder();
-            Document document = builder.build(in);
+            final SAXBuilder builder = createBuilder();
+            final Document document = builder.build(in);
             return new JDomReader(document, getNameCoder());
         } catch (IOException e) {
             throw new StreamException(e);
@@ -79,8 +79,8 @@ public HierarchicalStreamReader createReader(InputStream in) {
 
     public HierarchicalStreamReader createReader(URL in) {
         try {
-            SAXBuilder builder = new SAXBuilder();
-            Document document = builder.build(in);
+            final SAXBuilder builder = createBuilder();
+            final Document document = builder.build(in);
             return new JDomReader(document, getNameCoder());
         } catch (IOException e) {
             throw new StreamException(e);
@@ -91,8 +91,8 @@ public HierarchicalStreamReader createReader(URL in) {
 
     public HierarchicalStreamReader createReader(File in) {
         try {
-            SAXBuilder builder = new SAXBuilder();
-            Document document = builder.build(in);
+            final SAXBuilder builder = createBuilder();
+            final Document document = builder.build(in);
             return new JDomReader(document, getNameCoder());
         } catch (IOException e) {
             throw new StreamException(e);
@@ -109,5 +109,17 @@ public HierarchicalStreamWriter createWriter(OutputStream out) {
         return new PrettyPrintWriter(new OutputStreamWriter(out));
     }
 
+    /**
+     * Create and initialize the SAX builder.
+     * 
+     * @return the SAX builder instance.
+     * @since upcoming
+     */
+    protected SAXBuilder createBuilder() {
+        final SAXBuilder builder = new SAXBuilder();
+        builder.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
+        return builder;
+    }
+
 }
 
diff --git a/xstream/src/test/com/thoughtworks/xstream/io/xml/BEAStaxReaderTest.java b/xstream/src/test/com/thoughtworks/xstream/io/xml/BEAStaxReaderTest.java
index 6595ff45..f9d1e194 100644
--- a/xstream/src/test/com/thoughtworks/xstream/io/xml/BEAStaxReaderTest.java
+++ b/xstream/src/test/com/thoughtworks/xstream/io/xml/BEAStaxReaderTest.java
@@ -29,7 +29,6 @@ protected HierarchicalStreamReader createReader(String xml) throws Exception {
     @Override
     public void testIsXXEVulnerable() throws Exception {
         // Implementation ignores XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES
-        todoIsXXEVulnerable();
     }
 
     public void todoIsXXEVulnerable() throws Exception {
diff --git a/xstream/src/test/com/thoughtworks/xstream/io/xml/DomReaderTest.java b/xstream/src/test/com/thoughtworks/xstream/io/xml/DomReaderTest.java
index a6e8bb9e..f03c8e4c 100644
--- a/xstream/src/test/com/thoughtworks/xstream/io/xml/DomReaderTest.java
+++ b/xstream/src/test/com/thoughtworks/xstream/io/xml/DomReaderTest.java
@@ -1,6 +1,6 @@
 /*
  * Copyright (C) 2004, 2005 Joe Walnes.
- * Copyright (C) 2006, 2007 XStream Committers.
+ * Copyright (C) 2006, 2007, 2015 XStream Committers.
  * All rights reserved.
  *
  * The software in this package is published under the terms of the BSD
@@ -90,8 +90,8 @@ public void testIsXXEVulnerable() throws Exception {
             super.testIsXXEVulnerable();
             fail("Thrown " + XStreamException.class.getName() + " expected");
         } catch (final XStreamException e) {
-            final String message = e.getMessage().toLowerCase();
-            if (message.contains("Package")) {
+            final String message = e.getMessage();
+            if (!message.contains("DOCTYPE")) {
                 throw e;
             }
         }
diff --git a/xstream/src/test/com/thoughtworks/xstream/io/xml/JDom2ReaderTest.java b/xstream/src/test/com/thoughtworks/xstream/io/xml/JDom2ReaderTest.java
index 3b9def70..1ad7812b 100644
--- a/xstream/src/test/com/thoughtworks/xstream/io/xml/JDom2ReaderTest.java
+++ b/xstream/src/test/com/thoughtworks/xstream/io/xml/JDom2ReaderTest.java
@@ -15,7 +15,6 @@
 
 import org.jdom2.Document;
 import org.jdom2.Element;
-import org.jdom2.input.JDOMParseException;
 import org.jdom2.input.SAXBuilder;
 
 import java.io.StringReader;
@@ -49,10 +48,10 @@ public void testCanReadFromElementOfLargerDocument() throws Exception {
     public void testIsXXEVulnerable() throws Exception {
         try {
             super.testIsXXEVulnerable();
-            fail("Thrown " + JDOMParseException.class.getName() + " expected");
-        } catch (final JDOMParseException e) {
+            fail("Thrown " + XStreamException.class.getName() + " expected");
+        } catch (final XStreamException e) {
             final String message = e.getMessage();
-            if (message.contains("Package")) {
+            if (!message.contains("DOCTYPE")) {
                 throw e;
             }
         }
diff --git a/xstream/src/test/com/thoughtworks/xstream/io/xml/JDomReaderTest.java b/xstream/src/test/com/thoughtworks/xstream/io/xml/JDomReaderTest.java
index 36009976..c8e4cff9 100644
--- a/xstream/src/test/com/thoughtworks/xstream/io/xml/JDomReaderTest.java
+++ b/xstream/src/test/com/thoughtworks/xstream/io/xml/JDomReaderTest.java
@@ -16,7 +16,6 @@
 
 import org.jdom.Document;
 import org.jdom.Element;
-import org.jdom.input.JDOMParseException;
 import org.jdom.input.SAXBuilder;
 
 import java.io.StringReader;
@@ -50,10 +49,10 @@ public void testCanReadFromElementOfLargerDocument() throws Exception {
     public void testIsXXEVulnerable() throws Exception {
         try {
             super.testIsXXEVulnerable();
-            fail("Thrown " + JDOMParseException.class.getName() + " expected");
-        } catch (final JDOMParseException e) {
+            fail("Thrown " + XStreamException.class.getName() + " expected");
+        } catch (final XStreamException e) {
             final String message = e.getMessage();
-            if (message.contains("Package")) {
+            if (!message.contains("DOCTYPE")) {
                 throw e;
             }
         }
diff --git a/xstream/src/test/com/thoughtworks/xstream/io/xml/SjsxpReaderTest.java b/xstream/src/test/com/thoughtworks/xstream/io/xml/SjsxpReaderTest.java
index 15c7b8e3..2ba70c79 100644
--- a/xstream/src/test/com/thoughtworks/xstream/io/xml/SjsxpReaderTest.java
+++ b/xstream/src/test/com/thoughtworks/xstream/io/xml/SjsxpReaderTest.java
@@ -48,17 +48,5 @@ protected HierarchicalStreamReader createReader(String xml) throws Exception {
         return driver.createReader(new StringReader(xml));
     }
 
-    @Override
-    public void testIsXXEVulnerable() throws Exception {
-        try {
-            super.testIsXXEVulnerable();
-        } catch (final XStreamException e) {
-            final String message = e.getMessage();
-            if (message.contains("ParseError") && message.contains("[1,1]")) {
-                throw e;
-            }
-        }
-    }
-
     // inherits tests from superclass
 }
diff --git a/xstream/src/test/com/thoughtworks/xstream/io/xml/StandardStaxReaderTest.java b/xstream/src/test/com/thoughtworks/xstream/io/xml/StandardStaxReaderTest.java
index e1e64d74..bda0e66d 100644
--- a/xstream/src/test/com/thoughtworks/xstream/io/xml/StandardStaxReaderTest.java
+++ b/xstream/src/test/com/thoughtworks/xstream/io/xml/StandardStaxReaderTest.java
@@ -10,7 +10,6 @@
  */
 package com.thoughtworks.xstream.io.xml;
 
-import com.thoughtworks.xstream.XStreamException;
 import com.thoughtworks.xstream.io.HierarchicalStreamDriver;
 import com.thoughtworks.xstream.io.HierarchicalStreamReader;
 
@@ -27,14 +26,7 @@ protected HierarchicalStreamReader createReader(String xml) throws Exception {
 
     @Override
     public void testIsXXEVulnerable() throws Exception {
-        try {
-            super.testIsXXEVulnerable();
-        } catch (final XStreamException e) {
-            final String message = e.getMessage();
-            if (message.contains("ParseError") && message.contains("[1,1]")) {
-                throw e;
-            }
-        }
+        super.testIsXXEVulnerable();
     }
 
     // inherits tests from superclass
diff --git a/xstream/src/test/com/thoughtworks/xstream/io/xml/StaxReaderTest.java b/xstream/src/test/com/thoughtworks/xstream/io/xml/StaxReaderTest.java
index bcc6fd81..1d9c09d9 100644
--- a/xstream/src/test/com/thoughtworks/xstream/io/xml/StaxReaderTest.java
+++ b/xstream/src/test/com/thoughtworks/xstream/io/xml/StaxReaderTest.java
@@ -31,7 +31,7 @@ public void testIsXXEVulnerable() throws Exception {
             fail("Thrown " + XStreamException.class.getName() + " expected");
         } catch (final XStreamException e) {
             final String message = e.getMessage();
-            if (message.contains("Package")) {
+            if (!message.contains("external entity")) {
                 throw e;
             }
         }
diff --git a/xstream/src/test/com/thoughtworks/xstream/io/xml/WstxReaderTest.java b/xstream/src/test/com/thoughtworks/xstream/io/xml/WstxReaderTest.java
index 926ae277..26193941 100644
--- a/xstream/src/test/com/thoughtworks/xstream/io/xml/WstxReaderTest.java
+++ b/xstream/src/test/com/thoughtworks/xstream/io/xml/WstxReaderTest.java
@@ -32,7 +32,7 @@ public void testIsXXEVulnerable() throws Exception {
             fail("Thrown " + XStreamException.class.getName() + " expected");
         } catch (final XStreamException e) {
             final String message = e.getMessage();
-            if (message.contains("Package")) {
+            if (!message.contains("external entity")) {
                 throw e;
             }
         }
