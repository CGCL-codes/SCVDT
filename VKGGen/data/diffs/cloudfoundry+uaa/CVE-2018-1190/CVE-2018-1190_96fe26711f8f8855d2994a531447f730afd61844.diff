diff --git a/server/src/main/java/org/cloudfoundry/identity/uaa/login/SessionController.java b/server/src/main/java/org/cloudfoundry/identity/uaa/login/SessionController.java
index 5e3008888f..4105e324df 100644
--- a/server/src/main/java/org/cloudfoundry/identity/uaa/login/SessionController.java
+++ b/server/src/main/java/org/cloudfoundry/identity/uaa/login/SessionController.java
@@ -12,6 +12,7 @@
  *******************************************************************************/
 package org.cloudfoundry.identity.uaa.login;
 
+import org.cloudfoundry.identity.uaa.util.JsonUtils;
 import org.springframework.stereotype.Controller;
 import org.springframework.ui.Model;
 import org.springframework.web.bind.annotation.RequestMapping;
@@ -22,9 +23,13 @@
 
     @RequestMapping("/session")
     public String session(Model model, @RequestParam String clientId, @RequestParam String messageOrigin) {
-        model.addAttribute("clientId", clientId);
-        model.addAttribute("messageOrigin", messageOrigin);
+        model.addAttribute("clientId", escape(clientId));
+        model.addAttribute("messageOrigin", escape(messageOrigin));
         return "session";
     }
 
+    private String escape(String s) {
+        return JsonUtils.writeValueAsString(s);
+    }
+
 }
diff --git a/server/src/main/resources/templates/web/session.html b/server/src/main/resources/templates/web/session.html
index 0424f537d5..2d3e4140a6 100644
--- a/server/src/main/resources/templates/web/session.html
+++ b/server/src/main/resources/templates/web/session.html
@@ -6,14 +6,14 @@
     window.addEventListener('message', handleMessage, false);
 
     function handleMessage(e) {
-      var origin = '[[${messageOrigin}]]';
+      var origin = [[${messageOrigin}]];
       var messageOrigin = e.origin === 'null' ? null : e.origin;
       if ((messageOrigin || 'file://') !== origin) return;
 
       try {
         var messageTokens = e.data.split(' ');
         var clientId = messageTokens[0];
-        var expectedClientId = '[[${clientId}]]';
+        var expectedClientId = [[${clientId}]];
 
         if (clientId !== expectedClientId) {
           throw 'Client ID mismatch';
diff --git a/uaa/src/test/java/org/cloudfoundry/identity/uaa/login/SessionControllerMockMvcTests.java b/uaa/src/test/java/org/cloudfoundry/identity/uaa/login/SessionControllerMockMvcTests.java
index 5cab67027f..cd77f4e9ac 100644
--- a/uaa/src/test/java/org/cloudfoundry/identity/uaa/login/SessionControllerMockMvcTests.java
+++ b/uaa/src/test/java/org/cloudfoundry/identity/uaa/login/SessionControllerMockMvcTests.java
@@ -3,17 +3,35 @@
 import org.cloudfoundry.identity.uaa.mock.InjectedMockContextTest;
 import org.junit.Test;
 
+import static org.hamcrest.CoreMatchers.containsString;
 import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.model;
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.view;
 
 public class SessionControllerMockMvcTests extends InjectedMockContextTest {
   @Test
-  public void sessionControllerReturnsSessionView() throws Exception {
+  public void sessionController_escapesClientIdValue() throws Exception {
+    String input = "1'\"";
     getMockMvc().perform(get("/session")
-        .param("clientId","1")
+        .param("clientId", input)
         .param("messageOrigin", "origin"))
-      .andExpect(view().name("session"))
-      .andExpect(status().isOk());
+        .andExpect(view().name("session"))
+        .andExpect(status().isOk())
+        .andExpect(model().size(2))
+        .andExpect(model().attribute("clientId", "\"1'\\\"\""))
+        .andExpect(content().string(containsString("\"1'\\\"\"")));
+  }
+
+  @Test
+  public void sessionController_escapesMessageOriginValue() throws Exception {
+    getMockMvc().perform(get("/session")
+        .param("clientId","1")
+        .param("messageOrigin", "origin\""))
+        .andExpect(view().name("session"))
+        .andExpect(status().isOk())
+        .andExpect(model().attribute("messageOrigin", "\"origin\\\"\""))
+        .andExpect(content().string(containsString("\"origin\\\"\"")));
   }
 }
