diff --git a/common/src/main/java/org/cloudfoundry/identity/uaa/oauth/UaaAuthorizationRequestManager.java b/common/src/main/java/org/cloudfoundry/identity/uaa/oauth/UaaAuthorizationRequestManager.java
index 11ff57aaf4..7193600b9f 100644
--- a/common/src/main/java/org/cloudfoundry/identity/uaa/oauth/UaaAuthorizationRequestManager.java
+++ b/common/src/main/java/org/cloudfoundry/identity/uaa/oauth/UaaAuthorizationRequestManager.java
@@ -170,7 +170,6 @@ public AuthorizationRequest createAuthorizationRequest(Map<String, String> autho
             }
         }
 
-        Set<String> scopesFromExternalAuthorities = null;
         if (!"client_credentials".equals(grantType) && securityContextAccessor.isUser()) {
             String userId = securityContextAccessor.getUserId();
             UaaUser uaaUser = uaaUserDatabase.retrieveUserById(userId);
@@ -179,29 +178,11 @@ public AuthorizationRequest createAuthorizationRequest(Map<String, String> autho
             scopes = checkUserScopes(scopes, authorities, clientDetails);
             //check client IDP relationship - allowed providers
             checkClientIdpAuthorization(clientDetails, uaaUser);
-
-            // TODO: will the grantType ever contain client_credentials or
-            // authorization_code
-            // External Authorities are things like LDAP groups that will be
-            // mapped to Oauth requestedScopes
-            // Add those requestedScopes to the request. These requestedScopes will not be
-            // validated against the requestedScopes
-            // registered to a client.
-            // These requestedScopes also do not need approval. The fact that they are
-            // already in an external
-            // group communicates user approval. Denying approval does not mean
-            // much
-            scopesFromExternalAuthorities = findScopesFromAuthorities(authorizationParameters.get("authorities"));
         }
 
         Set<String> resourceIds = getResourceIds(clientDetails, scopes);
         clientDetails.setResourceIds(resourceIds);
         Map<String, String> actualParameters = new HashMap<>(authorizationParameters);
-        if (scopesFromExternalAuthorities != null) {
-            actualParameters.put("external_scopes",
-                            OAuth2Utils.formatParameterList(scopesFromExternalAuthorities));
-
-        }
         AuthorizationRequest request = new AuthorizationRequest(
             actualParameters,
             null,
@@ -223,10 +204,6 @@ public AuthorizationRequest createAuthorizationRequest(Map<String, String> autho
         return request;
     }
 
-    private Set<String> findScopesFromAuthorities(String authorities) {
-        return new HashSet<String>();
-    }
-
     /**
      * Apply UAA rules to validate the requested scopes scope. For client credentials
      * grants the valid requested scopes are actually in
diff --git a/common/src/main/java/org/cloudfoundry/identity/uaa/oauth/token/UaaTokenServices.java b/common/src/main/java/org/cloudfoundry/identity/uaa/oauth/token/UaaTokenServices.java
index 3d0a6648a6..43eb789f10 100644
--- a/common/src/main/java/org/cloudfoundry/identity/uaa/oauth/token/UaaTokenServices.java
+++ b/common/src/main/java/org/cloudfoundry/identity/uaa/oauth/token/UaaTokenServices.java
@@ -556,13 +556,7 @@ public OAuth2AccessToken createAccessToken(OAuth2Authentication authentication)
         Set<String> userScopes = authentication.getOAuth2Request().getScope();
         String grantType = authentication.getOAuth2Request().getRequestParameters().get("grant_type");
 
-        Set<String> modifiableUserScopes = new LinkedHashSet<String>();
-        modifiableUserScopes.addAll(userScopes);
-        String externalScopes = authentication.getOAuth2Request().getRequestParameters()
-                        .get("external_scopes");
-        if (null != externalScopes && StringUtils.hasLength(externalScopes)) {
-            modifiableUserScopes.addAll(OAuth2Utils.parseParameterList(externalScopes));
-        }
+        Set<String> modifiableUserScopes = new LinkedHashSet<>(userScopes);
 
         Set<String> externalGroupsForIdToken = Collections.EMPTY_SET;
         Map<String,List<String>> userAttributesForIdToken = Collections.EMPTY_MAP;
