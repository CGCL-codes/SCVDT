diff --git a/server/src/main/resources/login-ui.xml b/server/src/main/resources/login-ui.xml
index 28e1f71890..3e197d450b 100644
--- a/server/src/main/resources/login-ui.xml
+++ b/server/src/main/resources/login-ui.xml
@@ -151,7 +151,7 @@
           entry-point-ref="loginEntryPoint"
           use-expressions="false"
           xmlns="http://www.springframework.org/schema/security">
-        <intercept-url pattern="/**" access="IS_AUTHENTICATED_ANONYMOUSLY" />
+        <intercept-url pattern="/**" access="IS_AUTHENTICATED_FULLY" />
         <csrf disabled="false"/>
         <access-denied-handler ref="loginEntryPoint"/>
     </http>
diff --git a/uaa/src/test/java/org/cloudfoundry/identity/uaa/integration/feature/ChangePasswordIT.java b/uaa/src/test/java/org/cloudfoundry/identity/uaa/integration/feature/ChangePasswordIT.java
index 2751292ab7..2d5554ba53 100644
--- a/uaa/src/test/java/org/cloudfoundry/identity/uaa/integration/feature/ChangePasswordIT.java
+++ b/uaa/src/test/java/org/cloudfoundry/identity/uaa/integration/feature/ChangePasswordIT.java
@@ -90,6 +90,7 @@ public void setUp() throws Exception {
 
     @Test
     public void testChangePassword() throws Exception {
+        webDriver.get(baseUrl + "/change_password");
         signIn(userEmail, PASSWORD);
 
         changePassword(PASSWORD, NEW_PASSWORD, "new");
@@ -108,7 +109,7 @@ public void displaysErrorWhenPasswordContravenesPolicy() {
         //the only policy we can contravene by default is the length
 
         String newPassword = new RandomValueStringGenerator(260).generate();
-
+        webDriver.get(baseUrl + "/change_password");
         signIn(userEmail, PASSWORD);
 
         changePassword(PASSWORD, newPassword, newPassword);
@@ -134,11 +135,8 @@ private void signOut() {
     }
 
     private void signIn(String userName, String password) {
-        webDriver.get(baseUrl + "/logout.do");
-        webDriver.get(baseUrl + "/login");
         webDriver.findElement(By.name("username")).sendKeys(userName);
         webDriver.findElement(By.name("password")).sendKeys(password);
         webDriver.findElement(By.xpath("//input[@value='Sign in']")).click();
-        assertThat(webDriver.findElement(By.cssSelector("h1")).getText(), containsString("Where to?"));
     }
 }
diff --git a/uaa/src/test/java/org/cloudfoundry/identity/uaa/mock/zones/DisableUserManagementSecurityFilterMockMvcTest.java b/uaa/src/test/java/org/cloudfoundry/identity/uaa/mock/zones/DisableUserManagementSecurityFilterMockMvcTest.java
index f3c749b744..f2bc78edde 100644
--- a/uaa/src/test/java/org/cloudfoundry/identity/uaa/mock/zones/DisableUserManagementSecurityFilterMockMvcTest.java
+++ b/uaa/src/test/java/org/cloudfoundry/identity/uaa/mock/zones/DisableUserManagementSecurityFilterMockMvcTest.java
@@ -351,8 +351,14 @@ public void changeEmailControllerVerifyEmailNotAllowed() throws Exception {
 
     @Test
     public void changePasswordControllerChangePasswordPageNotAllowed() throws Exception {
+        MockMvcUtils.setDisableInternalUserManagement(false, getWebApplicationContext());
+        
+        ResultActions result = createUser();
+        ScimUser createdUser = JsonUtils.readValue(result.andReturn().getResponse().getContentAsString(), ScimUser.class);
         MockMvcUtils.setDisableInternalUserManagement(true, getWebApplicationContext());
-        getMockMvc().perform(get("/change_password"))
+
+        getMockMvc().perform(get("/change_password")
+            .session(getUserSession(createdUser.getUserName(), PASSWD)))
             .andExpect(status().isForbidden())
             .andExpect(content()
                            .string(JsonObjectMatcherUtils.matchesJsonObject(
