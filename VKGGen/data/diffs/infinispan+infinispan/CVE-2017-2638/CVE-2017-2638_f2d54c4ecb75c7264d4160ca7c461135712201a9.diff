diff --git a/integrationtests/compatibility-mode-it/src/test/java/org/infinispan/it/compatibility/CompatibilityCacheFactory.java b/integrationtests/compatibility-mode-it/src/test/java/org/infinispan/it/compatibility/CompatibilityCacheFactory.java
index 11f5f9814fa..a700b102825 100644
--- a/integrationtests/compatibility-mode-it/src/test/java/org/infinispan/it/compatibility/CompatibilityCacheFactory.java
+++ b/integrationtests/compatibility-mode-it/src/test/java/org/infinispan/it/compatibility/CompatibilityCacheFactory.java
@@ -23,7 +23,7 @@
 import org.infinispan.commons.marshall.Marshaller;
 import org.infinispan.configuration.cache.CacheMode;
 import org.infinispan.manager.EmbeddedCacheManager;
-import org.infinispan.rest.NettyRestServer;
+import org.infinispan.rest.embedded.netty4.NettyRestServer;
 import org.infinispan.rest.configuration.RestServerConfigurationBuilder;
 import org.infinispan.server.hotrod.HotRodServer;
 import org.infinispan.server.hotrod.test.HotRodTestingUtil;
diff --git a/server/core/src/main/java/org/infinispan/server/core/configuration/SslEngineConfigurationBuilder.java b/server/core/src/main/java/org/infinispan/server/core/configuration/SslEngineConfigurationBuilder.java
index 16d605f6170..576dbd13b51 100644
--- a/server/core/src/main/java/org/infinispan/server/core/configuration/SslEngineConfigurationBuilder.java
+++ b/server/core/src/main/java/org/infinispan/server/core/configuration/SslEngineConfigurationBuilder.java
@@ -23,7 +23,7 @@
    private String trustStoreFileName;
    private char[] trustStorePassword;
    private char[] keyStoreCertificatePassword;
-   private String domain = "*";
+   private String domain = SslConfiguration.DEFAULT_SNI_DOMAIN;
 
    SslEngineConfigurationBuilder(SslConfigurationBuilder parentSslConfigurationBuilder) {
       this.parentSslConfigurationBuilder = parentSslConfigurationBuilder;
diff --git a/server/core/src/main/java/org/infinispan/server/core/transport/NettyChannelInitializer.java b/server/core/src/main/java/org/infinispan/server/core/transport/NettyChannelInitializer.java
index 3f1d5d06255..47d7e4f4b49 100644
--- a/server/core/src/main/java/org/infinispan/server/core/transport/NettyChannelInitializer.java
+++ b/server/core/src/main/java/org/infinispan/server/core/transport/NettyChannelInitializer.java
@@ -10,7 +10,7 @@
 import io.netty.channel.ChannelPipeline;
 import io.netty.handler.ssl.JdkSslContext;
 import io.netty.handler.ssl.SniHandler;
-import io.netty.util.DomainMappingBuilder;
+import io.netty.util.DomainNameMappingBuilder;
 
 /**
   * Pipeline factory for Netty based channels. For each pipeline created, a new decoder is created which means that
@@ -41,12 +41,12 @@ public void initializeChannel(Channel ch) throws Exception {
       SslConfiguration ssl = server.getConfiguration().ssl();
       if (ssl.enabled()) {
          //add default domain mapping
-         JdkSslContext defaultNettySslContext = SslUtils.createNettySslContext(ssl, ssl.sniDomainsConfiguration().get("*"));
-         DomainMappingBuilder<JdkSslContext> domainMappingBuilder = new DomainMappingBuilder<>(defaultNettySslContext);
+         JdkSslContext defaultNettySslContext = SslUtils.createNettySslContext(ssl, ssl.sniDomainsConfiguration().get(SslConfiguration.DEFAULT_SNI_DOMAIN));
+         DomainNameMappingBuilder<JdkSslContext> domainMappingBuilder = new DomainNameMappingBuilder<>(defaultNettySslContext);
 
          //and the rest
          ssl.sniDomainsConfiguration().forEach((k, v) -> {
-            if (!"*".equals(k)) {
+            if (!SslConfiguration.DEFAULT_SNI_DOMAIN.equals(k)) {
                domainMappingBuilder.add(k, SslUtils.createNettySslContext(ssl, v));
             }
          });
diff --git a/server/core/src/main/java/org/infinispan/server/core/utils/SslUtils.java b/server/core/src/main/java/org/infinispan/server/core/utils/SslUtils.java
index 869d4b45fee..582e2d7a571 100644
--- a/server/core/src/main/java/org/infinispan/server/core/utils/SslUtils.java
+++ b/server/core/src/main/java/org/infinispan/server/core/utils/SslUtils.java
@@ -34,10 +34,10 @@ public static SSLContext createJdkSslContext(SslConfiguration sslConfiguration,
    }
 
    public static JdkSslContext createSslContext(SSLContext sslContext, ClientAuth clientAuth) {
-      //Unfortunately we need to grap a list of available ciphers from the engine.
+      //Unfortunately we need to grab a list of available ciphers from the engine.
       //If we won't, JdkSslContext will use common ciphers from DEFAULT and SUPPORTED, which gives us 5 out of ~50 available ciphers
       //Of course, we don't need to any specific engine configuration here... just a list of ciphers
-      String[] ciphers = SslContextFactory.getEngine(sslContext, false, false).getSupportedCipherSuites();
+      String[] ciphers = SslContextFactory.getEngine(sslContext, false, clientAuth == ClientAuth.REQUIRE).getSupportedCipherSuites();
       return new JdkSslContext(sslContext, false, Arrays.asList(ciphers), IdentityCipherSuiteFilter.INSTANCE, null, clientAuth);
    }
 
diff --git a/server/integration/endpoint/src/main/java/org/infinispan/server/endpoint/EndpointLogger.java b/server/integration/endpoint/src/main/java/org/infinispan/server/endpoint/EndpointLogger.java
index f74061144d7..f9f6554d39c 100644
--- a/server/integration/endpoint/src/main/java/org/infinispan/server/endpoint/EndpointLogger.java
+++ b/server/integration/endpoint/src/main/java/org/infinispan/server/endpoint/EndpointLogger.java
@@ -194,4 +194,29 @@
    @LogMessage(level = INFO)
    @Message(id = 10034, value = "Multi tenant router started (HotRod listening on %s, REST listening on %s")
    void routerStarted(String hotrodAddress, String restAddress);
+
+   @LogMessage(level = WARN)
+   @Message(id = 10035, value = "The security-domain attribute on the REST connector is ignored")
+   void restSecurityDomainIgnored();
+
+   @Message(id = 10036, value = "The '%s' auth-method for the REST connector is currently unsupported")
+   StartException restAuthMethodUnsupported(String method);
+
+   @LogMessage(level = WARN)
+   @Message(id = 10037, value = "The security-mode attribute on the REST connector is ignored")
+   void restSecurityModeIgnored();
+
+   @LogMessage(level = WARN)
+   @Message(id = 10038, value = "The security-realm attribute on the REST connector is ignored. Use the authentication sub-element instead")
+   void restSecurityRealmIgnored();
+
+   @LogMessage(level = WARN)
+   @Message(id = 10039, value = "The auth-mehtod attribute on the REST connector is ignored. Use the authentication sub-element instead")
+   void restAuthMethodIgnored();
+
+   @Message(id = 10040, value = "Client certificate authentication cannot be used on an unencrypted endpoint")
+   StartException cannotUseCertificateAuthenticationWithoutEncryption();
+
+   @Message(id = 10041, value = "Authentication error: %s")
+   SecurityException authenticationError(Throwable reason);
 }
diff --git a/server/integration/endpoint/src/main/java/org/infinispan/server/endpoint/subsystem/EndpointSubsystemReader.java b/server/integration/endpoint/src/main/java/org/infinispan/server/endpoint/subsystem/EndpointSubsystemReader.java
index 61e02c32313..3cd43359287 100644
--- a/server/integration/endpoint/src/main/java/org/infinispan/server/endpoint/subsystem/EndpointSubsystemReader.java
+++ b/server/integration/endpoint/src/main/java/org/infinispan/server/endpoint/subsystem/EndpointSubsystemReader.java
@@ -271,7 +271,11 @@ private void parseRestConnector(XMLExtendedStreamReader reader, PathAddress subs
             break;
          }
          case AUTH_METHOD: {
-            RestConnectorResource.AUTH_METHOD.parseAndSetParameter(value, connector, reader);
+            if (namespace.since(Namespace.INFINISPAN_ENDPOINT_9_0)) {
+               throw ParseUtils.unexpectedAttribute(reader, i);
+            } else {
+               ROOT_LOGGER.restAuthMethodIgnored();
+            }
             break;
          }
          case CACHE_CONTAINER: {
@@ -292,15 +296,34 @@ private void parseRestConnector(XMLExtendedStreamReader reader, PathAddress subs
             break;
          }
          case SECURITY_DOMAIN: {
-            RestConnectorResource.SECURITY_DOMAIN.parseAndSetParameter(value, connector, reader);
-            break;
+            if (namespace.since(Namespace.INFINISPAN_ENDPOINT_9_0)) {
+               throw ParseUtils.unexpectedAttribute(reader, i);
+            } else {
+               ROOT_LOGGER.restSecurityDomainIgnored();
+            }
          }
          case SECURITY_MODE: {
-            RestConnectorResource.SECURITY_MODE.parseAndSetParameter(value, connector, reader);
+            if (namespace.since(Namespace.INFINISPAN_ENDPOINT_9_0)) {
+               throw ParseUtils.unexpectedAttribute(reader, i);
+            } else {
+               ROOT_LOGGER.restSecurityModeIgnored();
+            }
+            break;
+         }
+         case SECURITY_REALM: {
+            if (namespace.since(Namespace.INFINISPAN_ENDPOINT_9_0)) {
+               throw ParseUtils.unexpectedAttribute(reader, i);
+            } else {
+               ROOT_LOGGER.restSecurityRealmIgnored();
+            }
             break;
          }
          case VIRTUAL_HOST: {
-            ROOT_LOGGER.virtualHostNotInUse();
+            if (namespace.since(Namespace.INFINISPAN_ENDPOINT_9_0)) {
+               throw ParseUtils.unexpectedAttribute(reader, i);
+            } else {
+               ROOT_LOGGER.virtualHostNotInUse();
+            }
             break;
          }
          case IGNORED_CACHES: {
@@ -325,6 +348,10 @@ private void parseRestConnector(XMLExtendedStreamReader reader, PathAddress subs
       while (reader.hasNext() && (reader.nextTag() != XMLStreamConstants.END_ELEMENT)) {
          Element element = Element.forName(reader.getLocalName());
          switch (element) {
+            case AUTHENTICATION: {
+               parseRestAuthentication(reader, connector, operations);
+               break;
+            }
             case ENCRYPTION: {
                parseEncryption(reader, connector, operations);
                break;
@@ -336,6 +363,36 @@ private void parseRestConnector(XMLExtendedStreamReader reader, PathAddress subs
       }
    }
 
+   private void parseRestAuthentication(XMLExtendedStreamReader reader, ModelNode connector, List<ModelNode> operations)
+         throws XMLStreamException {
+      PathAddress address = PathAddress.pathAddress(connector.get(OP_ADDR)).append(
+            PathElement.pathElement(ModelKeys.AUTHENTICATION, ModelKeys.AUTHENTICATION_NAME));
+      ModelNode authentication = Util.createAddOperation(address);
+
+      for (int i = 0; i < reader.getAttributeCount(); i++) {
+         ParseUtils.requireNoNamespaceAttribute(reader, i);
+         String value = reader.getAttributeValue(i);
+         Attribute attribute = Attribute.forName(reader.getAttributeLocalName(i));
+         switch (attribute) {
+            case SECURITY_REALM: {
+               RestAuthenticationResource.SECURITY_REALM.parseAndSetParameter(value, authentication, reader);
+               break;
+            }
+            case AUTH_METHOD: {
+               RestAuthenticationResource.AUTH_METHOD.parseAndSetParameter(value, authentication, reader);
+               break;
+            }
+            default: {
+               throw ParseUtils.unexpectedAttribute(reader, i);
+            }
+         }
+      }
+
+      ParseUtils.requireNoContent(reader);
+
+      operations.add(authentication);
+   }
+
    private void parseWebSocketConnector(XMLExtendedStreamReader reader, PathAddress subsystemAddress,
          List<ModelNode> operations) throws XMLStreamException {
 
diff --git a/server/integration/endpoint/src/main/java/org/infinispan/server/endpoint/subsystem/EndpointSubsystemWriter.java b/server/integration/endpoint/src/main/java/org/infinispan/server/endpoint/subsystem/EndpointSubsystemWriter.java
index c4274ee6986..70b9775a3ae 100644
--- a/server/integration/endpoint/src/main/java/org/infinispan/server/endpoint/subsystem/EndpointSubsystemWriter.java
+++ b/server/integration/endpoint/src/main/java/org/infinispan/server/endpoint/subsystem/EndpointSubsystemWriter.java
@@ -115,6 +115,7 @@ private void writeRestConnector(final XMLExtendedStreamWriter writer, final Mode
       for (SimpleAttributeDefinition attribute : RestConnectorResource.REST_ATTRIBUTES) {
          attribute.marshallAsAttribute(connector, true, writer);
       }
+      writeRestAuthentication(writer, connector);
       writeEncryption(writer, connector);
       writer.writeEndElement();
    }
@@ -264,6 +265,18 @@ private void writePolicy(final XMLExtendedStreamWriter writer, final ModelNode s
       }
    }
 
+   private void writeRestAuthentication(final XMLExtendedStreamWriter writer, final ModelNode connector)
+         throws XMLStreamException {
+      if (connector.hasDefined(ModelKeys.AUTHENTICATION)) {
+         ModelNode authentication = connector.get(ModelKeys.AUTHENTICATION, ModelKeys.AUTHENTICATION_NAME);
+         writer.writeStartElement(Element.AUTHENTICATION.getLocalName());
+         for (SimpleAttributeDefinition attribute : RestAuthenticationResource.AUTHENTICATION_ATTRIBUTES) {
+            attribute.marshallAsAttribute(authentication, true, writer);
+         }
+         writer.writeEndElement();
+      }
+   }
+
    private void writeProperties(XMLExtendedStreamWriter writer, ModelNode sasl) throws XMLStreamException {
       if (sasl.hasDefined(ModelKeys.PROPERTY)) {
          for (Property property: sasl.get(ModelKeys.PROPERTY).asPropertyList()) {
diff --git a/server/integration/endpoint/src/main/java/org/infinispan/server/endpoint/subsystem/EndpointUtils.java b/server/integration/endpoint/src/main/java/org/infinispan/server/endpoint/subsystem/EndpointUtils.java
index 461ceb86de0..bf4e2b46e02 100644
--- a/server/integration/endpoint/src/main/java/org/infinispan/server/endpoint/subsystem/EndpointUtils.java
+++ b/server/integration/endpoint/src/main/java/org/infinispan/server/endpoint/subsystem/EndpointUtils.java
@@ -20,7 +20,7 @@
 
 import org.infinispan.configuration.global.GlobalConfiguration;
 import org.infinispan.manager.EmbeddedCacheManager;
-import org.infinispan.rest.NettyRestServer;
+import org.infinispan.rest.embedded.netty4.NettyRestServer;
 import org.infinispan.server.hotrod.HotRodServer;
 import org.infinispan.server.infinispan.spi.service.CacheContainerServiceName;
 import org.infinispan.server.infinispan.spi.service.CacheServiceName;
diff --git a/server/integration/endpoint/src/main/java/org/infinispan/server/endpoint/subsystem/MultiTenantRouterService.java b/server/integration/endpoint/src/main/java/org/infinispan/server/endpoint/subsystem/MultiTenantRouterService.java
index ef50c5e46ab..4a814316a7a 100644
--- a/server/integration/endpoint/src/main/java/org/infinispan/server/endpoint/subsystem/MultiTenantRouterService.java
+++ b/server/integration/endpoint/src/main/java/org/infinispan/server/endpoint/subsystem/MultiTenantRouterService.java
@@ -24,7 +24,7 @@
 import java.util.HashMap;
 import java.util.Optional;
 
-import org.infinispan.rest.NettyRestServer;
+import org.infinispan.rest.embedded.netty4.NettyRestServer;
 import org.infinispan.rest.Server;
 import org.infinispan.server.hotrod.HotRodServer;
 import org.infinispan.server.router.MultiTenantRouter;
diff --git a/server/integration/endpoint/src/main/java/org/infinispan/server/endpoint/subsystem/AuthMethod.java b/server/integration/endpoint/src/main/java/org/infinispan/server/endpoint/subsystem/RestAuthMethod.java
similarity index 86%
rename from server/integration/endpoint/src/main/java/org/infinispan/server/endpoint/subsystem/AuthMethod.java
rename to server/integration/endpoint/src/main/java/org/infinispan/server/endpoint/subsystem/RestAuthMethod.java
index 5303954a3f1..43b7ed05817 100644
--- a/server/integration/endpoint/src/main/java/org/infinispan/server/endpoint/subsystem/AuthMethod.java
+++ b/server/integration/endpoint/src/main/java/org/infinispan/server/endpoint/subsystem/RestAuthMethod.java
@@ -18,12 +18,6 @@
  */
 package org.infinispan.server.endpoint.subsystem;
 
-public enum AuthMethod {
-   BASIC, DIGEST, CLIENT_CERT, SPNEGO;
-
-   @Override
-   public String toString() {
-      return super.toString().replace('_', '-');
-   }
-
+public enum RestAuthMethod {
+   NONE, BASIC, DIGEST, CLIENT_CERT, SPNEGO;
 }
diff --git a/server/integration/endpoint/src/main/java/org/infinispan/server/endpoint/subsystem/RestAuthenticationAdd.java b/server/integration/endpoint/src/main/java/org/infinispan/server/endpoint/subsystem/RestAuthenticationAdd.java
new file mode 100644
index 00000000000..98a37778f20
--- /dev/null
+++ b/server/integration/endpoint/src/main/java/org/infinispan/server/endpoint/subsystem/RestAuthenticationAdd.java
@@ -0,0 +1,55 @@
+/*
+ * JBoss, Home of Professional Open Source
+ * Copyright 2013 Red Hat Inc. and/or its affiliates and other contributors
+ * as indicated by the @author tags. All rights reserved.
+ * See the copyright.txt in the distribution for a
+ * full listing of individual contributors.
+ *
+ * This copyrighted material is made available to anyone wishing to use,
+ * modify, copy, or redistribute it subject to the terms and conditions
+ * of the GNU Lesser General Public License, v. 2.1.
+ * This program is distributed in the hope that it will be useful, but WITHOUT A
+ * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
+ * PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.
+ * You should have received a copy of the GNU Lesser General Public License,
+ * v.2.1 along with this distribution; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA  02110-1301, USA.
+ */
+package org.infinispan.server.endpoint.subsystem;
+
+import org.jboss.as.controller.AbstractAddStepHandler;
+import org.jboss.as.controller.AttributeDefinition;
+import org.jboss.as.controller.OperationContext;
+import org.jboss.as.controller.OperationFailedException;
+import org.jboss.dmr.ModelNode;
+
+/**
+ * RestAuthenticationAdd.
+ *
+ * @author Tristan Tarrant
+ * @since 9.0
+ */
+public class RestAuthenticationAdd extends AbstractAddStepHandler {
+   static final RestAuthenticationAdd INSTANCE = new RestAuthenticationAdd(RestAuthenticationResource.AUTHENTICATION_ATTRIBUTES);
+
+   private final AttributeDefinition[] attributes;
+
+   RestAuthenticationAdd(final AttributeDefinition[] attributes) {
+      this.attributes = attributes;
+   }
+
+   @Override
+   protected void populateModel(ModelNode operation, ModelNode model) throws OperationFailedException {
+      for (AttributeDefinition attr : attributes) {
+         attr.validateAndSet(operation, model);
+      }
+   }
+
+   @Override
+   protected void performRuntime(OperationContext context, ModelNode operation, ModelNode model) throws OperationFailedException {
+      super.performRuntime(context, operation, model);
+      // once we add a cache configuration, we need to restart all the services for the changes to take effect
+      context.reloadRequired();
+   }
+}
diff --git a/server/integration/endpoint/src/main/java/org/infinispan/server/endpoint/subsystem/RestAuthenticationResource.java b/server/integration/endpoint/src/main/java/org/infinispan/server/endpoint/subsystem/RestAuthenticationResource.java
new file mode 100644
index 00000000000..69b1f2360d4
--- /dev/null
+++ b/server/integration/endpoint/src/main/java/org/infinispan/server/endpoint/subsystem/RestAuthenticationResource.java
@@ -0,0 +1,75 @@
+/*
+ * JBoss, Home of Professional Open Source
+ * Copyright 2013 Red Hat Inc. and/or its affiliates and other contributors
+ * as indicated by the @author tags. All rights reserved.
+ * See the copyright.txt in the distribution for a
+ * full listing of individual contributors.
+ *
+ * This copyrighted material is made available to anyone wishing to use,
+ * modify, copy, or redistribute it subject to the terms and conditions
+ * of the GNU Lesser General Public License, v. 2.1.
+ * This program is distributed in the hope that it will be useful, but WITHOUT A
+ * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
+ * PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.
+ * You should have received a copy of the GNU Lesser General Public License,
+ * v.2.1 along with this distribution; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA  02110-1301, USA.
+ */
+package org.infinispan.server.endpoint.subsystem;
+
+import org.jboss.as.controller.AttributeDefinition;
+import org.jboss.as.controller.OperationStepHandler;
+import org.jboss.as.controller.PathElement;
+import org.jboss.as.controller.ReloadRequiredRemoveStepHandler;
+import org.jboss.as.controller.ReloadRequiredWriteAttributeHandler;
+import org.jboss.as.controller.SimpleAttributeDefinition;
+import org.jboss.as.controller.SimpleAttributeDefinitionBuilder;
+import org.jboss.as.controller.SimpleResourceDefinition;
+import org.jboss.as.controller.operations.validation.EnumValidator;
+import org.jboss.as.controller.registry.ManagementResourceRegistration;
+import org.jboss.dmr.ModelNode;
+import org.jboss.dmr.ModelType;
+
+/**
+ * RestAuthenticationResource.
+ *
+ * @author Tristan Tarrant
+ * @since 9.0
+ */
+public class RestAuthenticationResource extends SimpleResourceDefinition {
+
+   private static final PathElement AUTHENTICATION_PATH = PathElement.pathElement(ModelKeys.AUTHENTICATION, ModelKeys.AUTHENTICATION_NAME);
+
+   static final SimpleAttributeDefinition SECURITY_REALM =
+         new SimpleAttributeDefinitionBuilder(ModelKeys.SECURITY_REALM, ModelType.STRING, true)
+                 .setAllowExpression(true)
+                 .setXmlName(ModelKeys.SECURITY_REALM)
+                 .setRestartAllServices()
+                 .build();
+
+   static final SimpleAttributeDefinition AUTH_METHOD =
+         new SimpleAttributeDefinitionBuilder(ModelKeys.AUTH_METHOD, ModelType.STRING, true)
+               .setAllowExpression(true)
+               .setXmlName(ModelKeys.AUTH_METHOD)
+               .setValidator(new EnumValidator<>(RestAuthMethod.class, true, false))
+               .setDefaultValue(new ModelNode().set(RestAuthMethod.NONE.name()))
+               .setRestartAllServices()
+               .build();
+
+   static final SimpleAttributeDefinition[] AUTHENTICATION_ATTRIBUTES = { SECURITY_REALM, AUTH_METHOD };
+
+   public RestAuthenticationResource() {
+      super(AUTHENTICATION_PATH, EndpointExtension.getResourceDescriptionResolver(ModelKeys.AUTHENTICATION), RestAuthenticationAdd.INSTANCE, ReloadRequiredRemoveStepHandler.INSTANCE);
+   }
+
+   @Override
+   public void registerAttributes(ManagementResourceRegistration resourceRegistration) {
+       super.registerAttributes(resourceRegistration);
+
+       final OperationStepHandler writeHandler = new ReloadRequiredWriteAttributeHandler(AUTHENTICATION_ATTRIBUTES);
+       for (AttributeDefinition attr : AUTHENTICATION_ATTRIBUTES) {
+           resourceRegistration.registerReadWriteAttribute(attr, null, writeHandler);
+       }
+   }
+}
diff --git a/server/integration/endpoint/src/main/java/org/infinispan/server/endpoint/subsystem/RestConnectorResource.java b/server/integration/endpoint/src/main/java/org/infinispan/server/endpoint/subsystem/RestConnectorResource.java
index 8083c3215fa..3fb1de45038 100644
--- a/server/integration/endpoint/src/main/java/org/infinispan/server/endpoint/subsystem/RestConnectorResource.java
+++ b/server/integration/endpoint/src/main/java/org/infinispan/server/endpoint/subsystem/RestConnectorResource.java
@@ -47,14 +47,6 @@
          .setRestartAllServices()
          .build();
 
-   static final SimpleAttributeDefinition AUTH_METHOD =
-         new SimpleAttributeDefinitionBuilder(ModelKeys.AUTH_METHOD, ModelType.STRING, true)
-                 .setAllowExpression(true)
-                 .setXmlName(ModelKeys.AUTH_METHOD)
-                 .setValidator(new EnumValidator<AuthMethod>(AuthMethod.class, true, false))
-                 .setRestartAllServices()
-                 .build();
-
    static final SimpleAttributeDefinition CONTEXT_PATH =
          new SimpleAttributeDefinitionBuilder(ModelKeys.CONTEXT_PATH, ModelType.STRING, true)
                  .setAllowExpression(true)
@@ -66,43 +58,12 @@
          new SimpleAttributeDefinitionBuilder(ModelKeys.EXTENDED_HEADERS, ModelType.STRING, true)
                  .setAllowExpression(true)
                  .setXmlName(ModelKeys.EXTENDED_HEADERS)
-                 .setValidator(new EnumValidator<ExtendedHeaders>(ExtendedHeaders.class, true, false))
+                 .setValidator(new EnumValidator<>(ExtendedHeaders.class, true, false))
                  .setDefaultValue(new ModelNode().set(ExtendedHeaders.ON_DEMAND.name()))
                  .setRestartAllServices()
                  .build();
 
-   static final SimpleAttributeDefinition SECURITY_DOMAIN =
-         new SimpleAttributeDefinitionBuilder(ModelKeys.SECURITY_DOMAIN, ModelType.STRING, true)
-                 .setAllowExpression(true)
-                 .setXmlName(ModelKeys.SECURITY_DOMAIN)
-                 .setRestartAllServices()
-                 .build();
-
-   static final SimpleAttributeDefinition SECURITY_MODE =
-         new SimpleAttributeDefinitionBuilder(ModelKeys.SECURITY_MODE, ModelType.STRING, true)
-                 .setAllowExpression(true)
-                 .setXmlName(ModelKeys.SECURITY_MODE)
-                 .setValidator(new EnumValidator<SecurityMode>(SecurityMode.class, true, false))
-                 .setDefaultValue(new ModelNode().set(SecurityMode.READ_WRITE.name()))
-                 .setRestartAllServices()
-                 .build();
-
-   static final SimpleAttributeDefinition VIRTUAL_HOST =
-      new SimpleAttributeDefinitionBuilder(ModelKeys.VIRTUAL_HOST, ModelType.STRING, true)
-         .setAllowExpression(true)
-         .setXmlName(ModelKeys.VIRTUAL_HOST)
-         .setRestartAllServices()
-         .build();
-
-   @Deprecated
-   static final SimpleAttributeDefinition VIRTUAL_SERVER =
-         new SimpleAttributeDefinitionBuilder(ModelKeys.VIRTUAL_SERVER, ModelType.STRING, true)
-                 .setAllowExpression(true)
-                 .setXmlName(ModelKeys.VIRTUAL_SERVER)
-                 .setRestartAllServices()
-                 .build();
-
-   static final SimpleAttributeDefinition[] REST_ATTRIBUTES = { SOCKET_BINDING, AUTH_METHOD, CONTEXT_PATH, EXTENDED_HEADERS, SECURITY_DOMAIN, SECURITY_MODE, VIRTUAL_SERVER, VIRTUAL_HOST };
+   static final SimpleAttributeDefinition[] REST_ATTRIBUTES = { SOCKET_BINDING, CONTEXT_PATH, EXTENDED_HEADERS };
 
    public RestConnectorResource(boolean isRuntimeRegistration) {
       super(REST_CONNECTOR_PATH, EndpointExtension.getResourceDescriptionResolver(ModelKeys.REST_CONNECTOR), RestSubsystemAdd.INSTANCE, RestSubsystemRemove.INSTANCE, isRuntimeRegistration);
@@ -110,6 +71,7 @@ public RestConnectorResource(boolean isRuntimeRegistration) {
 
    @Override
    public void registerChildren(ManagementResourceRegistration resourceRegistration) {
+      resourceRegistration.registerSubModel(new RestAuthenticationResource());
       resourceRegistration.registerSubModel(new EncryptionResource());
    }
 
diff --git a/server/integration/endpoint/src/main/java/org/infinispan/server/endpoint/subsystem/RestService.java b/server/integration/endpoint/src/main/java/org/infinispan/server/endpoint/subsystem/RestService.java
index e9dbcc9a5ce..6c5a984bd55 100644
--- a/server/integration/endpoint/src/main/java/org/infinispan/server/endpoint/subsystem/RestService.java
+++ b/server/integration/endpoint/src/main/java/org/infinispan/server/endpoint/subsystem/RestService.java
@@ -27,19 +27,24 @@
 import java.util.stream.Collectors;
 
 import org.infinispan.manager.EmbeddedCacheManager;
-import org.infinispan.rest.NettyRestServer;
+import org.infinispan.rest.embedded.netty4.NettyRestServer;
 import org.infinispan.rest.configuration.ExtendedHeaders;
 import org.infinispan.rest.configuration.RestServerConfigurationBuilder;
+import org.infinispan.rest.embedded.netty4.security.Authenticator;
+import org.infinispan.rest.embedded.netty4.security.BasicAuthenticator;
+import org.infinispan.rest.embedded.netty4.security.ClientCertAuthenticator;
+import org.infinispan.server.endpoint.subsystem.security.BasicRestSecurityDomain;
+import org.infinispan.server.endpoint.subsystem.security.ClientCertRestSecurityDomain;
 import org.jboss.as.controller.services.path.PathManager;
 import org.jboss.as.domain.management.SecurityRealm;
 import org.jboss.as.network.SocketBinding;
-import org.jboss.as.security.plugins.SecurityDomainContext;
 import org.jboss.dmr.ModelNode;
 import org.jboss.msc.service.Service;
 import org.jboss.msc.service.StartContext;
 import org.jboss.msc.service.StartException;
 import org.jboss.msc.service.StopContext;
 import org.jboss.msc.value.InjectedValue;
+import org.jboss.resteasy.plugins.server.embedded.SecurityDomain;
 
 
 /**
@@ -50,21 +55,23 @@
  */
 public class RestService implements Service<NettyRestServer>, EncryptableService {
    private static final String DEFAULT_CONTEXT_PATH = "";
-   private final InjectedValue<PathManager> pathManagerInjector = new InjectedValue<PathManager>();
-   private final InjectedValue<EmbeddedCacheManager> cacheManagerInjector = new InjectedValue<EmbeddedCacheManager>();
-   private final InjectedValue<SecurityDomainContext> securityDomainContextInjector = new InjectedValue<SecurityDomainContext>();
-   private final InjectedValue<SocketBinding> socketBinding = new InjectedValue<SocketBinding>();
-   private final InjectedValue<SecurityRealm> encryptionSecurityRealm = new InjectedValue<SecurityRealm>();
+   private final InjectedValue<PathManager> pathManagerInjector = new InjectedValue<>();
+   private final InjectedValue<EmbeddedCacheManager> cacheManagerInjector = new InjectedValue<>();
+   private final InjectedValue<SocketBinding> socketBinding = new InjectedValue<>();
+   private final InjectedValue<SecurityRealm> encryptionSecurityRealm = new InjectedValue<>();
+   private final InjectedValue<SecurityRealm> authenticationSecurityRealm = new InjectedValue<>();
    private final Map<String, InjectedValue<SecurityRealm>> sniDomains = new HashMap<>();
 
+   private final RestAuthMethod authMethod;
    private final ModelNode config;
    private final String serverName;
    private NettyRestServer restServer;
    private boolean clientAuth;
 
-   public RestService(String serverName, ModelNode config) {
+   public RestService(String serverName, ModelNode config, RestAuthMethod authMethod) {
       this.serverName = serverName;
       this.config = config.clone();
+      this.authMethod = authMethod;
    }
 
    private String cleanContextPath(String s) {
@@ -106,7 +113,33 @@ public synchronized void start(StartContext startContext) throws StartException
             builder.host(socketAddress.getAddress().getHostAddress());
             builder.port(socketAddress.getPort());
          }
-         restServer = NettyRestServer.createServer(builder.build(), cacheManagerInjector.getValue());
+
+         Authenticator authenticator;
+         switch (authMethod) {
+            case BASIC: {
+               SecurityRealm authenticationRealm = authenticationSecurityRealm.getOptionalValue();
+               SecurityDomain restSecurityDomain = new BasicRestSecurityDomain(authenticationRealm);
+               authenticator = new BasicAuthenticator(restSecurityDomain, EncryptableServiceHelper.isSecurityEnabled(this), authenticationRealm.getName());
+               break;
+            }
+            case CLIENT_CERT: {
+               if (!EncryptableServiceHelper.isSecurityEnabled(this)) {
+                  throw ROOT_LOGGER.cannotUseCertificateAuthenticationWithoutEncryption();
+               }
+               SecurityRealm authenticationRealm = authenticationSecurityRealm.getOptionalValue();
+               SecurityDomain restSecurityDomain = new ClientCertRestSecurityDomain(authenticationRealm);
+               authenticator = new ClientCertAuthenticator(restSecurityDomain);
+               break;
+            }
+            case NONE: {
+               authenticator = null;
+               break;
+            }
+            default:
+               throw ROOT_LOGGER.restAuthMethodUnsupported(authMethod.toString());
+         }
+
+         restServer = NettyRestServer.createServer(builder.build(), cacheManagerInjector.getValue(), authenticator);
       } catch (Exception e) {
          throw ROOT_LOGGER.restContextCreationFailed(e);
       }
@@ -147,8 +180,8 @@ public synchronized NettyRestServer getValue() throws IllegalStateException {
       return cacheManagerInjector;
    }
 
-   public InjectedValue<SecurityDomainContext> getSecurityDomainContextInjector() {
-      return securityDomainContextInjector;
+   public InjectedValue<SecurityRealm> getAuthenticationSecurityRealm() {
+      return authenticationSecurityRealm;
    }
 
    public InjectedValue<SocketBinding> getSocketBinding() {
@@ -162,7 +195,7 @@ public synchronized NettyRestServer getValue() throws IllegalStateException {
 
    @Override
    public InjectedValue<SecurityRealm> getSniSecurityRealm(String sniHostName) {
-      return sniDomains.computeIfAbsent(sniHostName, v -> new InjectedValue<SecurityRealm>());
+      return sniDomains.computeIfAbsent(sniHostName, v -> new InjectedValue<>());
    }
 
    @Override
@@ -184,5 +217,4 @@ public void setClientAuth(boolean enabled) {
    public boolean getClientAuth() {
       return clientAuth;
    }
-
-}
\ No newline at end of file
+}
diff --git a/server/integration/endpoint/src/main/java/org/infinispan/server/endpoint/subsystem/RestSubsystemAdd.java b/server/integration/endpoint/src/main/java/org/infinispan/server/endpoint/subsystem/RestSubsystemAdd.java
index dfd6ea3dc22..3843861afd5 100644
--- a/server/integration/endpoint/src/main/java/org/infinispan/server/endpoint/subsystem/RestSubsystemAdd.java
+++ b/server/integration/endpoint/src/main/java/org/infinispan/server/endpoint/subsystem/RestSubsystemAdd.java
@@ -45,8 +45,15 @@ protected void performRuntime(OperationContext context, ModelNode operation, Mod
       // Read the full model
       ModelNode config = Resource.Tools.readModel(context.readResource(PathAddress.EMPTY_ADDRESS));
 
+      RestAuthMethod restAuthMethod = RestAuthMethod.NONE;
+      ModelNode authConfig = null;
+      if (config.hasDefined(ModelKeys.AUTHENTICATION) && config.get(ModelKeys.AUTHENTICATION, ModelKeys.AUTHENTICATION_NAME).isDefined()) {
+         authConfig = config.get(ModelKeys.AUTHENTICATION, ModelKeys.AUTHENTICATION_NAME);
+         restAuthMethod = RestAuthMethod.valueOf(RestAuthenticationResource.AUTH_METHOD.resolveModelAttribute(context, authConfig).asString());
+      }
+
       // Create the service
-      final RestService service = new RestService(getServiceName(config), config);
+      final RestService service = new RestService(getServiceName(config), config, restAuthMethod);
 
       // Setup the various dependencies with injectors and install the service
       ServiceBuilder<?> builder = context.getServiceTarget().addService(EndpointUtils.getServiceName(operation, "rest"), service);
@@ -56,9 +63,13 @@ protected void performRuntime(OperationContext context, ModelNode operation, Mod
       EndpointUtils.addSocketBindingDependency(builder, getSocketBindingName(operation), service.getSocketBinding());
 
       builder.addDependency(PathManagerService.SERVICE_NAME, PathManager.class, service.getPathManagerInjector());
-      if (config.hasDefined(ModelKeys.SECURITY_DOMAIN)) {
-         EndpointUtils.addSecurityDomainDependency(builder, RestConnectorResource.SECURITY_DOMAIN.resolveModelAttribute(context, config).asString(), service.getSecurityDomainContextInjector());
+
+      if (authConfig != null) {
+         if(authConfig.hasDefined(ModelKeys.SECURITY_REALM)) {
+            EndpointUtils.addSecurityRealmDependency(builder, RestAuthenticationResource.SECURITY_REALM.resolveModelAttribute(context, authConfig).asString(), service.getAuthenticationSecurityRealm());
+         }
       }
+
       EncryptableSubsystemHelper.processEncryption(context, config, service, builder);
       builder.setInitialMode(ServiceController.Mode.ACTIVE);
       builder.install();
diff --git a/server/integration/endpoint/src/main/java/org/infinispan/server/endpoint/subsystem/SecurityMode.java b/server/integration/endpoint/src/main/java/org/infinispan/server/endpoint/subsystem/SecurityMode.java
deleted file mode 100644
index a08cb2279dd..00000000000
--- a/server/integration/endpoint/src/main/java/org/infinispan/server/endpoint/subsystem/SecurityMode.java
+++ /dev/null
@@ -1,30 +0,0 @@
-/*
- * JBoss, Home of Professional Open Source
- * Copyright 2012-2013 Red Hat Inc. and/or its affiliates and other contributors
- * as indicated by the @author tags. All rights reserved.
- * See the copyright.txt in the distribution for a
- * full listing of individual contributors.
- *
- * This copyrighted material is made available to anyone wishing to use,
- * modify, copy, or redistribute it subject to the terms and conditions
- * of the GNU Lesser General Public License, v. 2.1.
- * This program is distributed in the hope that it will be useful, but WITHOUT A
- * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
- * PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.
- * You should have received a copy of the GNU Lesser General Public License,
- * v.2.1 along with this distribution; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
- * MA  02110-1301, USA.
- */
-package org.infinispan.server.endpoint.subsystem;
-
-/**
- * SecurityMode.
- *
- * @author Tristan Tarrant
- * @since 5.2
- */
-public enum SecurityMode {
-   WRITE,
-   READ_WRITE
-}
diff --git a/server/integration/endpoint/src/main/java/org/infinispan/server/endpoint/subsystem/security/BasicRestSecurityDomain.java b/server/integration/endpoint/src/main/java/org/infinispan/server/endpoint/subsystem/security/BasicRestSecurityDomain.java
new file mode 100644
index 00000000000..3a96829190b
--- /dev/null
+++ b/server/integration/endpoint/src/main/java/org/infinispan/server/endpoint/subsystem/security/BasicRestSecurityDomain.java
@@ -0,0 +1,59 @@
+package org.infinispan.server.endpoint.subsystem.security;
+
+import static org.infinispan.server.endpoint.EndpointLogger.ROOT_LOGGER;
+
+import java.io.IOException;
+import java.security.Principal;
+import java.util.Collections;
+
+import javax.security.auth.callback.Callback;
+import javax.security.auth.callback.NameCallback;
+
+import org.infinispan.security.Security;
+import org.infinispan.server.core.security.simple.SimpleUserPrincipal;
+import org.jboss.as.core.security.SubjectUserInfo;
+import org.jboss.as.domain.management.AuthMechanism;
+import org.jboss.as.domain.management.AuthorizingCallbackHandler;
+import org.jboss.as.domain.management.SecurityRealm;
+import org.jboss.resteasy.plugins.server.embedded.SecurityDomain;
+import org.jboss.sasl.callback.VerifyPasswordCallback;
+
+/**
+ *
+ * @author Tristan Tarrant
+ * @since 9.0
+ */
+public class BasicRestSecurityDomain implements SecurityDomain {
+   private final SecurityRealm securityRealm;
+
+   public BasicRestSecurityDomain(SecurityRealm securityRealm) {
+      this.securityRealm = securityRealm;
+   }
+
+   @Override
+   public Principal authenticate(String username, String password) throws SecurityException {
+      AuthorizingCallbackHandler handler = securityRealm.getAuthorizingCallbackHandler(AuthMechanism.PLAIN);
+      NameCallback ncb = new NameCallback("name", username);
+      ncb.setName(username);
+      VerifyPasswordCallback vpcb = new VerifyPasswordCallback(password);
+      try {
+         handler.handle(new Callback[] { ncb, vpcb });
+      } catch (Exception e) {
+         ROOT_LOGGER.authenticationError(e);
+      }
+      if (vpcb.isVerified()) {
+         try {
+            SubjectUserInfo subjectUserInfo = handler.createSubjectUserInfo(Collections.singletonList(new SimpleUserPrincipal(username)));
+            return Security.getSubjectUserPrincipal(subjectUserInfo.getSubject());
+         } catch (IOException e) {
+            throw new SecurityException("Invalid credentials", e);
+         }
+
+      } else throw new SecurityException("Invalid credentials");
+   }
+
+   @Override
+   public boolean isUserInRole(Principal principal, String role) {
+      return true;
+   }
+}
diff --git a/server/integration/endpoint/src/main/java/org/infinispan/server/endpoint/subsystem/security/ClientCertRestSecurityDomain.java b/server/integration/endpoint/src/main/java/org/infinispan/server/endpoint/subsystem/security/ClientCertRestSecurityDomain.java
new file mode 100644
index 00000000000..eef40c391db
--- /dev/null
+++ b/server/integration/endpoint/src/main/java/org/infinispan/server/endpoint/subsystem/security/ClientCertRestSecurityDomain.java
@@ -0,0 +1,31 @@
+package org.infinispan.server.endpoint.subsystem.security;
+
+import java.security.Principal;
+
+import org.jboss.as.domain.management.SecurityRealm;
+import org.jboss.resteasy.plugins.server.embedded.SecurityDomain;
+
+/**
+ *
+ * @author Tristan Tarrant
+ * @since 9.0
+ */
+public class ClientCertRestSecurityDomain implements SecurityDomain {
+   private final SecurityRealm securityRealm;
+   private static final Principal CLIENT_CERT_PRINCIPAL = () -> "CLIENT_CERTIFICATE";
+
+   public ClientCertRestSecurityDomain(SecurityRealm securityRealm) {
+      this.securityRealm = securityRealm;
+   }
+
+   @Override
+   public Principal authenticate(String username, String password) throws SecurityException {
+      // RestEasy's SecurityDomain doesn't really allow us to authenticate by client cert, so just fake it here
+      return CLIENT_CERT_PRINCIPAL;
+   }
+
+   @Override
+   public boolean isUserInRole(Principal principal, String role) {
+      return true;
+   }
+}
diff --git a/server/integration/endpoint/src/main/resources/org/infinispan/server/endpoint/subsystem/LocalDescriptions.properties b/server/integration/endpoint/src/main/resources/org/infinispan/server/endpoint/subsystem/LocalDescriptions.properties
index 2a263e418c4..216c145a501 100644
--- a/server/integration/endpoint/src/main/resources/org/infinispan/server/endpoint/subsystem/LocalDescriptions.properties
+++ b/server/integration/endpoint/src/main/resources/org/infinispan/server/endpoint/subsystem/LocalDescriptions.properties
@@ -42,14 +42,9 @@ rest-connector.remove=Removes a REST connector
 rest-connector.name=The name to give to this connector
 rest-connector.ignored-caches=List of caches ignored for this connector
 rest-connector.cache-container=The cache container to use
-rest-connector.virtual-server=The virtual server on which the REST connector should be published
-rest-connector.virtual-host=The virtual host on which the REST connector should be published
 rest-connector.context-path=The context path on which the REST connector should be published
-rest-connector.security-domain=The security domain to apply to the REST connector
 rest-connector.socket-binding=The socket binding to use for this connector
-rest-connector.auth-method=The authentication method to apply to the REST connector (BASIC, DIGEST, CLIENT-CERT)
-rest-connector.security-mode=Whether to authenticate only writes (WRITE) or all access (READ_WRITE)
-rest-connector.extended-headers=Allow retrieval of extendend information about entries (NEVER, ON_DEMAND)
+rest-connector.extended-headers=Allow retrieval of extended information about entries (NEVER, ON_DEMAND)
 websocket-connector=A WebSocket connector
 websocket-connector.add=Adds a WebSocket connector
 websocket-connector.remove=Removes a WebSocket connector
@@ -78,6 +73,7 @@ authentication.add=Adds the authentication configuration to the connector
 authentication.remove=Removes the encryption configuration from the connector
 authentication.security-realm=The security realm which should be used for this connector
 authentication.security-domain=The security domain to use for this connector
+authentication.auth-method=The authentication method to apply to the REST connector (BASIC, DIGEST, CLIENT-CERT)
 sasl=SASL Configuration
 sasl.add=Adds the SASL configuration to the connector
 sasl.remove=Removes the SASL configuration from the connector
@@ -134,4 +130,4 @@ prefix.add=Adds a path prefix for REST for multi tenant router
 prefix.remove=Removes a path prefix for REST for multi tenant router
 multi-tenancy=Multi-tenancy for router connector
 multi-tenancy.add=Adds multi-tenancy to the router connector
-multi-tenancy.remove=Removes multi-tenancy to the router connector
\ No newline at end of file
+multi-tenancy.remove=Removes multi-tenancy to the router connector
diff --git a/server/integration/endpoint/src/main/resources/schema/jboss-infinispan-endpoint_9_0.xsd b/server/integration/endpoint/src/main/resources/schema/jboss-infinispan-endpoint_9_0.xsd
index 8fdaf7e069e..22c29128dee 100644
--- a/server/integration/endpoint/src/main/resources/schema/jboss-infinispan-endpoint_9_0.xsd
+++ b/server/integration/endpoint/src/main/resources/schema/jboss-infinispan-endpoint_9_0.xsd
@@ -138,6 +138,7 @@
 
     <xs:complexType name="rest-connector">
         <xs:all>
+            <xs:element name="authentication" type="tns:rest-authentication" minOccurs="0" maxOccurs="1" />
             <xs:element name="encryption" type="tns:encryption" minOccurs="0" maxOccurs="1" />
         </xs:all>
         <xs:attribute name="name" type="xs:string" use="optional">
@@ -155,32 +156,12 @@
                 <xs:documentation>The socket on which this connector will bind itself. If missing, the server will not listen to TCP connections</xs:documentation>
             </xs:annotation>
         </xs:attribute>
-        <xs:attribute name="virtual-host" type="xs:string" use="optional">
-            <xs:annotation>
-                <xs:documentation>This setting has been deprecated and will be ignored.</xs:documentation>
-            </xs:annotation>
-        </xs:attribute>
         <xs:attribute name="context-path" type="xs:string" use="optional">
             <xs:annotation>
                 <xs:documentation>The context path on which to register the REST connector. Defaults to '' (the root context)</xs:documentation>
             </xs:annotation>
         </xs:attribute>
-        <xs:attribute name="security-domain" type="xs:string" use="optional">
-            <xs:annotation>
-                <xs:documentation>The security domain to use for authentication/authorization purposes. Defaults to none (no authentication)</xs:documentation>
-            </xs:annotation>
-        </xs:attribute>
-        <xs:attribute name="auth-method" type="xs:string" use="optional">
-            <xs:annotation>
-                <xs:documentation>The authentication method to require. Can be BASIC, DIGEST, CLIENT_CERT, SPNEGO. Defaults to BASIC</xs:documentation>
-            </xs:annotation>
-        </xs:attribute>
-        <xs:attribute name="security-mode" type="tns:security-mode" use="optional">
-            <xs:annotation>
-                <xs:documentation>Determines whether authentication is required only for writing (WRITE) or for both reads and writes (READ_WRITE). Defaults to READ_WRITE</xs:documentation>
-            </xs:annotation>
-        </xs:attribute>
-        <xs:attribute name="extended-headers" type="tns:extended-headers" use="optional">
+        <xs:attribute name="extended-headers" type="tns:extended-headers" use="optional" default="ON_DEMAND">
             <xs:annotation>
                 <xs:documentation>Whether to enable extended headers. Can be NEVER or ON_DEMAND. Defaults to ON_DEMAND</xs:documentation>
             </xs:annotation>
@@ -449,6 +430,19 @@
         </xs:list>
     </xs:simpleType>
 
+    <xs:complexType name="rest-authentication">
+        <xs:attribute name="security-realm" type="xs:string" use="optional">
+            <xs:annotation>
+                <xs:documentation>The security realm to use for authentication/authorization purposes. Defaults to none (no authentication)</xs:documentation>
+            </xs:annotation>
+        </xs:attribute>
+        <xs:attribute name="auth-method" type="tns:auth-method" use="optional" default="NONE">
+            <xs:annotation>
+                <xs:documentation>The authentication method to require. Can be NONE, BASIC, DIGEST, CLIENT_CERT, SPNEGO. Defaults to NONE. Setting it to a different value requires enabling a security-realm.</xs:documentation>
+            </xs:annotation>
+        </xs:attribute>
+    </xs:complexType>
+
     <xs:complexType name="encryption">
         <xs:sequence>
             <xs:element name="sni" type="tns:sni" minOccurs="0" maxOccurs="unbounded"/>
@@ -500,16 +494,31 @@
         </xs:attribute>
     </xs:complexType>
 
-    <xs:simpleType name="security-mode">
+    <xs:simpleType name="auth-method">
         <xs:restriction base="xs:token">
-            <xs:enumeration value="WRITE">
+            <xs:enumeration value="NONE">
+                <xs:annotation>
+                    <xs:documentation>Client authentication is disabled</xs:documentation>
+                </xs:annotation>
+            </xs:enumeration>
+            <xs:enumeration value="BASIC">
+                <xs:annotation>
+                    <xs:documentation>Client authentication will be performed using the Basic scheme</xs:documentation>
+                </xs:annotation>
+            </xs:enumeration>
+            <xs:enumeration value="DIGEST">
+                <xs:annotation>
+                    <xs:documentation>Client authentication will be performed using the Digest scheme</xs:documentation>
+                </xs:annotation>
+            </xs:enumeration>
+            <xs:enumeration value="CLIENT_CERT">
                 <xs:annotation>
-                    <xs:documentation>Specifies that authentication against the specified security domain should apply only to write methods (PUT, POST, DELETE)</xs:documentation>
+                    <xs:documentation>Client authentication will be use the peer's certificate</xs:documentation>
                 </xs:annotation>
             </xs:enumeration>
-            <xs:enumeration value="READ_WRITE">
+            <xs:enumeration value="SPNEGO">
                 <xs:annotation>
-                    <xs:documentation>Specifies that authentication against the specified security domain should apply to all methods (PUT, POST, DELETE, GET, HEAD)</xs:documentation>
+                    <xs:documentation>Client authentication will be use the SPNEGO scheme</xs:documentation>
                 </xs:annotation>
             </xs:enumeration>
         </xs:restriction>
diff --git a/server/integration/endpoint/src/main/resources/subsystem-templates/infinispan-endpoint.xml b/server/integration/endpoint/src/main/resources/subsystem-templates/infinispan-endpoint.xml
index 78ee787d1f9..037f953090f 100644
--- a/server/integration/endpoint/src/main/resources/subsystem-templates/infinispan-endpoint.xml
+++ b/server/integration/endpoint/src/main/resources/subsystem-templates/infinispan-endpoint.xml
@@ -12,7 +12,9 @@
             <topology-state-transfer lazy-retrieval="false" lock-timeout="1000" replication-timeout="5000" />
          </hotrod-connector>
          <memcached-connector socket-binding="memcached" cache-container="local" />
-         <rest-connector socket-binding="rest" cache-container="local" security-domain="other" auth-method="BASIC" />
+         <rest-connector socket-binding="rest" cache-container="local">
+            <authentication security-realm="ApplicationRealm" auth-method="BASIC" />
+         </rest-connector>
          <websocket-connector socket-binding="websocket" cache-container="local" />
       </replacement>
    </supplement>
@@ -23,7 +25,9 @@
             <topology-state-transfer lazy-retrieval="false" lock-timeout="1000" replication-timeout="5000" />
          </hotrod-connector>
          <memcached-connector socket-binding="memcached" cache-container="clustered" />
-         <rest-connector socket-binding="rest" cache-container="clustered" security-domain="other" auth-method="BASIC" />
+         <rest-connector socket-binding="rest" cache-container="clustered">
+            <authentication security-realm="ApplicationRealm" auth-method="BASIC" />
+         </rest-connector>
          <websocket-connector socket-binding="websocket" cache-container="clustered" />
       </replacement>
    </supplement>
@@ -38,7 +42,9 @@
    <supplement name="rest-auth">
       <replacement placeholder="@@default-cache-container@@" attributeValue="local" />
       <replacement placeholder="CONNECTORS">
-         <rest-connector socket-binding="rest" cache-container="local" security-domain="other" auth-method="BASIC" />
+         <rest-connector socket-binding="rest" cache-container="local">
+            <authentication security-realm="ApplicationRealm" auth-method="BASIC" />
+         </rest-connector>
       </replacement>
    </supplement>
    <supplement name="rest-rolling-upgrade">
@@ -135,5 +141,6 @@
    <socket-binding name="memcached" port="11211" />
    <socket-binding name="websocket" port="8181" />
    <socket-binding name="rest" port="8080" />
+   <socket-binding name="rest-ssl" port="8443" />
    <socket-binding name="rest-multi-tenancy" port="8081" />
 </config>
diff --git a/server/integration/endpoint/src/test/java/org/infinispan/server/endpoint/EndpointSubsystemTestCase.java b/server/integration/endpoint/src/test/java/org/infinispan/server/endpoint/EndpointSubsystemTestCase.java
index 13b46608550..227cc71ddd7 100644
--- a/server/integration/endpoint/src/test/java/org/infinispan/server/endpoint/EndpointSubsystemTestCase.java
+++ b/server/integration/endpoint/src/test/java/org/infinispan/server/endpoint/EndpointSubsystemTestCase.java
@@ -68,7 +68,7 @@ public EndpointSubsystemTestCase(String xmlFile, int operations, String xsdPath)
       Object[][] data = new Object[][] {
             { "endpoint-7.2.xml", 16, "schema/jboss-infinispan-endpoint_7_2.xsd" },
             { "endpoint-8.0.xml", 16, "schema/jboss-infinispan-endpoint_8_0.xsd" },
-            { "endpoint-9.0.xml", 37, "schema/jboss-infinispan-endpoint_9_0.xsd" },
+            { "endpoint-9.0.xml", 38, "schema/jboss-infinispan-endpoint_9_0.xsd" },
       };
       return Arrays.asList(data);
    }
diff --git a/server/integration/endpoint/src/test/resources/org/infinispan/server/endpoint/endpoint-9.0.xml b/server/integration/endpoint/src/test/resources/org/infinispan/server/endpoint/endpoint-9.0.xml
index c4b6f36d68e..ccbb9a1e295 100644
--- a/server/integration/endpoint/src/test/resources/org/infinispan/server/endpoint/endpoint-9.0.xml
+++ b/server/integration/endpoint/src/test/resources/org/infinispan/server/endpoint/endpoint-9.0.xml
@@ -26,7 +26,8 @@
         </encryption>
     </hotrod-connector>
     <memcached-connector cache="memcachedCache" socket-binding="memcached" cache-container="default" idle-timeout="100" tcp-nodelay="true" worker-threads="5" receive-buffer-size="10000" send-buffer-size="10000" />
-    <rest-connector name="rest1" socket-binding="rest" cache-container="default" ignored-caches="cache1 cache2 cache3" context-path="/" security-domain="other" auth-method="BASIC" security-mode="READ_WRITE" extended-headers="ON_DEMAND">
+    <rest-connector name="rest1" socket-binding="rest" cache-container="default" ignored-caches="cache1 cache2 cache3" context-path="/" extended-headers="ON_DEMAND">
+        <authentication security-realm="other" auth-method="BASIC"/>
         <encryption security-realm="other">
             <sni host-name="sni" security-realm="other" />
             <sni host-name="sni2" security-realm="other2" />
diff --git a/server/integration/testsuite/build-testsuite.xml b/server/integration/testsuite/build-testsuite.xml
index 6efbf549606..2d09f9e80a1 100644
--- a/server/integration/testsuite/build-testsuite.xml
+++ b/server/integration/testsuite/build-testsuite.xml
@@ -135,7 +135,7 @@
                 <move file="${server.old.dist}-tmp/${dir.in.zip}" tofile="${server.old.dist}" />
                 <delete dir="${server.old.dist}-tmp" />
                 <transform transformDir="${server.old.dist}/standalone/configuration" in="standalone.xml" out="standalone.xml"
-                           removeRestSecurity="true"/>
+                           removeRestSecurity="true" />
                 <transform transformDir="${server.old.dist}/standalone/configuration" in="clustered.xml" out="clustered.xml"
                            removeRestSecurity="true"/>
 
@@ -198,39 +198,23 @@
                    filtering="true"/>
         <transform in="clustered.xml" out="testsuite/clustered-transport-stack.xml" modifyStack="${other.parts}/jgroups-stack.xml"/>
         <transform in="clustered.xml" out="testsuite/clustered-with-l1.xml" modifyInfinispan="${infinispan.parts}/l1.xml"/>
-        <transform in="standalone.xml" out="testsuite/rest-sec-basic-wr.xml" modifyInfinispan="${infinispan.parts}/rest-security.xml" filtering="true">
-            <rest-sec>
-                <transform-rest-sec securityMode="WRITE" cacheContainer="security" in="@{in}" />
-            </rest-sec>
-        </transform>
-        <transform in="standalone.xml" out="testsuite/rest-sec-basic-rw.xml" modifyInfinispan="${infinispan.parts}/rest-security.xml" filtering="true">
+        <transform in="standalone.xml" out="testsuite/rest-sec-basic.xml" modifyInfinispan="${infinispan.parts}/rest-security.xml" filtering="true">
             <rest-sec>
-                <transform-rest-sec securityMode="READ_WRITE" cacheContainer="security" in="@{in}"/>
+                <transform-rest-sec cacheContainer="security" in="@{in}"/>
             </rest-sec>
         </transform>
-        <transform in="standalone.xml" out="testsuite/rest-sec-cert-wr.xml" modifyInfinispan="${infinispan.parts}/rest-security.xml" filtering="true">
-            <rest-sec>
-                <transform-rest-sec securityMode="WRITE" authMethod="CLIENT-CERT" cacheContainer="security" securityDomain="client_cert_auth" modifyCertSecDomain="true" in="@{in}"/>
-            </rest-sec>
-        </transform>
-        <transform in="standalone.xml" out="testsuite/rest-sec-cert-rw.xml" modifyInfinispan="${infinispan.parts}/rest-security.xml" filtering="true">
-            <rest-sec>
-                <transform-rest-sec securityMode="READ_WRITE" authMethod="CLIENT-CERT" cacheContainer="security" securityDomain="client_cert_auth" modifyCertSecDomain="true" in="@{in}"/>
-            </rest-sec>
-        </transform>
-
-        <transform in="standalone.xml" out="testsuite/rest-sec-digest-wr.xml" modifyInfinispan="${infinispan.parts}/rest-security.xml" filtering="true">
+        <transform in="standalone.xml" out="testsuite/rest-sec-cert.xml" modifyInfinispan="${infinispan.parts}/rest-security.xml" addSecRealm="${other.parts}/client-cert-realm.xml" addVault="${other.parts}/vault.xml" filtering="true">
             <rest-sec>
-                <transform-rest-sec securityMode="WRITE" authMethod="DIGEST" cacheContainer="security" securityDomain="digest_auth" modifyDigestSecDomain="true" in="@{in}"/>
+                <transform-rest-sec authMethod="CLIENT_CERT" cacheContainer="security" securityRealm="ClientCertRealm" modifyCertSecRealm="true" in="@{in}"/>
             </rest-sec>
         </transform>
-        <transform in="standalone.xml" out="testsuite/rest-sec-digest-rw.xml" modifyInfinispan="${infinispan.parts}/rest-security.xml" filtering="true">
+        <transform in="standalone.xml" out="testsuite/rest-sec-digest.xml" modifyInfinispan="${infinispan.parts}/rest-security.xml" filtering="true">
             <rest-sec>
-                <transform-rest-sec securityMode="READ_WRITE" authMethod="DIGEST" cacheContainer="security" securityDomain="digest_auth" modifyDigestSecDomain="true" in="@{in}"/>
+                <transform-rest-sec authMethod="DIGEST" cacheContainer="security" securityRealm="digest_auth" modifyDigestSecRealm="true" in="@{in}"/>
             </rest-sec>
         </transform>
         <transform in="clustered.xml" out="testsuite/clustered-with-sym-encrypt.xml"
-            modifyInfinispan="${infinispan.parts}/default-repl.xml" 
+            modifyInfinispan="${infinispan.parts}/default-repl.xml"
             addEncrypt="${other.parts}/jgroups-encrypt.xml"
             addVault="${other.parts}/vault.xml"
             filtering="true"/>
@@ -303,7 +287,7 @@
                    hotrodAuth="${infinispan.parts}/hotrod-auth-krb.xml"
                    addKrbOpts="${other.parts}/kerberos-properties.xml"
                    addKrbSecDomain="${other.parts}/kerberos-security-domain.xml" />
-        <transform in="clustered.xml" out="testsuite/hotrod-authz-ldap.xml" 
+        <transform in="clustered.xml" out="testsuite/hotrod-authz-ldap.xml"
                    modifyInfinispan="${infinispan.parts}/clustered-secured-ldap-roles.xml"
                    hotrodAuth="${infinispan.parts}/hotrod-auth-krb-authz-ldap.xml"
                    addSecRealm="${other.parts}/ldap-authz-security-realm.xml"
@@ -314,24 +298,24 @@
                    modifyInfinispan="${infinispan.parts}/clustered-secured-external.xml"
                    hotrodAuth="${infinispan.parts}/hotrod-auth-external.xml"
                    hotrodEncrypt="${infinispan.parts}/hotrod-ssl-external-realm.xml"
-                   addSecRealm="${other.parts}/sasl-external-realm.xml"
+                   addSecRealm="${other.parts}/client-cert-realm.xml"
                    addVault="${other.parts}/vault.xml" />
-        <transform in="clustered.xml" out="testsuite/clustered-with-sasl-md5-0.xml"  
+        <transform in="clustered.xml" out="testsuite/clustered-with-sasl-md5-0.xml"
                    modifyInfinispan="${infinispan.parts}/default-repl.xml"
                    addJGroupsSasl="${other.parts}/jgroups-sasl-md5-0.xml"
                   addVault="${other.parts}/vault.xml"/>
-        <transform in="clustered.xml" out="testsuite/clustered-with-sasl-md5-1.xml"  
+        <transform in="clustered.xml" out="testsuite/clustered-with-sasl-md5-1.xml"
                    modifyInfinispan="${infinispan.parts}/default-repl.xml"
                    addJGroupsSasl="${other.parts}/jgroups-sasl-md5-1.xml"
                   addVault="${other.parts}/vault.xml"/>
-        <transform in="clustered.xml" out="testsuite/clustered-with-sasl-krb-0.xml"  
+        <transform in="clustered.xml" out="testsuite/clustered-with-sasl-krb-0.xml"
                    modifyInfinispan="${infinispan.parts}/default-repl.xml"
                   addJGroupsSasl="${other.parts}/jgroups-sasl-krb-0.xml"
                    addKrbOpts="${other.parts}/kerberos-properties.xml"
                    addKrbSecDomain="${other.parts}/kerberos-sec-domain-node0.xml" />
         <transform in="clustered.xml" out="testsuite/clustered-with-sasl-krb-1.xml"
                    modifyInfinispan="${infinispan.parts}/default-repl.xml"
-                  addJGroupsSasl="${other.parts}/jgroups-sasl-krb-1.xml"		
+                  addJGroupsSasl="${other.parts}/jgroups-sasl-krb-1.xml"
                    addKrbOpts="${other.parts}/kerberos-properties.xml"
                    addKrbSecDomain="${other.parts}/kerberos-sec-domain-node1.xml" />
         <transform in="clustered.xml" out="testsuite/hotrod-ssl-no-auth.xml"
@@ -433,22 +417,20 @@
         <attribute name="transformDir" default="${server1.configs}"/>
         <attribute name="in" />
         <attribute name="restTemplateFile" default="${default.transform.rest}" />
-        <attribute name="securityDomain" default="other"/>
-        <attribute name="securityMode" default="WRITE"/>
+        <attribute name="securityRealm" default="ApplicationRealm"/>
         <attribute name="authMethod" default="BASIC" />
         <attribute name="cacheContainer" default="local"/>
-        <attribute name="modifyCertSecDomain" default="false" />
-        <attribute name="modifyDigestSecDomain" default="false" />
+        <attribute name="modifyCertSecRealm" default="false" />
+        <attribute name="modifyDigestSecRealm" default="false" />
 
         <sequential>
             <xslt in="@{transformDir}/@{in}-transformed" out="@{transformDir}/@{in}-transformed-rest"
                   style="@{restTemplateFile}">
-                <param name="security.domain" expression="@{securityDomain}" />
-                <param name="security.mode" expression="@{securityMode}"/>
+                <param name="security.realm" expression="@{securityRealm}" />
                 <param name="cache.container" expression="@{cacheContainer}"/>
                 <param name="auth.method" expression="@{authMethod}"/>
-                <param name="modifyCertSecDomain" expression="@{modifyCertSecDomain}"/>
-                <param name="modifyDigestSecDomain" expression="@{modifyDigestSecDomain}"/>
+                <param name="modifyCertSecRealm" expression="@{modifyCertSecRealm}"/>
+                <param name="modifyDigestSecRealm" expression="@{modifyDigestSecRealm}"/>
 
             </xslt>
             <move file="@{transformDir}/@{in}-transformed-rest" tofile="@{transformDir}/@{in}-transformed"
diff --git a/server/integration/testsuite/src/test/java/org/infinispan/server/test/client/rest/RESTClientWithSniEncryptionIT.java b/server/integration/testsuite/src/test/java/org/infinispan/server/test/client/rest/RESTClientWithSniEncryptionIT.java
index a659173e526..3f338b3e878 100644
--- a/server/integration/testsuite/src/test/java/org/infinispan/server/test/client/rest/RESTClientWithSniEncryptionIT.java
+++ b/server/integration/testsuite/src/test/java/org/infinispan/server/test/client/rest/RESTClientWithSniEncryptionIT.java
@@ -1,26 +1,23 @@
 package org.infinispan.server.test.client.rest;
 
-import static org.infinispan.server.test.client.rest.RESTHelper.*;
-import static org.jboss.aesh.terminal.Key.e;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertTrue;
+import static org.infinispan.server.test.client.rest.RESTHelper.addServer;
+import static org.infinispan.server.test.client.rest.RESTHelper.clearServers;
+import static org.infinispan.server.test.client.rest.RESTHelper.fullPathKey;
+import static org.infinispan.server.test.client.rest.RESTHelper.put;
+import static org.infinispan.server.test.client.rest.RESTHelper.setSni;
+import static org.infinispan.server.test.client.rest.RESTHelper.toSsl;
 import static org.junit.Assert.fail;
 
 import java.io.File;
 import java.util.Optional;
 
 import javax.net.ssl.SSLContext;
-import javax.net.ssl.SSLHandshakeException;
 
 import org.apache.http.HttpResponse;
 import org.infinispan.arquillian.core.InfinispanResource;
 import org.infinispan.arquillian.core.RemoteInfinispanServer;
 import org.infinispan.arquillian.core.RunningServer;
 import org.infinispan.arquillian.core.WithRunningServer;
-import org.infinispan.client.hotrod.RemoteCache;
-import org.infinispan.client.hotrod.RemoteCacheManager;
-import org.infinispan.client.hotrod.configuration.ConfigurationBuilder;
-import org.infinispan.client.hotrod.exceptions.TransportException;
 import org.infinispan.commons.util.SslContextFactory;
 import org.infinispan.server.test.category.Security;
 import org.infinispan.server.test.util.ITestUtils;
@@ -28,13 +25,10 @@
 import org.junit.After;
 import org.junit.Assert;
 import org.junit.Before;
-import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.experimental.categories.Category;
 import org.junit.runner.RunWith;
 
-import sun.security.validator.ValidatorException;
-
 @RunWith(Arquillian.class)
 @Category({Security.class})
 @WithRunningServer({@RunningServer(name = "restSslWithSni", config = "testsuite/rest-ssl-with-sni.xml")})
diff --git a/server/integration/testsuite/src/test/java/org/infinispan/server/test/client/rest/RESTHelper.java b/server/integration/testsuite/src/test/java/org/infinispan/server/test/client/rest/RESTHelper.java
index 7998f35e972..9bd7985f7c0 100644
--- a/server/integration/testsuite/src/test/java/org/infinispan/server/test/client/rest/RESTHelper.java
+++ b/server/integration/testsuite/src/test/java/org/infinispan/server/test/client/rest/RESTHelper.java
@@ -32,6 +32,7 @@
 import org.apache.http.client.methods.HttpHead;
 import org.apache.http.client.methods.HttpPost;
 import org.apache.http.client.methods.HttpPut;
+import org.apache.http.conn.ssl.NoopHostnameVerifier;
 import org.apache.http.conn.ssl.SSLConnectionSocketFactory;
 import org.apache.http.entity.InputStreamEntity;
 import org.apache.http.entity.StringEntity;
@@ -229,12 +230,11 @@ public static HttpResponse put(URI uri, Object data, String contentType, int exp
 
     public static void setCredentials(String username, String password) {
         Credentials credentials = new UsernamePasswordCredentials(username, password);
-        credsProvider.setCredentials(
-                new AuthScope(servers.get(0).getHostname(), port), credentials);
+        credsProvider.setCredentials(AuthScope.ANY, credentials);
     }
 
     public static void setSni(SSLContext sslContext, java.util.Optional<String> sniHostName) {
-        client = HttpClients.custom().setSSLSocketFactory(new SSLConnectionSocketFactory(sslContext, SSLConnectionSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER) {
+        client = HttpClients.custom().setSSLSocketFactory(new SSLConnectionSocketFactory(sslContext, NoopHostnameVerifier.INSTANCE) {
             @Override
             protected void prepareSocket(SSLSocket socket) throws IOException {
                 if(sniHostName.isPresent()) {
diff --git a/server/integration/testsuite/src/test/java/org/infinispan/server/test/security/rest/AbstractBasicSecurity.java b/server/integration/testsuite/src/test/java/org/infinispan/server/test/security/rest/AbstractBasicSecurity.java
index 7afee5ab454..771a981815e 100644
--- a/server/integration/testsuite/src/test/java/org/infinispan/server/test/security/rest/AbstractBasicSecurity.java
+++ b/server/integration/testsuite/src/test/java/org/infinispan/server/test/security/rest/AbstractBasicSecurity.java
@@ -24,24 +24,6 @@
     private static final String TEST_USER_PASSWORD = "testpassword";
     private static final String KEY_D = "d";
 
-    protected void securedWriteOperations() throws Exception {
-        RESTHelper.setCredentials(TEST_USER_NAME, TEST_USER_PASSWORD);
-        put(fullPathKey(KEY_A), "data", "application/text", HttpStatus.SC_OK);
-        RESTHelper.clearCredentials();
-        put(fullPathKey(KEY_B), "data", "application/text", HttpStatus.SC_UNAUTHORIZED);
-        RESTHelper.setCredentials(TEST_USER_NAME, TEST_USER_PASSWORD);
-        post(fullPathKey(KEY_C), "data", "application/text", HttpStatus.SC_OK);
-        RESTHelper.clearCredentials();
-        post(fullPathKey(KEY_D), "data", "application/text", HttpStatus.SC_UNAUTHORIZED);
-        get(fullPathKey(KEY_A), "data");
-        head(fullPathKey(KEY_A), HttpStatus.SC_OK);
-        delete(fullPathKey(KEY_A), HttpStatus.SC_UNAUTHORIZED);
-        RESTHelper.setCredentials(TEST_USER_NAME, TEST_USER_PASSWORD);
-        delete(fullPathKey(KEY_A), HttpStatus.SC_OK);
-        delete(fullPathKey(KEY_C), HttpStatus.SC_OK);
-        RESTHelper.clearCredentials();
-    }
-
     protected void securedReadWriteOperations() throws Exception {
         RESTHelper.setCredentials(TEST_USER_NAME, TEST_USER_PASSWORD);
         put(fullPathKey(KEY_A), "data", "application/text", HttpStatus.SC_OK);
diff --git a/server/integration/testsuite/src/test/java/org/infinispan/server/test/security/rest/RESTBasicSecurityIT.java b/server/integration/testsuite/src/test/java/org/infinispan/server/test/security/rest/RESTBasicSecurityIT.java
index cbd171118c6..be2ede98c20 100644
--- a/server/integration/testsuite/src/test/java/org/infinispan/server/test/security/rest/RESTBasicSecurityIT.java
+++ b/server/integration/testsuite/src/test/java/org/infinispan/server/test/security/rest/RESTBasicSecurityIT.java
@@ -8,7 +8,6 @@
 import org.jboss.arquillian.junit.Arquillian;
 import org.junit.After;
 import org.junit.Before;
-import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
@@ -20,7 +19,6 @@
  * @author <a href="mailto:vchepeli@redhat.com">Vitalii Chepeliuk</a>
  */
 @RunWith(Arquillian.class)
-@Ignore
 public class RESTBasicSecurityIT extends AbstractBasicSecurity {
 
     private static final String CONTAINER = "rest-security-basic";
@@ -39,13 +37,7 @@ public void tearDown() throws Exception {
     }
 
     @Test
-    @WithRunningServer({@RunningServer(name = CONTAINER, config = "testsuite/rest-sec-basic-wr.xml")})
-    public void testSecuredWriteOperations() throws Exception {
-        securedWriteOperations();
-    }
-
-    @Test
-    @WithRunningServer({@RunningServer(name = CONTAINER, config = "testsuite/rest-sec-basic-rw.xml")})
+    @WithRunningServer({@RunningServer(name = CONTAINER, config = "testsuite/rest-sec-basic.xml")})
     public void testSecuredReadWriteOperations() throws Exception {
         securedReadWriteOperations();
     }
diff --git a/server/integration/testsuite/src/test/java/org/infinispan/server/test/security/rest/RESTCertSecurityIT.java b/server/integration/testsuite/src/test/java/org/infinispan/server/test/security/rest/RESTCertSecurityIT.java
index 0082367935d..827cfd34d36 100644
--- a/server/integration/testsuite/src/test/java/org/infinispan/server/test/security/rest/RESTCertSecurityIT.java
+++ b/server/integration/testsuite/src/test/java/org/infinispan/server/test/security/rest/RESTCertSecurityIT.java
@@ -5,14 +5,13 @@
 import java.io.BufferedReader;
 import java.io.IOException;
 import java.io.InputStreamReader;
-import java.net.URL;
-import java.security.cert.X509Certificate;
+import java.net.SocketException;
 
+import javax.net.ssl.HostnameVerifier;
 import javax.net.ssl.KeyManager;
 import javax.net.ssl.SSLContext;
 import javax.net.ssl.SSLException;
-import javax.net.ssl.SSLSession;
-import javax.net.ssl.SSLSocket;
+import javax.net.ssl.SSLHandshakeException;
 import javax.net.ssl.TrustManager;
 
 import org.apache.http.HttpResponse;
@@ -28,7 +27,6 @@
 import org.apache.http.conn.socket.ConnectionSocketFactory;
 import org.apache.http.conn.socket.PlainConnectionSocketFactory;
 import org.apache.http.conn.ssl.SSLConnectionSocketFactory;
-import org.apache.http.conn.ssl.X509HostnameVerifier;
 import org.apache.http.entity.StringEntity;
 import org.apache.http.impl.client.CloseableHttpClient;
 import org.apache.http.impl.client.HttpClients;
@@ -37,8 +35,11 @@
 import org.infinispan.arquillian.core.RemoteInfinispanServer;
 import org.infinispan.arquillian.core.RunningServer;
 import org.infinispan.arquillian.core.WithRunningServer;
+import org.infinispan.security.TestCachePermission;
 import org.jboss.arquillian.junit.Arquillian;
 import org.jboss.security.JBossJSSESecurityDomain;
+import org.junit.AfterClass;
+import org.junit.BeforeClass;
 import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -63,7 +64,6 @@
  * @author <a href="mailto:mgencur@redhat.com">Martin Gencur</a>
  */
 @RunWith(Arquillian.class)
-@Ignore
 public class RESTCertSecurityIT {
     private static final String CONTAINER = "rest-security-cert";
 
@@ -77,53 +77,65 @@
     @InfinispanResource("rest-security-cert")
     RemoteInfinispanServer server;
 
-    @Test
-    @WithRunningServer({@RunningServer(name = CONTAINER, config = "testsuite/rest-sec-cert-wr.xml")})
-    public void testSecuredWriteOperations() throws Exception {
-        //correct alias for the certificate
-        put(securedClient(testAlias), keyAddress(KEY_A), HttpStatus.SC_OK);
-        //test wrong authorization, 1. wrong alias for the certificate
-        put(securedClient(test2Alias), keyAddress(KEY_B), HttpStatus.SC_FORBIDDEN);
-        //2. access over 8080
-        put(securedClient(testAlias), keyAddressUnsecured(KEY_B), HttpStatus.SC_UNAUTHORIZED);
-        post(securedClient(testAlias), keyAddress(KEY_C), HttpStatus.SC_OK);
-        post(securedClient(test2Alias), keyAddress(KEY_D), HttpStatus.SC_FORBIDDEN);
-        //get is not secured, should be working over 8080
-        HttpResponse resp = get(securedClient(test2Alias), keyAddressUnsecured(KEY_A), HttpStatus.SC_OK);
-        String content = new BufferedReader(new InputStreamReader(resp.getEntity().getContent())).readLine();
-        assertEquals("data", content);
-        head(securedClient(test2Alias), keyAddressUnsecured(KEY_A), HttpStatus.SC_OK);
-        delete(securedClient(test2Alias), keyAddress(KEY_A), HttpStatus.SC_FORBIDDEN);
-        delete(securedClient(testAlias), keyAddress(KEY_A), HttpStatus.SC_OK);
-        delete(securedClient(testAlias), keyAddress(KEY_C), HttpStatus.SC_OK);
+    static CloseableHttpClient securedTest;
+    static CloseableHttpClient securedTest2;
+
+    @BeforeClass
+    public static void setup() throws Exception {
+       securedTest = securedClient(testAlias);
+       securedTest2 = securedClient(test2Alias);
     }
 
-    @Test
-    @WithRunningServer({@RunningServer(name = CONTAINER, config = "testsuite/rest-sec-cert-rw.xml")})
+    @AfterClass
+    public static void tearDown() {
+       try {
+          securedTest.close();
+       } catch (IOException e) {
+       }
+       try {
+          securedTest2.close();
+       } catch (IOException e) {
+       }
+    }
+
+
+    @Ignore
     public void testSecuredReadWriteOperations() throws Exception {
         //correct alias for the certificate
-        put(securedClient(testAlias), keyAddress(KEY_A), HttpStatus.SC_OK);
+        put(securedTest, keyAddress(KEY_A), HttpStatus.SC_OK);
         //test wrong authorization, 1. wrong alias for the certificate
-        put(securedClient(test2Alias), keyAddress(KEY_B), HttpStatus.SC_FORBIDDEN);
+        put(securedTest2, keyAddress(KEY_B), HttpStatus.SC_FORBIDDEN);
         //2. access over 8080
-        put(securedClient(testAlias), keyAddressUnsecured(KEY_B), HttpStatus.SC_UNAUTHORIZED);
-        post(securedClient(testAlias), keyAddress(KEY_C), HttpStatus.SC_OK);
-        post(securedClient(test2Alias), keyAddress(KEY_D), HttpStatus.SC_FORBIDDEN);
+        put(securedTest, keyAddressUnsecured(KEY_B), HttpStatus.SC_UNAUTHORIZED);
+        post(securedTest, keyAddress(KEY_C), HttpStatus.SC_OK);
+        post(securedTest2, keyAddress(KEY_D), HttpStatus.SC_FORBIDDEN);
         //get is secured too
-        HttpResponse resp = get(securedClient(testAlias), keyAddress(KEY_A), HttpStatus.SC_OK);
+        HttpResponse resp = get(securedTest, keyAddress(KEY_A), HttpStatus.SC_OK);
         String content = new BufferedReader(new InputStreamReader(resp.getEntity().getContent())).readLine();
         assertEquals("data", content);
         //test wrong authorization, 1. wrong alias for the certificate
-        get(securedClient(test2Alias), keyAddress(KEY_A), HttpStatus.SC_FORBIDDEN);
+        get(securedTest2, keyAddress(KEY_A), HttpStatus.SC_FORBIDDEN);
         //2. access over 8080
-        get(securedClient(testAlias), keyAddressUnsecured(KEY_A), HttpStatus.SC_UNAUTHORIZED);
-        head(securedClient(test2Alias), keyAddress(KEY_A), HttpStatus.SC_FORBIDDEN);
+        get(securedTest, keyAddressUnsecured(KEY_A), HttpStatus.SC_UNAUTHORIZED);
+        head(securedTest2, keyAddress(KEY_A), HttpStatus.SC_FORBIDDEN);
         //access over 8080
-        head(securedClient(testAlias), keyAddressUnsecured(KEY_A), HttpStatus.SC_UNAUTHORIZED);
-        head(securedClient(testAlias), keyAddress(KEY_A), HttpStatus.SC_OK);
-        delete(securedClient(test2Alias), keyAddress(KEY_A), HttpStatus.SC_FORBIDDEN);
-        delete(securedClient(testAlias), keyAddress(KEY_A), HttpStatus.SC_OK);
-        delete(securedClient(testAlias), keyAddress(KEY_C), HttpStatus.SC_OK);
+        head(securedTest, keyAddressUnsecured(KEY_A), HttpStatus.SC_UNAUTHORIZED);
+        head(securedTest, keyAddress(KEY_A), HttpStatus.SC_OK);
+        delete(securedTest2, keyAddress(KEY_A), HttpStatus.SC_FORBIDDEN);
+        delete(securedTest, keyAddress(KEY_A), HttpStatus.SC_OK);
+        delete(securedTest, keyAddress(KEY_C), HttpStatus.SC_OK);
+    }
+
+    @Test
+    @WithRunningServer({@RunningServer(name = CONTAINER, config = "testsuite/rest-sec-cert.xml")})
+    public void testValidCertificateAccess() throws Exception {
+        put(securedTest, keyAddress(KEY_A), HttpStatus.SC_OK);
+    }
+
+    @Test
+    @WithRunningServer({@RunningServer(name = CONTAINER, config = "testsuite/rest-sec-cert.xml")})
+    public void testInvalidCertificateAccess() throws Exception {
+        put(securedTest2, keyAddress(KEY_A), HttpStatus.SC_FORBIDDEN);
     }
 
     private String keyAddress(String key) {
@@ -136,13 +148,23 @@ private String keyAddressUnsecured(String key) {
                 + server.getRESTEndpoint().getContextPath() + "/default/" + key;
     }
 
+    private HttpResponse handleIOException(IOException e, int expectedCode) throws IOException {
+       if ((expectedCode == HttpStatus.SC_FORBIDDEN) && ((e instanceof SSLHandshakeException) || (e instanceof SocketException)))
+          return null;
+       else throw e;
+    }
+
     private HttpResponse put(CloseableHttpClient httpClient, String uri, int expectedCode) throws Exception {
         HttpResponse response;
         HttpPut put = new HttpPut(uri);
         put.setEntity(new StringEntity("data", "UTF-8"));
-        response = httpClient.execute(put);
-        assertEquals(expectedCode, response.getStatusLine().getStatusCode());
-        return response;
+        try {
+           response = httpClient.execute(put);
+           assertEquals(expectedCode, response.getStatusLine().getStatusCode());
+           return response;
+        } catch (IOException e) {
+           return handleIOException(e, expectedCode);
+        }
     }
 
     private HttpResponse post(CloseableHttpClient httpClient, String uri, int expectedCode) throws Exception {
@@ -180,37 +202,20 @@ private HttpResponse head(CloseableHttpClient httpClient, String uri, int expect
     }
 
     public static CloseableHttpClient securedClient(String alias) throws Exception {
+       ClassLoader tccl = Thread.currentThread().getContextClassLoader();
        SSLContext ctx = SSLContext.getInstance("TLS");
        JBossJSSESecurityDomain jsseSecurityDomain = new JBossJSSESecurityDomain("client_cert_auth");
-       jsseSecurityDomain.setKeyStorePassword("changeit");
-       ClassLoader tccl = Thread.currentThread().getContextClassLoader();
-       URL keystore = tccl.getResource("client.keystore");
-       jsseSecurityDomain.setKeyStoreURL(keystore.getPath());
+       jsseSecurityDomain.setKeyStoreURL(tccl.getResource("client.keystore").getPath());
+       jsseSecurityDomain.setKeyStorePassword("secret");
        jsseSecurityDomain.setClientAlias(alias);
+       jsseSecurityDomain.setTrustStoreURL(tccl.getResource("truststore_client.jks").getPath());
+       jsseSecurityDomain.setTrustStorePassword("secret");
        jsseSecurityDomain.reloadKeyAndTrustStore();
        KeyManager[] keyManagers = jsseSecurityDomain.getKeyManagers();
        TrustManager[] trustManagers = jsseSecurityDomain.getTrustManagers();
        ctx.init(keyManagers, trustManagers, null);
-       X509HostnameVerifier verifier = new X509HostnameVerifier() {
-
-           @Override
-           public void verify(String s, SSLSocket sslSocket) throws IOException {
-           }
-
-           @Override
-           public void verify(String s, X509Certificate x509Certificate) throws SSLException {
-           }
-
-           @Override
-           public void verify(String s, String[] strings, String[] strings1) throws SSLException {
-           }
-
-           @Override
-           public boolean verify(String string, SSLSession ssls) {
-               return true;
-           }
-       };
-       ConnectionSocketFactory sslssf = new SSLConnectionSocketFactory(ctx, verifier);//SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);
+       HostnameVerifier verifier = (hostname, sslSession) -> true;
+       ConnectionSocketFactory sslssf = new SSLConnectionSocketFactory(ctx, verifier);
        ConnectionSocketFactory plainsf = new PlainConnectionSocketFactory();
        Registry<ConnectionSocketFactory> sr = RegistryBuilder.<ConnectionSocketFactory>create()
                .register("http", plainsf)
diff --git a/server/integration/testsuite/src/test/java/org/infinispan/server/test/security/rest/RESTDigestSecurityIT.java b/server/integration/testsuite/src/test/java/org/infinispan/server/test/security/rest/RESTDigestSecurityIT.java
index 0d27669efd7..89a3ebdf27e 100644
--- a/server/integration/testsuite/src/test/java/org/infinispan/server/test/security/rest/RESTDigestSecurityIT.java
+++ b/server/integration/testsuite/src/test/java/org/infinispan/server/test/security/rest/RESTDigestSecurityIT.java
@@ -40,13 +40,7 @@ public void tearDown() throws Exception {
     }
 
     @Test
-    @WithRunningServer({@RunningServer(name = CONTAINER, config = "testsuite/rest-sec-digest-wr.xml")})
-    public void testSecuredWriteOperations() throws Exception {
-        securedWriteOperations();
-    }
-
-    @Test
-    @WithRunningServer({@RunningServer(name = CONTAINER, config = "testsuite/rest-sec-digest-rw.xml")})
+    @WithRunningServer({@RunningServer(name = CONTAINER, config = "testsuite/rest-sec-digest.xml")})
     public void testSecuredReadWriteOperations() throws Exception {
         securedReadWriteOperations();
     }
diff --git a/server/integration/testsuite/src/test/resources/arquillian.xml b/server/integration/testsuite/src/test/resources/arquillian.xml
index 98be2506190..3479448c699 100644
--- a/server/integration/testsuite/src/test/resources/arquillian.xml
+++ b/server/integration/testsuite/src/test/resources/arquillian.xml
@@ -415,7 +415,7 @@
                 <property name="javaHome">${server.jvm}</property>
                 <property name="jbossHome">${server1.dist}</property>
                 <property name="managementAddress">${node0.ip}</property>
-                <property name="serverConfig">testsuite/rest-sec-basic-wr.xml</property>
+                <property name="serverConfig">testsuite/rest-sec-basic.xml</property>
                 <property name="javaVmArguments">${server.jvm.args} -Djboss.node.name=node0
                     -Djboss.bind.address.management=${node0.ip} -Djboss.bind.address=${node0.ip}
                     -Dorg.apache.tomcat.util.buf.UDecoder.ALLOW_ENCODED_SLASH=true -Djgroups.join_timeout=2000
@@ -429,7 +429,7 @@
                 <property name="javaHome">${server.jvm}</property>
                 <property name="jbossHome">${server1.dist}</property>
                 <property name="managementAddress">${node0.ip}</property>
-                <property name="serverConfig">testsuite/rest-sec-cert-wr.xml</property>
+                <property name="serverConfig">testsuite/rest-sec-cert.xml</property>
                 <property name="javaVmArguments">${server.jvm.args} -Djboss.node.name=node0
                     -Djboss.bind.address.management=${node0.ip} -Djboss.bind.address=${node0.ip}
                     -Dorg.apache.tomcat.util.buf.UDecoder.ALLOW_ENCODED_SLASH=true -Djgroups.join_timeout=2000
@@ -444,7 +444,7 @@
                 <property name="javaHome">${server.jvm}</property>
                 <property name="jbossHome">${server1.dist}</property>
                 <property name="managementAddress">${node0.ip}</property>
-                <property name="serverConfig">testsuite/rest-sec-digest-wr.xml</property>
+                <property name="serverConfig">testsuite/rest-sec-digest.xml</property>
                 <property name="javaVmArguments">${server.jvm.args} -Djboss.node.name=node0
                     -Djboss.bind.address.management=${node0.ip} -Djboss.bind.address=${node0.ip}
                     -Dorg.apache.tomcat.util.buf.UDecoder.ALLOW_ENCODED_SLASH=true -Djgroups.join_timeout=2000
diff --git a/server/integration/testsuite/src/test/resources/client.keystore b/server/integration/testsuite/src/test/resources/client.keystore
index 9bd836fffdb..1fb829e7ff3 100644
Binary files a/server/integration/testsuite/src/test/resources/client.keystore and b/server/integration/testsuite/src/test/resources/client.keystore differ
diff --git a/server/integration/testsuite/src/test/resources/config/infinispan/hotrod-auth-external.xml b/server/integration/testsuite/src/test/resources/config/infinispan/hotrod-auth-external.xml
index 6a4ce2780ea..9b9d0840aaf 100644
--- a/server/integration/testsuite/src/test/resources/config/infinispan/hotrod-auth-external.xml
+++ b/server/integration/testsuite/src/test/resources/config/infinispan/hotrod-auth-external.xml
@@ -1,8 +1,8 @@
-                <authentication security-realm="SaslExteramlRealm">
+                <authentication security-realm="ClientCertRealm">
                     <sasl server-name="node0" mechanisms="EXTERNAL" qop="auth" strength="high medium low">
                         <policy>
                             <no-anonymous value="true" />
                         </policy>
                         <property name="com.sun.security.sasl.digest.utf8">true</property>
                     </sasl>
-                </authentication>
\ No newline at end of file
+                </authentication>
diff --git a/server/integration/testsuite/src/test/resources/config/infinispan/hotrod-ssl-external-realm.xml b/server/integration/testsuite/src/test/resources/config/infinispan/hotrod-ssl-external-realm.xml
index 0d60d7025fd..0f05f711a01 100644
--- a/server/integration/testsuite/src/test/resources/config/infinispan/hotrod-ssl-external-realm.xml
+++ b/server/integration/testsuite/src/test/resources/config/infinispan/hotrod-ssl-external-realm.xml
@@ -1 +1 @@
-                <encryption security-realm="SaslExteramlRealm" require-ssl-client-auth="true" />
\ No newline at end of file
+                <encryption security-realm="ClientCertRealm" require-ssl-client-auth="true" />
diff --git a/server/integration/testsuite/src/test/resources/config/parts/sasl-external-realm.xml b/server/integration/testsuite/src/test/resources/config/parts/client-cert-realm.xml
similarity index 84%
rename from server/integration/testsuite/src/test/resources/config/parts/sasl-external-realm.xml
rename to server/integration/testsuite/src/test/resources/config/parts/client-cert-realm.xml
index 56061892db7..c431b5007e0 100644
--- a/server/integration/testsuite/src/test/resources/config/parts/sasl-external-realm.xml
+++ b/server/integration/testsuite/src/test/resources/config/parts/client-cert-realm.xml
@@ -1,4 +1,4 @@
-            <security-realm name="SaslExteramlRealm">
+            <security-realm name="ClientCertRealm">
                 <authentication>
                     <truststore path="truststore_server.jks" relative-to="jboss.server.config.dir" keystore-password="secret"/>
                 </authentication>
@@ -7,4 +7,4 @@
                     <keystore path="keystore_server.jks" relative-to="jboss.server.config.dir" keystore-password="secret"/>
                   </ssl>
                 </server-identities>
-            </security-realm>
\ No newline at end of file
+            </security-realm>
diff --git a/server/integration/testsuite/src/test/resources/config/xslt/config-modifier.xsl b/server/integration/testsuite/src/test/resources/config/xslt/config-modifier.xsl
index c4b7db25fa7..52c83d85c4a 100644
--- a/server/integration/testsuite/src/test/resources/config/xslt/config-modifier.xsl
+++ b/server/integration/testsuite/src/test/resources/config/xslt/config-modifier.xsl
@@ -167,7 +167,7 @@
             <xsl:call-template name="copynode"/>
         </xsl:if>
     </xsl:template>
-    
+
     <xsl:template match="//*[local-name()='subsystem' and starts-with(namespace-uri(), $nsJGroups)]//*[local-name()='stack']">
         <xsl:if test="$addJGroupsSasl = 'false'">
             <xsl:call-template name="copynode"/>
@@ -179,9 +179,9 @@
             </xsl:copy>
         </xsl:if>
     </xsl:template>
-    
+
     <xsl:template match="p:extensions">
-        <xsl:call-template name="copynode"/> 
+        <xsl:call-template name="copynode"/>
         <xsl:if test="$addVault != 'false'">
             <xsl:copy-of select="document($addVault)"/>
         </xsl:if>
@@ -202,7 +202,7 @@
             </xsl:copy>
         </xsl:if>
     </xsl:template>
-    
+
     <!-- add outbound connections -->
     <xsl:template match="p:management">
         <xsl:if test="$addConnection = 'false'">
@@ -215,7 +215,7 @@
             </xsl:copy>
         </xsl:if>
     </xsl:template>
-    
+
     <!-- add security realm -->
     <xsl:template match="p:security-realms">
         <xsl:if test="$addSecRealm = 'false'">
@@ -279,8 +279,7 @@
         </xsl:if>
         <xsl:if test="$removeRestSecurity != 'false' and $restEncrypt = 'false'">
             <xsl:copy>
-                <xsl:copy-of select="@*[not(name() = 'security-domain' or name() = 'auth-method')]"/>
-                <xsl:apply-templates/>
+                <xsl:apply-templates select="@* | node()"/>
             </xsl:copy>
         </xsl:if>
         <xsl:if test="$removeRestSecurity = 'false' and $restEncrypt != 'false'">
@@ -291,12 +290,14 @@
         </xsl:if>
         <xsl:if test="$removeRestSecurity != 'false' and $restEncrypt != 'false'">
             <xsl:copy>
-                <xsl:copy-of select="@*[not(name() = 'security-domain' or name() = 'auth-method')]"/>
+                <xsl:apply-templates select="@* | node()"/>
                 <xsl:copy-of select="document($restEncrypt)"/>
             </xsl:copy>
         </xsl:if>
     </xsl:template>
 
+    <xsl:template match="//*[local-name()='subsystem' and starts-with(namespace-uri(), $nsEndpoint)]/*[local-name()='rest-connector']/*[local-name()='authentication']" />
+
     <xsl:template match="//*[local-name()='subsystem' and starts-with(namespace-uri(), $nsCore)]/*[local-name()='cache-container']/*[local-name()='transport']">
         <xsl:if test="$modifyStack = 'false'">
             <xsl:call-template name="copynode"/>
diff --git a/server/integration/testsuite/src/test/resources/config/xslt/rest-sec-config-modifier.xsl b/server/integration/testsuite/src/test/resources/config/xslt/rest-sec-config-modifier.xsl
index 3602e0e41d9..24084b10d36 100644
--- a/server/integration/testsuite/src/test/resources/config/xslt/rest-sec-config-modifier.xsl
+++ b/server/integration/testsuite/src/test/resources/config/xslt/rest-sec-config-modifier.xsl
@@ -7,29 +7,56 @@
     <xsl:variable name="nsE">urn:infinispan:server:endpoint:</xsl:variable>
     <xsl:variable name="nsW">urn:jboss:domain:web:</xsl:variable>
 
-    <xsl:param name="security.domain" select="'other'"/>
-    <xsl:param name="security.mode" select="'WRITE'"/>
+    <xsl:param name="security.realm" select="'ApplicationRealm'"/>
     <xsl:param name="auth.method" select="'BASIC'"/>
     <xsl:param name="cache.container" select="'${connector.cache.container}'"/>
-    <xsl:param name="modifyCertSecDomain" select="false"/>
-    <xsl:param name="modifyDigestSecDomain" select="false"/>
+    <xsl:param name="modifyCertSecRealm" select="false"/>
+    <xsl:param name="modifyDigestSecRealm" select="false"/>
 
     <!-- New rest-connector definition -->
     <xsl:variable name="newRESTEndpointDefinition">
-        <rest-connector socket-binding="rest" virtual-server="default-host">
-            <xsl:attribute name="cache-container">
-                <xsl:value-of select="$cache.container"/>
-            </xsl:attribute>
-            <xsl:attribute name="security-domain">
-                <xsl:value-of select="$security.domain"/>
-            </xsl:attribute>
-            <xsl:attribute name="auth-method">
-                <xsl:value-of select="$auth.method"/>
-            </xsl:attribute>
-            <xsl:attribute name="security-mode">
-                <xsl:value-of select="$security.mode"/>
-            </xsl:attribute>
-        </rest-connector>
+        <xsl:choose>
+            <xsl:when test="$auth.method != 'CLIENT_CERT'">
+                <rest-connector socket-binding="rest">
+                    <xsl:attribute name="cache-container">
+                        <xsl:value-of select="$cache.container"/>
+                    </xsl:attribute>
+                    <authentication>
+                        <xsl:attribute name="security-realm">
+                            <xsl:value-of select="$security.realm"/>
+                        </xsl:attribute>
+                        <xsl:attribute name="auth-method">
+                            <xsl:value-of select="$auth.method"/>
+                        </xsl:attribute>
+                    </authentication>
+                </rest-connector>
+            </xsl:when>
+            <xsl:otherwise>
+                <rest-connector socket-binding="rest">
+                    <xsl:attribute name="cache-container">
+                        <xsl:value-of select="$cache.container"/>
+                    </xsl:attribute>
+                </rest-connector>
+                <rest-connector socket-binding="rest-ssl" name="rest-ssl">
+                    <xsl:attribute name="cache-container">
+                        <xsl:value-of select="$cache.container"/>
+                    </xsl:attribute>
+                    <authentication>
+                        <xsl:attribute name="security-realm">
+                            <xsl:value-of select="$security.realm"/>
+                        </xsl:attribute>
+                        <xsl:attribute name="auth-method">
+                            <xsl:value-of select="$auth.method"/>
+                        </xsl:attribute>
+                    </authentication>
+                    <encryption require-ssl-client-auth="true">
+                        <xsl:attribute name="security-realm">
+                            <xsl:value-of select="$security.realm"/>
+                        </xsl:attribute>
+                    </encryption>
+                </rest-connector>
+            </xsl:otherwise>
+        </xsl:choose>
     </xsl:variable>
 
     <!-- Replace rest-connector element with new one - secured -->
@@ -44,18 +71,6 @@
         </xsl:attribute>
     </xsl:template>
 
-    <!-- New CERT security-domain definition -->
-    <xsl:variable name="newClientCertSecurityDomainDefinition">
-        <security-domain name="client_cert_auth" cache-type="infinispan">
-            <authentication>
-                <login-module code="CertificateRoles" flag="required">
-                    <module-option name="securityDomain" value="client_cert_auth"/>
-                    <module-option name="rolesProperties" value="${{jboss.server.config.dir}}/roles.properties"/>
-                </login-module>
-            </authentication>
-            <jsse truststore-password="changeit" client-auth="true" truststore-url="${{jboss.server.config.dir}}/jsse.keystore"/>
-        </security-domain>
-    </xsl:variable>
 
     <!-- New DIGEST security-domain definition -->
     <xsl:variable name="newDigestSecurityDomainDefinition">
@@ -79,10 +94,7 @@
     <xsl:template match="//*[local-name()='subsystem' and starts-with(namespace-uri(), $nsS)]
         /*[local-name()='security-domains' and starts-with(namespace-uri(), $nsS)]">
         <xsl:copy>
-            <xsl:if test="$modifyCertSecDomain != 'false'">
-                <xsl:copy-of select="$newClientCertSecurityDomainDefinition"/>
-            </xsl:if>
-            <xsl:if test="$modifyDigestSecDomain != 'false'">
+            <xsl:if test="$modifyDigestSecRealm != 'false'">
                 <xsl:copy-of select="$newDigestSecurityDomainDefinition"/>
             </xsl:if>
             <xsl:apply-templates select="@*|node()"/>
@@ -106,7 +118,7 @@
 
     <!-- Add another connector -->
     <xsl:template match="//*[local-name()='subsystem' and starts-with(namespace-uri(), $nsW)]/*[local-name()='connector'][position()=last()]">
-        <xsl:if test="$modifyCertSecDomain != 'false'">
+        <xsl:if test="$modifyCertSecRealm != 'false'">
             <xsl:copy>
                 <xsl:apply-templates select="@*|node()"/>
             </xsl:copy>
diff --git a/server/integration/testsuite/src/test/resources/truststore_server.jks b/server/integration/testsuite/src/test/resources/truststore_server.jks
index 007b30c51df..890846c4fc9 100644
Binary files a/server/integration/testsuite/src/test/resources/truststore_server.jks and b/server/integration/testsuite/src/test/resources/truststore_server.jks differ
diff --git a/server/integration/versions/pom.xml b/server/integration/versions/pom.xml
index 05450894bcd..02e4f510960 100644
--- a/server/integration/versions/pom.xml
+++ b/server/integration/versions/pom.xml
@@ -53,7 +53,8 @@
       <version.antrun.maven.plugin>1.8</version.antrun.maven.plugin>
       <version.xml.maven.plugin>1.0</version.xml.maven.plugin>
       <version.org.infinispan.protostream>4.0.0.Alpha9</version.org.infinispan.protostream>
-      <version.http.client>4.3</version.http.client>
+      <version.http.core>4.4</version.http.core>
+      <version.http.client>4.5</version.http.client>
       <version.org.picketbox>4.0.17.SP2</version.org.picketbox>
       <version.xpp3>1.1.4c</version.xpp3>
       <version.pax.url>1.3.7</version.pax.url>
@@ -558,12 +559,6 @@
             <version>${version.http.client}</version>
          </dependency>
 
-         <dependency>
-            <groupId>org.apache.httpcomponents</groupId>
-            <artifactId>httpcore</artifactId>
-            <version>${version.http.client}</version>
-         </dependency>
-
          <dependency>
             <groupId>org.picketbox</groupId>
             <artifactId>jbosssx-bare</artifactId>
diff --git a/server/rest/pom.xml b/server/rest/pom.xml
index 2c0f6abd27b..1b42e19eafc 100644
--- a/server/rest/pom.xml
+++ b/server/rest/pom.xml
@@ -32,10 +32,6 @@
          <groupId>org.jboss.resteasy</groupId>
          <artifactId>resteasy-jaxrs</artifactId>
       </dependency>
-      <dependency>
-         <groupId>org.jboss.resteasy</groupId>
-         <artifactId>resteasy-netty4</artifactId>
-      </dependency>
 
       <dependency>
          <groupId>org.codehaus.jackson</groupId>
diff --git a/server/rest/src/main/java/org/infinispan/rest/NettyRestServer.java b/server/rest/src/main/java/org/infinispan/rest/NettyRestServer.java
deleted file mode 100644
index 015d8cb847a..00000000000
--- a/server/rest/src/main/java/org/infinispan/rest/NettyRestServer.java
+++ /dev/null
@@ -1,121 +0,0 @@
-package org.infinispan.rest;
-
-import java.io.IOException;
-
-import javax.ws.rs.container.ContainerRequestFilter;
-import javax.ws.rs.container.ContainerResponseFilter;
-
-import org.infinispan.commons.api.Lifecycle;
-import org.infinispan.commons.logging.LogFactory;
-import org.infinispan.manager.DefaultCacheManager;
-import org.infinispan.manager.EmbeddedCacheManager;
-import org.infinispan.rest.configuration.RestServerConfiguration;
-import org.infinispan.rest.logging.Log;
-import org.infinispan.rest.logging.RestAccessLoggingHandler;
-import org.infinispan.server.core.AbstractCacheIgnoreAware;
-import org.infinispan.server.core.configuration.SslConfiguration;
-import org.infinispan.server.core.utils.SslUtils;
-import org.jboss.resteasy.plugins.server.netty.NettyJaxrsServer;
-import org.jboss.resteasy.plugins.server.netty.SniConfiguration;
-import org.jboss.resteasy.spi.ResteasyDeployment;
-
-public final class NettyRestServer extends AbstractCacheIgnoreAware implements Lifecycle {
-   private final static Log log = LogFactory.getLog(NettyRestServer.class, Log.class);
-
-   private static final String DEFAULT_REST_PATH = "rest";
-
-   private final EmbeddedCacheManager cacheManager;
-   private final RestServerConfiguration configuration;
-   private NettyJaxrsServer netty;
-   private Server server;
-
-   public static NettyRestServer createServer(RestServerConfiguration configuration, EmbeddedCacheManager manager) {
-      return new NettyRestServer(manager, configuration);
-   }
-
-   private static void addEncryption(RestServerConfiguration config, NettyJaxrsServer netty) {
-      if(config.ssl() != null && config.ssl().enabled()) {
-         SslConfiguration sslConfig = config.ssl();
-         SniConfiguration nettySniConfiguration = new SniConfiguration(SslUtils.createJdkSslContext(sslConfig, sslConfig.sniDomainsConfiguration().get("*")));
-
-         sslConfig.sniDomainsConfiguration().forEach((domainName, domainConfiguration) -> {
-            nettySniConfiguration.addSniMapping(domainName, SslUtils.createJdkSslContext(sslConfig, domainConfiguration));
-         });
-
-         netty.setSSLContext(sslConfig.sslContext());
-         netty.setSniConfiguration(nettySniConfiguration);
-      }
-   }
-
-   private static void startCaches(EmbeddedCacheManager cm) {
-      // Start defined caches to avoid issues with lazily started caches
-      cm.getCacheNames().forEach(name -> SecurityActions.getCache(cm, name));
-
-      // Finally, start default cache as well
-      cm.getCache();
-   }
-
-   private static EmbeddedCacheManager createCacheManager(String cfgFile) {
-      try {
-         return new DefaultCacheManager(cfgFile);
-      } catch (IOException e) {
-         log.errorReadingConfigurationFile(e, cfgFile);
-         return new DefaultCacheManager();
-      }
-   }
-
-   private NettyRestServer(EmbeddedCacheManager cacheManager, RestServerConfiguration configuration) {
-      this.cacheManager = cacheManager;
-      this.configuration = configuration;
-   }
-
-   @Override
-   public void start() {
-      configuration.ignoredCaches().forEach(this::ignoreCache);
-      RestCacheManager restCacheManager = new RestCacheManager(cacheManager, this::isCacheIgnored);
-      server = new Server(configuration, restCacheManager);
-
-      if(configuration.startTransport()) {
-         NettyJaxrsServer nettyServer = createNetty();
-         addEncryption(configuration, nettyServer);
-         nettyServer.start();
-         ResteasyDeployment deployment = nettyServer.getDeployment();
-         deployment.getRegistry().addSingletonResource(server, DEFAULT_REST_PATH);
-         deployment.getProviderFactory().register(new RestAccessLoggingHandler(), ContainerRequestFilter.class,
-               ContainerResponseFilter.class);
-         log.startRestServer(configuration.host(), configuration.port());
-         netty = nettyServer;
-      }
-   }
-
-   private NettyJaxrsServer createNetty() {
-      // Start caches first, if not started
-      startCaches(cacheManager);
-
-      NettyJaxrsServer netty = new NettyJaxrsServer();
-      ResteasyDeployment deployment = new ResteasyDeployment();
-      netty.setDeployment(deployment);
-      netty.setHostname(configuration.host());
-      netty.setPort(configuration.port());
-      netty.setRootResourcePath("");
-      netty.setSecurityDomain(null);
-      return netty;
-   }
-
-   @Override
-   public void stop() {
-      if(netty != null) {
-         netty.stop();
-      }
-      netty = null;
-      server = null;
-   }
-
-   public Server getServer() {
-      return server;
-   }
-
-   public EmbeddedCacheManager getCacheManager() {
-      return cacheManager;
-   }
-}
diff --git a/server/rest/src/main/java/org/infinispan/rest/RestCacheManager.java b/server/rest/src/main/java/org/infinispan/rest/RestCacheManager.java
index a63e7b8bb0d..f1e342e6f58 100644
--- a/server/rest/src/main/java/org/infinispan/rest/RestCacheManager.java
+++ b/server/rest/src/main/java/org/infinispan/rest/RestCacheManager.java
@@ -18,7 +18,7 @@
 import org.infinispan.remoting.transport.jgroups.JGroupsTransport;
 import org.infinispan.upgrade.RollingUpgradeManager;
 
-class RestCacheManager {
+public class RestCacheManager {
    private final EmbeddedCacheManager instance;
    private final Predicate<? super String> isCacheIgnored;
    private final boolean allowInternalCacheAccess;
diff --git a/server/rest/src/main/java/org/infinispan/rest/SecurityActions.java b/server/rest/src/main/java/org/infinispan/rest/SecurityActions.java
deleted file mode 100644
index 74e847c380a..00000000000
--- a/server/rest/src/main/java/org/infinispan/rest/SecurityActions.java
+++ /dev/null
@@ -1,34 +0,0 @@
-package org.infinispan.rest;
-
-import java.security.AccessController;
-import java.security.PrivilegedAction;
-
-import org.infinispan.manager.EmbeddedCacheManager;
-import org.infinispan.security.Security;
-import org.infinispan.security.actions.GetCacheAction;
-
-/**
- * SecurityActions for the org.infinispan.server.hotrod package.
- * <p>
- * Do not move. Do not change class and method visibility to avoid being called from other {@link
- * java.security.CodeSource}s, thus granting privilege escalation to external code.
- *
- * @author Tristan Tarrant
- * @since 8.2
- */
-final class SecurityActions {
-   private static <T> T doPrivileged(PrivilegedAction<T> action) {
-      if (System.getSecurityManager() != null) {
-         return AccessController.doPrivileged(action);
-      } else {
-         return Security.doPrivileged(action);
-      }
-   }
-
-   @SuppressWarnings("unchecked")
-   static <K, V> org.infinispan.Cache<K, V> getCache(final EmbeddedCacheManager cacheManager, String cacheName) {
-      GetCacheAction action = new GetCacheAction(cacheManager, cacheName);
-      return (org.infinispan.Cache<K, V>) doPrivileged(action);
-   }
-
-}
diff --git a/server/rest/src/main/java/org/infinispan/rest/Server.java b/server/rest/src/main/java/org/infinispan/rest/Server.java
index 5e5f27a2c4d..8c07b89cf49 100644
--- a/server/rest/src/main/java/org/infinispan/rest/Server.java
+++ b/server/rest/src/main/java/org/infinispan/rest/Server.java
@@ -21,6 +21,7 @@
 import java.util.function.Consumer;
 import java.util.function.Supplier;
 
+import javax.annotation.security.RolesAllowed;
 import javax.servlet.http.HttpServletResponse;
 import javax.ws.rs.DELETE;
 import javax.ws.rs.DefaultValue;
@@ -65,6 +66,8 @@
  */
 @Path("/")
 public class Server {
+   public static final String READERS_ROLE = "_infinispan_rest_readers";
+   public static final String WRITERS_ROLE = "_infinispan_rest_writers";
    private final RestServerConfiguration configuration;
    private final RestCacheManager manager;
 
@@ -116,6 +119,7 @@ public Server(RestServerConfiguration configuration, RestCacheManager manager) {
 
    @GET
    @Path("/{cacheName}")
+   @RolesAllowed({READERS_ROLE, WRITERS_ROLE})
    public Response getKeys(@Context Request request, @HeaderParam("performAsync") boolean useAsync,
                            @PathParam("cacheName") String cacheName, @QueryParam("global") String globalKeySet) {
       return protectCacheNotFound(() -> {
@@ -170,6 +174,7 @@ public Response getKeys(@Context Request request, @HeaderParam("performAsync") b
 
    @GET
    @Path("/{cacheName}/{cacheKey}")
+   @RolesAllowed({READERS_ROLE, WRITERS_ROLE})
    public <V> Response getEntry(@Context Request request, @HeaderParam("performAsync") boolean useAsync,
                                 @PathParam("cacheName") String cacheName, @PathParam("cacheKey") String key,
                                 @QueryParam("extended") String extended,
@@ -405,6 +410,7 @@ public void write(OutputStream outputStream) throws IOException, WebApplicationE
 
    @HEAD
    @Path("/{cacheName}/{cacheKey}")
+   @RolesAllowed({READERS_ROLE, WRITERS_ROLE})
    public <V> Response headEntry(@Context Request request, @HeaderParam("performAsync") boolean useAsync,
                                  @PathParam("cacheName") String cacheName, @PathParam("cacheKey") String key,
                                  @QueryParam("extended") String extended,
@@ -452,6 +458,7 @@ public void write(OutputStream outputStream) throws IOException, WebApplicationE
    @PUT
    @POST
    @Path("/{cacheName}/{cacheKey}")
+   @RolesAllowed(WRITERS_ROLE)
    public <V> Response putEntry(@Context Request request, @HeaderParam("performAsync") boolean useAsync,
                                 @PathParam("cacheName") String cacheName, @PathParam("cacheKey") String key,
                                 @HeaderParam("Content-Type") String mediaType, byte[] data,
@@ -541,6 +548,7 @@ private Response putOrReplace(AdvancedCache<String, byte[]> cache,
 
    @DELETE
    @Path("/{cacheName}/{cacheKey}")
+   @RolesAllowed(WRITERS_ROLE)
    public <V> Response removeEntry(@Context Request request, @HeaderParam("performAsync") boolean useAsync,
                                    @PathParam("cacheName") String cacheName, @PathParam("cacheKey") String key) {
       return protectCacheNotFound(() -> {
@@ -583,6 +591,7 @@ private Response putOrReplace(AdvancedCache<String, byte[]> cache,
 
    @DELETE
    @Path("/{cacheName}")
+   @RolesAllowed(WRITERS_ROLE)
    public Response killCache(@PathParam("cacheName") String cacheName,
                              @DefaultValue("") @HeaderParam("If-Match") String ifMatch,
                              @DefaultValue("") @HeaderParam("If-None-Match") String ifNoneMatch,
diff --git a/server/rest/src/main/java/org/infinispan/rest/embedded/netty4/NettyJaxrsServer.java b/server/rest/src/main/java/org/infinispan/rest/embedded/netty4/NettyJaxrsServer.java
index 48fca007a02..b43c1ea96fe 100644
--- a/server/rest/src/main/java/org/infinispan/rest/embedded/netty4/NettyJaxrsServer.java
+++ b/server/rest/src/main/java/org/infinispan/rest/embedded/netty4/NettyJaxrsServer.java
@@ -27,6 +27,7 @@
 import io.netty.handler.codec.http.HttpObjectAggregator;
 import io.netty.handler.codec.http.HttpRequestDecoder;
 import io.netty.handler.codec.http.HttpResponseEncoder;
+import io.netty.handler.ssl.ClientAuth;
 import io.netty.handler.ssl.SniHandler;
 import io.netty.handler.ssl.SslHandler;
 import io.netty.handler.timeout.IdleStateHandler;
@@ -69,6 +70,7 @@
    private Map<ChannelOption, Object> channelOptions = Collections.emptyMap();
    private Map<ChannelOption, Object> childChannelOptions = Collections.emptyMap();
    private List<ChannelHandler> httpChannelHandlers = Collections.emptyList();
+   private ClientAuth clientAuth = ClientAuth.NONE;
 
    public void setSSLContext(SSLContext sslContext) {
       this.sslContext = sslContext;
@@ -82,6 +84,14 @@ public void setSniConfiguration(SniConfiguration sniConfiguration) {
       this.sniConfiguration = sniConfiguration;
    }
 
+   public ClientAuth getClientAuth() {
+      return clientAuth;
+   }
+
+   public void setClientAuth(ClientAuth clientAuth) {
+      this.clientAuth = clientAuth;
+   }
+
    /**
     * Specify the worker count to use. For more information about this please see the javadocs of {@link EventLoopGroup}
     *
@@ -229,7 +239,7 @@ public void setAuthenticator(Authenticator authenticator) {
       this.authenticator = authenticator;
    }
 
-   protected RequestDispatcher createRequestDispatcher(boolean secure) {
+   protected RequestDispatcher createRequestDispatcher() {
       return new RequestDispatcher((SynchronousDispatcher) deployment.getDispatcher(), deployment.getProviderFactory(), authenticator);
    }
 
@@ -270,7 +280,7 @@ public void start() {
          return new ChannelInitializer<SocketChannel>() {
             @Override
             public void initChannel(SocketChannel ch) throws Exception {
-               setupHandlers(ch, createRequestDispatcher(false), RestEasyHttpRequestDecoder.Protocol.HTTP);
+               setupHandlers(ch, createRequestDispatcher(), RestEasyHttpRequestDecoder.Protocol.HTTP);
             }
          };
       } else if (sniConfiguration == null) {
@@ -279,8 +289,16 @@ public void initChannel(SocketChannel ch) throws Exception {
             public void initChannel(SocketChannel ch) throws Exception {
                SSLEngine engine = sslContext.createSSLEngine();
                engine.setUseClientMode(false);
+               switch (clientAuth) {
+                  case OPTIONAL:
+                     engine.setWantClientAuth(true);
+                     break;
+                  case REQUIRE:
+                     engine.setNeedClientAuth(true);
+                     break;
+               }
                ch.pipeline().addFirst(new SslHandler(engine));
-               setupHandlers(ch, createRequestDispatcher(true), RestEasyHttpRequestDecoder.Protocol.HTTPS);
+               setupHandlers(ch, createRequestDispatcher(), RestEasyHttpRequestDecoder.Protocol.HTTPS);
             }
          };
       } else {
@@ -288,7 +306,7 @@ public void initChannel(SocketChannel ch) throws Exception {
             @Override
             public void initChannel(SocketChannel ch) throws Exception {
                ch.pipeline().addFirst(new SniHandler(sniConfiguration.buildMapping()));
-               setupHandlers(ch, createRequestDispatcher(true), RestEasyHttpRequestDecoder.Protocol.HTTPS);
+               setupHandlers(ch, createRequestDispatcher(), RestEasyHttpRequestDecoder.Protocol.HTTPS);
             }
          };
       }
diff --git a/server/rest/src/main/java/org/infinispan/rest/embedded/netty4/NettyRestServer.java b/server/rest/src/main/java/org/infinispan/rest/embedded/netty4/NettyRestServer.java
index 8ccebdda7d4..c7e67574200 100644
--- a/server/rest/src/main/java/org/infinispan/rest/embedded/netty4/NettyRestServer.java
+++ b/server/rest/src/main/java/org/infinispan/rest/embedded/netty4/NettyRestServer.java
@@ -53,7 +53,8 @@ public static NettyRestServer createServer(RestServerConfiguration configuration
    private static void addEncryption(RestServerConfiguration config, NettyJaxrsServer netty) {
       if (config.ssl() != null && config.ssl().enabled()) {
          SslConfiguration sslConfig = config.ssl();
-         SniConfiguration nettySniConfiguration = new SniConfiguration(SslUtils.createJdkSslContext(sslConfig, sslConfig.sniDomainsConfiguration().get("*")));
+         ClientAuth clientAuth = sslConfig.requireClientAuth() ? ClientAuth.OPTIONAL : ClientAuth.NONE;
+         SniConfiguration nettySniConfiguration = new SniConfiguration(SslUtils.createJdkSslContext(sslConfig, sslConfig.sniDomainsConfiguration().get("*")), clientAuth);
 
          sslConfig.sniDomainsConfiguration().forEach((domainName, domainConfiguration) -> {
             nettySniConfiguration.addSniMapping(domainName, SslUtils.createJdkSslContext(sslConfig, domainConfiguration));
@@ -61,6 +62,7 @@ private static void addEncryption(RestServerConfiguration config, NettyJaxrsServ
 
          netty.setSSLContext(sslConfig.sslContext());
          netty.setSniConfiguration(nettySniConfiguration);
+         netty.setClientAuth(clientAuth);
       }
    }
 
diff --git a/server/rest/src/main/java/org/infinispan/rest/embedded/netty4/NettyUtil.java b/server/rest/src/main/java/org/infinispan/rest/embedded/netty4/NettyUtil.java
index 494c1c8a475..8aef6abd4b1 100644
--- a/server/rest/src/main/java/org/infinispan/rest/embedded/netty4/NettyUtil.java
+++ b/server/rest/src/main/java/org/infinispan/rest/embedded/netty4/NettyUtil.java
@@ -17,7 +17,6 @@
 import org.jboss.resteasy.util.HttpHeaderNames;
 import org.jboss.resteasy.util.MediaTypeHelper;
 
-import io.netty.handler.codec.http.HttpHeaders;
 import io.netty.handler.codec.http.HttpRequest;
 
 /**
@@ -27,8 +26,8 @@
  */
 public class NettyUtil {
    public static ResteasyUriInfo extractUriInfo(HttpRequest request, String contextPath, String protocol) {
-      String host = HttpHeaders.getHost(request, "unknown");
-      String uri = request.getUri();
+      String host = request.headers().get(HttpHeaderNames.HOST, "unknown");
+      String uri = request.uri();
 
       String uriString;
 
diff --git a/server/rest/src/main/java/org/infinispan/rest/embedded/netty4/SniConfiguration.java b/server/rest/src/main/java/org/infinispan/rest/embedded/netty4/SniConfiguration.java
index c18a2ad82e5..8730e77a28a 100644
--- a/server/rest/src/main/java/org/infinispan/rest/embedded/netty4/SniConfiguration.java
+++ b/server/rest/src/main/java/org/infinispan/rest/embedded/netty4/SniConfiguration.java
@@ -21,6 +21,12 @@
 public class SniConfiguration {
 
    protected final DomainNameMappingBuilder<SslContext> mapping;
+   protected final ClientAuth clientAuth;
+
+   public SniConfiguration(SSLContext defaultServerKeystore, ClientAuth clientAuth) {
+      this.clientAuth = clientAuth;
+      this.mapping = new DomainNameMappingBuilder<>(createContext(defaultServerKeystore, clientAuth));
+   }
 
    /**
     * Constructs new {@link SniConfiguration}.
@@ -28,7 +34,7 @@
     * @param defaultServerKeystore default keystore to be used when no SNI is specified by the client.
     */
    public SniConfiguration(SSLContext defaultServerKeystore) {
-      mapping = new DomainNameMappingBuilder<>(createContext(defaultServerKeystore));
+      this(defaultServerKeystore, ClientAuth.NONE);
    }
 
    /**
@@ -39,7 +45,7 @@ public SniConfiguration(SSLContext defaultServerKeystore) {
     * @return <code>this</code> configuration.
     */
    public SniConfiguration addSniMapping(String sniHostName, SSLContext sslContext) {
-      mapping.add(sniHostName, createContext(sslContext));
+      mapping.add(sniHostName, createContext(sslContext, clientAuth));
       return this;
    }
 
@@ -47,13 +53,12 @@ public SniConfiguration addSniMapping(String sniHostName, SSLContext sslContext)
       return mapping.build();
    }
 
-   private SslContext createContext(SSLContext sslContext) {
+   private static SslContext createContext(SSLContext sslContext, ClientAuth clientAuth) {
       //Unfortunately we need to grap a list of available ciphers from the engine.
       //If we won't, JdkSslContext will use common ciphers from DEFAULT and SUPPORTED, which gives us 5 out of ~50 available ciphers
       //Of course, we don't need to any specific engine configuration here... just a list of ciphers
       String[] ciphers = sslContext.createSSLEngine().getSupportedCipherSuites();
-      return new JdkSslContext(sslContext, false, Arrays.asList(ciphers), IdentityCipherSuiteFilter.INSTANCE, null,
-            ClientAuth.OPTIONAL);
+      return new JdkSslContext(sslContext, false, Arrays.asList(ciphers), IdentityCipherSuiteFilter.INSTANCE, null, clientAuth);
    }
 
 }
diff --git a/server/rest/src/main/java/org/infinispan/rest/embedded/netty4/security/ClientCertAuthenticator.java b/server/rest/src/main/java/org/infinispan/rest/embedded/netty4/security/ClientCertAuthenticator.java
new file mode 100644
index 00000000000..2755a64f93b
--- /dev/null
+++ b/server/rest/src/main/java/org/infinispan/rest/embedded/netty4/security/ClientCertAuthenticator.java
@@ -0,0 +1,45 @@
+package org.infinispan.rest.embedded.netty4.security;
+
+import java.io.IOException;
+
+import javax.net.ssl.SSLPeerUnverifiedException;
+import javax.net.ssl.SSLSession;
+import javax.ws.rs.core.SecurityContext;
+
+import org.infinispan.rest.embedded.netty4.NettySecurityContext;
+import org.jboss.resteasy.plugins.server.embedded.SecurityDomain;
+import org.jboss.resteasy.spi.HttpRequest;
+import org.jboss.resteasy.spi.HttpResponse;
+import org.jboss.resteasy.util.HttpResponseCodes;
+
+import io.netty.channel.ChannelHandlerContext;
+import io.netty.handler.ssl.SslHandler;
+
+/**
+ * Client Certificate authenticator
+ *
+ * @author Tristan Tarrant
+ * @since 9.0
+ */
+
+public class ClientCertAuthenticator implements Authenticator {
+
+   private final SecurityDomain domain;
+
+   public ClientCertAuthenticator(SecurityDomain domain) {
+      this.domain = domain;
+   }
+
+   @Override
+   public SecurityContext authenticate(ChannelHandlerContext ctx, HttpRequest request, HttpResponse response) throws IOException {
+      SslHandler sslHandler = ctx.pipeline().get(SslHandler.class);
+      try {
+         SSLSession session = sslHandler.engine().getSession();
+         return new NettySecurityContext(session.getPeerPrincipal(), domain, "ClientCert", true);
+      } catch (SSLPeerUnverifiedException e) {
+         // Ignore any SSLPeerUnverifiedExceptions
+      }
+      response.sendError(HttpResponseCodes.SC_UNAUTHORIZED);
+      return null;
+   }
+}
diff --git a/server/rest/src/test/java/org/infinispan/rest/EmbeddedRestServer.java b/server/rest/src/test/java/org/infinispan/rest/EmbeddedRestServer.java
index 1a4cc94f6e5..95ceca8b2bf 100644
--- a/server/rest/src/test/java/org/infinispan/rest/EmbeddedRestServer.java
+++ b/server/rest/src/test/java/org/infinispan/rest/EmbeddedRestServer.java
@@ -2,6 +2,7 @@
 
 import org.infinispan.manager.EmbeddedCacheManager;
 import org.infinispan.rest.configuration.RestServerConfiguration;
+import org.infinispan.rest.embedded.netty4.NettyRestServer;
 
 public class EmbeddedRestServer {
 
diff --git a/server/rest/src/test/java/org/infinispan/rest/RestServerTestBase.java b/server/rest/src/test/java/org/infinispan/rest/RestServerTestBase.java
index 931b3e9d829..052853608c6 100644
--- a/server/rest/src/test/java/org/infinispan/rest/RestServerTestBase.java
+++ b/server/rest/src/test/java/org/infinispan/rest/RestServerTestBase.java
@@ -9,6 +9,7 @@
 import org.infinispan.manager.EmbeddedCacheManager;
 import org.infinispan.rest.configuration.RestServerConfiguration;
 import org.infinispan.rest.configuration.RestServerConfigurationBuilder;
+import org.infinispan.rest.embedded.netty4.NettyRestServer;
 import org.infinispan.test.AbstractInfinispanTest;
 
 /**
diff --git a/server/router/src/main/java/org/infinispan/server/router/router/impl/rest/RestRouter.java b/server/router/src/main/java/org/infinispan/server/router/router/impl/rest/RestRouter.java
index 56448652c90..8fcf784259b 100644
--- a/server/router/src/main/java/org/infinispan/server/router/router/impl/rest/RestRouter.java
+++ b/server/router/src/main/java/org/infinispan/server/router/router/impl/rest/RestRouter.java
@@ -9,6 +9,7 @@
 
 import org.infinispan.commons.logging.LogFactory;
 import org.infinispan.rest.Server;
+import org.infinispan.rest.embedded.netty4.NettyJaxrsServer;
 import org.infinispan.rest.logging.RestAccessLoggingHandler;
 import org.infinispan.server.router.RoutingTable;
 import org.infinispan.server.router.configuration.RestRouterConfiguration;
@@ -16,7 +17,6 @@
 import org.infinispan.server.router.router.Router;
 import org.infinispan.server.router.routes.PrefixedRouteSource;
 import org.infinispan.server.router.routes.rest.NettyRestServerRouteDestination;
-import org.jboss.resteasy.plugins.server.netty.NettyJaxrsServer;
 import org.jboss.resteasy.spi.ResteasyDeployment;
 
 /**
diff --git a/server/router/src/test/java/org/infinispan/server/router/integration/RestRouterTest.java b/server/router/src/test/java/org/infinispan/server/router/integration/RestRouterTest.java
index 4fba60b4215..9d141393f8d 100644
--- a/server/router/src/test/java/org/infinispan/server/router/integration/RestRouterTest.java
+++ b/server/router/src/test/java/org/infinispan/server/router/integration/RestRouterTest.java
@@ -4,7 +4,7 @@
 
 import java.net.InetAddress;
 
-import org.infinispan.rest.NettyRestServer;
+import org.infinispan.rest.embedded.netty4.NettyRestServer;
 import org.infinispan.server.router.MultiTenantRouter;
 import org.infinispan.server.router.configuration.builder.MultiTenantRouterConfigurationBuilder;
 import org.infinispan.server.router.routes.Route;
diff --git a/server/router/src/test/java/org/infinispan/server/router/utils/RestTestingUtil.java b/server/router/src/test/java/org/infinispan/server/router/utils/RestTestingUtil.java
index 851321750f8..0b42dfc25c8 100644
--- a/server/router/src/test/java/org/infinispan/server/router/utils/RestTestingUtil.java
+++ b/server/router/src/test/java/org/infinispan/server/router/utils/RestTestingUtil.java
@@ -3,7 +3,7 @@
 import org.infinispan.configuration.cache.ConfigurationBuilder;
 import org.infinispan.configuration.global.GlobalConfigurationBuilder;
 import org.infinispan.manager.DefaultCacheManager;
-import org.infinispan.rest.NettyRestServer;
+import org.infinispan.rest.embedded.netty4.NettyRestServer;
 import org.infinispan.rest.configuration.RestServerConfigurationBuilder;
 
 public class RestTestingUtil {
