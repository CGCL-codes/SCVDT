Index: tc8.0.x/trunk/java/org/apache/catalina/Wrapper.java
===================================================================
--- tc8.0.x/trunk/java/org/apache/catalina/Wrapper.java	(revision 1823318)
+++ tc8.0.x/trunk/java/org/apache/catalina/Wrapper.java	(revision 1823319)
@@ -378,19 +378,23 @@
     public void setEnabled(boolean enabled);
 
     /**
-     * Set the flag that indicates
-     * {@link javax.servlet.annotation.ServletSecurity} annotations must be
-     * scanned when the Servlet is first used.
+     * This method is no longer used. All implementations should be NO-OPs.
      *
-     * @param b The new value of the flag
+     * @param b Unused.
+     *
+     * @deprecated This will be removed in Tomcat 9.
      */
+    @Deprecated
     public void setServletSecurityAnnotationScanRequired(boolean b);
 
     /**
-     * Scan for (if necessary) and process (if found) the
-     * {@link javax.servlet.annotation.ServletSecurity} annotations for the
-     * Servlet associated with this wrapper.
+     * This method is no longer used. All implementations should be NO-OPs.
+     *
+     * @throws ServletException Never thrown
+     *
+     * @deprecated This will be removed in Tomcat 9.
      */
+    @Deprecated
     public void servletSecurityAnnotationScan() throws ServletException;
 
     /**
Index: tc8.0.x/trunk/java/org/apache/catalina/authenticator/AuthenticatorBase.java
===================================================================
--- tc8.0.x/trunk/java/org/apache/catalina/authenticator/AuthenticatorBase.java	(revision 1823318)
+++ tc8.0.x/trunk/java/org/apache/catalina/authenticator/AuthenticatorBase.java	(revision 1823319)
@@ -38,7 +38,6 @@
 import org.apache.catalina.Session;
 import org.apache.catalina.TomcatPrincipal;
 import org.apache.catalina.Valve;
-import org.apache.catalina.Wrapper;
 import org.apache.catalina.connector.Request;
 import org.apache.catalina.connector.Response;
 import org.apache.catalina.realm.GenericPrincipal;
@@ -485,13 +484,6 @@
             }
         }
 
-        // The Servlet may specify security constraints through annotations.
-        // Ensure that they have been processed before constraints are checked
-        Wrapper wrapper = request.getMappingData().wrapper;
-        if (wrapper != null) {
-            wrapper.servletSecurityAnnotationScan();
-        }
-
         Realm realm = this.context.getRealm();
         // Is this request URI subject to a security constraint?
         SecurityConstraint [] constraints
Index: tc8.0.x/trunk/java/org/apache/catalina/core/ApplicationContext.java
===================================================================
--- tc8.0.x/trunk/java/org/apache/catalina/core/ApplicationContext.java	(revision 1823318)
+++ tc8.0.x/trunk/java/org/apache/catalina/core/ApplicationContext.java	(revision 1823319)
@@ -49,8 +49,10 @@
 import javax.servlet.ServletRegistration;
 import javax.servlet.ServletRequestAttributeListener;
 import javax.servlet.ServletRequestListener;
+import javax.servlet.ServletSecurityElement;
 import javax.servlet.SessionCookieConfig;
 import javax.servlet.SessionTrackingMode;
+import javax.servlet.annotation.ServletSecurity;
 import javax.servlet.descriptor.JspConfigDescriptor;
 import javax.servlet.http.HttpSessionAttributeListener;
 import javax.servlet.http.HttpSessionIdListener;
@@ -67,6 +69,7 @@
 import org.apache.catalina.Wrapper;
 import org.apache.catalina.connector.Connector;
 import org.apache.catalina.mapper.MappingData;
+import org.apache.catalina.util.Introspection;
 import org.apache.catalina.util.ServerInfo;
 import org.apache.catalina.util.URLEncoder;
 import org.apache.tomcat.util.ExceptionUtils;
@@ -1132,14 +1135,27 @@
             }
         }
 
+        ServletSecurity annotation = null;
         if (servlet == null) {
             wrapper.setServletClass(servletClass);
+            Class<?> clazz = Introspection.loadClass(context, servletClass);
+            if (clazz != null) {
+                annotation = clazz.getAnnotation(ServletSecurity.class);
+            }
         } else {
             wrapper.setServletClass(servlet.getClass().getName());
             wrapper.setServlet(servlet);
+            if (context.wasCreatedDynamicServlet(servlet)) {
+                annotation = servlet.getClass().getAnnotation(ServletSecurity.class);
+            }
         }
 
-        return context.dynamicServletAdded(wrapper);
+        ServletRegistration.Dynamic registration =
+                new ApplicationServletRegistration(wrapper, context);
+        if (annotation != null) {
+            registration.setServletSecurity(new ServletSecurityElement(annotation));
+        }
+        return registration;
     }
 
 
Index: tc8.0.x/trunk/java/org/apache/catalina/core/ApplicationServletRegistration.java
===================================================================
--- tc8.0.x/trunk/java/org/apache/catalina/core/ApplicationServletRegistration.java	(revision 1823318)
+++ tc8.0.x/trunk/java/org/apache/catalina/core/ApplicationServletRegistration.java	(revision 1823319)
@@ -45,6 +45,7 @@
 
     private final Wrapper wrapper;
     private final Context context;
+    private ServletSecurityElement constraint;
 
     public ApplicationServletRegistration(Wrapper wrapper,
             Context context) {
@@ -159,6 +160,7 @@
                     getName(), context.getName()));
         }
 
+        this.constraint = constraint;
         return context.addServletSecurity(this, constraint);
     }
 
@@ -193,6 +195,11 @@
             context.addServletMappingDecoded(
                     UDecoder.URLDecode(urlPattern, "UTF-8"), wrapper.getName());
         }
+
+        if (constraint != null) {
+            context.addServletSecurity(this, constraint);
+        }
+
         return Collections.emptySet();
     }
 
Index: tc8.0.x/trunk/java/org/apache/catalina/core/StandardContext.java
===================================================================
--- tc8.0.x/trunk/java/org/apache/catalina/core/StandardContext.java	(revision 1823318)
+++ tc8.0.x/trunk/java/org/apache/catalina/core/StandardContext.java	(revision 1823319)
@@ -4553,21 +4553,25 @@
     }
 
     /**
-     * hook to register that we need to scan for security annotations.
-     * @param wrapper   The wrapper for the Servlet that was added
+     * Create a servlet registration.
+     *
+     * @param wrapper The wrapper for which the registration should be created.
+     *
+     * @return An appropriate registration
+     *
+     * @deprecated This will be removed in Tomcat 9. The registration should be
+     *             created directly.
      */
+    @Deprecated
     public ServletRegistration.Dynamic dynamicServletAdded(Wrapper wrapper) {
-        Servlet s = wrapper.getServlet();
-        if (s != null && createdServlets.contains(s)) {
-            // Mark the wrapper to indicate annotations need to be scanned
-            wrapper.setServletSecurityAnnotationScanRequired(true);
-        }
         return new ApplicationServletRegistration(wrapper, this);
     }
 
     /**
-     * hook to track which registrations need annotation scanning
-     * @param servlet
+     * Hook to track which Servlets were created via
+     * {@link ServletContext#createServlet(Class)}.
+     *
+     * @param servlet the created Servlet
      */
     public void dynamicServletCreated(Servlet servlet) {
         createdServlets.add(servlet);
@@ -4574,6 +4578,11 @@
     }
 
 
+    public boolean wasCreatedDynamicServlet(Servlet servlet) {
+        return createdServlets.contains(servlet);
+    }
+
+
     /**
      * A helper class to manage the filter mappings in a Context.
      */
@@ -5864,8 +5873,6 @@
                         newSecurityConstraints) {
                     addConstraint(securityConstraint);
                 }
-
-                checkConstraintsForUncoveredMethods(newSecurityConstraints);
             }
         }
 
Index: tc8.0.x/trunk/java/org/apache/catalina/core/StandardWrapper.java
===================================================================
--- tc8.0.x/trunk/java/org/apache/catalina/core/StandardWrapper.java	(revision 1823318)
+++ tc8.0.x/trunk/java/org/apache/catalina/core/StandardWrapper.java	(revision 1823319)
@@ -14,8 +14,6 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
-
 package org.apache.catalina.core;
 
 import java.io.PrintStream;
@@ -42,11 +40,9 @@
 import javax.servlet.ServletConfig;
 import javax.servlet.ServletContext;
 import javax.servlet.ServletException;
-import javax.servlet.ServletSecurityElement;
 import javax.servlet.SingleThreadModel;
 import javax.servlet.UnavailableException;
 import javax.servlet.annotation.MultipartConfig;
-import javax.servlet.annotation.ServletSecurity;
 
 import org.apache.catalina.Container;
 import org.apache.catalina.ContainerServlet;
@@ -267,8 +263,6 @@
      */
     protected boolean enabled = true;
 
-    protected volatile boolean servletSecurityAnnotationScanRequired = false;
-
     private boolean overridable = false;
 
     /**
@@ -642,7 +636,7 @@
      */
     @Override
     public void setServletSecurityAnnotationScanRequired(boolean b) {
-        this.servletSecurityAnnotationScanRequired = b;
+        // NO-OP
     }
 
     // --------------------------------------------------------- Public Methods
@@ -1119,8 +1113,6 @@
                 }
             }
 
-            processServletSecurityAnnotation(servlet.getClass());
-
             // Special handling for ContainerServlet instances
             if ((servlet instanceof ContainerServlet) &&
                     (isContainerProvidedServlet(servletClass) ||
@@ -1163,41 +1155,10 @@
      */
     @Override
     public void servletSecurityAnnotationScan() throws ServletException {
-        if (getServlet() == null) {
-            Class<?> clazz = null;
-            try {
-                clazz = ((Context) getParent()).getLoader().getClassLoader().loadClass(
-                        getServletClass());
-                processServletSecurityAnnotation(clazz);
-            } catch (ClassNotFoundException e) {
-                // Safe to ignore. No class means no annotations to process
-            }
-        } else {
-            if (servletSecurityAnnotationScanRequired) {
-                processServletSecurityAnnotation(getServlet().getClass());
-            }
-        }
+        // NO-OP
     }
 
-    private void processServletSecurityAnnotation(Class<?> clazz) {
-        // Calling this twice isn't harmful so no syncs
-        servletSecurityAnnotationScanRequired = false;
 
-        Context ctxt = (Context) getParent();
-
-        if (ctxt.getIgnoreAnnotations()) {
-            return;
-        }
-
-        ServletSecurity secAnnotation =
-            clazz.getAnnotation(ServletSecurity.class);
-        if (secAnnotation != null) {
-            ctxt.addServletSecurity(
-                    new ApplicationServletRegistration(this, ctxt),
-                    new ServletSecurityElement(secAnnotation));
-        }
-    }
-
     private synchronized void initServlet(Servlet servlet)
             throws ServletException {
 
Index: tc8.0.x/trunk/java/org/apache/catalina/startup/ContextConfig.java
===================================================================
--- tc8.0.x/trunk/java/org/apache/catalina/startup/ContextConfig.java	(revision 1823318)
+++ tc8.0.x/trunk/java/org/apache/catalina/startup/ContextConfig.java	(revision 1823319)
@@ -352,15 +352,14 @@
         LoginConfig loginConfig = context.getLoginConfig();
 
         SecurityConstraint constraints[] = context.findConstraints();
-        if (context.getIgnoreAnnotations() &&
-                (constraints == null || constraints.length ==0) &&
+        if ((constraints == null || constraints.length ==0) &&
                 !context.getPreemptiveAuthentication())  {
+            // No need for an authenticator
             return;
         } else {
             if (loginConfig == null) {
-                // Not metadata-complete or security constraints present, need
-                // an authenticator to support @ServletSecurity annotations
-                // and/or constraints
+                // Security constraints present. Need an authenticator to
+                // support them.
                 loginConfig = DUMMY_LOGIN_CONFIG;
                 context.setLoginConfig(loginConfig);
             }
Index: tc8.0.x/trunk/java/org/apache/catalina/startup/Tomcat.java
===================================================================
--- tc8.0.x/trunk/java/org/apache/catalina/startup/Tomcat.java	(revision 1823318)
+++ tc8.0.x/trunk/java/org/apache/catalina/startup/Tomcat.java	(revision 1823319)
@@ -927,6 +927,9 @@
                 if (event.getType().equals(Lifecycle.CONFIGURE_START_EVENT)) {
                     context.setConfigured(true);
 
+                    // Process annotations
+                    WebAnnotationSet.loadApplicationAnnotations(context);
+
                     // LoginConfig is required to process @ServletSecurity
                     // annotations
                     if (context.getLoginConfig() == null) {
Index: tc8.0.x/trunk/java/org/apache/catalina/startup/WebAnnotationSet.java
===================================================================
--- tc8.0.x/trunk/java/org/apache/catalina/startup/WebAnnotationSet.java	(revision 1823318)
+++ tc8.0.x/trunk/java/org/apache/catalina/startup/WebAnnotationSet.java	(revision 1823319)
@@ -23,10 +23,13 @@
 import javax.annotation.Resources;
 import javax.annotation.security.DeclareRoles;
 import javax.annotation.security.RunAs;
+import javax.servlet.ServletSecurityElement;
+import javax.servlet.annotation.ServletSecurity;
 
 import org.apache.catalina.Container;
 import org.apache.catalina.Context;
 import org.apache.catalina.Wrapper;
+import org.apache.catalina.core.ApplicationServletRegistration;
 import org.apache.catalina.util.Introspection;
 import org.apache.tomcat.util.descriptor.web.ContextEnvironment;
 import org.apache.tomcat.util.descriptor.web.ContextResource;
@@ -136,10 +139,18 @@
                  * Ref JSR 250, equivalent to the run-as element in
                  * the deployment descriptor
                  */
-                RunAs annotation = clazz.getAnnotation(RunAs.class);
-                if (annotation != null) {
-                    wrapper.setRunAs(annotation.value());
+                RunAs runAs = clazz.getAnnotation(RunAs.class);
+                if (runAs != null) {
+                    wrapper.setRunAs(runAs.value());
                 }
+
+                // Process ServletSecurity annotation
+                ServletSecurity servletSecurity = clazz.getAnnotation(ServletSecurity.class);
+                if (servletSecurity != null) {
+                    context.addServletSecurity(
+                            new ApplicationServletRegistration(wrapper, context),
+                            new ServletSecurityElement(servletSecurity));
+                }
             }
         }
     }
Index: tc8.0.x/trunk/webapps/docs/changelog.xml
===================================================================
--- tc8.0.x/trunk/webapps/docs/changelog.xml	(revision 1823318)
+++ tc8.0.x/trunk/webapps/docs/changelog.xml	(revision 1823319)
@@ -77,6 +77,11 @@
         When using Tomcat embedded, only perform Authenticator configuration
         once during web application start. (markt)
       </fix>
+      <fix>
+        Process all <code>ServletSecurity</code> annotations at web application
+        start rather than at servlet load time to ensure constraints are applied
+        consistently. (markt)
+      </fix>
     </changelog>
   </subsection>
   <subsection name="Other">
Index: tc8.0.x/trunk
===================================================================
--- tc8.0.x/trunk	(revision 1823318)
+++ tc8.0.x/trunk	(revision 1823319)

Property changes on: tc8.0.x/trunk
___________________________________________________________________
Modified: svn:mergeinfo
## -0,0 +0,1 ##
   Merged /tomcat/trunk:r1823310
