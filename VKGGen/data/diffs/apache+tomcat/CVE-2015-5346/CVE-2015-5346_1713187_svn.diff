Index: tc7.0.x/trunk/java/org/apache/catalina/connector/CoyoteAdapter.java
===================================================================
--- tc7.0.x/trunk/java/org/apache/catalina/connector/CoyoteAdapter.java	(revision 1713186)
+++ tc7.0.x/trunk/java/org/apache/catalina/connector/CoyoteAdapter.java	(revision 1713187)
@@ -781,6 +781,9 @@
                                 // Reset mapping
                                 request.getMappingData().recycle();
                                 mapRequired = true;
+                                // Recycle session info in case the correct
+                                // context is configured with different settings
+                                request.recycleSessionInfo();
                             }
                             break;
                         }
Index: tc7.0.x/trunk/java/org/apache/catalina/connector/Request.java
===================================================================
--- tc7.0.x/trunk/java/org/apache/catalina/connector/Request.java	(revision 1713186)
+++ tc7.0.x/trunk/java/org/apache/catalina/connector/Request.java	(revision 1713187)
@@ -500,18 +500,7 @@
         notes.clear();
         cookies = null;
 
-        if (session != null) {
-            try {
-                session.endAccess();
-            } catch (Throwable t) {
-                ExceptionUtils.handleThrowable(t);
-                log.warn(sm.getString("coyoteRequest.sessionEndAccessFail"), t);
-            }
-        }
-        session = null;
-        requestedSessionCookie = false;
-        requestedSessionId = null;
-        requestedSessionURL = false;
+        recycleSessionInfo();
 
         if (Globals.IS_SECURITY_ENABLED || Connector.RECYCLE_FACADES) {
             parameterMap = new ParameterMap<String, String[]>();
@@ -559,11 +548,24 @@
     }
 
 
-    /**
-     * Clear cached encoders (to save memory for Comet requests).
-     */
-    public boolean read()
-        throws IOException {
+    protected void recycleSessionInfo() {
+        if (session != null) {
+            try {
+                session.endAccess();
+            } catch (Throwable t) {
+                ExceptionUtils.handleThrowable(t);
+                log.warn(sm.getString("coyoteRequest.sessionEndAccessFail"), t);
+            }
+        }
+        session = null;
+        requestedSessionCookie = false;
+        requestedSessionId = null;
+        requestedSessionURL = false;
+        requestedSessionSSL = false;
+    }
+
+
+    public boolean read() throws IOException {
         return (inputBuffer.realReadBytes(null, 0, 0) > 0);
     }
 
Index: tc7.0.x/trunk/webapps/docs/changelog.xml
===================================================================
--- tc7.0.x/trunk/webapps/docs/changelog.xml	(revision 1713186)
+++ tc7.0.x/trunk/webapps/docs/changelog.xml	(revision 1713187)
@@ -127,6 +127,10 @@
         <bug>58582</bug>: Combined realm should perform background processing
         on its sub-realms. Based upon a patch provided by Aidan. (kkolinko)
       </fix>
+      <fix>
+        Handle the unlikely case where different versions of a web application
+        are deployed with different session settings. (markt)
+      </fix>
     </changelog>
   </subsection>
   <subsection name="Cluster">
Index: tc7.0.x/trunk
===================================================================
--- tc7.0.x/trunk	(revision 1713186)
+++ tc7.0.x/trunk	(revision 1713187)

Property changes on: tc7.0.x/trunk
___________________________________________________________________
Modified: svn:mergeinfo
## -0,0 +0,2 ##
   Merged /tomcat/tc8.0.x/trunk:r1713185
   Merged /tomcat/trunk:r1713184
