commit 9be57601efb8a81e3832feb0dd60b1eb9d2b61d5
Author:     Mark Thomas <markt@apache.org>
AuthorDate: Tue Feb 4 19:18:08 2020 +0000
Commit:     Mark Thomas <markt@apache.org>
CommitDate: Tue Feb 4 19:18:08 2020 +0000

    Fix broken back-port

diff --git a/java/org/apache/coyote/ajp/AbstractAjpProtocol.java b/java/org/apache/coyote/ajp/AbstractAjpProtocol.java
index 1d42c36379..bba4d6a2d4 100644
--- a/java/org/apache/coyote/ajp/AbstractAjpProtocol.java
+++ b/java/org/apache/coyote/ajp/AbstractAjpProtocol.java
@@ -253,6 +253,7 @@ public abstract class AbstractAjpProtocol<S> extends AbstractProtocol<S> {
         processor.setKeepAliveTimeout(getKeepAliveTimeout());
         processor.setClientCertProvider(getClientCertProvider());
         processor.setSendReasonPhrase(getSendReasonPhrase());
+        processor.setAllowedArbitraryRequestAttributesPattern(getAllowedArbitraryRequestAttributesPattern());
         return processor;
     }
 
diff --git a/java/org/apache/coyote/ajp/AjpProcessor.java b/java/org/apache/coyote/ajp/AjpProcessor.java
index a14a960542..06c25b7dfd 100644
--- a/java/org/apache/coyote/ajp/AjpProcessor.java
+++ b/java/org/apache/coyote/ajp/AjpProcessor.java
@@ -360,6 +360,7 @@ public class AjpProcessor extends AbstractProcessor {
         this.clientCertProvider = clientCertProvider;
     }
 
+
     @Deprecated
     private boolean sendReasonPhrase = false;
     @Deprecated
@@ -368,6 +369,11 @@ public class AjpProcessor extends AbstractProcessor {
     }
 
 
+    private Pattern allowedArbitraryRequestAttributesPattern;
+    public void setAllowedArbitraryRequestAttributesPattern(Pattern allowedArbitraryRequestAttributesPattern) {
+        this.allowedArbitraryRequestAttributesPattern = allowedArbitraryRequestAttributesPattern;
+    }
+
     // --------------------------------------------------------- Public Methods
 
     @Override
@@ -838,12 +844,11 @@ public class AjpProcessor extends AbstractProcessor {
                 } else {
                     // All 'known' attributes will be processed by the previous
                     // blocks. Any remaining attribute is an 'arbitrary' one.
-                    Pattern pattern = protocol.getAllowedArbitraryRequestAttributesPattern();
-                    if (pattern == null) {
+                    if (allowedArbitraryRequestAttributesPattern == null) {
                         response.setStatus(403);
                         setErrorState(ErrorState.CLOSE_CLEAN, null);
                     } else {
-                        Matcher m = pattern.matcher(n);
+                        Matcher m = allowedArbitraryRequestAttributesPattern.matcher(n);
                         if (m.matches()) {
                             request.setAttribute(n, v);
                         } else {
