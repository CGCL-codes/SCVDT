commit 8fa210147ffd98e8971cba56395726cc4a893ad7
Author:     Mark Emlyn David Thomas <markt@apache.org>
AuthorDate: Mon Jun 20 19:26:45 2011 +0000
Commit:     Mark Emlyn David Thomas <markt@apache.org>
CommitDate: Mon Jun 20 19:26:45 2011 +0000

    Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=51395
    Fix memory leak triggered when an application that includes a SAXParserFactory is the first web application to be loaded.
    Fix part 1 of 3 for CVE-2011-2481
    
    git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1137753 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/java/org/apache/catalina/startup/ContextConfig.java b/java/org/apache/catalina/startup/ContextConfig.java
index 550b7714e7..4e75ab83d9 100644
--- a/java/org/apache/catalina/startup/ContextConfig.java
+++ b/java/org/apache/catalina/startup/ContextConfig.java
@@ -229,6 +229,32 @@ public class ContextConfig
                                 new LoginConfig("NONE", null, null, null);
 
 
+    static {
+        webDigesters[0] = DigesterFactory.newDigester(false, false, webRuleSet);
+        webDigesters[0].getParser();
+        webFragmentDigesters[0] = DigesterFactory.newDigester(false, false,
+                webFragmentRuleSet);
+        webFragmentDigesters[0].getParser();
+
+        webDigesters[1] = DigesterFactory.newDigester(true, false, webRuleSet);
+        webDigesters[1].getParser();
+        webFragmentDigesters[1] = DigesterFactory.newDigester(true, false,
+                webFragmentRuleSet);
+        webFragmentDigesters[1].getParser();
+
+        webDigesters[2] = DigesterFactory.newDigester(false, true, webRuleSet);
+        webDigesters[2].getParser();
+        webFragmentDigesters[2] = DigesterFactory.newDigester(false, true,
+                webFragmentRuleSet);
+        webFragmentDigesters[2].getParser();
+
+        webDigesters[3] = DigesterFactory.newDigester(true, true, webRuleSet);
+        webDigesters[3].getParser();
+        webFragmentDigesters[3] = DigesterFactory.newDigester(true, true,
+                webFragmentRuleSet);
+        webFragmentDigesters[3].getParser();
+    }
+
     // ------------------------------------------------------------- Properties
 
 
@@ -475,46 +501,22 @@ public class ContextConfig
      * Create (if necessary) and return a Digester configured to process the
      * web application deployment descriptor (web.xml).
      */
-    public void createWebXmlDigester(boolean namespaceAware,
+    protected void createWebXmlDigester(boolean namespaceAware,
             boolean validation) {
         
         if (!namespaceAware && !validation) {
-            if (webDigesters[0] == null) {
-                webDigesters[0] = DigesterFactory.newDigester(validation,
-                        namespaceAware, webRuleSet);
-                webFragmentDigesters[0] = DigesterFactory.newDigester(validation,
-                        namespaceAware, webFragmentRuleSet);
-            }
             webDigester = webDigesters[0];
             webFragmentDigester = webFragmentDigesters[0];
             
         } else if (!namespaceAware && validation) {
-            if (webDigesters[1] == null) {
-                webDigesters[1] = DigesterFactory.newDigester(validation,
-                        namespaceAware, webRuleSet);
-                webFragmentDigesters[1] = DigesterFactory.newDigester(validation,
-                        namespaceAware, webFragmentRuleSet);
-            }
             webDigester = webDigesters[1];
             webFragmentDigester = webFragmentDigesters[1];
             
         } else if (namespaceAware && !validation) {
-            if (webDigesters[2] == null) {
-                webDigesters[2] = DigesterFactory.newDigester(validation,
-                        namespaceAware, webRuleSet);
-                webFragmentDigesters[2] = DigesterFactory.newDigester(validation,
-                        namespaceAware, webFragmentRuleSet);
-            }
             webDigester = webDigesters[2];
             webFragmentDigester = webFragmentDigesters[2];
             
         } else {
-            if (webDigesters[3] == null) {
-                webDigesters[3] = DigesterFactory.newDigester(validation,
-                        namespaceAware, webRuleSet);
-                webFragmentDigesters[3] = DigesterFactory.newDigester(validation,
-                        namespaceAware, webFragmentRuleSet);
-            }
             webDigester = webDigesters[3];
             webFragmentDigester = webFragmentDigesters[3];
         }
diff --git a/webapps/docs/changelog.xml b/webapps/docs/changelog.xml
index 3bbbdc98e5..a91eec5b12 100644
--- a/webapps/docs/changelog.xml
+++ b/webapps/docs/changelog.xml
@@ -85,6 +85,11 @@
         include leading zeros and formatting any parameters present.
         (kolinko/markt)
       </fix>
+      <fix>
+        <bug>51395</bug>: Fix memory leak triggered when an application that
+        includes a SAXParserFactory is the first web application to be loaded.
+        (markt)
+      </fix>
     </changelog>
   </subsection>
   <subsection name="Coyote">
