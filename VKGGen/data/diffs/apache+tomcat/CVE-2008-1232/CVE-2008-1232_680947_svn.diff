Index: container/tc5.5.x/webapps/docs/config/systemprops.xml
===================================================================
--- container/tc5.5.x/webapps/docs/config/systemprops.xml	(revision 680946)
+++ container/tc5.5.x/webapps/docs/config/systemprops.xml	(revision 680947)
@@ -74,6 +74,14 @@
       be used.</p>
     </property>
 
+    <property
+    name="org.apache.coyote. USE_CUSTOM_STATUS_MSG_IN_HEADER"><p>If this is
+      <code>true</code> custom HTTP status messages will be used within HTTP
+      headers. Users must ensure that any such message is ISO-8859-1 encoded,
+      particularly if user provided input is included in the message, to prevent
+      a possible XSS vulnerability. If not specified the default value of
+      <code>false</code> will be used.</p>
+    </property>
   </properties>
 
 </section>
Index: container/tc5.5.x/catalina/src/share/org/apache/catalina/core/StandardContextValve.java
===================================================================
--- container/tc5.5.x/catalina/src/share/org/apache/catalina/core/StandardContextValve.java	(revision 680946)
+++ container/tc5.5.x/catalina/src/share/org/apache/catalina/core/StandardContextValve.java	(revision 680947)
@@ -119,8 +119,7 @@
             || (requestPathMB.equalsIgnoreCase("/META-INF"))
             || (requestPathMB.startsWithIgnoreCase("/WEB-INF/", 0))
             || (requestPathMB.equalsIgnoreCase("/WEB-INF"))) {
-            String requestURI = request.getDecodedRequestURI();
-            notFound(requestURI, response);
+            notFound(response);
             return;
         }
 
@@ -136,8 +135,7 @@
         // Select the Wrapper to be used for this Request
         Wrapper wrapper = request.getWrapper();
         if (wrapper == null) {
-            String requestURI = request.getDecodedRequestURI();
-            notFound(requestURI, response);
+            notFound(response);
             return;
         }
 
@@ -206,13 +204,12 @@
      * application, but currently that code runs at the wrapper level rather
      * than the context level.
      *
-     * @param requestURI The request URI for the requested resource
      * @param response The response we are creating
      */
-    private void notFound(String requestURI, HttpServletResponse response) {
+    private void notFound(HttpServletResponse response) {
 
         try {
-            response.sendError(HttpServletResponse.SC_NOT_FOUND, requestURI);
+            response.sendError(HttpServletResponse.SC_NOT_FOUND);
         } catch (IllegalStateException e) {
             ;
         } catch (IOException e) {
Index: connectors/trunk/http11/src/java/org/apache/coyote/http11/InternalOutputBuffer.java
===================================================================
--- connectors/trunk/http11/src/java/org/apache/coyote/http11/InternalOutputBuffer.java	(revision 680946)
+++ connectors/trunk/http11/src/java/org/apache/coyote/http11/InternalOutputBuffer.java	(revision 680947)
@@ -448,11 +448,14 @@
         buf[pos++] = Constants.SP;
 
         // Write message
-        String message = response.getMessage();
+        String message = null;
+        if (org.apache.coyote.Constants.USE_CUSTOM_STATUS_MSG_IN_HEADER) {
+            message = response.getMessage();
+        } 
         if (message == null) {
             write(getMessage(status));
         } else {
-            write(message);
+            write(message.replace('\n', ' ').replace('\r', ' '));
         }
 
         // End the response status line
Index: connectors/trunk/http11/src/java/org/apache/coyote/http11/InternalAprOutputBuffer.java
===================================================================
--- connectors/trunk/http11/src/java/org/apache/coyote/http11/InternalAprOutputBuffer.java	(revision 680946)
+++ connectors/trunk/http11/src/java/org/apache/coyote/http11/InternalAprOutputBuffer.java	(revision 680947)
@@ -429,11 +429,14 @@
         buf[pos++] = Constants.SP;
 
         // Write message
-        String message = response.getMessage();
+        String message = null;
+        if (org.apache.coyote.Constants.USE_CUSTOM_STATUS_MSG_IN_HEADER) {
+            message = response.getMessage();
+        } 
         if (message == null) {
             write(HttpMessages.getMessage(status));
         } else {
-            write(message);
+            write(message.replace('\n', ' ').replace('\r', ' '));
         }
 
         // End the response status line
Index: connectors/trunk/coyote/src/java/org/apache/coyote/Constants.java
===================================================================
--- connectors/trunk/coyote/src/java/org/apache/coyote/Constants.java	(revision 680946)
+++ connectors/trunk/coyote/src/java/org/apache/coyote/Constants.java	(revision 680947)
@@ -53,4 +53,12 @@
     public static final int STAGE_ENDED = 7;
 
 
+    /**
+     * If true, custom HTTP status messages will be used in headers.
+     */
+    public static final boolean USE_CUSTOM_STATUS_MSG_IN_HEADER =
+        Boolean.valueOf(System.getProperty(
+                "org.apache.coyote.USE_CUSTOM_STATUS_MSG_IN_HEADER",
+                "false")).booleanValue();
+
 }
Index: connectors/trunk/jk/java/org/apache/coyote/ajp/AjpAprProcessor.java
===================================================================
--- connectors/trunk/jk/java/org/apache/coyote/ajp/AjpAprProcessor.java	(revision 680946)
+++ connectors/trunk/jk/java/org/apache/coyote/ajp/AjpAprProcessor.java	(revision 680947)
@@ -942,7 +942,10 @@
 
         // HTTP header contents
         responseHeaderMessage.appendInt(response.getStatus());
-        String message = response.getMessage();
+        String message = null;
+        if (org.apache.coyote.Constants.USE_CUSTOM_STATUS_MSG_IN_HEADER) {
+            message = response.getMessage();
+        } 
         if (message == null){
             message = HttpMessages.getMessage(response.getStatus());
         } else {
Index: connectors/trunk/jk/java/org/apache/jk/common/JkInputStream.java
===================================================================
--- connectors/trunk/jk/java/org/apache/jk/common/JkInputStream.java	(revision 680946)
+++ connectors/trunk/jk/java/org/apache/jk/common/JkInputStream.java	(revision 680947)
@@ -279,7 +279,10 @@
         outputMsg.appendByte(AjpConstants.JK_AJP13_SEND_HEADERS);
         outputMsg.appendInt( res.getStatus() );
         
-        String message=res.getMessage();
+        String message = null;
+        if (org.apache.coyote.Constants.USE_CUSTOM_STATUS_MSG_IN_HEADER) {
+            message = res.getMessage();
+        } 
         if( message==null ){
             message= HttpMessages.getMessage(res.getStatus());
         } else {
