Index: tc7.0.x/trunk/java/org/apache/coyote/ajp/AjpNioProcessor.java
===================================================================
--- tc7.0.x/trunk/java/org/apache/coyote/ajp/AjpNioProcessor.java	(revision 1162957)
+++ tc7.0.x/trunk/java/org/apache/coyote/ajp/AjpNioProcessor.java	(revision 1162958)
@@ -126,12 +126,14 @@
                     recycle(false);
                     continue;
                 } else if(type != Constants.JK_AJP13_FORWARD_REQUEST) {
-                    // Usually the servlet didn't read the previous request body
-                    if(log.isDebugEnabled()) {
-                        log.debug("Unexpected message: "+type);
+                    // Unexpected packet type. Unread body packets should have
+                    // been swallowed in finish().
+                    if (log.isDebugEnabled()) {
+                        log.debug("Unexpected message: " + type);
                     }
+                    error = true;
                     recycle(true);
-                    continue;
+                    break;
                 }
                 request.setStartTime(System.currentTimeMillis());
             } catch (IOException e) {
Index: tc7.0.x/trunk/java/org/apache/coyote/ajp/AjpProcessor.java
===================================================================
--- tc7.0.x/trunk/java/org/apache/coyote/ajp/AjpProcessor.java	(revision 1162957)
+++ tc7.0.x/trunk/java/org/apache/coyote/ajp/AjpProcessor.java	(revision 1162958)
@@ -143,13 +143,14 @@
                     }
                     continue;
                 } else if(type != Constants.JK_AJP13_FORWARD_REQUEST) {
-                    // Usually the servlet didn't read the previous request body
-                    if(log.isDebugEnabled()) {
-                        log.debug("Unexpected message: "+type);
+                    // Unexpected packet type. Unread body packets should have
+                    // been swallowed in finish().
+                    if (log.isDebugEnabled()) {
+                        log.debug("Unexpected message: " + type);
                     }
-                    continue;
+                    error = true;
+                    break;
                 }
-
                 request.setStartTime(System.currentTimeMillis());
             } catch (IOException e) {
                 error = true;
Index: tc7.0.x/trunk/java/org/apache/coyote/ajp/AjpAprProcessor.java
===================================================================
--- tc7.0.x/trunk/java/org/apache/coyote/ajp/AjpAprProcessor.java	(revision 1162957)
+++ tc7.0.x/trunk/java/org/apache/coyote/ajp/AjpAprProcessor.java	(revision 1162958)
@@ -140,11 +140,13 @@
                     }
                     continue;
                 } else if(type != Constants.JK_AJP13_FORWARD_REQUEST) {
-                    // Usually the servlet didn't read the previous request body
-                    if(log.isDebugEnabled()) {
-                        log.debug("Unexpected message: "+type);
+                    // Unexpected packet type. Unread body packets should have
+                    // been swallowed in finish().
+                    if (log.isDebugEnabled()) {
+                        log.debug("Unexpected message: " + type);
                     }
-                    continue;
+                    error = true;
+                    break;
                 }
 
                 keptAlive = true;
Index: tc7.0.x/trunk/java/org/apache/coyote/ajp/AbstractAjpProcessor.java
===================================================================
--- tc7.0.x/trunk/java/org/apache/coyote/ajp/AbstractAjpProcessor.java	(revision 1162957)
+++ tc7.0.x/trunk/java/org/apache/coyote/ajp/AbstractAjpProcessor.java	(revision 1162958)
@@ -985,6 +985,11 @@
 
         finished = true;
 
+        // Swallow the unread body packet if present
+        if (first && request.getContentLengthLong() > 0) {
+            receive();
+        }
+
         // Add the end message
         if (error) {
             output(endAndCloseMessageArray, 0, endAndCloseMessageArray.length);
Index: tc7.0.x/trunk/webapps/docs/changelog.xml
===================================================================
--- tc7.0.x/trunk/webapps/docs/changelog.xml	(revision 1162957)
+++ tc7.0.x/trunk/webapps/docs/changelog.xml	(revision 1162958)
@@ -131,6 +131,10 @@
         Detect incomplete AJP messages and reject the associated request if one
         is found. (markt) 
       </add>
+      <fix>
+        <bug>51698</bug>: Fix CVE-2011-3190. Prevent AJP message injection.
+        (markt)
+      </fix>
     </changelog>
   </subsection>
   <subsection name="Jasper">
