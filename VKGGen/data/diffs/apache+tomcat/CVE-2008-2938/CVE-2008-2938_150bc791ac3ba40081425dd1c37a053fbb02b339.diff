diff --git a/java/org/apache/tomcat/websocket/Utf8Decoder.java b/java/org/apache/tomcat/websocket/Utf8Decoder.java
index c11da9b78c..92d85055da 100644
--- a/java/org/apache/tomcat/websocket/Utf8Decoder.java
+++ b/java/org/apache/tomcat/websocket/Utf8Decoder.java
@@ -169,13 +169,31 @@ private CoderResult decodeHasArray(ByteBuffer in, CharBuffer out) {
                     return CoderResult.malformedForLength(1);
                 }
                 if (inIndexLimit - inIndex < 1 + tail) {
-                    // Apache Tomcat added test - detects invalid sequence as
+                    // Apache Tomcat added tests - detect invalid sequences as
                     // early as possible
                     if (jchar == 0x74 && inIndexLimit > inIndex + 1) {
                         if ((bArr[inIndex + 1] & 0xFF) > 0x8F) {
+                            // 11110100 1yyyxxxx xxxxxxxx xxxxxxxx
+                            // Any non-zero y is > max code point
                             return CoderResult.unmappableForLength(4);
                         }
                     }
+                    if (jchar == 0x60 && inIndexLimit > inIndex +1) {
+                        if ((bArr[inIndex + 1] & 0x7F) == 0) {
+                            // 11100000 10000000 10xxxxxx
+                            // should have been
+                            // 00xxxxxx
+                            return CoderResult.malformedForLength(3);
+                        }
+                    }
+                    if (jchar == 0x70 && inIndexLimit > inIndex +1) {
+                        if ((bArr[inIndex + 1] & 0x7F) < 0x10) {
+                            // 11110000 1000zzzz 1oyyyyyy 1oxxxxxx
+                            // should have been
+                            // 111ozzzz 1oyyyyyy 1oxxxxxx
+                            return CoderResult.malformedForLength(4);
+                        }
+                    }
                     break;
                 }
                 for (int i = 0; i < tail; i++) {
diff --git a/test/org/apache/tomcat/websocket/TestUtf8.java b/test/org/apache/tomcat/websocket/TestUtf8.java
index e5257eb528..e15791b5b3 100644
--- a/test/org/apache/tomcat/websocket/TestUtf8.java
+++ b/test/org/apache/tomcat/websocket/TestUtf8.java
@@ -38,6 +38,56 @@
     private static final byte[] SRC_BYTES_2 =
             new byte[] {-12, -112, -128, -128};
 
+    // Various invalid UTF-8 sequences
+    private static final byte[][] MALFORMED = {
+            // One-byte sequences:
+            {(byte)0xFF },
+            {(byte)0xC0 },
+            {(byte)0x80 },
+
+            // Two-byte sequences:
+            {(byte)0xC0, (byte)0x80}, // U+0000 zero-padded
+            {(byte)0xC1, (byte)0xBF}, // U+007F zero-padded
+            {(byte)0xFF, (byte)0xFF}, // all ones
+            {(byte)0xE0, (byte)0x80}, // 111x first byte first nibble
+            {(byte)0xA0, (byte)0x80}, // 101x first byte first nibble
+            {(byte)0xC2, (byte)0x00}, // invalid second byte
+            {(byte)0xC2, (byte)0xC0}, // invalid second byte
+
+            // Three-byte sequences
+            {(byte)0xE0, (byte)0x80, (byte)0x80 }, // U+0000 zero-padded
+            {(byte)0xE0, (byte)0x81, (byte)0xBF }, // U+007F zero-padded
+            {(byte)0xE0, (byte)0x9F, (byte)0xBF }, // U+07FF zero-padded
+            {(byte)0xFF, (byte)0xFF, (byte)0xFF }, // all ones
+            {(byte)0xF0, (byte)0x80, (byte)0x80 }, // invalid first byte
+            {(byte)0xE0, (byte)0xC0, (byte)0x80 }, // invalid second byte
+            {(byte)0xE0, (byte)0x80, (byte)0xC0 }, // invalid third byte
+
+            // Four-byte sequences
+            {(byte)0xF0, (byte)0x80, (byte)0x80, (byte)0x80 }, // U+0000 zero-padded
+            {(byte)0xF0, (byte)0x80, (byte)0x81, (byte)0xBF }, // U+007F zero-padded
+            {(byte)0xF0, (byte)0x80, (byte)0x9F, (byte)0xBF }, // U+007F zero-padded
+            {(byte)0xF0, (byte)0x8F, (byte)0xBF, (byte)0xBF }, // U+07FF zero-padded
+
+            {(byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF }, // all ones
+            {(byte)0xF8, (byte)0x80, (byte)0x80, (byte)0x80 }, // invalid first byte
+            {(byte)0xF0, (byte)0xC0, (byte)0x80, (byte)0x80 }, // invalid second byte
+            {(byte)0xF0, (byte)0x80, (byte)0xC0, (byte)0x80 }, // invalid third byte
+            {(byte)0xF0, (byte)0x80, (byte)0x80, (byte)0xC0 }, // invalid fourth byte
+
+            // Five-byte sequences
+            {(byte)0xF8, (byte)0x80, (byte)0x80, (byte)0x80, (byte)0x80 }, // U+0000 zero-padded
+            {(byte)0xF8, (byte)0x80, (byte)0x80, (byte)0x81, (byte)0xBF }, // U+007F zero-padded
+            {(byte)0xF8, (byte)0x80, (byte)0x80, (byte)0x9F, (byte)0xBF }, // U+07FF zero-padded
+            {(byte)0xF8, (byte)0x80, (byte)0x8F, (byte)0xBF, (byte)0xBF }, // U+FFFF zero-padded
+
+            // Six-byte sequences
+            {(byte)0xFC, (byte)0x80, (byte)0x80, (byte)0x80, (byte)0x80, (byte)0x80 }, // U+0000 zero-padded
+            {(byte)0xFC, (byte)0x80, (byte)0x80, (byte)0x80, (byte)0x81, (byte)0xBF }, // U+007F zero-padded
+            {(byte)0xFC, (byte)0x80, (byte)0x80, (byte)0x80, (byte)0x9F, (byte)0xBF }, // U+07FF zero-padded
+            {(byte)0xFC, (byte)0x80, (byte)0x80, (byte)0x8F, (byte)0xBF, (byte)0xBF }, // U+FFFF zero-padded
+        };
+
     @Test
     public void testJvmDecoder1() {
         // This should trigger an error but currently passes. Once the JVM is
@@ -76,8 +126,17 @@ private void doJvmDecoder(byte[] src, boolean errorExpected,
             bb.compact();
         }
 
-        assertEquals(Boolean.valueOf(errorExpected), Boolean.valueOf(error));
-        assertEquals(failPosExpected, i);
+        StringBuilder ashex = new StringBuilder(src.length * 4);
+        for (int j = 0; j < src.length; j++) {
+            if (i > 0) ashex.append(' ');
+            ashex.append(Integer.toBinaryString(src[j] & 0xff));
+        }
+
+        assertEquals(ashex.toString(),
+                Boolean.valueOf(errorExpected), Boolean.valueOf(error));
+        if (failPosExpected != -1) {
+            assertEquals(failPosExpected, i);
+        }
     }
 
 
@@ -93,7 +152,7 @@ public void testHarmonyDecoder2() {
     }
 
 
-    public void doHarmonyDecoder(byte[] src, boolean errorExpected,
+    private void doHarmonyDecoder(byte[] src, boolean errorExpected,
             int failPosExpected) {
         CharsetDecoder decoder = new Utf8Decoder();
 
@@ -113,7 +172,37 @@ public void doHarmonyDecoder(byte[] src, boolean errorExpected,
             bb.compact();
         }
 
-        assertEquals(Boolean.valueOf(errorExpected), Boolean.valueOf(error));
-        assertEquals(failPosExpected, i);
+        StringBuilder ashex = new StringBuilder(src.length * 4);
+        for (int j = 0; j < src.length; j++) {
+            if (i > 0) ashex.append(' ');
+            ashex.append(Integer.toBinaryString(src[j] & 0xff));
+        }
+
+        assertEquals(ashex.toString(),
+                Boolean.valueOf(errorExpected), Boolean.valueOf(error));
+        if (failPosExpected != -1) {
+            assertEquals(failPosExpected, i);
+        }
+    }
+
+
+    @Test
+    public void testUtf8MalformedJvm() {
+        for (int i = 0 ; i < MALFORMED.length; i++) {
+            // Known failures
+            if (i == 1 || i == 6 || i == 14 | i == 22) {
+                doJvmDecoder(MALFORMED[i], false, -1);
+            } else {
+                doJvmDecoder(MALFORMED[i], true, -1);
+            }
+        }
+    }
+
+
+    @Test
+    public void testUtf8MalformedHarmony() {
+        for (byte[] input : MALFORMED) {
+            doHarmonyDecoder(input, true, -1);
+        }
     }
 }
