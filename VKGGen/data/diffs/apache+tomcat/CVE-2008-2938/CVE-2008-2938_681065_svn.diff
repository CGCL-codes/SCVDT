Index: container/branches/tc4.1.x/RELEASE-NOTES-4.1.txt
===================================================================
--- container/branches/tc4.1.x/RELEASE-NOTES-4.1.txt	(revision 681064)
+++ container/branches/tc4.1.x/RELEASE-NOTES-4.1.txt	(revision 681065)
@@ -1993,7 +1993,10 @@
          Fix security issues CVE-2007-3385 and CVE-2007-5333 in cookie handling
          that allowed session hi-jacking to occur.
 
+[4.1.38] CoyoteConnector
+         Add additional checks for URI normalization.
 
+
 ----------------
 Jasper Bug Fixes:
 ----------------
Index: connectors/trunk/coyote/src/java/org/apache/coyote/tomcat4/CoyoteAdapter.java
===================================================================
--- connectors/trunk/coyote/src/java/org/apache/coyote/tomcat4/CoyoteAdapter.java	(revision 681064)
+++ connectors/trunk/coyote/src/java/org/apache/coyote/tomcat4/CoyoteAdapter.java	(revision 681065)
@@ -264,6 +264,13 @@
             }
         }
 
+        // Check that the URI is still normalized
+        if (!checkNormalize(req.decodedURI())) {
+            res.setStatus(400);
+            res.setMessage("Invalid URI character encoding");
+            throw new IOException("Invalid URI character encoding");
+        }
+
         // Parse cookies
         parseCookies(req, request);
 
@@ -675,6 +682,67 @@
     }
 
 
+    /**
+     * Check that the URI is normalized following character decoding.
+     * <p>
+     * This method checks for "\", 0, "//", "/./" and "/../". This method will
+     * return false if sequences that are supposed to be normalized are still 
+     * present in the URI.
+     * 
+     * @param uriMB URI to be checked (should be chars)
+     */
+    public static boolean checkNormalize(MessageBytes uriMB) {
+
+        CharChunk uriCC = uriMB.getCharChunk();
+        char[] c = uriCC.getChars();
+        int start = uriCC.getStart();
+        int end = uriCC.getEnd();
+
+        int pos = 0;
+
+        // Check for '\' and 0
+        for (pos = start; pos < end; pos++) {
+            if (c[pos] == '\\') {
+                return false;
+            }
+            if (c[pos] == 0) {
+                return false;
+            }
+        }
+
+        // Check for "//"
+        for (pos = start; pos < (end - 1); pos++) {
+            if (c[pos] == '/') {
+                if (c[pos + 1] == '/') {
+                    return false;
+                }
+            }
+        }
+
+        // Check for ending with "/." or "/.."
+        if (((end - start) >= 2) && (c[end - 1] == '.')) {
+            if ((c[end - 2] == '/') 
+                    || ((c[end - 2] == '.') 
+                    && (c[end - 3] == '/'))) {
+                return false;
+            }
+        }
+
+        // Check for "/./"
+        if (uriCC.indexOf("/./", 0, 3, 0) >= 0) {
+            return false;
+        }
+
+        // Check for "/../"
+        if (uriCC.indexOf("/../", 0, 4, 0) >= 0) {
+            return false;
+        }
+
+        return true;
+
+    }
+
+
     // ------------------------------------------------------ Protected Methods
 
 
