commit f94eedf02b5973598ab3dbbd4504da588e9ba6cb
Author:     Mark Thomas <markt@apache.org>
AuthorDate: Mon Aug 6 14:44:56 2018 +0000
Commit:     Mark Thomas <markt@apache.org>
CommitDate: Mon Aug 6 14:44:56 2018 +0000

    Add some comments for the fix for CVE-2018-8037
    
    git-svn-id: https://svn.apache.org/repos/asf/tomcat/tc8.5.x/trunk@1837531 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/java/org/apache/coyote/AbstractProcessor.java b/java/org/apache/coyote/AbstractProcessor.java
index 7183f8864a..b46b134e63 100644
--- a/java/org/apache/coyote/AbstractProcessor.java
+++ b/java/org/apache/coyote/AbstractProcessor.java
@@ -52,6 +52,15 @@ public abstract class AbstractProcessor extends AbstractProcessorLight implement
     protected Adapter adapter;
     protected final AsyncStateMachine asyncStateMachine;
     private volatile long asyncTimeout = -1;
+    /*
+     * Tracks the current async generation when a timeout is dispatched. In the
+     * time it takes for a container thread to be allocated and the timeout
+     * processing to start, it is possible that the application completes this
+     * generation of async processing and starts a new one. If the timeout is
+     * then processed against the new generation, response mix-up can occur.
+     * This field is used to ensure that any timeout event processed is for the
+     * current async generation. This prevents the response mix-up.
+     */
     private volatile long asyncTimeoutGeneration = 0;
     protected final AbstractEndpoint<?> endpoint;
     protected final Request request;
diff --git a/java/org/apache/coyote/AsyncStateMachine.java b/java/org/apache/coyote/AsyncStateMachine.java
index 124a54ab1d..b5ab796eac 100644
--- a/java/org/apache/coyote/AsyncStateMachine.java
+++ b/java/org/apache/coyote/AsyncStateMachine.java
@@ -190,6 +190,14 @@ public class AsyncStateMachine {
 
     private volatile AsyncState state = AsyncState.DISPATCHED;
     private volatile long lastAsyncStart = 0;
+    /*
+     * Tracks the current generation of async processing for this state machine.
+     * The generation is incremented every time async processing is started. The
+     * primary purpose of this is to enable Tomcat to detect and prevent
+     * attempts to process an event for a previous generation with the current
+     * generation as processing such an event usually ends badly:
+     * e.g. CVE-2018-8037.
+     */
     private final AtomicLong generation = new AtomicLong(0);
     // Need this to fire listener on complete
     private AsyncContextCallback asyncCtxt = null;
