commit f7a1b83b179f855ffee8465e328f7bbbc6175e85
Author:     Konstantin Kolinko <kkolinko@apache.org>
AuthorDate: Thu Jun 14 15:24:34 2012 +0000
Commit:     Konstantin Kolinko <kkolinko@apache.org>
CommitDate: Thu Jun 14 15:24:34 2012 +0000

    Improve InternalNioInputBuffer#parseHeaders()
    Move the code and s/end/pos/
    
    git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1350294 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/java/org/apache/coyote/http11/InternalNioInputBuffer.java b/java/org/apache/coyote/http11/InternalNioInputBuffer.java
index d15b3c7bc8..7b7d5af2b4 100644
--- a/java/org/apache/coyote/http11/InternalNioInputBuffer.java
+++ b/java/org/apache/coyote/http11/InternalNioInputBuffer.java
@@ -473,10 +473,6 @@ public class InternalNioInputBuffer extends AbstractInputBuffer<NioChannel> {
 
         do {
             status = parseHeader();
-        } while ( status == HeaderParseStatus.HAVE_MORE_HEADERS );
-        if (status == HeaderParseStatus.DONE) {
-            parsingHeader = false;
-            end = pos;
             // Checking that
             // (1) Headers plus request line size does not exceed its limit
             // (2) There are enough bytes to avoid expanding the buffer when
@@ -485,11 +481,15 @@ public class InternalNioInputBuffer extends AbstractInputBuffer<NioChannel> {
             // limitation to enforce the meaning of headerBufferSize
             // From the way how buf is allocated and how blank lines are being
             // read, it should be enough to check (1) only.
-            if (end - skipBlankLinesBytes > headerBufferSize
-                    || buf.length - end < socketReadBufferSize) {
+            if (pos - skipBlankLinesBytes > headerBufferSize
+                    || buf.length - pos < socketReadBufferSize) {
                 throw new IllegalArgumentException(
                         sm.getString("iib.requestheadertoolarge.error"));
             }
+        } while ( status == HeaderParseStatus.HAVE_MORE_HEADERS );
+        if (status == HeaderParseStatus.DONE) {
+            parsingHeader = false;
+            end = pos;
             return true;
         } else {
             return false;
