Index: tc7.0.x/trunk/test/org/apache/tomcat/util/http/TestParameters.java
===================================================================
--- tc7.0.x/trunk/test/org/apache/tomcat/util/http/TestParameters.java	(revision 1195976)
+++ tc7.0.x/trunk/test/org/apache/tomcat/util/http/TestParameters.java	(revision 1195977)
@@ -21,6 +21,7 @@
 import static org.junit.Assert.assertArrayEquals;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertTrue;
 import org.junit.Test;
@@ -44,24 +45,33 @@
 
     @Test
     public void testProcessParametersByteArrayIntInt() {
-        doTestProcessParametersByteArrayIntInt(SIMPLE);
-        doTestProcessParametersByteArrayIntInt(SIMPLE_MULTIPLE);
-        doTestProcessParametersByteArrayIntInt(NO_VALUE);
-        doTestProcessParametersByteArrayIntInt(EMPTY_VALUE);
-        doTestProcessParametersByteArrayIntInt(EMPTY);
-        doTestProcessParametersByteArrayIntInt(UTF8);
-        doTestProcessParametersByteArrayIntInt(
+        doTestProcessParametersByteArrayIntInt(-1, SIMPLE);
+        doTestProcessParametersByteArrayIntInt(-1, SIMPLE_MULTIPLE);
+        doTestProcessParametersByteArrayIntInt(-1, NO_VALUE);
+        doTestProcessParametersByteArrayIntInt(-1, EMPTY_VALUE);
+        doTestProcessParametersByteArrayIntInt(-1, EMPTY);
+        doTestProcessParametersByteArrayIntInt(-1, UTF8);
+        doTestProcessParametersByteArrayIntInt(-1,
                 SIMPLE, SIMPLE_MULTIPLE, NO_VALUE, EMPTY_VALUE, EMPTY, UTF8);
-        doTestProcessParametersByteArrayIntInt(
+        doTestProcessParametersByteArrayIntInt(-1,
                 SIMPLE_MULTIPLE, NO_VALUE, EMPTY_VALUE, EMPTY, UTF8, SIMPLE);
-        doTestProcessParametersByteArrayIntInt(
+        doTestProcessParametersByteArrayIntInt(-1,
                 NO_VALUE, EMPTY_VALUE, EMPTY, UTF8, SIMPLE, SIMPLE_MULTIPLE);
-        doTestProcessParametersByteArrayIntInt(
+        doTestProcessParametersByteArrayIntInt(-1,
                 EMPTY_VALUE, EMPTY, UTF8, SIMPLE, SIMPLE_MULTIPLE, NO_VALUE);
-        doTestProcessParametersByteArrayIntInt(
+        doTestProcessParametersByteArrayIntInt(-1,
                 EMPTY, UTF8, SIMPLE, SIMPLE_MULTIPLE, NO_VALUE, EMPTY_VALUE);
-        doTestProcessParametersByteArrayIntInt(
+        doTestProcessParametersByteArrayIntInt(-1,
                 UTF8, SIMPLE, SIMPLE_MULTIPLE, NO_VALUE, EMPTY_VALUE, EMPTY);
+
+        doTestProcessParametersByteArrayIntInt(1,
+                SIMPLE, NO_VALUE, EMPTY_VALUE, UTF8);
+        doTestProcessParametersByteArrayIntInt(2,
+                SIMPLE, NO_VALUE, EMPTY_VALUE, UTF8);
+        doTestProcessParametersByteArrayIntInt(3,
+                SIMPLE, NO_VALUE, EMPTY_VALUE, UTF8);
+        doTestProcessParametersByteArrayIntInt(4,
+                SIMPLE, NO_VALUE, EMPTY_VALUE, UTF8);
     }
 
     // Make sure the inner Parameter class behaves correctly
@@ -73,7 +83,7 @@
         assertEquals("foo4=", EMPTY_VALUE.toString());
     }
 
-    private long doTestProcessParametersByteArrayIntInt(
+    private long doTestProcessParametersByteArrayIntInt(int limit,
             Parameter... parameters) {
 
         // Build the byte array
@@ -92,12 +102,19 @@
 
         Parameters p = new Parameters();
         p.setEncoding("UTF-8");
+        p.setLimit(limit);
 
         long start = System.nanoTime();
         p.processParameters(data, 0, data.length);
         long end = System.nanoTime();
 
-        validateParameters(parameters, p);
+        if (limit == -1) {
+            validateParameters(parameters, p);
+        } else {
+            Parameter[] limitParameters = new Parameter[limit];
+            System.arraycopy(parameters, 0, limitParameters, 0, limit);
+            validateParameters(limitParameters, p);
+        }
         return end - start;
     }
 
@@ -157,6 +174,73 @@
         assertEquals("value4", values[3]);
     }
 
+    @Test
+    public void testAddParametersLimit() {
+        Parameters p = new Parameters();
+
+        p.setLimit(2);
+
+        // Empty at this point
+        Enumeration<String> names = p.getParameterNames();
+        assertFalse(names.hasMoreElements());
+        String[] values = p.getParameterValues("foo1");
+        assertNull(values);
+
+        // Add a parameter
+        p.addParameter("foo1", "value1");
+
+        names = p.getParameterNames();
+        assertTrue(names.hasMoreElements());
+        assertEquals("foo1", names.nextElement());
+        assertFalse(names.hasMoreElements());
+
+        values = p.getParameterValues("foo1");
+        assertEquals(1, values.length);
+        assertEquals("value1", values[0]);
+
+        // Add another parameter
+        p.addParameter("foo2", "value2");
+
+        names = p.getParameterNames();
+        assertTrue(names.hasMoreElements());
+        assertEquals("foo2", names.nextElement());
+        assertEquals("foo1", names.nextElement());
+        assertFalse(names.hasMoreElements());
+
+        values = p.getParameterValues("foo1");
+        assertEquals(1, values.length);
+        assertEquals("value1", values[0]);
+
+        values = p.getParameterValues("foo2");
+        assertEquals(1, values.length);
+        assertEquals("value2", values[0]);
+
+        // Add another parameter
+        IllegalStateException e = null;
+        try {
+            p.addParameter("foo3", "value3");
+        } catch (IllegalStateException ise) {
+            e = ise;
+        }
+        assertNotNull(e);
+
+        // Check current parameters remain unaffected
+        names = p.getParameterNames();
+        assertTrue(names.hasMoreElements());
+        assertEquals("foo2", names.nextElement());
+        assertEquals("foo1", names.nextElement());
+        assertFalse(names.hasMoreElements());
+
+        values = p.getParameterValues("foo1");
+        assertEquals(1, values.length);
+        assertEquals("value1", values[0]);
+
+        values = p.getParameterValues("foo2");
+        assertEquals(1, values.length);
+        assertEquals("value2", values[0]);
+
+    }
+
     private void validateParameters(Parameter[] parameters, Parameters p) {
         Enumeration<String> names = p.getParameterNames();
 
Index: tc7.0.x/trunk/java/org/apache/tomcat/util/http/Parameters.java
===================================================================
--- tc7.0.x/trunk/java/org/apache/tomcat/util/http/Parameters.java	(revision 1195976)
+++ tc7.0.x/trunk/java/org/apache/tomcat/util/http/Parameters.java	(revision 1195977)
@@ -173,8 +173,19 @@
     }
 
 
-    public void addParameter( String key, String value ) {
+    public void addParameter( String key, String value )
+            throws IllegalStateException {
+
         if( key==null ) return;
+
+        parameterCount ++;
+        if (limit > -1 && parameterCount > limit) {
+            // Processing this parameter will push us over the limit. ISE is
+            // what Request.parseParts() uses for requests that are too big
+            throw new IllegalStateException(sm.getString(
+                    "parameters.maxCountFail", Integer.valueOf(limit)));
+        }
+
         ArrayList<String> values = paramHashValues.get(key);
         if (values == null) {
             values = new ArrayList<String>(1);
@@ -218,13 +229,6 @@
         int end = start + len;
 
         while(pos < end) {
-            parameterCount ++;
-
-            if (limit > -1 && parameterCount >= limit) {
-                log.warn(sm.getString("parameters.maxCountFail",
-                        Integer.valueOf(limit)));
-                break;
-            }
             int nameStart = pos;
             int nameEnd = -1;
             int valueStart = -1;
@@ -342,7 +346,14 @@
                 tmpValue.setCharset(charset);
                 value = tmpValue.toString();
 
-                addParameter(name, value);
+                try {
+                    addParameter(name, value);
+                } catch (IllegalStateException ise) {
+                    // Hitting limit stops processing further params but does
+                    // not cause request to fail.
+                    log.warn(ise.getMessage());
+                    break;
+                }
             } catch (IOException e) {
                 decodeFailCount++;
                 if (decodeFailCount == 1 || log.isDebugEnabled()) {
Index: tc7.0.x/trunk/java/org/apache/catalina/connector/LocalStrings.properties
===================================================================
--- tc7.0.x/trunk/java/org/apache/catalina/connector/LocalStrings.properties	(revision 1195976)
+++ tc7.0.x/trunk/java/org/apache/catalina/connector/LocalStrings.properties	(revision 1195977)
@@ -69,6 +69,7 @@
 coyoteRequest.uploadLocationInvalid=The temporary upload location [{0}] is not valid
 coyoteRequest.sessionEndAccessFail=Exception triggered ending access to session while recycling request
 coyoteRequest.sendfileNotCanonical=Unable to determine canonical name of file [{0}] specified for use with sendfile
+coyoteRequest.maxPostSizeExceeded=The multi-part request contained parameter data (excluding uploaded files) that exceeded the limit for maxPostSize set on the associated connector
 
 requestFacade.nullRequest=The request object has been recycled and is no longer associated with this facade
 
Index: tc7.0.x/trunk/java/org/apache/catalina/connector/Request.java
===================================================================
--- tc7.0.x/trunk/java/org/apache/catalina/connector/Request.java	(revision 1195976)
+++ tc7.0.x/trunk/java/org/apache/catalina/connector/Request.java	(revision 1195977)
@@ -24,6 +24,7 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.UnsupportedEncodingException;
+import java.nio.charset.Charset;
 import java.security.Principal;
 import java.text.SimpleDateFormat;
 import java.util.ArrayList;
@@ -2683,26 +2684,59 @@
         parts = new ArrayList<Part>();
         try {
             List<FileItem> items = upload.parseRequest(this);
+            int maxPostSize = getConnector().getMaxPostSize();
+            int postSize = 0;
+            String enc = getCharacterEncoding();
+            Charset charset = null;
+            if (enc != null) {
+                try {
+                    charset = B2CConverter.getCharset(enc);
+                } catch (UnsupportedEncodingException e) {
+                    // Ignore
+                }
+            }
             for (FileItem item : items) {
                 ApplicationPart part = new ApplicationPart(item, mce);
                 parts.add(part);
                 if (part.getFilename() == null) {
+                    String name = part.getName();
+                    String value = null;
                     try {
                         String encoding = parameters.getEncoding();
                         if (encoding == null) {
                             encoding = Parameters.DEFAULT_ENCODING;
                         }
-                        parameters.addParameter(part.getName(),
-                                part.getString(encoding));
+                        value = part.getString(encoding);
                     } catch (UnsupportedEncodingException uee) {
                         try {
-                            parameters.addParameter(part.getName(),
-                                    part.getString(
-                                            Parameters.DEFAULT_ENCODING));
+                            value = part.getString(Parameters.DEFAULT_ENCODING);
                         } catch (UnsupportedEncodingException e) {
                             // Should not be possible
                         }
                     }
+                    if (maxPostSize > 0) {
+                        // Have to calculate equivalent size. Not completely
+                        // accurate but close enough.
+                        if (charset == null) {
+                            // Name length
+                            postSize += name.getBytes().length;
+                        } else {
+                            postSize += name.getBytes(charset).length;
+                        }
+                        if (value != null) {
+                            // Equals sign
+                            postSize++;
+                            // Value length
+                            postSize += part.getSize();
+                        }
+                        // Value separator
+                        postSize++;
+                        if (postSize > maxPostSize) {
+                            throw new IllegalStateException(sm.getString(
+                                    "coyoteRequest.maxPostSizeExceeded"));
+                        }
+                    }
+                    parameters.addParameter(name, value);
                 }
             }
 
Index: tc7.0.x/trunk
===================================================================
--- tc7.0.x/trunk	(revision 1195976)
+++ tc7.0.x/trunk	(revision 1195977)

Property changes on: tc7.0.x/trunk
___________________________________________________________________
Modified: svn:mergeinfo
## -0,0 +0,1 ##
   Merged /tomcat/trunk:r1195968
