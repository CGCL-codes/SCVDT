Index: jk/trunk/native/common/jk_uri_worker_map.c
===================================================================
--- jk/trunk/native/common/jk_uri_worker_map.c	(revision 1840444)
+++ jk/trunk/native/common/jk_uri_worker_map.c	(revision 1840445)
@@ -1139,8 +1139,8 @@
         }
         vhost_len += off;
     }
-    /* Make the copy of the provided uri and strip
-     * everything after the first ';' char.
+    /* Make the copy of the provided uri, check length
+     * and look for potentially unsafe constructs
      */
     uri_len = strlen(uri);
     remain = JK_MAX_URI_LEN - vhost_len;
@@ -1152,15 +1152,11 @@
             JK_TRACE_EXIT(l);
             return NULL;
         }
-        if (uri[i] == ';')
-            break;
-        else {
-            url[i + vhost_len] = uri[i];
-            if (reject_unsafe && (uri[i] == '%' || uri[i] == '\\')) {
-                jk_log(l, JK_LOG_INFO, "Potentially unsafe request url '%s' rejected", uri);
-                JK_TRACE_EXIT(l);
-                return NULL;
-            }
+        url[i + vhost_len] = uri[i];
+        if (reject_unsafe && (uri[i] == '%' || uri[i] == '\\')) {
+            jk_log(l, JK_LOG_INFO, "Potentially unsafe request url '%s' rejected", uri);
+            JK_TRACE_EXIT(l);
+            return NULL;
         }
     }
     url[i + vhost_len] = '\0';
Index: jk/trunk/native/common/jk_util.c
===================================================================
--- jk/trunk/native/common/jk_util.c	(revision 1840444)
+++ jk/trunk/native/common/jk_util.c	(revision 1840445)
@@ -2191,8 +2191,23 @@
         return JK_NORMALIZE_BAD_PATH;
     }
 
+    /* First pass.
+     * Remove path parameters ;foo=bar/ from any path segment
+     */
+    for (l = 1, w = 1; path[l] != '\0';) {
+        if (path[l] == ';') {
+            l++;
+            while (path[l] != '/' && path[l] != '\0') {
+                l++;
+            }
+        }
+        else
+            path[w++] = path[l++];
+    }
+    path[w] = '\0';
+
     /*
-     * First pass.
+     * Second pass.
      * Collapse ///// sequences to /
      */
     for (l = 1, w = 1; path[l] != '\0';) {
@@ -2204,22 +2219,18 @@
     }
     path[w] = '\0';
 
-    /* Second pass.
-     * Remove /./ segments including those with path parameters such as
-     * /.;foo=bar/
+    /* Third pass.
+     * Remove /./ segments
      * Both leading and trailing segments will be removed.
      */
     for (l = 1, w = 1; path[l] != '\0';) {
         if (path[l] == '.' &&
-                (path[l + 1] == '/' || path[l + 1] == ';' || path[l + 1] == '\0') &&
+                (path[l + 1] == '/' || path[l + 1] == '\0') &&
                 (l == 0 || path[l - 1] == '/')) {
             l++;
-            while (path[l] != '/' && path[l] != '\0') {
+            if (path[l] == '/') {
                 l++;
             }
-            if (path[l] != '\0') {
-                l++;
-            }
         }
         else
             path[w++] = path[l++];
@@ -2226,15 +2237,14 @@
     }
     path[w] = '\0';
 
-    /* Third pass.
-     * Remove /xx/../ segments including those with path parameters such as
-     * /xxx/..;foo=bar/
+    /* Fourth pass.
+     * Remove /xx/../ segments
      * Trailing segments will be removed but leading /../ segments are an error
      * condition.
      */
     for (l = 1, w = 1; path[l] != '\0';) {
         if (path[l] == '.' && path[l + 1] == '.' &&
-                (path[l + 2] == '/' || path[l + 2] == ';' || path[l + 2] == '\0') &&
+                (path[l + 2] == '/' || path[l + 2] == '\0') &&
                 (l == 0 || path[l - 1] == '/')) {
 
             // Wind w back to remove the previous segment
@@ -2252,12 +2262,9 @@
             // Move l forward to the next segment
             l += 2;
 
-            while (path[l] != '/' && path [l] != '\0') {
+            if (path[l] == '/') {
                 l++;
             }
-            if (path[l] != '\0') {
-                l++;
-            }
         }
         else
             path[w++] = path[l++];
