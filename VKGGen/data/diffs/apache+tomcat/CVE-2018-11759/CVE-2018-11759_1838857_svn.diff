Index: jk/trunk/native/apache-2.0/mod_jk.c
===================================================================
--- jk/trunk/native/apache-2.0/mod_jk.c	(revision 1838856)
+++ jk/trunk/native/apache-2.0/mod_jk.c	(revision 1838857)
@@ -2791,7 +2791,14 @@
             }
             else {
                 rule_extension_t *e;
-                worker_name = map_uri_to_worker_ext(xconf->uw_map, r->uri,
+                char *clean_uri;
+                clean_uri = apr_pstrdup(r->pool, r->uri);
+                rc = jk_servlet_normalize(clean_uri, xconf->log);
+                if (rc != 0) {
+                	return HTTP_NOT_FOUND;
+                }
+
+                worker_name = map_uri_to_worker_ext(xconf->uw_map, clean_uri,
                                                     NULL, &e, NULL, xconf->log);
                 rconf = (jk_request_conf_t *)ap_get_module_config(r->request_config,
                                                                   &jk_module);
Index: jk/trunk/native/common/jk_uri_worker_map.c
===================================================================
--- jk/trunk/native/common/jk_uri_worker_map.c	(revision 1838856)
+++ jk/trunk/native/common/jk_uri_worker_map.c	(revision 1838857)
@@ -1175,12 +1175,6 @@
             jk_log(l, JK_LOG_DEBUG, "Found session identifier '%s' in url '%s'",
                    url_rewrite, uri);
     }
-    if (collapse_slashes == JK_COLLAPSE_ALL) {
-        /* Remove multiple slashes
-         * No need to copy url, because it is local and
-         * the unchanged url is no longer needed */
-        jk_no2slash(url);
-    }
     if (JK_IS_DEBUG_LEVEL(l))
         jk_log(l, JK_LOG_DEBUG, "Attempting to map URI '%s' from %d maps",
                url, IND_THIS(uw_map->size));
@@ -1193,13 +1187,6 @@
     /* In case we found a match, check for the unmounts. */
     if (rv >= 0 && IND_THIS(uw_map->nosize)) {
         int rc;
-        if (collapse_slashes == JK_COLLAPSE_UNMOUNT) {
-            /* Remove multiple slashes when looking for
-             * unmount to prevent trivial unmount bypass attack.
-             * No need to copy url, because it is local and
-             * the unchanged url is no longer needed */
-            jk_no2slash(url);
-        }
         /* Again first including vhost. */
         rc = is_nomatch(uw_map, url, rv, l);
         /* If no unmount was found, try without vhost. */
Index: jk/trunk/native/common/jk_util.c
===================================================================
--- jk/trunk/native/common/jk_util.c	(revision 1838856)
+++ jk/trunk/native/common/jk_util.c	(revision 1838857)
@@ -2177,25 +2177,6 @@
     return (str[x] != '\0');
 }
 
-void jk_no2slash(char *name)
-{
-    char *d, *s;
-
-    s = d = name;
-
-    while (*s) {
-        if ((*d++ = *s) == '/') {
-            do {
-                ++s;
-            } while (*s == '/');
-        }
-        else {
-            ++s;
-        }
-    }
-    *d = '\0';
-}
-
 int jk_servlet_normalize(char *path, jk_logger_t *logger)
 {
     int l, w;
Index: jk/trunk/native/common/jk_util.h
===================================================================
--- jk/trunk/native/common/jk_util.h	(revision 1838856)
+++ jk/trunk/native/common/jk_util.h	(revision 1838857)
@@ -248,8 +248,6 @@
 
 int jk_wildchar_match(const char *str, const char *exp, int icase);
 
-void jk_no2slash(char *name);
-
 int jk_servlet_normalize(char *path, jk_logger_t *logger);
 
 #define JK_NORMALIZE_BAD_PATH	-1
