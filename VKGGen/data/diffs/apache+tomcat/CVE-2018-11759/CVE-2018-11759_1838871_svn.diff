Index: jk/trunk/native/apache-2.0/mod_jk.c
===================================================================
--- jk/trunk/native/apache-2.0/mod_jk.c	(revision 1838870)
+++ jk/trunk/native/apache-2.0/mod_jk.c	(revision 1838871)
@@ -713,18 +713,6 @@
         jk_log(conf->log, JK_LOG_DEBUG, "JkOption '%s' set in server '%s'%s",
                "RejectUnsafeURI", server_name,
                JK_OPT_DEFAULT & JK_OPT_REJECTUNSAFE ? " (default)" : "");
-    if (options & JK_OPT_COLLAPSEALL)
-        jk_log(conf->log, JK_LOG_DEBUG, "JkOption '%s' set in server '%s'%s",
-               "CollapseSlashesAll", server_name,
-               JK_OPT_DEFAULT & JK_OPT_COLLAPSEALL ? " (default)" : "");
-    if (options & JK_OPT_COLLAPSENONE)
-        jk_log(conf->log, JK_LOG_DEBUG, "JkOption '%s' set in server '%s'%s",
-               "CollapseSlashesNone", server_name,
-               JK_OPT_DEFAULT & JK_OPT_COLLAPSENONE ? " (default)" : "");
-    if (options & JK_OPT_COLLAPSEUNMOUNT)
-        jk_log(conf->log, JK_LOG_DEBUG, "JkOption '%s' set in server '%s'%s",
-               "CollapseSlashesUnmount", server_name,
-               JK_OPT_DEFAULT & JK_OPT_COLLAPSEUNMOUNT ? " (default)" : "");
 }
 
 /* ========================================================================= */
@@ -2307,11 +2295,10 @@
         mask = 0;
 
         if (action == '-' &&
-            (!strncasecmp(w, "ForwardURI", strlen("ForwardURI")) ||
-             !strncasecmp(w, "CollapseSlashes", strlen("CollapseSlashes"))))
+            (!strncasecmp(w, "ForwardURI", strlen("ForwardURI")))) {
             return apr_pstrcat(cmd->pool, "JkOptions: Illegal option '-", w,
                                "': option can not be disabled", NULL);
-
+        }
         if (!strcasecmp(w, "ForwardURICompat")) {
             opt = JK_OPT_FWDURICOMPAT;
             mask = JK_OPT_FWDURIMASK;
@@ -3700,21 +3687,9 @@
                             uri_worker_map_switch(sconf->uw_map, sconf->log);
                             uri_worker_map_load(sconf->uw_map, sconf->log);
                         }
-                        switch (sconf->options & JK_OPT_COLLAPSEMASK) {
-                        case JK_OPT_COLLAPSEALL:
-                            sconf->uw_map->collapse_slashes = JK_COLLAPSE_ALL;
-                            break;
-                        case JK_OPT_COLLAPSENONE:
-                            sconf->uw_map->collapse_slashes = JK_COLLAPSE_NONE;
-                            break;
-                        case JK_OPT_COLLAPSEUNMOUNT:
-                            sconf->uw_map->collapse_slashes = JK_COLLAPSE_UNMOUNT;
-                            break;
-                        default:
+                        if (sconf->options & JK_OPT_COLLAPSEMASK) {
                             ap_log_error(APLOG_MARK, APLOG_WARNING, 0, s,
-                                         "Collapse slashes value %d ignored, setting to %d",
-                                         sconf->options & JK_OPT_COLLAPSEMASK, JK_COLLAPSE_DEFAULT);
-                            sconf->uw_map->collapse_slashes = JK_COLLAPSE_DEFAULT;
+                                         "Deprecated CollapseSlashes setting ignored");
                         }
                     }
                     else {
Index: jk/trunk/native/common/jk_global.h
===================================================================
--- jk/trunk/native/common/jk_global.h	(revision 1838870)
+++ jk/trunk/native/common/jk_global.h	(revision 1838871)
@@ -277,7 +277,7 @@
 #define JK_OPT_COLLAPSENONE         0x2000
 #define JK_OPT_COLLAPSEUNMOUNT      0x4000
 
-#define JK_OPT_DEFAULT              (JK_OPT_FWDURIDEFAULT | JK_OPT_FWDKEYSIZE | JK_OPT_COLLAPSEUNMOUNT)
+#define JK_OPT_DEFAULT              (JK_OPT_FWDURIDEFAULT | JK_OPT_FWDKEYSIZE)
 
 /* Check for EBCDIC systems */
 
Index: jk/trunk/native/common/jk_uri_worker_map.c
===================================================================
--- jk/trunk/native/common/jk_uri_worker_map.c	(revision 1838870)
+++ jk/trunk/native/common/jk_uri_worker_map.c	(revision 1838871)
@@ -176,10 +176,9 @@
         int i, off;
         if (JK_IS_DEBUG_LEVEL(l)) {
             jk_log(l, JK_LOG_DEBUG, "uri map dump %s: id=%d, index=%d file='%s' reject_unsafe=%d "
-                  "collapse_slashes=%d reload=%d modified=%d checked=%d",
+                  "reload=%d modified=%d checked=%d",
                    reason, uw_map->id, uw_map->index, STRNULL_FOR_NULL(uw_map->fname),
-                   uw_map->reject_unsafe, uw_map->collapse_slashes,
-                   uw_map->reload, uw_map->modified, uw_map->checked);
+                   uw_map->reject_unsafe, uw_map->reload, uw_map->modified, uw_map->checked);
         }
         for (i = 0; i <= 1; i++) {
             jk_log(l, JK_LOG_DEBUG, "generation %d: size=%d nosize=%d capacity=%d",
@@ -245,7 +244,6 @@
         uw_map->index = 0;
         uw_map->fname = NULL;
         uw_map->reject_unsafe = 0;
-        uw_map->collapse_slashes = JK_COLLAPSE_DEFAULT;
         uw_map->reload = JK_URIMAP_DEF_RELOAD;
         uw_map->modified = 0;
         uw_map->checked = 0;
@@ -1074,7 +1072,6 @@
     unsigned int i;
     unsigned int vhost_len;
     int reject_unsafe;
-    int collapse_slashes;
     size_t uri_len;
     size_t remain;
     int rv = -1;
@@ -1115,7 +1112,6 @@
         }
     }
     reject_unsafe = uw_map->reject_unsafe;
-    collapse_slashes = uw_map->collapse_slashes;
     vhost_len = 0;
     /*
      * In case we got a vhost, we prepend a slash
Index: jk/trunk/native/common/jk_uri_worker_map.h
===================================================================
--- jk/trunk/native/common/jk_uri_worker_map.h	(revision 1838870)
+++ jk/trunk/native/common/jk_uri_worker_map.h	(revision 1838871)
@@ -58,11 +58,6 @@
 #define MATCH_TYPE_STOPPED          0x4000
  */
 
-#define JK_COLLAPSE_ALL             0x0001
-#define JK_COLLAPSE_NONE            0x0002
-#define JK_COLLAPSE_UNMOUNT         0x0003
-#define JK_COLLAPSE_DEFAULT         JK_COLLAPSE_UNMOUNT
-
 #define SOURCE_TYPE_WORKERDEF       0x0001
 #define SOURCE_TYPE_JKMOUNT         0x0002
 #define SOURCE_TYPE_URIMAP          0x0003
@@ -172,9 +167,7 @@
 
     JK_CRIT_SEC cs;
     /* should we forward potentially unsafe URLs */
-    int reject_unsafe;    
-    /* how to handle multiple adjacent slashes in URLs */
-    int collapse_slashes;    
+    int reject_unsafe;
     /* uriworkermap filename */
     const char *fname;    
     /* uriworkermap reload check interval */
Index: jk/trunk/native/iis/jk_isapi_plugin.c
===================================================================
--- jk/trunk/native/iis/jk_isapi_plugin.c	(revision 1838870)
+++ jk/trunk/native/iis/jk_isapi_plugin.c	(revision 1838871)
@@ -133,9 +133,6 @@
 #define AUTH_COMPLETE_TAG             "auth_complete"
 #define REJECT_UNSAFE_TAG             "reject_unsafe"
 #define COLLAPSE_SLASHES_TAG          "collapse_slashes"
-#define COLLAPSE_SLASHES_ALL_VERB     "all"
-#define COLLAPSE_SLASHES_NONE_VERB    "none"
-#define COLLAPSE_SLASHES_UNMOUNT_VERB "unmount"
 #define WATCHDOG_INTERVAL_TAG         "watchdog_interval"
 #define ENABLE_CHUNKED_ENCODING_TAG   "enable_chunked_encoding"
 #define ERROR_PAGE_TAG                "error_page"
@@ -510,7 +507,6 @@
 static int  use_auth_notification_flags = 1;
 static int  chunked_encoding_enabled = JK_FALSE;
 static int  reject_unsafe = 0;
-static int  collapse_slashes = JK_COLLAPSE_DEFAULT;
 static volatile int  watchdog_interval = 0;
 static HANDLE watchdog_handle = NULL;
 static char error_page_buf[INTERNET_MAX_URL_LENGTH] = {0};
@@ -2600,7 +2596,6 @@
             uw_map->reject_unsafe = 1;
         else
             uw_map->reject_unsafe = 0;
-        uw_map->collapse_slashes = collapse_slashes;
         uw_map->reload = worker_mount_reload;
         if (worker_mount_file[0]) {
             uw_map->fname = worker_mount_file;
@@ -2730,17 +2725,6 @@
     return -1;
 }
 
-int parse_collapse_slashes(const char *collapse_slashes)
-{
-    if (!strcasecmp(collapse_slashes, COLLAPSE_SLASHES_ALL_VERB))
-        return JK_COLLAPSE_ALL;
-    if (!strcasecmp(collapse_slashes, COLLAPSE_SLASHES_NONE_VERB))
-        return JK_COLLAPSE_NONE;
-    if (!strcasecmp(collapse_slashes, COLLAPSE_SLASHES_UNMOUNT_VERB))
-        return JK_COLLAPSE_UNMOUNT;
-    return -1;
-}
-
 static int read_registry_init_data(void)
 {
     char tmpbuf[MAX_PATH];
@@ -2850,14 +2834,8 @@
         }
     }
     if (get_config_parameter(src, COLLAPSE_SLASHES_TAG, tmpbuf, sizeof(tmpbuf))) {
-        int opt = parse_collapse_slashes(tmpbuf);
-        if (opt >= 0) {
-            collapse_slashes = opt;
-        }
-        else {
-            jk_log(logger, JK_LOG_ERROR, "Invalid value '%s' for configuration item '"
-                   COLLAPSE_SLASHES_TAG "'", tmpbuf);
-        }
+		jk_log(logger, JK_LOG_ERROR, "Configuration item '" COLLAPSE_SLASHES_TAG
+				"' is deprecated and will be ignored");
     }
     shm_config_size = get_config_int(src, SHM_SIZE_TAG, -1);
     worker_mount_reload = get_config_int(src, WORKER_MOUNT_RELOAD_TAG, JK_URIMAP_DEF_RELOAD);
