Index: tc5.5.x/trunk/STATUS.txt
===================================================================
--- tc5.5.x/trunk/STATUS.txt	(revision 1158243)
+++ tc5.5.x/trunk/STATUS.txt	(revision 1158244)
@@ -94,12 +94,6 @@
        I think there is not much demand for this feature in 5.5 to justify this.
        The rest of changes and fixes are OK to backport (e.g. allow to specify port numbers).
 
-* Fix various sendfile issues. CVE-2011-2526
-  This is a port of r1145380, r1145694 and r1146005
-  http://people.apache.org/~markt/patches/2011-07-13-cve-2011-2526-tc5.patch
-  +1: markt, kfujino, kkolinko
-  -1:
-
 * Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=41179
   Return 404 rather than 400 if no ROOT context is deployed
   http://people.apache.org/~markt/patches/2011-07-22-bug41179-tc5.patch
Index: tc5.5.x/trunk/container/webapps/docs/changelog.xml
===================================================================
--- tc5.5.x/trunk/container/webapps/docs/changelog.xml	(revision 1158243)
+++ tc5.5.x/trunk/container/webapps/docs/changelog.xml	(revision 1158244)
@@ -76,6 +76,14 @@
       </fix>
     </changelog>
   </subsection>
+  <subsection name="Coyote">
+    <changelog>
+      <fix>
+        Fix CVE-2011-2526. Protect against crashes (HTTP APR) if sendfile is
+        configured to send more data than is available in the file. (markt) 
+      </fix>
+    </changelog>
+  </subsection>
   <subsection name="Jasper">
     <changelog>
       <fix>
Index: tc5.5.x/trunk/container/catalina/src/share/org/apache/catalina/servlets/DefaultServlet.java
===================================================================
--- tc5.5.x/trunk/container/catalina/src/share/org/apache/catalina/servlets/DefaultServlet.java	(revision 1158243)
+++ tc5.5.x/trunk/container/catalina/src/share/org/apache/catalina/servlets/DefaultServlet.java	(revision 1158244)
@@ -1639,7 +1639,6 @@
                 request.setAttribute("org.apache.tomcat.sendfile.start", new Long(range.start));
                 request.setAttribute("org.apache.tomcat.sendfile.end", new Long(range.end + 1));
             }
-            request.setAttribute("org.apache.tomcat.sendfile.token", this);
             return true;
         } else {
             return false;
Index: tc5.5.x/trunk/container/catalina/src/share/org/apache/catalina/connector/LocalStrings.properties
===================================================================
--- tc5.5.x/trunk/container/catalina/src/share/org/apache/catalina/connector/LocalStrings.properties	(revision 1158243)
+++ tc5.5.x/trunk/container/catalina/src/share/org/apache/catalina/connector/LocalStrings.properties	(revision 1158244)
@@ -60,6 +60,7 @@
 coyoteRequest.postTooLarge=Parameters were not parsed because the size of the posted data was too big. Use the maxPostSize attribute of the connector to resolve this if the application should accept large POSTs.
 coyoteRequest.chunkedPostTooLarge=Parameters were not parsed because the size of the posted data was too big. Because this request was a chunked request, it could not be processed further. Use the maxPostSize attribute of the connector to resolve this if the application should accept large POSTs.
 coyoteRequest.sessionEndAccessFail=Exception triggered ending access to session while recycling request
+coyoteRequest.sendfileNotCanonical=Unable to determine canonical name of file [{0}] specified for use with sendfile
 
 requestFacade.nullRequest=Null request object
 responseFacade.nullResponse=Null response object
Index: tc5.5.x/trunk/container/catalina/src/share/org/apache/catalina/connector/Request.java
===================================================================
--- tc5.5.x/trunk/container/catalina/src/share/org/apache/catalina/connector/Request.java	(revision 1158243)
+++ tc5.5.x/trunk/container/catalina/src/share/org/apache/catalina/connector/Request.java	(revision 1158244)
@@ -19,6 +19,7 @@
 package org.apache.catalina.connector;
 
 
+import java.io.File;
 import java.io.InputStream;
 import java.io.IOException;
 import java.io.BufferedReader;
@@ -1374,6 +1375,27 @@
             return;
         }
 
+        if (System.getSecurityManager() != null &&
+                name.equals("org.apache.tomcat.sendfile.filename")) {
+            // Use the canonical file name to avoid any possible symlink and
+            // relative path issues
+            String canonicalPath;
+            try {
+                canonicalPath = new File(value.toString()).getCanonicalPath();
+            } catch (IOException e) {
+                SecurityException se = new SecurityException(sm.getString(
+                        "coyoteRequest.sendfileNotCanonical", value));
+                se.initCause(e);
+                throw se;
+            }
+            // Sendfile is performed in Tomcat's security context so need to
+            // check if the web app is permitted to access the file while still
+            // in the web app's security context
+            System.getSecurityManager().checkRead(canonicalPath);
+            // Update the value so the canonical path is used
+            value = canonicalPath;
+        }
+
         Object oldValue = null;
         boolean replaced = false;
 
Index: tc5.5.x/trunk/connectors/http11/src/java/org/apache/coyote/http11/LocalStrings.properties
===================================================================
--- tc5.5.x/trunk/connectors/http11/src/java/org/apache/coyote/http11/LocalStrings.properties	(revision 1158243)
+++ tc5.5.x/trunk/connectors/http11/src/java/org/apache/coyote/http11/LocalStrings.properties	(revision 1158244)
@@ -56,6 +56,7 @@
 http11processor.socket.info=Exception getting socket information
 http11processor.socket.ssl=Exception getting SSL attributes
 http11processor.socket.timeout=Error setting socket timeout
+http11processor.sendfile.error=Error sending data using sendfile. May be caused by invalid request attributes for start/end points
 
 #
 # InternalInputBuffer
Index: tc5.5.x/trunk/connectors/http11/src/java/org/apache/coyote/http11/Http11AprProcessor.java
===================================================================
--- tc5.5.x/trunk/connectors/http11/src/java/org/apache/coyote/http11/Http11AprProcessor.java	(revision 1158243)
+++ tc5.5.x/trunk/connectors/http11/src/java/org/apache/coyote/http11/Http11AprProcessor.java	(revision 1158244)
@@ -907,7 +907,18 @@
                 sendfileData.socket = socket;
                 sendfileData.keepAlive = keepAlive;
                 if (!endpoint.getSendfile().add(sendfileData)) {
-                    openSocket = true;
+                    if (sendfileData.socket == 0) {
+                        // Didn't send all the data but the socket is no longer
+                        // set. Something went wrong. Close the connection.
+                        // Too late to set status code.
+                        if (log.isDebugEnabled()) {
+                            log.debug(sm.getString(
+                                    "http11processor.sendfile.error"));
+                        }
+                        openSocket = false;
+                    } else {
+                        openSocket = true;
+                    }
                     break;
                 }
             }
Index: tc5.5.x/trunk/connectors/util/java/org/apache/tomcat/util/net/AprEndpoint.java
===================================================================
--- tc5.5.x/trunk/connectors/util/java/org/apache/tomcat/util/net/AprEndpoint.java	(revision 1158243)
+++ tc5.5.x/trunk/connectors/util/java/org/apache/tomcat/util/net/AprEndpoint.java	(revision 1158244)
@@ -1429,7 +1429,9 @@
                                                data.pos, data.end - data.pos, 0);
                     if (nw < 0) {
                         if (!(-nw == Status.EAGAIN)) {
-                            Socket.destroy(data.socket);
+                            Pool.destroy(data.fdpool);
+                            // No need to close socket, this will be done by
+                            // calling code since data.socket == 0
                             data.socket = 0;
                             return false;
                         } else {
