Index: tc8.5.x/trunk/java/org/apache/coyote/AbstractProtocol.java
===================================================================
--- tc8.5.x/trunk/java/org/apache/coyote/AbstractProtocol.java	(revision 1788931)
+++ tc8.5.x/trunk/java/org/apache/coyote/AbstractProtocol.java	(revision 1788932)
@@ -933,10 +933,9 @@
                     wrapper.registerReadInterest();
                 } else if (state == SocketState.SENDFILE) {
                     // Sendfile in progress. If it fails, the socket will be
-                    // closed. If it works, the socket will be re-added to the
-                    // poller
-                    connections.remove(socket);
-                    release(processor);
+                    // closed. If it works, the socket either be added to the
+                    // poller (or equivalent) to await more data or processed
+                    // if there are any pipe-lined requests remaining.
                 } else if (state == SocketState.UPGRADED) {
                     // Don't add sockets back to the poller if this was a
                     // non-blocking write otherwise the poller may trigger
Index: tc8.5.x/trunk/java/org/apache/coyote/http11/Http11Processor.java
===================================================================
--- tc8.5.x/trunk/java/org/apache/coyote/http11/Http11Processor.java	(revision 1788931)
+++ tc8.5.x/trunk/java/org/apache/coyote/http11/Http11Processor.java	(revision 1788932)
@@ -58,6 +58,7 @@
 import org.apache.tomcat.util.net.AbstractEndpoint.Handler.SocketState;
 import org.apache.tomcat.util.net.SSLSupport;
 import org.apache.tomcat.util.net.SendfileDataBase;
+import org.apache.tomcat.util.net.SendfileKeepAliveState;
 import org.apache.tomcat.util.net.SendfileState;
 import org.apache.tomcat.util.net.SocketWrapperBase;
 import org.apache.tomcat.util.res.StringManager;
@@ -1612,7 +1613,15 @@
         SendfileState result = SendfileState.DONE;
         // Do sendfile as needed: add socket to sendfile and end
         if (sendfileData != null && !getErrorState().isError()) {
-            sendfileData.keepAlive = keepAlive;
+            if (keepAlive) {
+                if (available(false) == 0) {
+                    sendfileData.keepAliveState = SendfileKeepAliveState.OPEN;
+                } else {
+                    sendfileData.keepAliveState = SendfileKeepAliveState.PIPELINED;
+                }
+            } else {
+                sendfileData.keepAliveState = SendfileKeepAliveState.NONE;
+            }
             result = socketWrapper.processSendfile(sendfileData);
             switch (result) {
             case ERROR:
Index: tc8.5.x/trunk/java/org/apache/tomcat/util/net/AprEndpoint.java
===================================================================
--- tc8.5.x/trunk/java/org/apache/tomcat/util/net/AprEndpoint.java	(revision 1788931)
+++ tc8.5.x/trunk/java/org/apache/tomcat/util/net/AprEndpoint.java	(revision 1788932)
@@ -2144,21 +2144,34 @@
                             state.length -= nw;
                             if (state.length == 0) {
                                 remove(state);
-                                if (state.keepAlive) {
+                                switch (state.keepAliveState) {
+                                case NONE: {
+                                    // Close the socket since this is
+                                    // the end of the not keep-alive request.
+                                    closeSocket(state.socket);
+                                    break;
+                                }
+                                case PIPELINED: {
                                     // Destroy file descriptor pool, which should close the file
                                     Pool.destroy(state.fdpool);
-                                    Socket.timeoutSet(state.socket,
-                                            getSoTimeout() * 1000);
-                                    // If all done put the socket back in the
-                                    // poller for processing of further requests
-                                    getPoller().add(
-                                            state.socket, getKeepAliveTimeout(),
+                                    Socket.timeoutSet(state.socket, getSoTimeout() * 1000);
+                                    // Process the pipelined request data
+                                    if (!processSocket(state.socket, SocketEvent.OPEN_READ)) {
+                                        closeSocket(state.socket);
+                                    }
+                                    break;
+                                }
+                                case OPEN: {
+                                    // Destroy file descriptor pool, which should close the file
+                                    Pool.destroy(state.fdpool);
+                                    Socket.timeoutSet(state.socket, getSoTimeout() * 1000);
+                                    // Put the socket back in the poller for
+                                    // processing of further requests
+                                    getPoller().add(state.socket, getKeepAliveTimeout(),
                                             Poll.APR_POLLIN);
-                                } else {
-                                    // Close the socket since this is
-                                    // the end of not keep-alive request.
-                                    closeSocket(state.socket);
+                                    break;
                                 }
+                                }
                             }
                         }
                     } else if (rv < 0) {
Index: tc8.5.x/trunk/java/org/apache/tomcat/util/net/Nio2Endpoint.java
===================================================================
--- tc8.5.x/trunk/java/org/apache/tomcat/util/net/Nio2Endpoint.java	(revision 1788931)
+++ tc8.5.x/trunk/java/org/apache/tomcat/util/net/Nio2Endpoint.java	(revision 1788932)
@@ -536,17 +536,24 @@
                         } catch (IOException e) {
                             // Ignore
                         }
-                        if (attachment.keepAlive) {
-                            if (!isInline()) {
+                        if (isInline()) {
+                            attachment.doneInline = true;
+                        } else {
+                            switch (attachment.keepAliveState) {
+                            case NONE: {
+                                getEndpoint().processSocket(Nio2SocketWrapper.this,
+                                        SocketEvent.DISCONNECT, false);
+                                break;
+                            }
+                            case PIPELINED: {
+                                getEndpoint().processSocket(Nio2SocketWrapper.this,
+                                        SocketEvent.OPEN_READ, true);
+                                break;
+                            }
+                            case OPEN: {
                                 awaitBytes();
-                            } else {
-                                attachment.doneInline = true;
+                                break;
                             }
-                        } else {
-                            if (!isInline()) {
-                                getEndpoint().processSocket(Nio2SocketWrapper.this, SocketEvent.DISCONNECT, false);
-                            } else {
-                                attachment.doneInline = true;
                             }
                         }
                         return;
Index: tc8.5.x/trunk/java/org/apache/tomcat/util/net/NioEndpoint.java
===================================================================
--- tc8.5.x/trunk/java/org/apache/tomcat/util/net/NioEndpoint.java	(revision 1788931)
+++ tc8.5.x/trunk/java/org/apache/tomcat/util/net/NioEndpoint.java	(revision 1788932)
@@ -924,17 +924,31 @@
                     // responsible for registering the socket for the
                     // appropriate event(s) if sendfile completes.
                     if (!calledByProcessor) {
-                        if (sd.keepAlive) {
+                        switch (sd.keepAliveState) {
+                        case NONE: {
                             if (log.isDebugEnabled()) {
-                                log.debug("Connection is keep alive, registering back for OP_READ");
-                            }
-                            reg(sk,socketWrapper,SelectionKey.OP_READ);
-                        } else {
-                            if (log.isDebugEnabled()) {
                                 log.debug("Send file connection is being closed");
                             }
                             close(sc, sk);
+                            break;
                         }
+                        case PIPELINED: {
+                            if (log.isDebugEnabled()) {
+                                log.debug("Connection is keep alive, processing pipe-lined data");
+                            }
+                            if (!processSocket(socketWrapper, SocketEvent.OPEN_READ, true)) {
+                                close(sc, sk);
+                            }
+                            break;
+                        }
+                        case OPEN: {
+                            if (log.isDebugEnabled()) {
+                                log.debug("Connection is keep alive, registering back for OP_READ");
+                            }
+                            reg(sk,socketWrapper,SelectionKey.OP_READ);
+                            break;
+                        }
+                        }
                     }
                     return SendfileState.DONE;
                 } else {
Index: tc8.5.x/trunk/java/org/apache/tomcat/util/net/SendfileDataBase.java
===================================================================
--- tc8.5.x/trunk/java/org/apache/tomcat/util/net/SendfileDataBase.java	(revision 1788931)
+++ tc8.5.x/trunk/java/org/apache/tomcat/util/net/SendfileDataBase.java	(revision 1788932)
@@ -21,10 +21,10 @@
     /**
      * Is the current request being processed on a keep-alive connection? This
      * determines if the socket is closed once the send file completes or if
-     * processing continues with the next request on the connection (or waiting
-     * for that next request to arrive).
+     * processing continues with the next request on the connection or waiting
+     * for that next request to arrive.
      */
-    public boolean keepAlive;
+    public SendfileKeepAliveState keepAliveState = SendfileKeepAliveState.NONE;
 
     /**
      * The full path to the file that contains the data to be written to the
Index: tc8.5.x/trunk/java/org/apache/tomcat/util/net/SendfileKeepAliveState.java
===================================================================
--- tc8.5.x/trunk/java/org/apache/tomcat/util/net/SendfileKeepAliveState.java	(nonexistent)
+++ tc8.5.x/trunk/java/org/apache/tomcat/util/net/SendfileKeepAliveState.java	(revision 1788932)
@@ -0,0 +1,39 @@
+/*
+ *  Licensed to the Apache Software Foundation (ASF) under one or more
+ *  contributor license agreements.  See the NOTICE file distributed with
+ *  this work for additional information regarding copyright ownership.
+ *  The ASF licenses this file to You under the Apache License, Version 2.0
+ *  (the "License"); you may not use this file except in compliance with
+ *  the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.apache.tomcat.util.net;
+
+public enum SendfileKeepAliveState {
+
+    /**
+     * Keep-alive is not in use. The socket can be closed when the response has
+     * been written.
+     */
+    NONE,
+
+    /**
+     * Keep-alive is in use and there is pipelined data in the input buffer to
+     * be read as soon as the current response has been written.
+     */
+    PIPELINED,
+
+    /**
+     * Keep-alive is in use. The socket should be added to the poller (or
+     * equivalent) to await more data as soon as the current response has been
+     * written.
+     */
+    OPEN
+}

Property changes on: tc8.5.x/trunk/java/org/apache/tomcat/util/net/SendfileKeepAliveState.java
___________________________________________________________________
Added: svn:eol-style
## -0,0 +1 ##
+native
\ No newline at end of property
Index: tc8.5.x/trunk/webapps/docs/changelog.xml
===================================================================
--- tc8.5.x/trunk/webapps/docs/changelog.xml	(revision 1788931)
+++ tc8.5.x/trunk/webapps/docs/changelog.xml	(revision 1788932)
@@ -127,6 +127,9 @@
         subsequent requests experiencing an <code>IllegalStateException</code>.
         (markt)
       </fix>
+      <fix>
+        Improve sendfile handling when requests are pipelined. (markt)
+      </fix>
     </changelog>
   </subsection>
   <subsection name="Jasper">
Index: tc8.5.x/trunk
===================================================================
--- tc8.5.x/trunk	(revision 1788931)
+++ tc8.5.x/trunk	(revision 1788932)

Property changes on: tc8.5.x/trunk
___________________________________________________________________
Modified: svn:mergeinfo
## -0,0 +0,1 ##
   Merged /tomcat/trunk:r1788890
