Index: tc6.0.x/trunk/java/org/apache/coyote/http11/Http11AprProcessor.java
===================================================================
--- tc6.0.x/trunk/java/org/apache/coyote/http11/Http11AprProcessor.java	(revision 1789023)
+++ tc6.0.x/trunk/java/org/apache/coyote/http11/Http11AprProcessor.java	(revision 1789024)
@@ -53,6 +53,7 @@
 import org.apache.tomcat.util.http.FastHttpDateFormat;
 import org.apache.tomcat.util.http.MimeHeaders;
 import org.apache.tomcat.util.net.AprEndpoint;
+import org.apache.tomcat.util.net.SendfileKeepAliveState;
 import org.apache.tomcat.util.net.SocketStatus;
 import org.apache.tomcat.util.net.AprEndpoint.Handler.SocketState;
 import org.apache.tomcat.util.res.StringManager;
@@ -333,7 +334,7 @@
 
     private int maxCookieCount = 200;
 
-    
+
     // ------------------------------------------------------------- Properties
 
     public String getClientCertProvider() { return clientCertProvider; }
@@ -920,7 +921,15 @@
             // Do sendfile as needed: add socket to sendfile and end
             if (sendfileData != null && !error) {
                 sendfileData.socket = socket;
-                sendfileData.keepAlive = keepAlive;
+                if (keepAlive) {
+                    if (inputBuffer.available() == 0) {
+                        sendfileData.keepAliveState = SendfileKeepAliveState.OPEN;
+                    } else {
+                        sendfileData.keepAliveState = SendfileKeepAliveState.PIPELINED;
+                    }
+                } else {
+                    sendfileData.keepAliveState = SendfileKeepAliveState.NONE;
+                }
                 if (!endpoint.getSendfile().add(sendfileData)) {
                     if (sendfileData.socket == 0) {
                         // Didn't send all the data but the socket is no longer
Index: tc6.0.x/trunk/java/org/apache/coyote/http11/Http11NioProcessor.java
===================================================================
--- tc6.0.x/trunk/java/org/apache/coyote/http11/Http11NioProcessor.java	(revision 1789023)
+++ tc6.0.x/trunk/java/org/apache/coyote/http11/Http11NioProcessor.java	(revision 1789024)
@@ -49,6 +49,7 @@
 import org.apache.tomcat.util.net.NioChannel;
 import org.apache.tomcat.util.net.NioEndpoint;
 import org.apache.tomcat.util.net.SSLSupport;
+import org.apache.tomcat.util.net.SendfileKeepAliveState;
 import org.apache.tomcat.util.net.SocketStatus;
 import org.apache.tomcat.util.net.NioEndpoint.Handler.SocketState;
 import org.apache.tomcat.util.res.StringManager;
@@ -968,7 +969,15 @@
         if (sendfileData != null && !error) {
             KeyAttachment ka = (KeyAttachment)socket.getAttachment(false);
             ka.setSendfileData(sendfileData);
-            sendfileData.keepAlive = keepAlive;
+            if (keepAlive) {
+                if (inputBuffer.available() == 0) {
+                    sendfileData.keepAliveState = SendfileKeepAliveState.OPEN;
+                } else {
+                    sendfileData.keepAliveState = SendfileKeepAliveState.PIPELINED;
+                }
+            } else {
+                sendfileData.keepAliveState = SendfileKeepAliveState.NONE;
+            }
             SelectionKey key = socket.getIOChannel().keyFor(socket.getPoller().getSelector());
             //do the first write on this thread, might as well
             switch (socket.getPoller().processSendfile(key, ka, true)) {
Index: tc6.0.x/trunk/java/org/apache/coyote/http11/Http11NioProtocol.java
===================================================================
--- tc6.0.x/trunk/java/org/apache/coyote/http11/Http11NioProtocol.java	(revision 1789023)
+++ tc6.0.x/trunk/java/org/apache/coyote/http11/Http11NioProtocol.java	(revision 1789024)
@@ -766,10 +766,9 @@
                     socket.getPoller().add(socket);
                 } else if (state == SocketState.SENDFILE) {
                     // Sendfile in progress. If it fails, the socket will be
-                    // closed. If it works, the socket will be re-added to the
-                    // poller
-                    connections.remove(socket);
-                    release(socket, processor);
+                    // closed. If it works, the socket either be added to the
+                    // poller to await more data or processed if there are any
+                    // pipe-lined requests remaining.
                 } else {
                     // Connection closed. OK to recycle the processor.
                     release(socket, processor);
Index: tc6.0.x/trunk/java/org/apache/tomcat/util/net/AprEndpoint.java
===================================================================
--- tc6.0.x/trunk/java/org/apache/tomcat/util/net/AprEndpoint.java	(revision 1789023)
+++ tc6.0.x/trunk/java/org/apache/tomcat/util/net/AprEndpoint.java	(revision 1789024)
@@ -661,7 +661,7 @@
             throw new IllegalStateException(
                     sm.getString("endpoint.apr.previousInitFailed"));
         }
-        
+
         // Create the root APR memory pool
         rootPool = Pool.create(0);
         // Create the pool for the server socket
@@ -1823,7 +1823,7 @@
         // Position
         public long pos;
         // KeepAlive flag
-        public boolean keepAlive;
+        public SendfileKeepAliveState keepAliveState = SendfileKeepAliveState.NONE;
     }
 
 
@@ -2070,18 +2070,33 @@
                             state.pos = state.pos + nw;
                             if (state.pos >= state.end) {
                                 remove(state);
-                                if (state.keepAlive) {
+                                switch (state.keepAliveState) {
+                                case NONE: {
+                                    // Close the socket since this is
+                                    // the end of the not keep-alive request.
+                                    destroySocket(state.socket);
+                                    break;
+                                }
+                                case PIPELINED: {
                                     // Destroy file descriptor pool, which should close the file
                                     Pool.destroy(state.fdpool);
                                     Socket.timeoutSet(state.socket, soTimeout * 1000);
-                                    // If all done put the socket back in the poller for
+                                    // Process the pipelined request data
+                                    if (!processSocket(state.socket, SocketStatus.OPEN)) {
+                                        destroySocket(state.socket);
+                                    }
+                                    break;
+                                }
+                                case OPEN: {
+                                    // Destroy file descriptor pool, which should close the file
+                                    Pool.destroy(state.fdpool);
+                                    Socket.timeoutSet(state.socket, soTimeout * 1000);
+                                    // Put the socket back in the poller for
                                     // processing of further requests
                                     getPoller().add(state.socket);
-                                } else {
-                                    // Close the socket since this is
-                                    // the end of not keep-alive request.
-                                    destroySocket(state.socket);
+                                    break;
                                 }
+                                }
                             }
                         }
                     } else if (rv < 0) {
Index: tc6.0.x/trunk/java/org/apache/tomcat/util/net/NioEndpoint.java
===================================================================
--- tc6.0.x/trunk/java/org/apache/tomcat/util/net/NioEndpoint.java	(revision 1789023)
+++ tc6.0.x/trunk/java/org/apache/tomcat/util/net/NioEndpoint.java	(revision 1789024)
@@ -1842,17 +1842,31 @@
                     // responsible for registering the socket for the
                     // appropriate event(s) if sendfile completes.
                     if (!calledByProcessor) {
-                        if ( sd.keepAlive ) {
+                        switch (sd.keepAliveState) {
+                        case NONE: {
                             if (log.isDebugEnabled()) {
-                                log.debug("Connection is keep alive, registering back for OP_READ");
-                            }
-                            reg(sk,attachment,SelectionKey.OP_READ);
-                        } else {
-                            if (log.isDebugEnabled()) {
                                 log.debug("Send file connection is being closed");
                             }
                             cancelledKey(sk,SocketStatus.STOP,false);
+                            break;
                         }
+                        case PIPELINED: {
+                            if (log.isDebugEnabled()) {
+                                log.debug("Connection is keep alive, processing pipe-lined data");
+                            }
+                            if (!processSocket(sc, SocketStatus.OPEN, true)) {
+                                cancelledKey(sk, SocketStatus.DISCONNECT, false);
+                            }
+                            break;
+                        }
+                        case OPEN: {
+                            if (log.isDebugEnabled()) {
+                                log.debug("Connection is keep alive, registering back for OP_READ");
+                            }
+                            reg(sk, attachment, SelectionKey.OP_READ);
+                            break;
+                        }
+                        }
                     }
                     return SendfileState.DONE;
                 } else {
@@ -2520,7 +2534,7 @@
         public long pos;
         public long length;
         // KeepAlive flag
-        public boolean keepAlive;
+        public SendfileKeepAliveState keepAliveState = SendfileKeepAliveState.NONE;
     }
 
 }
Index: tc6.0.x/trunk/java/org/apache/tomcat/util/net/SendfileKeepAliveState.java
===================================================================
--- tc6.0.x/trunk/java/org/apache/tomcat/util/net/SendfileKeepAliveState.java	(nonexistent)
+++ tc6.0.x/trunk/java/org/apache/tomcat/util/net/SendfileKeepAliveState.java	(revision 1789024)
@@ -0,0 +1,39 @@
+/*
+ *  Licensed to the Apache Software Foundation (ASF) under one or more
+ *  contributor license agreements.  See the NOTICE file distributed with
+ *  this work for additional information regarding copyright ownership.
+ *  The ASF licenses this file to You under the Apache License, Version 2.0
+ *  (the "License"); you may not use this file except in compliance with
+ *  the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.apache.tomcat.util.net;
+
+public enum SendfileKeepAliveState {
+
+    /**
+     * Keep-alive is not in use. The socket can be closed when the response has
+     * been written.
+     */
+    NONE,
+
+    /**
+     * Keep-alive is in use and there is pipelined data in the input buffer to
+     * be read as soon as the current response has been written.
+     */
+    PIPELINED,
+
+    /**
+     * Keep-alive is in use. The socket should be added to the poller (or
+     * equivalent) to await more data as soon as the current response has been
+     * written.
+     */
+    OPEN
+}

Property changes on: tc6.0.x/trunk/java/org/apache/tomcat/util/net/SendfileKeepAliveState.java
___________________________________________________________________
Added: svn:eol-style
## -0,0 +1 ##
+native
\ No newline at end of property
Index: tc6.0.x/trunk/webapps/docs/changelog.xml
===================================================================
--- tc6.0.x/trunk/webapps/docs/changelog.xml	(revision 1789023)
+++ tc6.0.x/trunk/webapps/docs/changelog.xml	(revision 1789024)
@@ -45,6 +45,13 @@
  General, Catalina, Coyote, Jasper, Cluster, Web applications, Other
 -->
 <section name="Tomcat 6.0.52 (violetagg)">
+  <subsection name="Coyote">
+    <changelog>
+      <fix>
+        Improve sendfile handling when requests are pipelined. (markt)
+      </fix>
+    </changelog>
+  </subsection>
 </section>
 <section name="Tomcat 6.0.51 (violetagg)" rtext="released 2017-03-16">
   <subsection name="Jasper">
Index: tc6.0.x/trunk
===================================================================
--- tc6.0.x/trunk	(revision 1789023)
+++ tc6.0.x/trunk	(revision 1789024)

Property changes on: tc6.0.x/trunk
___________________________________________________________________
Modified: svn:mergeinfo
## -0,0 +0,2 ##
   Merged /tomcat/tc7.0.x/trunk:r1789008
   Merged /tomcat/tc8.0.x/trunk:r1788999
