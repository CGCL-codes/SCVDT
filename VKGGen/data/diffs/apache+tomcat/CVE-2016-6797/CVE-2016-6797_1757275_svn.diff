Index: tc7.0.x/trunk/java/org/apache/catalina/core/NamingContextListener.java
===================================================================
--- tc7.0.x/trunk/java/org/apache/catalina/core/NamingContextListener.java	(revision 1757274)
+++ tc7.0.x/trunk/java/org/apache/catalina/core/NamingContextListener.java	(revision 1757275)
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -41,6 +41,7 @@
 import org.apache.catalina.ContainerEvent;
 import org.apache.catalina.ContainerListener;
 import org.apache.catalina.Context;
+import org.apache.catalina.Engine;
 import org.apache.catalina.Host;
 import org.apache.catalina.Lifecycle;
 import org.apache.catalina.LifecycleEvent;
@@ -68,6 +69,7 @@
 import org.apache.naming.ResourceRef;
 import org.apache.naming.ServiceRef;
 import org.apache.naming.TransactionRef;
+import org.apache.naming.factory.ResourceLinkFactory;
 import org.apache.tomcat.util.modeler.Registry;
 import org.apache.tomcat.util.res.StringManager;
 
@@ -88,8 +90,8 @@
 
 
     protected Log logger = log;
-    
-    
+
+
     /**
      * Name of the associated naming context.
      */
@@ -131,14 +133,14 @@
      */
     protected javax.naming.Context envCtx = null;
 
-    
+
     /**
      * Objectnames hashtable.
      */
     protected HashMap<String, ObjectName> objectNames =
         new HashMap<String, ObjectName>();
-    
 
+
     /**
      * Determines if an attempt to write to a read-only context results in an
      * exception or if the request is ignored.
@@ -192,7 +194,7 @@
         this.name = name;
     }
 
-    
+
     /**
      * Return the comp context.
      */
@@ -200,8 +202,8 @@
     public javax.naming.Context getCompContext() {
         return this.compCtx;
     }
-    
 
+
     /**
      * Return the env context.
      */
@@ -208,8 +210,8 @@
     public javax.naming.Context getEnvContext() {
         return this.envCtx;
     }
-    
 
+
     /**
      * Return the associated naming context.
      */
@@ -282,7 +284,7 @@
                     ContextAccessController.setReadOnly(getName());
                     try {
                         ContextBindings.bindClassLoader
-                        (container, container, 
+                        (container, container,
                                 ((Container) container).getLoader().getClassLoader());
                     } catch (NamingException e) {
                         logger.error(sm.getString("naming.bindFailed", e));
@@ -294,7 +296,7 @@
                     (namingContext);
                     try {
                         ContextBindings.bindClassLoader
-                        (container, container, 
+                        (container, container,
                                 this.getClass().getClassLoader());
                     } catch (NamingException e) {
                         logger.error(sm.getString("naming.bindFailed", e));
@@ -322,7 +324,7 @@
 
                 if (container instanceof Context) {
                     ContextBindings.unbindClassLoader
-                    (container, container, 
+                    (container, container,
                             ((Container) container).getLoader().getClassLoader());
                 }
 
@@ -329,7 +331,7 @@
                 if (container instanceof Server) {
                     namingResources.removePropertyChangeListener(this);
                     ContextBindings.unbindClassLoader
-                    (container, container, 
+                    (container, container,
                             this.getClass().getClassLoader());
                 }
 
@@ -344,6 +346,11 @@
                         registry.unregisterComponent(objectName);
                     }
                 }
+
+                javax.naming.Context global = getGlobalNamingContext();
+                if (global != null) {
+                    ResourceLinkFactory.deregisterGlobalResourceAccess(global);
+                }
             } finally {
                 objectNames.clear();
 
@@ -391,7 +398,7 @@
 
             String environmentName = (String) event.getData();
             if (environmentName != null) {
-                ContextEnvironment env = 
+                ContextEnvironment env =
                     namingResources.findEnvironment(environmentName);
                 addEnvironment(env);
             }
@@ -400,7 +407,7 @@
 
             String localEjbName = (String) event.getData();
             if (localEjbName != null) {
-                ContextLocalEjb localEjb = 
+                ContextLocalEjb localEjb =
                     namingResources.findLocalEjb(localEjbName);
                 addLocalEjb(localEjb);
             }
@@ -409,7 +416,7 @@
 
             String resourceName = (String) event.getData();
             if (resourceName != null) {
-                ContextResource resource = 
+                ContextResource resource =
                     namingResources.findResource(resourceName);
                 addResource(resource);
             }
@@ -418,7 +425,7 @@
 
             String resourceLinkName = (String) event.getData();
             if (resourceLinkName != null) {
-                ContextResourceLink resourceLink = 
+                ContextResourceLink resourceLink =
                     namingResources.findResourceLink(resourceLinkName);
                 addResourceLink(resourceLink);
             }
@@ -427,7 +434,7 @@
 
             String resourceEnvRefName = (String) event.getData();
             if (resourceEnvRefName != null) {
-                ContextResourceEnvRef resourceEnvRef = 
+                ContextResourceEnvRef resourceEnvRef =
                     namingResources.findResourceEnvRef(resourceEnvRefName);
                 addResourceEnvRef(resourceEnvRef);
             }
@@ -436,7 +443,7 @@
 
             String serviceName = (String) event.getData();
             if (serviceName != null) {
-                ContextService service = 
+                ContextService service =
                     namingResources.findService(serviceName);
                 addService(service);
             }
@@ -599,7 +606,7 @@
             }
         } else if (name.equals("resourceEnvRef")) {
             if (oldValue != null) {
-                ContextResourceEnvRef resourceEnvRef = 
+                ContextResourceEnvRef resourceEnvRef =
                     (ContextResourceEnvRef) oldValue;
                 if (resourceEnvRef.getName() != null) {
                     removeResourceEnvRef(resourceEnvRef.getName());
@@ -606,7 +613,7 @@
                 }
             }
             if (newValue != null) {
-                ContextResourceEnvRef resourceEnvRef = 
+                ContextResourceEnvRef resourceEnvRef =
                     (ContextResourceEnvRef) newValue;
                 if (resourceEnvRef.getName() != null) {
                     addResourceEnvRef(resourceEnvRef);
@@ -670,7 +677,7 @@
         }
 
         // Resource links
-        ContextResourceLink[] resourceLinks = 
+        ContextResourceLink[] resourceLinks =
             namingResources.findResourceLinks();
         for (i = 0; i < resourceLinks.length; i++) {
             addResourceLink(resourceLinks[i]);
@@ -689,7 +696,7 @@
         }
 
         // Environment entries
-        ContextEnvironment[] contextEnvironments = 
+        ContextEnvironment[] contextEnvironments =
             namingResources.findEnvironments();
         for (i = 0; i < contextEnvironments.length; i++) {
             addEnvironment(contextEnvironments[i]);
@@ -723,7 +730,7 @@
                     }
                 }
             } catch (NameAlreadyBoundException e) {
-                // Ignore because UserTransaction was obviously 
+                // Ignore because UserTransaction was obviously
                 // added via ResourceLink
             } catch (NamingException e) {
                 logger.error(sm.getString("naming.bindFailed", e));
@@ -733,7 +740,7 @@
         // Binding the resources directory context
         if (container instanceof Context) {
             try {
-                compCtx.bind("Resources", 
+                compCtx.bind("Resources",
                              ((Container) container).getResources());
             } catch (NamingException e) {
                 logger.error(sm.getString("naming.bindFailed", e));
@@ -763,30 +770,30 @@
         if (domain == null) {
             domain = "Catalina";
         }
-        
+
         ObjectName name = null;
         String quotedResourceName = ObjectName.quote(resource.getName());
-        if (container instanceof Server) {        
+        if (container instanceof Server) {
             name = new ObjectName(domain + ":type=DataSource" +
-                        ",class=" + resource.getType() + 
+                        ",class=" + resource.getType() +
                         ",name=" + quotedResourceName);
-        } else if (container instanceof Context) {                    
+        } else if (container instanceof Context) {
             String contextName = ((Context)container).getName();
             if (!contextName.startsWith("/"))
                 contextName = "/" + contextName;
             Host host = (Host) ((Context)container).getParent();
             name = new ObjectName(domain + ":type=DataSource" +
-                        ",context=" + contextName + 
+                        ",context=" + contextName +
                         ",host=" + host.getName() +
                         ",class=" + resource.getType() +
                         ",name=" + quotedResourceName);
         }
-        
+
         return (name);
 
     }
 
-    
+
     /**
      * Set the specified EJBs in the naming context.
      */
@@ -964,7 +971,7 @@
                     wsdlURL = ((Context) container).
                                                     getServletContext().
                                                     getResource("/" + service.getWsdlfile());
-                    logger.debug("  Changing service ref wsdl file for /" 
+                    logger.debug("  Changing service ref wsdl file for /"
                                 + service.getWsdlfile());
                 } catch (MalformedURLException e) {
                     logger.error(sm.getString("naming.wsdlFailed", e));
@@ -998,7 +1005,7 @@
                     jaxrpcURL = ((Context) container).
                                                     getServletContext().
                                                     getResource("/" + service.getJaxrpcmappingfile());
-                    logger.debug("  Changing service ref jaxrpc file for /" 
+                    logger.debug("  Changing service ref jaxrpc file for /"
                                 + service.getJaxrpcmappingfile());
                 } catch (MalformedURLException e) {
                     logger.error(sm.getString("naming.wsdlFailed", e));
@@ -1055,7 +1062,7 @@
 
         try {
             if (logger.isDebugEnabled()) {
-                logger.debug("  Adding service ref " 
+                logger.debug("  Adding service ref "
                              + service.getName() + "  " + ref);
             }
             createSubcontexts(envCtx, service.getName());
@@ -1087,7 +1094,7 @@
         }
         try {
             if (logger.isDebugEnabled()) {
-                logger.debug("  Adding resource ref " 
+                logger.debug("  Adding resource ref "
                              + resource.getName() + "  " + ref);
             }
             createSubcontexts(envCtx, resource.getName());
@@ -1107,7 +1114,7 @@
                 logger.warn(sm.getString("naming.jmxRegistrationFailed", e));
             }
         }
-        
+
     }
 
 
@@ -1155,8 +1162,8 @@
                 ref.add(refAddr);
             }
         }
-        javax.naming.Context ctx = 
-            "UserTransaction".equals(resourceLink.getName()) 
+        javax.naming.Context ctx =
+            "UserTransaction".equals(resourceLink.getName())
             ? compCtx : envCtx;
         try {
             if (logger.isDebugEnabled())
@@ -1167,9 +1174,20 @@
             logger.error(sm.getString("naming.bindFailed", e));
         }
 
+        ResourceLinkFactory.registerGlobalResourceAccess(
+                getGlobalNamingContext(), resourceLink.getName(), resourceLink.getGlobal());
     }
 
 
+    private javax.naming.Context getGlobalNamingContext() {
+        if (container instanceof Context) {
+            Engine e = (Engine) ((Context) container).getParent().getParent();
+            return e.getService().getServer().getGlobalNamingContext();
+        }
+        return null;
+    }
+
+
     /**
      * Set the specified EJBs in the naming context.
      */
@@ -1270,6 +1288,7 @@
             logger.error(sm.getString("naming.unbindFailed", e));
         }
 
+        ResourceLinkFactory.deregisterGlobalResourceAccess(getGlobalNamingContext(), name);
     }
 
 
Index: tc7.0.x/trunk/java/org/apache/naming/factory/ResourceLinkFactory.java
===================================================================
--- tc7.0.x/trunk/java/org/apache/naming/factory/ResourceLinkFactory.java	(revision 1757274)
+++ tc7.0.x/trunk/java/org/apache/naming/factory/ResourceLinkFactory.java	(revision 1757275)
@@ -5,18 +5,21 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- */ 
+ */
 package org.apache.naming.factory;
 
+import java.util.HashMap;
 import java.util.Hashtable;
+import java.util.Map;
+import java.util.concurrent.ConcurrentHashMap;
 
 import javax.naming.Context;
 import javax.naming.Name;
@@ -29,7 +32,7 @@
 
 /**
  * <p>Object factory for resource links.</p>
- * 
+ *
  * @author Remy Maucherat
  */
 public class ResourceLinkFactory implements ObjectFactory {
@@ -41,12 +44,14 @@
      */
     private static Context globalContext = null;
 
+    private static Map<ClassLoader,Map<String,String>> globalResourceRegistrations =
+            new ConcurrentHashMap<ClassLoader,Map<String,String>>();
 
     // --------------------------------------------------------- Public Methods
 
     /**
      * Set the global context (note: can only be used once).
-     * 
+     *
      * @param newGlobalContext new global context value
      */
     public static void setGlobalContext(Context newGlobalContext) {
@@ -59,17 +64,67 @@
     }
 
 
+    public static void registerGlobalResourceAccess(Context globalContext, String localName,
+            String globalName) {
+        validateGlobalContext(globalContext);
+        ClassLoader cl = Thread.currentThread().getContextClassLoader();
+        Map<String,String> registrations = globalResourceRegistrations.get(cl);
+        if (registrations == null) {
+            // Web application initialization is single threaded so this is
+            // safe.
+            registrations = new HashMap<String,String>();
+            globalResourceRegistrations.put(cl, registrations);
+        }
+        registrations.put(localName, globalName);
+    }
+
+
+    public static void deregisterGlobalResourceAccess(Context globalContext, String localName) {
+        validateGlobalContext(globalContext);
+        ClassLoader cl = Thread.currentThread().getContextClassLoader();
+        Map<String,String> registrations = globalResourceRegistrations.get(cl);
+        if (registrations != null) {
+            registrations.remove(localName);
+        }
+    }
+
+
+    public static void deregisterGlobalResourceAccess(Context globalContext) {
+        validateGlobalContext(globalContext);
+        ClassLoader cl = Thread.currentThread().getContextClassLoader();
+        globalResourceRegistrations.remove(cl);
+    }
+
+
+    private static void validateGlobalContext(Context globalContext) {
+        if (ResourceLinkFactory.globalContext != null &&
+                ResourceLinkFactory.globalContext != globalContext) {
+            throw new SecurityException("Caller provided invalid global context");
+        }
+    }
+
+
+    private static boolean validateGlobalResourceAccess(String globalName) {
+        ClassLoader cl = Thread.currentThread().getContextClassLoader();
+        Map<String,String> registrations = globalResourceRegistrations.get(cl);
+        if (registrations != null && registrations.containsValue(globalName)) {
+            return true;
+        }
+        return false;
+    }
+
+
     // -------------------------------------------------- ObjectFactory Methods
 
     /**
      * Create a new DataSource instance.
-     * 
+     *
      * @param obj The reference object describing the DataSource
      */
     @Override
     public Object getObjectInstance(Object obj, Name name, Context nameCtx,
             Hashtable<?,?> environment) throws NamingException {
-        
+
         if (!(obj instanceof ResourceLinkRef)) {
             return null;
         }
@@ -82,6 +137,12 @@
         RefAddr refAddr = ref.get(ResourceLinkRef.GLOBALNAME);
         if (refAddr != null) {
             globalName = refAddr.getContent().toString();
+            // When running under a security manager confirm that the current
+            // web application has really been configured to access the specified
+            // global resource
+            if (!validateGlobalResourceAccess(globalName)) {
+                return null;
+            }
             Object result = null;
             result = globalContext.lookup(globalName);
             // Check the expected type
Index: tc7.0.x/trunk/test/org/apache/naming/TestNamingContext.java
===================================================================
--- tc7.0.x/trunk/test/org/apache/naming/TestNamingContext.java	(nonexistent)
+++ tc7.0.x/trunk/test/org/apache/naming/TestNamingContext.java	(revision 1757275)
@@ -0,0 +1,87 @@
+package org.apache.naming;
+
+import javax.naming.Context;
+import javax.naming.NamingException;
+
+import org.apache.catalina.deploy.ContextEnvironment;
+import org.apache.catalina.deploy.ContextResourceLink;
+import org.apache.catalina.startup.Tomcat;
+import org.apache.catalina.startup.TomcatBaseTest;
+import org.apache.naming.factory.ResourceLinkFactory;
+import org.junit.Assert;
+import org.junit.Test;
+
+public class TestNamingContext extends TomcatBaseTest {
+
+    private static final String COMP_ENV = "comp/env";
+    private static final String GLOBAL_NAME = "global";
+    private static final String LOCAL_NAME = "local";
+    private static final String DATA = "Cabbage";
+
+
+    @Test
+    public void testGlobalNaming() throws Exception {
+        Tomcat tomcat = getTomcatInstance();
+        tomcat.enableNaming();
+
+        org.apache.catalina.Context ctx = tomcat.addContext("", null);
+
+        tomcat.start();
+
+        Context webappInitial = ContextBindings.getContext(ctx);
+
+        // Nothing added at the moment so should be null
+        Object obj = doLookup(webappInitial, COMP_ENV + "/" + LOCAL_NAME);
+        Assert.assertNull(obj);
+
+        ContextEnvironment ce = new ContextEnvironment();
+        ce.setName(GLOBAL_NAME);
+        ce.setValue(DATA);
+        ce.setType(DATA.getClass().getName());
+
+        tomcat.getServer().getGlobalNamingResources().addEnvironment(ce);
+
+        // No link so still should be null
+        obj = doLookup(webappInitial, COMP_ENV + "/" + LOCAL_NAME);
+        Assert.assertNull(obj);
+
+        // Now add a resource link to the context
+        ContextResourceLink crl = new ContextResourceLink();
+        crl.setGlobal(GLOBAL_NAME);
+        crl.setName(LOCAL_NAME);
+        crl.setType(DATA.getClass().getName());
+        ctx.getNamingResources().addResourceLink(crl);
+
+        // Link exists so should be OK now
+        obj = doLookup(webappInitial, COMP_ENV + "/" + LOCAL_NAME);
+        Assert.assertEquals(DATA, obj);
+
+        // Try shortcut
+        ResourceLinkFactory factory = new ResourceLinkFactory();
+        ResourceLinkRef rlr = new ResourceLinkRef(DATA.getClass().getName(), GLOBAL_NAME, null, null);
+        obj = factory.getObjectInstance(rlr, null, null, null);
+        Assert.assertEquals(DATA, obj);
+
+        // Remove the link
+        ctx.getNamingResources().removeResourceLink(LOCAL_NAME);
+
+        // No link so should be null
+        obj = doLookup(webappInitial, COMP_ENV + "/" + LOCAL_NAME);
+        Assert.assertNull(obj);
+
+        // Shortcut should fail too
+        obj = factory.getObjectInstance(rlr, null, null, null);
+        Assert.assertNull(obj);
+    }
+
+
+    private Object doLookup(Context context, String name) {
+        Object result = null;
+        try {
+            result = context.lookup(name);
+        } catch (NamingException nnfe) {
+            // Ignore
+        }
+        return result;
+    }
+}

Property changes on: tc7.0.x/trunk/test/org/apache/naming/TestNamingContext.java
___________________________________________________________________
Added: svn:eol-style
## -0,0 +1 ##
+native
\ No newline at end of property
Index: tc7.0.x/trunk/webapps/docs/changelog.xml
===================================================================
--- tc7.0.x/trunk/webapps/docs/changelog.xml	(revision 1757274)
+++ tc7.0.x/trunk/webapps/docs/changelog.xml	(revision 1757275)
@@ -137,6 +137,11 @@
         >CVE-2016-5388</a>) by default and to provide a mechanism that can be
         used to mitigate any future, similar issues. (markt)
       </add>
+      <add>
+        When adding and removing <code>ResourceLink</code>s dynamically, ensure
+        that the global resource is only visible via the
+        <code>ResourceLinkFactory</code> when it is meant to be. (markt)
+      </add>
     </changelog>
   </subsection>
   <subsection name="Coyote">
Index: tc7.0.x/trunk
===================================================================
--- tc7.0.x/trunk	(revision 1757274)
+++ tc7.0.x/trunk	(revision 1757275)

Property changes on: tc7.0.x/trunk
___________________________________________________________________
Modified: svn:mergeinfo
## -0,0 +0,2 ##
   Merged /tomcat/trunk:r1757271
   Merged /tomcat/tc8.5.x/trunk:r1757272
