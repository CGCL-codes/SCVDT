Index: tc6.0.x/trunk/java/org/apache/catalina/core/NamingContextListener.java
===================================================================
--- tc6.0.x/trunk/java/org/apache/catalina/core/NamingContextListener.java	(revision 1757284)
+++ tc6.0.x/trunk/java/org/apache/catalina/core/NamingContextListener.java	(revision 1757285)
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -70,6 +70,7 @@
 import org.apache.naming.ResourceRef;
 import org.apache.naming.ServiceRef;
 import org.apache.naming.TransactionRef;
+import org.apache.naming.factory.ResourceLinkFactory;
 import org.apache.tomcat.util.modeler.Registry;
 
 
@@ -91,8 +92,8 @@
 
 
     protected Log logger = log;
-    
-    
+
+
     /**
      * Name of the associated naming context.
      */
@@ -134,13 +135,13 @@
      */
     protected javax.naming.Context envCtx = null;
 
-    
+
     /**
      * Objectnames hashtable.
      */
     protected HashMap objectNames = new HashMap();
-    
 
+
     /**
      * The string manager for this package.
      */
@@ -168,7 +169,7 @@
         this.name = name;
     }
 
-    
+
     /**
      * Return the comp context.
      */
@@ -175,8 +176,8 @@
     public javax.naming.Context getCompContext() {
         return this.compCtx;
     }
-    
 
+
     /**
      * Return the env context.
      */
@@ -183,8 +184,8 @@
     public javax.naming.Context getEnvContext() {
         return this.envCtx;
     }
-    
 
+
     /**
      * Return the associated naming context.
      */
@@ -250,7 +251,7 @@
                 ContextAccessController.setReadOnly(getName());
                 try {
                     ContextBindings.bindClassLoader
-                        (container, container, 
+                        (container, container,
                          ((Container) container).getLoader().getClassLoader());
                 } catch (NamingException e) {
                     logger.error(sm.getString("naming.bindFailed", e));
@@ -262,7 +263,7 @@
                     (namingContext);
                 try {
                     ContextBindings.bindClassLoader
-                        (container, container, 
+                        (container, container,
                          this.getClass().getClassLoader());
                 } catch (NamingException e) {
                     logger.error(sm.getString("naming.bindFailed", e));
@@ -280,38 +281,49 @@
             if (!initialized)
                 return;
 
-            // Setting the context in read/write mode
-            ContextAccessController.setWritable(getName(), container);
-            ContextBindings.unbindContext(container, container);
+            try {
+                // Setting the context in read/write mode
+                ContextAccessController.setWritable(getName(), container);
+                ContextBindings.unbindContext(container, container);
+    
+                if (container instanceof Context) {
+                    ContextBindings.unbindClassLoader
+                        (container, container,
+                         ((Container) container).getLoader().getClassLoader());
+                }
+    
+                if (container instanceof Server) {
+                    namingResources.removePropertyChangeListener(this);
+                    ContextBindings.unbindClassLoader
+                        (container, container,
+                         this.getClass().getClassLoader());
+                }
+    
+                ContextAccessController.unsetSecurityToken(getName(), container);
+                ContextAccessController.unsetSecurityToken(container, container);
+    
+                // unregister mbeans.
+                if (!objectNames.isEmpty()) {
+                    Collection<ObjectName> names = objectNames.values();
+                    Registry registry = Registry.getRegistry(null, null);
+                    for (ObjectName objectName : names) {
+                        registry.unregisterComponent(objectName);
+                    }
+                }
 
-            if (container instanceof Context) {
-                ContextBindings.unbindClassLoader
-                    (container, container, 
-                     ((Container) container).getLoader().getClassLoader());
+                javax.naming.Context global = getGlobalNamingContext();
+                if (global != null) {
+                    ResourceLinkFactory.deregisterGlobalResourceAccess(global);
+                }
+            } finally {
+                objectNames.clear();
+    
+                namingContext = null;
+                envCtx = null;
+                compCtx = null;
+                initialized = false;
             }
 
-            if (container instanceof Server) {
-                namingResources.removePropertyChangeListener(this);
-                ContextBindings.unbindClassLoader
-                    (container, container, 
-                     this.getClass().getClassLoader());
-            }
-
-            ContextAccessController.unsetSecurityToken(getName(), container);
-            ContextAccessController.unsetSecurityToken(container, container);
-
-            // unregister mbeans.
-            Collection<ObjectName> names = objectNames.values();
-            for (ObjectName objectName : names) {
-                Registry.getRegistry(null, null).unregisterComponent(objectName);
-            }
-            objectNames.clear();
-
-            namingContext = null;
-            envCtx = null;
-            compCtx = null;
-            initialized = false;
-
         }
 
     }
@@ -349,7 +361,7 @@
 
             String environmentName = (String) event.getData();
             if (environmentName != null) {
-                ContextEnvironment env = 
+                ContextEnvironment env =
                     namingResources.findEnvironment(environmentName);
                 addEnvironment(env);
             }
@@ -358,7 +370,7 @@
 
             String localEjbName = (String) event.getData();
             if (localEjbName != null) {
-                ContextLocalEjb localEjb = 
+                ContextLocalEjb localEjb =
                     namingResources.findLocalEjb(localEjbName);
                 addLocalEjb(localEjb);
             }
@@ -367,7 +379,7 @@
 
             String resourceName = (String) event.getData();
             if (resourceName != null) {
-                ContextResource resource = 
+                ContextResource resource =
                     namingResources.findResource(resourceName);
                 addResource(resource);
             }
@@ -376,7 +388,7 @@
 
             String resourceLinkName = (String) event.getData();
             if (resourceLinkName != null) {
-                ContextResourceLink resourceLink = 
+                ContextResourceLink resourceLink =
                     namingResources.findResourceLink(resourceLinkName);
                 addResourceLink(resourceLink);
             }
@@ -385,7 +397,7 @@
 
             String resourceEnvRefName = (String) event.getData();
             if (resourceEnvRefName != null) {
-                ContextResourceEnvRef resourceEnvRef = 
+                ContextResourceEnvRef resourceEnvRef =
                     namingResources.findResourceEnvRef(resourceEnvRefName);
                 addResourceEnvRef(resourceEnvRef);
             }
@@ -394,7 +406,7 @@
 
             String serviceName = (String) event.getData();
             if (serviceName != null) {
-                ContextService service = 
+                ContextService service =
                     namingResources.findService(serviceName);
                 addService(service);
             }
@@ -556,7 +568,7 @@
             }
         } else if (name.equals("resourceEnvRef")) {
             if (oldValue != null) {
-                ContextResourceEnvRef resourceEnvRef = 
+                ContextResourceEnvRef resourceEnvRef =
                     (ContextResourceEnvRef) oldValue;
                 if (resourceEnvRef.getName() != null) {
                     removeResourceEnvRef(resourceEnvRef.getName());
@@ -563,7 +575,7 @@
                 }
             }
             if (newValue != null) {
-                ContextResourceEnvRef resourceEnvRef = 
+                ContextResourceEnvRef resourceEnvRef =
                     (ContextResourceEnvRef) newValue;
                 if (resourceEnvRef.getName() != null) {
                     addResourceEnvRef(resourceEnvRef);
@@ -627,7 +639,7 @@
         }
 
         // Resource links
-        ContextResourceLink[] resourceLinks = 
+        ContextResourceLink[] resourceLinks =
             namingResources.findResourceLinks();
         for (i = 0; i < resourceLinks.length; i++) {
             addResourceLink(resourceLinks[i]);
@@ -646,7 +658,7 @@
         }
 
         // Environment entries
-        ContextEnvironment[] contextEnvironments = 
+        ContextEnvironment[] contextEnvironments =
             namingResources.findEnvironments();
         for (i = 0; i < contextEnvironments.length; i++) {
             addEnvironment(contextEnvironments[i]);
@@ -680,7 +692,7 @@
                     }
                 }
             } catch (NameAlreadyBoundException e) {
-                // Ignore because UserTransaction was obviously 
+                // Ignore because UserTransaction was obviously
                 // added via ResourceLink
             } catch (NamingException e) {
                 logger.error(sm.getString("naming.bindFailed", e));
@@ -690,7 +702,7 @@
         // Binding the resources directory context
         if (container instanceof Context) {
             try {
-                compCtx.bind("Resources", 
+                compCtx.bind("Resources",
                              ((Container) container).getResources());
             } catch (NamingException e) {
                 logger.error(sm.getString("naming.bindFailed", e));
@@ -720,20 +732,18 @@
         if (domain == null) {
             domain = "Catalina";
         }
-        
+
         ObjectName name = null;
         String quotedResourceName = ObjectName.quote(resource.getName());
-        if (container instanceof Server) {        
+        if (container instanceof Server) {
             name = new ObjectName(domain + ":type=DataSource" +
-                        ",class=" + resource.getType() + 
+                        ",class=" + resource.getType() +
                         ",name=" + quotedResourceName);
-        } else if (container instanceof Context) {                    
+        } else if (container instanceof Context) {
             String path = ((Context)container).getPath();
             if (path.length() < 1)
                 path = "/";
             Host host = (Host) ((Context)container).getParent();
-            Engine engine = (Engine) host.getParent();
-            Service service = engine.getService();
             name = new ObjectName(domain + ":type=DataSource" +
                         ",path=" + path + 
                         ",host=" + host.getName() +
@@ -740,12 +750,12 @@
                         ",class=" + resource.getType() +
                         ",name=" + quotedResourceName);
         }
-        
+
         return (name);
 
     }
 
-    
+
     /**
      * Set the specified EJBs in the naming context.
      */
@@ -893,7 +903,7 @@
                     wsdlURL = ((Context) container).
                                                     getServletContext().
                                                     getResource("/" + service.getWsdlfile());
-                    logger.debug("  Changing service ref wsdl file for /" 
+                    logger.debug("  Changing service ref wsdl file for /"
                                 + service.getWsdlfile());
                 } catch (MalformedURLException e) {
                     logger.error(sm.getString("naming.wsdlFailed", e));
@@ -927,7 +937,7 @@
                     jaxrpcURL = ((Context) container).
                                                     getServletContext().
                                                     getResource("/" + service.getJaxrpcmappingfile());
-                    logger.debug("  Changing service ref jaxrpc file for /" 
+                    logger.debug("  Changing service ref jaxrpc file for /"
                                 + service.getJaxrpcmappingfile());
                 } catch (MalformedURLException e) {
                     logger.error(sm.getString("naming.wsdlFailed", e));
@@ -984,7 +994,7 @@
 
         try {
             if (logger.isDebugEnabled()) {
-                logger.debug("  Adding service ref " 
+                logger.debug("  Adding service ref "
                              + service.getName() + "  " + ref);
             }
             createSubcontexts(envCtx, service.getName());
@@ -1015,7 +1025,7 @@
         }
         try {
             if (logger.isDebugEnabled()) {
-                logger.debug("  Adding resource ref " 
+                logger.debug("  Adding resource ref "
                              + resource.getName() + "  " + ref);
             }
             createSubcontexts(envCtx, resource.getName());
@@ -1034,7 +1044,7 @@
                 logger.warn(sm.getString("naming.jmxRegistrationFailed", e));
             }
         }
-        
+
     }
 
 
@@ -1084,8 +1094,8 @@
             }
         }
 
-        javax.naming.Context ctx = 
-            "UserTransaction".equals(resourceLink.getName()) 
+        javax.naming.Context ctx =
+            "UserTransaction".equals(resourceLink.getName())
             ? compCtx : envCtx;
         try {
             if (logger.isDebugEnabled())
@@ -1096,9 +1106,23 @@
             logger.error(sm.getString("naming.bindFailed", e));
         }
 
+        ResourceLinkFactory.registerGlobalResourceAccess(
+                getGlobalNamingContext(), resourceLink.getName(), resourceLink.getGlobal());
     }
 
 
+    private javax.naming.Context getGlobalNamingContext() {
+        if (container instanceof Context) {
+            Engine e = (Engine) ((Context) container).getParent().getParent();
+            Server s = e.getService().getServer();
+            if (s instanceof StandardServer) {
+                return ((StandardServer) s).getGlobalNamingContext();
+            }
+        }
+        return null;
+    }
+
+
     /**
      * Set the specified EJBs in the naming context.
      */
@@ -1199,6 +1223,7 @@
             logger.error(sm.getString("naming.unbindFailed", e));
         }
 
+        ResourceLinkFactory.deregisterGlobalResourceAccess(getGlobalNamingContext(), name);
     }
 
 
Index: tc6.0.x/trunk/java/org/apache/naming/factory/ResourceLinkFactory.java
===================================================================
--- tc6.0.x/trunk/java/org/apache/naming/factory/ResourceLinkFactory.java	(revision 1757284)
+++ tc6.0.x/trunk/java/org/apache/naming/factory/ResourceLinkFactory.java	(revision 1757285)
@@ -16,7 +16,10 @@
  */
 package org.apache.naming.factory;
 
+import java.util.HashMap;
 import java.util.Hashtable;
+import java.util.Map;
+import java.util.concurrent.ConcurrentHashMap;
 
 import javax.naming.Context;
 import javax.naming.Name;
@@ -42,6 +45,8 @@
      */
     private static Context globalContext = null;
 
+    private static Map<ClassLoader,Map<String,String>> globalResourceRegistrations =
+            new ConcurrentHashMap<ClassLoader,Map<String,String>>();
 
     // --------------------------------------------------------- Public Methods
 
@@ -60,6 +65,56 @@
     }
 
 
+    public static void registerGlobalResourceAccess(Context globalContext, String localName,
+            String globalName) {
+        validateGlobalContext(globalContext);
+        ClassLoader cl = Thread.currentThread().getContextClassLoader();
+        Map<String,String> registrations = globalResourceRegistrations.get(cl);
+        if (registrations == null) {
+            // Web application initialization is single threaded so this is
+            // safe.
+            registrations = new HashMap<String,String>();
+            globalResourceRegistrations.put(cl, registrations);
+        }
+        registrations.put(localName, globalName);
+    }
+
+
+    public static void deregisterGlobalResourceAccess(Context globalContext, String localName) {
+        validateGlobalContext(globalContext);
+        ClassLoader cl = Thread.currentThread().getContextClassLoader();
+        Map<String,String> registrations = globalResourceRegistrations.get(cl);
+        if (registrations != null) {
+            registrations.remove(localName);
+        }
+    }
+
+
+    public static void deregisterGlobalResourceAccess(Context globalContext) {
+        validateGlobalContext(globalContext);
+        ClassLoader cl = Thread.currentThread().getContextClassLoader();
+        globalResourceRegistrations.remove(cl);
+    }
+
+
+    private static void validateGlobalContext(Context globalContext) {
+        if (ResourceLinkFactory.globalContext != null &&
+                ResourceLinkFactory.globalContext != globalContext) {
+            throw new SecurityException("Caller provided invalid global context");
+        }
+    }
+
+
+    private static boolean validateGlobalResourceAccess(String globalName) {
+        ClassLoader cl = Thread.currentThread().getContextClassLoader();
+        Map<String,String> registrations = globalResourceRegistrations.get(cl);
+        if (registrations != null && registrations.containsValue(globalName)) {
+            return true;
+        }
+        return false;
+    }
+
+
     // -------------------------------------------------- ObjectFactory Methods
 
     /**
@@ -82,6 +137,11 @@
         RefAddr refAddr = ref.get(ResourceLinkRef.GLOBALNAME);
         if (refAddr != null) {
             globalName = refAddr.getContent().toString();
+            // Confirm that the current web application is currently configured
+            // to access the specified global resource
+            if (!validateGlobalResourceAccess(globalName)) {
+                return null;
+            }
             Object result = null;
             result = globalContext.lookup(globalName);
             // Check the expected type
Index: tc6.0.x/trunk/webapps/docs/changelog.xml
===================================================================
--- tc6.0.x/trunk/webapps/docs/changelog.xml	(revision 1757284)
+++ tc6.0.x/trunk/webapps/docs/changelog.xml	(revision 1757285)
@@ -132,6 +132,11 @@
         >CVE-2016-5388</a>) by default and to provide a mechanism that can be
         used to mitigate any future, similar issues. (markt)
       </add>
+      <add>
+        When adding and removing <code>ResourceLink</code>s dynamically, ensure
+        that the global resource is only visible via the
+        <code>ResourceLinkFactory</code> when it is meant to be. (markt)
+      </add>
     </changelog>
   </subsection>
   <subsection name="Coyote">
Index: tc6.0.x/trunk
===================================================================
--- tc6.0.x/trunk	(revision 1757284)
+++ tc6.0.x/trunk	(revision 1757285)

Property changes on: tc6.0.x/trunk
___________________________________________________________________
Modified: svn:mergeinfo
## -0,0 +0,3 ##
   Merged /tomcat/tc7.0.x/trunk:r1757275,1757284
   Merged /tomcat/trunk:r1757271,1757278
   Merged /tomcat/tc8.5.x/trunk:r1757272,1757282
