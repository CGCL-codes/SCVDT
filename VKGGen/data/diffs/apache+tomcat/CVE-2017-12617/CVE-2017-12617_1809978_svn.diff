Index: tc7.0.x/trunk/java/org/apache/naming/resources/FileDirContext.java
===================================================================
--- tc7.0.x/trunk/java/org/apache/naming/resources/FileDirContext.java	(revision 1809977)
+++ tc7.0.x/trunk/java/org/apache/naming/resources/FileDirContext.java	(revision 1809978)
@@ -14,8 +14,6 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
-
 package org.apache.naming.resources;
 
 import java.io.File;
@@ -97,7 +95,9 @@
      */
     protected String absoluteBase = null;
 
+    private String canonicalBase = null;
 
+
     /**
      * Allow linking.
      */
@@ -106,7 +106,6 @@
 
     // ------------------------------------------------------------- Properties
 
-
     /**
      * Set the document root.
      *
@@ -137,14 +136,14 @@
             throw new IllegalArgumentException(sm.getString("fileResources.base", docBase));
         }
 
+        this.absoluteBase = normalize(base.getAbsolutePath());
+
         // absoluteBase also needs to be normalized. Using the canonical path is
         // the simplest way of doing this.
         try {
-            this.absoluteBase = base.getCanonicalPath();
+            this.canonicalBase = base.getCanonicalPath();
         } catch (IOException e) {
-            log.warn(sm.getString("fileResources.canonical.fail", base.getPath()));
-            // Fall back to the absolute path
-            this.absoluteBase = base.getAbsolutePath();
+            throw new IllegalArgumentException(e);
         }
         super.setDocBase(docBase);
     }
@@ -827,9 +826,16 @@
 
         // If allow linking is enabled, files are not limited to being located
         // under the fileBase so all further checks are disabled.
-        if (allowLinking)
+        if (allowLinking) {
             return file;
+        }
 
+        // Additional Windows specific checks to handle known problems with
+        // File.getCanonicalPath()
+        if (JrePlatform.IS_WINDOWS && isInvalidWindowsFilename(name)) {
+            return null;
+        }
+
         // Check that this file is located under the web application root
         String canPath = null;
         try {
@@ -837,7 +843,7 @@
         } catch (IOException e) {
             // Ignore
         }
-        if (canPath == null || !canPath.startsWith(absoluteBase)) {
+        if (canPath == null || !canPath.startsWith(canonicalBase)) {
             return null;
         }
 
@@ -844,10 +850,9 @@
         // Ensure that the file is not outside the fileBase. This should not be
         // possible for standard requests (the request is normalized early in
         // the request processing) but might be possible for some access via the
-        // Servlet API (RequestDispatcher, HTTP/2 push etc.) therefore these
-        // checks are retained as an additional safety measure
-        // absoluteBase has been normalized so absPath needs to be normalized as
-        // well.
+        // Servlet API (RequestDispatcheretc.) therefore these checks are
+        // retained as an additional safety measure absoluteBase has been
+        // normalized so absPath needs to be normalized as well.
         String absPath = normalize(file.getAbsolutePath());
         if ((absoluteBase.length() > absPath.length())) {
             return null;
@@ -857,7 +862,7 @@
         // was not part of the requested path and the remaining check only
         // applies to the request path
         absPath = absPath.substring(absoluteBase.length());
-        canPath = canPath.substring(absoluteBase.length());
+        canPath = canPath.substring(canonicalBase.length());
 
         // Case sensitivity check
         // The normalized requested path should be an exact match the equivalent
@@ -870,9 +875,8 @@
         //
         // absPath is normalized so canPath needs to be normalized as well
         // Can't normalize canPath earlier as canonicalBase is not normalized
-        canPath = normalize(canPath);
-        if (absPath.length() == 0) {
-            absPath = "/";
+        if (canPath.length() > 0) {
+            canPath = normalize(canPath);
         }
         if (!canPath.equals(absPath)) {
             return null;
@@ -882,6 +886,36 @@
     }
 
 
+    private boolean isInvalidWindowsFilename(String name) {
+        final int len = name.length();
+        if (len == 0) {
+            return false;
+        }
+        // This consistently ~10 times faster than the equivalent regular
+        // expression irrespective of input length.
+        for (int i = 0; i < len; i++) {
+            char c = name.charAt(i);
+            if (c == '\"' || c == '<' || c == '>') {
+                // These characters are disallowed in Windows file names and
+                // there are known problems for file names with these characters
+                // when using File#getCanonicalPath().
+                // Note: There are additional characters that are disallowed in
+                //       Windows file names but these are not known to cause
+                //       problems when using File#getCanonicalPath().
+                return true;
+            }
+        }
+        // Windows does not allow file names to end in ' ' unless specific low
+        // level APIs are used to create the files that bypass various checks.
+        // File names that end in ' ' are known to cause problems when using
+        // File#getCanonicalPath().
+        if (name.charAt(len -1) == ' ') {
+            return true;
+        }
+        return false;
+    }
+
+
     /**
      * List the resources which are members of a collection.
      *
Index: tc7.0.x/trunk/java/org/apache/naming/resources/JrePlatform.java
===================================================================
--- tc7.0.x/trunk/java/org/apache/naming/resources/JrePlatform.java	(nonexistent)
+++ tc7.0.x/trunk/java/org/apache/naming/resources/JrePlatform.java	(revision 1809978)
@@ -0,0 +1,59 @@
+/*
+ *  Licensed to the Apache Software Foundation (ASF) under one or more
+ *  contributor license agreements.  See the NOTICE file distributed with
+ *  this work for additional information regarding copyright ownership.
+ *  The ASF licenses this file to You under the Apache License, Version 2.0
+ *  (the "License"); you may not use this file except in compliance with
+ *  the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.apache.naming.resources;
+
+import java.security.AccessController;
+import java.security.PrivilegedAction;
+
+public class JrePlatform {
+
+    private static final String OS_NAME_PROPERTY = "os.name";
+    private static final String OS_NAME_WINDOWS_PREFIX = "Windows";
+
+    static {
+        /*
+         * There are a few places where a) the behaviour of the Java API depends
+         * on the underlying platform and b) those behavioural differences have
+         * an impact on Tomcat.
+         *
+         * Tomcat therefore needs to be able to determine the platform it is
+         * running on to account for those differences.
+         *
+         * In an ideal world this code would not exist.
+         */
+
+        // This check is derived from the check in Apache Commons Lang
+        String osName;
+        if (System.getSecurityManager() == null) {
+            osName = System.getProperty(OS_NAME_PROPERTY);
+        } else {
+            osName = AccessController.doPrivileged(
+                    new PrivilegedAction<String>() {
+
+                    @Override
+                    public String run() {
+                        return System.getProperty(OS_NAME_PROPERTY);
+                    }
+                });
+        }
+
+        IS_WINDOWS = osName.startsWith(OS_NAME_WINDOWS_PREFIX);
+    }
+
+
+    public static final boolean IS_WINDOWS;
+}

Property changes on: tc7.0.x/trunk/java/org/apache/naming/resources/JrePlatform.java
___________________________________________________________________
Added: svn:eol-style
## -0,0 +1 ##
+native
\ No newline at end of property
