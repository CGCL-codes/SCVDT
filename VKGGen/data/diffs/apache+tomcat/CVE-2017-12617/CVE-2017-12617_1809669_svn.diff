Index: trunk/java/org/apache/catalina/webresources/AbstractFileResourceSet.java
===================================================================
--- trunk/java/org/apache/catalina/webresources/AbstractFileResourceSet.java	(revision 1809668)
+++ trunk/java/org/apache/catalina/webresources/AbstractFileResourceSet.java	(revision 1809669)
@@ -22,6 +22,7 @@
 import java.net.URL;
 
 import org.apache.catalina.LifecycleException;
+import org.apache.tomcat.util.compat.JrePlatform;
 import org.apache.tomcat.util.http.RequestUtil;
 
 public abstract class AbstractFileResourceSet extends AbstractResourceSet {
@@ -77,6 +78,12 @@
             return file;
         }
 
+        // Additional Windows specific checks to handle known problems with
+        // File.getCanonicalPath()
+        if (JrePlatform.IS_WINDOWS && isInvalidWindowsFilename(name)) {
+            return null;
+        }
+
         // Check that this file is located under the WebResourceSet's base
         String canPath = null;
         try {
@@ -127,6 +134,34 @@
         return file;
     }
 
+
+    private boolean isInvalidWindowsFilename(String name) {
+        // For typical length file names, this is 2-3 times faster than the
+        // equivalent regular expression. The cut-over point is file names (not
+        // full paths) of ~65 characters.
+        char[] chars = name.toCharArray();
+        for (char c : chars) {
+            if (c == '\"' || c == '<' || c == '>') {
+                // These characters are disallowed in Windows file names and
+                // there are known problems for file names with these characters
+                // when using File#getCanonicalPath().
+                // Note: There are additional characters that are disallowed in
+                //       Windows file names but these are not known to cause
+                //       problems when using File#getCanonicalPath().
+                return true;
+            }
+        }
+        // Windows does allow file names to end in ' ' unless specific low level
+        // APIs are used to create the files that bypass various checks. File
+        // names that end in ' ' are known to cause problems when using
+        // File#getCanonicalPath().
+        if (chars[chars.length -1] == ' ') {
+            return true;
+        }
+        return false;
+    }
+
+
     /**
      * Return a context-relative path, beginning with a "/", that represents
      * the canonical version of the specified path after ".." and "." elements
Index: trunk/java/org/apache/tomcat/util/compat/JrePlatform.java
===================================================================
--- trunk/java/org/apache/tomcat/util/compat/JrePlatform.java	(nonexistent)
+++ trunk/java/org/apache/tomcat/util/compat/JrePlatform.java	(revision 1809669)
@@ -0,0 +1,59 @@
+/*
+ *  Licensed to the Apache Software Foundation (ASF) under one or more
+ *  contributor license agreements.  See the NOTICE file distributed with
+ *  this work for additional information regarding copyright ownership.
+ *  The ASF licenses this file to You under the Apache License, Version 2.0
+ *  (the "License"); you may not use this file except in compliance with
+ *  the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.apache.tomcat.util.compat;
+
+import java.security.AccessController;
+import java.security.PrivilegedAction;
+
+public class JrePlatform {
+
+    private static final String OS_NAME_PROPERTY = "os.name";
+    private static final String OS_NAME_WINDOWS_PREFIX = "Windows";
+
+    static {
+        /*
+         * There are a few places where a) the behaviour of the Java API depends
+         * on the underlying platform and b) those behavioural differences have
+         * an impact on Tomcat.
+         *
+         * Tomcat therefore needs to be able to determine the platform it is
+         * running on to account for those differences.
+         *
+         * In an ideal world this code would not exist.
+         */
+
+        // This check is derived from the check in Apache Commons Lang
+        String osName;
+        if (System.getSecurityManager() == null) {
+            osName = System.getProperty(OS_NAME_PROPERTY);
+        } else {
+            osName = AccessController.doPrivileged(
+                    new PrivilegedAction<String>() {
+
+                    @Override
+                    public String run() {
+                        return System.getProperty(OS_NAME_PROPERTY);
+                    }
+                });
+        }
+
+        IS_WINDOWS = osName.startsWith(OS_NAME_WINDOWS_PREFIX);
+    }
+
+
+    public static final boolean IS_WINDOWS;
+}

Property changes on: trunk/java/org/apache/tomcat/util/compat/JrePlatform.java
___________________________________________________________________
Added: svn:eol-style
## -0,0 +1 ##
+native
\ No newline at end of property
Index: trunk/test/org/apache/catalina/webresources/TestAbstractFileResourceSetPerformance.java
===================================================================
--- trunk/test/org/apache/catalina/webresources/TestAbstractFileResourceSetPerformance.java	(nonexistent)
+++ trunk/test/org/apache/catalina/webresources/TestAbstractFileResourceSetPerformance.java	(revision 1809669)
@@ -0,0 +1,66 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.catalina.webresources;
+
+import java.util.regex.Pattern;
+
+import org.junit.Test;
+
+public class TestAbstractFileResourceSetPerformance {
+
+    private static final Pattern UNSAFE_WINDOWS_FILENAME_PATTERN = Pattern.compile(" $|[\"<>]");
+
+    private static final int LOOPS = 10_000_000;
+
+    /*
+     * Checking individual characters is about 3 times faster on markt's dev
+     * PC for typical length file names. The file names need to get to ~65
+     * characters before the Pattern matching is faster.
+     */
+    @Test
+    public void testFileNameFiltering() {
+
+        long start = System.nanoTime();
+        for (int i = 0; i < LOOPS; i++) {
+            UNSAFE_WINDOWS_FILENAME_PATTERN.matcher("testfile.jsp ").matches();
+        }
+        long end = System.nanoTime();
+        System.out.println("Regular expression took " + (end - start) + "ns or " +
+                (end-start)/LOOPS + "ns per iteration");
+
+        start = System.nanoTime();
+        for (int i = 0; i < LOOPS; i++) {
+            checkForBadChars("testfile.jsp ");
+        }
+        end = System.nanoTime();
+        System.out.println("char[] check took " + (end - start) + "ns or " +
+                (end-start)/LOOPS + "ns per iteration");
+    }
+
+    private boolean checkForBadChars(String filename) {
+        char[] chars = filename.toCharArray();
+        for (char c : chars) {
+            if (c == '\"' || c == '<' || c == '>') {
+                return false;
+            }
+        }
+        if (chars[chars.length -1] == ' ') {
+            return false;
+        }
+        return true;
+    }
+}

Property changes on: trunk/test/org/apache/catalina/webresources/TestAbstractFileResourceSetPerformance.java
___________________________________________________________________
Added: svn:eol-style
## -0,0 +1 ##
+native
\ No newline at end of property
