Index: tc8.5.x/trunk/java/org/apache/catalina/connector/Response.java
===================================================================
--- tc8.5.x/trunk/java/org/apache/catalina/connector/Response.java	(revision 1852710)
+++ tc8.5.x/trunk/java/org/apache/catalina/connector/Response.java	(revision 1852711)
@@ -34,7 +34,6 @@
 import java.util.Locale;
 import java.util.TimeZone;
 import java.util.Vector;
-import java.util.concurrent.atomic.AtomicInteger;
 
 import javax.servlet.ServletOutputStream;
 import javax.servlet.ServletResponse;
@@ -183,38 +182,7 @@
      */
     private boolean isCharacterEncodingSet = false;
 
-    /**
-     * With the introduction of async processing and the possibility of
-     * non-container threads calling sendError() tracking the current error
-     * state and ensuring that the correct error page is called becomes more
-     * complicated. This state attribute helps by tracking the current error
-     * state and informing callers that attempt to change state if the change
-     * was successful or if another thread got there first.
-     *
-     * <pre>
-     * The state machine is very simple:
-     *
-     * 0 - NONE
-     * 1 - NOT_REPORTED
-     * 2 - REPORTED
-     *
-     *
-     *   -->---->-- >NONE
-     *   |   |        |
-     *   |   |        | setError()
-     *   ^   ^        |
-     *   |   |       \|/
-     *   |   |-<-NOT_REPORTED
-     *   |            |
-     *   ^            | report()
-     *   |            |
-     *   |           \|/
-     *   |----<----REPORTED
-     * </pre>
-     */
-    private final AtomicInteger errorState = new AtomicInteger(0);
 
-
     /**
      * Using output stream flag.
      */
@@ -262,7 +230,6 @@
         usingWriter = false;
         appCommitted = false;
         included = false;
-        errorState.set(0);
         isCharacterEncodingSet = false;
 
         applicationResponse = null;
@@ -442,7 +409,7 @@
      * @return <code>false</code> if the error flag was already set
      */
     public boolean setError() {
-        boolean result = errorState.compareAndSet(0, 1);
+        boolean result = getCoyoteResponse().setError();
         if (result) {
             Wrapper wrapper = getRequest().getWrapper();
             if (wrapper != null) {
@@ -459,17 +426,17 @@
      * @return <code>true</code> if the response has encountered an error
      */
     public boolean isError() {
-        return errorState.get() > 0;
+        return getCoyoteResponse().isError();
     }
 
 
     public boolean isErrorReportRequired() {
-        return errorState.get() == 1;
+        return getCoyoteResponse().isErrorReportRequired();
     }
 
 
     public boolean setErrorReported() {
-        return errorState.compareAndSet(1, 2);
+        return getCoyoteResponse().setErrorReported();
     }
 
 
Index: tc8.5.x/trunk/java/org/apache/coyote/Response.java
===================================================================
--- tc8.5.x/trunk/java/org/apache/coyote/Response.java	(revision 1852710)
+++ tc8.5.x/trunk/java/org/apache/coyote/Response.java	(revision 1852711)
@@ -23,6 +23,7 @@
 import java.nio.charset.Charset;
 import java.util.Locale;
 import java.util.concurrent.atomic.AtomicBoolean;
+import java.util.concurrent.atomic.AtomicInteger;
 
 import javax.servlet.WriteListener;
 
@@ -125,8 +126,40 @@
      */
     Exception errorException = null;
 
+    /**
+     * With the introduction of async processing and the possibility of
+     * non-container threads calling sendError() tracking the current error
+     * state and ensuring that the correct error page is called becomes more
+     * complicated. This state attribute helps by tracking the current error
+     * state and informing callers that attempt to change state if the change
+     * was successful or if another thread got there first.
+     *
+     * <pre>
+     * The state machine is very simple:
+     *
+     * 0 - NONE
+     * 1 - NOT_REPORTED
+     * 2 - REPORTED
+     *
+     *
+     *   -->---->-- >NONE
+     *   |   |        |
+     *   |   |        | setError()
+     *   ^   ^        |
+     *   |   |       \|/
+     *   |   |-<-NOT_REPORTED
+     *   |            |
+     *   ^            | report()
+     *   |            |
+     *   |           \|/
+     *   |----<----REPORTED
+     * </pre>
+     */
+    private final AtomicInteger errorState = new AtomicInteger(0);
+
     Request req;
 
+
     // ------------------------------------------------------------- Properties
 
     public Request getRequest() {
@@ -238,7 +271,6 @@
 
     // -----------------Error State --------------------
 
-
     /**
      * Set the error Exception that occurred during request processing.
      *
@@ -264,9 +296,38 @@
     }
 
 
+    /**
+     * Set the error flag.
+     *
+     * @return <code>false</code> if the error flag was already set
+     */
+    public boolean setError() {
+        return errorState.compareAndSet(0, 1);
+    }
+
+
+    /**
+     * Error flag accessor.
+     *
+     * @return <code>true</code> if the response has encountered an error
+     */
+    public boolean isError() {
+        return errorState.get() > 0;
+    }
+
+
+    public boolean isErrorReportRequired() {
+        return errorState.get() == 1;
+    }
+
+
+    public boolean setErrorReported() {
+        return errorState.compareAndSet(1, 2);
+    }
+
+
     // -------------------- Methods --------------------
 
-
     public void reset() throws IllegalStateException {
 
         if (committed) {
@@ -557,6 +618,7 @@
         committed = false;
         commitTime = -1;
         errorException = null;
+        errorState.set(0);
         headers.clear();
         // Servlet 3.1 non-blocking write listener
         listener = null;
Index: tc8.5.x/trunk
===================================================================
--- tc8.5.x/trunk	(revision 1852710)
+++ tc8.5.x/trunk	(revision 1852711)

Property changes on: tc8.5.x/trunk
___________________________________________________________________
Modified: svn:mergeinfo
## -0,0 +0,1 ##
   Merged /tomcat/trunk:r1822809
