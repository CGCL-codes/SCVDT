Index: tc8.5.x/trunk/java/org/apache/catalina/connector/OutputBuffer.java
===================================================================
--- tc8.5.x/trunk/java/org/apache/catalina/connector/OutputBuffer.java	(revision 1852711)
+++ tc8.5.x/trunk/java/org/apache/catalina/connector/OutputBuffer.java	(revision 1852712)
@@ -33,6 +33,7 @@
 
 import org.apache.catalina.Globals;
 import org.apache.coyote.ActionCode;
+import org.apache.coyote.CloseNowException;
 import org.apache.coyote.Response;
 import org.apache.tomcat.util.buf.B2CConverter;
 import org.apache.tomcat.util.buf.C2BConverter;
@@ -349,6 +350,13 @@
             // real write to the adapter
             try {
                 coyoteResponse.doWrite(buf);
+            } catch (CloseNowException e) {
+                // Catch this sub-class as it requires specific handling.
+                // Examples where this exception is thrown:
+                // - HTTP/2 stream timeout
+                // Prevent further output for this response
+                closed = true;
+                throw e;
             } catch (IOException e) {
                 // An IOException on a write is almost always due to
                 // the remote client aborting the request. Wrap this
Index: tc8.5.x/trunk/java/org/apache/catalina/core/StandardWrapperValve.java
===================================================================
--- tc8.5.x/trunk/java/org/apache/catalina/core/StandardWrapperValve.java	(revision 1852711)
+++ tc8.5.x/trunk/java/org/apache/catalina/core/StandardWrapperValve.java	(revision 1852712)
@@ -36,6 +36,7 @@
 import org.apache.catalina.connector.Request;
 import org.apache.catalina.connector.Response;
 import org.apache.catalina.valves.ValveBase;
+import org.apache.coyote.CloseNowException;
 import org.apache.tomcat.util.ExceptionUtils;
 import org.apache.tomcat.util.buf.MessageBytes;
 import org.apache.tomcat.util.log.SystemLogHandler;
@@ -201,7 +202,7 @@
                 }
 
             }
-        } catch (ClientAbortException e) {
+        } catch (ClientAbortException | CloseNowException e) {
             if (container.getLogger().isDebugEnabled()) {
                 container.getLogger().debug(sm.getString(
                         "standardWrapper.serviceException", wrapper.getName(),
Index: tc8.5.x/trunk/java/org/apache/coyote/http2/LocalStrings.properties
===================================================================
--- tc8.5.x/trunk/java/org/apache/coyote/http2/LocalStrings.properties	(revision 1852711)
+++ tc8.5.x/trunk/java/org/apache/coyote/http2/LocalStrings.properties	(revision 1852712)
@@ -92,6 +92,7 @@
 stream.reset.receive=Connection [{0}], Stream [{1}], Reset received due to [{2}]
 stream.reset.send=Connection [{0}], Stream [{1}], Reset sent due to [{2}]
 stream.trailerHeader.noEndOfStream=Connection [{0}], Stream [{1}], The trailer headers did not include the end of stream flag
+stream.writeTimeout=Timeout waiting for client to increase flow control window to permit stream data to be written
 
 stream.inputBuffer.copy=Copying [{0}] bytes from inBuffer to outBuffer
 stream.inputBuffer.dispatch=Data added to inBuffer when read interest is registered. Triggering a read dispatch
Index: tc8.5.x/trunk/java/org/apache/coyote/http2/Stream.java
===================================================================
--- tc8.5.x/trunk/java/org/apache/coyote/http2/Stream.java	(revision 1852711)
+++ tc8.5.x/trunk/java/org/apache/coyote/http2/Stream.java	(revision 1852712)
@@ -218,7 +218,21 @@
             }
             try {
                 if (block) {
-                    wait();
+                    wait(handler.getProtocol().getStreamWriteTimeout());
+                    windowSize = getWindowSize();
+                    if (windowSize == 0) {
+                        String msg = sm.getString("stream.writeTimeout");
+                        StreamException se = new StreamException(
+                                msg, Http2Error.ENHANCE_YOUR_CALM, getIdAsInt());
+                        // Prevent the application making further writes
+                        streamOutputBuffer.closed = true;
+                        // Prevent Tomcat's error handling trying to write
+                        coyoteResponse.setError();
+                        coyoteResponse.setErrorReported();
+                        // Trigger a reset once control returns to Tomcat
+                        streamOutputBuffer.reset = se;
+                        throw new CloseNowException(msg, se);
+                    }
                 } else {
                     return 0;
                 }
@@ -228,7 +242,6 @@
                 // Stream.
                 throw new IOException(e);
             }
-            windowSize = getWindowSize();
         }
         int allocation;
         if (windowSize < reservation) {
@@ -626,6 +639,11 @@
     }
 
 
+    StreamException getResetException() {
+        return streamOutputBuffer.reset;
+    }
+
+
     private static void push(final Http2UpgradeHandler handler, final Request request,
             final Stream stream) throws IOException {
         if (org.apache.coyote.Constants.IS_SECURITY_ENABLED) {
@@ -678,6 +696,7 @@
         private volatile long written = 0;
         private volatile int streamReservation = 0;
         private volatile boolean closed = false;
+        private volatile StreamException reset = null;
         private volatile boolean endOfStreamSent = false;
         private volatile boolean writeInterest = false;
 
@@ -861,8 +880,13 @@
 
         @Override
         public final void end() throws IOException {
-            closed = true;
-            flush(true);
+            if (reset != null) {
+                throw new CloseNowException(reset);
+            }
+            if (!closed) {
+                closed = true;
+                flush(true);
+            }
         }
 
         public boolean isClosed() {
Index: tc8.5.x/trunk/java/org/apache/coyote/http2/StreamProcessor.java
===================================================================
--- tc8.5.x/trunk/java/org/apache/coyote/http2/StreamProcessor.java	(revision 1852711)
+++ tc8.5.x/trunk/java/org/apache/coyote/http2/StreamProcessor.java	(revision 1852712)
@@ -75,10 +75,13 @@
                                     stream.getIdentifier()), Http2Error.INTERNAL_ERROR);
                             stream.close(ce);
                         } else if (!getErrorState().isIoAllowed()) {
-                            StreamException se = new StreamException(sm.getString(
-                                    "streamProcessor.error.stream", stream.getConnectionId(),
-                                    stream.getIdentifier()), Http2Error.INTERNAL_ERROR,
-                                    stream.getIdAsInt());
+                            StreamException se = stream.getResetException();
+                            if (se == null) {
+                                se = new StreamException(sm.getString(
+                                        "streamProcessor.error.stream", stream.getConnectionId(),
+                                        stream.getIdentifier()), Http2Error.INTERNAL_ERROR,
+                                        stream.getIdAsInt());
+                            }
                             stream.close(se);
                         }
                     }
Index: tc8.5.x/trunk/test/org/apache/coyote/http2/Http2TestBase.java
===================================================================
--- tc8.5.x/trunk/test/org/apache/coyote/http2/Http2TestBase.java	(revision 1852711)
+++ tc8.5.x/trunk/test/org/apache/coyote/http2/Http2TestBase.java	(revision 1852712)
@@ -492,8 +492,10 @@
         Http2Protocol http2Protocol = new Http2Protocol();
         // Short timeouts for now. May need to increase these for CI systems.
         http2Protocol.setReadTimeout(2000);
+        http2Protocol.setWriteTimeout(2000);
         http2Protocol.setKeepAliveTimeout(5000);
-        http2Protocol.setWriteTimeout(2000);
+        http2Protocol.setStreamReadTimeout(1000);
+        http2Protocol.setStreamWriteTimeout(1000);
         http2Protocol.setMaxConcurrentStreams(maxConcurrentStreams);
         connector.addUpgradeProtocol(http2Protocol);
     }
Index: tc8.5.x/trunk/test/org/apache/coyote/http2/TestHttp2Timeouts.java
===================================================================
--- tc8.5.x/trunk/test/org/apache/coyote/http2/TestHttp2Timeouts.java	(nonexistent)
+++ tc8.5.x/trunk/test/org/apache/coyote/http2/TestHttp2Timeouts.java	(revision 1852712)
@@ -0,0 +1,73 @@
+/*
+ *  Licensed to the Apache Software Foundation (ASF) under one or more
+ *  contributor license agreements.  See the NOTICE file distributed with
+ *  this work for additional information regarding copyright ownership.
+ *  The ASF licenses this file to You under the Apache License, Version 2.0
+ *  (the "License"); you may not use this file except in compliance with
+ *  the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.apache.coyote.http2;
+
+import org.junit.Assert;
+import org.junit.Before;
+import org.junit.Test;
+
+public class TestHttp2Timeouts extends Http2TestBase {
+
+    @Override
+    @Before
+    public void http2Connect() throws Exception {
+        super.http2Connect();
+        sendSettings(0, false, new SettingValue(Setting.INITIAL_WINDOW_SIZE.getId(), 0));
+    }
+
+
+    /*
+     * Simple request won't fill buffer so timeout will occur in Tomcat internal
+     * code during response completion.
+     */
+    @Test
+    public void testClientWithEmptyWindow() throws Exception {
+        sendSimpleGetRequest(3);
+
+        // Settings
+        parser.readFrame(false);
+        // Headers
+        parser.readFrame(false);
+
+        output.clearTrace();
+
+        parser.readFrame(false);
+        Assert.assertEquals("3-RST-[11]\n", output.getTrace());
+    }
+
+
+    /*
+     * Large request will fill buffer so timeout will occur in application code
+     * during response write (when Tomcat commits the response and flushes the
+     * buffer as a result of the buffer filling).
+     */
+    @Test
+    public void testClientWithEmptyWindowLargeResponse() throws Exception {
+        sendLargeGetRequest(3);
+
+        // Settings
+        parser.readFrame(false);
+        // Headers
+        parser.readFrame(false);
+
+        output.clearTrace();
+
+        parser.readFrame(false);
+        Assert.assertEquals("3-RST-[11]\n", output.getTrace());
+    }
+
+}

Property changes on: tc8.5.x/trunk/test/org/apache/coyote/http2/TestHttp2Timeouts.java
___________________________________________________________________
Added: svn:eol-style
## -0,0 +1 ##
+native
\ No newline at end of property
Index: tc8.5.x/trunk
===================================================================
--- tc8.5.x/trunk	(revision 1852711)
+++ tc8.5.x/trunk	(revision 1852712)

Property changes on: tc8.5.x/trunk
___________________________________________________________________
Modified: svn:mergeinfo
## -0,0 +0,1 ##
   Merged /tomcat/trunk:r1852699
