diff --git a/src/main/java/hudson/plugins/emailext/plugins/recipients/CulpritsRecipientProvider.java b/src/main/java/hudson/plugins/emailext/plugins/recipients/CulpritsRecipientProvider.java
index eada9308..752233e3 100644
--- a/src/main/java/hudson/plugins/emailext/plugins/recipients/CulpritsRecipientProvider.java
+++ b/src/main/java/hudson/plugins/emailext/plugins/recipients/CulpritsRecipientProvider.java
@@ -54,7 +54,7 @@ public void send(final String format, final Object... args) {
         final Result runResult = run.getResult();
         if (run instanceof AbstractBuild) {
             Set<User> users = ((AbstractBuild<?,?>)run).getCulprits();
-            RecipientProviderUtilities.addUsers(users, context.getListener(), env, to, cc, bcc, debug);
+            RecipientProviderUtilities.addUsers(users, context, env, to, cc, bcc, debug);
         } else if (runResult != null) {
             List<Run<?, ?>> builds = new ArrayList<>();
             Run<?, ?> build = run;
@@ -73,7 +73,7 @@ public void send(final String format, final Object... args) {
                 build = build.getPreviousCompletedBuild();
             }
             Set<User> users = RecipientProviderUtilities.getChangeSetAuthors(builds, debug);
-            RecipientProviderUtilities.addUsers(users, context.getListener(), env, to, cc, bcc, debug);
+            RecipientProviderUtilities.addUsers(users, context, env, to, cc, bcc, debug);
         }
     }
 
diff --git a/src/main/java/hudson/plugins/emailext/plugins/recipients/DevelopersRecipientProvider.java b/src/main/java/hudson/plugins/emailext/plugins/recipients/DevelopersRecipientProvider.java
index 984a2ee4..0ec682d0 100644
--- a/src/main/java/hudson/plugins/emailext/plugins/recipients/DevelopersRecipientProvider.java
+++ b/src/main/java/hudson/plugins/emailext/plugins/recipients/DevelopersRecipientProvider.java
@@ -40,7 +40,7 @@ public void send(final String format, final Object... args) {
         }
         final Debug debug = new Debug();
         Set<User> users = RecipientProviderUtilities.getChangeSetAuthors(Collections.<Run<?, ?>>singleton(context.getRun()), debug);
-        RecipientProviderUtilities.addUsers(users, context.getListener(), env, to, cc, bcc, debug);
+        RecipientProviderUtilities.addUsers(users, context, env, to, cc, bcc, debug);
     }
 
     @Extension
diff --git a/src/main/java/hudson/plugins/emailext/plugins/recipients/FailingTestSuspectsRecipientProvider.java b/src/main/java/hudson/plugins/emailext/plugins/recipients/FailingTestSuspectsRecipientProvider.java
index 86b015a9..fab6a5d2 100644
--- a/src/main/java/hudson/plugins/emailext/plugins/recipients/FailingTestSuspectsRecipientProvider.java
+++ b/src/main/java/hudson/plugins/emailext/plugins/recipients/FailingTestSuspectsRecipientProvider.java
@@ -137,7 +137,7 @@ public void send(final String format, final Object... args) {
         }
 
         if (users != null) {
-            RecipientProviderUtilities.addUsers(users, context.getListener(), env, to, cc, bcc, debug);
+            RecipientProviderUtilities.addUsers(users, context, env, to, cc, bcc, debug);
         }
     }
 
diff --git a/src/main/java/hudson/plugins/emailext/plugins/recipients/FirstFailingBuildSuspectsRecipientProvider.java b/src/main/java/hudson/plugins/emailext/plugins/recipients/FirstFailingBuildSuspectsRecipientProvider.java
index b39e9900..1abbd52b 100644
--- a/src/main/java/hudson/plugins/emailext/plugins/recipients/FirstFailingBuildSuspectsRecipientProvider.java
+++ b/src/main/java/hudson/plugins/emailext/plugins/recipients/FirstFailingBuildSuspectsRecipientProvider.java
@@ -101,7 +101,7 @@ public void send(final String format, final Object... args) {
             }
         }
         if (users != null) {
-            RecipientProviderUtilities.addUsers(users, context.getListener(), env, to, cc, bcc, debug);
+            RecipientProviderUtilities.addUsers(users, context, env, to, cc, bcc, debug);
         }
     }
 
diff --git a/src/main/java/hudson/plugins/emailext/plugins/recipients/RecipientProviderUtilities.java b/src/main/java/hudson/plugins/emailext/plugins/recipients/RecipientProviderUtilities.java
index 71f76e81..98e40fec 100644
--- a/src/main/java/hudson/plugins/emailext/plugins/recipients/RecipientProviderUtilities.java
+++ b/src/main/java/hudson/plugins/emailext/plugins/recipients/RecipientProviderUtilities.java
@@ -28,11 +28,14 @@
 import hudson.EnvVars;
 import hudson.model.AbstractBuild;
 import hudson.model.Cause;
+import hudson.model.Item;
 import hudson.model.Run;
 import hudson.model.TaskListener;
 import hudson.model.User;
 import hudson.plugins.emailext.EmailRecipientUtils;
+import hudson.plugins.emailext.ExtendedEmailPublisherContext;
 import hudson.scm.ChangeLogSet;
+import hudson.tasks.MailSender;
 
 import javax.mail.internet.InternetAddress;
 import java.lang.reflect.Field;
@@ -43,6 +46,9 @@
 import java.util.List;
 import java.util.Set;
 import java.util.logging.Logger;
+import javax.annotation.CheckForNull;
+import org.acegisecurity.Authentication;
+import org.acegisecurity.userdetails.UsernameNotFoundException;
 
 public final class RecipientProviderUtilities {
     private static final Logger LOGGER = Logger.getLogger(RecipientProviderUtilities.class.getName());
@@ -153,7 +159,23 @@ public static User getUserTriggeringTheBuild(final Run<?, ?> run) {
         return user;
     }
 
+    @Deprecated
     public static void addUsers(final Set<User> users, final TaskListener listener, final EnvVars env,
+        final Set<InternetAddress> to, final Set<InternetAddress> cc, final Set<InternetAddress> bcc, final IDebug debug) {
+        addUsers(users, listener, null, env, to, cc, bcc, debug);
+    }
+
+    public static void addUsers(final Set<User> users, final ExtendedEmailPublisherContext context, final EnvVars env,
+        final Set<InternetAddress> to, final Set<InternetAddress> cc, final Set<InternetAddress> bcc, final IDebug debug) {
+        addUsers(users, context.getListener(), context.getRun(), env, to, cc, bcc, debug);
+    }
+
+    /** If set, send to known users who lack {@link Item#READ} access to the job. */
+    static /* not final */ boolean SEND_TO_USERS_WITHOUT_READ = Boolean.getBoolean(MailSender.class.getName() + ".SEND_TO_USERS_WITHOUT_READ");
+    /** If set, send to unknown users. */
+    static /* not final */ boolean SEND_TO_UNKNOWN_USERS = Boolean.getBoolean(MailSender.class.getName() + ".SEND_TO_UNKNOWN_USERS");
+
+    private static void addUsers(final Set<User> users, final TaskListener listener, @CheckForNull Run<?,?> run, final EnvVars env,
         final Set<InternetAddress> to, final Set<InternetAddress> cc, final Set<InternetAddress> bcc, final IDebug debug) {
         for (final User user : users) {
             if (EmailRecipientUtils.isExcludedRecipient(user, listener)) {
@@ -161,6 +183,24 @@ public static void addUsers(final Set<User> users, final TaskListener listener,
             } else {
                 final String userAddress = EmailRecipientUtils.getUserConfiguredEmail(user);
                 if (userAddress != null) {
+                    try {
+                        Authentication auth = user.impersonate();
+                        if (run != null && !run.getACL().hasPermission(auth, Item.READ)) {
+                            if (SEND_TO_USERS_WITHOUT_READ) {
+                                listener.getLogger().printf("Warning: user %s has no permission to view %s, but sending mail anyway%n", userAddress, run.getFullDisplayName());
+                            } else {
+                                listener.getLogger().printf("Not sending mail to user %s with no permission to view %s", userAddress, run.getFullDisplayName());
+                                continue;
+                            }
+                        }
+                    } catch (UsernameNotFoundException x) {
+                        if (SEND_TO_UNKNOWN_USERS) {
+                            listener.getLogger().printf("Warning: %s is not a recognized user, but sending mail anyway%n", userAddress);
+                        } else {
+                            listener.getLogger().printf("Not sending mail to unregistered user %s%n", userAddress);
+                            continue;
+                        }
+                    }
                     debug.send("Adding %s with address %s", user.getFullName(), userAddress);
                     EmailRecipientUtils.addAddressesFromRecipientList(to, cc, bcc, userAddress, env, listener);
                 } else {
diff --git a/src/main/java/hudson/plugins/emailext/plugins/recipients/RequesterRecipientProvider.java b/src/main/java/hudson/plugins/emailext/plugins/recipients/RequesterRecipientProvider.java
index 4aa68dc5..8e52e5d6 100644
--- a/src/main/java/hudson/plugins/emailext/plugins/recipients/RequesterRecipientProvider.java
+++ b/src/main/java/hudson/plugins/emailext/plugins/recipients/RequesterRecipientProvider.java
@@ -55,15 +55,15 @@ public void send(final String format, final Object... args) {
             cur = p.getBuildByNumber(upc.getUpstreamBuild());
             upc = cur.getCause(Cause.UpstreamCause.class);
         }
-        addUserTriggeringTheBuild(cur, to, cc, bcc, env, context.getListener(), debug);
+        addUserTriggeringTheBuild(cur, to, cc, bcc, env, context, debug);
     }
 
     private static void addUserTriggeringTheBuild(Run<?, ?> run, Set<InternetAddress> to,
-        Set<InternetAddress> cc, Set<InternetAddress> bcc, EnvVars env, TaskListener listener, RecipientProviderUtilities.IDebug debug) {
+        Set<InternetAddress> cc, Set<InternetAddress> bcc, EnvVars env, final ExtendedEmailPublisherContext context, RecipientProviderUtilities.IDebug debug) {
 
         final User user = RecipientProviderUtilities.getUserTriggeringTheBuild(run);
         if (user != null) {
-            RecipientProviderUtilities.addUsers(Collections.singleton(user), listener, env, to, cc, bcc, debug);
+            RecipientProviderUtilities.addUsers(Collections.singleton(user), context, env, to, cc, bcc, debug);
         }
     }
 
diff --git a/src/main/java/hudson/plugins/emailext/plugins/recipients/UpstreamComitterRecipientProvider.java b/src/main/java/hudson/plugins/emailext/plugins/recipients/UpstreamComitterRecipientProvider.java
index 1990ef52..fc8586cd 100644
--- a/src/main/java/hudson/plugins/emailext/plugins/recipients/UpstreamComitterRecipientProvider.java
+++ b/src/main/java/hudson/plugins/emailext/plugins/recipients/UpstreamComitterRecipientProvider.java
@@ -6,7 +6,6 @@
 import hudson.model.Cause;
 import hudson.model.Job;
 import hudson.model.Run;
-import hudson.model.TaskListener;
 import hudson.model.User;
 import hudson.plugins.emailext.ExtendedEmailPublisherContext;
 import hudson.plugins.emailext.ExtendedEmailPublisherDescriptor;
@@ -60,7 +59,7 @@ public void send(final String format, final Object... args) {
             }
             cur = p.getBuildByNumber(upc.getUpstreamBuild());
             upc = cur.getCause(Cause.UpstreamCause.class);
-            addUpstreamCommittersTriggeringBuild(cur, to, cc, bcc, env, context.getListener(), debug);
+            addUpstreamCommittersTriggeringBuild(cur, to, cc, bcc, env, context, debug);
         }
     }
 
@@ -74,7 +73,7 @@ public void send(final String format, final Object... args) {
      * @param env
      * @param listener
      */
-    private void addUpstreamCommittersTriggeringBuild(Run<?, ?> build, Set<InternetAddress> to, Set<InternetAddress> cc, Set<InternetAddress> bcc, EnvVars env, TaskListener listener, RecipientProviderUtilities.IDebug debug) {
+    private void addUpstreamCommittersTriggeringBuild(Run<?, ?> build, Set<InternetAddress> to, Set<InternetAddress> cc, Set<InternetAddress> bcc, EnvVars env, final ExtendedEmailPublisherContext context, RecipientProviderUtilities.IDebug debug) {
         debug.send("Adding upstream committer from job %s with build number %s", build.getParent().getDisplayName(), build.getNumber());
 
         List<ChangeLogSet<?>> changeSets = new ArrayList<>();
@@ -87,14 +86,14 @@ private void addUpstreamCommittersTriggeringBuild(Run<?, ?> build, Set<InternetA
                 Method m = build.getClass().getMethod("getChangeSets");
                 changeSets = (List<ChangeLogSet<? extends ChangeLogSet.Entry>>)m.invoke(build);
             } catch (NoSuchMethodException | InvocationTargetException | IllegalAccessException e) {
-                listener.getLogger().print("Could not add upstream committers, build type does not provide change set");
+                context.getListener().getLogger().print("Could not add upstream committers, build type does not provide change set");
             }
         }
 
         if(!changeSets.isEmpty()) {
             for(ChangeLogSet<? extends ChangeLogSet.Entry> changeSet : changeSets) {
                 for(ChangeLogSet.Entry change : changeSet) {
-                    addUserFromChangeSet(change, to, cc, bcc, env, listener, debug);
+                    addUserFromChangeSet(change, to, cc, bcc, env, context, debug);
                 }
             }
         }
@@ -109,9 +108,9 @@ private void addUpstreamCommittersTriggeringBuild(Run<?, ?> build, Set<InternetA
      * @param env The build environment
      * @param listener The listener for logging
      */
-    private void addUserFromChangeSet(ChangeLogSet.Entry change, Set<InternetAddress> to, Set<InternetAddress> cc, Set<InternetAddress> bcc, EnvVars env, TaskListener listener, RecipientProviderUtilities.IDebug debug) {
+    private void addUserFromChangeSet(ChangeLogSet.Entry change, Set<InternetAddress> to, Set<InternetAddress> cc, Set<InternetAddress> bcc, EnvVars env, final ExtendedEmailPublisherContext context, RecipientProviderUtilities.IDebug debug) {
         User user = change.getAuthor();
-        RecipientProviderUtilities.addUsers(Collections.singleton(user), listener, env, to, cc, bcc, debug);
+        RecipientProviderUtilities.addUsers(Collections.singleton(user), context, env, to, cc, bcc, debug);
     }
 
     @Extension
