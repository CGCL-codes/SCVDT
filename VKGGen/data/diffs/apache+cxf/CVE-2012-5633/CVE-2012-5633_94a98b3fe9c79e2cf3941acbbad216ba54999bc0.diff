diff --git a/api/src/main/java/org/apache/cxf/interceptor/URIMappingInterceptor.java b/api/src/main/java/org/apache/cxf/interceptor/URIMappingInterceptor.java
index 03c0bd48c28..b5ec6877ae4 100644
--- a/api/src/main/java/org/apache/cxf/interceptor/URIMappingInterceptor.java
+++ b/api/src/main/java/org/apache/cxf/interceptor/URIMappingInterceptor.java
@@ -60,6 +60,7 @@
     
     private static final Logger LOG = LogUtils.getL7dLogger(URIMappingInterceptor.class);
     
+    @Deprecated
     public URIMappingInterceptor() {
         super(Phase.UNMARSHAL);
     }
diff --git a/rt/bindings/soap/src/main/java/org/apache/cxf/binding/soap/SoapBindingFactory.java b/rt/bindings/soap/src/main/java/org/apache/cxf/binding/soap/SoapBindingFactory.java
index d5afa6745a5..656e13da05e 100644
--- a/rt/bindings/soap/src/main/java/org/apache/cxf/binding/soap/SoapBindingFactory.java
+++ b/rt/bindings/soap/src/main/java/org/apache/cxf/binding/soap/SoapBindingFactory.java
@@ -88,7 +88,6 @@
 import org.apache.cxf.interceptor.InterceptorProvider;
 import org.apache.cxf.interceptor.StaxInInterceptor;
 import org.apache.cxf.interceptor.StaxOutInterceptor;
-import org.apache.cxf.interceptor.URIMappingInterceptor;
 import org.apache.cxf.interceptor.WrappedOutInterceptor;
 import org.apache.cxf.message.Message;
 import org.apache.cxf.phase.Phase;
@@ -435,11 +434,6 @@ public Binding createBinding(BindingInfo binding) {
         sb.getOutFaultInterceptors().add(new SoapOutInterceptor(getBus()));
         sb.getOutFaultInterceptors().add(SoapHeaderOutFilterInterceptor.INSTANCE);
 
-        // REVISIT: The phase interceptor chain seems to freak out if this added
-        // first. Not sure what the deal is at the moment, I suspect the
-        // ordering algorithm needs to be improved
-        sb.getInInterceptors().add(new URIMappingInterceptor());
-
         if (version.getVersion() == 1.1) {
             sb.getInFaultInterceptors().add(new Soap11FaultInInterceptor());
             sb.getOutFaultInterceptors().add(new Soap11FaultOutInterceptor());
diff --git a/rt/bindings/xml/src/main/java/org/apache/cxf/binding/xml/XMLBindingFactory.java b/rt/bindings/xml/src/main/java/org/apache/cxf/binding/xml/XMLBindingFactory.java
index bfd7ce5fee6..2ceb532e7f3 100644
--- a/rt/bindings/xml/src/main/java/org/apache/cxf/binding/xml/XMLBindingFactory.java
+++ b/rt/bindings/xml/src/main/java/org/apache/cxf/binding/xml/XMLBindingFactory.java
@@ -37,7 +37,6 @@
 import org.apache.cxf.interceptor.DocLiteralInInterceptor;
 import org.apache.cxf.interceptor.StaxInInterceptor;
 import org.apache.cxf.interceptor.StaxOutInterceptor;
-import org.apache.cxf.interceptor.URIMappingInterceptor;
 import org.apache.cxf.interceptor.WrappedOutInterceptor;
 import org.apache.cxf.service.model.BindingInfo;
 import org.apache.cxf.service.model.BindingOperationInfo;
@@ -65,7 +64,6 @@ public Binding createBinding(BindingInfo binding) {
         
         xb.getInInterceptors().add(new AttachmentInInterceptor());    
         xb.getInInterceptors().add(new StaxInInterceptor());
-        xb.getInInterceptors().add(new URIMappingInterceptor());
         xb.getInInterceptors().add(new DocLiteralInInterceptor());
         xb.getInInterceptors().add(new XMLMessageInInterceptor());
         
diff --git a/rt/databinding/aegis/src/test/java/org/apache/cxf/aegis/jaxws/AegisJaxwsGetTest.java b/rt/databinding/aegis/src/test/java/org/apache/cxf/aegis/jaxws/AegisJaxwsGetTest.java
index 08b18337bc5..75a8f1c7496 100644
--- a/rt/databinding/aegis/src/test/java/org/apache/cxf/aegis/jaxws/AegisJaxwsGetTest.java
+++ b/rt/databinding/aegis/src/test/java/org/apache/cxf/aegis/jaxws/AegisJaxwsGetTest.java
@@ -34,6 +34,7 @@
 import org.apache.cxf.endpoint.Server;
 import org.apache.cxf.frontend.ServerFactoryBean;
 import org.apache.cxf.interceptor.AbstractInDatabindingInterceptor;
+import org.apache.cxf.interceptor.URIMappingInterceptor;
 import org.apache.cxf.jaxws.JaxWsServerFactoryBean;
 import org.apache.cxf.staxutils.StaxUtils;
 import org.apache.cxf.test.AbstractCXFTest;
@@ -50,12 +51,14 @@
     public static final String PORT = TestUtil.getPortNumber(AegisJaxwsGetTest.class); 
     
     
+    @SuppressWarnings("deprecation")
     @Before
     public void before() throws Exception {
         JaxWsServerFactoryBean sf = new JaxWsServerFactoryBean();
         sf.setAddress("http://localhost:" + PORT + "/Echo");
         sf.setDataBinding(new AegisDatabinding());
         sf.setServiceBean(new Echo());
+        sf.getInInterceptors().add(new URIMappingInterceptor());
         Server server = sf.create();
         // turn off nanny in URIMappingInterceptor
         server.getEndpoint()
@@ -65,6 +68,7 @@ public void before() throws Exception {
         sf2.setAddress("http://localhost:" + PORT + "/SimpleEcho");
         sf2.setDataBinding(new AegisDatabinding());
         sf2.setServiceBean(new Echo());
+        sf2.getInInterceptors().add(new URIMappingInterceptor());
         server = sf2.create();
         // turn off nanny in URIMappingInterceptor
         server.getEndpoint()
diff --git a/rt/frontend/jaxws/src/test/java/org/apache/cxf/jaxws/URIMappingInterceptorDocLitTest.java b/rt/frontend/jaxws/src/test/java/org/apache/cxf/jaxws/URIMappingInterceptorDocLitTest.java
index 6dbc54d4ea1..35a5fc3e625 100644
--- a/rt/frontend/jaxws/src/test/java/org/apache/cxf/jaxws/URIMappingInterceptorDocLitTest.java
+++ b/rt/frontend/jaxws/src/test/java/org/apache/cxf/jaxws/URIMappingInterceptorDocLitTest.java
@@ -45,6 +45,7 @@
 import org.junit.Before;
 import org.junit.Test;
 
+@SuppressWarnings("deprecation")
 public class URIMappingInterceptorDocLitTest extends AbstractCXFTest {
     
     Message message;
diff --git a/rt/frontend/jaxws/src/test/java/org/apache/cxf/jaxws/URIMappingInterceptorRPCTest.java b/rt/frontend/jaxws/src/test/java/org/apache/cxf/jaxws/URIMappingInterceptorRPCTest.java
index f41ad14ccd7..c9a81837e8c 100644
--- a/rt/frontend/jaxws/src/test/java/org/apache/cxf/jaxws/URIMappingInterceptorRPCTest.java
+++ b/rt/frontend/jaxws/src/test/java/org/apache/cxf/jaxws/URIMappingInterceptorRPCTest.java
@@ -45,6 +45,7 @@
 import org.junit.Before;
 import org.junit.Test;
 
+@SuppressWarnings("deprecation")
 public class URIMappingInterceptorRPCTest extends AbstractCXFTest {
     
     Message message;
diff --git a/systests/jaxws/src/test/java/org/apache/cxf/systest/jaxws/Server.java b/systests/jaxws/src/test/java/org/apache/cxf/systest/jaxws/Server.java
index abcee710134..004eb6ec512 100644
--- a/systests/jaxws/src/test/java/org/apache/cxf/systest/jaxws/Server.java
+++ b/systests/jaxws/src/test/java/org/apache/cxf/systest/jaxws/Server.java
@@ -20,6 +20,8 @@
 package org.apache.cxf.systest.jaxws;
 
 import java.net.URL;
+import java.util.LinkedList;
+import java.util.List;
 import java.util.concurrent.Future;
 
 import javax.jws.WebService;
@@ -27,6 +29,7 @@
 import javax.xml.ws.Endpoint;
 
 import org.apache.cxf.annotations.UseAsyncMethod;
+import org.apache.cxf.interceptor.URIMappingInterceptor;
 import org.apache.cxf.jaxws.EndpointImpl;
 import org.apache.cxf.jaxws.ServerAsyncResponse;
 import org.apache.cxf.testutil.common.AbstractBusTestServerBase;
@@ -40,6 +43,9 @@
     static final String BARE_PORT = allocatePort(Server.class, 1);
     static final String BOGUS_REAL_PORT = allocatePort(Server.class, 2);
 
+    List<Endpoint> eps = new LinkedList<Endpoint>();
+
+    @SuppressWarnings("deprecation")
     protected void run() {
         URL url = getClass().getResource("fault-stack-trace.xml");
         if (url != null) {
@@ -50,23 +56,25 @@ protected void run() {
 
         implementor = new AsyncGreeter();
         address = "http://localhost:" + PORT + "/SoapContext/AsyncSoapPort";
-        Endpoint.publish(address, implementor);
+        eps.add(Endpoint.publish(address, implementor));
         
         implementor = new GreeterImplMultiPort();
         address = "http://localhost:" + PORT + "/MultiPort/GreeterPort";
-        Endpoint.publish(address, implementor);
+        eps.add(Endpoint.publish(address, implementor));
 
         implementor = new DocLitBareGreeterMultiPort();
         address = "http://localhost:" + PORT + "/MultiPort/DocBarePort";
-        Endpoint.publish(address, implementor);
+        eps.add(Endpoint.publish(address, implementor));
         
         implementor = new GreeterImpl();
         address = "http://localhost:" + PORT + "/SoapContext/SoapPort";
-        Endpoint.publish(address, implementor);
+        Endpoint ep = Endpoint.publish(address, implementor);
+        ((EndpointImpl)ep).getService().getInInterceptors().add(new URIMappingInterceptor());
+        eps.add(ep);
 
         implementor = new RefGreeterImpl();
         address = "http://localhost:" + PORT + "/SoapContext/SoapPort2";
-        Endpoint.publish(address, implementor);
+        eps.add(Endpoint.publish(address, implementor));
         
         //publish port with soap12 binding
         address = "http://localhost:" + PORT + "/SoapContext/SoapPort";
@@ -75,17 +83,25 @@ protected void run() {
         EndpointImpl e = (EndpointImpl) Endpoint.create(javax.xml.ws.soap.SOAPBinding.SOAP12HTTP_BINDING, 
                                                         new Greeter12Impl());
         e.publish(address);
+        eps.add(e);
         
         implementor = new DocLitBareGreeterImpl();
         address = "http://localhost:" + BARE_PORT + "/SoapContext/SoapPort";
-        Endpoint.publish(address, implementor);
+        eps.add(Endpoint.publish(address, implementor));
         
         
         implementor = new GreeterImplBogus();
         address = "http://localhost:" + BOGUS_REAL_PORT + "/SoapContext/SoapPort";
-        Endpoint.publish(address, implementor);
+        eps.add(Endpoint.publish(address, implementor));
     }
     
+    public void tearDown() {
+        while (!eps.isEmpty()) {
+            Endpoint ep = eps.remove(0);
+            ep.stop();
+        }
+    }    
+    
     @WebService(endpointInterface = "org.apache.hello_world_soap_http.Greeter",
                 targetNamespace = "http://apache.org/hello_world_soap_http")
     public class Greeter12Impl extends BaseGreeterImpl {
diff --git a/systests/jaxws/src/test/java/org/apache/cxf/systest/jaxws/ServerGreeterNoWsdl.java b/systests/jaxws/src/test/java/org/apache/cxf/systest/jaxws/ServerGreeterNoWsdl.java
index bb731ed1377..133f018bdf9 100644
--- a/systests/jaxws/src/test/java/org/apache/cxf/systest/jaxws/ServerGreeterNoWsdl.java
+++ b/systests/jaxws/src/test/java/org/apache/cxf/systest/jaxws/ServerGreeterNoWsdl.java
@@ -26,11 +26,14 @@
 
 import org.apache.cxf.frontend.WSDLGetUtils;
 import org.apache.cxf.greeter_control.GreeterImplNoWsdl;
+import org.apache.cxf.interceptor.URIMappingInterceptor;
+import org.apache.cxf.jaxws.EndpointImpl;
 import org.apache.cxf.testutil.common.AbstractBusTestServerBase;
 
 public class ServerGreeterNoWsdl extends AbstractBusTestServerBase {
     static final String PORT = allocatePort(ServerGreeterNoWsdl.class);
 
+    @SuppressWarnings("deprecation")
     protected void run() {
         Object implementor = new GreeterImplNoWsdl();
         String address = "http://localhost:" + PORT + "/SoapContext/GreeterPort";
@@ -39,6 +42,7 @@ protected void run() {
         props.put(WSDLGetUtils.WSDL_CREATE_IMPORTS, Boolean.TRUE);
         ep.setProperties(props);
         ep.publish(address);
+        ((EndpointImpl)ep).getService().getInInterceptors().add(new URIMappingInterceptor());
     }
 
     public static void main(String[] args) {
diff --git a/systests/jaxws/src/test/java/org/apache/cxf/systest/jaxws/ServerMisc.java b/systests/jaxws/src/test/java/org/apache/cxf/systest/jaxws/ServerMisc.java
index 6ebd5a95b0f..f02679178cc 100644
--- a/systests/jaxws/src/test/java/org/apache/cxf/systest/jaxws/ServerMisc.java
+++ b/systests/jaxws/src/test/java/org/apache/cxf/systest/jaxws/ServerMisc.java
@@ -23,6 +23,7 @@
 
 import org.apache.cxf.anonymous_complex_type.AnonymousComplexTypeImpl;
 import org.apache.cxf.binding.soap.saaj.SAAJInInterceptor;
+import org.apache.cxf.interceptor.URIMappingInterceptor;
 import org.apache.cxf.jaxb_element_test.JaxbElementTestImpl;
 import org.apache.cxf.jaxws.EndpointImpl;
 import org.apache.cxf.jaxws.JAXWSMethodInvoker;
@@ -51,6 +52,7 @@
     public static final String DOCLIT_CODEFIRST_SETTINGS_URL = 
         "http://localhost:" + PORT + "/DocLitWrappedCodeFirstServiceSettings/";
     
+    @SuppressWarnings("deprecation")
     protected void run() {
         
         Factory factory = new PerRequestFactory(DocLitWrappedCodeFirstServiceImpl.class);
@@ -86,6 +88,7 @@ public Long getWrapperPartMinOccurs(MessagePartInfo mpi) {
         Object implementor7 = new DocLitBareCodeFirstServiceImpl();
         EndpointImpl ep = (EndpointImpl)Endpoint.publish(DOCLITBARE_CODEFIRST_URL, implementor7);
         ep.getServer().getEndpoint().getInInterceptors().add(new SAAJInInterceptor());
+        ep.getServer().getEndpoint().getInInterceptors().add(new URIMappingInterceptor());
 
         
         Object implementor6 = new InterfaceInheritTestImpl();
diff --git a/systests/jaxws/src/test/java/org/apache/cxf/systest/jaxws/ServerXMLBinding.java b/systests/jaxws/src/test/java/org/apache/cxf/systest/jaxws/ServerXMLBinding.java
index 478c554110e..fab5f9d2ba0 100644
--- a/systests/jaxws/src/test/java/org/apache/cxf/systest/jaxws/ServerXMLBinding.java
+++ b/systests/jaxws/src/test/java/org/apache/cxf/systest/jaxws/ServerXMLBinding.java
@@ -19,8 +19,13 @@
 
 package org.apache.cxf.systest.jaxws;
 
+import java.util.LinkedList;
+import java.util.List;
+
 import javax.xml.ws.Endpoint;
 
+import org.apache.cxf.interceptor.URIMappingInterceptor;
+import org.apache.cxf.jaxws.EndpointImpl;
 import org.apache.cxf.testutil.common.AbstractBusTestServerBase;
 import org.apache.headers.HeaderTesterImpl;
 import org.apache.hello_world_xml_http.bare.GreeterImpl;
@@ -32,26 +37,38 @@
     static final String WRAP_PORT = allocatePort(ServerXMLBinding.class, 1);
     static final String MIX_PORT = allocatePort(ServerXMLBinding.class, 2);
 
+    List<Endpoint> eps = new LinkedList<Endpoint>();
+    
+    @SuppressWarnings("deprecation")
     protected void run() {
         Object implementor = new GreeterImpl();
         String address = "http://localhost:" + REG_PORT + "/XMLService/XMLPort";
-        Endpoint.publish(address, implementor);
+        eps.add(Endpoint.publish(address, implementor));
+        
+        ((EndpointImpl)eps.get(0)).getService().getInInterceptors().add(new URIMappingInterceptor());
 
         Object implementor1 = new org.apache.hello_world_xml_http.wrapped.GreeterImpl();
         address = "http://localhost:" + WRAP_PORT + "/XMLService/XMLPort";
-        Endpoint.publish(address, implementor1);
+        eps.add(Endpoint.publish(address, implementor1));
 
         Object faultImplementor = new GreeterFaultImpl();
         String faultAddress = "http://localhost:" + REG_PORT + "/XMLService/XMLFaultPort";
-        Endpoint.publish(faultAddress, faultImplementor);
+        eps.add(Endpoint.publish(faultAddress, faultImplementor));
 
         Object implementor2 = new HeaderTesterImpl();
         address = "http://localhost:" + REG_PORT + "/XMLContext/XMLPort";
-        Endpoint.publish(address, implementor2);
+        eps.add(Endpoint.publish(address, implementor2));
         
         Object implementor3 = new org.apache.hello_world_xml_http.mixed.GreeterImpl();
         address = "http://localhost:" + MIX_PORT + "/XMLService/XMLPort";
-        Endpoint.publish(address, implementor3);
+        eps.add(Endpoint.publish(address, implementor3));
+    }
+    
+    public void tearDown() {
+        while (!eps.isEmpty()) {
+            Endpoint ep = eps.remove(0);
+            ep.stop();
+        }
     }
 
     public static void main(String[] args) {
diff --git a/systests/jaxws/src/test/java/org/apache/cxf/systest/jaxws/httpget/JavaFirstHttpGetTest.java b/systests/jaxws/src/test/java/org/apache/cxf/systest/jaxws/httpget/JavaFirstHttpGetTest.java
index ec1967de6c9..8a8203bbba9 100644
--- a/systests/jaxws/src/test/java/org/apache/cxf/systest/jaxws/httpget/JavaFirstHttpGetTest.java
+++ b/systests/jaxws/src/test/java/org/apache/cxf/systest/jaxws/httpget/JavaFirstHttpGetTest.java
@@ -26,6 +26,7 @@
 import org.apache.cxf.helpers.IOUtils;
 import org.apache.cxf.interceptor.LoggingInInterceptor;
 import org.apache.cxf.interceptor.LoggingOutInterceptor;
+import org.apache.cxf.interceptor.URIMappingInterceptor;
 import org.apache.cxf.jaxws.JaxWsServerFactoryBean;
 import org.apache.cxf.testutil.common.AbstractBusClientServerTestBase;
 import org.apache.cxf.testutil.common.AbstractBusTestServerBase;
@@ -41,10 +42,12 @@
             + PORT + "/JavaFirstHttpGetTest";
     
     public static class Server extends AbstractBusTestServerBase {        
+        @SuppressWarnings("deprecation")
         protected void run() {
             MyImplementation implementor = new MyImplementation();
             JaxWsServerFactoryBean svrFactory = new JaxWsServerFactoryBean();
             svrFactory.setServiceClass(MyInterface.class);
+            svrFactory.getInInterceptors().add(new URIMappingInterceptor());
             svrFactory.setAddress(BASE_URL);
             svrFactory.setServiceBean(implementor);
             svrFactory.getInInterceptors().add(new LoggingInInterceptor());
diff --git a/systests/transports/src/test/java/org/apache/cxf/systest/servlet/SpringAutoPublishServletTest.java b/systests/transports/src/test/java/org/apache/cxf/systest/servlet/SpringAutoPublishServletTest.java
index 0ab9f4fc13b..b2b82c7594e 100644
--- a/systests/transports/src/test/java/org/apache/cxf/systest/servlet/SpringAutoPublishServletTest.java
+++ b/systests/transports/src/test/java/org/apache/cxf/systest/servlet/SpringAutoPublishServletTest.java
@@ -71,33 +71,7 @@ public void invokingEndpoint(WebRequest req) throws Exception {
         assertValid("/s:Envelope/s:Body", doc);
         assertValid("//h:sayHiResponse", doc);
     }
-    
-    @Test
-    public void testGreetMeGetRequest() throws Exception {
-        ServletUnitClient client = newClient();
-        client.setExceptionsThrownOnErrorStatus(true);
-        
-        WebRequest req = 
-            new GetMethodQueryWebRequest(CONTEXT_URL + "/services/SOAPService/greetMe?"
-                                         + "requestType=hello");
-        
-        WebResponse response = client.getResponse(req);        
-        Document doc = DOMUtils.readXml(response.getInputStream());
-        addNamespace("h", "http://apache.org/hello_world_soap_http/types");
-        assertValid("/s:Envelope/s:Body", doc);
-        assertValid("//h:greetMeResponse", doc);
-        
-        req = 
-            new GetMethodQueryWebRequest(CONTEXT_URL + "/services/DerivedGreeterService/greetMe?"
-                                         + "requestType=hello");
-        
-        response = client.getResponse(req);        
-        doc = DOMUtils.readXml(response.getInputStream());
-        addNamespace("h", "http://apache.org/hello_world_soap_http/types");
-        assertValid("/s:Envelope/s:Body", doc);
-        assertValid("//h:greetMeResponse", doc);
-    }
-    
+     
         
     @Test
     public void testGetWSDL() throws Exception {
diff --git a/systests/transports/src/test/java/org/apache/cxf/systest/servlet/SpringServletTest.java b/systests/transports/src/test/java/org/apache/cxf/systest/servlet/SpringServletTest.java
index 420913e6d90..9bcab7c9473 100644
--- a/systests/transports/src/test/java/org/apache/cxf/systest/servlet/SpringServletTest.java
+++ b/systests/transports/src/test/java/org/apache/cxf/systest/servlet/SpringServletTest.java
@@ -74,33 +74,7 @@ public void invokingEndpoint(WebRequest req) throws Exception {
         assertValid("/s:Envelope/s:Body", doc);
         assertValid("//h:sayHiResponse", doc);
     }
-    
-    @Test
-    public void testGreetMeGetRequest() throws Exception {
-        ServletUnitClient client = newClient();
-        client.setExceptionsThrownOnErrorStatus(true);
-        
-        WebRequest req = 
-            new GetMethodQueryWebRequest(CONTEXT_URL + "/services/Greeter/greetMe?"
-                                         + "requestType=hello");
-        
-        WebResponse response = client.getResponse(req);        
-        Document doc = DOMUtils.readXml(response.getInputStream());
-        addNamespace("h", "http://apache.org/hello_world_soap_http/types");
-        assertValid("/s:Envelope/s:Body", doc);
-        assertValid("//h:greetMeResponse", doc);
-        
-        req = 
-            new GetMethodQueryWebRequest(CONTEXT_URL + "/services/Greeter1/greetMe?"
-                                         + "requestType=hello");
-        
-        response = client.getResponse(req);        
-        doc = DOMUtils.readXml(response.getInputStream());
-        addNamespace("h", "http://apache.org/hello_world_soap_http/types");
-        assertValid("/s:Envelope/s:Body", doc);
-        assertValid("//h:greetMeResponse", doc);
-    }
-    
+     
         
     @Test
     public void testGetWSDL() throws Exception {
diff --git a/systests/uncategorized/src/test/java/org/apache/cxf/systest/soap12/Server.java b/systests/uncategorized/src/test/java/org/apache/cxf/systest/soap12/Server.java
index f1c62e3c784..765b0ab2cbe 100644
--- a/systests/uncategorized/src/test/java/org/apache/cxf/systest/soap12/Server.java
+++ b/systests/uncategorized/src/test/java/org/apache/cxf/systest/soap12/Server.java
@@ -21,18 +21,27 @@
 
 import javax.xml.ws.Endpoint;
 
+import org.apache.cxf.interceptor.URIMappingInterceptor;
+import org.apache.cxf.jaxws.EndpointImpl;
 import org.apache.cxf.testutil.common.AbstractBusTestServerBase;
 
 public class Server extends AbstractBusTestServerBase {
     public static final String PORT = allocatePort(Server.class);
 
+    Endpoint ep;
 
+    @SuppressWarnings("deprecation")
     protected void run()  {    
         Object implementor = new GreeterImpl();
         String address = "http://localhost:" + PORT + "/SoapContext/SoapPort";
-        Endpoint.publish(address, implementor);
+        ep = Endpoint.publish(address, implementor);
+        EndpointImpl epi = (EndpointImpl)ep;
+        epi.getService().getInInterceptors().add(new URIMappingInterceptor());
     }
 
+    public void tearDown() throws Exception {
+        ep.stop();
+    }
 
     public static void main(String[] args) {
         try {
