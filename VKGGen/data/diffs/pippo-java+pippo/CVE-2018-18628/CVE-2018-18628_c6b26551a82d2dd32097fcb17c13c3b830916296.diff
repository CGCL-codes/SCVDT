diff --git a/CHANGELOG.md b/CHANGELOG.md
index 233d1a07..f4557660 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -5,9 +5,10 @@ This project adheres to [Semantic Versioning](http://semver.org/).
 ### [Unreleased][unreleased]
 
 #### Fixed
+- [#458]: Java deserialization vulnerability in SerializationSessionDataTranscoder.decode()
 
 #### Changed
-- [#466]: Updated `FastJson` to latest version 1.2.51
+- [#466]: Updated `FastJSON` to latest version 1.2.51
 
 #### Added
 
@@ -534,8 +535,10 @@ Initial release.
 [0.3.0]: https://github.com/decebals/pippo/compare/pippo-parent-0.2.0...pippo-parent-0.3.0
 [0.2.0]: https://github.com/decebals/pippo/compare/pippo-parent-0.1.0...pippo-parent-0.2.0
 
+[#466]: https://github.com/pippo-java/pippo/issues/466
 [#460]: https://github.com/pippo-java/pippo/issues/460
 [#459]: https://github.com/pippo-java/pippo/issues/459
+[#458]: https://github.com/pippo-java/pippo/issues/458
 [#456]: https://github.com/pippo-java/pippo/pull/456
 [#452]: https://github.com/pippo-java/pippo/pull/452
 [#447]: https://github.com/pippo-java/pippo/pull/447
diff --git a/pippo-core/src/main/java/ro/pippo/core/util/WhitelistObjectInputStream.java b/pippo-core/src/main/java/ro/pippo/core/util/WhitelistObjectInputStream.java
new file mode 100644
index 00000000..fd100cad
--- /dev/null
+++ b/pippo-core/src/main/java/ro/pippo/core/util/WhitelistObjectInputStream.java
@@ -0,0 +1,83 @@
+/*
+ * Copyright (C) 2016 the original author or authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package ro.pippo.core.util;
+
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.InvalidClassException;
+import java.io.ObjectInputStream;
+import java.io.ObjectStreamClass;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+import java.util.Properties;
+
+import static ro.pippo.core.util.StringUtils.isNullOrEmpty;
+
+/**
+ * @author idealzh
+ */
+public class WhitelistObjectInputStream extends ObjectInputStream {
+    private static List<String> whiteClassNames = new ArrayList<String>();
+
+    public WhitelistObjectInputStream(InputStream in) throws IOException {
+        super(in);
+
+        whiteClassNames.add("ro.pippo.session.DefaultSessionData");
+        whiteClassNames.add("java.util.HashMap");
+        whiteClassNames.add("ro.pippo.core.Flash");
+        whiteClassNames.add("java.util.ArrayList");
+    }
+
+    protected Class<?> resolveClass(ObjectStreamClass descriptor) throws ClassNotFoundException, IOException {
+        String className = descriptor.getName();
+        if (isNullOrEmpty(className) && !isWhiteListed(className)) {
+            throw new InvalidClassException("Unauthorized deserialization attempt", descriptor.getName());
+        } else {
+            return super.resolveClass(descriptor);
+        }
+    }
+
+    private boolean isWhiteListed(String className) {
+        for (Object name : whiteClassNames) {
+            if (name.equals(className)) return true;
+        }
+        return false;
+    }
+
+    /**
+     * Load the whitelist from the properties file
+     */
+    static void loadWhitelist() {
+        Properties whitelistProperties = new Properties();
+        InputStream stream = null;
+        try {
+            stream =  WhitelistObjectInputStream.class.getResourceAsStream("src/main/resources/pippo/whitelist-serialization.txt");
+            whitelistProperties.load(stream);
+        } catch (IOException e) {
+            throw new RuntimeException("Error loading the whitelist-serialization.properties file", e);
+        } finally {
+            if (stream != null) {
+                try {
+                    stream.close();
+                } catch (IOException e) {
+                    throw new RuntimeException("Error closing the resource-serialization.properties file", e);
+                }
+            }
+        }
+        Collections.addAll(whiteClassNames, whitelistProperties.getProperty("whitelist").split(","));
+    }
+}
diff --git a/pippo-session-parent/pippo-session/src/main/java/ro/pippo/session/SerializationSessionDataTranscoder.java b/pippo-session-parent/pippo-session/src/main/java/ro/pippo/session/SerializationSessionDataTranscoder.java
index 3510839e..5d103da0 100644
--- a/pippo-session-parent/pippo-session/src/main/java/ro/pippo/session/SerializationSessionDataTranscoder.java
+++ b/pippo-session-parent/pippo-session/src/main/java/ro/pippo/session/SerializationSessionDataTranscoder.java
@@ -16,11 +16,11 @@
 package ro.pippo.session;
 
 import ro.pippo.core.PippoRuntimeException;
+import ro.pippo.core.util.WhitelistObjectInputStream;
 
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
-import java.io.ObjectInputStream;
 import java.io.ObjectOutputStream;
 import java.util.Base64;
 
@@ -48,7 +48,7 @@ public String encode(SessionData sessionData) {
     public SessionData decode(String data) {
         byte[] bytes = Base64.getDecoder().decode(data);
         try (ByteArrayInputStream inputStream = new ByteArrayInputStream(bytes);
-                ObjectInputStream objectInputStream = new ObjectInputStream(inputStream)) {
+             WhitelistObjectInputStream objectInputStream = new WhitelistObjectInputStream(inputStream)) {
             return (SessionData) objectInputStream.readObject();
         } catch (IOException | ClassNotFoundException e) {
             throw new PippoRuntimeException(e, "Cannot deserialize session. A new one will be created.");
