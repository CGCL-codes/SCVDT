diff --git a/itext/src/main/java/com/itextpdf/testutils/CompareTool.java b/itext/src/main/java/com/itextpdf/testutils/CompareTool.java
index 4d982ccd5..ca688a816 100644
--- a/itext/src/main/java/com/itextpdf/testutils/CompareTool.java
+++ b/itext/src/main/java/com/itextpdf/testutils/CompareTool.java
@@ -79,6 +79,7 @@
 import java.io.InputStream;
 import java.io.InputStreamReader;
 import java.io.OutputStream;
+import java.io.StringReader;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Comparator;
@@ -91,6 +92,7 @@
 import java.util.StringTokenizer;
 import java.util.TreeSet;
 
+import javax.xml.XMLConstants;
 import javax.xml.parsers.DocumentBuilder;
 import javax.xml.parsers.DocumentBuilderFactory;
 import javax.xml.parsers.ParserConfigurationException;
@@ -104,6 +106,8 @@
 import org.w3c.dom.Document;
 import org.w3c.dom.Element;
 import org.w3c.dom.Node;
+import org.xml.sax.EntityResolver;
+import org.xml.sax.InputSource;
 import org.xml.sax.SAXException;
 
 /**
@@ -375,6 +379,9 @@ public void writeReportToXml(OutputStream stream) throws ParserConfigurationExce
             xmlReport.appendChild(root);
 
             TransformerFactory tFactory = TransformerFactory.newInstance();
+            try {
+                tFactory.setAttribute(XMLConstants.FEATURE_SECURE_PROCESSING, true);
+            } catch (Exception exc) {}
             Transformer transformer = tFactory.newTransformer();
             transformer.setOutputProperty(OutputKeys.INDENT, "yes");
             DOMSource source = new DOMSource(xmlReport);
@@ -1193,6 +1200,7 @@ public boolean compareXmls(byte[] xml1, byte[] xml2) throws ParserConfigurationE
         dbf.setIgnoringElementContentWhitespace(true);
         dbf.setIgnoringComments(true);
         DocumentBuilder db = dbf.newDocumentBuilder();
+        db.setEntityResolver(new SafeEmptyEntityResolver());
 
         org.w3c.dom.Document doc1 = db.parse(new ByteArrayInputStream(xml1));
         doc1.normalizeDocument();
@@ -1343,6 +1351,7 @@ public boolean compareXmls(String xml1, String xml2) throws ParserConfigurationE
         dbf.setIgnoringElementContentWhitespace(true);
         dbf.setIgnoringComments(true);
         DocumentBuilder db = dbf.newDocumentBuilder();
+        db.setEntityResolver(new SafeEmptyEntityResolver());
 
         org.w3c.dom.Document doc1 = db.parse(new File(xml1));
         doc1.normalizeDocument();
@@ -1486,5 +1495,11 @@ public void renderImage(ImageRenderInfo renderInfo) {
 
     }
 
+    private static class SafeEmptyEntityResolver implements EntityResolver {
+        public InputSource resolveEntity(String publicId, String systemId) throws SAXException, IOException {
+            return new InputSource(new StringReader(""));
+        }
+    }
+
 
 }
diff --git a/itext/src/main/java/com/itextpdf/text/pdf/XfaForm.java b/itext/src/main/java/com/itextpdf/text/pdf/XfaForm.java
index d68f1cdb7..61aa66d54 100644
--- a/itext/src/main/java/com/itextpdf/text/pdf/XfaForm.java
+++ b/itext/src/main/java/com/itextpdf/text/pdf/XfaForm.java
@@ -52,6 +52,7 @@
 import java.io.FileInputStream;
 import java.io.IOException;
 import java.io.InputStream;
+import java.io.StringReader;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.EmptyStackException;
@@ -65,6 +66,7 @@
 import org.w3c.dom.Element;
 import org.w3c.dom.Node;
 import org.w3c.dom.NodeList;
+import org.xml.sax.EntityResolver;
 import org.xml.sax.InputSource;
 import org.xml.sax.SAXException;
 
@@ -141,6 +143,7 @@ else if (xfa instanceof PRStream) {
         DocumentBuilderFactory fact = DocumentBuilderFactory.newInstance();
         fact.setNamespaceAware(true);
         DocumentBuilder db = fact.newDocumentBuilder();
+        db.setEntityResolver(new SafeEmptyEntityResolver());
         domDocument = db.parse(new ByteArrayInputStream(bout.toByteArray()));
         extractNodes();
     }
@@ -1159,6 +1162,7 @@ public void fillXfaForm(InputSource is, boolean readOnly) throws IOException {
     	DocumentBuilder db;
 		try {
 			db = dbf.newDocumentBuilder();
+            db.setEntityResolver(new SafeEmptyEntityResolver());
 	    	Document newdoc = db.parse(is);
 	    	fillXfaForm(newdoc.getDocumentElement(), readOnly);
 		} catch (ParserConfigurationException e) {
@@ -1223,5 +1227,10 @@ private Node getFirstElementNode(Node src) {
         return result;
     }
 
+    private static class SafeEmptyEntityResolver implements EntityResolver {
+        public InputSource resolveEntity(String publicId, String systemId) throws SAXException, IOException {
+            return new InputSource(new StringReader(""));
+        }
+    }
 
 }
diff --git a/itext/src/main/java/com/itextpdf/text/pdf/XfaXmlLocator.java b/itext/src/main/java/com/itextpdf/text/pdf/XfaXmlLocator.java
index 860b8e5e3..84bb0a64a 100644
--- a/itext/src/main/java/com/itextpdf/text/pdf/XfaXmlLocator.java
+++ b/itext/src/main/java/com/itextpdf/text/pdf/XfaXmlLocator.java
@@ -48,6 +48,7 @@
 import org.w3c.dom.Document;
 import org.xml.sax.SAXException;
 
+import javax.xml.XMLConstants;
 import javax.xml.parsers.ParserConfigurationException;
 import javax.xml.transform.Transformer;
 import javax.xml.transform.TransformerConfigurationException;
@@ -101,6 +102,10 @@ public void setDocument(Document document) throws IOException, DocumentException
             ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
             TransformerFactory tf = TransformerFactory.newInstance();
 
+            try {
+                tf.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);
+            } catch (Exception exc) {}
+
             Transformer trans = tf.newTransformer();
 
             //Convert Document to byte[] to save to PDF
diff --git a/itext/src/main/java/com/itextpdf/text/xml/xmp/XmpReader.java b/itext/src/main/java/com/itextpdf/text/xml/xmp/XmpReader.java
index ed789a772..b04daa804 100644
--- a/itext/src/main/java/com/itextpdf/text/xml/xmp/XmpReader.java
+++ b/itext/src/main/java/com/itextpdf/text/xml/xmp/XmpReader.java
@@ -46,6 +46,7 @@
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
+import java.io.StringReader;
 
 import javax.xml.parsers.DocumentBuilder;
 import javax.xml.parsers.DocumentBuilderFactory;
@@ -55,6 +56,8 @@
 import org.w3c.dom.NamedNodeMap;
 import org.w3c.dom.Node;
 import org.w3c.dom.NodeList;
+import org.xml.sax.EntityResolver;
+import org.xml.sax.InputSource;
 import org.xml.sax.SAXException;
 
 import com.itextpdf.text.ExceptionConverter;
@@ -96,6 +99,7 @@ public XmpReader(byte[] bytes) throws SAXException, IOException {
 	        DocumentBuilderFactory fact = DocumentBuilderFactory.newInstance();
 	        fact.setNamespaceAware(true);
 			DocumentBuilder db = fact.newDocumentBuilder();
+			db.setEntityResolver(new SafeEmptyEntityResolver());
 	        ByteArrayInputStream bais = new ByteArrayInputStream(bytes);
 	        domDocument = db.parse(bais);
 		} catch (ParserConfigurationException e) {
@@ -219,4 +223,10 @@ public boolean setNodeText(Document domDocument, Node n, String value) {
         fout.close();
         return fout.toByteArray();
 	}
+
+	private static class SafeEmptyEntityResolver implements EntityResolver {
+		public InputSource resolveEntity(String publicId, String systemId) throws SAXException, IOException {
+			return new InputSource(new StringReader(""));
+		}
+	}
 }
diff --git a/pdfa/src/main/java/com/itextpdf/text/zugferd/InvoiceDOM.java b/pdfa/src/main/java/com/itextpdf/text/zugferd/InvoiceDOM.java
index e727bb016..4e452e812 100644
--- a/pdfa/src/main/java/com/itextpdf/text/zugferd/InvoiceDOM.java
+++ b/pdfa/src/main/java/com/itextpdf/text/zugferd/InvoiceDOM.java
@@ -64,8 +64,10 @@
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
 import java.io.InputStream;
+import java.io.StringReader;
 import java.util.Date;
 
+import javax.xml.XMLConstants;
 import javax.xml.parsers.DocumentBuilder;
 import javax.xml.parsers.DocumentBuilderFactory;
 import javax.xml.parsers.ParserConfigurationException;
@@ -82,6 +84,8 @@
 import org.w3c.dom.NamedNodeMap;
 import org.w3c.dom.Node;
 import org.w3c.dom.NodeList;
+import org.xml.sax.EntityResolver;
+import org.xml.sax.InputSource;
 import org.xml.sax.SAXException;
 
 /**
@@ -121,8 +125,9 @@ public InvoiceDOM(BasicProfile data)
         // loading the XML template
         DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
         DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
+        docBuilder.setEntityResolver(new SafeEmptyEntityResolver());
         InputStream is = StreamUtil.getResourceStream("com/itextpdf/text/zugferd/zugferd-template.xml");
-	doc = docBuilder.parse(is);
+	    doc = docBuilder.parse(is);
         // importing the data
         importData(doc, data);
     }
@@ -1161,11 +1166,14 @@ protected void importLineItemBasic(Element parent,
     public byte[] toXML() throws TransformerException {
         removeEmptyNodes(doc);
         TransformerFactory transformerFactory = TransformerFactory.newInstance();
+        try {
+            transformerFactory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);
+        } catch (Exception exc) {}
         Transformer transformer = transformerFactory.newTransformer();
         transformer.setOutputProperty(OutputKeys.METHOD, "xml");
         transformer.setOutputProperty(OutputKeys.INDENT, "yes");
         transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount", "4");
-	DOMSource source = new DOMSource(doc);
+	    DOMSource source = new DOMSource(doc);
         ByteArrayOutputStream out = new ByteArrayOutputStream();
         Result result = new StreamResult(out);
         transformer.transform(source, result);
@@ -1203,4 +1211,10 @@ protected void check(String s, String message) throws DataIncompleteException {
         if (s == null || s.trim().length() == 0)
             throw new DataIncompleteException(message);
     }
+
+    private static class SafeEmptyEntityResolver implements EntityResolver {
+        public InputSource resolveEntity(String publicId, String systemId) throws SAXException, IOException {
+            return new InputSource(new StringReader(""));
+        }
+    }
 }
