From ba5f826a4629966644dd71481788f0f8f5b2292e Mon Sep 17 00:00:00 2001
From: Jens Deppe <jdeppe@pivotal.io>
Date: Tue, 9 Jan 2018 07:48:52 -0800
Subject: [PATCH 1/5] GEODE-3974: Improve permissions for geode-modules
 functions

---
 .../modules/util/BootstrappingFunction.java   |   9 ++
 .../modules/util/CreateRegionFunction.java    |  13 +-
 .../modules/util/RegionSizeFunction.java      |  10 ++
 ...TouchPartitionedRegionEntriesFunction.java |  10 ++
 .../TouchReplicatedRegionEntriesFunction.java |  10 ++
 .../util/ModuleFunctionsSecurityTest.java     | 148 ++++++++++++++++++
 .../cli/functions/RegionCreateFunction.java   |   9 ++
 7 files changed, 205 insertions(+), 4 deletions(-)
 create mode 100644 extensions/geode-modules/src/test/java/org/apache/geode/modules/util/ModuleFunctionsSecurityTest.java

diff --git a/extensions/geode-modules/src/main/java/org/apache/geode/modules/util/BootstrappingFunction.java b/extensions/geode-modules/src/main/java/org/apache/geode/modules/util/BootstrappingFunction.java
index 82ca3e3bee8..4d64a7817fd 100644
--- a/extensions/geode-modules/src/main/java/org/apache/geode/modules/util/BootstrappingFunction.java
+++ b/extensions/geode-modules/src/main/java/org/apache/geode/modules/util/BootstrappingFunction.java
@@ -17,6 +17,8 @@
 import java.io.DataInput;
 import java.io.DataOutput;
 import java.io.IOException;
+import java.util.Collection;
+import java.util.Collections;
 import java.util.List;
 import java.util.Set;
 
@@ -32,6 +34,8 @@
 import org.apache.geode.distributed.internal.InternalDistributedSystem;
 import org.apache.geode.distributed.internal.MembershipListener;
 import org.apache.geode.distributed.internal.membership.InternalDistributedMember;
+import org.apache.geode.management.internal.security.ResourcePermissions;
+import org.apache.geode.security.ResourcePermission;
 
 public class BootstrappingFunction implements Function, MembershipListener, DataSerializable {
 
@@ -87,6 +91,11 @@ private Cache verifyCacheExists() {
     return cache;
   }
 
+  @Override
+  public Collection<ResourcePermission> getRequiredPermissions(String regionName) {
+    return Collections.singletonList(ResourcePermissions.CLUSTER_MANAGE);
+  }
+
   private void registerAsMembershipListener(Cache cache) {
     DistributionManager dm =
         ((InternalDistributedSystem) cache.getDistributedSystem()).getDistributionManager();
diff --git a/extensions/geode-modules/src/main/java/org/apache/geode/modules/util/CreateRegionFunction.java b/extensions/geode-modules/src/main/java/org/apache/geode/modules/util/CreateRegionFunction.java
index 7c89cb0605e..bf998d17033 100644
--- a/extensions/geode-modules/src/main/java/org/apache/geode/modules/util/CreateRegionFunction.java
+++ b/extensions/geode-modules/src/main/java/org/apache/geode/modules/util/CreateRegionFunction.java
@@ -20,10 +20,10 @@
 import java.io.FileWriter;
 import java.io.IOException;
 import java.io.PrintWriter;
+import java.util.Collection;
+import java.util.Collections;
 import java.util.Properties;
 
-import javax.xml.crypto.Data;
-
 import org.apache.geode.DataSerializable;
 import org.apache.geode.InternalGemFireError;
 import org.apache.geode.cache.AttributesFactory;
@@ -32,8 +32,6 @@
 import org.apache.geode.cache.Declarable;
 import org.apache.geode.cache.Region;
 import org.apache.geode.cache.RegionAttributes;
-import org.apache.geode.cache.RegionFactory;
-import org.apache.geode.cache.RegionShortcut;
 import org.apache.geode.cache.Scope;
 import org.apache.geode.cache.client.ClientCache;
 import org.apache.geode.cache.execute.Function;
@@ -46,6 +44,8 @@
 import org.apache.geode.internal.cache.PartitionedRegion;
 import org.apache.geode.internal.cache.xmlcache.CacheXmlGenerator;
 import org.apache.geode.internal.i18n.LocalizedStrings;
+import org.apache.geode.management.internal.security.ResourcePermissions;
+import org.apache.geode.security.ResourcePermission;
 
 public class CreateRegionFunction implements Function, Declarable, DataSerializable {
 
@@ -96,6 +96,11 @@ public void execute(FunctionContext context) {
     context.getResultSender().lastResult(status);
   }
 
+  @Override
+  public Collection<ResourcePermission> getRequiredPermissions(String regionName) {
+    return Collections.singletonList(ResourcePermissions.DATA_MANAGE);
+  }
+
   private RegionStatus createOrRetrieveRegion(RegionConfiguration configuration) {
     RegionStatus status = null;
     String regionName = configuration.getRegionName();
diff --git a/extensions/geode-modules/src/main/java/org/apache/geode/modules/util/RegionSizeFunction.java b/extensions/geode-modules/src/main/java/org/apache/geode/modules/util/RegionSizeFunction.java
index 328d490b4ab..32f95a33496 100644
--- a/extensions/geode-modules/src/main/java/org/apache/geode/modules/util/RegionSizeFunction.java
+++ b/extensions/geode-modules/src/main/java/org/apache/geode/modules/util/RegionSizeFunction.java
@@ -17,6 +17,8 @@
 import java.io.DataInput;
 import java.io.DataOutput;
 import java.io.IOException;
+import java.util.Collection;
+import java.util.Collections;
 import java.util.Properties;
 
 import org.apache.geode.DataSerializable;
@@ -24,6 +26,7 @@
 import org.apache.geode.cache.execute.Function;
 import org.apache.geode.cache.execute.FunctionContext;
 import org.apache.geode.cache.execute.RegionFunctionContext;
+import org.apache.geode.security.ResourcePermission;
 
 public class RegionSizeFunction implements Function, Declarable, DataSerializable {
 
@@ -38,6 +41,13 @@ public void execute(FunctionContext context) {
     context.getResultSender().lastResult(rfc.getDataSet().size());
   }
 
+  @Override
+  public Collection<ResourcePermission> getRequiredPermissions(String regionName) {
+    return Collections.singletonList(
+        new ResourcePermission(ResourcePermission.Resource.DATA, ResourcePermission.Operation.READ,
+            regionName));
+  }
+
   public String getId() {
     return ID;
   }
diff --git a/extensions/geode-modules/src/main/java/org/apache/geode/modules/util/TouchPartitionedRegionEntriesFunction.java b/extensions/geode-modules/src/main/java/org/apache/geode/modules/util/TouchPartitionedRegionEntriesFunction.java
index 01b1685614e..67589d005d4 100644
--- a/extensions/geode-modules/src/main/java/org/apache/geode/modules/util/TouchPartitionedRegionEntriesFunction.java
+++ b/extensions/geode-modules/src/main/java/org/apache/geode/modules/util/TouchPartitionedRegionEntriesFunction.java
@@ -17,6 +17,8 @@
 import java.io.DataInput;
 import java.io.DataOutput;
 import java.io.IOException;
+import java.util.Collection;
+import java.util.Collections;
 import java.util.Properties;
 import java.util.Set;
 
@@ -29,6 +31,7 @@
 import org.apache.geode.cache.execute.FunctionContext;
 import org.apache.geode.cache.execute.RegionFunctionContext;
 import org.apache.geode.cache.partition.PartitionRegionHelper;
+import org.apache.geode.security.ResourcePermission;
 
 /**
  * Touches the keys contained in the set of keys by performing a get on the partitioned region.
@@ -76,6 +79,13 @@ public void execute(FunctionContext context) {
     context.getResultSender().lastResult(true);
   }
 
+  @Override
+  public Collection<ResourcePermission> getRequiredPermissions(String regionName) {
+    return Collections.singletonList(
+        new ResourcePermission(ResourcePermission.Resource.DATA, ResourcePermission.Operation.READ,
+            regionName));
+  }
+
   public String getId() {
     return ID;
   }
diff --git a/extensions/geode-modules/src/main/java/org/apache/geode/modules/util/TouchReplicatedRegionEntriesFunction.java b/extensions/geode-modules/src/main/java/org/apache/geode/modules/util/TouchReplicatedRegionEntriesFunction.java
index f48c117f4de..654ae6e16ea 100644
--- a/extensions/geode-modules/src/main/java/org/apache/geode/modules/util/TouchReplicatedRegionEntriesFunction.java
+++ b/extensions/geode-modules/src/main/java/org/apache/geode/modules/util/TouchReplicatedRegionEntriesFunction.java
@@ -17,6 +17,8 @@
 import java.io.DataInput;
 import java.io.DataOutput;
 import java.io.IOException;
+import java.util.Collection;
+import java.util.Collections;
 import java.util.Properties;
 import java.util.Set;
 
@@ -27,6 +29,7 @@
 import org.apache.geode.cache.Region;
 import org.apache.geode.cache.execute.Function;
 import org.apache.geode.cache.execute.FunctionContext;
+import org.apache.geode.security.ResourcePermission;
 
 /**
  * Touches the keys contained in the set of keys by performing a get on the replicated region. This
@@ -71,6 +74,13 @@ public void execute(FunctionContext context) {
     context.getResultSender().lastResult(true);
   }
 
+  @Override
+  public Collection<ResourcePermission> getRequiredPermissions(String regionName) {
+    return Collections.singletonList(
+        new ResourcePermission(ResourcePermission.Resource.DATA, ResourcePermission.Operation.READ,
+            regionName));
+  }
+
   public String getId() {
     return ID;
   }
diff --git a/extensions/geode-modules/src/test/java/org/apache/geode/modules/util/ModuleFunctionsSecurityTest.java b/extensions/geode-modules/src/test/java/org/apache/geode/modules/util/ModuleFunctionsSecurityTest.java
new file mode 100644
index 00000000000..b726359ad23
--- /dev/null
+++ b/extensions/geode-modules/src/test/java/org/apache/geode/modules/util/ModuleFunctionsSecurityTest.java
@@ -0,0 +1,148 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+ */
+
+package org.apache.geode.modules.util;
+
+import org.junit.After;
+import org.junit.BeforeClass;
+import org.junit.ClassRule;
+import org.junit.Test;
+import org.junit.experimental.categories.Category;
+
+import org.apache.geode.cache.RegionShortcut;
+import org.apache.geode.cache.execute.FunctionService;
+import org.apache.geode.examples.SimpleSecurityManager;
+import org.apache.geode.test.junit.categories.IntegrationTest;
+import org.apache.geode.test.junit.rules.GfshCommandRule;
+import org.apache.geode.test.junit.rules.ServerStarterRule;
+
+@Category(IntegrationTest.class)
+public class ModuleFunctionsSecurityTest {
+
+  @ClassRule
+  public static ServerStarterRule server = new ServerStarterRule()
+      .withJMXManager()
+      .withSecurityManager(SimpleSecurityManager.class)
+      .withRegion(RegionShortcut.REPLICATE, "REPLICATE_1")
+      .withRegion(RegionShortcut.PARTITION, "PARTITION_1")
+      .withAutoStart();
+
+  @ClassRule
+  public static GfshCommandRule gfsh = new GfshCommandRule();
+
+  @BeforeClass
+  public static void setupClass() {
+    FunctionService.registerFunction(new BootstrappingFunction());
+    FunctionService.registerFunction(new CreateRegionFunction());
+    FunctionService.registerFunction(new RegionSizeFunction());
+    FunctionService.registerFunction(new TouchPartitionedRegionEntriesFunction());
+    FunctionService.registerFunction(new TouchReplicatedRegionEntriesFunction());
+  }
+
+  @After
+  public void teardown() throws Exception {
+    gfsh.disconnect();
+  }
+
+  @Test
+  public void testInvalidPermissionsForBootstrappingFunction() throws Exception {
+    gfsh.secureConnectAndVerify(server.getJmxPort(), GfshCommandRule.PortType.jmxManager,
+        "dataWrite", "dataWrite");
+    gfsh.executeAndAssertThat("execute function --id=" + BootstrappingFunction.ID)
+        .containsOutput("not authorized for CLUSTER:MANAGE")
+        .statusIsSuccess();
+  }
+
+  @Test
+  public void testValidPermissionsForBootstrappingFunction() throws Exception {
+    gfsh.secureConnectAndVerify(server.getJmxPort(), GfshCommandRule.PortType.jmxManager,
+        "clusterManage", "clusterManage");
+    gfsh.executeAndAssertThat("execute function --id=" + BootstrappingFunction.ID)
+        .containsOutput("true")
+        .statusIsSuccess();
+  }
+
+  @Test
+  public void testInvalidPermissionsForCreateRegionFunction() throws Exception {
+    gfsh.secureConnectAndVerify(server.getJmxPort(), GfshCommandRule.PortType.jmxManager,
+        "dataWrite", "dataWrite");
+    gfsh.executeAndAssertThat("execute function --id=" + CreateRegionFunction.ID)
+        .containsOutput("not authorized for DATA:MANAGE")
+        .statusIsSuccess();
+  }
+
+  @Test
+  public void testValidPermissionsForCreateRegionFunction() throws Exception {
+    gfsh.secureConnectAndVerify(server.getJmxPort(), GfshCommandRule.PortType.jmxManager,
+        "dataManage", "dataManage");
+    gfsh.executeAndAssertThat("execute function --id=" + CreateRegionFunction.ID)
+        .containsOutput("java.lang.NullPointerException")
+        .statusIsSuccess();
+  }
+
+  @Test
+  public void testInvalidPermissionsForRegionSizeFunction() throws Exception {
+    gfsh.secureConnectAndVerify(server.getJmxPort(), GfshCommandRule.PortType.jmxManager,
+        "dataWrite", "dataWrite");
+    gfsh.executeAndAssertThat("execute function --region=REPLICATE_1 --id=" + RegionSizeFunction.ID)
+        .containsOutput("not authorized for DATA:READ:REPLICATE_1")
+        .statusIsSuccess();
+  }
+
+  @Test
+  public void testValidPermissionsForRegionSizeFunction() throws Exception {
+    gfsh.secureConnectAndVerify(server.getJmxPort(), GfshCommandRule.PortType.jmxManager,
+        "dataRead", "dataRead");
+    gfsh.executeAndAssertThat("execute function --arguments=REPLICATE_1 --region=REPLICATE_1 --id=" + RegionSizeFunction.ID)
+        .containsOutput(" 0\n")
+        .statusIsSuccess();
+  }
+
+  @Test
+  public void testInvalidPermissionsForTouchPartitionedRegionEntriesFunction() throws Exception {
+    gfsh.secureConnectAndVerify(server.getJmxPort(), GfshCommandRule.PortType.jmxManager,
+        "dataWrite", "dataWrite");
+    gfsh.executeAndAssertThat("execute function --region=PARTITION_1 --id=" + TouchPartitionedRegionEntriesFunction.ID)
+        .containsOutput("not authorized for DATA:READ:PARTITION_1")
+        .statusIsSuccess();
+  }
+
+  @Test
+  public void testValidPermissionsForTouchPartitionedRegionEntriesFunction() throws Exception {
+    gfsh.secureConnectAndVerify(server.getJmxPort(), GfshCommandRule.PortType.jmxManager,
+        "dataRead", "dataRead");
+    gfsh.executeAndAssertThat("execute function --arguments=PARTITION_1 --region=PARTITION_1 --id=" + TouchPartitionedRegionEntriesFunction.ID)
+        .containsOutput("java.lang.NullPointerException")
+        .statusIsSuccess();
+  }
+
+  @Test
+  public void testInvalidPermissionsForTouchReplicatedRegionEntriesFunction() throws Exception {
+    gfsh.secureConnectAndVerify(server.getJmxPort(), GfshCommandRule.PortType.jmxManager,
+        "dataWrite", "dataWrite");
+    gfsh.executeAndAssertThat("execute function --region=REPLICATE_1 --id=" + TouchReplicatedRegionEntriesFunction.ID)
+        .containsOutput("not authorized for DATA:READ:REPLICATE_1")
+        .statusIsSuccess();
+  }
+
+  @Test
+  public void testValidPermissionsForTouchReplicatedRegionEntriesFunction() throws Exception {
+    gfsh.secureConnectAndVerify(server.getJmxPort(), GfshCommandRule.PortType.jmxManager,
+        "dataRead", "dataRead");
+    gfsh.executeAndAssertThat("execute function --arguments=REPLICATE_1 --id=" + TouchReplicatedRegionEntriesFunction.ID)
+        .containsOutput("java.lang.ArrayIndexOutOfBoundsException")
+        .statusIsSuccess();
+  }
+}
diff --git a/geode-core/src/main/java/org/apache/geode/management/internal/cli/functions/RegionCreateFunction.java b/geode-core/src/main/java/org/apache/geode/management/internal/cli/functions/RegionCreateFunction.java
index 80985660b74..3729d75b4bf 100644
--- a/geode-core/src/main/java/org/apache/geode/management/internal/cli/functions/RegionCreateFunction.java
+++ b/geode-core/src/main/java/org/apache/geode/management/internal/cli/functions/RegionCreateFunction.java
@@ -14,6 +14,8 @@
  */
 package org.apache.geode.management.internal.cli.functions;
 
+import java.util.Collection;
+import java.util.Collections;
 import java.util.Set;
 
 import org.apache.commons.lang.StringUtils;
@@ -49,6 +51,8 @@
 import org.apache.geode.management.internal.cli.i18n.CliStrings;
 import org.apache.geode.management.internal.cli.util.RegionPath;
 import org.apache.geode.management.internal.configuration.domain.XmlEntity;
+import org.apache.geode.management.internal.security.ResourcePermissions;
+import org.apache.geode.security.ResourcePermission;
 
 /**
  *
@@ -121,6 +125,11 @@ public void execute(FunctionContext context) {
     }
   }
 
+  @Override
+  public Collection<ResourcePermission> getRequiredPermissions(String regionName) {
+    return Collections.singletonList(ResourcePermissions.DATA_MANAGE);
+  }
+
   private CliFunctionResult handleException(final String memberNameOrId, final String exceptionMsg,
       final Exception e) {
     if (e != null && logger.isDebugEnabled()) {

From 33fd896856e0f7e3d1b86a8bdb03c2aa4efb65f7 Mon Sep 17 00:00:00 2001
From: Jens Deppe <jdeppe@pivotal.io>
Date: Tue, 9 Jan 2018 08:05:41 -0800
Subject: [PATCH 2/5] GEODE-3974: Spotless

---
 .../modules/util/RegionSizeFunction.java      |  5 +-
 ...TouchPartitionedRegionEntriesFunction.java |  5 +-
 .../TouchReplicatedRegionEntriesFunction.java |  5 +-
 .../util/ModuleFunctionsSecurityTest.java     | 52 ++++++++-----------
 4 files changed, 28 insertions(+), 39 deletions(-)

diff --git a/extensions/geode-modules/src/main/java/org/apache/geode/modules/util/RegionSizeFunction.java b/extensions/geode-modules/src/main/java/org/apache/geode/modules/util/RegionSizeFunction.java
index 32f95a33496..a45e4727b32 100644
--- a/extensions/geode-modules/src/main/java/org/apache/geode/modules/util/RegionSizeFunction.java
+++ b/extensions/geode-modules/src/main/java/org/apache/geode/modules/util/RegionSizeFunction.java
@@ -43,9 +43,8 @@ public void execute(FunctionContext context) {
 
   @Override
   public Collection<ResourcePermission> getRequiredPermissions(String regionName) {
-    return Collections.singletonList(
-        new ResourcePermission(ResourcePermission.Resource.DATA, ResourcePermission.Operation.READ,
-            regionName));
+    return Collections.singletonList(new ResourcePermission(ResourcePermission.Resource.DATA,
+        ResourcePermission.Operation.READ, regionName));
   }
 
   public String getId() {
diff --git a/extensions/geode-modules/src/main/java/org/apache/geode/modules/util/TouchPartitionedRegionEntriesFunction.java b/extensions/geode-modules/src/main/java/org/apache/geode/modules/util/TouchPartitionedRegionEntriesFunction.java
index 67589d005d4..d503359364d 100644
--- a/extensions/geode-modules/src/main/java/org/apache/geode/modules/util/TouchPartitionedRegionEntriesFunction.java
+++ b/extensions/geode-modules/src/main/java/org/apache/geode/modules/util/TouchPartitionedRegionEntriesFunction.java
@@ -81,9 +81,8 @@ public void execute(FunctionContext context) {
 
   @Override
   public Collection<ResourcePermission> getRequiredPermissions(String regionName) {
-    return Collections.singletonList(
-        new ResourcePermission(ResourcePermission.Resource.DATA, ResourcePermission.Operation.READ,
-            regionName));
+    return Collections.singletonList(new ResourcePermission(ResourcePermission.Resource.DATA,
+        ResourcePermission.Operation.READ, regionName));
   }
 
   public String getId() {
diff --git a/extensions/geode-modules/src/main/java/org/apache/geode/modules/util/TouchReplicatedRegionEntriesFunction.java b/extensions/geode-modules/src/main/java/org/apache/geode/modules/util/TouchReplicatedRegionEntriesFunction.java
index 654ae6e16ea..7fcb0e9e494 100644
--- a/extensions/geode-modules/src/main/java/org/apache/geode/modules/util/TouchReplicatedRegionEntriesFunction.java
+++ b/extensions/geode-modules/src/main/java/org/apache/geode/modules/util/TouchReplicatedRegionEntriesFunction.java
@@ -76,9 +76,8 @@ public void execute(FunctionContext context) {
 
   @Override
   public Collection<ResourcePermission> getRequiredPermissions(String regionName) {
-    return Collections.singletonList(
-        new ResourcePermission(ResourcePermission.Resource.DATA, ResourcePermission.Operation.READ,
-            regionName));
+    return Collections.singletonList(new ResourcePermission(ResourcePermission.Resource.DATA,
+        ResourcePermission.Operation.READ, regionName));
   }
 
   public String getId() {
diff --git a/extensions/geode-modules/src/test/java/org/apache/geode/modules/util/ModuleFunctionsSecurityTest.java b/extensions/geode-modules/src/test/java/org/apache/geode/modules/util/ModuleFunctionsSecurityTest.java
index b726359ad23..f310232920c 100644
--- a/extensions/geode-modules/src/test/java/org/apache/geode/modules/util/ModuleFunctionsSecurityTest.java
+++ b/extensions/geode-modules/src/test/java/org/apache/geode/modules/util/ModuleFunctionsSecurityTest.java
@@ -32,12 +32,10 @@
 public class ModuleFunctionsSecurityTest {
 
   @ClassRule
-  public static ServerStarterRule server = new ServerStarterRule()
-      .withJMXManager()
-      .withSecurityManager(SimpleSecurityManager.class)
-      .withRegion(RegionShortcut.REPLICATE, "REPLICATE_1")
-      .withRegion(RegionShortcut.PARTITION, "PARTITION_1")
-      .withAutoStart();
+  public static ServerStarterRule server =
+      new ServerStarterRule().withJMXManager().withSecurityManager(SimpleSecurityManager.class)
+          .withRegion(RegionShortcut.REPLICATE, "REPLICATE_1")
+          .withRegion(RegionShortcut.PARTITION, "PARTITION_1").withAutoStart();
 
   @ClassRule
   public static GfshCommandRule gfsh = new GfshCommandRule();
@@ -61,8 +59,7 @@ public void testInvalidPermissionsForBootstrappingFunction() throws Exception {
     gfsh.secureConnectAndVerify(server.getJmxPort(), GfshCommandRule.PortType.jmxManager,
         "dataWrite", "dataWrite");
     gfsh.executeAndAssertThat("execute function --id=" + BootstrappingFunction.ID)
-        .containsOutput("not authorized for CLUSTER:MANAGE")
-        .statusIsSuccess();
+        .containsOutput("not authorized for CLUSTER:MANAGE").statusIsSuccess();
   }
 
   @Test
@@ -70,8 +67,7 @@ public void testValidPermissionsForBootstrappingFunction() throws Exception {
     gfsh.secureConnectAndVerify(server.getJmxPort(), GfshCommandRule.PortType.jmxManager,
         "clusterManage", "clusterManage");
     gfsh.executeAndAssertThat("execute function --id=" + BootstrappingFunction.ID)
-        .containsOutput("true")
-        .statusIsSuccess();
+        .containsOutput("true").statusIsSuccess();
   }
 
   @Test
@@ -79,8 +75,7 @@ public void testInvalidPermissionsForCreateRegionFunction() throws Exception {
     gfsh.secureConnectAndVerify(server.getJmxPort(), GfshCommandRule.PortType.jmxManager,
         "dataWrite", "dataWrite");
     gfsh.executeAndAssertThat("execute function --id=" + CreateRegionFunction.ID)
-        .containsOutput("not authorized for DATA:MANAGE")
-        .statusIsSuccess();
+        .containsOutput("not authorized for DATA:MANAGE").statusIsSuccess();
   }
 
   @Test
@@ -88,8 +83,7 @@ public void testValidPermissionsForCreateRegionFunction() throws Exception {
     gfsh.secureConnectAndVerify(server.getJmxPort(), GfshCommandRule.PortType.jmxManager,
         "dataManage", "dataManage");
     gfsh.executeAndAssertThat("execute function --id=" + CreateRegionFunction.ID)
-        .containsOutput("java.lang.NullPointerException")
-        .statusIsSuccess();
+        .containsOutput("java.lang.NullPointerException").statusIsSuccess();
   }
 
   @Test
@@ -97,34 +91,32 @@ public void testInvalidPermissionsForRegionSizeFunction() throws Exception {
     gfsh.secureConnectAndVerify(server.getJmxPort(), GfshCommandRule.PortType.jmxManager,
         "dataWrite", "dataWrite");
     gfsh.executeAndAssertThat("execute function --region=REPLICATE_1 --id=" + RegionSizeFunction.ID)
-        .containsOutput("not authorized for DATA:READ:REPLICATE_1")
-        .statusIsSuccess();
+        .containsOutput("not authorized for DATA:READ:REPLICATE_1").statusIsSuccess();
   }
 
   @Test
   public void testValidPermissionsForRegionSizeFunction() throws Exception {
     gfsh.secureConnectAndVerify(server.getJmxPort(), GfshCommandRule.PortType.jmxManager,
         "dataRead", "dataRead");
-    gfsh.executeAndAssertThat("execute function --arguments=REPLICATE_1 --region=REPLICATE_1 --id=" + RegionSizeFunction.ID)
-        .containsOutput(" 0\n")
-        .statusIsSuccess();
+    gfsh.executeAndAssertThat("execute function --arguments=REPLICATE_1 --region=REPLICATE_1 --id="
+        + RegionSizeFunction.ID).containsOutput(" 0\n").statusIsSuccess();
   }
 
   @Test
   public void testInvalidPermissionsForTouchPartitionedRegionEntriesFunction() throws Exception {
     gfsh.secureConnectAndVerify(server.getJmxPort(), GfshCommandRule.PortType.jmxManager,
         "dataWrite", "dataWrite");
-    gfsh.executeAndAssertThat("execute function --region=PARTITION_1 --id=" + TouchPartitionedRegionEntriesFunction.ID)
-        .containsOutput("not authorized for DATA:READ:PARTITION_1")
-        .statusIsSuccess();
+    gfsh.executeAndAssertThat(
+        "execute function --region=PARTITION_1 --id=" + TouchPartitionedRegionEntriesFunction.ID)
+        .containsOutput("not authorized for DATA:READ:PARTITION_1").statusIsSuccess();
   }
 
   @Test
   public void testValidPermissionsForTouchPartitionedRegionEntriesFunction() throws Exception {
     gfsh.secureConnectAndVerify(server.getJmxPort(), GfshCommandRule.PortType.jmxManager,
         "dataRead", "dataRead");
-    gfsh.executeAndAssertThat("execute function --arguments=PARTITION_1 --region=PARTITION_1 --id=" + TouchPartitionedRegionEntriesFunction.ID)
-        .containsOutput("java.lang.NullPointerException")
+    gfsh.executeAndAssertThat("execute function --arguments=PARTITION_1 --region=PARTITION_1 --id="
+        + TouchPartitionedRegionEntriesFunction.ID).containsOutput("java.lang.NullPointerException")
         .statusIsSuccess();
   }
 
@@ -132,17 +124,17 @@ public void testValidPermissionsForTouchPartitionedRegionEntriesFunction() throw
   public void testInvalidPermissionsForTouchReplicatedRegionEntriesFunction() throws Exception {
     gfsh.secureConnectAndVerify(server.getJmxPort(), GfshCommandRule.PortType.jmxManager,
         "dataWrite", "dataWrite");
-    gfsh.executeAndAssertThat("execute function --region=REPLICATE_1 --id=" + TouchReplicatedRegionEntriesFunction.ID)
-        .containsOutput("not authorized for DATA:READ:REPLICATE_1")
-        .statusIsSuccess();
+    gfsh.executeAndAssertThat(
+        "execute function --region=REPLICATE_1 --id=" + TouchReplicatedRegionEntriesFunction.ID)
+        .containsOutput("not authorized for DATA:READ:REPLICATE_1").statusIsSuccess();
   }
 
   @Test
   public void testValidPermissionsForTouchReplicatedRegionEntriesFunction() throws Exception {
     gfsh.secureConnectAndVerify(server.getJmxPort(), GfshCommandRule.PortType.jmxManager,
         "dataRead", "dataRead");
-    gfsh.executeAndAssertThat("execute function --arguments=REPLICATE_1 --id=" + TouchReplicatedRegionEntriesFunction.ID)
-        .containsOutput("java.lang.ArrayIndexOutOfBoundsException")
-        .statusIsSuccess();
+    gfsh.executeAndAssertThat(
+        "execute function --arguments=REPLICATE_1 --id=" + TouchReplicatedRegionEntriesFunction.ID)
+        .containsOutput("java.lang.ArrayIndexOutOfBoundsException").statusIsSuccess();
   }
 }

From fddda25de91e5e872686aac1a61d1d90bf6abf14 Mon Sep 17 00:00:00 2001
From: Jens Deppe <jdeppe@pivotal.io>
Date: Tue, 9 Jan 2018 08:56:19 -0800
Subject: [PATCH 3/5] GEODE-3974: Review updates

---
 .../util/ModuleFunctionsSecurityTest.java     | 69 +++----------------
 1 file changed, 9 insertions(+), 60 deletions(-)

diff --git a/extensions/geode-modules/src/test/java/org/apache/geode/modules/util/ModuleFunctionsSecurityTest.java b/extensions/geode-modules/src/test/java/org/apache/geode/modules/util/ModuleFunctionsSecurityTest.java
index f310232920c..adb9413d3bc 100644
--- a/extensions/geode-modules/src/test/java/org/apache/geode/modules/util/ModuleFunctionsSecurityTest.java
+++ b/extensions/geode-modules/src/test/java/org/apache/geode/modules/util/ModuleFunctionsSecurityTest.java
@@ -15,9 +15,9 @@
 
 package org.apache.geode.modules.util;
 
-import org.junit.After;
 import org.junit.BeforeClass;
 import org.junit.ClassRule;
+import org.junit.Rule;
 import org.junit.Test;
 import org.junit.experimental.categories.Category;
 
@@ -25,6 +25,7 @@
 import org.apache.geode.cache.execute.FunctionService;
 import org.apache.geode.examples.SimpleSecurityManager;
 import org.apache.geode.test.junit.categories.IntegrationTest;
+import org.apache.geode.test.junit.rules.ConnectionConfiguration;
 import org.apache.geode.test.junit.rules.GfshCommandRule;
 import org.apache.geode.test.junit.rules.ServerStarterRule;
 
@@ -37,8 +38,8 @@
           .withRegion(RegionShortcut.REPLICATE, "REPLICATE_1")
           .withRegion(RegionShortcut.PARTITION, "PARTITION_1").withAutoStart();
 
-  @ClassRule
-  public static GfshCommandRule gfsh = new GfshCommandRule();
+  @Rule
+  public GfshCommandRule gfsh = new GfshCommandRule(server::getJmxPort, GfshCommandRule.PortType.jmxManager);
 
   @BeforeClass
   public static void setupClass() {
@@ -49,92 +50,40 @@ public static void setupClass() {
     FunctionService.registerFunction(new TouchReplicatedRegionEntriesFunction());
   }
 
-  @After
-  public void teardown() throws Exception {
-    gfsh.disconnect();
-  }
-
   @Test
+  @ConnectionConfiguration(user = "dataWrite", password = "dataWrite")
   public void testInvalidPermissionsForBootstrappingFunction() throws Exception {
-    gfsh.secureConnectAndVerify(server.getJmxPort(), GfshCommandRule.PortType.jmxManager,
-        "dataWrite", "dataWrite");
     gfsh.executeAndAssertThat("execute function --id=" + BootstrappingFunction.ID)
         .containsOutput("not authorized for CLUSTER:MANAGE").statusIsSuccess();
   }
 
   @Test
-  public void testValidPermissionsForBootstrappingFunction() throws Exception {
-    gfsh.secureConnectAndVerify(server.getJmxPort(), GfshCommandRule.PortType.jmxManager,
-        "clusterManage", "clusterManage");
-    gfsh.executeAndAssertThat("execute function --id=" + BootstrappingFunction.ID)
-        .containsOutput("true").statusIsSuccess();
-  }
-
-  @Test
+  @ConnectionConfiguration(user = "dataWrite", password = "dataWrite")
   public void testInvalidPermissionsForCreateRegionFunction() throws Exception {
-    gfsh.secureConnectAndVerify(server.getJmxPort(), GfshCommandRule.PortType.jmxManager,
-        "dataWrite", "dataWrite");
     gfsh.executeAndAssertThat("execute function --id=" + CreateRegionFunction.ID)
         .containsOutput("not authorized for DATA:MANAGE").statusIsSuccess();
   }
 
   @Test
-  public void testValidPermissionsForCreateRegionFunction() throws Exception {
-    gfsh.secureConnectAndVerify(server.getJmxPort(), GfshCommandRule.PortType.jmxManager,
-        "dataManage", "dataManage");
-    gfsh.executeAndAssertThat("execute function --id=" + CreateRegionFunction.ID)
-        .containsOutput("java.lang.NullPointerException").statusIsSuccess();
-  }
-
-  @Test
+  @ConnectionConfiguration(user = "dataWrite", password = "dataWrite")
   public void testInvalidPermissionsForRegionSizeFunction() throws Exception {
-    gfsh.secureConnectAndVerify(server.getJmxPort(), GfshCommandRule.PortType.jmxManager,
-        "dataWrite", "dataWrite");
     gfsh.executeAndAssertThat("execute function --region=REPLICATE_1 --id=" + RegionSizeFunction.ID)
         .containsOutput("not authorized for DATA:READ:REPLICATE_1").statusIsSuccess();
   }
 
   @Test
-  public void testValidPermissionsForRegionSizeFunction() throws Exception {
-    gfsh.secureConnectAndVerify(server.getJmxPort(), GfshCommandRule.PortType.jmxManager,
-        "dataRead", "dataRead");
-    gfsh.executeAndAssertThat("execute function --arguments=REPLICATE_1 --region=REPLICATE_1 --id="
-        + RegionSizeFunction.ID).containsOutput(" 0\n").statusIsSuccess();
-  }
-
-  @Test
+  @ConnectionConfiguration(user = "dataWrite", password = "dataWrite")
   public void testInvalidPermissionsForTouchPartitionedRegionEntriesFunction() throws Exception {
-    gfsh.secureConnectAndVerify(server.getJmxPort(), GfshCommandRule.PortType.jmxManager,
-        "dataWrite", "dataWrite");
     gfsh.executeAndAssertThat(
         "execute function --region=PARTITION_1 --id=" + TouchPartitionedRegionEntriesFunction.ID)
         .containsOutput("not authorized for DATA:READ:PARTITION_1").statusIsSuccess();
   }
 
   @Test
-  public void testValidPermissionsForTouchPartitionedRegionEntriesFunction() throws Exception {
-    gfsh.secureConnectAndVerify(server.getJmxPort(), GfshCommandRule.PortType.jmxManager,
-        "dataRead", "dataRead");
-    gfsh.executeAndAssertThat("execute function --arguments=PARTITION_1 --region=PARTITION_1 --id="
-        + TouchPartitionedRegionEntriesFunction.ID).containsOutput("java.lang.NullPointerException")
-        .statusIsSuccess();
-  }
-
-  @Test
+  @ConnectionConfiguration(user = "dataWrite", password = "dataWrite")
   public void testInvalidPermissionsForTouchReplicatedRegionEntriesFunction() throws Exception {
-    gfsh.secureConnectAndVerify(server.getJmxPort(), GfshCommandRule.PortType.jmxManager,
-        "dataWrite", "dataWrite");
     gfsh.executeAndAssertThat(
         "execute function --region=REPLICATE_1 --id=" + TouchReplicatedRegionEntriesFunction.ID)
         .containsOutput("not authorized for DATA:READ:REPLICATE_1").statusIsSuccess();
   }
-
-  @Test
-  public void testValidPermissionsForTouchReplicatedRegionEntriesFunction() throws Exception {
-    gfsh.secureConnectAndVerify(server.getJmxPort(), GfshCommandRule.PortType.jmxManager,
-        "dataRead", "dataRead");
-    gfsh.executeAndAssertThat(
-        "execute function --arguments=REPLICATE_1 --id=" + TouchReplicatedRegionEntriesFunction.ID)
-        .containsOutput("java.lang.ArrayIndexOutOfBoundsException").statusIsSuccess();
-  }
 }

From 4419bbf8085bb070f1afe5ae407f8fdbe4c45914 Mon Sep 17 00:00:00 2001
From: Jens Deppe <jdeppe@pivotal.io>
Date: Wed, 10 Jan 2018 07:52:53 -0800
Subject: [PATCH 4/5] GEODE-3974: Add SecurityTest category

---
 .../apache/geode/modules/util/ModuleFunctionsSecurityTest.java | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/extensions/geode-modules/src/test/java/org/apache/geode/modules/util/ModuleFunctionsSecurityTest.java b/extensions/geode-modules/src/test/java/org/apache/geode/modules/util/ModuleFunctionsSecurityTest.java
index adb9413d3bc..05e16852dc3 100644
--- a/extensions/geode-modules/src/test/java/org/apache/geode/modules/util/ModuleFunctionsSecurityTest.java
+++ b/extensions/geode-modules/src/test/java/org/apache/geode/modules/util/ModuleFunctionsSecurityTest.java
@@ -25,11 +25,12 @@
 import org.apache.geode.cache.execute.FunctionService;
 import org.apache.geode.examples.SimpleSecurityManager;
 import org.apache.geode.test.junit.categories.IntegrationTest;
+import org.apache.geode.test.junit.categories.SecurityTest;
 import org.apache.geode.test.junit.rules.ConnectionConfiguration;
 import org.apache.geode.test.junit.rules.GfshCommandRule;
 import org.apache.geode.test.junit.rules.ServerStarterRule;
 
-@Category(IntegrationTest.class)
+@Category({IntegrationTest.class, SecurityTest.class})
 public class ModuleFunctionsSecurityTest {
 
   @ClassRule

From 5378af27c361161ee52fb6998ddfea3a3d2678c5 Mon Sep 17 00:00:00 2001
From: Jens Deppe <jdeppe@pivotal.io>
Date: Wed, 10 Jan 2018 08:43:31 -0800
Subject: [PATCH 5/5] GEODE-3974: Spotless

---
 .../apache/geode/modules/util/ModuleFunctionsSecurityTest.java | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/extensions/geode-modules/src/test/java/org/apache/geode/modules/util/ModuleFunctionsSecurityTest.java b/extensions/geode-modules/src/test/java/org/apache/geode/modules/util/ModuleFunctionsSecurityTest.java
index 05e16852dc3..1a0548d3975 100644
--- a/extensions/geode-modules/src/test/java/org/apache/geode/modules/util/ModuleFunctionsSecurityTest.java
+++ b/extensions/geode-modules/src/test/java/org/apache/geode/modules/util/ModuleFunctionsSecurityTest.java
@@ -40,7 +40,8 @@
           .withRegion(RegionShortcut.PARTITION, "PARTITION_1").withAutoStart();
 
   @Rule
-  public GfshCommandRule gfsh = new GfshCommandRule(server::getJmxPort, GfshCommandRule.PortType.jmxManager);
+  public GfshCommandRule gfsh =
+      new GfshCommandRule(server::getJmxPort, GfshCommandRule.PortType.jmxManager);
 
   @BeforeClass
   public static void setupClass() {
