From 9215875f6734f6085e5005e26b1ea0c9edcb2c70 Mon Sep 17 00:00:00 2001
From: Karen Miller <karensmolermiller@users.noreply.github.com>
Date: Wed, 11 Oct 2017 10:32:40 -0700
Subject: [PATCH] GEODE-3247 Document query method invocation changes (#909)

* GEODE-3247 Document query method invocation changes

* GEODE-3247 Revise docs of query method invocation changes

* GEODE-3247 Revision per final review comment
---
 .../query_select/the_where_clause.html.md.erb | 24 +++++++++++++++++++
 .../implementing_authorization.html.md.erb    |  6 +++++
 2 files changed, 30 insertions(+)

diff --git a/geode-docs/developing/query_select/the_where_clause.html.md.erb b/geode-docs/developing/query_select/the_where_clause.html.md.erb
index 6fe44987928..7a7c17b8ddd 100644
--- a/geode-docs/developing/query_select/the_where_clause.html.md.erb
+++ b/geode-docs/developing/query_select/the_where_clause.html.md.erb
@@ -235,6 +235,30 @@ If more than one method can be invoked, the query processor chooses the method w
 
 The query processor uses the runtime types of the parameters and the receiver to determine the proper method to invoke. Because runtime types are used, an argument with a null value has no typing information, and so can be matched with any object type parameter. When a null argument is used, if the query processor cannot determine the proper method to invoke based on the non-null arguments, it throws an `AmbiguousNameException`.
 
+**Methods calls with the `SecurityManager` enabled**
+
+When the `SecurityManager` is enabled,
+<%=vars.product_name%> throws a `NotAuthorizedException` when any
+method not on this list of whitelisted methods is invoked:
+
+- On a `Map`, `Collection`, or `Region` object: `keySet`, `entrySet`, `values`, `containsKey` or `get`
+- On a `Region.Entry` object: `getKey` or `getValue`
+- On a `Date` or `Timestamp` object: `after`, `before`, `getNanos`, or `getTime`
+- On a `String` object: any method
+- On any `Number` object: `intValue`, `longValue`, `shortValue`, etc.
+- On any `Boolean` object: `booleanValue`
+- On any object: `equals`, `compareTo`, or `toString`
+
+To disable the authorization check,
+start all servers with the added system property
+`gemfire.QueryService.allowUntrustedMethodInvocation`.
+For example:
+
+```
+gfsh>start server --name=Server1 \
+     --J=-Dgemfire.QueryService.allowUntrustedMethodInvocation=true
+```
+
 ## <a id="the_where_clause__section_59E7D64746AE495D942F2F09EF7DB9B5" class="no-quick-link"></a>Enum Objects
 
 To write a query based on the value of an Enum object field, you must use the `toString` method of the enum object or use a query bind parameter.
diff --git a/geode-docs/managing/security/implementing_authorization.html.md.erb b/geode-docs/managing/security/implementing_authorization.html.md.erb
index aed78a78026..d4757373c19 100644
--- a/geode-docs/managing/security/implementing_authorization.html.md.erb
+++ b/geode-docs/managing/security/implementing_authorization.html.md.erb
@@ -289,3 +289,9 @@ override the `Function.getRequiredPermissions()` method
 in the function's class.
 The method should return a `Collection` of the permissions
 required of the entity that invokes an execution of the function.
+
+### <a id="AuthorizeMethodsInQueries" class="no-quick-link"></a>Authorization of Methods Invoked from Queries
+
+Enabling the `SecurityManager` affects queries
+by restricting the methods that a running query may invoke.
+See [Method Invocations](../../developing/query_select/the_where_clause.html#the_where_clause__section_D2F8D17B52B04895B672E2FCD675A676) for details.
