diff --git a/src/main/java/hudson/tasks/junit/SuiteResult.java b/src/main/java/hudson/tasks/junit/SuiteResult.java
index d58d7d45..9575951d 100644
--- a/src/main/java/hudson/tasks/junit/SuiteResult.java
+++ b/src/main/java/hudson/tasks/junit/SuiteResult.java
@@ -33,6 +33,7 @@
 import org.jenkinsci.plugins.workflow.graph.FlowNode;
 import org.kohsuke.stapler.export.Exported;
 import org.kohsuke.stapler.export.ExportedBean;
+import org.xml.sax.SAXException;
 
 import javax.annotation.CheckForNull;
 import javax.annotation.Nonnull;
@@ -162,6 +163,14 @@
 
         // parse into DOM
         SAXReader saxReader = new SAXReader();
+        
+        //source: https://www.owasp.org/index.php/XML_External_Entity_(XXE)_Prevention_Cheat_Sheet => SAXReader
+        // setFeatureQuietly(saxReader, "http://apache.org/xml/features/disallow-doctype-decl", true);
+        // setFeatureQuietly(saxReader, "http://xml.org/sax/features/external-parameter-entities", false);
+
+        // only that seems to let the initial feature of testng namespace being loaded locally
+        setFeatureQuietly(saxReader, "http://xml.org/sax/features/external-general-entities", false);
+
         saxReader.setEntityResolver(new XMLEntityResolver());
 
         FileInputStream xmlReportStream = new FileInputStream(xmlReport);
@@ -177,6 +186,15 @@
         return r;
     }
 
+    private static void setFeatureQuietly(SAXReader reader, String feature, boolean value) {
+        try {
+            reader.setFeature(feature, value);
+        }
+        catch (SAXException ignored) {
+            // ignore and continue in case the feature cannot be changed
+        }
+    }
+
     private static void parseSuite(File xmlReport, boolean keepLongStdio, List<SuiteResult> r, Element root,
                                    PipelineTestDetails pipelineTestDetails) throws DocumentException, IOException {
         // nested test suites
diff --git a/src/main/java/hudson/tasks/junit/XMLEntityResolver.java b/src/main/java/hudson/tasks/junit/XMLEntityResolver.java
index 180b3b03..bd374ac3 100644
--- a/src/main/java/hudson/tasks/junit/XMLEntityResolver.java
+++ b/src/main/java/hudson/tasks/junit/XMLEntityResolver.java
@@ -67,7 +67,7 @@ public InputSource resolveEntity(String publicId, String systemId) throws SAXExc
             }
         }
         // Default fallback
-        return null;
+        return new InputSource();
     }
 
     private static final Logger LOGGER = Logger.getLogger(XMLEntityResolver.class.getName());
diff --git a/src/test/java/hudson/tasks/junit/JUnitResultArchiverTest.java b/src/test/java/hudson/tasks/junit/JUnitResultArchiverTest.java
index fae242a1..68c9a101 100644
--- a/src/test/java/hudson/tasks/junit/JUnitResultArchiverTest.java
+++ b/src/test/java/hudson/tasks/junit/JUnitResultArchiverTest.java
@@ -23,6 +23,7 @@
  */
 package hudson.tasks.junit;
 
+import hudson.Extension;
 import hudson.FilePath;
 import hudson.matrix.AxisList;
 import hudson.matrix.MatrixBuild;
@@ -30,14 +31,19 @@
 import hudson.matrix.TextAxis;
 import hudson.model.FreeStyleBuild;
 import hudson.model.FreeStyleProject;
+import hudson.model.UnprotectedRootAction;
 import hudson.slaves.DumbSlave;
 import hudson.tasks.test.TestObject;
 
+import java.io.File;
+import java.nio.charset.StandardCharsets;
 import java.util.HashMap;
 import java.util.Map;
 import java.util.TreeMap;
 import java.util.concurrent.TimeUnit;
 
+import hudson.util.HttpResponses;
+import org.apache.commons.io.FileUtils;
 import org.jenkinsci.plugins.structs.describable.DescribableModel;
 import org.jvnet.hudson.test.Issue;
 import org.jvnet.hudson.test.TouchBuilder;
@@ -77,6 +83,7 @@
 import org.jvnet.hudson.test.SingleFileSCM;
 import org.jvnet.hudson.test.TestExtension;
 import org.kohsuke.stapler.DataBoundConstructor;
+import org.kohsuke.stapler.HttpResponse;
 
 public class JUnitResultArchiverTest {
 
@@ -374,4 +381,90 @@ public void testDescribableRoundTrip() throws Exception {
 
         assertEquals(described, model.uninstantiate(model.instantiate(described)));
     }
+    
+    @Test
+    @Issue("SECURITY-521")
+    public void testXxe() throws Exception {
+        String oobInUserContentLink = j.getURL() + "userContent/oob.xml";
+        String triggerLink = j.getURL() + "triggerMe";
+        
+        String xxeFile = this.getClass().getResource("testXxe-xxe.xml").getFile();
+        String xxeFileContent = FileUtils.readFileToString(new File(xxeFile), StandardCharsets.UTF_8);
+        String adaptedXxeFileContent = xxeFileContent.replace("$OOB_LINK$", oobInUserContentLink);
+        
+        String oobFile = this.getClass().getResource("testXxe-oob.xml").getFile();
+        String oobFileContent = FileUtils.readFileToString(new File(oobFile), StandardCharsets.UTF_8);
+        String adaptedOobFileContent = oobFileContent.replace("$TARGET_URL$", triggerLink);
+        
+        File userContentDir = new File(j.jenkins.getRootDir(), "userContent");
+        FileUtils.writeStringToFile(new File(userContentDir, "oob.xml"), adaptedOobFileContent);
+        
+        FreeStyleProject project = j.createFreeStyleProject();
+        DownloadBuilder builder = new DownloadBuilder();
+        builder.fileContent = adaptedXxeFileContent;
+        project.getBuildersList().add(builder);
+        
+        JUnitResultArchiver publisher = new JUnitResultArchiver("xxe.xml");
+        project.getPublishersList().add(publisher);
+    
+        project.scheduleBuild2(0).get();
+        // UNSTABLE
+        // assertEquals(Result.SUCCESS, project.scheduleBuild2(0).get().getResult());
+        
+        YouCannotTriggerMe urlHandler = j.jenkins.getExtensionList(UnprotectedRootAction.class).get(YouCannotTriggerMe.class);
+        assertEquals(0, urlHandler.triggerCount);
+    }
+    
+    public static class DownloadBuilder extends Builder {
+        String fileContent;
+        
+        @Override
+        public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListener listener) {
+            try {
+                FileUtils.writeStringToFile(new File(build.getWorkspace().getRemote(), "xxe.xml"), fileContent);
+            } catch (IOException e) {
+                return false;
+            }
+            
+            return true;
+        }
+        
+        @Extension
+        public static class DescriptorImpl extends BuildStepDescriptor<Builder> {
+            @Override
+            public boolean isApplicable(Class<? extends AbstractProject> jobType) {
+                return true;
+            }
+            
+            @Override
+            public String getDisplayName() {
+                return null;
+            }
+        }
+    }
+    
+    @TestExtension("testXxe")
+    public static class YouCannotTriggerMe implements UnprotectedRootAction {
+        private int triggerCount = 0;
+        
+        @Override
+        public String getIconFileName() {
+            return null;
+        }
+        
+        @Override
+        public String getDisplayName() {
+            return null;
+        }
+        
+        @Override
+        public String getUrlName() {
+            return "triggerMe";
+        }
+        
+        public HttpResponse doIndex() {
+            triggerCount++;
+            return HttpResponses.plainText("triggered");
+        }
+    }
 }
diff --git a/src/test/resources/hudson/tasks/junit/testXxe-oob.xml b/src/test/resources/hudson/tasks/junit/testXxe-oob.xml
new file mode 100644
index 00000000..1245bd76
--- /dev/null
+++ b/src/test/resources/hudson/tasks/junit/testXxe-oob.xml
@@ -0,0 +1 @@
+<!ENTITY % param1 "<!ENTITY oob SYSTEM '$TARGET_URL$'>">
diff --git a/src/test/resources/hudson/tasks/junit/testXxe-xxe.xml b/src/test/resources/hudson/tasks/junit/testXxe-xxe.xml
new file mode 100644
index 00000000..828ff6f6
--- /dev/null
+++ b/src/test/resources/hudson/tasks/junit/testXxe-xxe.xml
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="ISO-8859-1"?>
+<!DOCTYPE r [
+<!ELEMENT r ANY >
+<!ENTITY % sp SYSTEM "$OOB_LINK$">
+%sp;
+%param1;
+]>
+<r>&oob;</r>
+<xyz timestamp="2010-07-23T20:34:59.300" version="4.2.5">
+    <file name="doesntreallymatterwhatsinhere">
+    </file>
+</xyz>
