diff --git a/camel-core/src/main/java/org/apache/camel/model/dataformat/YAMLDataFormat.java b/camel-core/src/main/java/org/apache/camel/model/dataformat/YAMLDataFormat.java
index 9b06c1cd811..d97f9cc5b9f 100644
--- a/camel-core/src/main/java/org/apache/camel/model/dataformat/YAMLDataFormat.java
+++ b/camel-core/src/main/java/org/apache/camel/model/dataformat/YAMLDataFormat.java
@@ -16,9 +16,12 @@
  */
 package org.apache.camel.model.dataformat;
 
+import java.util.ArrayList;
+import java.util.List;
 import javax.xml.bind.annotation.XmlAccessType;
 import javax.xml.bind.annotation.XmlAccessorType;
 import javax.xml.bind.annotation.XmlAttribute;
+import javax.xml.bind.annotation.XmlElement;
 import javax.xml.bind.annotation.XmlRootElement;
 import javax.xml.bind.annotation.XmlTransient;
 
@@ -58,6 +61,10 @@
     private Boolean useApplicationContextClassLoader = true;
     @XmlAttribute @Metadata(defaultValue = "false")
     private Boolean prettyFlow = false;
+    @XmlAttribute @Metadata(defaultValue = "false")
+    private Boolean allowAnyType = false;
+    @XmlElement(name = "typeFilter")
+    private List<YAMLTypeFilterDefinition> typeFilters;
 
     public YAMLDataFormat() {
         this(YAMLLibrary.SnakeYAML);
@@ -188,6 +195,28 @@ public void setPrettyFlow(boolean prettyFlow) {
         this.prettyFlow = prettyFlow;
     }
 
+    public boolean isAllowAnyType() {
+        return allowAnyType;
+    }
+
+    /**
+     * Allow any class to be un-marshaled
+     */
+    public void setAllowAnyType(boolean allowAnyType) {
+        this.allowAnyType = allowAnyType;
+    }
+
+    public List<YAMLTypeFilterDefinition> getTypeFilters() {
+        return typeFilters;
+    }
+
+    /**
+     * Set the types SnakeYAML is allowed to un-marshall
+     */
+    public void setTypeFilters(List<YAMLTypeFilterDefinition> typeFilters) {
+        this.typeFilters = typeFilters;
+    }
+
     @Override
     protected DataFormat createDataFormat(RouteContext routeContext) {
         if (library == YAMLLibrary.SnakeYAML) {
@@ -218,6 +247,27 @@ protected void configureSnakeDataFormat(DataFormat dataFormat, CamelContext came
         setProperty(dataFormat, camelContext, "classLoader", classLoader);
         setProperty(dataFormat, camelContext, "useApplicationContextClassLoader", useApplicationContextClassLoader);
         setProperty(dataFormat, camelContext, "prettyFlow", prettyFlow);
+        setProperty(dataFormat, camelContext, "allowAnyType", allowAnyType);
+
+        if (typeFilters != null && !typeFilters.isEmpty()) {
+            List<String> typeFilterDefinitions = new ArrayList<>(typeFilters.size());
+            for (YAMLTypeFilterDefinition definition : typeFilters) {
+                String value = definition.getValue();
+
+                if (!value.startsWith("type") && !value.startsWith("regexp")) {
+                    YAMLTypeFilterType type = definition.getType();
+                    if (type == null) {
+                        type = YAMLTypeFilterType.type;
+                    }
+
+                    value = type.name() + ":" + value;
+                }
+
+                typeFilterDefinitions.add(value);
+            }
+
+            setProperty(dataFormat, camelContext, "typeFilterDefinitions", typeFilterDefinitions);
+        }
 
         setPropertyRef(dataFormat, camelContext, "constructor", constructor);
         setPropertyRef(dataFormat, camelContext, "representer", representer);
@@ -238,4 +288,5 @@ protected void setPropertyRef(DataFormat dataFormat, CamelContext camelContext,
             setProperty(camelContext, dataFormat, propertyName, ref);
         }
     }
+
 }
diff --git a/camel-core/src/main/java/org/apache/camel/model/dataformat/YAMLTypeFilterDefinition.java b/camel-core/src/main/java/org/apache/camel/model/dataformat/YAMLTypeFilterDefinition.java
new file mode 100644
index 00000000000..8e4babb92ba
--- /dev/null
+++ b/camel-core/src/main/java/org/apache/camel/model/dataformat/YAMLTypeFilterDefinition.java
@@ -0,0 +1,47 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.model.dataformat;
+
+import javax.xml.bind.annotation.XmlAccessType;
+import javax.xml.bind.annotation.XmlAccessorType;
+import javax.xml.bind.annotation.XmlAttribute;
+import javax.xml.bind.annotation.XmlRootElement;
+
+@XmlRootElement(name = "typeFilter")
+@XmlAccessorType(XmlAccessType.FIELD)
+public final class YAMLTypeFilterDefinition {
+    @XmlAttribute
+    private String value;
+    @XmlAttribute
+    private YAMLTypeFilterType type;
+
+    public String getValue() {
+        return value;
+    }
+
+    public void setValue(String value) {
+        this.value = value;
+    }
+
+    public YAMLTypeFilterType getType() {
+        return type;
+    }
+
+    public void setType(YAMLTypeFilterType type) {
+        this.type = type;
+    }
+}
diff --git a/camel-core/src/main/java/org/apache/camel/model/dataformat/YAMLTypeFilterType.java b/camel-core/src/main/java/org/apache/camel/model/dataformat/YAMLTypeFilterType.java
new file mode 100644
index 00000000000..727b2d7cad0
--- /dev/null
+++ b/camel-core/src/main/java/org/apache/camel/model/dataformat/YAMLTypeFilterType.java
@@ -0,0 +1,26 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.camel.model.dataformat;
+
+import javax.xml.bind.annotation.XmlEnum;
+
+@XmlEnum
+public enum YAMLTypeFilterType {
+    type,
+    regexp
+}
diff --git a/components/camel-snakeyaml/pom.xml b/components/camel-snakeyaml/pom.xml
index a2588b606a7..f019c8523d3 100644
--- a/components/camel-snakeyaml/pom.xml
+++ b/components/camel-snakeyaml/pom.xml
@@ -45,13 +45,17 @@
             <artifactId>snakeyaml</artifactId>
             <version>${snakeyaml-version}</version>
         </dependency>
-
         <!-- testing -->
         <dependency>
             <groupId>org.apache.camel</groupId>
             <artifactId>camel-test-spring</artifactId>
             <scope>test</scope>
         </dependency>
+        <dependency>
+            <groupId>org.apache.camel</groupId>
+            <artifactId>camel-test-blueprint</artifactId>
+            <scope>test</scope>
+        </dependency>
         <dependency>
             <groupId>org.apache.logging.log4j</groupId>
             <artifactId>log4j-api</artifactId>
diff --git a/components/camel-snakeyaml/src/main/docs/yaml-snakeyaml-dataformat.adoc b/components/camel-snakeyaml/src/main/docs/yaml-snakeyaml-dataformat.adoc
index 9cba88198e9..702a875505b 100644
--- a/components/camel-snakeyaml/src/main/docs/yaml-snakeyaml-dataformat.adoc
+++ b/components/camel-snakeyaml/src/main/docs/yaml-snakeyaml-dataformat.adoc
@@ -14,34 +14,12 @@ Every library requires adding the special camel component (see
 "Dependency..." paragraphs further down). By default Camel uses the
 SnakeYAML library.
 
-[[YAMLDataFormat-UsingYAMLdataformatwiththeSnakeYAMLlibrary]]
-Using YAML data format with the SnakeYAML library
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-[source,java]
-------------------------------------------------------------
-// lets turn Object messages into yaml then send to MQSeries
-from("activemq:My.Queue")
-  .marshal().yaml()
-  .to("mqseries:Another.Queue");
-------------------------------------------------------------
-
-[source,java]
-------------------------------------------------------------
-// lets turn Object messages into yaml then send to MQSeries
-from("activemq:My.Queue")
-  .marshal().yaml(YAMLLibrary.SnakeYAML)
-  .to("mqseries:Another.Queue");
-------------------------------------------------------------
-
 [[YAML-Options]]
 YAML Options
 ^^^^^^^^^^^^
 
-
-
 // dataformat options: START
-The YAML SnakeYAML dataformat supports 8 options which are listed below.
+The YAML SnakeYAML dataformat supports 10 options which are listed below.
 
 
 
@@ -57,11 +35,48 @@ The YAML SnakeYAML dataformat supports 8 options which are listed below.
 | resolver |  | String | Resolver to detect implicit type
 | useApplicationContextClassLoader | true | Boolean | Use ApplicationContextClassLoader as custom ClassLoader
 | prettyFlow | false | Boolean | Force the emitter to produce a pretty YAML document when using the flow style.
+| allowAnyType | false | Boolean | Allow any class to be un-marshaled
+| typeFilter |  | List | Set the types SnakeYAML is allowed to un-marshall
 |=======================================================================
 {% endraw %}
 // dataformat options: END
 
+WARNING: SnakeYAML can load any class from YAML definition which may lead to security breach so by default, SnakeYAML DataForma restrict the object it can load to standard Java objects like List or Long. If you want to load custom POJOs you need to add theirs type to SnakeYAML DataFormat type filter list. If your source is trusted, you can set the property allowAnyType to true so SnakeYAML DataForma won't perform any filter on the types.
 
+[[YAMLDataFormat-UsingYAMLdataformatwiththeSnakeYAMLlibrary]]
+Using YAML data format with the SnakeYAML library
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+- Turn Object messages into yaml then send to MQSeries
++
+[source,java]
+------------------------------------------------------------
+from("activemq:My.Queue")
+  .marshal().yaml()
+  .to("mqseries:Another.Queue");
+------------------------------------------------------------
++
+[source,java]
+------------------------------------------------------------
+from("activemq:My.Queue")
+  .marshal().yaml(YAMLLibrary.SnakeYAML)
+  .to("mqseries:Another.Queue");
+------------------------------------------------------------
+
+- Restrict classes to be loaded from YAML
++
+[source,java]
+------------------------------------------------------------
+// Creat a SnakeYAMLDataFormat instance
+SnakeYAMLDataFormat yaml = new SnakeYAMLDataFormat();
+
+// Restrict classes to be loaded from YAML
+yaml.addTypeFilters(TypeFilters.types(MyPojo.class, MyOtherPojo.class));
+
+from("activemq:My.Queue")
+  .unmarshal(yaml)
+  .to("mqseries:Another.Queue");
+------------------------------------------------------------
 
 [[YAMLDataFormat-UsingYAMLinSpringDSL]]
 Using YAML in Spring DSL
@@ -72,56 +87,50 @@ declare the data formats first. This is done in the *DataFormats* XML
 tag.
 
 [source,xml]
-----------------------------------------------------------------------------------------------------------------------------------
-        <dataFormats>
-            <!-- here we define a YAML data format with the id snak and that it should use the TestPojo as the class type when
-                 doing unmarshal. The unmarshalTypeName is optional, if not provided Camel will use a Object.class as the type -->
-            <yaml id="snake" library="SnakeYAML" unmarshalTypeName="org.apache.camel.component.yaml.model.TestPojo"/>
-        </dataFormats>
-----------------------------------------------------------------------------------------------------------------------------------
-
-And then you can refer to this id in the route:
+--------------------------------------------------------------------------------
+<dataFormats>
+  <!--
+    here we define a YAML data format with the id snake and that it should use
+    the TestPojo as the class type when doing unmarshal. The unmarshalTypeName
+    is optional
+  -->
+  <yaml
+    id="snake"
+    library="SnakeYAML"
+    unmarshalTypeName="org.apache.camel.component.yaml.model.TestPojo"/>
+
+  <!--
+    here we define a YAML data format with the id snake-safe which restricts the
+    classes to be loaded from YAML to TestPojo and those belonging to package
+    com.mycompany
+  -->
+  <yaml id="snake-safe">
+    <typeFilter value="org.apache.camel.component.yaml.model.TestPojo"/>
+    <typeFilter value="com.mycompany\..*" type="regexp"/>
+  </yaml>
+</dataFormats>
+--------------------------------------------------------------------------------
+
+And then you can refer to those ids in the route:
 
 [source,xml]
 -------------------------------------
-       <route>
-            <from uri="direct:back"/>
-            <unmarshal ref="snake"/>
-            <to uri="mock:reverse"/>
-        </route>
+  <route>
+    <from uri="direct:unmarshal"/>
+    <unmarshal>
+      <custom ref="snake"/>
+    </unmarshal>
+    <to uri="mock:unmarshal"/>
+  </route>
+  <route>
+    <from uri="direct:unmarshal-safe"/>
+    <unmarshal>
+      <custom ref="snake-safe"/>
+    </unmarshal>
+    <to uri="mock:unmarshal-safe"/>
+  </route>
 -------------------------------------
 
- 
-
-[[YAMLDataFormat-OptionsforSnakeYAMLDataFormat]]
-Options for SnakeYAML Data Format
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-[width="100%",cols="<25%,<25%,<25%,<25%",options="header",]
-|=======================================================================
-|Name |Type |Default |Description
-|unmarshalType |`Class` |`Object.class` |Class of the object to be created
-
-|classLoader |ClassLoader |null |The classloader to use to
-instantiate objects
-
-|constructor |String |null |A reference to an 
-org.yaml.snakeyaml.constructor.BaseConstructor instance in the registry
-
-|representer |String |null |A reference to an 
-org.yaml.snakeyaml.representer.Representer instance in the registry
-
-|dumperOptions |String |null |A reference to an 
-org.yaml.snakeyaml.DumperOptions instance in the registry
-
-|resolver |String |null |A reference to an 
-org.yaml.snakeyaml.resolver.Resolver instance in the registry
-
-|useApplicationContextClassLoader | Boolean |true  |To use CamelContext's ApplicationContextClassLoader if no custom class loader is set and
-ApplicationContextClassLoader is provided
-
-|prettyFlow | Boolean |false  |Force the emitter to produce a pretty YAML document when using the flow style
-|=======================================================================
 
 [[YAMLDataFormat-DependenciesforSnakeYAML]]
 Dependencies for SnakeYAML
diff --git a/components/camel-snakeyaml/src/main/java/org/apache/camel/component/snakeyaml/SnakeYAMLDataFormat.java b/components/camel-snakeyaml/src/main/java/org/apache/camel/component/snakeyaml/SnakeYAMLDataFormat.java
index 7e030bb5f30..24fd0da9acf 100644
--- a/components/camel-snakeyaml/src/main/java/org/apache/camel/component/snakeyaml/SnakeYAMLDataFormat.java
+++ b/components/camel-snakeyaml/src/main/java/org/apache/camel/component/snakeyaml/SnakeYAMLDataFormat.java
@@ -21,10 +21,14 @@
 import java.io.OutputStream;
 import java.io.OutputStreamWriter;
 import java.lang.ref.WeakReference;
-import java.util.LinkedHashMap;
-import java.util.LinkedList;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.Collections;
 import java.util.List;
 import java.util.Map;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.ConcurrentMap;
+import java.util.concurrent.CopyOnWriteArrayList;
 
 import org.apache.camel.CamelContext;
 import org.apache.camel.Exchange;
@@ -38,18 +42,17 @@
 import org.yaml.snakeyaml.constructor.BaseConstructor;
 import org.yaml.snakeyaml.constructor.Constructor;
 import org.yaml.snakeyaml.constructor.CustomClassLoaderConstructor;
+import org.yaml.snakeyaml.constructor.SafeConstructor;
 import org.yaml.snakeyaml.nodes.Tag;
 import org.yaml.snakeyaml.representer.Representer;
 import org.yaml.snakeyaml.resolver.Resolver;
 
-
 /**
  * A <a href="http://camel.apache.org/data-format.html">data format</a> ({@link DataFormat})
  * using <a href="http://www.snakeyaml.org">SnakeYAML</a> to marshal to and from YAML.
  */
-public class SnakeYAMLDataFormat extends ServiceSupport implements DataFormat, DataFormatName {
-
-    private ThreadLocal<WeakReference<Yaml>> yamlCache;
+public final class SnakeYAMLDataFormat extends ServiceSupport implements DataFormat, DataFormatName {
+    private final ThreadLocal<WeakReference<Yaml>> yamlCache;
     private BaseConstructor constructor;
     private Representer representer;
     private DumperOptions dumperOptions;
@@ -57,19 +60,25 @@
     private ClassLoader classLoader;
     private Class<?> unmarshalType;
     private List<TypeDescription> typeDescriptions;
-    private Map<Class<?>, Tag> classTags;
+    private ConcurrentMap<Class<?>, Tag> classTags;
     private boolean useApplicationContextClassLoader;
     private boolean prettyFlow;
+    private boolean allowAnyType;
+    private List<TypeFilter> typeFilters;
 
     public SnakeYAMLDataFormat() {
-        this(Object.class);
+        this(null);
     }
 
     public SnakeYAMLDataFormat(Class<?> type) {
-        this.unmarshalType = type;
         this.yamlCache = new ThreadLocal<>();
         this.useApplicationContextClassLoader = true;
         this.prettyFlow = false;
+        this.allowAnyType = false;
+
+        if (type != null) {
+            setUnmarshalType(type);
+        }
     }
 
     @Override
@@ -79,15 +88,16 @@ public String getDataFormatName() {
 
     @Override
     public void marshal(final Exchange exchange, final Object graph, final OutputStream stream) throws Exception {
-        try (final OutputStreamWriter osw = new OutputStreamWriter(stream, IOHelper.getCharsetName(exchange))) {
+        try (OutputStreamWriter osw = new OutputStreamWriter(stream, IOHelper.getCharsetName(exchange))) {
             getYaml(exchange.getContext()).dump(graph, osw);
         }
     }
 
     @Override
     public Object unmarshal(final Exchange exchange, final InputStream stream) throws Exception {
-        try (final InputStreamReader isr = new InputStreamReader(stream, IOHelper.getCharsetName(exchange))) {
-            return getYaml(exchange.getContext()).loadAs(isr, unmarshalType);
+        try (InputStreamReader isr = new InputStreamReader(stream, IOHelper.getCharsetName(exchange))) {
+            Class<?> unmarshalObjectType = unmarshalType != null ? unmarshalType : Object.class;
+            return getYaml(exchange.getContext()).loadAs(isr, unmarshalObjectType);
         }
     }
 
@@ -105,17 +115,26 @@ protected Yaml getYaml(CamelContext context) {
             DumperOptions yamlDumperOptions = this.dumperOptions;
             Resolver yamlResolver = this.resolver;
             ClassLoader yamlClassLoader = this.classLoader;
+            Collection<TypeFilter> yamlTypeFilters = this.typeFilters;
 
             if (yamlClassLoader == null && useApplicationContextClassLoader) {
                 yamlClassLoader = context.getApplicationContextClassLoader();
             }
 
             if (yamlConstructor == null) {
-                yamlConstructor = yamlClassLoader == null
-                    ? new Constructor()
-                    : new CustomClassLoaderConstructor(yamlClassLoader);
+                if (allowAnyType) {
+                    yamlTypeFilters = Collections.singletonList(TypeFilters.allowAll());
+                }
+
+                if (yamlTypeFilters != null) {
+                    yamlConstructor = yamlClassLoader != null
+                        ? typeFilterConstructor(yamlClassLoader, yamlTypeFilters)
+                        : typeFilterConstructor(yamlTypeFilters);
+                } else {
+                    yamlConstructor = new SafeConstructor();
+                }
 
-                if (typeDescriptions != null) {
+                if (typeDescriptions != null && yamlConstructor instanceof Constructor) {
                     for (TypeDescription typeDescription : typeDescriptions) {
                         ((Constructor)yamlConstructor).addTypeDescription(typeDescription);
                     }
@@ -219,6 +238,7 @@ public void setClassLoader(ClassLoader classLoader) {
      */
     public void setUnmarshalType(Class<?> unmarshalType) {
         this.unmarshalType = unmarshalType;
+        addTypeFilters(TypeFilters.types(unmarshalType));
     }
 
     public List<TypeDescription> getTypeDescriptions() {
@@ -229,22 +249,24 @@ public void setUnmarshalType(Class<?> unmarshalType) {
      * Make YAML aware how to parse a custom Class.
      */
     public void setTypeDescriptions(List<TypeDescription> typeDescriptions) {
-        this.typeDescriptions = typeDescriptions;
+        this.typeDescriptions = new CopyOnWriteArrayList<>(typeDescriptions);
     }
 
-    public void addTypeDescriptions(TypeDescription... typeDescriptions) {
+    public void addTypeDescriptions(Collection<TypeDescription> typeDescriptions) {
         if (this.typeDescriptions == null) {
-            this.typeDescriptions = new LinkedList<>();
+            this.typeDescriptions = new CopyOnWriteArrayList<>();
         }
 
-        for (TypeDescription typeDescription : typeDescriptions) {
-            this.typeDescriptions.add(typeDescription);
-        }
+        this.typeDescriptions.addAll(typeDescriptions);
+    }
+
+    public void addTypeDescriptions(TypeDescription... typeDescriptions) {
+        addTypeDescriptions(Arrays.asList(typeDescriptions));
     }
 
     public void addTypeDescription(Class<?> type, Tag tag) {
         if (this.typeDescriptions == null) {
-            this.typeDescriptions = new LinkedList<>();
+            this.typeDescriptions = new CopyOnWriteArrayList<>();
         }
 
         this.typeDescriptions.add(new TypeDescription(type, tag));
@@ -258,12 +280,13 @@ public void addTypeDescription(Class<?> type, Tag tag) {
      * Define a tag for the <code>Class</code> to serialize.
      */
     public void setClassTags(Map<Class<?>, Tag> classTags) {
-        this.classTags = classTags;
+        this.classTags = new ConcurrentHashMap<>();
+        this.classTags.putAll(classTags);
     }
 
     public void addClassTags(Class<?> type, Tag tag) {
         if (this.classTags == null) {
-            this.classTags = new LinkedHashMap<>();
+            this.classTags = new ConcurrentHashMap<>();
         }
 
         this.classTags.put(type, tag);
@@ -301,4 +324,76 @@ public void addTag(Class<?> type, Tag tag) {
         addClassTags(type, tag);
         addTypeDescription(type, tag);
     }
+
+    public List<TypeFilter> getTypeFilters() {
+        return typeFilters;
+    }
+
+    /**
+     * Set the types SnakeYAML is allowed to un-marshall
+     */
+    public void setTypeFilters(List<TypeFilter> typeFilters) {
+        this.typeFilters = new CopyOnWriteArrayList<>(typeFilters);
+    }
+
+    public void setTypeFilterDefinitions(List<String> typeFilterDefinitions) {
+        this.typeFilters = new CopyOnWriteArrayList<>();
+
+        for (String definition : typeFilterDefinitions) {
+            TypeFilters.valueOf(definition).ifPresent(this.typeFilters::add);
+        }
+    }
+
+    public void addTypeFilters(Collection<TypeFilter> typeFilters) {
+        if (this.typeFilters == null) {
+            this.typeFilters = new CopyOnWriteArrayList<>();
+        }
+
+        this.typeFilters.addAll(typeFilters);
+    }
+
+    public void addTypeFilters(TypeFilter... typeFilters) {
+        addTypeFilters(Arrays.asList(typeFilters));
+    }
+
+    public boolean isAllowAnyType() {
+        return allowAnyType;
+    }
+
+    /**
+     * Allow any class to be un-marshaled, same as setTypeFilters(TypeFilters.allowAll())
+     */
+    public void setAllowAnyType(boolean allowAnyType) {
+        this.allowAnyType = allowAnyType;
+    }
+
+    // ***************************
+    // Constructors
+    // ***************************
+
+    private static Constructor typeFilterConstructor(final Collection<TypeFilter> typeFilters) {
+        return new Constructor() {
+            @Override
+            protected Class<?> getClassForName(String name) throws ClassNotFoundException {
+                if (typeFilters.stream().noneMatch(f -> f.test(name))) {
+                    throw new IllegalArgumentException("Type " + name + " is not allowed");
+                }
+
+                return super.getClassForName(name);
+            }
+        };
+    }
+
+    private static Constructor typeFilterConstructor(final ClassLoader classLoader, final Collection<TypeFilter> typeFilters) {
+        return new CustomClassLoaderConstructor(classLoader) {
+            @Override
+            protected Class<?> getClassForName(String name) throws ClassNotFoundException {
+                if (typeFilters.stream().noneMatch(f -> f.test(name))) {
+                    throw new IllegalArgumentException("Type " + name + " is not allowed");
+                }
+
+                return super.getClassForName(name);
+            }
+        };
+    }
 }
diff --git a/components/camel-snakeyaml/src/main/java/org/apache/camel/component/snakeyaml/TypeFilter.java b/components/camel-snakeyaml/src/main/java/org/apache/camel/component/snakeyaml/TypeFilter.java
new file mode 100644
index 00000000000..68200f7a2fb
--- /dev/null
+++ b/components/camel-snakeyaml/src/main/java/org/apache/camel/component/snakeyaml/TypeFilter.java
@@ -0,0 +1,23 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.snakeyaml;
+
+import java.util.function.Predicate;
+
+@FunctionalInterface
+public interface TypeFilter extends Predicate<String> {
+}
diff --git a/components/camel-snakeyaml/src/main/java/org/apache/camel/component/snakeyaml/TypeFilters.java b/components/camel-snakeyaml/src/main/java/org/apache/camel/component/snakeyaml/TypeFilters.java
new file mode 100644
index 00000000000..61f638ac19a
--- /dev/null
+++ b/components/camel-snakeyaml/src/main/java/org/apache/camel/component/snakeyaml/TypeFilters.java
@@ -0,0 +1,119 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.camel.component.snakeyaml;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.List;
+import java.util.Optional;
+import java.util.function.Predicate;
+import java.util.regex.Pattern;
+import java.util.stream.Collectors;
+
+import org.apache.camel.util.StringHelper;
+
+public final class TypeFilters {
+    private TypeFilters() {
+    }
+
+    public static final class RegExp implements TypeFilter {
+        private final List<Predicate<String>> predicates;
+
+        public RegExp(String pattern) {
+            this.predicates = Collections.singletonList(Pattern.compile(pattern).asPredicate());
+        }
+
+        public RegExp(Collection<String> patterns) {
+            this.predicates = patterns.stream()
+                .map(Pattern::compile)
+                .map(Pattern::asPredicate)
+                .collect(Collectors.toList());
+        }
+
+        @Override
+        public boolean test(String type) {
+            return predicates.stream().anyMatch(p -> p.test(type));
+        }
+    }
+
+    public static final class TypeName implements TypeFilter {
+        private final List<String> values;
+
+        public TypeName(String value) {
+            this.values = Collections.singletonList(value);
+        }
+
+        public TypeName(Collection<String> values) {
+            this.values = new ArrayList<>(values);
+        }
+
+        @Override
+        public boolean test(String type) {
+            return this.values.contains(type);
+        }
+    }
+
+    // ***************************
+    // Helpers
+    // ***************************
+
+    public static Optional<TypeFilter> valueOf(String definition) {
+        String type = StringHelper.before(definition, ":");
+        if (type == null || "type".equals(type)) {
+            return StringHelper.after(definition, ":", TypeName::new);
+        } else if ("regexp".equals(type)) {
+            return StringHelper.after(definition, ":", RegExp::new);
+        }
+
+        return Optional.empty();
+    }
+
+    public static TypeFilter regexp(String... patterns) {
+        return new RegExp(Arrays.asList(patterns));
+    }
+
+    public static TypeFilter regexp(Collection<String> patterns) {
+        return new RegExp(patterns);
+    }
+
+    public static TypeFilter typeNames(Collection<String> values) {
+        return new TypeName(values);
+    }
+
+    public static TypeFilter typeNames(String... values) {
+        return typeNames(Arrays.asList(values));
+    }
+
+    public static TypeFilter types(Collection<Class<?>> values) {
+        return new TypeName(values.stream().map(c -> c.getName()).collect(Collectors.toList()));
+    }
+
+    public static TypeFilter types(Class<?>... values) {
+        return types(Arrays.asList(values));
+    }
+
+    public static TypeFilter allowAll() {
+        return s -> true;
+    }
+
+    public static TypeFilter allowNone() {
+        return s -> false;
+    }
+}
diff --git a/components/camel-snakeyaml/src/test/java/org/apache/camel/component/snakeyaml/SnakeYAMLBlueprintTypeFilterTest.java b/components/camel-snakeyaml/src/test/java/org/apache/camel/component/snakeyaml/SnakeYAMLBlueprintTypeFilterTest.java
new file mode 100644
index 00000000000..8cfa7649295
--- /dev/null
+++ b/components/camel-snakeyaml/src/test/java/org/apache/camel/component/snakeyaml/SnakeYAMLBlueprintTypeFilterTest.java
@@ -0,0 +1,48 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.camel.component.snakeyaml;
+
+import org.apache.camel.test.blueprint.CamelBlueprintTestSupport;
+import org.junit.Test;
+
+public class SnakeYAMLBlueprintTypeFilterTest extends CamelBlueprintTestSupport {
+    @Test
+    public void testSafeConstructor() throws Exception {
+        SnakeYAMLTypeFilterHelper.testSafeConstructor(template);
+    }
+
+    @Test
+    public void testTypeConstructor() throws Exception {
+        SnakeYAMLTypeFilterHelper.testTypeConstructor(template);
+    }
+
+    @Test
+    public void testTypeConstructorFromDefinition() throws Exception {
+        SnakeYAMLTypeFilterHelper.testTypeConstructorFromDefinition(template);
+    }
+
+    @Test
+    public void testAllowAllConstructor() throws Exception {
+        SnakeYAMLTypeFilterHelper.testAllowAllConstructor(template);
+    }
+
+    @Override
+    protected String getBlueprintDescriptor() {
+        return "OSGI-INF/blueprint/blueprint-typefilter.xml";
+    }
+}
diff --git a/components/camel-snakeyaml/src/test/java/org/apache/camel/component/snakeyaml/SnakeYAMLSpringMarshalTest.java b/components/camel-snakeyaml/src/test/java/org/apache/camel/component/snakeyaml/SnakeYAMLSpringTest.java
similarity index 82%
rename from components/camel-snakeyaml/src/test/java/org/apache/camel/component/snakeyaml/SnakeYAMLSpringMarshalTest.java
rename to components/camel-snakeyaml/src/test/java/org/apache/camel/component/snakeyaml/SnakeYAMLSpringTest.java
index a80b4fdc7d6..70344591b28 100644
--- a/components/camel-snakeyaml/src/test/java/org/apache/camel/component/snakeyaml/SnakeYAMLSpringMarshalTest.java
+++ b/components/camel-snakeyaml/src/test/java/org/apache/camel/component/snakeyaml/SnakeYAMLSpringTest.java
@@ -23,17 +23,18 @@
 import org.junit.Test;
 import org.springframework.context.support.AbstractXmlApplicationContext;
 import org.springframework.context.support.ClassPathXmlApplicationContext;
+import org.springframework.test.annotation.DirtiesContext;
 
-public class SnakeYAMLSpringMarshalTest extends CamelSpringTestSupport {
-
+@DirtiesContext
+public class SnakeYAMLSpringTest extends CamelSpringTestSupport {
     @Test
     public void testMarshalAndUnmarshalMap() throws Exception {
         Map<String, String> in = new HashMap<>();
         in.put("name", "Camel");
 
-        SnakeYAMLMarshalTestHelper.marshalAndUnmarshal(
+        SnakeYAMLTestHelper.marshalAndUnmarshal(
             context(),
-            SnakeYAMLMarshalTestHelper.createTestMap(),
+            SnakeYAMLTestHelper.createTestMap(),
             "mock:reverse",
             "direct:in",
             "direct:back",
@@ -43,9 +44,9 @@ public void testMarshalAndUnmarshalMap() throws Exception {
 
     @Test
     public void testMarshalAndUnmarshalPojo() throws Exception {
-        SnakeYAMLMarshalTestHelper.marshalAndUnmarshal(
+        SnakeYAMLTestHelper.marshalAndUnmarshal(
             context(),
-            SnakeYAMLMarshalTestHelper.createTestPojo(),
+            SnakeYAMLTestHelper.createTestPojo(),
             "mock:reversePojo",
             "direct:inPojo",
             "direct:backPojo",
@@ -55,9 +56,9 @@ public void testMarshalAndUnmarshalPojo() throws Exception {
 
     @Test
     public void testMarshalAndUnmarshalPojoWithPrettyFlow() throws Exception {
-        SnakeYAMLMarshalTestHelper.marshalAndUnmarshal(
+        SnakeYAMLTestHelper.marshalAndUnmarshal(
             context(),
-            SnakeYAMLMarshalTestHelper.createTestPojo(),
+            SnakeYAMLTestHelper.createTestPojo(),
             "mock:reversePojoWithPrettyFlow",
             "direct:inPojoWithPrettyFlow",
             "direct:backPojoWithPrettyFlow",
@@ -67,7 +68,6 @@ public void testMarshalAndUnmarshalPojoWithPrettyFlow() throws Exception {
 
     @Override
     protected AbstractXmlApplicationContext createApplicationContext() {
-        return new ClassPathXmlApplicationContext("org/apache/camel/component/snakeyaml/SnakeYAMLSpringMarshalTest.xml");
+        return new ClassPathXmlApplicationContext("org/apache/camel/component/snakeyaml/SnakeYAMLSpringTest.xml");
     }
-
 }
diff --git a/components/camel-snakeyaml/src/test/java/org/apache/camel/component/snakeyaml/SnakeYAMLSpringTypeFilterTest.java b/components/camel-snakeyaml/src/test/java/org/apache/camel/component/snakeyaml/SnakeYAMLSpringTypeFilterTest.java
new file mode 100644
index 00000000000..38df35fe445
--- /dev/null
+++ b/components/camel-snakeyaml/src/test/java/org/apache/camel/component/snakeyaml/SnakeYAMLSpringTypeFilterTest.java
@@ -0,0 +1,51 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.snakeyaml;
+
+import org.apache.camel.test.spring.CamelSpringTestSupport;
+import org.junit.Test;
+import org.springframework.context.support.AbstractXmlApplicationContext;
+import org.springframework.context.support.ClassPathXmlApplicationContext;
+import org.springframework.test.annotation.DirtiesContext;
+
+@DirtiesContext
+public class SnakeYAMLSpringTypeFilterTest extends CamelSpringTestSupport {
+    @Test
+    public void testSafeConstructor() throws Exception {
+        SnakeYAMLTypeFilterHelper.testSafeConstructor(template);
+    }
+
+    @Test
+    public void testTypeConstructor() throws Exception {
+        SnakeYAMLTypeFilterHelper.testTypeConstructor(template);
+    }
+
+    @Test
+    public void testTypeConstructorFromDefinition() throws Exception {
+        SnakeYAMLTypeFilterHelper.testTypeConstructorFromDefinition(template);
+    }
+
+    @Test
+    public void testAllowAllConstructor() throws Exception {
+        SnakeYAMLTypeFilterHelper.testAllowAllConstructor(template);
+    }
+
+    @Override
+    protected AbstractXmlApplicationContext createApplicationContext() {
+        return new ClassPathXmlApplicationContext("org/apache/camel/component/snakeyaml/SnakeYAMLSpringTypeFilterTest.xml");
+    }
+}
diff --git a/components/camel-snakeyaml/src/test/java/org/apache/camel/component/snakeyaml/SnakeYAMLMarshalTest.java b/components/camel-snakeyaml/src/test/java/org/apache/camel/component/snakeyaml/SnakeYAMLTest.java
similarity index 80%
rename from components/camel-snakeyaml/src/test/java/org/apache/camel/component/snakeyaml/SnakeYAMLMarshalTest.java
rename to components/camel-snakeyaml/src/test/java/org/apache/camel/component/snakeyaml/SnakeYAMLTest.java
index 0284386ea98..a276b41499e 100644
--- a/components/camel-snakeyaml/src/test/java/org/apache/camel/component/snakeyaml/SnakeYAMLMarshalTest.java
+++ b/components/camel-snakeyaml/src/test/java/org/apache/camel/component/snakeyaml/SnakeYAMLTest.java
@@ -27,20 +27,20 @@
 import org.junit.runners.Parameterized;
 import org.yaml.snakeyaml.nodes.Tag;
 
-import static org.apache.camel.component.snakeyaml.SnakeYAMLMarshalTestHelper.createClassTagDataFormat;
-import static org.apache.camel.component.snakeyaml.SnakeYAMLMarshalTestHelper.createDataFormat;
-import static org.apache.camel.component.snakeyaml.SnakeYAMLMarshalTestHelper.createPrettyFlowDataFormat;
-import static org.apache.camel.component.snakeyaml.SnakeYAMLMarshalTestHelper.createTestMap;
-import static org.apache.camel.component.snakeyaml.SnakeYAMLMarshalTestHelper.createTestPojo;
+import static org.apache.camel.component.snakeyaml.SnakeYAMLTestHelper.createClassTagDataFormat;
+import static org.apache.camel.component.snakeyaml.SnakeYAMLTestHelper.createDataFormat;
+import static org.apache.camel.component.snakeyaml.SnakeYAMLTestHelper.createPrettyFlowDataFormat;
+import static org.apache.camel.component.snakeyaml.SnakeYAMLTestHelper.createTestMap;
+import static org.apache.camel.component.snakeyaml.SnakeYAMLTestHelper.createTestPojo;
 
 @RunWith(Parameterized.class)
-public class SnakeYAMLMarshalTest extends CamelTestSupport {
+public class SnakeYAMLTest extends CamelTestSupport {
 
     private final SnakeYAMLDataFormat format;
     private final Object body;
     private final String expected;
 
-    public SnakeYAMLMarshalTest(SnakeYAMLDataFormat format, Object body, String expected) {
+    public SnakeYAMLTest(SnakeYAMLDataFormat format, Object body, String expected) {
         this.format = format;
         this.body = body;
         this.expected = expected;
@@ -74,7 +74,7 @@ public static Collection yamlCases() {
 
     @Test
     public void testMarshalAndUnmarshal() throws Exception {
-        SnakeYAMLMarshalTestHelper.marshalAndUnmarshal(
+        SnakeYAMLTestHelper.marshalAndUnmarshal(
             context(),
             body,
             "mock:reverse",
diff --git a/components/camel-snakeyaml/src/test/java/org/apache/camel/component/snakeyaml/SnakeYAMLMarshalTestHelper.java b/components/camel-snakeyaml/src/test/java/org/apache/camel/component/snakeyaml/SnakeYAMLTestHelper.java
similarity index 81%
rename from components/camel-snakeyaml/src/test/java/org/apache/camel/component/snakeyaml/SnakeYAMLMarshalTestHelper.java
rename to components/camel-snakeyaml/src/test/java/org/apache/camel/component/snakeyaml/SnakeYAMLTestHelper.java
index e39d014ba37..86a2a83db6b 100644
--- a/components/camel-snakeyaml/src/test/java/org/apache/camel/component/snakeyaml/SnakeYAMLMarshalTestHelper.java
+++ b/components/camel-snakeyaml/src/test/java/org/apache/camel/component/snakeyaml/SnakeYAMLTestHelper.java
@@ -28,9 +28,9 @@
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
 
-public final class SnakeYAMLMarshalTestHelper  {
+public final class SnakeYAMLTestHelper {
 
-    protected SnakeYAMLMarshalTestHelper() {
+    protected SnakeYAMLTestHelper() {
     }
 
     public static TestPojo createTestPojo() {
@@ -44,22 +44,27 @@ public static TestPojo createTestPojo() {
         return map;
     }
 
-    public static SnakeYAMLDataFormat createDataFormat(Class<?> type) {
-        return type == null ? new SnakeYAMLDataFormat() : new SnakeYAMLDataFormat(type);
+    public static SnakeYAMLDataFormat createDataFormat(final Class<?> type) {
+        SnakeYAMLDataFormat format = new SnakeYAMLDataFormat();
+        if (type != null) {
+            format.setUnmarshalType(type);
+        }
+
+        return format;
     }
 
     public static SnakeYAMLDataFormat createPrettyFlowDataFormat(Class<?> type, boolean prettyFlow) {
-        SnakeYAMLDataFormat df = type == null ? new SnakeYAMLDataFormat() : new SnakeYAMLDataFormat(type);
-        df.setPrettyFlow(prettyFlow);
+        SnakeYAMLDataFormat format = createDataFormat(type);
+        format.setPrettyFlow(prettyFlow);
 
-        return df;
+        return format;
     }
 
     public static SnakeYAMLDataFormat createClassTagDataFormat(Class<?> type, Tag tag) {
-        SnakeYAMLDataFormat df = new SnakeYAMLDataFormat(type);
-        df.addTag(type, tag);
+        SnakeYAMLDataFormat format = createDataFormat(type);
+        format.addTag(type, tag);
 
-        return df;
+        return format;
     }
 
     public static void marshalAndUnmarshal(
@@ -79,6 +84,7 @@ public static void marshalAndUnmarshal(
 
         template.sendBody(directBack, result);
 
+
         mock.assertIsSatisfied();
     }
 }
diff --git a/components/camel-snakeyaml/src/test/java/org/apache/camel/component/snakeyaml/SnakeYAMLTypeFilterHelper.java b/components/camel-snakeyaml/src/test/java/org/apache/camel/component/snakeyaml/SnakeYAMLTypeFilterHelper.java
new file mode 100644
index 00000000000..6339aba846b
--- /dev/null
+++ b/components/camel-snakeyaml/src/test/java/org/apache/camel/component/snakeyaml/SnakeYAMLTypeFilterHelper.java
@@ -0,0 +1,117 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.camel.component.snakeyaml;
+
+import org.apache.camel.CamelExecutionException;
+import org.apache.camel.ProducerTemplate;
+import org.apache.camel.component.snakeyaml.model.RexPojo;
+import org.apache.camel.component.snakeyaml.model.TestPojo;
+import org.apache.camel.component.snakeyaml.model.UnsafePojo;
+import org.yaml.snakeyaml.constructor.ConstructorException;
+
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertTrue;
+import static org.junit.Assert.fail;
+
+public final class SnakeYAMLTypeFilterHelper {
+    private SnakeYAMLTypeFilterHelper() {
+    }
+
+    static void testSafeConstructor(ProducerTemplate template) throws Exception {
+        try {
+            template.sendBody(
+                "direct:safe-constructor",
+                "!!org.apache.camel.component.snakeyaml.model.TestPojo {name: Camel}");
+
+            fail("As SnakeYAML uses SafeConstructor, custom types should not be allowed");
+        } catch (CamelExecutionException e) {
+            assertTrue(e.getCause() instanceof ConstructorException);
+        }
+    }
+
+    static void testTypeConstructor(ProducerTemplate template) throws Exception {
+        Object result = template.requestBody(
+            "direct:type-constructor",
+            "!!org.apache.camel.component.snakeyaml.model.TestPojo {name: Camel}");
+
+        assertNotNull(result);
+        assertTrue(result instanceof TestPojo);
+
+        try {
+            template.sendBody(
+                "direct:type-constructor",
+                "!!org.apache.camel.component.snakeyaml.model.UnsafePojo {name: Camel}");
+
+            fail("As SnakeYAML filters class is can unmarshall, UnsafePojo should not be allowed");
+        } catch (CamelExecutionException e) {
+            // Wrapped by SnakeYAML
+            assertTrue(e.getCause() instanceof ConstructorException);
+            // Thrown by SnakeYAMLDataFormat
+            assertTrue(e.getCause().getCause() instanceof IllegalArgumentException);
+        }
+    }
+
+    static void testTypeConstructorFromDefinition(ProducerTemplate template) throws Exception {
+        Object result;
+
+        // TestPojo --> from definition type:
+        result = template.requestBody(
+            "direct:type-constructor-strdef",
+            "!!org.apache.camel.component.snakeyaml.model.TestPojo {name: Camel}");
+
+        assertNotNull(result);
+        assertTrue(result instanceof TestPojo);
+
+        // RexPojo --> from definition rex:
+        result = template.requestBody(
+            "direct:type-constructor-strdef",
+            "!!org.apache.camel.component.snakeyaml.model.RexPojo {name: Camel}");
+
+        assertNotNull(result);
+        assertTrue(result instanceof RexPojo);
+
+        try {
+            template.sendBody(
+                "direct:type-constructor-strdef",
+                "!!org.apache.camel.component.snakeyaml.model.UnsafePojo {name: Camel}");
+
+            fail("As SnakeYAML filters class is can unmarshall, UnsafePojo should not be allowed");
+        } catch (CamelExecutionException e) {
+            // Wrapped by SnakeYAML
+            assertTrue(e.getCause() instanceof ConstructorException);
+            // Thrown by SnakeYAMLDataFormat
+            assertTrue(e.getCause().getCause() instanceof IllegalArgumentException);
+        }
+    }
+
+    static void testAllowAllConstructor(ProducerTemplate template) throws Exception {
+        Object testPojo = template.requestBody(
+            "direct:all-constructor",
+            "!!org.apache.camel.component.snakeyaml.model.TestPojo {name: Camel}");
+
+        assertNotNull(testPojo);
+        assertTrue(testPojo instanceof TestPojo);
+
+        Object unsafePojo = template.requestBody(
+            "direct:all-constructor",
+            "!!org.apache.camel.component.snakeyaml.model.UnsafePojo {name: Camel}");
+
+        assertNotNull(unsafePojo);
+        assertTrue(unsafePojo instanceof UnsafePojo);
+    }
+}
diff --git a/components/camel-snakeyaml/src/test/java/org/apache/camel/component/snakeyaml/SnakeYAMLTypeFilterTest.java b/components/camel-snakeyaml/src/test/java/org/apache/camel/component/snakeyaml/SnakeYAMLTypeFilterTest.java
new file mode 100644
index 00000000000..53e7bbd7765
--- /dev/null
+++ b/components/camel-snakeyaml/src/test/java/org/apache/camel/component/snakeyaml/SnakeYAMLTypeFilterTest.java
@@ -0,0 +1,85 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.camel.component.snakeyaml;
+
+import java.util.Arrays;
+
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.component.snakeyaml.model.TestPojo;
+import org.apache.camel.test.junit4.CamelTestSupport;
+import org.junit.Test;
+
+public class SnakeYAMLTypeFilterTest extends CamelTestSupport {
+    @Test
+    public void testSafeConstructor() throws Exception {
+        SnakeYAMLTypeFilterHelper.testSafeConstructor(template);
+    }
+
+    @Test
+    public void testTypeConstructor() throws Exception {
+        SnakeYAMLTypeFilterHelper.testTypeConstructor(template);
+    }
+
+    @Test
+    public void testTypeConstructorFromDefinition() throws Exception {
+        SnakeYAMLTypeFilterHelper.testTypeConstructorFromDefinition(template);
+    }
+
+    @Test
+    public void testAllowAllConstructor() throws Exception {
+        SnakeYAMLTypeFilterHelper.testAllowAllConstructor(template);
+    }
+
+    @Override
+    protected RouteBuilder createRouteBuilder() throws Exception {
+        return new RouteBuilder() {
+            @Override
+            public void configure() throws Exception {
+                // SafeConstructor
+                SnakeYAMLDataFormat safeConstructorDf = new SnakeYAMLDataFormat();
+
+                from("direct:safe-constructor")
+                    .unmarshal(safeConstructorDf);
+
+                // Type filter Constructor
+                SnakeYAMLDataFormat typeConstructorDf = new SnakeYAMLDataFormat();
+                typeConstructorDf.addTypeFilters(TypeFilters.types(TestPojo.class));
+
+                from("direct:type-constructor")
+                    .unmarshal(typeConstructorDf);
+
+                // Type filter Constructor from string definitions
+                SnakeYAMLDataFormat typeConstructorStrDf = new SnakeYAMLDataFormat();
+                typeConstructorStrDf.setTypeFilterDefinitions(Arrays.asList(
+                    "type:org.apache.camel.component.snakeyaml.model.TestPojo",
+                    "regexp:org.apache.camel.component.snakeyaml.model.R.*"));
+
+                from("direct:type-constructor-strdef")
+                    .unmarshal(typeConstructorStrDf);
+
+                // Allow all Constructor
+                SnakeYAMLDataFormat allConstructorDf = new SnakeYAMLDataFormat();
+                allConstructorDf.setAllowAnyType(true);
+
+                from("direct:all-constructor")
+                    .unmarshal(allConstructorDf)
+                    .to("mock:all-constructor");
+            }
+        };
+    }
+}
diff --git a/components/camel-snakeyaml/src/test/java/org/apache/camel/component/snakeyaml/SnakeYAMLUnmarshalTypeTest.java b/components/camel-snakeyaml/src/test/java/org/apache/camel/component/snakeyaml/SnakeYAMLUnmarshalTypeTest.java
new file mode 100644
index 00000000000..5cf7c7b7702
--- /dev/null
+++ b/components/camel-snakeyaml/src/test/java/org/apache/camel/component/snakeyaml/SnakeYAMLUnmarshalTypeTest.java
@@ -0,0 +1,46 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.camel.component.snakeyaml;
+
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.component.snakeyaml.model.TestPojo;
+import org.apache.camel.test.junit4.CamelTestSupport;
+import org.junit.Test;
+
+public class SnakeYAMLUnmarshalTypeTest extends CamelTestSupport {
+    @Test
+    public void testUnmarshal() throws Exception {
+        Object result = template.requestBody("direct:unmarshal", "name: Camel");
+        assertNotNull(result);
+        assertTrue(result instanceof TestPojo);
+    }
+
+    @Override
+    protected RouteBuilder createRouteBuilder() throws Exception {
+        return new RouteBuilder() {
+            @Override
+            public void configure() throws Exception {
+                SnakeYAMLDataFormat format = new SnakeYAMLDataFormat();
+                format.setUnmarshalType(TestPojo.class);
+
+                from("direct:unmarshal")
+                    .unmarshal(format);
+            }
+        };
+    }
+}
diff --git a/components/camel-snakeyaml/src/test/java/org/apache/camel/component/snakeyaml/model/RexPojo.java b/components/camel-snakeyaml/src/test/java/org/apache/camel/component/snakeyaml/model/RexPojo.java
new file mode 100644
index 00000000000..4f8537c07a3
--- /dev/null
+++ b/components/camel-snakeyaml/src/test/java/org/apache/camel/component/snakeyaml/model/RexPojo.java
@@ -0,0 +1,63 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.camel.component.snakeyaml.model;
+
+public class RexPojo {
+    private String name;
+
+    public RexPojo() {
+    }
+
+    public RexPojo(String name) {
+        this.name = name;
+    }
+
+    public String getName() {
+        return this.name;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) {
+            return true;
+        }
+        if (o == null || getClass() != o.getClass()) {
+            return false;
+        }
+
+        RexPojo pojo = (RexPojo) o;
+
+        return name != null ? name.equals(pojo.name) : pojo.name == null;
+    }
+
+    @Override
+    public int hashCode() {
+        return name != null ? name.hashCode() : 0;
+    }
+
+    @Override
+    public String toString() {
+        return "RexPojo {"
+            + "name='" + name + '\''
+            + '}';
+    }
+}
\ No newline at end of file
diff --git a/components/camel-snakeyaml/src/test/java/org/apache/camel/component/snakeyaml/model/TestPojo.java b/components/camel-snakeyaml/src/test/java/org/apache/camel/component/snakeyaml/model/TestPojo.java
index c62c929fb3a..2e5426c0f23 100644
--- a/components/camel-snakeyaml/src/test/java/org/apache/camel/component/snakeyaml/model/TestPojo.java
+++ b/components/camel-snakeyaml/src/test/java/org/apache/camel/component/snakeyaml/model/TestPojo.java
@@ -36,8 +36,17 @@ public void setName(String name) {
     }
 
     @Override
-    public boolean equals(Object obj) {
-        return this.name.equals(((TestPojo) obj).getName());
+    public boolean equals(Object o) {
+        if (this == o) {
+            return true;
+        }
+        if (o == null || getClass() != o.getClass()) {
+            return false;
+        }
+
+        TestPojo pojo = (TestPojo) o;
+
+        return name != null ? name.equals(pojo.name) : pojo.name == null;
     }
 
     @Override
@@ -47,6 +56,8 @@ public int hashCode() {
 
     @Override
     public String toString() {
-        return "TestPojo[" + name + "]";
+        return "TestPojo {"
+            + "name='" + name + '\''
+            + '}';
     }
 }
\ No newline at end of file
diff --git a/components/camel-snakeyaml/src/test/java/org/apache/camel/component/snakeyaml/model/UnsafePojo.java b/components/camel-snakeyaml/src/test/java/org/apache/camel/component/snakeyaml/model/UnsafePojo.java
new file mode 100644
index 00000000000..5d180bf404a
--- /dev/null
+++ b/components/camel-snakeyaml/src/test/java/org/apache/camel/component/snakeyaml/model/UnsafePojo.java
@@ -0,0 +1,63 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.camel.component.snakeyaml.model;
+
+public class UnsafePojo {
+    private String name;
+
+    public UnsafePojo() {
+    }
+
+    public UnsafePojo(String name) {
+        this.name = name;
+    }
+
+    public String getName() {
+        return this.name;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) {
+            return true;
+        }
+        if (o == null || getClass() != o.getClass()) {
+            return false;
+        }
+
+        UnsafePojo pojo = (UnsafePojo) o;
+
+        return name != null ? name.equals(pojo.name) : pojo.name == null;
+    }
+
+    @Override
+    public int hashCode() {
+        return name != null ? name.hashCode() : 0;
+    }
+
+    @Override
+    public String toString() {
+        return "UnsafePojo {"
+            + "name='" + name + '\''
+            + '}';
+    }
+}
\ No newline at end of file
diff --git a/components/camel-snakeyaml/src/test/resources/OSGI-INF/blueprint/blueprint-typefilter.xml b/components/camel-snakeyaml/src/test/resources/OSGI-INF/blueprint/blueprint-typefilter.xml
new file mode 100644
index 00000000000..a0529b1d9bb
--- /dev/null
+++ b/components/camel-snakeyaml/src/test/resources/OSGI-INF/blueprint/blueprint-typefilter.xml
@@ -0,0 +1,71 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+  ~ Licensed to the Apache Software Foundation (ASF) under one or more
+  ~ contributor license agreements.  See the NOTICE file distributed with
+  ~ this work for additional information regarding copyright ownership.
+  ~ The ASF licenses this file to You under the Apache License, Version 2.0
+  ~ (the "License"); you may not use this file except in compliance with
+  ~ the License.  You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0">
+
+  <!-- ******************** -->
+  <!-- DataFormat           -->
+  <!-- ******************** -->
+
+  <bean id="yaml-safe-constructor" class="org.apache.camel.component.snakeyaml.SnakeYAMLDataFormat"/>
+
+  <bean id="yaml-type-constructor" class="org.apache.camel.component.snakeyaml.SnakeYAMLDataFormat">
+    <property name="typeFilterDefinitions">
+      <list>
+        <value>type:org.apache.camel.component.snakeyaml.model.TestPojo</value>
+      </list>
+    </property>
+  </bean>
+
+  <bean id="yaml-type-constructor-strdef" class="org.apache.camel.component.snakeyaml.SnakeYAMLDataFormat">
+    <property name="typeFilterDefinitions">
+      <list>
+        <value>type:org.apache.camel.component.snakeyaml.model.TestPojo</value>
+        <value>regexp:org.apache.camel.component.snakeyaml.model.Rex.*</value>
+      </list>
+    </property>
+  </bean>
+
+  <bean id="yaml-all-constructor" class="org.apache.camel.component.snakeyaml.SnakeYAMLDataFormat">
+    <property name="allowAnyType" value="true"/>
+  </bean>
+
+  <!-- ******************** -->
+  <!-- Camel Context        -->
+  <!-- ******************** -->
+
+  <camelContext id="camel" xmlns="http://camel.apache.org/schema/blueprint">
+    <route>
+      <from uri="direct:safe-constructor"/>
+      <unmarshal ref="yaml-safe-constructor"/>
+    </route>
+    <route>
+      <from uri="direct:type-constructor"/>
+      <unmarshal ref="yaml-type-constructor"/>
+    </route>
+    <route>
+      <from uri="direct:type-constructor-strdef"/>
+      <unmarshal ref="yaml-type-constructor-strdef"/>
+    </route>
+    <route>
+      <from uri="direct:all-constructor"/>
+      <unmarshal ref="yaml-all-constructor"/>
+    </route>
+
+  </camelContext>
+
+</blueprint>
diff --git a/components/camel-snakeyaml/src/test/resources/org/apache/camel/component/snakeyaml/SnakeYAMLSpringMarshalTest.xml b/components/camel-snakeyaml/src/test/resources/org/apache/camel/component/snakeyaml/SnakeYAMLSpringTest.xml
similarity index 100%
rename from components/camel-snakeyaml/src/test/resources/org/apache/camel/component/snakeyaml/SnakeYAMLSpringMarshalTest.xml
rename to components/camel-snakeyaml/src/test/resources/org/apache/camel/component/snakeyaml/SnakeYAMLSpringTest.xml
diff --git a/components/camel-snakeyaml/src/test/resources/org/apache/camel/component/snakeyaml/SnakeYAMLSpringTypeFilterTest.xml b/components/camel-snakeyaml/src/test/resources/org/apache/camel/component/snakeyaml/SnakeYAMLSpringTypeFilterTest.xml
new file mode 100644
index 00000000000..80d5a054b4f
--- /dev/null
+++ b/components/camel-snakeyaml/src/test/resources/org/apache/camel/component/snakeyaml/SnakeYAMLSpringTypeFilterTest.xml
@@ -0,0 +1,60 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+  ~ Licensed to the Apache Software Foundation (ASF) under one or more
+  ~ contributor license agreements.  See the NOTICE file distributed with
+  ~ this work for additional information regarding copyright ownership.
+  ~ The ASF licenses this file to You under the Apache License, Version 2.0
+  ~ (the "License"); you may not use this file except in compliance with
+  ~ the License.  You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+<beans xmlns="http://www.springframework.org/schema/beans"
+       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+       xsi:schemaLocation="
+       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
+       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd">
+
+    <camelContext id="camel" xmlns="http://camel.apache.org/schema/spring">
+
+        <!-- we define the yaml SnakeYAML data formats to be used -->
+        <dataFormats>
+            <yaml id="yaml-safe-constructor"/>
+
+            <yaml id="yaml-type-constructor" library="SnakeYAML">
+                <typeFilter value="org.apache.camel.component.snakeyaml.model.TestPojo"/>
+            </yaml>
+
+            <yaml id="yaml-type-constructor-strdef" library="SnakeYAML">
+                <typeFilter value="org.apache.camel.component.snakeyaml.model.TestPojo"/>
+                <typeFilter value="org.apache.camel.component.snakeyaml.model.Rex.*" type="regexp"/>
+            </yaml>
+
+            <yaml id="yaml-all-constructor" allowAnyType="true"/>
+        </dataFormats>
+
+
+        <route>
+            <from uri="direct:safe-constructor"/>
+            <unmarshal ref="yaml-safe-constructor"/>
+        </route>
+        <route>
+            <from uri="direct:type-constructor"/>
+            <unmarshal ref="yaml-type-constructor"/>
+        </route>
+        <route>
+            <from uri="direct:type-constructor-strdef"/>
+            <unmarshal ref="yaml-type-constructor-strdef"/>
+        </route>
+        <route>
+            <from uri="direct:all-constructor"/>
+            <unmarshal ref="yaml-all-constructor"/>
+        </route>
+    </camelContext>
+</beans>
