Index: xwork-core/src/main/java/com/opensymphony/xwork2/DefaultActionProxy.java
===================================================================
--- xwork-core/src/main/java/com/opensymphony/xwork2/DefaultActionProxy.java	(revision 894090)
+++ xwork-core/src/main/java/com/opensymphony/xwork2/DefaultActionProxy.java	(revision )
@@ -23,11 +23,12 @@
 import com.opensymphony.xwork2.util.logging.Logger;
 import com.opensymphony.xwork2.util.logging.LoggerFactory;
 import com.opensymphony.xwork2.util.profiling.UtilTimerStack;
+import org.apache.commons.lang.StringEscapeUtils;
+import org.apache.commons.lang.StringUtils;
 
 import java.io.Serializable;
 import java.util.Locale;
 
-import org.apache.commons.lang.StringUtils;
 
 
 /**
@@ -36,12 +37,12 @@
  * @author Rainer Hermanns
  * @author Revised by <a href="mailto:hu_pengfei@yahoo.com.cn">Henry Hu</a>
  * @author tmjee
- * 
+ *
  * @version $Date: 2009-12-27 19:18:29 +0100 (Sun, 27 Dec 2009) $ $Id: DefaultActionProxy.java 894090 2009-12-27 18:18:29Z martinc $
  * @since 2005-8-6
  */
 public class DefaultActionProxy implements ActionProxy, Serializable {
-	
+
 	private static final long serialVersionUID = 3293074152487468527L;
 
 	private static final Logger LOG = LoggerFactory.getLogger(DefaultActionProxy.class);
@@ -67,7 +68,7 @@
      * (like a RMIActionProxy).
      */
     protected DefaultActionProxy(ActionInvocation inv, String namespace, String actionName, String methodName, boolean executeResult, boolean cleanupContext) {
-        
+
         this.invocation = inv;
 		this.cleanupContext = cleanupContext;
 		if (LOG.isDebugEnabled()) {
@@ -79,23 +80,23 @@
 		this.executeResult = executeResult;
         this.method = methodName;
     }
-    
+
     @Inject
     public void setObjectFactory(ObjectFactory factory) {
         this.objectFactory = factory;
     }
-    
+
     @Inject
     public void setConfiguration(Configuration config) {
         this.configuration = config;
     }
-    
+
     @Inject
     public void setUnknownHandler(UnknownHandlerManager unknownHandlerManager) {
         this.unknownHandlerManager = unknownHandlerManager;
     }
-    
-    @Inject(required=false) 
+
+    @Inject(required=false)
     public void setActionEventListener(ActionEventListener listener) {
         this.actionEventListener = listener;
     }
@@ -111,7 +112,7 @@
     public ActionConfig getConfig() {
         return config;
     }
-    
+
     public void setExecuteResult(boolean executeResult) {
         this.executeResult = executeResult;
     }
@@ -137,7 +138,7 @@
         String profileKey = "execute: ";
         try {
         	UtilTimerStack.push(profileKey);
-        	
+
             retCode = invocation.invoke();
         } finally {
             if (cleanupContext) {
@@ -151,7 +152,7 @@
 
 
     public String getMethod() {
-        return method;
+        return StringEscapeUtils.escapeJavaScript(method);
     }
 
     private void resolveMethod() {
@@ -170,13 +171,13 @@
         try {
             UtilTimerStack.push(profileKey);
             config = configuration.getRuntimeConfiguration().getActionConfig(namespace, actionName);
-    
+
             if (config == null && unknownHandlerManager.hasUnknownHandlers()) {
                 config = unknownHandlerManager.handleUnknownAction(namespace, actionName);
             }
             if (config == null) {
                 String message;
-    
+
                 if ((namespace != null) && (namespace.trim().length() > 0)) {
                     message = LocalizedTextUtil.findDefaultText(XWorkMessages.MISSING_PACKAGE_ACTION_EXCEPTION, Locale.getDefault(), new String[]{
                         namespace, actionName
@@ -190,9 +191,9 @@
             }
 
             resolveMethod();
-            
+
             if (!config.isAllowedMethod(method)) {
-                throw new ConfigurationException("Invalid method: "+method+" for action "+actionName);
+                throw new ConfigurationException("Invalid method: " + getMethod() + " for action " + actionName);
             }
 
             invocation.init(this);
