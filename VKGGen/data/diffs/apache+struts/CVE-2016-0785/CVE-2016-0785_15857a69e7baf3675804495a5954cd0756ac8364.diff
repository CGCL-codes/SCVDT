diff --git a/core/src/main/java/org/apache/struts2/components/Component.java b/core/src/main/java/org/apache/struts2/components/Component.java
index f6ab54c13..2505fd2dd 100644
--- a/core/src/main/java/org/apache/struts2/components/Component.java
+++ b/core/src/main/java/org/apache/struts2/components/Component.java
@@ -373,7 +373,11 @@ protected Object findValue(String expr, String field, String errorMsg) {
      */
     protected Object findValue(String expr, Class toType) {
         if (altSyntax() && toType == String.class) {
-        	return TextParseUtil.translateVariables('%', expr, stack);
+            if (ComponentUtils.containsExpression(expr)) {
+                return TextParseUtil.translateVariables('%', expr, stack);
+            } else {
+                return expr;
+            }
         } else {
             expr = stripExpressionIfAltSyntax(expr);
 
diff --git a/core/src/main/java/org/apache/struts2/util/ComponentUtils.java b/core/src/main/java/org/apache/struts2/util/ComponentUtils.java
index 89a238f75..01fbcd9be 100644
--- a/core/src/main/java/org/apache/struts2/util/ComponentUtils.java
+++ b/core/src/main/java/org/apache/struts2/util/ComponentUtils.java
@@ -40,12 +40,15 @@ public static boolean altSyntax(ValueStack stack) {
     /**
      * Check if object is expression base on altSyntax
      *
-     * @param value to treat as an expression
+     * @param expr to treat as an expression
      * @return true if it is an expression
      */
-    public static boolean isExpression(Object value) {
-        String expr = value.toString();
+    public static boolean isExpression(String expr) {
         return expr.startsWith("%{") && expr.endsWith("}");
     }
 
+    public static boolean containsExpression(String expr) {
+        return expr.contains("%{") && expr.contains("}");
+    }
+
 }
diff --git a/core/src/main/java/org/apache/struts2/views/jsp/ui/AbstractUITag.java b/core/src/main/java/org/apache/struts2/views/jsp/ui/AbstractUITag.java
index 4b65e110c..73cddc9c8 100644
--- a/core/src/main/java/org/apache/struts2/views/jsp/ui/AbstractUITag.java
+++ b/core/src/main/java/org/apache/struts2/views/jsp/ui/AbstractUITag.java
@@ -306,7 +306,7 @@ public void setLabelSeparator(String labelSeparator) {
     }
 
     public void setDynamicAttribute(String uri, String localName, Object value) throws JspException {
-        if (ComponentUtils.altSyntax(getStack()) && ComponentUtils.isExpression(value)) {
+        if (ComponentUtils.altSyntax(getStack()) && ComponentUtils.isExpression(value.toString())) {
             dynamicAttributes.put(localName, String.valueOf(ObjectUtils.defaultIfNull(findValue(value.toString()), value)));
         } else {
             dynamicAttributes.put(localName, value);
diff --git a/core/src/test/java/org/apache/struts2/util/ComponentUtilsTest.java b/core/src/test/java/org/apache/struts2/util/ComponentUtilsTest.java
index 668935204..095176a75 100644
--- a/core/src/test/java/org/apache/struts2/util/ComponentUtilsTest.java
+++ b/core/src/test/java/org/apache/struts2/util/ComponentUtilsTest.java
@@ -71,6 +71,17 @@ public void testIsExpressionIsTrue() throws Exception {
         assertTrue(actual);
     }
 
+    public void testIsExpressionIsFalseWhenCombined() throws Exception {
+        // given
+        String anExpression = "bar%{foo}";
+
+        // when
+        boolean actual = ComponentUtils.isExpression(anExpression);
+
+        // then
+        assertFalse(actual);
+    }
+
     public void testIsExpressionIsFalse() throws Exception {
         // given
         String anExpression = "foo";
@@ -81,6 +92,39 @@ public void testIsExpressionIsFalse() throws Exception {
         // then
         assertFalse(actual);
     }
+
+    public void testContainsExpressionIsTrue() throws Exception {
+        // given
+        String anExpression = "%{foo}";
+
+        // when
+        boolean actual = ComponentUtils.containsExpression(anExpression);
+
+        // then
+        assertTrue(actual);
+    }
+
+    public void testIsContainsIsTrueWhenCombined() throws Exception {
+        // given
+        String anExpression = "bar%{foo}";
+
+        // when
+        boolean actual = ComponentUtils.containsExpression(anExpression);
+
+        // then
+        assertTrue(actual);
+    }
+
+    public void testContainsExpressionIsFalse() throws Exception {
+        // given
+        String anExpression = "foo";
+
+        // when
+        boolean actual = ComponentUtils.containsExpression(anExpression);
+
+        // then
+        assertFalse(actual);
+    }
 }
 
 class MockConfigurationProvider implements ConfigurationProvider {
