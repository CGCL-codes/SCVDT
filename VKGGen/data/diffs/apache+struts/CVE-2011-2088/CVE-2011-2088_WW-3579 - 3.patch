Index: DefaultActionProxy.java
===================================================================
--- DefaultActionProxy.java	(revision 1074288)
+++ DefaultActionProxy.java	(working copy)
@@ -23,19 +23,21 @@
 import com.opensymphony.xwork2.util.logging.Logger;
 import com.opensymphony.xwork2.util.logging.LoggerFactory;
 import com.opensymphony.xwork2.util.profiling.UtilTimerStack;
+import org.apache.commons.lang.StringEscapeUtils;
+import org.apache.commons.lang.StringUtils;
 
+
 import java.io.Serializable;
 import java.util.Locale;
 
-import org.apache.commons.lang.StringUtils;
 
-
 /**
  * The Default ActionProxy implementation
  *
  * @author Rainer Hermanns
  * @author Revised by <a href="mailto:hu_pengfei@yahoo.com.cn">Henry Hu</a>
  * @author tmjee
+ * @author Revised by Marian Ventuneac 2011-02-24 for reflected XSS vulnerabilities WW-3579
  * 
  * @version $Date$ $Id$
  * @since 2005-8-6
@@ -69,15 +71,15 @@
     protected DefaultActionProxy(ActionInvocation inv, String namespace, String actionName, String methodName, boolean executeResult, boolean cleanupContext) {
         
         this.invocation = inv;
-		this.cleanupContext = cleanupContext;
-		if (LOG.isDebugEnabled()) {
-			LOG.debug("Creating an DefaultActionProxy for namespace " + namespace + " and action name " + actionName);
-		}
+	this.cleanupContext = cleanupContext;
+	if (LOG.isDebugEnabled()) {
+		LOG.debug("Creating an DefaultActionProxy for namespace " + namespace + " and action name " + actionName);
+	}
 
-		this.actionName = actionName;
-		this.namespace = namespace;
-		this.executeResult = executeResult;
-        this.method = methodName;
+	this.actionName = actionName;
+	this.namespace = namespace;
+	this.executeResult = executeResult;
+       	this.method = methodName;
     }
     
     @Inject
@@ -105,7 +107,8 @@
     }
 
     public String getActionName() {
-        return actionName;
+        return StringEscapeUtils.escapeJavaScript(
+		StringEscapeUtils.escapeHtml(actionName));
     }
 
     public ActionConfig getConfig() {
@@ -151,7 +154,8 @@
 
 
     public String getMethod() {
-        return method;
+        return StringEscapeUtils.escapeJavaScript(
+		StringEscapeUtils.escapeHtml(method));
     }
 
     private void resolveMethod() {
@@ -163,27 +167,27 @@
                 this.method = "execute";
             }
         }
+
     }
 
     protected void prepare()  {
         String profileKey = "create DefaultActionProxy: ";
         try {
             UtilTimerStack.push(profileKey);
+
             config = configuration.getRuntimeConfiguration().getActionConfig(namespace, actionName);
-    
             if (config == null && unknownHandlerManager.hasUnknownHandlers()) {
                 config = unknownHandlerManager.handleUnknownAction(namespace, actionName);
             }
             if (config == null) {
                 String message;
-    
                 if ((namespace != null) && (namespace.trim().length() > 0)) {
                     message = LocalizedTextUtil.findDefaultText(XWorkMessages.MISSING_PACKAGE_ACTION_EXCEPTION, Locale.getDefault(), new String[]{
-                        namespace, actionName
+                        namespace, getActionName()
                     });
                 } else {
                     message = LocalizedTextUtil.findDefaultText(XWorkMessages.MISSING_ACTION_EXCEPTION, Locale.getDefault(), new String[]{
-                        actionName
+                        getActionName()
                     });
                 }
                 throw new ConfigurationException(message);
@@ -192,7 +196,7 @@
             resolveMethod();
             
             if (!config.isAllowedMethod(method)) {
-                throw new ConfigurationException("Invalid method: "+method+" for action "+actionName);
+                throw new ConfigurationException("Invalid method: "+getMethod()+" for action "+getActionName());
             }
 
             invocation.init(this);
