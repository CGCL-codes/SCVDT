diff --git a/build/tmpl/text/changes.txt b/build/tmpl/text/changes.txt
index 4c056a4472..9c56faf019 100644
--- a/build/tmpl/text/changes.txt
+++ b/build/tmpl/text/changes.txt
@@ -18,7 +18,8 @@ Changes log
       (issues #599 and #656). Reported by weiweiwang.
     - Fixed reading of Via header (issue #599).
       Reported by Nicolas Rinaudo.
-      
+    - Fixed issue #774 - Removed default support of JavaBeans XML-serialization.
+      Reported by David Jorm, Dinis Cruz, Abraham Kang and Alvaro Munoz.      
 - 2.0.15 (2012-08-23)
     - Bug fixed
        - Fixed bug in Reference#getParentRef with relative URIs.
diff --git a/modules/org.restlet/src/org/restlet/engine/converter/DefaultConverter.java b/modules/org.restlet/src/org/restlet/engine/converter/DefaultConverter.java
index 0fe087fec3..e9f504e046 100644
--- a/modules/org.restlet/src/org/restlet/engine/converter/DefaultConverter.java
+++ b/modules/org.restlet/src/org/restlet/engine/converter/DefaultConverter.java
@@ -78,6 +78,10 @@
     private static final VariantInfo VARIANT_OBJECT_XML = new VariantInfo(
             MediaType.APPLICATION_JAVA_OBJECT_XML);
 
+    /** Indicates whether the JavaBeans XML deserialization is supported or not. */
+    private static final boolean VARIANT_OBJECT_XML_SUPPORTED = Boolean
+            .getBoolean("org.restlet.engine.converter.DefaultConverter.VARIANT_OBJECT_XML_SUPPORTED");
+
     @Override
     public List<Class<?>> getObjectClasses(Variant source) {
         List<Class<?>> result = null;
@@ -90,7 +94,8 @@
             MediaType mediaType = source.getMediaType();
 
             if (MediaType.APPLICATION_JAVA_OBJECT.equals(mediaType)
-                    || MediaType.APPLICATION_JAVA_OBJECT_XML.equals(mediaType)) {
+                    || (VARIANT_OBJECT_XML_SUPPORTED && MediaType.APPLICATION_JAVA_OBJECT_XML
+                            .equals(mediaType))) {
                 result = addObjectClass(result, Object.class);
             } else if (MediaType.APPLICATION_WWW_FORM.equals(mediaType)) {
                 result = addObjectClass(result, Form.class);
@@ -124,7 +129,9 @@
                 result = addVariant(result, VARIANT_FORM);
             } else if (Serializable.class.isAssignableFrom(source)) {
                 result = addVariant(result, VARIANT_OBJECT);
-                result = addVariant(result, VARIANT_OBJECT_XML);
+                if (VARIANT_OBJECT_XML_SUPPORTED) {
+                    result = addVariant(result, VARIANT_OBJECT_XML);
+                }
             }
         }
 
@@ -161,11 +168,13 @@ public float score(Object source, Variant target, UniformResource resource) {
                 } else if (MediaType.APPLICATION_JAVA_OBJECT
                         .isCompatible(target.getMediaType())) {
                     result = 0.6F;
-                } else if (MediaType.APPLICATION_JAVA_OBJECT_XML.equals(target
-                        .getMediaType())) {
+                } else if (VARIANT_OBJECT_XML_SUPPORTED
+                        && MediaType.APPLICATION_JAVA_OBJECT_XML.equals(target
+                                .getMediaType())) {
                     result = 1.0F;
-                } else if (MediaType.APPLICATION_JAVA_OBJECT_XML
-                        .isCompatible(target.getMediaType())) {
+                } else if (VARIANT_OBJECT_XML_SUPPORTED
+                        && MediaType.APPLICATION_JAVA_OBJECT_XML
+                                .isCompatible(target.getMediaType())) {
                     result = 0.6F;
                 }
             } else {
@@ -217,11 +226,13 @@ public float score(Object source, Variant target, UniformResource resource) {
                 } else if (MediaType.APPLICATION_JAVA_OBJECT
                         .isCompatible(source.getMediaType())) {
                     result = 0.6F;
-                } else if (MediaType.APPLICATION_JAVA_OBJECT_XML.equals(source
-                        .getMediaType())) {
+                } else if (VARIANT_OBJECT_XML_SUPPORTED
+                        && MediaType.APPLICATION_JAVA_OBJECT_XML.equals(source
+                                .getMediaType())) {
                     result = 1.0F;
-                } else if (MediaType.APPLICATION_JAVA_OBJECT_XML
-                        .isCompatible(source.getMediaType())) {
+                } else if (VARIANT_OBJECT_XML_SUPPORTED
+                        && MediaType.APPLICATION_JAVA_OBJECT_XML
+                                .isCompatible(source.getMediaType())) {
                     result = 0.6F;
                 } else {
                     result = 0.5F;
@@ -332,8 +343,10 @@ public Representation toRepresentation(Object source, Variant target,
         } else if (Serializable.class.isAssignableFrom(entity)) {
             updatePreferences(preferences, MediaType.APPLICATION_JAVA_OBJECT,
                     1.0F);
-            updatePreferences(preferences,
-                    MediaType.APPLICATION_JAVA_OBJECT_XML, 1.0F);
+            if (VARIANT_OBJECT_XML_SUPPORTED) {
+                updatePreferences(preferences,
+                        MediaType.APPLICATION_JAVA_OBJECT_XML, 1.0F);
+            }
         } else if (String.class.isAssignableFrom(entity)
                 || Reader.class.isAssignableFrom(entity)) {
             updatePreferences(preferences, MediaType.TEXT_PLAIN, 1.0F);
diff --git a/modules/org.restlet/src/org/restlet/representation/ObjectRepresentation.java b/modules/org.restlet/src/org/restlet/representation/ObjectRepresentation.java
index d8dd00be8e..e79c50ca28 100644
--- a/modules/org.restlet/src/org/restlet/representation/ObjectRepresentation.java
+++ b/modules/org.restlet/src/org/restlet/representation/ObjectRepresentation.java
@@ -43,7 +43,26 @@
 import org.restlet.data.MediaType;
 
 /**
- * Representation based on a serializable Java object.
+ * Representation based on a serializable Java object.<br>
+ * It supports binary representations of JavaBeans using the
+ * {@link ObjectInputStream} and {@link ObjectOutputStream} classes. In this
+ * case, it handles representations having the following media type:
+ * {@link MediaType#APPLICATION_JAVA_OBJECT}
+ * ("application/x-java-serialized-object"). It also supports textual
+ * representations of JavaBeans using the {@link XMLEncoder} and
+ * {@link XMLDecoder} classes. In this case, it handles representations having
+ * the following media type: {@link MediaType#APPLICATION_JAVA_OBJECT_XML}
+ * ("application/x-java-serialized-object+xml").
+ * 
+ * SECURITY WARNING: The usage of {@link XMLDecoder} when deserializing XML
+ * presentations from unstrusted sources can lead to malicious attacks. As
+ * pointed <a href=
+ * "http://blog.diniscruz.com/2013/08/using-xmldecoder-to-execute-server-side.html"
+ * >here</a> , the {@link XMLDecoder} is able to force the JVM to execute
+ * unwanted Java code described inside the XML file. Thus, the support of such
+ * format has been disactivated by default inside the default converter. You can
+ * activate this support by turning on the following system property:
+ * org.restlet.engine.converter.DefaultConverter.VARIANT_OBJECT_XML_SUPPORTED.
  * 
  * @author Jerome Louvel
  * @param <T>
