diff --git a/common/src/main/java/org/apache/syncope/common/search/SearchableFields.java b/common/src/main/java/org/apache/syncope/common/search/SearchableFields.java
index ce0693409d..b61dfc8f8d 100644
--- a/common/src/main/java/org/apache/syncope/common/search/SearchableFields.java
+++ b/common/src/main/java/org/apache/syncope/common/search/SearchableFields.java
@@ -33,7 +33,7 @@
     protected static final String[] ATTRIBUTES_NOTINCLUDED = {
         "attrs", "derAttrs", "virAttrs",
         "serialVersionUID", "memberships", "entitlements", "resources", "password",
-        "propagationTOs", "propagationStatusMap"
+        "propagationTOs", "propagationStatusMap", "securityAnswer", "token", "tokenExpireTime"
     };
 
     public static final List<String> get(final SubjectType subjectType) {
diff --git a/core/src/main/java/org/apache/syncope/core/persistence/dao/impl/SubjectSearchDAOImpl.java b/core/src/main/java/org/apache/syncope/core/persistence/dao/impl/SubjectSearchDAOImpl.java
index d901bdfbb1..7b03b837ac 100644
--- a/core/src/main/java/org/apache/syncope/core/persistence/dao/impl/SubjectSearchDAOImpl.java
+++ b/core/src/main/java/org/apache/syncope/core/persistence/dao/impl/SubjectSearchDAOImpl.java
@@ -63,6 +63,10 @@
 
     private static final String[] SUBJECT_FIELDS = new String[] { "parent", "userOwner", "roleOwner" };
 
+    private static final String[] ORDER_BY_NOT_ALLOWED = {
+        "serialVersionUID", "password", "securityQuestion", "securityAnswer", "token", "tokenExpireTime"
+    };
+
     @Autowired
     private UserDAO userDAO;
 
@@ -285,12 +289,24 @@ private StringBuilder buildOrderBy(final OrderBySupport obs) {
         return orderBy;
     }
 
-    private OrderBySupport parseOrderBy(final SearchSupport svs, final List<OrderByClause> orderByClauses) {
+    protected List<OrderByClause> filterOrderBy(final List<OrderByClause> orderBy) {
+        List<OrderByClause> result = new ArrayList<OrderByClause>();
+
+        for (OrderByClause clause : orderBy) {
+            if (!ArrayUtils.contains(ORDER_BY_NOT_ALLOWED, clause.getField())) {
+                result.add(clause);
+            }
+        }
+
+        return result;
+    }
+
+    private OrderBySupport parseOrderBy(final SearchSupport svs, final List<OrderByClause> orderBy) {
         final AttributableUtil attrUtil = AttributableUtil.getInstance(svs.type.asAttributableType());
 
         OrderBySupport obs = new OrderBySupport();
 
-        for (OrderByClause clause : orderByClauses) {
+        for (OrderByClause clause : filterOrderBy(orderBy)) {
             OrderBySupport.Item item = new OrderBySupport.Item();
 
             Field subjectField = ReflectionUtils.findField(attrUtil.attributableClass(), clause.getField());
diff --git a/core/src/test/java/org/apache/syncope/core/rest/SearchTestITCase.java b/core/src/test/java/org/apache/syncope/core/rest/SearchTestITCase.java
index e1626b48b1..974edd8298 100644
--- a/core/src/test/java/org/apache/syncope/core/rest/SearchTestITCase.java
+++ b/core/src/test/java/org/apache/syncope/core/rest/SearchTestITCase.java
@@ -27,6 +27,7 @@
 import java.util.HashSet;
 import java.util.List;
 import java.util.Set;
+import org.apache.commons.lang3.RandomStringUtils;
 import org.apache.syncope.client.SyncopeClient;
 import org.apache.syncope.common.reqres.PagedResult;
 import org.apache.syncope.common.services.UserSelfService;
@@ -199,6 +200,22 @@ public void nested() {
         }
     }
 
+    @Test
+    public void searchBySecurityAnswer() {
+        String securityAnswer = RandomStringUtils.randomAlphanumeric(10);
+        UserTO userTO = UserTestITCase.getUniqueSampleTO("securityAnswer@syncope.apache.org");
+        userTO.setSecurityQuestion(1L);
+        userTO.setSecurityAnswer(securityAnswer);
+
+        userTO = createUser(userTO);
+        assertNotNull(userTO.getSecurityQuestion());
+
+        PagedResult<UserTO> matchingUsers = userService.search(SyncopeClient.getUserSearchConditionBuilder().
+                is("securityAnswer").equalTo(securityAnswer).query());
+        assertNotNull(matchingUsers);
+        assertTrue(matchingUsers.getResult().isEmpty());
+    }
+
     @Test
     public void orderBy() {
         PagedResult<UserTO> users = userService.search(
