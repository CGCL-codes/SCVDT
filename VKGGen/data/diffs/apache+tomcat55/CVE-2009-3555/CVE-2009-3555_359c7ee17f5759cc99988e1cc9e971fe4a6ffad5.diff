diff --git a/STATUS.txt b/STATUS.txt
index 41591ce4..c4616af3 100644
--- a/STATUS.txt
+++ b/STATUS.txt
@@ -86,14 +86,6 @@ PATCHES PROPOSED TO BACKPORT:
   +1: markt, kkolinko
   -1: 
 
-* Alternative fix for CVE-2009-3555 SSL MITN
-  The current patch uses an async callback to close the socket. It is
-  technically possible an attack may succeed before the socket is closed
-  The new patch only logs failed server initiated negotiations.
-  http://people.apache.org/~markt/patches/2009-11-20-cve2009-3555-v2.patch
-  +1: markt, rjung, kkolinko
-  -1: 
-
 * Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=47609
   Implement fail-safe EOL conversion for source distributions
   Based on a patch provided by sebb
diff --git a/connectors/util/java/org/apache/tomcat/util/net/jsse/JSSESocketFactory.java b/connectors/util/java/org/apache/tomcat/util/net/jsse/JSSESocketFactory.java
index 74a2892c..94879aeb 100644
--- a/connectors/util/java/org/apache/tomcat/util/net/jsse/JSSESocketFactory.java
+++ b/connectors/util/java/org/apache/tomcat/util/net/jsse/JSSESocketFactory.java
@@ -29,8 +29,6 @@
 import java.security.KeyStore;
 import java.util.Vector;
 
-import javax.net.ssl.HandshakeCompletedEvent;
-import javax.net.ssl.HandshakeCompletedListener;
 import javax.net.ssl.SSLException;
 import javax.net.ssl.SSLServerSocket;
 import javax.net.ssl.SSLServerSocketFactory;
@@ -118,11 +116,6 @@ public Socket acceptSocket(ServerSocket socket)
         SSLSocket asock = null;
         try {
              asock = (SSLSocket)socket.accept();
-             if (!allowUnsafeLegacyRenegotiation) {
-                 asock.addHandshakeCompletedListener(
-                         new DisableSslRenegotiation());
-             }
-
              configureClientAuth(asock);
         } catch (SSLException e){
           throw new SocketException("SSL handshake error" + e.toString());
@@ -131,27 +124,13 @@ public Socket acceptSocket(ServerSocket socket)
     }
 
     
-    private static class DisableSslRenegotiation 
-            implements HandshakeCompletedListener {
-        private volatile boolean completed = false;
-     
-        public void handshakeCompleted(HandshakeCompletedEvent event) {
-            if (completed) {
-                try {
-                    log.warn("SSL renegotiation is disabled, closing connection");
-                    event.getSession().invalidate();
-                    event.getSocket().close();
-                } catch (IOException e) {
-                    // ignore
-                }
-            }
-            completed = true;
-        }
-    }
-
-
     public void handshake(Socket sock) throws IOException {
         ((SSLSocket)sock).startHandshake();
+        
+        if (!allowUnsafeLegacyRenegotiation) {
+            // Prevent futher handshakes by removing all cipher suites
+            ((SSLSocket) sock).setEnabledCipherSuites(new String[0]);
+        }
     }
 
     /*
diff --git a/connectors/util/java/org/apache/tomcat/util/net/jsse/JSSESupport.java b/connectors/util/java/org/apache/tomcat/util/net/jsse/JSSESupport.java
index 4104f67b..527b74fc 100644
--- a/connectors/util/java/org/apache/tomcat/util/net/jsse/JSSESupport.java
+++ b/connectors/util/java/org/apache/tomcat/util/net/jsse/JSSESupport.java
@@ -132,6 +132,16 @@ public String getCipherSuite() throws IOException {
 
     protected void handShake() throws IOException {
         ssl.setNeedClientAuth(true);
+        
+        if (ssl.getEnabledCipherSuites().length == 0) {
+            // Handshake is never going to be successful.
+            // Assume this is because handshakes are disabled
+            log.warn("SSL server initiated renegotiation is disabled, closing connection");
+            ssl.getSession().invalidate();
+            ssl.close();
+            return;
+        }
+
         ssl.startHandshake();
     }
     /**
