diff --git a/ql/src/java/org/apache/hadoop/hive/ql/security/authorization/plugin/fallback/FallbackHiveAuthorizer.java b/ql/src/java/org/apache/hadoop/hive/ql/security/authorization/plugin/fallback/FallbackHiveAuthorizer.java
index 10cf4d4fd86..07f0a4ebb25 100644
--- a/ql/src/java/org/apache/hadoop/hive/ql/security/authorization/plugin/fallback/FallbackHiveAuthorizer.java
+++ b/ql/src/java/org/apache/hadoop/hive/ql/security/authorization/plugin/fallback/FallbackHiveAuthorizer.java
@@ -154,7 +154,13 @@ private void checkPrivileges(HiveOperationType hiveOpType, List<HivePrivilegeObj
     if (hiveObjects == null) {
       return;
     }
-    if (admins != null && Arrays.stream(admins).parallel().anyMatch(n -> n.equals(userName))) {
+
+    boolean isAdmin = false;
+    if (admins != null && admins.length > 0) {
+      isAdmin = Arrays.asList(admins).contains(userName);
+    }
+
+    if (isAdmin) {
       return; // Skip rest of checks if user is admin
     }
 
diff --git a/ql/src/java/org/apache/hadoop/hive/ql/security/authorization/plugin/sqlstd/Operation2Privilege.java b/ql/src/java/org/apache/hadoop/hive/ql/security/authorization/plugin/sqlstd/Operation2Privilege.java
index 18b0e1c49b4..cb07c538edb 100644
--- a/ql/src/java/org/apache/hadoop/hive/ql/security/authorization/plugin/sqlstd/Operation2Privilege.java
+++ b/ql/src/java/org/apache/hadoop/hive/ql/security/authorization/plugin/sqlstd/Operation2Privilege.java
@@ -113,6 +113,7 @@ public HivePrivilegeObjectType getObjectType() {
   }
 
   private static Map<HiveOperationType, List<PrivRequirement>> op2Priv;
+  private static List<HiveOperationType> adminPrivOps;
 
   private static SQLPrivTypeGrant[] OWNER_PRIV_AR = arr(SQLPrivTypeGrant.OWNER_PRIV);
   private static SQLPrivTypeGrant[] SEL_NOGRANT_AR = arr(SQLPrivTypeGrant.SELECT_NOGRANT);
@@ -130,6 +131,7 @@ public HivePrivilegeObjectType getObjectType() {
 
 
   static {
+    adminPrivOps = new ArrayList<HiveOperationType>();
     op2Priv = new HashMap<HiveOperationType, List<PrivRequirement>>();
 
     op2Priv.put(HiveOperationType.EXPLAIN, PrivRequirement.newIOPrivRequirement
@@ -292,6 +294,8 @@ public HivePrivilegeObjectType getObjectType() {
         new PrivRequirement(arr(SQLPrivTypeGrant.INSERT_NOGRANT, SQLPrivTypeGrant.DELETE_NOGRANT),
             IOType.OUTPUT, null, HivePrivilegeObjectType.TABLE_OR_VIEW),
         new PrivRequirement(OWNER_PRIV_AR, IOType.OUTPUT, null, HivePrivilegeObjectType.DATABASE)));
+    adminPrivOps.add(HiveOperationType.CREATEFUNCTION);
+    adminPrivOps.add(HiveOperationType.DROPFUNCTION);
 
     // operations require select priv
     op2Priv.put(HiveOperationType.SHOWCOLUMNS, PrivRequirement.newIOPrivRequirement
@@ -500,6 +504,17 @@ public static RequiredPrivileges getRequiredPrivs(HiveOperationType hiveOpType,
     return reqPrivs;
   }
 
+  /**
+   * Some operations are tagged as requiring admin privileges, ignoring any object that
+   * might be checked on it. This check is run in those cases.
+   *
+   * @param hiveOpType
+   * @return
+   */
+  public static boolean isAdminPrivOperation(HiveOperationType hiveOpType) {
+    return adminPrivOps.contains(hiveOpType);
+  }
+
   // for unit tests
   public static Set<HiveOperationType> getOperationTypes() {
     return op2Priv.keySet();
