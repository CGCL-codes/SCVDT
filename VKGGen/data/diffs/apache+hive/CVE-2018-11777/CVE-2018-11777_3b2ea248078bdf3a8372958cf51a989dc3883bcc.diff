From 3b2ea248078bdf3a8372958cf51a989dc3883bcc Mon Sep 17 00:00:00 2001
From: Vaibhav Gumashta <vgumashta@hortonworks.com>
Date: Mon, 2 May 2016 13:35:40 -0700
Subject: [PATCH] HIVE-13390: HiveServer2: Add more test to ZK service
 discovery using MiniHS2 (Vaibhav Gumashta reviewed by Sushanth Sowmyan)

---
 data/files/keystore.jks                       | Bin 2248 -> 2206 bytes
 data/files/keystore_exampledotcom.jks         | Bin 0 -> 2222 bytes
 data/files/truststore.jks                     | Bin 958 -> 1816 bytes
 .../org/apache/hive/jdbc/miniHS2/MiniHS2.java |  35 ++++---
 .../java/org/apache/hive/jdbc/TestSSL.java    |  71 +++++++++++--
 .../org/apache/hive/jdbc/HiveConnection.java  |  99 ++++++++----------
 .../hive/service/auth/HiveAuthFactory.java    |  21 +++-
 7 files changed, 148 insertions(+), 78 deletions(-)
 create mode 100644 data/files/keystore_exampledotcom.jks

diff --git a/data/files/keystore.jks b/data/files/keystore.jks
index 469d8a543a4d2a94535996ceee2a24891699b1cc..8f35af0df2c8cbd838af8c404d809a09f3645fcd 100644
GIT binary patch
literal 2206
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

literal 2248
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
Js_3iE{{opy;Gh5i

diff --git a/data/files/keystore_exampledotcom.jks b/data/files/keystore_exampledotcom.jks
new file mode 100644
index 0000000000000000000000000000000000000000..1d33aadf0da0d9b40f96ae8d10f18b3bf39b7447
GIT binary patch
literal 2222
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
E0H$WX&Hw-a

literal 0
HcmV?d00001

diff --git a/data/files/truststore.jks b/data/files/truststore.jks
index 9c5d703fba6c8c23bf6ee8f431d6d0fc35bf9ee1..03dd2a3368369b6cf29f32a615f23ae0cf9e523b 100644
GIT binary patch
literal 1816
zcmezO_TO6u1_mZL=1#3h%q_@C)l1ILWnf?oa*|nioPjk$&(y$@fq^;Rpoux!poz(O
z0W%XL6BCQKx7JbvUN%mxHjlRNyo`+8tPBQmhTI06Y|No7Y{E>T!7vVoFq5+*jKeO>
z6zpcmW55Mc#wE<`2;}h^aD#Z<!Ym${WvPY|24WyCvoL>odAS~vqYUK4c@51B3=K_;
z3{A{TO`^bD6GLMtm*)02F)AT@nUR%&xrvdV!Jvtei>Zl`k>SR-Q?V~n8_ixB&%Y7b
z;Bj8|_PSHQ&%a(-b!~GD{|z^$BrmmhF26sj+F6>3u2`s+&Jn!j$lE5<e;>ZydH&rg
z<>gDpr`AU-BhR?4iaoC+SQ50-M6j#>2y4oU4i)RfAMfp+Z)VWx6#u_#YY5}!o+Ara
z$C_*Zztr>EGih4B*-VW&C)TosuI1Iy*mA~s!@Fy@rk#pUx~ufwVu5#CF_ZH8e~U9`
z$E)VuRMwe&wMI}ai<|$D<JVM?zj?RQ)hlkka=9`6TwjasD)ya43s=89y8ejD%t>z-
zU)*aGdYiQ{Gp?lZ(OIXY3zJT8CD(uc_+zrm8qGZni>LCYolrP9@s?kJ{hI6zicHLm
z42+8v4de}EfiWn{$0Eie!lA0DGNsJl$65Mw^}FRP`pc`G`;Y?>m~Mc9$jBfXD!$;`
z_l^^@i<5Z;!sgdmi!hZnyRtmH*ZfQ*qWSNfW%o|?zst^ly}NF^#<cXk{nNh%?%kY|
z`&sr`l($X3qn@PqEdI<hH8uja6C^wz@cfyQ6fCu!*XT!4+83QS%+CAnA4r|3si=2$
zA43<H9dDd!@K2NX6GfX=1h*FaIAwM8Vu{<1@YO;~f_5*zC?BO5RdCm2Md&s*j+K$!
z6CNFL6<a1WTWwL5N|I#mED_^<PR%|#lUR6Xxy!Z8+4g82%U0cQdv5$`?>$@3tF}h+
zM9jv{qaD+9b2sjgeQs;mD5193*mC;OSL;n{(j!kit37`2f$MI6C5P$9L}eWUjgueG
z7f;UwXG6}M{N%)(jQrvfa0V2Ve2U0`!N3gY56pn(&<tp5u>TTTKpI5AvKd7gP{=?4
zk^vFULC$){21b@hSr5#mq0NLc-L{9nO#NfTeSf*xweJ?2l^Xx2NGdIK#~ugoNdnV<
zY})EEHzU~QvDB%e(16ZD0o8vQT}SS{mioZhW_IJ7;I!p3r<_<fmCY&c_~aKN=b0Kh
z@v-5m@|l*BJ-54WZR>iU8u;{!5J$05g>B9*BY`uDGnd*i3yXz)XFQN^Tddfh>%RHH
z{!(jyySL67>ctvm_xiHLmL`9^<g8kE(d2yOPSJ-;7cMTS&8mHHxTmAUh3&P#*4dLx
zgZ}R5J9xCw@{ZR0==X-wcMdGwFyr7=*GDq5w!N@zFqO&S+adhr=AYo>-2JbvE|)yW
zd~t!yqf3bjb0jC*SInQYa?RE&5`p=(efxN2UR}hN>5SH$|9ITHp64;g#LH)Q^u67(
zsqi~mS^;Oe9Ff^=ihhTFO#H>Xzm@w&?D_Z8YA@8Jn!e@L4lMXSx5hSE!}Ij*_M2Ds
zbRG`#E}O(|cc4gTPf}-!12fmoBkwdK?0s`j@Eo_j+4JPrb?!e)CroY3=zJ|Wqf9le
z;?ClE+h6lI?VT-fkbR<s@U1!Tu3!5ywcaGN;F*H)w`uO?-F(8rT!mj_4ZIxdt}(hr
z%d=ZNJ0`=_z9=WJ=**F64+5ue4q`m?$GAn>)%kFP@ew5<_89#IvpSAQZCovD+O>Sj
zFDHStMQl}#g>v%B>x)d%+k@0)g7-*2TchT0mU}u!TmO9HF2RRk)gl}TpFdVlZQU}@
qCZb@v&)t^YTqoAty^^Q0F?;=jg|b$1cegW|?2@1K?Vsqx1TO%Bq>*R<

literal 958
zcmezO_TO6u1_mY|W(3n58JT6NSt&`$Kmo_cw>h&JSR?dI4J;WLm}?E1m@5sMm=YH-
zGchtTu|(`Q<22x9<J4;NX#38~$jHsgV31=dV8F-59LmBb%pRJTotIyp2NU7I5Mf7%
z@B<A3>f#b+b1X<q&PX-nHQ)vba0|0|03Bo~Vju+KG7ED<<P|`o1`6W5hQ@{lM#cuF
zCg#S5Q4;({hK9xlmPVFP0Xn;<iBSnTKp0sWn41{+84Q{jxtN+585#CW^64*|``tXJ
zZhq9Bol2j)g4Kegj*A`VU4Hx9JeJk^+?T~}JUa4y>MYS;eE$kI*1xT_?4P^!=i2W-
zyJjwX`0LZ`EpGo)7W*$232|(3Zb(~yXS2qJB_2{OndQnS9>`7C+Rb<*ihs?Glec*?
zd{;DWY~Z+j`K5>9`Mpt27qumo4?RA+W4mU-?xp=3{(KI6Jb8M^F4e71SJt@{ueqnY
zCc^K>uCq5P)8GGpw$W?nD%RC`6Am?n@jqO()9~5bo-?mIm@B^QjFE1(3uc;-AotQF
z*nLmO%oQI6Ec3P=o02kP^Xb!}$9UJ2Fs$kce03oA@HZ#sDg1%A4OQc9q!PVU9Qs-c
z(qx&K85tNCD;mff$O2<imXAe@Ma1IctWIv%DHh9SwDotN*>G2LJL^K^Km?{LU?4Iw
z2>&Vxlqi|Ipv+tTNYSaf{TVS?&61f~-_AZ_`)*r#ab~g?kD>aJ7T4&HR^P2mTfaFx
ztJk@c7^?dwYxkOE-*>NgXJ8vM-Ni&~zr}z5Hn;wMd7sWXNoJ*|$~GKZ=^OpIdDFtr
zO$X{MR?M2hI6bP~&x=>pA+vAqsbfJt_p0-Lhl<HL6j--Do$Y3Cy)WbLw5o;Y|4hH6
zX7~N&ln1|O2x+Ryd0f8xv0eT3xi_~&+I{;A?{1A+mRzs-XIo!>w9L8EnSGOvrrqy3
zuGOiU*<9}OezjzQn~R*M#z|54jGYR*S6W|u-j(%s(gE?cSE{VHzp@ElcOWOn@!THU
i+jZwF3Yv86jpP{Duj5kx`QB$`i><QrQ7dtWk9z<h!)<^7

diff --git a/itests/hive-unit/src/main/java/org/apache/hive/jdbc/miniHS2/MiniHS2.java b/itests/hive-unit/src/main/java/org/apache/hive/jdbc/miniHS2/MiniHS2.java
index 9ab556698e6..de1ce7697bf 100644
--- a/itests/hive-unit/src/main/java/org/apache/hive/jdbc/miniHS2/MiniHS2.java
+++ b/itests/hive-unit/src/main/java/org/apache/hive/jdbc/miniHS2/MiniHS2.java
@@ -182,6 +182,8 @@ public boolean isUseMiniKdc() {
   private MiniHS2(HiveConf hiveConf, MiniClusterType miniClusterType, boolean useMiniKdc,
       String serverPrincipal, String serverKeytab, boolean isMetastoreRemote,
       boolean usePortsFromConf, String authType, boolean isHA) throws Exception {
+    // Always use localhost for hostname as some tests like SSL CN validation ones
+    // are tied to localhost being present in the certificate name
     super(hiveConf, "localhost",
         (usePortsFromConf ? hiveConf.getIntVar(HiveConf.ConfVars.HIVE_SERVER2_THRIFT_PORT) : MetaStoreUtils.findFreePort()),
         (usePortsFromConf ? hiveConf.getIntVar(HiveConf.ConfVars.HIVE_SERVER2_THRIFT_HTTP_PORT) : MetaStoreUtils.findFreePort()));
@@ -382,29 +384,38 @@ public String getJdbcURL(String dbName, String sessionConfExt) throws Exception
    * @return
    * @throws Exception
    */
-  public String getJdbcURL(String dbName, String sessionConfExt, String hiveConfExt) throws Exception {
+  public String getJdbcURL(String dbName, String sessionConfExt, String hiveConfExt)
+      throws Exception {
     sessionConfExt = (sessionConfExt == null ? "" : sessionConfExt);
     hiveConfExt = (hiveConfExt == null ? "" : hiveConfExt);
-    String krbConfig = "";
+    // Strip the leading ";" if provided
+    // (this is the assumption with which we're going to start configuring sessionConfExt)
+    if (sessionConfExt.startsWith(";")) {
+      sessionConfExt = sessionConfExt.substring(1);
+    }
     if (isUseMiniKdc()) {
-      krbConfig = "principal=" + serverPrincipal;
+      sessionConfExt = "principal=" + serverPrincipal + ";" + sessionConfExt;
     }
     if (isHttpTransportMode()) {
-      sessionConfExt = "transportMode=http;httpPath=cliservice;" + sessionConfExt;
+      sessionConfExt = "transportMode=http;httpPath=cliservice" + ";" + sessionConfExt;
     }
     String baseJdbcURL;
     if (isDynamicServiceDiscovery()) {
-      String serviceDiscoveryConfig =
+      sessionConfExt =
           "serviceDiscoveryMode=zooKeeper;zooKeeperNamespace="
-              + getServerConf().getVar(HiveConf.ConfVars.HIVE_SERVER2_ZOOKEEPER_NAMESPACE) + ";";
-      baseJdbcURL = getZKBaseJdbcURL() + dbName + ";" + serviceDiscoveryConfig;
+              + getServerConf().getVar(HiveConf.ConfVars.HIVE_SERVER2_ZOOKEEPER_NAMESPACE) + ";"
+              + sessionConfExt;
+      baseJdbcURL = getZKBaseJdbcURL();
+    } else {
+      baseJdbcURL = getBaseJdbcURL();
     }
-    else {
-      baseJdbcURL = getBaseJdbcURL() + dbName + ";";
+
+    baseJdbcURL = baseJdbcURL + dbName;
+    if (!sessionConfExt.isEmpty()) {
+      baseJdbcURL = baseJdbcURL + ";" + sessionConfExt;
     }
-    baseJdbcURL = baseJdbcURL + krbConfig + ";" + sessionConfExt;
-    if (!hiveConfExt.trim().equals("")) {
-      baseJdbcURL = "?" + hiveConfExt;
+    if ((hiveConfExt != null) && (!hiveConfExt.trim().isEmpty())) {
+      baseJdbcURL = baseJdbcURL + "?" + hiveConfExt;
     }
     return baseJdbcURL;
   }
diff --git a/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestSSL.java b/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestSSL.java
index ea9acba8ebc..2f4db0d27a2 100644
--- a/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestSSL.java
+++ b/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestSSL.java
@@ -18,6 +18,7 @@
 
 package org.apache.hive.jdbc;
 import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
 
 import java.io.File;
@@ -47,9 +48,10 @@
 
 public class TestSSL {
   private static final Logger LOG = LoggerFactory.getLogger(TestSSL.class);
-  private static final String KEY_STORE_NAME = "keystore.jks";
+  private static final String LOCALHOST_KEY_STORE_NAME = "keystore.jks";
+  private static final String EXAMPLEDOTCOM_KEY_STORE_NAME = "keystore_exampledotcom.jks";
   private static final String TRUST_STORE_NAME = "truststore.jks";
-  private static final String KEY_STORE_PASSWORD = "HiveJdbc";
+  private static final String KEY_STORE_TRUST_STORE_PASSWORD = "HiveJdbc";
   private static final String JAVA_TRUST_STORE_PROP = "javax.net.ssl.trustStore";
   private static final String JAVA_TRUST_STORE_PASS_PROP = "javax.net.ssl.trustStorePassword";
   private static final String HS2_BINARY_MODE = "binary";
@@ -62,9 +64,9 @@
   private Connection hs2Conn = null;
   private String dataFileDir = conf.get("test.data.files");
   private Map<String, String> confOverlay;
-  private final String SSL_CONN_PARAMS = ";ssl=true;sslTrustStore="
+  private final String SSL_CONN_PARAMS = "ssl=true;sslTrustStore="
       + URLEncoder.encode(dataFileDir + File.separator + TRUST_STORE_NAME) + ";trustStorePassword="
-      + KEY_STORE_PASSWORD;
+      + KEY_STORE_TRUST_STORE_PASSWORD;
 
   @BeforeClass
   public static void beforeTest() throws Exception {
@@ -127,7 +129,7 @@ public void testSSLVersion() throws Exception {
     // make SSL connection
     hs2Conn =
         DriverManager.getConnection(miniHS2.getJdbcURL() + ";ssl=true;sslTrustStore=" + dataFileDir
-            + File.separator + TRUST_STORE_NAME + ";trustStorePassword=" + KEY_STORE_PASSWORD,
+            + File.separator + TRUST_STORE_NAME + ";trustStorePassword=" + KEY_STORE_TRUST_STORE_PASSWORD,
             System.getProperty("user.name"), "bar");
     hs2Conn.close();
     Assert.assertEquals("Expected exit code of 1", 1, execCommand("openssl s_client -connect "
@@ -144,7 +146,7 @@ public void testSSLVersion() throws Exception {
       hs2Conn =
           DriverManager.getConnection(miniHS2.getJdbcURL() + ";ssl=true;sslTrustStore="
               + dataFileDir + File.separator + TRUST_STORE_NAME + ";trustStorePassword="
-              + KEY_STORE_PASSWORD, System.getProperty("user.name"), "bar");
+              + KEY_STORE_TRUST_STORE_PASSWORD, System.getProperty("user.name"), "bar");
       Assert.fail("Expected SQLException during connect");
     } catch (SQLException e) {
       LOG.info("Expected exception: " + e, e);
@@ -181,7 +183,7 @@ public void testInvalidConfig() throws Exception {
     }
 
     System.setProperty(JAVA_TRUST_STORE_PROP, dataFileDir + File.separator + TRUST_STORE_NAME );
-    System.setProperty(JAVA_TRUST_STORE_PASS_PROP, KEY_STORE_PASSWORD);
+    System.setProperty(JAVA_TRUST_STORE_PASS_PROP, KEY_STORE_TRUST_STORE_PASSWORD);
     try {
       hs2Conn = DriverManager.getConnection(miniHS2.getJdbcURL() + ";ssl=true",
           System.getProperty("user.name"), "bar");
@@ -291,7 +293,7 @@ public void testSSLConnectionWithProperty() throws Exception {
     miniHS2.start(confOverlay);
 
     System.setProperty(JAVA_TRUST_STORE_PROP, dataFileDir + File.separator + TRUST_STORE_NAME );
-    System.setProperty(JAVA_TRUST_STORE_PASS_PROP, KEY_STORE_PASSWORD);
+    System.setProperty(JAVA_TRUST_STORE_PASS_PROP, KEY_STORE_TRUST_STORE_PASSWORD);
     // make SSL connection
     hs2Conn = DriverManager.getConnection(miniHS2.getJdbcURL() + ";ssl=true",
         System.getProperty("user.name"), "bar");
@@ -375,6 +377,55 @@ public void testSSLFetchHttp() throws Exception {
     hs2Conn.close();
   }
 
+  /***
+   * Test a new connection when server sends a certificate with wrong CN
+   * (sends a certificate for www.example.com instead of localhost)
+   * Opening a new connection with this wrong certificate should fail
+   * @throws Exception
+   */
+  @Test
+  public void testConnectionWrongCertCN() throws Exception {
+    // This call sets the default ssl params including the correct keystore in the server config
+    setSslConfOverlay(confOverlay);
+    // Replace default keystore with keystore for www.example.com
+    confOverlay.put(ConfVars.HIVE_SERVER2_SSL_KEYSTORE_PATH.varname, dataFileDir + File.separator
+        + EXAMPLEDOTCOM_KEY_STORE_NAME);
+    // Binary (TCP) mode
+    setBinaryConfOverlay(confOverlay);
+    miniHS2.start(confOverlay);
+    try {
+      hs2Conn =
+          DriverManager.getConnection(miniHS2.getJdbcURL("default", SSL_CONN_PARAMS),
+              System.getProperty("user.name"), "bar");
+      fail("SSL connection, with the server providing wrong certifcate (with CN www.example.com, "
+          + "instead of localhost), should fail");
+    } catch (SQLException e) {
+      // Expected error: should throw java.security.cert.CertificateException
+      assertEquals("08S01", e.getSQLState().trim());
+      assertTrue(e.toString().contains("java.security.cert.CertificateException"));
+    }
+
+    miniHS2.stop();
+
+    // Http mode
+    setHttpConfOverlay(confOverlay);
+    miniHS2.start(confOverlay);
+    try {
+      hs2Conn =
+          DriverManager.getConnection(miniHS2.getJdbcURL("default", SSL_CONN_PARAMS),
+              System.getProperty("user.name"), "bar");
+      fail("SSL connection, with the server providing wrong certifcate (with CN www.example.com, "
+          + "instead of localhost), should fail");
+    } catch (SQLException e) {
+      // Expected error: should throw javax.net.ssl.SSLPeerUnverifiedException
+      assertEquals("08S01", e.getSQLState().trim());
+      assertTrue(e.toString().contains("javax.net.ssl.SSLPeerUnverifiedException"));
+    }
+    // Revert to default keystore path
+    confOverlay.put(ConfVars.HIVE_SERVER2_SSL_KEYSTORE_PATH.varname, dataFileDir + File.separator
+        + LOCALHOST_KEY_STORE_NAME);
+  }
+
   private void setupTestTableWithData(String tableName, Path dataFilePath,
       Connection hs2Conn) throws Exception {
     Statement stmt = hs2Conn.createStatement();
@@ -393,9 +444,9 @@ private void setupTestTableWithData(String tableName, Path dataFilePath,
   private void setSslConfOverlay(Map<String, String> confOverlay) {
     confOverlay.put(ConfVars.HIVE_SERVER2_USE_SSL.varname, "true");
     confOverlay.put(ConfVars.HIVE_SERVER2_SSL_KEYSTORE_PATH.varname,
-        dataFileDir + File.separator +  KEY_STORE_NAME);
+        dataFileDir + File.separator +  LOCALHOST_KEY_STORE_NAME);
     confOverlay.put(ConfVars.HIVE_SERVER2_SSL_KEYSTORE_PASSWORD.varname,
-        KEY_STORE_PASSWORD);
+        KEY_STORE_TRUST_STORE_PASSWORD);
   }
 
   private void clearSslConfOverlay(Map<String, String> confOverlay) {
diff --git a/jdbc/src/java/org/apache/hive/jdbc/HiveConnection.java b/jdbc/src/java/org/apache/hive/jdbc/HiveConnection.java
index 40ad3b22a79..0b0db432785 100644
--- a/jdbc/src/java/org/apache/hive/jdbc/HiveConnection.java
+++ b/jdbc/src/java/org/apache/hive/jdbc/HiveConnection.java
@@ -44,13 +44,15 @@
 import org.apache.http.config.Registry;
 import org.apache.http.config.RegistryBuilder;
 import org.apache.http.conn.socket.ConnectionSocketFactory;
-import org.apache.http.conn.ssl.SSLSocketFactory;
+import org.apache.http.conn.ssl.DefaultHostnameVerifier;
+import org.apache.http.conn.ssl.SSLConnectionSocketFactory;
 import org.apache.http.impl.client.BasicCookieStore;
 import org.apache.http.impl.client.CloseableHttpClient;
 import org.apache.http.impl.client.HttpClientBuilder;
 import org.apache.http.impl.client.HttpClients;
 import org.apache.http.impl.conn.BasicHttpClientConnectionManager;
 import org.apache.http.protocol.HttpContext;
+import org.apache.http.ssl.SSLContexts;
 import org.apache.thrift.TException;
 import org.apache.thrift.protocol.TBinaryProtocol;
 import org.apache.thrift.transport.THttpClient;
@@ -324,30 +326,29 @@ private CloseableHttpClient getHttpClient(Boolean useSsl) throws SQLException {
     if (isCookieEnabled) {
       // Create a http client with a retry mechanism when the server returns a status code of 401.
       httpClientBuilder =
-      HttpClients.custom().setServiceUnavailableRetryStrategy(
-        new  ServiceUnavailableRetryStrategy() {
-
-      @Override
-      public boolean retryRequest(
-        final HttpResponse response,
-        final int executionCount,
-        final HttpContext context) {
-        int statusCode = response.getStatusLine().getStatusCode();
-        boolean ret = statusCode == 401 && executionCount <= 1;
-
-        // Set the context attribute to true which will be interpreted by the request interceptor
-        if (ret) {
-          context.setAttribute(Utils.HIVE_SERVER2_RETRY_KEY, Utils.HIVE_SERVER2_RETRY_TRUE);
-        }
-        return ret;
-      }
-
-      @Override
-      public long getRetryInterval() {
-        // Immediate retry
-        return 0;
-      }
-    });
+          HttpClients.custom().setServiceUnavailableRetryStrategy(
+              new ServiceUnavailableRetryStrategy() {
+                @Override
+                public boolean retryRequest(final HttpResponse response, final int executionCount,
+                    final HttpContext context) {
+                  int statusCode = response.getStatusLine().getStatusCode();
+                  boolean ret = statusCode == 401 && executionCount <= 1;
+
+                  // Set the context attribute to true which will be interpreted by the request
+                  // interceptor
+                  if (ret) {
+                    context.setAttribute(Utils.HIVE_SERVER2_RETRY_KEY,
+                        Utils.HIVE_SERVER2_RETRY_TRUE);
+                  }
+                  return ret;
+                }
+
+                @Override
+                public long getRetryInterval() {
+                  // Immediate retry
+                  return 0;
+                }
+              });
     } else {
       httpClientBuilder = HttpClientBuilder.create();
     }
@@ -360,47 +361,37 @@ public long getRetryInterval() {
       String sslTrustStorePassword = sessConfMap.get(
         JdbcConnectionParams.SSL_TRUST_STORE_PASSWORD);
       KeyStore sslTrustStore;
-      SSLSocketFactory socketFactory;
-
+      SSLConnectionSocketFactory socketFactory;
+      SSLContext sslContext;
       /**
-       * The code within the try block throws:
-       * 1. SSLInitializationException
-       * 2. KeyStoreException
-       * 3. IOException
-       * 4. NoSuchAlgorithmException
-       * 5. CertificateException
-       * 6. KeyManagementException
-       * 7. UnrecoverableKeyException
-       * We don't want the client to retry on any of these, hence we catch all
-       * and throw a SQLException.
+       * The code within the try block throws: SSLInitializationException, KeyStoreException,
+       * IOException, NoSuchAlgorithmException, CertificateException, KeyManagementException &
+       * UnrecoverableKeyException. We don't want the client to retry on any of these,
+       * hence we catch all and throw a SQLException.
        */
       try {
-        if (useTwoWaySSL != null &&
-            useTwoWaySSL.equalsIgnoreCase(JdbcConnectionParams.TRUE)) {
+        if (useTwoWaySSL != null && useTwoWaySSL.equalsIgnoreCase(JdbcConnectionParams.TRUE)) {
           socketFactory = getTwoWaySSLSocketFactory();
         } else if (sslTrustStorePath == null || sslTrustStorePath.isEmpty()) {
           // Create a default socket factory based on standard JSSE trust material
-          socketFactory = SSLSocketFactory.getSocketFactory();
+          socketFactory = SSLConnectionSocketFactory.getSocketFactory();
         } else {
           // Pick trust store config from the given path
           sslTrustStore = KeyStore.getInstance(JdbcConnectionParams.SSL_TRUST_STORE_TYPE);
           try (FileInputStream fis = new FileInputStream(sslTrustStorePath)) {
             sslTrustStore.load(fis, sslTrustStorePassword.toCharArray());
           }
-          socketFactory = new SSLSocketFactory(sslTrustStore);
+          sslContext = SSLContexts.custom().loadTrustMaterial(sslTrustStore, null).build();
+          socketFactory =
+              new SSLConnectionSocketFactory(sslContext, new DefaultHostnameVerifier(null));
         }
-        socketFactory.setHostnameVerifier(SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);
-
         final Registry<ConnectionSocketFactory> registry =
-          RegistryBuilder.<ConnectionSocketFactory>create()
-          .register("https", socketFactory)
-          .build();
-
+            RegistryBuilder.<ConnectionSocketFactory> create().register("https", socketFactory)
+                .build();
         httpClientBuilder.setConnectionManager(new BasicHttpClientConnectionManager(registry));
-      }
-      catch (Exception e) {
-        String msg =  "Could not create an https connection to " +
-          jdbcUriString + ". " + e.getMessage();
+      } catch (Exception e) {
+        String msg =
+            "Could not create an https connection to " + jdbcUriString + ". " + e.getMessage();
         throw new SQLException(msg, " 08S01", e);
       }
     }
@@ -502,8 +493,8 @@ private TTransport createBinaryTransport() throws SQLException, TTransportExcept
     return transport;
   }
 
-  SSLSocketFactory getTwoWaySSLSocketFactory() throws SQLException {
-    SSLSocketFactory socketFactory = null;
+  SSLConnectionSocketFactory getTwoWaySSLSocketFactory() throws SQLException {
+    SSLConnectionSocketFactory socketFactory = null;
 
     try {
       KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(
@@ -540,7 +531,7 @@ SSLSocketFactory getTwoWaySSLSocketFactory() throws SQLException {
       SSLContext context = SSLContext.getInstance("TLS");
       context.init(keyManagerFactory.getKeyManagers(),
         trustManagerFactory.getTrustManagers(), new SecureRandom());
-      socketFactory = new SSLSocketFactory(context);
+      socketFactory = new SSLConnectionSocketFactory(context);
     } catch (Exception e) {
       throw new SQLException("Error while initializing 2 way ssl socket factory ", e);
     }
diff --git a/service/src/java/org/apache/hive/service/auth/HiveAuthFactory.java b/service/src/java/org/apache/hive/service/auth/HiveAuthFactory.java
index 8af9d0aa57d..ab8806cc56b 100644
--- a/service/src/java/org/apache/hive/service/auth/HiveAuthFactory.java
+++ b/service/src/java/org/apache/hive/service/auth/HiveAuthFactory.java
@@ -29,7 +29,9 @@
 import java.util.List;
 import java.util.Map;
 
+import javax.net.ssl.SSLParameters;
 import javax.net.ssl.SSLServerSocket;
+import javax.net.ssl.SSLSocket;
 import javax.security.auth.login.LoginException;
 import javax.security.sasl.AuthenticationException;
 import javax.security.sasl.Sasl;
@@ -258,7 +260,9 @@ public static TTransport getSocketTransport(String host, int port, int loginTime
 
   public static TTransport getSSLSocket(String host, int port, int loginTimeout)
     throws TTransportException {
-    return TSSLTransportFactory.getClientSocket(host, port, loginTimeout);
+    // The underlying SSLSocket object is bound to host:port with the given SO_TIMEOUT
+    TSocket tSSLSocket = TSSLTransportFactory.getClientSocket(host, port, loginTimeout);
+    return getSSLSocketWithHttps(tSSLSocket);
   }
 
   public static TTransport getSSLSocket(String host, int port, int loginTimeout,
@@ -267,7 +271,20 @@ public static TTransport getSSLSocket(String host, int port, int loginTimeout,
       new TSSLTransportFactory.TSSLTransportParameters();
     params.setTrustStore(trustStorePath, trustStorePassWord);
     params.requireClientAuth(true);
-    return TSSLTransportFactory.getClientSocket(host, port, loginTimeout, params);
+    // The underlying SSLSocket object is bound to host:port with the given SO_TIMEOUT and
+    // SSLContext created with the given params
+    TSocket tSSLSocket = TSSLTransportFactory.getClientSocket(host, port, loginTimeout, params);
+    return getSSLSocketWithHttps(tSSLSocket);
+  }
+
+  // Using endpoint identification algorithm as HTTPS enables us to do
+  // CNAMEs/subjectAltName verification
+  private static TSocket getSSLSocketWithHttps(TSocket tSSLSocket) throws TTransportException {
+    SSLSocket sslSocket = (SSLSocket) tSSLSocket.getSocket();
+    SSLParameters sslParams = sslSocket.getSSLParameters();
+    sslParams.setEndpointIdentificationAlgorithm("HTTPS");
+    sslSocket.setSSLParameters(sslParams);
+    return new TSocket(sslSocket);
   }
 
   public static TServerSocket getServerSocket(String hiveHost, int portNum)
