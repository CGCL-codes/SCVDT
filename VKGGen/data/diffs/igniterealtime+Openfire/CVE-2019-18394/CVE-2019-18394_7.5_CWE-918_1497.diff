From c2ccb38250910587498597955d0bbee8b58e46df Mon Sep 17 00:00:00 2001
From: Guus der Kinderen <guus@goodbytes.nl>
Date: Thu, 3 Oct 2019 10:32:48 +0200
Subject: [PATCH 1/2] OF-1885: Guard against SSRF by inpecting favicon results

The Openfire servlet that is supposed to be used to retrieve favicons from remote servers could be used to obtain anything. To prevent unauthorized use, this commit adds a check that verifies if the returned data is an image. If that's not the case, the returned data is ignored.
---
 .../org/jivesoftware/util/FaviconServlet.java | 15 ++--
 .../org/jivesoftware/util/GraphicsUtils.java  | 69 +++++++++++++++++++
 .../jivesoftware/util/GraphicsUtilsTest.java  | 63 +++++++++++++++++
 3 files changed, 143 insertions(+), 4 deletions(-)
 create mode 100644 xmppserver/src/main/java/org/jivesoftware/util/GraphicsUtils.java
 create mode 100644 xmppserver/src/test/java/org/jivesoftware/util/GraphicsUtilsTest.java

diff --git a/xmppserver/src/main/java/org/jivesoftware/util/FaviconServlet.java b/xmppserver/src/main/java/org/jivesoftware/util/FaviconServlet.java
index 01d45ca647..deb0382f8b 100644
--- a/xmppserver/src/main/java/org/jivesoftware/util/FaviconServlet.java
+++ b/xmppserver/src/main/java/org/jivesoftware/util/FaviconServlet.java
@@ -182,7 +182,7 @@ private void writeBytesToStream(byte[] bytes, HttpServletResponse response) {
     }
 
     private byte[] getImage(String url) {
-        // Try to get the fiveicon from the url using an HTTP connection from the pool
+        // Try to get the favicon from the url using an HTTP connection from the pool
         // that also allows to configure timeout values (e.g. connect and get data)
         final RequestConfig requestConfig = RequestConfig.custom()
             .setConnectTimeout(2000)
@@ -194,10 +194,17 @@ private void writeBytesToStream(byte[] bytes, HttpServletResponse response) {
 
         try(final CloseableHttpResponse response = client.execute(getRequest)) {
             if(response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
-                return EntityUtils.toByteArray(response.getEntity());
+                final byte[] result = EntityUtils.toByteArray(response.getEntity());
+
+                // Prevent SSRF by checking result (OF-1885)
+                if ( !GraphicsUtils.isImage( result ) ) {
+                    LOGGER.info( "Ignoring response to an HTTP request that should have returned an image (but returned something else): {}", url) ;
+                    return null;
+                }
+                return result;
             }
-        } catch (final IOException ignored) {
-            // Do nothing
+        } catch (final IOException ex) {
+            LOGGER.debug( "An exception occurred while trying to obtain an image from: {}", url, ex );
         }
 
         return null;
diff --git a/xmppserver/src/main/java/org/jivesoftware/util/GraphicsUtils.java b/xmppserver/src/main/java/org/jivesoftware/util/GraphicsUtils.java
new file mode 100644
index 0000000000..22db4d0408
--- /dev/null
+++ b/xmppserver/src/main/java/org/jivesoftware/util/GraphicsUtils.java
@@ -0,0 +1,69 @@
+/*
+ * Copyright (C) 2019 Ignite Realtime Foundation. All rights reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jivesoftware.util;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import javax.imageio.ImageIO;
+import java.io.ByteArrayInputStream;
+import java.io.IOException;
+import java.io.InputStream;
+
+/**
+ * Utilities for working with graphics-related data.
+ *
+ * @author Guus der Kinderen, guus.der.kinderen@gmail.com
+ */
+public class GraphicsUtils
+{
+    private static final Logger Log = LoggerFactory.getLogger( GraphicsUtils.class );
+
+    /**
+     * Checks if the provided input stream represents an image.
+     *
+     * @param stream The data to be parsed. Cannot be null.
+     * @return true if the provided data is successfully identified as an image, otherwise false.
+     */
+    public static boolean isImage( final InputStream stream )
+    {
+        try
+        {
+            // This attempts to read the bytes as an image, returning null if it cannot parse the bytes as an image.
+            return null != ImageIO.read( stream );
+        }
+        catch ( IOException e )
+        {
+            Log.debug( "An exception occurred while determining if data represents an image.", e );
+            return false;
+        }
+    }
+
+    /**
+     * Checks if the provided byte array represents an image.
+     *
+     * @param bytes The data to be parsed. Cannot be null.
+     * @return true if the provided data is successfully identified as an image, otherwise false.
+     */
+    public static boolean isImage( final byte[] bytes )
+    {
+        if ( bytes == null )
+        {
+            throw new IllegalArgumentException( "Argument 'bytes' cannot be null." );
+        }
+        return isImage( new ByteArrayInputStream( bytes ) );
+    }
+}
diff --git a/xmppserver/src/test/java/org/jivesoftware/util/GraphicsUtilsTest.java b/xmppserver/src/test/java/org/jivesoftware/util/GraphicsUtilsTest.java
new file mode 100644
index 0000000000..9259c3420e
--- /dev/null
+++ b/xmppserver/src/test/java/org/jivesoftware/util/GraphicsUtilsTest.java
@@ -0,0 +1,63 @@
+/*
+ * Copyright (C) 2019 Ignite Realtime Foundation. All rights reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jivesoftware.util;
+
+import org.junit.Test;
+
+import java.io.InputStream;
+
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
+
+/**
+ * Unit tests for {@link GraphicsUtils}
+ *
+ * @author Guus der Kinderen, guus.der.kinderen@gmail.com
+ */
+public class GraphicsUtilsTest
+{
+    /**
+     * Verifies that {@link GraphicsUtils#isImage(InputStream)} correctly identifies an image.
+     */
+    @Test
+    public void testIsImageWithImage() throws Exception
+    {
+        // Setup test fixture.
+        final InputStream input = getClass().getResourceAsStream( "/images/ant_logo_large.gif" );
+
+        // Execute system under test.
+        final boolean result = GraphicsUtils.isImage( input );
+
+        // Verify result.
+        assertTrue( result );
+    }
+
+    /**
+     * Verifies that {@link GraphicsUtils#isImage(InputStream)} rejects data that's not an image.
+     */
+    @Test
+    public void testIsImageWithNonImage() throws Exception
+    {
+        // Setup test fixture.
+        final InputStream input = getClass().getResourceAsStream( "/privatekey.pem" );
+
+        // Execute system under test.
+        final boolean result = GraphicsUtils.isImage( input );
+
+        // Verify result.
+        assertFalse( result );
+    }
+}

From 2dabb16e9ab4a378e33e32b2d4e4bc052d03d3c5 Mon Sep 17 00:00:00 2001
From: Guus der Kinderen <guus@goodbytes.nl>
Date: Thu, 3 Oct 2019 10:34:43 +0200
Subject: [PATCH 2/2] Increate favicon retrieval timeouts

I've noticed that many favicons are not shown. Increasing retrieval timeouts in the hope that this yields better results.
---
 .../src/main/java/org/jivesoftware/util/FaviconServlet.java   | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/xmppserver/src/main/java/org/jivesoftware/util/FaviconServlet.java b/xmppserver/src/main/java/org/jivesoftware/util/FaviconServlet.java
index deb0382f8b..0256142374 100644
--- a/xmppserver/src/main/java/org/jivesoftware/util/FaviconServlet.java
+++ b/xmppserver/src/main/java/org/jivesoftware/util/FaviconServlet.java
@@ -185,8 +185,8 @@ private void writeBytesToStream(byte[] bytes, HttpServletResponse response) {
         // Try to get the favicon from the url using an HTTP connection from the pool
         // that also allows to configure timeout values (e.g. connect and get data)
         final RequestConfig requestConfig = RequestConfig.custom()
-            .setConnectTimeout(2000)
-            .setSocketTimeout(2000)
+            .setConnectTimeout(5000)
+            .setSocketTimeout(5000)
             .build();
         final HttpUriRequest getRequest = RequestBuilder.get(url)
             .setConfig(requestConfig)