diff --git a/src/main/java/io/pivotal/security/handler/CredentialHandler.java b/src/main/java/io/pivotal/security/handler/CredentialHandler.java
index 2068270dc..13b1ee18d 100644
--- a/src/main/java/io/pivotal/security/handler/CredentialHandler.java
+++ b/src/main/java/io/pivotal/security/handler/CredentialHandler.java
@@ -32,13 +32,13 @@ public CredentialHandler(CredentialDataService credentialDataService, Permission
 
   public void deleteCredential(UserContext userContext, String credentialName) {
     if (!permissionService.hasPermission(userContext.getAclUser(), credentialName, DELETE)) {
-      throw new EntryNotFoundException("error.acl.lacks_credential_write");
+      throw new EntryNotFoundException("error.credential.invalid_access");
     }
 
     boolean deleteSucceeded = credentialDataService.delete(credentialName);
 
     if (!deleteSucceeded) {
-      throw new EntryNotFoundException("error.acl.lacks_credential_write");
+      throw new EntryNotFoundException("error.credential.invalid_access");
     }
   }
 
@@ -54,7 +54,7 @@ public DataResponse getAllCredentialVersions(
 
     // We need this extra check in case permissions aren't being enforced.
     if (credentials.isEmpty() || !permissionService.hasPermission(userContext.getAclUser(), credentialName, READ)) {
-      throw new EntryNotFoundException("error.credential_not_found");
+      throw new EntryNotFoundException("error.credential.invalid_access");
     }
 
     return DataResponse.fromEntity(credentials);
@@ -106,7 +106,7 @@ private Credential getVersionByIdentifier(
     auditRecordParametersList.add(eventAuditRecordParameters);
 
     if (credential == null || !permissionService.hasPermission(userContext.getAclUser(), credential.getName(), READ)) {
-      throw new EntryNotFoundException("error.credential_not_found");
+      throw new EntryNotFoundException("error.credential.invalid_access");
     }
 
     return credential;
diff --git a/src/main/java/io/pivotal/security/handler/PermissionsHandler.java b/src/main/java/io/pivotal/security/handler/PermissionsHandler.java
index b29224993..55846ce05 100644
--- a/src/main/java/io/pivotal/security/handler/PermissionsHandler.java
+++ b/src/main/java/io/pivotal/security/handler/PermissionsHandler.java
@@ -54,7 +54,7 @@ public PermissionsView setPermissions(UserContext userContext, String name,
 
     // We need to verify that the credential exists in case ACL enforcement is off
     if (credentialName == null || !permissionService.hasPermission(userContext.getAclUser(), name, WRITE_ACL)) {
-      throw new EntryNotFoundException("error.acl.lacks_credential_write");
+      throw new EntryNotFoundException("error.credential.invalid_access");
     }
 
     for (PermissionEntry permissionEntry : permissionEntryList) {
@@ -72,7 +72,7 @@ public PermissionsView setPermissions(UserContext userContext, String name,
 
   public void deletePermissionEntry(UserContext userContext, String credentialName, String actor) {
     if (!permissionService.hasPermission(userContext.getAclUser(), credentialName, WRITE_ACL)) {
-      throw new EntryNotFoundException("error.acl.lacks_credential_write");
+      throw new EntryNotFoundException("error.credential.invalid_access");
     }
 
     if (!permissionService.validAclUpdateOperation(userContext, actor)) {
@@ -83,7 +83,7 @@ public void deletePermissionEntry(UserContext userContext, String credentialName
         .deleteAccessControlEntry(credentialName, actor);
 
     if (!successfullyDeleted) {
-      throw new EntryNotFoundException("error.acl.lacks_credential_write");
+      throw new EntryNotFoundException("error.credential.invalid_access");
     }
   }
 }
diff --git a/src/main/java/io/pivotal/security/service/CredentialService.java b/src/main/java/io/pivotal/security/service/CredentialService.java
index 1c1d0294d..5f758c2e1 100644
--- a/src/main/java/io/pivotal/security/service/CredentialService.java
+++ b/src/main/java/io/pivotal/security/service/CredentialService.java
@@ -114,13 +114,13 @@ public CredentialView save(
 
   private void verifyCredentialWritePermission(UserContext userContext, String credentialName) {
     if (!permissionService.hasPermission(userContext.getAclUser(), credentialName, WRITE)) {
-      throw new PermissionException("error.acl.lacks_credential_write");
+      throw new PermissionException("error.credential.invalid_access");
     }
   }
 
   private void verifyAclWrite(UserContext userContext, String credentialName) {
     if (!permissionService.hasPermission(userContext.getAclUser(), credentialName, WRITE_ACL)) {
-      throw new PermissionException("error.acl.lacks_credential_write");
+      throw new PermissionException("error.credential.invalid_access");
     }
   }
 }
diff --git a/src/main/java/io/pivotal/security/service/JsonInterpolationService.java b/src/main/java/io/pivotal/security/service/JsonInterpolationService.java
index 1bb124a33..d7dea0813 100644
--- a/src/main/java/io/pivotal/security/service/JsonInterpolationService.java
+++ b/src/main/java/io/pivotal/security/service/JsonInterpolationService.java
@@ -55,7 +55,7 @@ public JsonInterpolationService(CredentialDataService credentialDataService) {
           eventAuditRecordParameters
               .add(new EventAuditRecordParameters(CREDENTIAL_ACCESS, credentialName));
 
-          throw new ParameterizedValidationException("error.interpolation.invalid_access");
+          throw new ParameterizedValidationException("error.credential.invalid_access");
         }
 
         eventAuditRecordParameters
diff --git a/src/main/java/io/pivotal/security/service/RegenerateService.java b/src/main/java/io/pivotal/security/service/RegenerateService.java
index 163c8e196..710291bcf 100644
--- a/src/main/java/io/pivotal/security/service/RegenerateService.java
+++ b/src/main/java/io/pivotal/security/service/RegenerateService.java
@@ -60,7 +60,7 @@ public CredentialView performRegenerate(
     Credential credential = credentialDataService.findMostRecent(requestBody.getName());
     if (credential == null) {
       parametersList.add(new EventAuditRecordParameters(CREDENTIAL_UPDATE, requestBody.getName()));
-      throw new EntryNotFoundException("error.credential_not_found");
+      throw new EntryNotFoundException("error.credential.invalid_access");
     }
 
     Regeneratable regeneratable = regeneratableTypes
diff --git a/src/main/resources/messages.properties b/src/main/resources/messages.properties
index 8d7402a83..9aa49f7b9 100644
--- a/src/main/resources/messages.properties
+++ b/src/main/resources/messages.properties
@@ -7,7 +7,6 @@ error.cert_not_ca=The requested certificate cannot be signed by the given CA bec
 error.missing_signing_ca=You must specify a signing CA or indicate self-signing when generating a certificate. Please update and retry your request.
 error.cannot_regenerate_non_generated_password=The password could not be regenerated because the value was statically set. Only generated passwords may be regenerated.
 error.cannot_regenerate_non_generated_certificate=The credential could not be regenerated because the certificate was statically set and is not self-signed or is invalid.
-error.credential_not_found=Credential not found. Please validate your input and retry your request.
 error.excludes_all_charsets=The combination of parameters in the request is not allowed. Please validate your input and retry your request.
 error.insufficient_hex_alpha=Password must contain at least 1 characters from A-F.
 error.invalid_alternate_name=A provided alternative name is not a valid hostname or IP address. Please update this value and retry your request.
@@ -35,11 +34,10 @@ error.acl.invalid_operation=The provided operation is not supported. Valid value
 error.acl.invalid_update_operation=Modification of access control for the authenticated user is not allowed. Please contact an administrator.
 error.acl.missing_aces=At least one access control entry must be provided. Please validate your input and retry your request.
 error.acl.missing_operations=At least one operation must be provided. Please validate your input and retry your request.
-error.acl.lacks_credential_write=The request could not be completed because the credential does not exist or you do not have sufficient authorization.
 error.interpolation.invalid_type=The credential ''{0}'' is not the expected type. A credhub-ref credential must be of type ''JSON''.
-error.interpolation.invalid_access=The request could not be completed because a reference credential could not be accessed. Please update and retry your request.
 error.auth.invalid_mtls_identity=The provided authentication mechanism does not provide a valid identity. Please contact your system administrator.
 error.auth.mtls_not_client_auth=The provided certificate is not authorized to be used for client authentication.
+error.credential.invalid_access=The request could not be completed because the credential does not exist or you do not have sufficient authorization.
 error.credential.invalid_certificate_parameter=The request could not be completed because the {0} is too long. The max length for {0} is {1} characters.
 error.credential.invalid_character_in_name=Credential names may only include alpha, numeric, hyphen, underscore, and forward-slash characters. Please update and retry your request.
 error.credential.invalid_slash_in_name=A credential name cannot end with a '/' character or contain '//'. Credential names should be in the form of /[path]/[name] or [path]/[name]. Please update and retry your request.
diff --git a/src/test/java/io/pivotal/security/controller/v1/InterpolationControllerTest.java b/src/test/java/io/pivotal/security/controller/v1/InterpolationControllerTest.java
index a55245483..98312d53b 100644
--- a/src/test/java/io/pivotal/security/controller/v1/InterpolationControllerTest.java
+++ b/src/test/java/io/pivotal/security/controller/v1/InterpolationControllerTest.java
@@ -161,7 +161,7 @@ public void POST_whenAReferencedCredentialDoesNotExist_throwsAnError() throws Ex
         null
     ).when(mockCredentialDataService).findMostRecent("/cred1");
 
-    String expectedMessage = "The request could not be completed because a reference credential could not be accessed. Please update and retry your request.";
+    String expectedMessage = "The request could not be completed because the credential does not exist or you do not have sufficient authorization.";
     mockMvc.perform(post("/api/v1/interpolate")
         .header("Authorization", "Bearer " + UAA_OAUTH2_PASSWORD_GRANT_TOKEN)
         .contentType(MediaType.APPLICATION_JSON)
diff --git a/src/test/java/io/pivotal/security/controller/v1/credential/CredentialsControllerGetTest.java b/src/test/java/io/pivotal/security/controller/v1/credential/CredentialsControllerGetTest.java
index e28f515a6..6801671a4 100644
--- a/src/test/java/io/pivotal/security/controller/v1/credential/CredentialsControllerGetTest.java
+++ b/src/test/java/io/pivotal/security/controller/v1/credential/CredentialsControllerGetTest.java
@@ -165,13 +165,12 @@
               .header("Authorization", "Bearer " + UAA_OAUTH2_PASSWORD_GRANT_TOKEN)
               .accept(APPLICATION_JSON);
 
+          String expectedError = "The request could not be completed because the credential does not exist or you do not have sufficient authorization.";
           mockMvc.perform(get)
               .andExpect(status().isNotFound())
               .andExpect(content().contentTypeCompatibleWith(APPLICATION_JSON))
               .andExpect(
-                  jsonPath("$.error")
-                      .value("Credential not found. Please validate your input " +
-                          "and retry your request.")
+                  jsonPath("$.error").value(expectedError)
               );
         });
       });
@@ -316,13 +315,12 @@
             .header("Authorization", "Bearer " + UAA_OAUTH2_PASSWORD_GRANT_TOKEN)
             .accept(APPLICATION_JSON);
 
+        String expectedError = "The request could not be completed because the credential does not exist or you do not have sufficient authorization.";
         mockMvc.perform(get)
             .andExpect(status().isNotFound())
             .andExpect(content().contentTypeCompatibleWith(APPLICATION_JSON))
             .andExpect(
-                jsonPath("$.error")
-                    .value("Credential not found. Please validate your input and " +
-                        "retry your request.")
+                jsonPath("$.error").value(expectedError)
             );
       });
     };
@@ -348,13 +346,12 @@
       });
 
       it("should return credential not found even if request is valid", () -> {
+        String expectedError = "The request could not be completed because the credential does not exist or you do not have sufficient authorization.";
         this.response
             .andExpect(status().isNotFound())
             .andExpect(content().contentTypeCompatibleWith(APPLICATION_JSON))
             .andExpect(
-                jsonPath("$.error")
-                    .value("Credential not found. Please validate your input and " +
-                        "retry your request.")
+                jsonPath("$.error").value(expectedError)
             );
       });
 
@@ -369,13 +366,12 @@
             .header("Authorization", "Bearer " + UAA_OAUTH2_PASSWORD_GRANT_TOKEN)
             .accept(APPLICATION_JSON);
 
+        String expectedError = "The request could not be completed because the credential does not exist or you do not have sufficient authorization.";
         mockMvc.perform(get)
             .andExpect(status().isNotFound())
             .andExpect(content().contentTypeCompatibleWith(APPLICATION_JSON))
             .andExpect(
-                jsonPath("$.error")
-                    .value("Credential not found. Please validate your input and " +
-                        "retry your request.")
+                jsonPath("$.error").value(expectedError)
             );
       });
     };
diff --git a/src/test/java/io/pivotal/security/controller/v1/credential/CredentialsControllerRegenerateTest.java b/src/test/java/io/pivotal/security/controller/v1/credential/CredentialsControllerRegenerateTest.java
index 27049d882..6b8179842 100644
--- a/src/test/java/io/pivotal/security/controller/v1/credential/CredentialsControllerRegenerateTest.java
+++ b/src/test/java/io/pivotal/security/controller/v1/credential/CredentialsControllerRegenerateTest.java
@@ -1,28 +1,5 @@
 package io.pivotal.security.controller.v1.credential;
 
-import static com.greghaskins.spectrum.Spectrum.beforeEach;
-import static com.greghaskins.spectrum.Spectrum.describe;
-import static com.greghaskins.spectrum.Spectrum.it;
-import static io.pivotal.security.audit.AuditingOperationCode.CREDENTIAL_UPDATE;
-import static io.pivotal.security.helper.SpectrumHelper.mockOutCurrentTimeProvider;
-import static io.pivotal.security.helper.SpectrumHelper.wireAndUnwire;
-import static io.pivotal.security.util.AuthConstants.UAA_OAUTH2_PASSWORD_GRANT_TOKEN;
-import static org.hamcrest.CoreMatchers.equalTo;
-import static org.junit.Assert.assertThat;
-import static org.mockito.Matchers.any;
-import static org.mockito.Mockito.doAnswer;
-import static org.mockito.Mockito.doReturn;
-import static org.mockito.Mockito.times;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-import static org.springframework.http.MediaType.APPLICATION_JSON;
-import static org.springframework.security.test.web.servlet.setup.SecurityMockMvcConfigurers.springSecurity;
-import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
-import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;
-import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
-import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
-import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
-
 import com.greghaskins.spectrum.Spectrum;
 import io.pivotal.security.CredentialManagerApp;
 import io.pivotal.security.credential.RsaCredentialValue;
@@ -46,9 +23,6 @@
 import io.pivotal.security.service.EncryptionKeyCanaryMapper;
 import io.pivotal.security.util.CurrentTimeProvider;
 import io.pivotal.security.util.DatabaseProfileResolver;
-import java.time.Instant;
-import java.util.UUID;
-import java.util.function.Consumer;
 import org.junit.runner.RunWith;
 import org.mockito.ArgumentCaptor;
 import org.springframework.beans.factory.annotation.Autowired;
@@ -61,6 +35,33 @@
 import org.springframework.test.web.servlet.setup.MockMvcBuilders;
 import org.springframework.web.context.WebApplicationContext;
 
+import java.time.Instant;
+import java.util.UUID;
+import java.util.function.Consumer;
+
+import static com.greghaskins.spectrum.Spectrum.beforeEach;
+import static com.greghaskins.spectrum.Spectrum.describe;
+import static com.greghaskins.spectrum.Spectrum.it;
+import static io.pivotal.security.audit.AuditingOperationCode.CREDENTIAL_UPDATE;
+import static io.pivotal.security.helper.SpectrumHelper.mockOutCurrentTimeProvider;
+import static io.pivotal.security.helper.SpectrumHelper.wireAndUnwire;
+import static io.pivotal.security.util.AuthConstants.UAA_OAUTH2_PASSWORD_GRANT_TOKEN;
+import static org.hamcrest.CoreMatchers.equalTo;
+import static org.junit.Assert.assertThat;
+import static org.mockito.Matchers.any;
+import static org.mockito.Mockito.doAnswer;
+import static org.mockito.Mockito.doReturn;
+import static org.mockito.Mockito.times;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.when;
+import static org.springframework.http.MediaType.APPLICATION_JSON;
+import static org.springframework.security.test.web.servlet.setup.SecurityMockMvcConfigurers.springSecurity;
+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;
+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
+
 @RunWith(Spectrum.class)
 @ActiveProfiles(value = "unit-test", resolver = DatabaseProfileResolver.class)
 @SpringBootTest(classes = CredentialManagerApp.class)
@@ -290,8 +291,7 @@
 
       it("returns an error", () -> {
         String notFoundJson = "{" +
-            "  \"error\": \"Credential not found. " +
-            "Please validate your input and retry your request.\"" +
+            "  \"error\": \"The request could not be completed because the credential does not exist or you do not have sufficient authorization.\"" +
             "}";
 
         response
diff --git a/src/test/java/io/pivotal/security/handler/CredentialHandlerTest.java b/src/test/java/io/pivotal/security/handler/CredentialHandlerTest.java
index a0b833d98..fff73d846 100644
--- a/src/test/java/io/pivotal/security/handler/CredentialHandlerTest.java
+++ b/src/test/java/io/pivotal/security/handler/CredentialHandlerTest.java
@@ -88,7 +88,7 @@ public void deleteCredential_whenTheUserLacksPermission_throwsAnException() {
       subject.deleteCredential(userContext, CREDENTIAL_NAME);
       fail("Should throw exception");
     } catch (EntryNotFoundException e) {
-      assertThat(e.getMessage(), equalTo("error.acl.lacks_credential_write"));
+      assertThat(e.getMessage(), equalTo("error.credential.invalid_access"));
     }
   }
 
@@ -102,7 +102,7 @@ public void deleteCredential_whenTheCredentialIsNotDeleted_throwsAnException() {
       subject.deleteCredential(userContext, CREDENTIAL_NAME);
       fail("Should throw exception");
     } catch (EntryNotFoundException e) {
-      assertThat(e.getMessage(), equalTo("error.acl.lacks_credential_write"));
+      assertThat(e.getMessage(), equalTo("error.credential.invalid_access"));
     }
   }
 
@@ -154,7 +154,7 @@ public void getAllCredentialVersions_whenTheUserLacksPermission_throwsException(
           CREDENTIAL_NAME);
       fail("should throw exception");
     } catch (EntryNotFoundException e) {
-      assertThat(e.getMessage(), equalTo("error.credential_not_found"));
+      assertThat(e.getMessage(), equalTo("error.credential.invalid_access"));
     }
   }
 
@@ -188,7 +188,7 @@ public void getCredentialVersions_whenTheCredentialDoesNotExist_throwsException(
           CREDENTIAL_NAME);
       fail("should throw exception");
     } catch (EntryNotFoundException e) {
-      assertThat(e.getMessage(), equalTo("error.credential_not_found"));
+      assertThat(e.getMessage(), equalTo("error.credential.invalid_access"));
     }
   }
 
@@ -252,7 +252,7 @@ public void getMostRecentCredentialVersion_whenTheCredentialDoesNotExist_throwsE
           CREDENTIAL_NAME);
       fail("should throw exception");
     } catch (EntryNotFoundException e) {
-      assertThat(e.getMessage(), equalTo("error.credential_not_found"));
+      assertThat(e.getMessage(), equalTo("error.credential.invalid_access"));
     }
   }
 
@@ -268,7 +268,7 @@ public void getMostRecentCredentialVersion_whenTheUserLacksPermission_throwsExce
           CREDENTIAL_NAME);
       fail("should throw exception");
     } catch (EntryNotFoundException e) {
-      assertThat(e.getMessage(), equalTo("error.credential_not_found"));
+      assertThat(e.getMessage(), equalTo("error.credential.invalid_access"));
     }
   }
 
@@ -332,7 +332,7 @@ public void getCredentialVersion_whenTheVersionDoesNotExist_throwsException() {
       subject.getCredentialVersion(userContext, newArrayList(), UUID_STRING);
       fail("should throw exception");
     } catch (EntryNotFoundException e) {
-      assertThat(e.getMessage(), equalTo("error.credential_not_found"));
+      assertThat(e.getMessage(), equalTo("error.credential.invalid_access"));
     }
   }
 
@@ -347,7 +347,7 @@ public void getCredentialVersion_whenTheUserLacksPermission_throwsException() {
       subject.getCredentialVersion(userContext, newArrayList(), UUID_STRING);
       fail("should throw exception");
     } catch (EntryNotFoundException e) {
-      assertThat(e.getMessage(), equalTo("error.credential_not_found"));
+      assertThat(e.getMessage(), equalTo("error.credential.invalid_access"));
     }
   }
 
diff --git a/src/test/java/io/pivotal/security/handler/PermissionsHandlerTest.java b/src/test/java/io/pivotal/security/handler/PermissionsHandlerTest.java
index 366b02815..247f2f2e4 100644
--- a/src/test/java/io/pivotal/security/handler/PermissionsHandlerTest.java
+++ b/src/test/java/io/pivotal/security/handler/PermissionsHandlerTest.java
@@ -177,7 +177,7 @@ public void setPermissions_whenUserDoesNotHavePermission_throwsException() {
       subject.setPermissions(userContext, CREDENTIAL_NAME, emptyList());
       fail("should throw");
     } catch (EntryNotFoundException e) {
-      assertThat(e.getMessage(), equalTo("error.acl.lacks_credential_write"));
+      assertThat(e.getMessage(), equalTo("error.credential.invalid_access"));
       verify(permissionsDataService, times(0)).saveAccessControlEntries(any(), any());
     }
   }
@@ -214,7 +214,7 @@ public void setPermissions_whenTheCredentialDoesNotExist_throwsException() {
       subject.setPermissions(userContext, CREDENTIAL_NAME, emptyList());
       fail("should throw");
     } catch (EntryNotFoundException e) {
-      assertThat(e.getMessage(), equalTo("error.acl.lacks_credential_write"));
+      assertThat(e.getMessage(), equalTo("error.credential.invalid_access"));
       verify(permissionsDataService, times(0)).saveAccessControlEntries(any(), any());
     }
   }
@@ -261,7 +261,7 @@ public void deletePermissions_whenNothingIsDeleted_throwsAnException() {
       subject.deletePermissionEntry(userContext, CREDENTIAL_NAME, ACTOR_NAME);
       fail("should throw");
     } catch (EntryNotFoundException e) {
-      assertThat(e.getMessage(), equalTo("error.acl.lacks_credential_write"));
+      assertThat(e.getMessage(), equalTo("error.credential.invalid_access"));
     }
   }
 
@@ -276,7 +276,7 @@ public void deletePermissions_whenTheUserLacksPermission_throwsInsteadOfDeleting
       subject.deletePermissionEntry(userContext, CREDENTIAL_NAME, ACTOR_NAME);
       fail("should throw");
     } catch (EntryNotFoundException e) {
-      assertThat(e.getMessage(), equalTo("error.acl.lacks_credential_write"));
+      assertThat(e.getMessage(), equalTo("error.credential.invalid_access"));
       verify(permissionsDataService, times(0)).deleteAccessControlEntry(any(), any());
     }
   }
diff --git a/src/test/java/io/pivotal/security/integration/CredentialAclEnforcementTest.java b/src/test/java/io/pivotal/security/integration/CredentialAclEnforcementTest.java
index bcca6f50a..6b7fd4340 100644
--- a/src/test/java/io/pivotal/security/integration/CredentialAclEnforcementTest.java
+++ b/src/test/java/io/pivotal/security/integration/CredentialAclEnforcementTest.java
@@ -76,11 +76,11 @@ public void GET_byCredentialName_whenTheUserDoesntHavePermissionToReadCredential
       throws Exception {
     final MockHttpServletRequestBuilder get = get("/api/v1/data?name=" + CREDENTIAL_NAME)
         .with(x509(cert(SELF_SIGNED_CERT_WITH_CLIENT_AUTH_EXT)));
+    String expectedError = "The request could not be completed because the credential does not exist or you do not have sufficient authorization.";
     mockMvc.perform(get)
         .andDo(print())
         .andExpect(status().isNotFound())
-        .andExpect(jsonPath("$.error",
-            equalTo("Credential not found. Please validate your input and retry your request.")));
+        .andExpect(jsonPath("$.error", equalTo(expectedError)));
   }
 
   @Test
@@ -100,11 +100,11 @@ public void GET_byId_whenTheUserDoesntHavePermissionToReadCredential_returns404(
       throws Exception {
     final MockHttpServletRequestBuilder get = get("/api/v1/data/" + uuid)
         .with(x509(cert(SELF_SIGNED_CERT_WITH_CLIENT_AUTH_EXT)));
+    String expectedError = "The request could not be completed because the credential does not exist or you do not have sufficient authorization.";
     mockMvc.perform(get)
         .andDo(print())
         .andExpect(status().isNotFound())
-        .andExpect(jsonPath("$.error",
-            equalTo("Credential not found. Please validate your input and retry your request.")));
+        .andExpect(jsonPath("$.error", equalTo(expectedError)));
   }
 
   @Test
diff --git a/src/test/java/io/pivotal/security/service/CredentialServiceTest.java b/src/test/java/io/pivotal/security/service/CredentialServiceTest.java
index aa06fb991..41ec9c7f6 100644
--- a/src/test/java/io/pivotal/security/service/CredentialServiceTest.java
+++ b/src/test/java/io/pivotal/security/service/CredentialServiceTest.java
@@ -268,7 +268,7 @@ public void save_whenThereIsAnExistingCredentialWithACEs_shouldThrowAnExceptionI
           accessControlEntries,
           currentUserPermissions);
     } catch (PermissionException pe) {
-      assertThat(pe.getMessage(), equalTo("error.acl.lacks_credential_write"));
+      assertThat(pe.getMessage(), equalTo("error.credential.invalid_access"));
     }
   }
 
diff --git a/src/test/java/io/pivotal/security/service/JsonInterpolationServiceTest.java b/src/test/java/io/pivotal/security/service/JsonInterpolationServiceTest.java
index 0381399d5..b47beb307 100644
--- a/src/test/java/io/pivotal/security/service/JsonInterpolationServiceTest.java
+++ b/src/test/java/io/pivotal/security/service/JsonInterpolationServiceTest.java
@@ -135,7 +135,7 @@ public void interpolateCredHubReferences_whenAReferencedCredentialDoesNotExist_i
     try {
       subject.interpolateCredHubReferences(inputJson, eventAuditRecordParameters);
     } catch (ParameterizedValidationException exception) {
-      assertThat(exception.getMessage(), equalTo("error.interpolation.invalid_access"));
+      assertThat(exception.getMessage(), equalTo("error.credential.invalid_access"));
 
       assertThat(eventAuditRecordParameters, hasSize(1));
       assertThat(eventAuditRecordParameters, contains(
