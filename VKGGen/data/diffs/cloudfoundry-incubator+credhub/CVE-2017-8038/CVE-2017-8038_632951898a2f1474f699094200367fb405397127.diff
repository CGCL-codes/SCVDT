diff --git a/src/main/java/io/pivotal/security/controller/v1/InterpolationController.java b/src/main/java/io/pivotal/security/controller/v1/InterpolationController.java
index 89c1e320c..3683e3141 100644
--- a/src/main/java/io/pivotal/security/controller/v1/InterpolationController.java
+++ b/src/main/java/io/pivotal/security/controller/v1/InterpolationController.java
@@ -35,12 +35,14 @@
 
   @RequestMapping(method = RequestMethod.POST, path = "/interpolate")
   @ResponseStatus(HttpStatus.OK)
-  public Map<String, Object> interpolate(@RequestBody Map<String, Object> requestBody,
+  public Map<String, Object> interpolate(
+      @RequestBody Map<String, Object> requestBody,
       RequestUuid requestUuid,
-      UserContext userContext) {
-    return eventAuditLogService.auditEvents(requestUuid, userContext, (eventAuditRecordParameters ->
+      UserContext userContext
+  ) {
+    return eventAuditLogService.auditEvents(requestUuid, userContext, (eventAuditRecordParametersList ->
           jsonInterpolationService
-            .interpolateCredHubReferences(requestBody, eventAuditRecordParameters))
+            .interpolateCredHubReferences(userContext, requestBody, eventAuditRecordParametersList))
     );
   }
 }
diff --git a/src/main/java/io/pivotal/security/controller/v1/credential/CredentialsController.java b/src/main/java/io/pivotal/security/controller/v1/credential/CredentialsController.java
index 7409d7494..fd98fac1c 100644
--- a/src/main/java/io/pivotal/security/controller/v1/credential/CredentialsController.java
+++ b/src/main/java/io/pivotal/security/controller/v1/credential/CredentialsController.java
@@ -9,6 +9,7 @@
 import io.pivotal.security.audit.RequestUuid;
 import io.pivotal.security.auth.UserContext;
 import io.pivotal.security.data.CredentialDataService;
+import io.pivotal.security.domain.Credential;
 import io.pivotal.security.exceptions.InvalidQueryParameterException;
 import io.pivotal.security.handler.CredentialHandler;
 import io.pivotal.security.handler.GenerateRequestHandler;
@@ -49,6 +50,7 @@
 
 import static io.pivotal.security.audit.AuditingOperationCode.CREDENTIAL_DELETE;
 import static io.pivotal.security.audit.AuditingOperationCode.CREDENTIAL_FIND;
+import static java.util.Collections.singletonList;
 
 @RestController
 @RequestMapping(
@@ -151,9 +153,10 @@ public CredentialView getCredentialById(
       @PathVariable String id,
       RequestUuid requestUuid,
       UserContext userContext) {
-    return eventAuditLogService.auditEvents(requestUuid, userContext, eventAuditRecordParametersList -> (
-        credentialHandler.getCredentialVersion(userContext, eventAuditRecordParametersList, id)
-    ));
+    return eventAuditLogService.auditEvents(requestUuid, userContext, eventAuditRecordParametersList -> {
+      Credential credentialVersion = credentialHandler.getCredentialVersion(userContext, eventAuditRecordParametersList, id);
+      return CredentialView.fromEntity(credentialVersion);
+    });
   }
 
   @GetMapping(path = "")
@@ -168,11 +171,14 @@ public DataResponse getCredential(
     }
 
     return eventAuditLogService.auditEvents(requestUuid, userContext, eventAuditRecordParametersList -> {
+      List<Credential> credentials;
       if (current) {
-        return credentialHandler.getMostRecentCredentialVersion(userContext, eventAuditRecordParametersList, credentialName);
+        Credential credential = credentialHandler.getMostRecentCredentialVersion(userContext, eventAuditRecordParametersList, credentialName);
+        credentials = singletonList(credential);
       } else {
-        return credentialHandler.getAllCredentialVersions(userContext, eventAuditRecordParametersList, credentialName);
+        credentials = credentialHandler.getAllCredentialVersions(userContext, eventAuditRecordParametersList, credentialName);
       }
+      return DataResponse.fromEntity(credentials);
     });
   }
 
diff --git a/src/main/java/io/pivotal/security/handler/CredentialHandler.java b/src/main/java/io/pivotal/security/handler/CredentialHandler.java
index 13b1ee18d..50de5b777 100644
--- a/src/main/java/io/pivotal/security/handler/CredentialHandler.java
+++ b/src/main/java/io/pivotal/security/handler/CredentialHandler.java
@@ -7,8 +7,6 @@
 import io.pivotal.security.domain.Credential;
 import io.pivotal.security.exceptions.EntryNotFoundException;
 import io.pivotal.security.service.PermissionService;
-import io.pivotal.security.view.CredentialView;
-import io.pivotal.security.view.DataResponse;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Component;
 
@@ -17,7 +15,6 @@
 
 import static io.pivotal.security.request.PermissionOperation.DELETE;
 import static io.pivotal.security.request.PermissionOperation.READ;
-import static java.util.Collections.singletonList;
 
 @Component
 public class CredentialHandler {
@@ -42,7 +39,7 @@ public void deleteCredential(UserContext userContext, String credentialName) {
     }
   }
 
-  public DataResponse getAllCredentialVersions(
+  public List<Credential> getAllCredentialVersions(
       UserContext userContext,
       List<EventAuditRecordParameters> auditRecordParametersList,
       String credentialName
@@ -57,10 +54,10 @@ public DataResponse getAllCredentialVersions(
       throw new EntryNotFoundException("error.credential.invalid_access");
     }
 
-    return DataResponse.fromEntity(credentials);
+    return credentials;
   }
 
-  public DataResponse getMostRecentCredentialVersion(
+  public Credential getMostRecentCredentialVersion(
       UserContext userContext,
       List<EventAuditRecordParameters> auditRecordParametersList,
       String credentialName
@@ -71,20 +68,20 @@ public DataResponse getMostRecentCredentialVersion(
         credentialName,
         credentialDataService::findMostRecent
     );
-    return DataResponse.fromEntity(singletonList(credential));
+    return credential;
   }
 
-  public CredentialView getCredentialVersion(
+  public Credential getCredentialVersion(
       UserContext userContext,
       List<EventAuditRecordParameters> auditRecordParametersList,
       String credentialUuid
   ) {
-    return CredentialView.fromEntity(getVersionByIdentifier(
+    return getVersionByIdentifier(
         userContext,
         auditRecordParametersList,
         credentialUuid,
         credentialDataService::findByUuid
-    ));
+    );
   }
 
   private Credential getVersionByIdentifier(
diff --git a/src/main/java/io/pivotal/security/service/JsonInterpolationService.java b/src/main/java/io/pivotal/security/service/JsonInterpolationService.java
index d7dea0813..c9e10f757 100644
--- a/src/main/java/io/pivotal/security/service/JsonInterpolationService.java
+++ b/src/main/java/io/pivotal/security/service/JsonInterpolationService.java
@@ -1,10 +1,11 @@
 package io.pivotal.security.service;
 
 import io.pivotal.security.audit.EventAuditRecordParameters;
-import io.pivotal.security.data.CredentialDataService;
+import io.pivotal.security.auth.UserContext;
 import io.pivotal.security.domain.Credential;
 import io.pivotal.security.domain.JsonCredential;
 import io.pivotal.security.exceptions.ParameterizedValidationException;
+import io.pivotal.security.handler.CredentialHandler;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Service;
 
@@ -12,19 +13,20 @@
 import java.util.List;
 import java.util.Map;
 
-import static io.pivotal.security.audit.AuditingOperationCode.CREDENTIAL_ACCESS;
-
 @Service
 public class JsonInterpolationService {
-  private CredentialDataService credentialDataService;
+  private final CredentialHandler credentialHandler;
 
   @Autowired
-  public JsonInterpolationService(CredentialDataService credentialDataService) {
-    this.credentialDataService = credentialDataService;
+  public JsonInterpolationService(CredentialHandler credentialHandler) {
+    this.credentialHandler = credentialHandler;
   }
 
-  public Map<String, Object> interpolateCredHubReferences(Map<String, Object> servicesMap,
-      List<EventAuditRecordParameters> eventAuditRecordParameters) {
+  public Map<String, Object> interpolateCredHubReferences(
+      UserContext userContext,
+      Map<String, Object> servicesMap,
+      List<EventAuditRecordParameters> eventAuditRecordParametersList
+  ) {
 
     for (Object serviceProperties : servicesMap.values()) {
       if (serviceProperties == null || !(serviceProperties instanceof ArrayList)) {
@@ -50,16 +52,11 @@ public JsonInterpolationService(CredentialDataService credentialDataService) {
         }
         String credentialName = getCredentialNameFromRef((String) credhubRef);
 
-        Credential credential = credentialDataService.findMostRecent(credentialName);
-        if (credential == null) {
-          eventAuditRecordParameters
-              .add(new EventAuditRecordParameters(CREDENTIAL_ACCESS, credentialName));
-
-          throw new ParameterizedValidationException("error.credential.invalid_access");
-        }
-
-        eventAuditRecordParameters
-            .add(new EventAuditRecordParameters(CREDENTIAL_ACCESS, credential.getName()));
+        Credential credential = credentialHandler.getMostRecentCredentialVersion(
+            userContext,
+            eventAuditRecordParametersList,
+            credentialName
+        );
 
         if (credential instanceof JsonCredential) {
           propertiesMap.put("credentials", ((JsonCredential) credential).getValue());
diff --git a/src/test/java/io/pivotal/security/handler/CredentialHandlerTest.java b/src/test/java/io/pivotal/security/handler/CredentialHandlerTest.java
index fff73d846..43cfe5ba9 100644
--- a/src/test/java/io/pivotal/security/handler/CredentialHandlerTest.java
+++ b/src/test/java/io/pivotal/security/handler/CredentialHandlerTest.java
@@ -8,8 +8,6 @@
 import io.pivotal.security.domain.SshCredential;
 import io.pivotal.security.exceptions.EntryNotFoundException;
 import io.pivotal.security.service.PermissionService;
-import io.pivotal.security.view.CredentialView;
-import io.pivotal.security.view.DataResponse;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -114,15 +112,14 @@ public void getAllCredentialVersions_whenTheCredentialExists_returnsADataRespons
     when(permissionService.hasPermission(USER, CREDENTIAL_NAME, READ))
         .thenReturn(true);
 
-    DataResponse response = subject.getAllCredentialVersions(userContext,
+    List<Credential> credentialVersions = subject.getAllCredentialVersions(userContext,
         newArrayList(), CREDENTIAL_NAME);
 
-    List<CredentialView> responseCredentials = response.getData();
-    assertThat(responseCredentials, hasSize(2));
-    assertThat(responseCredentials.get(0).getName(), equalTo(CREDENTIAL_NAME));
-    assertThat(responseCredentials.get(0).getVersionCreatedAt(), equalTo(VERSION1_CREATED_AT));
-    assertThat(responseCredentials.get(1).getName(), equalTo(CREDENTIAL_NAME));
-    assertThat(responseCredentials.get(1).getVersionCreatedAt(), equalTo(VERSION2_CREATED_AT));
+    assertThat(credentialVersions, hasSize(2));
+    assertThat(credentialVersions.get(0).getName(), equalTo(CREDENTIAL_NAME));
+    assertThat(credentialVersions.get(0).getVersionCreatedAt(), equalTo(VERSION1_CREATED_AT));
+    assertThat(credentialVersions.get(1).getName(), equalTo(CREDENTIAL_NAME));
+    assertThat(credentialVersions.get(1).getVersionCreatedAt(), equalTo(VERSION2_CREATED_AT));
   }
 
   @Test
@@ -216,15 +213,13 @@ public void getMostRecentCredentialVersion_whenTheCredentialExists_returnsDataRe
     when(permissionService.hasPermission(USER, CREDENTIAL_NAME, READ))
         .thenReturn(true);
 
-    DataResponse response = subject.getMostRecentCredentialVersion(
+    Credential credential = subject.getMostRecentCredentialVersion(
         userContext,
         newArrayList(), CREDENTIAL_NAME
     );
-    List<CredentialView> responseCredentials = response.getData();
 
-    assertThat(responseCredentials, hasSize(1));
-    assertThat(responseCredentials.get(0).getName(), equalTo(CREDENTIAL_NAME));
-    assertThat(responseCredentials.get(0).getVersionCreatedAt(), equalTo(VERSION1_CREATED_AT));
+    assertThat(credential.getName(), equalTo(CREDENTIAL_NAME));
+    assertThat(credential.getVersionCreatedAt(), equalTo(VERSION1_CREATED_AT));
   }
 
   @Test
@@ -297,13 +292,13 @@ public void getCredentialVersion_whenTheVersionExists_returnsDataResponse() {
     when(permissionService.hasPermission(USER, CREDENTIAL_NAME, READ))
         .thenReturn(true);
 
-    CredentialView response = subject.getCredentialVersion(
+    Credential credential = subject.getCredentialVersion(
         userContext,
         newArrayList(),
         UUID_STRING
     );
-    assertThat(response.getName(), equalTo(CREDENTIAL_NAME));
-    assertThat(response.getVersionCreatedAt(), equalTo(VERSION1_CREATED_AT));
+    assertThat(credential.getName(), equalTo(CREDENTIAL_NAME));
+    assertThat(credential.getVersionCreatedAt(), equalTo(VERSION1_CREATED_AT));
   }
 
   @Test
diff --git a/src/test/java/io/pivotal/security/integration/CredentialAclEnforcementTest.java b/src/test/java/io/pivotal/security/integration/CredentialAclEnforcementTest.java
index 6b7fd4340..a49c27bf3 100644
--- a/src/test/java/io/pivotal/security/integration/CredentialAclEnforcementTest.java
+++ b/src/test/java/io/pivotal/security/integration/CredentialAclEnforcementTest.java
@@ -9,6 +9,7 @@
 import org.junit.runner.RunWith;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.http.MediaType;
 import org.springframework.test.context.ActiveProfiles;
 import org.springframework.test.context.TestPropertySource;
 import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
@@ -372,4 +373,94 @@ private void seedCredential() throws Exception {
     final DocumentContext context = JsonPath.parse(result.getResponse().getContentAsString());
     uuid = context.read("$.id");
   }
+
+  @Test
+  public void interpolate_whenTheUserHasAccessToAllReferencedCredentials_returnsInterpolatedBody() throws Exception {
+    makeJsonCredential(UAA_OAUTH2_PASSWORD_GRANT_TOKEN, "secret1");
+    makeJsonCredential(UAA_OAUTH2_PASSWORD_GRANT_TOKEN, "secret2");
+
+    MockHttpServletRequestBuilder request = post("/api/v1/interpolate")
+        .header("Authorization", "Bearer " + UAA_OAUTH2_PASSWORD_GRANT_TOKEN)
+        .contentType(MediaType.APPLICATION_JSON)
+        .content(
+            "{" +
+                "    \"pp-config-server\": [" +
+                "      {" +
+                "        \"credentials\": {" +
+                "          \"credhub-ref\": \"((/secret1))\"" +
+                "        }," +
+                "        \"label\": \"pp-config-server\"" +
+                "      }" +
+                "    ]," +
+                "    \"pp-something-else\": [" +
+                "      {" +
+                "        \"credentials\": {" +
+                "          \"credhub-ref\": \"((/secret2))\"" +
+                "        }," +
+                "        \"something\": [\"pp-config-server\"]" +
+                "      }" +
+                "    ]" +
+                "  }"
+        );
+
+    this.mockMvc.perform(request)
+        .andExpect(status().isOk())
+        .andExpect(jsonPath("$.pp-config-server[0].credentials.secret1")
+            .value(equalTo("secret1-value")))
+        .andExpect(jsonPath("$.pp-something-else[0].credentials.secret2")
+            .value(equalTo("secret2-value")));
+  }
+
+  @Test
+  public void interpolate_whenTheUserDoesNotHaveAccessToAllReferencedCredentials_returnsAnError() throws Exception {
+    makeJsonCredential(UAA_OAUTH2_PASSWORD_GRANT_TOKEN, "secret1");
+    makeJsonCredential(UAA_OAUTH2_CLIENT_CREDENTIALS_TOKEN, "secret2");
+
+    MockHttpServletRequestBuilder request = post("/api/v1/interpolate")
+        .header("Authorization", "Bearer " + UAA_OAUTH2_PASSWORD_GRANT_TOKEN)
+        .contentType(MediaType.APPLICATION_JSON)
+        .content(
+            "{" +
+                "    \"pp-config-server\": [" +
+                "      {" +
+                "        \"credentials\": {" +
+                "          \"credhub-ref\": \"((/secret1))\"" +
+                "        }," +
+                "        \"label\": \"pp-config-server\"" +
+                "      }" +
+                "    ]," +
+                "    \"pp-something-else\": [" +
+                "      {" +
+                "        \"credentials\": {" +
+                "          \"credhub-ref\": \"((/secret2))\"" +
+                "        }," +
+                "        \"something\": [\"pp-config-server\"]" +
+                "      }" +
+                "    ]" +
+                "  }"
+        );
+
+    String expectedError = "The request could not be completed because the credential does not exist or you do not have sufficient authorization.";
+
+    this.mockMvc.perform(request)
+        .andExpect(status().isNotFound())
+        .andExpect(jsonPath("$.error", equalTo(expectedError)));
+  }
+
+  private void makeJsonCredential(String userToken, String credentialName) throws Exception {
+    MockHttpServletRequestBuilder createRequest1 = put("/api/v1/data")
+        .header("Authorization", "Bearer " + userToken)
+        .contentType(MediaType.APPLICATION_JSON)
+        .content(
+            "{" +
+                "\"name\":\"" + credentialName + "\"," +
+                "\"type\":\"json\"," +
+                "\"value\":{" +
+                "\"" + credentialName + "\":\"" + credentialName + "-value\"" +
+                "}" +
+                "}"
+        );
+    this.mockMvc.perform(createRequest1)
+        .andExpect(status().isOk());
+  }
 }
diff --git a/src/test/java/io/pivotal/security/service/JsonInterpolationServiceTest.java b/src/test/java/io/pivotal/security/service/JsonInterpolationServiceTest.java
index b47beb307..1d9c82ecf 100644
--- a/src/test/java/io/pivotal/security/service/JsonInterpolationServiceTest.java
+++ b/src/test/java/io/pivotal/security/service/JsonInterpolationServiceTest.java
@@ -1,10 +1,11 @@
 package io.pivotal.security.service;
 
 import io.pivotal.security.audit.EventAuditRecordParameters;
-import io.pivotal.security.data.CredentialDataService;
+import io.pivotal.security.auth.UserContext;
 import io.pivotal.security.domain.JsonCredential;
 import io.pivotal.security.domain.PasswordCredential;
 import io.pivotal.security.exceptions.ParameterizedValidationException;
+import io.pivotal.security.handler.CredentialHandler;
 import org.assertj.core.util.Maps;
 import org.junit.Before;
 import org.junit.Test;
@@ -15,15 +16,12 @@
 import java.util.List;
 import java.util.Map;
 
-import static io.pivotal.security.audit.AuditingOperationCode.CREDENTIAL_ACCESS;
 import static io.pivotal.security.helper.JsonTestHelper.deserialize;
 import static org.hamcrest.CoreMatchers.equalTo;
 import static org.hamcrest.MatcherAssert.assertThat;
-import static org.hamcrest.Matchers.contains;
-import static org.hamcrest.Matchers.containsInAnyOrder;
 import static org.hamcrest.Matchers.hasSize;
 import static org.hamcrest.Matchers.nullValue;
-import static org.hamcrest.Matchers.samePropertyValuesAs;
+import static org.hibernate.validator.internal.util.CollectionHelper.newArrayList;
 import static org.mockito.Mockito.doReturn;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
@@ -34,13 +32,15 @@
   private JsonInterpolationService subject;
   private Map<String, Object> response;
   private List<EventAuditRecordParameters> eventAuditRecordParameters;
-  private CredentialDataService credentialDataService;
+  private CredentialHandler credentialHandler;
+  private UserContext userContext;
 
   @Before
   public void beforeEach() {
-    credentialDataService = mock(CredentialDataService.class);
+    credentialHandler = mock(CredentialHandler.class);
+    userContext = mock(UserContext.class);
 
-    subject = new JsonInterpolationService(credentialDataService);
+    subject = new JsonInterpolationService(credentialHandler);
     eventAuditRecordParameters = new ArrayList<>();
   }
 
@@ -71,17 +71,6 @@ public void interpolateCredHubReferences_replacesTheCredHubRefWithSomethingElse(
     assertThat(secondServiceCredentials.get("secret3-2"), equalTo("secret3-2-value"));
   }
 
-  @Test
-  public void interpolateCredHubReferences_updatesTheEventAuditRecordParameters() throws Exception {
-    setupValidRequest();
-
-    assertThat(eventAuditRecordParameters, hasSize(3));
-    assertThat(eventAuditRecordParameters, containsInAnyOrder(
-        samePropertyValuesAs(new EventAuditRecordParameters(CREDENTIAL_ACCESS, "/cred1")),
-        samePropertyValuesAs(new EventAuditRecordParameters(CREDENTIAL_ACCESS, "/cred2")),
-        samePropertyValuesAs(new EventAuditRecordParameters(CREDENTIAL_ACCESS, "/cred3"))));
-  }
-
   @Test
   public void interpolateCredHubReferences_whenAReferencedCredentialIsNotJsonType_itThrowsAnException() throws Exception {
       String inputJson = "{"
@@ -100,50 +89,15 @@ public void interpolateCredHubReferences_whenAReferencedCredentialIsNotJsonType_
 
       doReturn(
           passwordCredential
-      ).when(credentialDataService).findMostRecent("/password_cred");
+      ).when(credentialHandler).getMostRecentCredentialVersion(userContext, eventAuditRecordParameters,"/password_cred");
 
       try {
-        subject.interpolateCredHubReferences(deserialize(inputJson, Map.class),
-            eventAuditRecordParameters);
+        subject.interpolateCredHubReferences(userContext, deserialize(inputJson, Map.class), eventAuditRecordParameters);
       } catch (ParameterizedValidationException exception) {
         assertThat(exception.getMessage(), equalTo("error.interpolation.invalid_type"));
-        assertThat(eventAuditRecordParameters, hasSize(1));
-        assertThat(eventAuditRecordParameters, contains(
-            samePropertyValuesAs(new EventAuditRecordParameters(CREDENTIAL_ACCESS, "/password_cred"))
-        ));
       }
   }
 
-  @Test
-  public void interpolateCredHubReferences_whenAReferencedCredentialDoesNotExist_itThrowsAnException() {
-    String inputJsonString = "{"
-        + "  \"pp-config-server\": ["
-        + "    {"
-        + "      \"credentials\": {"
-        + "        \"credhub-ref\": \"((/missing_cred))\""
-        + "      },"
-        + "      \"label\": \"pp-config-server\""
-        + "    }"
-        + "  ]"
-        + "}";
-    Map<String, Object> inputJson = deserialize(inputJsonString, Map.class);
-
-    doReturn(
-        null
-    ).when(credentialDataService).findMostRecent("/missing_cred");
-
-    try {
-      subject.interpolateCredHubReferences(inputJson, eventAuditRecordParameters);
-    } catch (ParameterizedValidationException exception) {
-      assertThat(exception.getMessage(), equalTo("error.credential.invalid_access"));
-
-      assertThat(eventAuditRecordParameters, hasSize(1));
-      assertThat(eventAuditRecordParameters, contains(
-          samePropertyValuesAs(new EventAuditRecordParameters(CREDENTIAL_ACCESS, "/missing_cred"))
-      ));
-    }
-  }
-
   @Test
   public void interpolateCredHubReferences_whenTheServicePropertiesLackCredentials_doesNotInterpolateIt() {
     Map<String, Object> inputJson = deserialize("{"
@@ -155,7 +109,7 @@ public void interpolateCredHubReferences_whenTheServicePropertiesLackCredentials
         + "  }]"
         + "}", Map.class);
     Map<String, Object> response = subject
-        .interpolateCredHubReferences(inputJson, eventAuditRecordParameters);
+        .interpolateCredHubReferences(userContext, inputJson, eventAuditRecordParameters);
 
     assertThat(response, equalTo(inputJson));
     assertThat(eventAuditRecordParameters, hasSize(0));
@@ -172,7 +126,7 @@ public void interpolateCredHubReferences_whenTheCredentialsPropertyHasNoRefs_doe
         + "  }]"
         + "}", Map.class);
     Map<String, Object> response = subject
-        .interpolateCredHubReferences(inputJson, eventAuditRecordParameters);
+        .interpolateCredHubReferences(userContext, inputJson, eventAuditRecordParameters);
 
     assertThat(response, equalTo(inputJson));
     assertThat(eventAuditRecordParameters, hasSize(0));
@@ -192,7 +146,7 @@ public void interpolateCredHubReferences_whenTheCredentialsPropertyIsFormattedUn
             + "}";
     Map<String, Object> inputJson = deserialize(inputJsonString, Map.class);
     Map<String, Object> response = subject
-        .interpolateCredHubReferences(inputJson, eventAuditRecordParameters);
+        .interpolateCredHubReferences(userContext, inputJson, eventAuditRecordParameters);
 
     assertThat(response, equalTo(inputJson));
     assertThat(eventAuditRecordParameters, hasSize(0));
@@ -205,7 +159,7 @@ public void interpolateCredHubReferences_whenThePropertiesAreNotAHash_doesNotInt
         + "}";
     Map<String, Object> inputJson = deserialize(inputJsonString, Map.class);
     Map<String, Object> response = subject
-        .interpolateCredHubReferences(inputJson, eventAuditRecordParameters);
+        .interpolateCredHubReferences(userContext, inputJson, eventAuditRecordParameters);
 
     assertThat(response, equalTo(inputJson));
     assertThat(eventAuditRecordParameters, hasSize(0));
@@ -221,7 +175,7 @@ public void interpolateCredHubReferences_whenTheCredentialsAreNotAHashInAnArray_
         + "}";
     Map<String, Object> inputJson = deserialize(inputJsonString, Map.class);
     Map<String, Object> response = subject
-        .interpolateCredHubReferences(inputJson, eventAuditRecordParameters);
+        .interpolateCredHubReferences(userContext, inputJson, eventAuditRecordParameters);
 
     assertThat(response, equalTo(inputJson));
     assertThat(eventAuditRecordParameters, hasSize(0));
@@ -231,7 +185,7 @@ public void interpolateCredHubReferences_whenTheCredentialsAreNotAHashInAnArray_
   public void interpolateCredHubReferences_whenPropertiesAreEmpty_doesNotInterpolateIt() {
     Map<String, Object> inputJson = deserialize("{}", Map.class);
     Map<String, Object> response = subject
-        .interpolateCredHubReferences(inputJson, eventAuditRecordParameters);
+        .interpolateCredHubReferences(userContext, inputJson, eventAuditRecordParameters);
 
     assertThat(response, equalTo(inputJson));
     assertThat(eventAuditRecordParameters, hasSize(0));
@@ -248,7 +202,7 @@ public void interpolateCredHubReferences_whenServicePropertiesAreNotArrays_doesN
         + "  }"
         + "}";
     Map<String, Object> inputJson = deserialize(inputJsonString, Map.class);
-    Map response = subject.interpolateCredHubReferences(inputJson, eventAuditRecordParameters);
+    Map response = subject.interpolateCredHubReferences(userContext, inputJson, eventAuditRecordParameters);
 
     assertThat(response, equalTo(inputJson));
     assertThat(eventAuditRecordParameters, hasSize(0));
@@ -296,17 +250,17 @@ private void setupValidRequest() {
 
     doReturn(
         jsonCredential
-    ).when(credentialDataService).findMostRecent("/cred1");
+    ).when(credentialHandler).getMostRecentCredentialVersion(userContext, newArrayList(), "/cred1");
 
     doReturn(
         jsonCredential1
-    ).when(credentialDataService).findMostRecent("/cred2");
+    ).when(credentialHandler).getMostRecentCredentialVersion(userContext, newArrayList(), "/cred2");
 
     doReturn(
         jsonCredential2
-    ).when(credentialDataService).findMostRecent("/cred3");
+    ).when(credentialHandler).getMostRecentCredentialVersion(userContext, newArrayList(), "/cred3");
 
-    response = subject.interpolateCredHubReferences(inputJson, eventAuditRecordParameters);
+    response = subject.interpolateCredHubReferences(userContext, inputJson, eventAuditRecordParameters);
   }
 }
 
