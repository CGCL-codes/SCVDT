diff --git a/src/main/java/hudson/plugins/build_publisher/HudsonInstance.java b/src/main/java/hudson/plugins/build_publisher/HudsonInstance.java
index 61afb3f..70a1b65 100644
--- a/src/main/java/hudson/plugins/build_publisher/HudsonInstance.java
+++ b/src/main/java/hudson/plugins/build_publisher/HudsonInstance.java
@@ -16,8 +16,6 @@
 
 import java.io.File;
 import java.io.IOException;
-import java.net.MalformedURLException;
-import java.net.URL;
 import java.util.ArrayList;
 import java.util.LinkedHashSet;
 import java.util.LinkedList;
@@ -25,9 +23,9 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
+import hudson.util.Secret;
 import jenkins.model.Jenkins;
 
-import org.apache.commons.httpclient.Credentials;
 import org.apache.commons.httpclient.HttpClient;
 import org.apache.commons.httpclient.SimpleHttpConnectionManager;
 import org.apache.commons.httpclient.UsernamePasswordCredentials;
@@ -46,7 +44,10 @@
     private String url;
     private String name;
     private String login;
-    private String password;
+    private Secret secret;
+
+    @Deprecated
+    private transient String password;
 
     // Builds to be published
     private transient LinkedHashSet<AbstractBuild> publishRequestQueue = new LinkedHashSet<AbstractBuild>();
@@ -59,8 +60,19 @@ public String getLogin() {
         return login;
     }
 
-    public String getPassword() {
-        return password;
+    /**
+     * Get plaintext password.
+     */
+    /*package*/ String getPassword() {
+        return secret.getPlainText();
+    }
+
+    /**
+     * Get encrypted secret.
+     */
+    // Exposed for jelly
+    public Secret getSecret() {
+        return secret;
     }
 
     public boolean requiresAuthentication() {
@@ -71,12 +83,11 @@ public HudsonInstance(String name, String url, String login, String password) {
         this.name = name;
         this.url = url;
         this.login = login;
-        this.password = password;
+        this.secret = Secret.fromString(password);
 
         initVariables();
         restoreQueue();
         initPublisherThread();
-
     }
 
     public String getUrl() {
@@ -118,6 +129,14 @@ public synchronized void publishBuild(AbstractBuild build, StatusInfo status) {
 
     // XStream init
     private Object readResolve() {
+        // Migrate plaintext password to secret
+        if (password != null) {
+            if (secret == null) {
+                secret = Secret.fromString(password);
+                password = null;
+            }
+        }
+
         initVariables();
 
         // let's wait until Hudson's initialized
@@ -143,7 +162,7 @@ private void initVariables() {
         loadProxy();
     }
 
-    public void loadProxy(){
+    void loadProxy(){
         Jenkins j = Jenkins.getInstance();
         ProxyConfiguration proxy = j!=null ? j.proxy : null;
         if(proxy != null) {
diff --git a/src/main/resources/hudson/plugins/build_publisher/BuildPublisher/global.jelly b/src/main/resources/hudson/plugins/build_publisher/BuildPublisher/global.jelly
index d0987c4..996b261 100644
--- a/src/main/resources/hudson/plugins/build_publisher/BuildPublisher/global.jelly
+++ b/src/main/resources/hudson/plugins/build_publisher/BuildPublisher/global.jelly
@@ -20,8 +20,7 @@
           </f:entry>
         
           <f:entry title="Password" help="/plugin/build-publisher/help/global/password.html">
-            <input class="setting-input" name="bp.password"
-                   type="password" value="${serv.getPassword()}"/>
+            <f:password name="bp.password" value="${serv.getSecret()}"/>
           </f:entry>
 
           <f:entry>
diff --git a/src/test/java/hudson/plugins/build_publisher/BuildPublisherTest.java b/src/test/java/hudson/plugins/build_publisher/BuildPublisherTest.java
index 3848784..5d5f623 100644
--- a/src/test/java/hudson/plugins/build_publisher/BuildPublisherTest.java
+++ b/src/test/java/hudson/plugins/build_publisher/BuildPublisherTest.java
@@ -28,20 +28,27 @@ public void configRoundtrip() throws Exception {
         config.getInputByName("bp.password").setValueAttribute("PASSWORD");
         j.submit(config);
 
-        HudsonInstance[] publicInstances = BuildPublisher.DESCRIPTOR.getPublicInstances();
-        assertEquals(Arrays.toString(publicInstances), 1, publicInstances.length);
-        HudsonInstance name = publicInstances[0];
-        assertEquals("NAME", name.getName());
-        assertEquals("fake://url.com/", name.getUrl());
-        assertEquals("LOGIN", name.getLogin());
-        assertEquals("PASSWORD", name.getPassword());
+        testFilledValues(); // Correct after configuring
 
         page = wc.goTo("configure");
-        assertThat(page.getWebResponse().getContentAsString(), not(containsString("PASSWORD")));
+        config = page.getFormByName("config");
+
+        assertThat(
+                "Plaintext revealed",
+                page.getWebResponse().getContentAsString(),
+                not(containsString("PASSWORD"))
+        );
+        j.submit(config);
+
+        testFilledValues(); // Correct after roundtrip
     }
 
     @Test @LocalData
     public void migrateTo_1_22() throws Exception {
+        testFilledValues();
+    }
+
+    private void testFilledValues() {
         HudsonInstance[] publicInstances = BuildPublisher.DESCRIPTOR.getPublicInstances();
         assertEquals(Arrays.toString(publicInstances), 1, publicInstances.length);
         HudsonInstance name = publicInstances[0];
