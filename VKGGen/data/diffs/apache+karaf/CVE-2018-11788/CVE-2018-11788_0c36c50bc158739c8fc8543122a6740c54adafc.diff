diff --git a/specs/java.xml/src/main/java/javax/xml/stream/XMLInputFactory.java b/specs/java.xml/src/main/java/javax/xml/stream/XMLInputFactory.java
index 5c7e158ea4a..36ad70225bf 100644
--- a/specs/java.xml/src/main/java/javax/xml/stream/XMLInputFactory.java
+++ b/specs/java.xml/src/main/java/javax/xml/stream/XMLInputFactory.java
@@ -43,13 +43,29 @@
 
     protected XMLInputFactory(){}
 
+    private static void setProperties(XMLInputFactory factory) {
+        factory.setProperty(XMLInputFactory.IS_NAMESPACE_AWARE, true);
+        factory.setProperty(XMLInputFactory.SUPPORT_DTD, false);
+        factory.setProperty(XMLInputFactory.IS_REPLACING_ENTITY_REFERENCES, false);
+        factory.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, false);
+        factory.setXMLResolver(new XMLResolver() {
+            @Override
+            public Object resolveEntity(String publicID, String systemID, String baseURI, String namespace) throws XMLStreamException {
+                throw new XMLStreamException("Reading external entities is disabled");
+            }
+        });
+    }
     
     public static XMLInputFactory newDefaultFactory() {
-        return $FactoryFinder.newInstance(XMLInputFactory.class, DEFAULT_IMPL, null, false, true);
+        XMLInputFactory factory = $FactoryFinder.newInstance(XMLInputFactory.class, DEFAULT_IMPL, null, false, true);
+        setProperties(factory);
+        return factory;
     }
     
     public static XMLInputFactory newInstance() throws FactoryConfigurationError {
-        return $FactoryFinder.find(XMLInputFactory.class, DEFAULT_IMPL);
+        XMLInputFactory factory = $FactoryFinder.find(XMLInputFactory.class, DEFAULT_IMPL);
+        setProperties(factory);
+        return factory;
     }
 
     @Deprecated
@@ -58,7 +74,9 @@ public static XMLInputFactory newFactory() throws FactoryConfigurationError {
     }
 
     public static XMLInputFactory newFactory(String factoryId, ClassLoader classLoader) throws FactoryConfigurationError {
-        return $FactoryFinder.find(XMLInputFactory.class, factoryId, classLoader, null);
+        XMLInputFactory factory = $FactoryFinder.find(XMLInputFactory.class, factoryId, classLoader, null);
+        setProperties(factory);
+        return factory;
     }
 
     @Deprecated
diff --git a/util/src/main/java/org/apache/karaf/util/XmlUtils.java b/util/src/main/java/org/apache/karaf/util/XmlUtils.java
index 975e5560e1f..14e798b30d9 100644
--- a/util/src/main/java/org/apache/karaf/util/XmlUtils.java
+++ b/util/src/main/java/org/apache/karaf/util/XmlUtils.java
@@ -20,6 +20,7 @@
 import java.io.IOException;
 import java.io.InputStream;
 
+import javax.xml.XMLConstants;
 import javax.xml.parsers.DocumentBuilder;
 import javax.xml.parsers.DocumentBuilderFactory;
 import javax.xml.parsers.ParserConfigurationException;
@@ -105,6 +106,11 @@ public static XMLReader xmlReader() throws ParserConfigurationException, SAXExce
         if (spf == null) {
             spf = SAXParserFactory.newInstance();
             spf.setNamespaceAware(true);
+            spf.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
+            spf.setFeature("http://xml.org/sax/features/external-general-entities", false);
+            spf.setFeature("http://xml.org/sax/features/external-parameter-entities", false);
+            spf.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false);
+            spf.setXIncludeAware(false);
             SAX_PARSER_FACTORY.set(spf);
         }
         return spf.newSAXParser().getXMLReader();
@@ -115,6 +121,12 @@ public static DocumentBuilder documentBuilder() throws ParserConfigurationExcept
         if (dbf == null) {
             dbf = DocumentBuilderFactory.newInstance();
             dbf.setNamespaceAware(true);
+            dbf.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
+            dbf.setFeature("http://xml.org/sax/features/external-general-entities", false);
+            dbf.setFeature("http://xml.org/sax/features/external-parameter-entities", false);
+            dbf.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false);
+            dbf.setXIncludeAware(false);
+            dbf.setExpandEntityReferences(false);
             DOCUMENT_BUILDER_FACTORY.set(dbf);
         }
         return dbf.newDocumentBuilder();
@@ -124,6 +136,8 @@ public static Transformer transformer() throws TransformerConfigurationException
         TransformerFactory tf = TRANSFORMER_FACTORY.get();
         if (tf == null) {
             tf = TransformerFactory.newInstance();
+            tf.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, "");
+            tf.setAttribute(XMLConstants.ACCESS_EXTERNAL_STYLESHEET, "");
             TRANSFORMER_FACTORY.set(tf);
         }
         return tf.newTransformer();
@@ -133,6 +147,8 @@ private static Transformer transformer(Source xsltSource) throws TransformerConf
         TransformerFactory tf = TRANSFORMER_FACTORY.get();
         if (tf == null) {
             tf = TransformerFactory.newInstance();
+            tf.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, "");
+            tf.setAttribute(XMLConstants.ACCESS_EXTERNAL_STYLESHEET, "");
             TRANSFORMER_FACTORY.set(tf);
         }
         return tf.newTransformer(xsltSource);
