diff --git a/javamelody-collector-server/pom.xml b/javamelody-collector-server/pom.xml
index 32e618127..03d8fe44e 100644
--- a/javamelody-collector-server/pom.xml
+++ b/javamelody-collector-server/pom.xml
@@ -87,7 +87,7 @@
 		<dependency>
 			<groupId>com.thoughtworks.xstream</groupId>
 			<artifactId>xstream</artifactId>
-			<version>1.4.2</version>
+			<version>1.4.9</version>
 		</dependency>
 	</dependencies>
 	<build>
diff --git a/javamelody-core/pom.xml b/javamelody-core/pom.xml
index 49852a0c7..415043095 100644
--- a/javamelody-core/pom.xml
+++ b/javamelody-core/pom.xml
@@ -165,7 +165,7 @@
 		<dependency>
 			<groupId>com.thoughtworks.xstream</groupId>
 			<artifactId>xstream</artifactId>
-			<version>1.4.2</version>
+			<version>1.4.9</version>
 			<optional>true</optional>
 		</dependency>
 		<dependency>
diff --git a/javamelody-core/src/main/java/net/bull/javamelody/TransportFormat.java b/javamelody-core/src/main/java/net/bull/javamelody/TransportFormat.java
index 30914d581..6bcb70226 100644
--- a/javamelody-core/src/main/java/net/bull/javamelody/TransportFormat.java
+++ b/javamelody-core/src/main/java/net/bull/javamelody/TransportFormat.java
@@ -36,6 +36,9 @@
 import com.thoughtworks.xstream.converters.collections.MapConverter;
 import com.thoughtworks.xstream.io.json.JsonHierarchicalStreamDriver;
 import com.thoughtworks.xstream.io.xml.CompactWriter;
+import com.thoughtworks.xstream.security.NoTypePermission;
+import com.thoughtworks.xstream.security.NullPermission;
+import com.thoughtworks.xstream.security.PrimitiveTypePermission;
 
 /**
  * Liste des formats de transport entre un serveur de collecte et une application monitorée
@@ -64,6 +67,9 @@
 	// classe interne pour qu'elle ne soit pas chargée avec la classe TransportFormat
 	// et qu'ainsi on ne dépende pas de XStream si on ne se sert pas du format xml
 	private static final class XmlIO {
+		private static final String PACKAGE_NAME = TransportFormat.class.getName().substring(0,
+				TransportFormat.class.getName().length()
+						- TransportFormat.class.getSimpleName().length() - 1);
 		private static final String XML_CHARSET_NAME = "utf-8";
 
 		private XmlIO() {
@@ -86,6 +92,16 @@ static void writeToXml(Serializable serializable, BufferedOutputStream bufferedO
 
 		static Object readFromXml(InputStream bufferedInput) throws IOException {
 			final XStream xstream = createXStream(false);
+			// see http://x-stream.github.io/security.html
+			// clear out existing permissions and set own ones
+			xstream.addPermission(NoTypePermission.NONE);
+			// allow some basics
+			xstream.addPermission(NullPermission.NULL);
+			xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);
+			xstream.allowTypesByWildcard(
+					new String[] { "java.lang.*", "java.util.*", "java.util.concurrent.*" });
+			// allow any type from the same package
+			xstream.allowTypesByWildcard(new String[] { PACKAGE_NAME + ".*" });
 			final InputStreamReader reader = new InputStreamReader(bufferedInput, XML_CHARSET_NAME);
 			try {
 				return xstream.fromXML(reader);
@@ -276,7 +292,7 @@ Serializable readSerializableFrom(InputStream input)
 			break;
 		case JSON:
 			// pas possible avec JsonHierarchicalStreamDriver
-			// (http://xstream.codehaus.org/json-tutorial.html)
+			// (http://x-stream.github.io/json-tutorial.html)
 			throw new UnsupportedOperationException();
 		default:
 			throw new IllegalStateException(toString());
