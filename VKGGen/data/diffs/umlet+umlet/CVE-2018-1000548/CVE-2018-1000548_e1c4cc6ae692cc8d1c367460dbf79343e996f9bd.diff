diff --git a/umlet-swing/src/main/java/com/baselet/control/config/Config.java b/umlet-swing/src/main/java/com/baselet/control/config/Config.java
index b6099de4..bf94dfe3 100644
--- a/umlet-swing/src/main/java/com/baselet/control/config/Config.java
+++ b/umlet-swing/src/main/java/com/baselet/control/config/Config.java
@@ -47,6 +47,7 @@ public static Config getInstance() {
 	private boolean enable_custom_elements = true;
 	private boolean show_grid = false;
 	private boolean start_maximized = false;
+	private boolean secureXmlProcessing = true;
 	private String defaultFontFamily = Font.SANS_SERIF;
 	private Integer defaultFontsize = 14;
 	private Integer propertiesPanelFontsize = 11;
@@ -163,6 +164,14 @@ public void setCheckForUpdates(boolean checkForUpdates) {
 		this.checkForUpdates = checkForUpdates;
 	}
 
+	public boolean isSecureXmlProcessing() {
+		return secureXmlProcessing;
+	}
+
+	public void setSecureXmlProcessing(boolean secureXmlProcessing) {
+		this.secureXmlProcessing = secureXmlProcessing;
+	}
+
 	public int getPrintPadding() {
 		return printPadding;
 	}
diff --git a/umlet-swing/src/main/java/com/baselet/control/config/handler/ConfigHandler.java b/umlet-swing/src/main/java/com/baselet/control/config/handler/ConfigHandler.java
index c4168bca..2aa05bb3 100644
--- a/umlet-swing/src/main/java/com/baselet/control/config/handler/ConfigHandler.java
+++ b/umlet-swing/src/main/java/com/baselet/control/config/handler/ConfigHandler.java
@@ -39,6 +39,7 @@
 	private static final String PDF_EXPORT_FONT_ITALIC = "pdf_export_font_italic";
 	private static final String PDF_EXPORT_FONT_BOLDITALIC = "pdf_export_font_bolditalic";
 	private static final String CHECK_FOR_UPDATES = "check_for_updates";
+	private static final String SECURE_XML_PROCESSING = "secure_xml_processing";
 	private static final String OPEN_FILE_HOME = "open_file_home";
 	private static final String SAVE_FILE_HOME = "save_file_home";
 	private static final String DEV_MODE = "dev_mode";
@@ -93,6 +94,7 @@ public static void loadConfig() {
 		cfg.setPdfExportFontItalic(getStringProperty(props, PDF_EXPORT_FONT_ITALIC, cfg.getPdfExportFontItalic()));
 		cfg.setPdfExportFontBoldItalic(getStringProperty(props, PDF_EXPORT_FONT_BOLDITALIC, cfg.getPdfExportFontBoldItalic()));
 		cfg.setCheckForUpdates(getBoolProperty(props, CHECK_FOR_UPDATES, cfg.isCheckForUpdates()));
+		cfg.setSecureXmlProcessing(getBoolProperty(props, SECURE_XML_PROCESSING, cfg.isSecureXmlProcessing()));
 		cfg.setOpenFileHome(getStringProperty(props, OPEN_FILE_HOME, cfg.getOpenFileHome()));
 		cfg.setSaveFileHome(getStringProperty(props, SAVE_FILE_HOME, cfg.getSaveFileHome()));
 		SharedConfig.getInstance().setDev_mode(getBoolProperty(props, DEV_MODE, SharedConfig.getInstance().isDev_mode()));
@@ -162,6 +164,7 @@ public static void saveConfig(BaseGUI gui) {
 			props.setProperty(PDF_EXPORT_FONT_ITALIC, cfg.getPdfExportFontItalic());
 			props.setProperty(PDF_EXPORT_FONT_BOLDITALIC, cfg.getPdfExportFontBoldItalic());
 			props.setProperty(CHECK_FOR_UPDATES, Boolean.toString(cfg.isCheckForUpdates()));
+			props.setProperty(SECURE_XML_PROCESSING, Boolean.toString(cfg.isSecureXmlProcessing()));
 			props.setProperty(OPEN_FILE_HOME, cfg.getOpenFileHome());
 			props.setProperty(SAVE_FILE_HOME, cfg.getSaveFileHome());
 			props.setProperty(DEV_MODE, Boolean.toString(SharedConfig.getInstance().isDev_mode()));
diff --git a/umlet-swing/src/main/java/com/baselet/diagram/io/DiagramFileHandler.java b/umlet-swing/src/main/java/com/baselet/diagram/io/DiagramFileHandler.java
index 2ff3b171..c23bc2a6 100644
--- a/umlet-swing/src/main/java/com/baselet/diagram/io/DiagramFileHandler.java
+++ b/umlet-swing/src/main/java/com/baselet/diagram/io/DiagramFileHandler.java
@@ -18,6 +18,7 @@
 import javax.swing.JFileChooser;
 import javax.swing.JOptionPane;
 import javax.swing.filechooser.FileFilter;
+import javax.xml.XMLConstants;
 import javax.xml.parsers.DocumentBuilder;
 import javax.xml.parsers.DocumentBuilderFactory;
 import javax.xml.parsers.SAXParser;
@@ -246,14 +247,21 @@ protected String createStringToBeSaved() {
 
 	public void doOpen() {
 		try {
-			SAXParser parser = SAXParserFactory.newInstance().newSAXParser();
+			SAXParserFactory spf = SAXParserFactory.newInstance();
+			if (Config.getInstance().isSecureXmlProcessing()) {
+				// use secure xml processing (see https://www.owasp.org/index.php/XML_External_Entity_(XXE)_Prevention_Cheat_Sheet#JAXP_DocumentBuilderFactory.2C_SAXParserFactory_and_DOM4J)
+				spf.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);
+				spf.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
+				spf.setFeature("http://xml.org/sax/features/external-general-entities", false);
+				spf.setFeature("http://xml.org/sax/features/external-parameter-entities", false);
+			}
+			SAXParser parser = spf.newSAXParser();
 			FileInputStream input = new FileInputStream(file);
 			InputHandler xmlhandler = new InputHandler(handler);
 			parser.parse(input, xmlhandler);
 			input.close();
 		} catch (Exception e) {
 			log.error("Cannot open the file: " + file.getAbsolutePath(), e);
-
 		}
 	}
 
