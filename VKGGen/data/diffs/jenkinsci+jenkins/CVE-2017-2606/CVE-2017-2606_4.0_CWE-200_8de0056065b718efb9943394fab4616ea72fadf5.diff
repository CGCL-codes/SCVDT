From 8de0056065b718efb9943394fab4616ea72fadf5 Mon Sep 17 00:00:00 2001
From: Daniel Beck <daniel-beck@users.noreply.github.com>
Date: Wed, 7 Dec 2016 18:32:59 +0100
Subject: [PATCH] [FIX SECURITY-380] Don't optimize permission check in
 getItems()

---
 core/src/main/java/jenkins/model/Jenkins.java |  6 --
 .../jenkins/security/Security380Test.java     | 95 +++++++++++++++++++
 2 files changed, 95 insertions(+), 6 deletions(-)
 create mode 100644 test/src/test/java/jenkins/security/Security380Test.java

diff --git a/core/src/main/java/jenkins/model/Jenkins.java b/core/src/main/java/jenkins/model/Jenkins.java
index a2d54fe19b7..470496b9ac3 100644
--- a/core/src/main/java/jenkins/model/Jenkins.java
+++ b/core/src/main/java/jenkins/model/Jenkins.java
@@ -136,7 +136,6 @@
 import hudson.security.AuthorizationStrategy;
 import hudson.security.BasicAuthenticationFilter;
 import hudson.security.FederatedLoginService;
-import hudson.security.FullControlOnceLoggedInAuthorizationStrategy;
 import hudson.security.HudsonFilter;
 import hudson.security.LegacyAuthorizationStrategy;
 import hudson.security.LegacySecurityRealm;
@@ -1479,11 +1478,6 @@ public String getFullDisplayName() {
      */
     @Exported(name="jobs")
     public List<TopLevelItem> getItems() {
-        if (authorizationStrategy instanceof AuthorizationStrategy.Unsecured ||
-            authorizationStrategy instanceof FullControlOnceLoggedInAuthorizationStrategy) {
-            return new ArrayList(items.values());
-        }
-
         List<TopLevelItem> viewableItems = new ArrayList<TopLevelItem>();
         for (TopLevelItem item : items.values()) {
             if (item.hasPermission(Item.READ))
diff --git a/test/src/test/java/jenkins/security/Security380Test.java b/test/src/test/java/jenkins/security/Security380Test.java
new file mode 100644
index 00000000000..5d3475df92a
--- /dev/null
+++ b/test/src/test/java/jenkins/security/Security380Test.java
@@ -0,0 +1,95 @@
+package jenkins.security;
+
+import com.gargoylesoftware.htmlunit.Page;
+import hudson.model.UnprotectedRootAction;
+import hudson.security.ACL;
+import hudson.security.FullControlOnceLoggedInAuthorizationStrategy;
+import hudson.util.HttpResponses;
+import jenkins.model.Jenkins;
+import org.junit.Assert;
+import org.junit.Rule;
+import org.junit.Test;
+import org.jvnet.hudson.test.Issue;
+import org.jvnet.hudson.test.JenkinsRule;
+import org.jvnet.hudson.test.TestExtension;
+import org.kohsuke.stapler.HttpResponse;
+
+public class Security380Test {
+
+    @Rule
+    public JenkinsRule j = new JenkinsRule();
+
+    @Issue("SECURITY-380")
+    @Test
+    public void testGetItemsWithoutAnonRead() throws Exception {
+        FullControlOnceLoggedInAuthorizationStrategy strategy = new FullControlOnceLoggedInAuthorizationStrategy();
+        strategy.setAllowAnonymousRead(false);
+        Jenkins.getInstance().setAuthorizationStrategy(strategy);
+
+        Jenkins.getInstance().setSecurityRealm(j.createDummySecurityRealm());
+
+        j.createFreeStyleProject();
+        ACL.impersonate(Jenkins.ANONYMOUS, new Runnable() {
+            @Override
+            public void run() {
+                Assert.assertEquals("no items", 0, Jenkins.getInstance().getItems().size());
+            }
+        });
+    }
+
+    @Issue("SECURITY-380")
+    @Test
+    public void testGetItems() throws Exception {
+        FullControlOnceLoggedInAuthorizationStrategy strategy = new FullControlOnceLoggedInAuthorizationStrategy();
+        strategy.setAllowAnonymousRead(true);
+        Jenkins.getInstance().setAuthorizationStrategy(strategy);
+
+        Jenkins.getInstance().setSecurityRealm(j.createDummySecurityRealm());
+
+        j.createFreeStyleProject();
+        ACL.impersonate(Jenkins.ANONYMOUS, new Runnable() {
+            @Override
+            public void run() {
+                Assert.assertEquals("one item", 1, Jenkins.getInstance().getItems().size());
+            }
+        });
+    }
+
+    @Issue("SECURITY-380")
+    @Test
+    public void testWithUnprotectedRootAction() throws Exception {
+        FullControlOnceLoggedInAuthorizationStrategy strategy = new FullControlOnceLoggedInAuthorizationStrategy();
+        strategy.setAllowAnonymousRead(false);
+        Jenkins.getInstance().setAuthorizationStrategy(strategy);
+
+        Jenkins.getInstance().setSecurityRealm(j.createDummySecurityRealm());
+        j.createFreeStyleProject();
+
+        JenkinsRule.WebClient wc = j.createWebClient();
+        Page page = wc.goTo("listJobs", "text/plain");
+        Assert.assertEquals("expect 0 items", "0", page.getWebResponse().getContentAsString().trim());
+    }
+
+    @TestExtension
+    public static class JobListingUnprotectedRootAction implements UnprotectedRootAction {
+
+        @Override
+        public String getIconFileName() {
+            return null;
+        }
+
+        @Override
+        public String getDisplayName() {
+            return null;
+        }
+
+        @Override
+        public String getUrlName() {
+            return "listJobs";
+        }
+
+        public HttpResponse doIndex() throws Exception {
+            return HttpResponses.plainText(Integer.toString(Jenkins.getInstance().getItems().size()));
+        }
+    }
+}
