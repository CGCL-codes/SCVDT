diff --git a/cli/src/main/java/hudson/cli/Connection.java b/cli/src/main/java/hudson/cli/Connection.java
index 165a6deb7e6..1c1ada471fd 100644
--- a/cli/src/main/java/hudson/cli/Connection.java
+++ b/cli/src/main/java/hudson/cli/Connection.java
@@ -23,6 +23,8 @@
  */
 package hudson.cli;
 
+import hudson.remoting.ClassFilter;
+import hudson.remoting.ObjectInputStreamEx;
 import hudson.remoting.SocketChannelStream;
 import org.apache.commons.codec.binary.Base64;
 
@@ -107,7 +109,8 @@ public void writeObject(Object o) throws IOException {
      * Receives an object sent by {@link #writeObject(Object)}
      */
     public <T> T readObject() throws IOException, ClassNotFoundException {
-        ObjectInputStream ois = new ObjectInputStream(in);
+        ObjectInputStream ois = new ObjectInputStreamEx(in,
+                getClass().getClassLoader(), ClassFilter.DEFAULT);
         return (T)ois.readObject();
     }
 
diff --git a/cli/src/test/java/hudson/cli/ConnectionTest.java b/cli/src/test/java/hudson/cli/ConnectionTest.java
index 167198a1823..35c5afe52f3 100644
--- a/cli/src/test/java/hudson/cli/ConnectionTest.java
+++ b/cli/src/test/java/hudson/cli/ConnectionTest.java
@@ -2,6 +2,7 @@
 
 import hudson.remoting.FastPipedInputStream;
 import hudson.remoting.FastPipedOutputStream;
+import org.codehaus.groovy.runtime.Security218;
 import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
@@ -69,4 +70,15 @@ public void run() {
             throw new Error("thread is still alive");
         }
     }
+
+    @Test
+    public void testSecurity218() throws Exception {
+        c1.writeObject(new Security218());
+        try {
+            c2.readObject();
+            fail();
+        } catch (SecurityException e) {
+            assertTrue(e.getMessage().contains(Security218.class.getName()));
+        }
+    }
 }
diff --git a/cli/src/test/java/org/codehaus/groovy/runtime/Security218.java b/cli/src/test/java/org/codehaus/groovy/runtime/Security218.java
new file mode 100644
index 00000000000..cc3dfeef041
--- /dev/null
+++ b/cli/src/test/java/org/codehaus/groovy/runtime/Security218.java
@@ -0,0 +1,11 @@
+package org.codehaus.groovy.runtime;
+
+import java.io.Serializable;
+
+/**
+ * Test payload in a prohibited package name.
+ *
+ * @author Kohsuke Kawaguchi
+ */
+public class Security218 implements Serializable {
+}
diff --git a/core/src/main/java/hudson/cli/declarative/MethodBinder.java b/core/src/main/java/hudson/cli/declarative/MethodBinder.java
index 6b137727588..f9b8885e8ed 100644
--- a/core/src/main/java/hudson/cli/declarative/MethodBinder.java
+++ b/core/src/main/java/hudson/cli/declarative/MethodBinder.java
@@ -30,10 +30,12 @@
 import org.kohsuke.args4j.CmdLineException;
 import org.kohsuke.args4j.CmdLineParser;
 import org.kohsuke.args4j.Option;
+import org.kohsuke.args4j.spi.FieldSetter;
 import org.kohsuke.args4j.spi.Setter;
 import org.kohsuke.args4j.spi.OptionHandler;
 
 import java.lang.annotation.Annotation;
+import java.lang.reflect.AnnotatedElement;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 import java.util.List;
@@ -79,6 +81,16 @@ public Class getType() {
                 public boolean isMultiValued() {
                     return false;
                 }
+
+                @Override
+                public FieldSetter asFieldSetter() {
+                    return null;
+                }
+
+                @Override
+                public AnnotatedElement asAnnotatedElement() {
+                    return p;
+                }
             };
             Option option = p.annotation(Option.class);
             if (option!=null) {
@@ -148,5 +160,10 @@ public boolean multiValued() {
         public Class<? extends Annotation> annotationType() {
             return base.annotationType();
         }
+
+        @Override
+        public boolean hidden() {
+            return base.hidden();
+        }
     }
 }
diff --git a/core/src/main/java/hudson/util/ReflectionUtils.java b/core/src/main/java/hudson/util/ReflectionUtils.java
index fb914acf531..f491b59d875 100644
--- a/core/src/main/java/hudson/util/ReflectionUtils.java
+++ b/core/src/main/java/hudson/util/ReflectionUtils.java
@@ -28,6 +28,7 @@
 
 import java.beans.PropertyDescriptor;
 import java.lang.annotation.Annotation;
+import java.lang.reflect.AnnotatedElement;
 import java.lang.reflect.Field;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
@@ -122,7 +123,7 @@ public int size() {
         }
     }
 
-    public static final class Parameter {
+    public static final class Parameter implements AnnotatedElement {
         private final MethodInfo parent;
         private final int index;
 
@@ -180,6 +181,26 @@ public String name() {
                 return names[index];
             return null;
         }
+
+        @Override
+        public boolean isAnnotationPresent(Class<? extends Annotation> type) {
+            return annotation(type)!=null;
+        }
+
+        @Override
+        public <T extends Annotation> T getAnnotation(Class<T> type) {
+            return annotation(type);
+        }
+
+        @Override
+        public Annotation[] getAnnotations() {
+            return annotations();
+        }
+
+        @Override
+        public Annotation[] getDeclaredAnnotations() {
+            return annotations();
+        }
     }
 
     /**
diff --git a/pom.xml b/pom.xml
index cdd35ea1966..edc90a545dd 100644
--- a/pom.xml
+++ b/pom.xml
@@ -174,7 +174,7 @@ THE SOFTWARE.
       <dependency>
         <groupId>org.jenkins-ci.main</groupId>
         <artifactId>remoting</artifactId>
-        <version>2.47</version>
+        <version>2.53-20151108.042522-3</version>
       </dependency>
 
       <dependency>
diff --git a/test/src/test/groovy/hudson/cli/CLIActionTest.groovy b/test/src/test/groovy/hudson/cli/CLIActionTest.groovy
index fce2f9fe629..99b4437e601 100644
--- a/test/src/test/groovy/hudson/cli/CLIActionTest.groovy
+++ b/test/src/test/groovy/hudson/cli/CLIActionTest.groovy
@@ -1,8 +1,10 @@
 package hudson.cli
 
+import hudson.Functions
 import hudson.remoting.Channel
-import hudson.security.FullControlOnceLoggedInAuthorizationStrategy;
-
+import hudson.security.FullControlOnceLoggedInAuthorizationStrategy
+import org.codehaus.groovy.runtime.Security218
+import org.junit.Assert;
 import org.junit.Rule
 import org.junit.Test
 import org.jvnet.hudson.test.JenkinsRule
@@ -12,6 +14,8 @@ import org.jvnet.hudson.test.recipes.PresetData.DataSet;
 import java.util.concurrent.ExecutorService
 import java.util.concurrent.Executors
 
+import static org.junit.Assert.fail
+
 /**
  * @author Kohsuke Kawaguchi
  * @author christ66
@@ -37,6 +41,35 @@ class CLIActionTest {
         }
     }
 
+    @Test
+    public void security218() throws Exception {
+        pool = Executors.newCachedThreadPool()
+        try {
+            FullDuplexHttpStream con = new FullDuplexHttpStream(new URL(j.URL, "cli"));
+            Channel ch = new Channel("test connection", pool, con.inputStream, con.outputStream);
+            ch.call(new Security218());
+            fail("Expected the call to be rejected");
+        } catch (Exception e) {
+            assert Functions.printThrowable(e).contains("Rejected: "+Security218.class.name);
+        } finally {
+            pool.shutdown();
+        }
+
+    }
+
+    @Test
+    public void security218_take2() throws Exception {
+        pool = Executors.newCachedThreadPool()
+        try {
+            new CLI(j.URL).execute([new Security218()]);
+            fail("Expected the call to be rejected");
+        } catch (Exception e) {
+            assert Functions.printThrowable(e).contains("Rejected: "+Security218.class.name);
+        } finally {
+            pool.shutdown();
+        }
+    }
+
     //TODO: Integrate the tests into existing ones in CLIActionTest2
     @Test
     @PresetData(DataSet.NO_ANONYMOUS_READACCESS)
diff --git a/test/src/test/java/jenkins/security/Security218Test.java b/test/src/test/java/jenkins/security/Security218Test.java
new file mode 100644
index 00000000000..7d4facc44a0
--- /dev/null
+++ b/test/src/test/java/jenkins/security/Security218Test.java
@@ -0,0 +1,120 @@
+package jenkins.security;
+
+import hudson.model.Node.Mode;
+import hudson.model.Slave;
+import hudson.remoting.Channel;
+import hudson.remoting.Which;
+import hudson.slaves.DumbSlave;
+import hudson.slaves.JNLPLauncher;
+import hudson.slaves.RetentionStrategy;
+import org.apache.tools.ant.util.JavaEnvUtils;
+import org.codehaus.groovy.runtime.Security218;
+import org.junit.After;
+import org.junit.Rule;
+import org.junit.Test;
+import org.jvnet.hudson.test.Issue;
+import org.jvnet.hudson.test.JenkinsRule;
+
+import java.io.Serializable;
+import java.util.Collections;
+
+import static org.junit.Assert.*;
+
+/**
+ * @author Kohsuke Kawaguchi
+ */
+@Issue("SECURITY-218")
+public class Security218Test implements Serializable {
+    @Rule
+    public transient JenkinsRule j = new JenkinsRule();
+
+    /**
+     * JNLP slave.
+     */
+    private transient Process jnlp;
+
+    /**
+     * Makes sure SECURITY-218 fix also applies to slaves.
+     *
+     * This test is for regular dumb slave
+     */
+    @Test
+    public void dumbSlave() throws Exception {
+        check(j.createOnlineSlave());
+    }
+
+    /**
+     * Makes sure SECURITY-218 fix also applies to slaves.
+     *
+     * This test is for JNLP slave
+     */
+    @Test
+    public void jnlpSlave() throws Exception {
+        DumbSlave s = createJnlpSlave("test");
+        launchJnlpSlave(s);
+        check(s);
+    }
+
+    /**
+     * The attack scenario here is that a master sends a normal command to a slave and a slave
+     * inserts a malicious response.
+     */
+    @SuppressWarnings("ConstantConditions")
+    private void check(DumbSlave s) throws Exception {
+        try {
+            s.getComputer().getChannel().call(new MasterToSlaveCallable<Object, RuntimeException>() {
+                public Object call() {
+                    return new Security218();
+                }
+            });
+            fail("Expected the connection to die");
+        } catch (SecurityException e) {
+            assertTrue(e.getMessage().contains(Security218.class.getName()));
+        }
+    }
+
+// TODO: reconcile this duplicate with JnlpAccessWithSecuredHudsonTest
+    /**
+     * Creates a new slave that needs to be launched via JNLP.
+     *
+     * @see #launchJnlpSlave(Slave)
+     */
+    public DumbSlave createJnlpSlave(String name) throws Exception {
+        DumbSlave s = new DumbSlave(name, "", System.getProperty("java.io.tmpdir") + '/' + name, "2", Mode.NORMAL, "", new JNLPLauncher(), RetentionStrategy.INSTANCE, Collections.EMPTY_LIST);
+        j.jenkins.addNode(s);
+        return s;
+    }
+
+// TODO: reconcile this duplicate with JnlpAccessWithSecuredHudsonTest
+    /**
+     * Launch a JNLP slave created by {@link #createJnlpSlave(String)}
+     */
+    public Channel launchJnlpSlave(Slave slave) throws Exception {
+        j.createWebClient().goTo("computer/"+slave.getNodeName()+"/slave-agent.jnlp?encrypt=true", "application/octet-stream");
+        String secret = slave.getComputer().getJnlpMac();
+        // To watch it fail: secret = secret.replace('1', '2');
+        ProcessBuilder pb = new ProcessBuilder(JavaEnvUtils.getJreExecutable("java"),
+                "-jar", Which.jarFile(hudson.remoting.Launcher.class).getAbsolutePath(),
+                "-jnlpUrl", j.getURL() + "computer/"+slave.getNodeName()+"/slave-agent.jnlp", "-secret", secret);
+
+        pb.inheritIO();
+        System.err.println("Running: " + pb.command());
+
+        jnlp = pb.start();
+
+        for (int i = 0; i < /* one minute */600; i++) {
+            if (slave.getComputer().isOnline()) {
+                return slave.getComputer().getChannel();
+            }
+            Thread.sleep(100);
+        }
+
+        throw new AssertionError("JNLP slave agent failed to connect");
+    }
+
+    @After
+    public void tearDown() {
+        if (jnlp !=null)
+            jnlp.destroy();
+    }
+}
diff --git a/test/src/test/java/org/codehaus/groovy/runtime/Security218.java b/test/src/test/java/org/codehaus/groovy/runtime/Security218.java
new file mode 100644
index 00000000000..89cebafc815
--- /dev/null
+++ b/test/src/test/java/org/codehaus/groovy/runtime/Security218.java
@@ -0,0 +1,21 @@
+package org.codehaus.groovy.runtime;
+
+import org.jenkinsci.remoting.RoleChecker;
+
+import java.io.Serializable;
+
+/**
+ * Test payload in a prohibited package name.
+ *
+ * @author Kohsuke Kawaguchi
+ */
+public class Security218 implements Serializable, hudson.remoting.Callable<Void,RuntimeException> {
+    @Override
+    public Void call() throws RuntimeException {
+        return null;
+    }
+
+    @Override
+    public void checkRoles(RoleChecker checker) throws SecurityException {
+    }
+}
