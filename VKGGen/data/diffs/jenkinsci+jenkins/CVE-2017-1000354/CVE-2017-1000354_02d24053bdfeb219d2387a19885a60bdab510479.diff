diff --git a/core/src/main/java/hudson/cli/ClientAuthenticationCache.java b/core/src/main/java/hudson/cli/ClientAuthenticationCache.java
index b00b816d37d..7ff2e3a29dc 100644
--- a/core/src/main/java/hudson/cli/ClientAuthenticationCache.java
+++ b/core/src/main/java/hudson/cli/ClientAuthenticationCache.java
@@ -1,5 +1,6 @@
 package hudson.cli;
 
+import com.google.common.annotations.VisibleForTesting;
 import hudson.FilePath;
 import hudson.remoting.Channel;
 import hudson.util.Secret;
@@ -17,6 +18,9 @@
 import java.io.OutputStream;
 import java.io.Serializable;
 import java.util.Properties;
+import java.util.logging.Level;
+import java.util.logging.Logger;
+import jenkins.security.HMACConfidentialKey;
 
 /**
  * Represents the authentication credential store of the CLI client.
@@ -29,6 +33,10 @@
  * @since 1.351
  */
 public class ClientAuthenticationCache implements Serializable {
+
+    private static final HMACConfidentialKey MAC = new HMACConfidentialKey(ClientAuthenticationCache.class, "MAC");
+    private static final Logger LOGGER = Logger.getLogger(ClientAuthenticationCache.class.getName());
+
     /**
      * Where the store should be placed.
      */
@@ -37,7 +45,8 @@
     /**
      * Loaded contents of the store.
      */
-    private final Properties props = new Properties();
+    @VisibleForTesting
+    final Properties props = new Properties();
 
     public ClientAuthenticationCache(Channel channel) throws IOException, InterruptedException {
         store = (channel==null ? FilePath.localChannel :  channel).call(new MasterToSlaveCallable<FilePath, IOException>() {
@@ -67,14 +76,32 @@ public FilePath call() throws IOException {
      */
     public Authentication get() {
         Jenkins h = Jenkins.getInstance();
-        Secret userName = Secret.decrypt(props.getProperty(getPropertyKey()));
-        if (userName==null) return Jenkins.ANONYMOUS; // failed to decrypt
+        String val = props.getProperty(getPropertyKey());
+        if (val == null) {
+            LOGGER.finer("No stored CLI authentication");
+            return Jenkins.ANONYMOUS;
+        }
+        Secret oldSecret = Secret.decrypt(val);
+        if (oldSecret != null) {
+            LOGGER.log(Level.FINE, "Ignoring insecure stored CLI authentication for {0}", oldSecret.getPlainText());
+            return Jenkins.ANONYMOUS;
+        }
+        int idx = val.lastIndexOf(':');
+        if (idx == -1) {
+            LOGGER.log(Level.FINE, "Ignoring malformed stored CLI authentication: {0}", val);
+            return Jenkins.ANONYMOUS;
+        }
+        String username = val.substring(0, idx);
+        if (!MAC.checkMac(username, val.substring(idx + 1))) {
+            LOGGER.log(Level.FINE, "Ignoring stored CLI authentication due to MAC mismatch: {0}", val);
+            return Jenkins.ANONYMOUS;
+        }
         try {
-            UserDetails u = h.getSecurityRealm().loadUserByUsername(userName.getPlainText());
+            UserDetails u = h.getSecurityRealm().loadUserByUsername(username);
+            LOGGER.log(Level.FINER, "Loaded stored CLI authentication for {0}", username);
             return new UsernamePasswordAuthenticationToken(u.getUsername(), "", u.getAuthorities());
-        } catch (AuthenticationException e) {
-            return Jenkins.ANONYMOUS;
-        } catch (DataAccessException e) {
+        } catch (AuthenticationException | DataAccessException x) {
+            LOGGER.log(Level.FINE, "Stored CLI authentication did not correspond to a valid user: " + username, x);
             return Jenkins.ANONYMOUS;
         }
     }
@@ -82,7 +109,8 @@ public Authentication get() {
     /**
      * Computes the key that identifies this Hudson among other Hudsons that the user has a credential for.
      */
-    private String getPropertyKey() {
+    @VisibleForTesting
+    String getPropertyKey() {
         String url = Jenkins.getInstance().getRootUrl();
         if (url!=null)  return url;
         return Secret.fromString("key").toString();
@@ -97,7 +125,8 @@ public void set(Authentication a) throws IOException, InterruptedException {
         // make sure that this security realm is capable of retrieving the authentication by name,
         // as it's not required.
         UserDetails u = h.getSecurityRealm().loadUserByUsername(a.getName());
-        props.setProperty(getPropertyKey(), Secret.fromString(u.getUsername()).getEncryptedValue());
+        String username = u.getUsername();
+        props.setProperty(getPropertyKey(), username + ":" + MAC.mac(username));
 
         save();
     }
@@ -110,7 +139,8 @@ public void remove() throws IOException, InterruptedException {
             save();
     }
 
-    private void save() throws IOException, InterruptedException {
+    @VisibleForTesting
+    void save() throws IOException, InterruptedException {
         OutputStream os = store.write();
         try {
             props.store(os,"Credential store");
diff --git a/test/src/test/java/hudson/cli/ClientAuthenticationCacheTest.java b/test/src/test/java/hudson/cli/ClientAuthenticationCacheTest.java
new file mode 100644
index 00000000000..86ecbbdd20b
--- /dev/null
+++ b/test/src/test/java/hudson/cli/ClientAuthenticationCacheTest.java
@@ -0,0 +1,115 @@
+/*
+ * The MIT License
+ *
+ * Copyright 2017 CloudBees, Inc.
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a copy
+ * of this software and associated documentation files (the "Software"), to deal
+ * in the Software without restriction, including without limitation the rights
+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+ * copies of the Software, and to permit persons to whom the Software is
+ * furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in
+ * all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+ * THE SOFTWARE.
+ */
+
+package hudson.cli;
+
+import com.google.common.collect.Lists;
+import hudson.Launcher;
+import hudson.security.FullControlOnceLoggedInAuthorizationStrategy;
+import hudson.util.Secret;
+import hudson.util.StreamTaskListener;
+import java.io.ByteArrayOutputStream;
+import java.io.File;
+import java.util.Arrays;
+import java.util.List;
+import javax.annotation.CheckForNull;
+import org.apache.commons.io.FileUtils;
+import org.apache.commons.io.output.TeeOutputStream;
+import static org.hamcrest.Matchers.containsString;
+import org.junit.Test;
+import static org.junit.Assert.*;
+import org.junit.Ignore;
+import org.junit.Rule;
+import org.junit.rules.TemporaryFolder;
+import org.jvnet.hudson.test.Issue;
+import org.jvnet.hudson.test.JenkinsRule;
+
+public class ClientAuthenticationCacheTest {
+
+    @Rule
+    public JenkinsRule r = new JenkinsRule();
+
+    @Rule
+    public TemporaryFolder tmp = new TemporaryFolder();
+
+    // TODO 2.19.x+ use LoggerRule on ClientAuthenticationCache
+
+    @Issue("SECURITY-466")
+    @Test
+    public void login() throws Exception {
+        File jar = tmp.newFile("jenkins-cli.jar");
+        FileUtils.copyURLToFile(r.jenkins.getJnlpJars("jenkins-cli.jar").getURL(), jar);
+        r.jenkins.setSecurityRealm(r.createDummySecurityRealm());
+        r.jenkins.setAuthorizationStrategy(new FullControlOnceLoggedInAuthorizationStrategy());
+        assertCLI(0, "Authenticated as: anonymous", jar, "who-am-i");
+        assertCLI(0, null, jar, "login", "--username", "dev", "--password", "dev");
+        try {
+            assertCLI(0, "Authenticated as: dev", jar, "who-am-i");
+            ClientAuthenticationCache cache = new ClientAuthenticationCache(null);
+            String val = cache.props.getProperty(cache.getPropertyKey());
+            assertNotNull(val);
+            System.err.println(val);
+            Secret s = Secret.decrypt(val);
+            if (s != null && s.getPlainText().equals("dev")) {
+                val = Secret.fromString("admin").getEncryptedValue();
+            }
+            System.err.println(val);
+            val = val.replace("dev", "admin");
+            System.err.println(val);
+            cache.props.put(cache.getPropertyKey(), val);
+            cache.save();
+            assertCLI(0, "Authenticated as: anonymous", jar, "who-am-i");
+        } finally {
+            assertCLI(0, null, jar, "logout");
+        }
+    }
+
+    @Ignore("TODO fails unless CLICommand.main patched to replace (auth==Jenkins.ANONYMOUS) with (auth instanceof AnonymousAuthenticationToken), not just (Jenkins.ANONYMOUS.equals(auth)), since SecurityFilters.groovy sets userAttribute='anonymous,' so UserAttributeEditor.setAsText configures AnonymousProcessingFilter with a token with an empty authority which fails AbstractAuthenticationToken.equals")
+    @Test
+    public void overHttp() throws Exception {
+        File jar = tmp.newFile("jenkins-cli.jar");
+        FileUtils.copyURLToFile(r.jenkins.getJnlpJars("jenkins-cli.jar").getURL(), jar);
+        r.jenkins.setSecurityRealm(r.createDummySecurityRealm());
+        r.jenkins.setAuthorizationStrategy(new FullControlOnceLoggedInAuthorizationStrategy());
+        r.jenkins.setSlaveAgentPort(-1);
+        assertCLI(0, "Authenticated as: anonymous", jar, "who-am-i");
+        assertCLI(0, null, jar, "login", "--username", "admin", "--password", "admin");
+        try {
+            assertCLI(0, "Authenticated as: admin", jar, "who-am-i");
+        } finally {
+            assertCLI(0, null, jar, "logout");
+        }
+    }
+
+    private void assertCLI(int code, @CheckForNull String output, File jar, String... args) throws Exception {
+        List<String> commands = Lists.newArrayList("java", "-jar", jar.getAbsolutePath(), "-s", r.getURL().toString(), "-noKeyAuth");
+        commands.addAll(Arrays.asList(args));
+        ByteArrayOutputStream baos = new ByteArrayOutputStream();
+        assertEquals(code, new Launcher.LocalLauncher(StreamTaskListener.fromStderr()).launch().cmds(commands).stdout(new TeeOutputStream(System.out, baos)).stderr(System.err).join());
+        if (output != null) {
+            assertThat(baos.toString(), containsString(output));
+        }
+    }
+
+}
