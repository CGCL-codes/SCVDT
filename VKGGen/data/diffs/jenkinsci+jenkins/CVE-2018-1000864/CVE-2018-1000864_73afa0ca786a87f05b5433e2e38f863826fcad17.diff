diff --git a/core/src/main/java/hudson/scheduler/CronTab.java b/core/src/main/java/hudson/scheduler/CronTab.java
index 120b8bc2a16..77118499ad7 100644
--- a/core/src/main/java/hudson/scheduler/CronTab.java
+++ b/core/src/main/java/hudson/scheduler/CronTab.java
@@ -356,6 +356,14 @@ public Calendar ceil(Calendar cal) {
                     continue OUTER;
                 } else {
                     f.setTo(cal,next);
+                    //check if value was actually set
+                    if (f.valueOf(cal) != next) {
+                        // we need to roll over to the next field.
+                        f.rollUp(cal, 1);
+                        f.setTo(cal,f.first(this));
+                        // since higher order field is affected by this, we need to restart from all over
+                        continue OUTER;
+                    }
                     if (f.redoAdjustmentIfModified)
                         continue OUTER; // when we modify DAY_OF_MONTH and DAY_OF_WEEK, do it all over from the top
                 }
diff --git a/core/src/test/java/hudson/scheduler/CronTabTest.java b/core/src/test/java/hudson/scheduler/CronTabTest.java
index cae0fdc7eda..66894c35464 100644
--- a/core/src/test/java/hudson/scheduler/CronTabTest.java
+++ b/core/src/test/java/hudson/scheduler/CronTabTest.java
@@ -321,4 +321,10 @@ public int next(int n) {
         new CronTab("0 0 31 7 *").floor(cal); // would infinite loop
     }
 
+    @Issue("SECURITY-1193")
+    @Test(timeout = 1000L) public void testCeilLongMonths() throws Exception {
+        Calendar cal = Calendar.getInstance();
+        cal.set(Calendar.MONTH, Calendar.NOVEMBER);
+        new CronTab("0 0 31 * *").ceil(cal); // would infinite loop
+    }
 }
