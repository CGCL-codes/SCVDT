diff --git a/core/src/main/java/hudson/FilePath.java b/core/src/main/java/hudson/FilePath.java
index 8f112f1886f..25db871436b 100644
--- a/core/src/main/java/hudson/FilePath.java
+++ b/core/src/main/java/hudson/FilePath.java
@@ -79,6 +79,7 @@
 import java.net.URLConnection;
 import java.nio.file.Files;
 import java.nio.file.InvalidPathException;
+import java.nio.file.Path;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Comparator;
@@ -2949,5 +2950,60 @@ private File mkdirsE(File dir) throws IOException {
         return IOUtils.mkdirs(dir);
     }
 
+    /**
+     * Check if the relative child is really a descendant after symlink resolution if any.
+     *
+     * TODO un-restrict it in a weekly after the patch
+     */
+    @Restricted(NoExternalUse.class)
+    public boolean isDescendant(@Nonnull String potentialChildRelativePath) throws IOException, InterruptedException {
+        return act(new IsDescendant(potentialChildRelativePath));
+    }
+
+    private class IsDescendant extends SecureFileCallable<Boolean> {
+        private static final long serialVersionUID = 1L;
+        private String potentialChildRelativePath;
+
+        private IsDescendant(@Nonnull String potentialChildRelativePath){
+            this.potentialChildRelativePath = potentialChildRelativePath;
+        }
+
+        @Override
+        public Boolean invoke(@Nonnull File parentFile, @Nonnull VirtualChannel channel) throws IOException, InterruptedException {
+            if (new File(potentialChildRelativePath).isAbsolute()) {
+                throw new IllegalArgumentException("Only a relative path is supported, the given path is absolute: " + potentialChildRelativePath);
+            }
+
+            Path parent = parentFile.getAbsoluteFile().toPath().normalize();
+
+            String remainingPath = potentialChildRelativePath;
+            File currentFile = parentFile;
+            while (!remainingPath.isEmpty()) {
+                File directChild = this.getDirectChild(currentFile, remainingPath);
+                File childUsingFullPath = new File(currentFile, remainingPath);
+                remainingPath = childUsingFullPath.getAbsolutePath().substring(directChild.getAbsolutePath().length());
+                
+                File childFileSymbolic = Util.resolveSymlinkToFile(directChild);
+                if (childFileSymbolic == null) {
+                    currentFile = directChild;
+                } else {
+                    currentFile = childFileSymbolic;
+                }
+            }
+
+            //TODO could be refactored using Util#isDescendant(File, File) from 2.80+
+            Path child = currentFile.getAbsoluteFile().toPath().normalize();
+            return child.startsWith(parent);
+        }
+
+        private @CheckForNull File getDirectChild(File parentFile, String childPath){
+            File current = new File(parentFile, childPath);
+            while (current != null && !parentFile.equals(current.getParentFile())) {
+                current = current.getParentFile();
+            }
+            return current;
+        }
+    }
+
     private static final SoloFilePathFilter UNRESTRICTED = SoloFilePathFilter.wrap(FilePathFilter.UNRESTRICTED);
 }
diff --git a/core/src/main/java/hudson/model/FileParameterValue.java b/core/src/main/java/hudson/model/FileParameterValue.java
index 85bfb043874..f911927285a 100644
--- a/core/src/main/java/hudson/model/FileParameterValue.java
+++ b/core/src/main/java/hudson/model/FileParameterValue.java
@@ -36,6 +36,7 @@
 import java.io.UnsupportedEncodingException;
 import java.nio.file.Files;
 import java.nio.file.InvalidPathException;
+import java.nio.file.Path;
 import javax.servlet.ServletException;
 
 import org.apache.commons.fileupload.FileItem;
@@ -45,6 +46,8 @@
 import org.apache.commons.io.FilenameUtils;
 import org.apache.commons.io.IOUtils;
 import org.apache.commons.lang.StringUtils;
+import org.kohsuke.accmod.Restricted;
+import org.kohsuke.accmod.restrictions.NoExternalUse;
 import org.kohsuke.stapler.DataBoundConstructor;
 import org.kohsuke.stapler.StaplerRequest;
 import org.kohsuke.stapler.StaplerResponse;
@@ -61,6 +64,16 @@
  * @author Kohsuke Kawaguchi
  */
 public class FileParameterValue extends ParameterValue {
+    private static final String FOLDER_NAME = "fileParameters";
+
+    /**
+     * Escape hatch for SECURITY-1074, fileParameter used to escape their expected folder.
+     * It's not recommended to enable for security reasons. That option is only present for backward compatibility.
+     */
+    @Restricted(NoExternalUse.class)
+    public static /* Script Console modifiable */ boolean ALLOW_FOLDER_TRAVERSAL_OUTSIDE_WORKSPACE = 
+            Boolean.getBoolean(FileParameterValue.class.getName() + ".allowFolderTraversalOutsideWorkspace");
+
     private transient final FileItem file;
 
     /**
@@ -70,6 +83,9 @@
 
     /**
      * Overrides the location in the build to place this file. Initially set to {@link #getName()}
+     * The location could be directly the filename or also a hierarchical path. 
+     * The intermediate folders will be created automatically.
+     * Take care that no escape from the current directory is allowed and will result in the failure of the build.
      */
     private String location;
 
@@ -142,7 +158,16 @@ public BuildWrapper createBuildWrapper(AbstractBuild<?,?> build) {
             public Environment setUp(AbstractBuild build, Launcher launcher, BuildListener listener) throws IOException, InterruptedException {
             	if (!StringUtils.isEmpty(location) && !StringUtils.isEmpty(file.getName())) {
             	    listener.getLogger().println("Copying file to "+location);
-                    FilePath locationFilePath = build.getWorkspace().child(location);
+                    FilePath ws = build.getWorkspace();
+                    if (ws == null) {
+                        throw new IllegalStateException("The workspace should be created when setUp method is called");
+                    }
+                    if (!ALLOW_FOLDER_TRAVERSAL_OUTSIDE_WORKSPACE && !ws.isDescendant(location)) {
+                        listener.error("Rejecting file path escaping base directory with relative path: " + location);
+                        // force the build to fail
+                        return null;
+                    }
+                    FilePath locationFilePath = ws.child(location);
                     locationFilePath.getParent().mkdirs();
             	    locationFilePath.copyFrom(file);
                     locationFilePath.copyTo(new FilePath(getLocationUnderBuild(build)));
@@ -204,6 +229,18 @@ public void doDynamic(StaplerRequest request, StaplerResponse response) throws S
         if (("/" + originalFileName).equals(request.getRestOfPath())) {
             AbstractBuild build = (AbstractBuild)request.findAncestor(AbstractBuild.class).getObject();
             File fileParameter = getLocationUnderBuild(build);
+
+            if (!ALLOW_FOLDER_TRAVERSAL_OUTSIDE_WORKSPACE) {
+                File fileParameterFolder = getFileParameterFolderUnderBuild(build);
+
+                //TODO can be replaced by Util#isDescendant in 2.80+
+                Path child = fileParameter.getAbsoluteFile().toPath().normalize();
+                Path parent = fileParameterFolder.getAbsoluteFile().toPath().normalize();
+                if (!child.startsWith(parent)) {
+                    throw new IllegalStateException("The fileParameter tried to escape the expected folder: " + location);
+                }
+            }
+
             if (fileParameter.isFile()) {
                 try (InputStream data = Files.newInputStream(fileParameter.toPath())) {
                     long lastModified = fileParameter.lastModified();
@@ -227,7 +264,11 @@ public void doDynamic(StaplerRequest request, StaplerResponse response) throws S
      * @return the location to store the file parameter
      */
     private File getLocationUnderBuild(AbstractBuild build) {
-        return new File(build.getRootDir(), "fileParameters/" + location);
+        return new File(getFileParameterFolderUnderBuild(build), location);
+    }
+
+    private File getFileParameterFolderUnderBuild(AbstractBuild<?, ?> build){
+        return new File(build.getRootDir(), FOLDER_NAME);
     }
 
     /**
diff --git a/test/src/test/java/hudson/model/FileParameterValueTest.java b/test/src/test/java/hudson/model/FileParameterValueTest.java
new file mode 100644
index 00000000000..911f88431b2
--- /dev/null
+++ b/test/src/test/java/hudson/model/FileParameterValueTest.java
@@ -0,0 +1,270 @@
+/*
+ * The MIT License
+ *
+ * Copyright (c) 2018, CloudBees, Inc
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a copy
+ * of this software and associated documentation files (the "Software"), to deal
+ * in the Software without restriction, including without limitation the rights
+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+ * copies of the Software, and to permit persons to whom the Software is
+ * furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in
+ * all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+ * THE SOFTWARE.
+ */
+package hudson.model;
+
+import com.gargoylesoftware.htmlunit.Page;
+import com.gargoylesoftware.htmlunit.html.HtmlPage;
+import hudson.FilePath;
+import hudson.Functions;
+import org.apache.commons.io.FileUtils;
+import org.junit.Assume;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.rules.TemporaryFolder;
+import org.jvnet.hudson.test.Issue;
+import org.jvnet.hudson.test.JenkinsRule;
+import org.kohsuke.stapler.Function;
+
+import java.io.File;
+import java.nio.charset.StandardCharsets;
+import java.util.Arrays;
+import java.util.Collections;
+
+import static org.hamcrest.CoreMatchers.allOf;
+import static org.hamcrest.CoreMatchers.containsString;
+import static org.hamcrest.CoreMatchers.equalTo;
+import static org.hamcrest.CoreMatchers.not;
+import static org.junit.Assert.assertThat;
+import static org.junit.Assert.assertTrue;
+
+public class FileParameterValueTest {
+    @Rule
+    public JenkinsRule j = new JenkinsRule();
+    
+    @Rule
+    public TemporaryFolder tmp = new TemporaryFolder();
+    
+    @Test
+    @Issue("SECURITY-1074")
+    public void fileParameter_cannotCreateFile_outsideOfBuildFolder() throws Exception {
+        // you can test the behavior before the correction by setting FileParameterValue.ALLOW_FOLDER_TRAVERSAL_OUTSIDE_WORKSPACE to true
+        
+        FilePath root = j.jenkins.getRootPath();
+        
+        FreeStyleProject p = j.createFreeStyleProject();
+        p.addProperty(new ParametersDefinitionProperty(Collections.singletonList(
+                new FileParameterDefinition("../../../../../root-level.txt", null)
+        )));
+        
+        assertThat(root.child("root-level.txt").exists(), equalTo(false));
+        
+        String uploadedContent = "test-content";
+        File uploadedFile = tmp.newFile();
+        FileUtils.write(uploadedFile, uploadedContent);
+        
+        FreeStyleBuild build = p.scheduleBuild2(0, new Cause.UserIdCause(), new ParametersAction(
+                new FileParameterValue("../../../../../root-level.txt", uploadedFile, "uploaded-file.txt")
+        )).get();
+    
+        assertThat(build.getResult(), equalTo(Result.FAILURE));
+        assertThat(root.child("root-level.txt").exists(), equalTo(false));
+    
+        // ensure also the file is not reachable by request
+        JenkinsRule.WebClient wc = j.createWebClient();
+        wc.getOptions().setThrowExceptionOnFailingStatusCode(false);
+    
+        checkUrlNot200AndNotContains(wc, build.getUrl() + "parameters/parameter/..%2F..%2F..%2F..%2F..%2Froot-level.txt/uploaded-file.txt", uploadedContent);
+        // encoding dots
+        checkUrlNot200AndNotContains(wc, build.getUrl() + "parameters/parameter/%2E%2E%2F%2E%2E%2F%2E%2E%2F%2E%2E%2F%2E%2E%2Froot-level.txt/uploaded-file.txt", uploadedContent);
+        // 16-bit encoding
+        checkUrlNot200AndNotContains(wc, build.getUrl() + "parameters/parameter/%u002e%u002e%u2215%u002e%u002e%u2215%u002e%u002e%u2215%u002e%u002e%u2215%u002e%u002e%u2215root-level.txt/uploaded-file.txt", uploadedContent);
+        // double encoding
+        checkUrlNot200AndNotContains(wc, build.getUrl() + "parameters/parameter/%252e%252e%252f%252e%252e%252f%252e%252e%252f%252e%252e%252f%252e%252e%252froot-level.txt/uploaded-file.txt", uploadedContent);
+        // overlong utf-8 encoding
+        checkUrlNot200AndNotContains(wc, build.getUrl() + "parameters/parameter/%c0%2e%c0%2e%c0%af%c0%2e%c0%2e%c0%af%c0%2e%c0%2e%c0%af%c0%2e%c0%2e%c0%af%c0%2e%c0%2e%c0%afroot-level.txt/uploaded-file.txt", uploadedContent);
+    }
+    
+    private void checkUrlNot200AndNotContains(JenkinsRule.WebClient wc, String url, String contentNotPresent) throws Exception {
+        Page pageForEncoded = wc.goTo(url, null);
+        assertThat(pageForEncoded.getWebResponse().getStatusCode(), not(equalTo(200)));
+        assertThat(pageForEncoded.getWebResponse().getContentAsString(), not(containsString(contentNotPresent)));
+    }
+    
+    @Test
+    @Issue("SECURITY-1074")
+    public void fileParameter_cannotCreateFile_outsideOfBuildFolder_backslashEdition() throws Exception {
+        Assume.assumeTrue("Backslash are only dangerous on Windows", Functions.isWindows());
+        
+        // you can test the behavior before the correction by setting FileParameterValue.ALLOW_FOLDER_TRAVERSAL_OUTSIDE_WORKSPACE to true
+    
+        FilePath root = j.jenkins.getRootPath();
+        
+        FreeStyleProject p = j.createFreeStyleProject();
+        p.addProperty(new ParametersDefinitionProperty(Collections.singletonList(
+                new FileParameterDefinition("..\\..\\..\\..\\..\\root-level.txt", null)
+        )));
+        
+        assertThat(root.child("root-level.txt").exists(), equalTo(false));
+        
+        String uploadedContent = "test-content";
+        File uploadedFile = tmp.newFile();
+        FileUtils.write(uploadedFile, uploadedContent);
+        
+        FreeStyleBuild build = p.scheduleBuild2(0, new Cause.UserIdCause(), new ParametersAction(
+                new FileParameterValue("..\\..\\..\\..\\..\\root-level.txt", uploadedFile, "uploaded-file.txt")
+        )).get();
+        
+        assertThat(build.getResult(), equalTo(Result.FAILURE));
+        assertThat(root.child("root-level.txt").exists(), equalTo(false));
+        
+        // ensure also the file is not reachable by request
+        JenkinsRule.WebClient wc = j.createWebClient();
+        wc.getOptions().setThrowExceptionOnFailingStatusCode(false);
+        
+        checkUrlNot200AndNotContains(wc, build.getUrl() + "parameters/parameter/..\\..\\..\\..\\..\\root-level.txt/uploaded-file.txt", uploadedContent);
+        checkUrlNot200AndNotContains(wc, build.getUrl() + "parameters/parameter/..%2F..%2F..%2F..%2F..%2Froot-level.txt/uploaded-file.txt", uploadedContent);
+    }
+    
+    @Test
+    @Issue("SECURITY-1074")
+    public void fileParameter_withSingleDot() throws Exception {
+        // this case was not working even before the patch
+        
+        FreeStyleProject p = j.createFreeStyleProject();
+        p.addProperty(new ParametersDefinitionProperty(Collections.singletonList(
+                new FileParameterDefinition(".", null)
+        )));
+        
+        String uploadedContent = "test-content";
+        File uploadedFile = tmp.newFile();
+        FileUtils.write(uploadedFile, uploadedContent);
+        
+        FreeStyleBuild build = p.scheduleBuild2(0, new Cause.UserIdCause(), new ParametersAction(
+                new FileParameterValue(".", uploadedFile, "uploaded-file.txt")
+        )).get();
+        
+        assertThat(build.getResult(), equalTo(Result.FAILURE));
+        
+        // ensure also the file is not reachable by request
+        JenkinsRule.WebClient wc = j.createWebClient();
+        wc.getOptions().setThrowExceptionOnFailingStatusCode(false);
+        
+        checkUrlNot200AndNotContains(wc, build.getUrl() + "parameters/parameter/uploaded-file.txt", uploadedContent);
+        checkUrlNot200AndNotContains(wc, build.getUrl() + "parameters/parameter/./uploaded-file.txt", uploadedContent);
+    }
+    
+    @Test
+    @Issue("SECURITY-1074")
+    public void fileParameter_withDoubleDot() throws Exception {
+        // this case was not working even before the patch
+        
+        FreeStyleProject p = j.createFreeStyleProject();
+        p.addProperty(new ParametersDefinitionProperty(Collections.singletonList(
+                new FileParameterDefinition("..", null)
+        )));
+        
+        String uploadedContent = "test-content";
+        File uploadedFile = tmp.newFile();
+        FileUtils.write(uploadedFile, uploadedContent);
+        
+        FreeStyleBuild build = p.scheduleBuild2(0, new Cause.UserIdCause(), new ParametersAction(
+                new FileParameterValue("..", uploadedFile, "uploaded-file.txt")
+        )).get();
+        
+        assertThat(build.getResult(), equalTo(Result.FAILURE));
+        
+        // ensure also the file is not reachable by request
+        JenkinsRule.WebClient wc = j.createWebClient();
+        wc.getOptions().setThrowExceptionOnFailingStatusCode(false);
+        
+        checkUrlNot200AndNotContains(wc, build.getUrl() + "parameters/uploaded-file.txt", uploadedContent);
+        checkUrlNot200AndNotContains(wc, build.getUrl() + "parameters/parameter/../uploaded-file.txt", uploadedContent);
+    }
+    
+    @Test
+    @Issue("SECURITY-1074")
+    public void fileParameter_cannotEraseFile_outsideOfBuildFolder() throws Exception {
+        // you can test the behavior before the correction by setting FileParameterValue.ALLOW_FOLDER_TRAVERSAL_OUTSIDE_WORKSPACE to true
+        
+        FilePath root = j.jenkins.getRootPath();
+        
+        FreeStyleProject p = j.createFreeStyleProject();
+        p.addProperty(new ParametersDefinitionProperty(Collections.singletonList(
+                new FileParameterDefinition("../../../../../root-level.txt", null)
+        )));
+        
+        assertThat(root.child("root-level.txt").exists(), equalTo(false));
+        String initialContent = "do-not-erase-me";
+        root.child("root-level.txt").write(initialContent, StandardCharsets.UTF_8.name());
+        
+        String uploadedContent = "test-content";
+        File uploadedFile = tmp.newFile();
+        FileUtils.write(uploadedFile, uploadedContent);
+        
+        FreeStyleBuild build = p.scheduleBuild2(0, new Cause.UserIdCause(), new ParametersAction(
+                new FileParameterValue("../../../../../root-level.txt", uploadedFile, "uploaded-file.txt")
+        )).get();
+        
+        assertThat(build.getResult(), equalTo(Result.FAILURE));
+        assertThat(root.child("root-level.txt").readToString(), equalTo(initialContent));
+        
+        // ensure also the file is not reachable by request
+        JenkinsRule.WebClient wc = j.createWebClient();
+        wc.getOptions().setThrowExceptionOnFailingStatusCode(false);
+    
+        checkUrlNot200AndNotContains(wc, build.getUrl() + "parameters/parameter/..%2F..%2F..%2F..%2F..%2Froot-level.txt/uploaded-file.txt", uploadedContent);
+    }
+    
+    @Test
+    public void fileParameter_canStillUse_internalHierarchy() throws Exception {
+        FreeStyleProject p = j.createFreeStyleProject();
+        p.addProperty(new ParametersDefinitionProperty(Arrays.asList(
+                new FileParameterDefinition("direct-child1.txt", null),
+                new FileParameterDefinition("parent/child2.txt", null)
+        )));
+        
+        File uploadedFile1 = tmp.newFile();
+        FileUtils.write(uploadedFile1, "test1");
+        File uploadedFile2 = tmp.newFile();
+        FileUtils.write(uploadedFile2, "test2");
+        
+        FreeStyleBuild build = j.assertBuildStatusSuccess(p.scheduleBuild2(0, new Cause.UserIdCause(), new ParametersAction(
+                new FileParameterValue("direct-child1.txt", uploadedFile1, "uploaded-file-1.txt"),
+                new FileParameterValue("parent/child2.txt", uploadedFile2, "uploaded-file-2.txt")
+        )));
+        
+        // files are correctly saved in the build "fileParameters" folder
+        File directChild = new File(build.getRootDir(), "fileParameters/" + "direct-child1.txt");
+        assertTrue(directChild.exists());
+        
+        File parentChild = new File(build.getRootDir(), "fileParameters/" + "parent/child2.txt");
+        assertTrue(parentChild.exists());
+        
+        // both are correctly copied inside the workspace
+        assertTrue(build.getWorkspace().child("direct-child1.txt").exists());
+        assertTrue(build.getWorkspace().child("parent").child("child2.txt").exists());
+        
+        // and reachable using request
+        JenkinsRule.WebClient wc = j.createWebClient();
+        HtmlPage workspacePage = wc.goTo(p.getUrl() + "ws");
+        String workspaceContent = workspacePage.getWebResponse().getContentAsString();
+        assertThat(workspaceContent, allOf(
+                containsString("direct-child1.txt"),
+                containsString("parent")
+        ));
+        HtmlPage workspaceParentPage = wc.goTo(p.getUrl() + "ws" + "/parent");
+        String workspaceParentContent = workspaceParentPage.getWebResponse().getContentAsString();
+        assertThat(workspaceParentContent, containsString("child2.txt"));
+    }
+}
