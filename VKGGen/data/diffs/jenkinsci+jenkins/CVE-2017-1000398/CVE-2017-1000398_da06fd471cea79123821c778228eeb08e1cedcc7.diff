diff --git a/core/src/main/java/hudson/model/Executor.java b/core/src/main/java/hudson/model/Executor.java
index 83345726be0..2d2d6d1f0b5 100644
--- a/core/src/main/java/hudson/model/Executor.java
+++ b/core/src/main/java/hudson/model/Executor.java
@@ -64,12 +64,14 @@
 import java.util.logging.Logger;
 
 import static hudson.model.queue.Executables.*;
+import hudson.security.AccessControlled;
 import java.util.Collection;
 import static java.util.logging.Level.*;
 import javax.annotation.CheckForNull;
 import javax.annotation.Nonnull;
 import jenkins.model.queue.AsynchronousExecution;
 import org.kohsuke.accmod.Restricted;
+import org.kohsuke.accmod.restrictions.DoNotUse;
 import org.kohsuke.accmod.restrictions.NoExternalUse;
 
 
@@ -483,7 +485,6 @@ public void completedAsynchronous(@CheckForNull Throwable error) {
      * @return
      *      null if the executor is idle.
      */
-    @Exported
     public @CheckForNull Queue.Executable getCurrentExecutable() {
         lock.readLock().lock();
         try {
@@ -492,6 +493,16 @@ public void completedAsynchronous(@CheckForNull Throwable error) {
             lock.readLock().unlock();
         }
     }
+
+    /**
+     * Same as {@link #getCurrentExecutable} but checks {@link Item#READ}.
+     */
+    @Exported(name="currentExecutable")
+    @Restricted(DoNotUse.class) // for exporting only
+    public Queue.Executable getCurrentExecutableForApi() {
+        Executable candidate = getCurrentExecutable();
+        return candidate instanceof AccessControlled && ((AccessControlled) candidate).hasPermission(Item.READ) ? candidate : null;
+    }
     
     /**
      * Returns causes of interruption.
@@ -510,7 +521,6 @@ public void completedAsynchronous(@CheckForNull Throwable error) {
      * @return
      *      null if the executor is idle.
      */
-    @Exported
     public WorkUnit getCurrentWorkUnit() {
         lock.readLock().lock();
         try {
diff --git a/core/src/main/java/hudson/model/queue/WorkUnit.java b/core/src/main/java/hudson/model/queue/WorkUnit.java
index 68a3d7fce78..c54db401d49 100644
--- a/core/src/main/java/hudson/model/queue/WorkUnit.java
+++ b/core/src/main/java/hudson/model/queue/WorkUnit.java
@@ -31,7 +31,6 @@
 import hudson.model.Run;
 import org.kohsuke.accmod.Restricted;
 import org.kohsuke.accmod.restrictions.NoExternalUse;
-import org.kohsuke.stapler.export.ExportedBean;
 
 /**
  * Represents a unit of hand-over to {@link Executor} from {@link Queue}.
@@ -39,7 +38,6 @@
  * @author Kohsuke Kawaguchi
  * @since 1.377
  */
-@ExportedBean
 public final class WorkUnit {
     /**
      * Task to be executed.
diff --git a/test/src/test/java/hudson/model/ExecutorTest.java b/test/src/test/java/hudson/model/ExecutorTest.java
index d288c3de63f..e13ff1c345a 100644
--- a/test/src/test/java/hudson/model/ExecutorTest.java
+++ b/test/src/test/java/hudson/model/ExecutorTest.java
@@ -1,6 +1,6 @@
 package hudson.model;
 
-import static org.hamcrest.Matchers.containsString;
+import static org.hamcrest.Matchers.*;
 import static org.junit.Assert.*;
 
 
@@ -21,6 +21,8 @@
 import java.io.IOException;
 import java.util.concurrent.Future;
 import java.util.concurrent.atomic.AtomicInteger;
+import jenkins.model.Jenkins;
+import org.jvnet.hudson.test.MockAuthorizationStrategy;
 import org.jvnet.hudson.test.TestExtension;
 
 public class ExecutorTest {
@@ -117,6 +119,31 @@ public void disconnectCause() throws Exception {
         assertThat(log, containsString("Disconnected by Johnny : Taking offline to break your buil"));
     }
 
+    @Issue("SECURITY-611")
+    @Test
+    public void apiPermissions() throws Exception {
+        DumbSlave slave = new DumbSlave("slave", j.jenkins.getRootDir().getAbsolutePath(), j.createComputerLauncher(null));
+        slave.setNumExecutors(2);
+        j.jenkins.addNode(slave);
+        FreeStyleProject publicProject = j.createFreeStyleProject("public-project");
+        publicProject.setAssignedNode(slave);
+        startBlockingBuild(publicProject);
+        FreeStyleProject secretProject = j.createFreeStyleProject("secret-project");
+        secretProject.setAssignedNode(slave);
+        startBlockingBuild(secretProject);
+        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());
+        j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().
+            grant(Jenkins.READ).everywhere().toEveryone().
+            grant(Item.READ).onItems(publicProject).toEveryone().
+            grant(Item.READ).onItems(secretProject).to("has-security-clearance"));
+        String api = j.createWebClient().login("has-security-clearance").goTo(slave.toComputer().getUrl() + "api/json?pretty&depth=1", null).getWebResponse().getContentAsString();
+        System.out.println(api);
+        assertThat(api, allOf(containsString("public-project"), containsString("secret-project")));
+        api = j.createWebClient().login("regular-joe").goTo(slave.toComputer().getUrl() + "api/json?pretty&depth=1", null).getWebResponse().getContentAsString();
+        System.out.println(api);
+        assertThat(api, allOf(containsString("public-project"), not(containsString("secret-project"))));
+    }
+
     /**
      * Start a project with an infinite build step
      *
@@ -155,7 +182,7 @@ public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListen
                 Thread.sleep(100);
             }
         }
-        @TestExtension("disconnectCause")
+        @TestExtension
         public static class DescriptorImpl extends Descriptor<Builder> {}
     }
 }
