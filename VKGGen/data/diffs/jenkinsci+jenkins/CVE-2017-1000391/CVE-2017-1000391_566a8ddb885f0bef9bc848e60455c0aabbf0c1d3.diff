diff --git a/core/pom.xml b/core/pom.xml
index 93237c04e06..d88b39b0ad3 100644
--- a/core/pom.xml
+++ b/core/pom.xml
@@ -575,7 +575,7 @@ THE SOFTWARE.
     <dependency>
       <groupId>org.kohsuke</groupId>
       <artifactId>access-modifier-annotation</artifactId>
-      <version>1.4</version>
+      <version>1.11</version>
     </dependency>
 
     <dependency>
diff --git a/core/src/main/java/hudson/model/User.java b/core/src/main/java/hudson/model/User.java
index 27b7dc57faf..0f636961817 100644
--- a/core/src/main/java/hudson/model/User.java
+++ b/core/src/main/java/hudson/model/User.java
@@ -48,6 +48,10 @@
 import java.io.File;
 import java.io.FileFilter;
 import java.io.IOException;
+import java.nio.file.DirectoryStream;
+import java.nio.file.Files;
+import java.nio.file.InvalidPathException;
+import java.nio.file.Path;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collection;
@@ -464,6 +468,44 @@ public synchronized void doSubmitDescription( StaplerRequest req, StaplerRespons
                 }
             }
         }
+
+        File unsanitizedLegacyConfigFile = getUnsanitizedLegacyConfigFileFor(id);
+        if (unsanitizedLegacyConfigFile.exists() && !unsanitizedLegacyConfigFile.equals(configFile)) {
+            File ancestor = unsanitizedLegacyConfigFile.getParentFile();
+            if (!configFile.exists()) {
+                try {
+                    Files.createDirectory(configFile.getParentFile().toPath());
+                    Files.move(unsanitizedLegacyConfigFile.toPath(), configFile.toPath());
+                } catch (IOException | InvalidPathException e) {
+                    LOGGER.log(
+                            Level.WARNING,
+                            String.format("Failed to migrate user record from %s to %s, see SECURITY-499 for more information", idStrategy().legacyFilenameOf(id), idStrategy().filenameOf(id)),
+                            e);
+                }
+            }
+
+            // Don't clean up ancestors with other children; the directories should be cleaned up when the last child
+            // is migrated
+            File tmp = ancestor;
+            try {
+                while (!ancestor.equals(getRootDir())) {
+                    try (DirectoryStream<Path> stream = Files.newDirectoryStream(ancestor.toPath())) {
+                        if (!stream.iterator().hasNext()) {
+                            tmp = ancestor;
+                            ancestor = tmp.getParentFile();
+                            Files.deleteIfExists(tmp.toPath());
+                        } else {
+                            break;
+                        }
+                    }
+                }
+            } catch (IOException | InvalidPathException e) {
+                if (LOGGER.isLoggable(Level.FINE)) {
+                    LOGGER.log(Level.FINE, "Could not delete " + tmp + " when cleaning up legacy user directories", e);
+                }
+            }
+        }
+
         if (u==null && (create || configFile.exists())) {
             User tmp = new User(id, fullName);
             User prev;
@@ -704,6 +746,10 @@ public boolean accept(File pathname) {
         });
     }
 
+    private static File getUnsanitizedLegacyConfigFileFor(String id) {
+        return new File(getRootDir(), idStrategy().legacyFilenameOf(id) + "/config.xml");
+    }
+
     /**
      * Gets the directory where Hudson stores user information.
      */
diff --git a/core/src/main/java/jenkins/model/IdStrategy.java b/core/src/main/java/jenkins/model/IdStrategy.java
index f3f37186b7d..bd2f3f40a41 100644
--- a/core/src/main/java/jenkins/model/IdStrategy.java
+++ b/core/src/main/java/jenkins/model/IdStrategy.java
@@ -30,6 +30,8 @@
 import hudson.util.CaseInsensitiveComparator;
 import org.apache.commons.lang.StringUtils;
 import org.jenkinsci.Symbol;
+import org.kohsuke.accmod.Restricted;
+import org.kohsuke.accmod.restrictions.ProtectedExternally;
 import org.kohsuke.stapler.DataBoundConstructor;
 
 import javax.annotation.Nonnull;
@@ -50,16 +52,32 @@
     public static IdStrategy CASE_INSENSITIVE = new CaseInsensitive();
 
     /**
-     * Converts an ID into a name that for use as a filename.
+     * Converts an ID into a name for use as a filename.  The return value must not contain any filesystem unsafe
+     * characters or names. See https://msdn.microsoft.com/en-us/library/aa365247.aspx for information on reserved
+     * names.
      *
-     * @param id the id. Note, this method assumes that the id does not contain any filesystem unsafe characters.
-     * @return the name.
+     * @param id the id.
+     * @return the name.  Must be filesystem safe.
      */
     @Nonnull
     public abstract String filenameOf(@Nonnull String id);
 
     /**
-     * Converts a filename into the corresponding id.
+     * Converts an ID into a name for use as a filename.
+     *
+     * Legacy implementation used only for migrating old style config files to the new implementation.
+     * @param id the id
+     * @return the name
+     */
+    @Nonnull
+    @Restricted(ProtectedExternally.class)
+    public String legacyFilenameOf(@Nonnull String id) {
+        return filenameOf(id);
+    }
+
+
+    /**
+     * Converts a filename into the corresponding id.  This may contain filesystem unsafe characters.
      * @param filename the filename.
      * @return the corresponding id.
      * @since 1.577
@@ -156,9 +174,142 @@ public CaseInsensitive() {}
         @Override
         @Nonnull
         public String filenameOf(@Nonnull String id) {
+            if (id.isEmpty() || id.matches("[a-zA-Z0-9_. @-]+")) {
+                id = id.toLowerCase(Locale.ENGLISH);
+                switch (id) {
+                    case "":
+                    case ".":
+                        return "$002f";
+                    case "..":
+                        return "$002e$002e";
+                    case "con":
+                        return "$0063on";
+                    case "prn":
+                        return "$0070rn";
+                    case "aux":
+                        return "$0061ux";
+                    case "nul":
+                        return "$006eul";
+                    case "com1":
+                        return "$0063om1";
+                    case "com2":
+                        return "$0063om2";
+                    case "com3":
+                        return "$0063om3";
+                    case "com4":
+                        return "$0063om4";
+                    case "com5":
+                        return "$0063om5";
+                    case "com6":
+                        return "$0063om6";
+                    case "com7":
+                        return "$0063om7";
+                    case "com8":
+                        return "$0063om8";
+                    case "com9":
+                        return "$0063om9";
+                    case "lpt1":
+                        return "$006cpt1";
+                    case "lpt2":
+                        return "$006cpt2";
+                    case "lpt3":
+                        return "$006cpt3";
+                    case "lpt4":
+                        return "$006cpt4";
+                    case "lpt5":
+                        return "$006cpt5";
+                    case "lpt6":
+                        return "$006cpt6";
+                    case "lpt7":
+                        return "$006cpt7";
+                    case "lpt8":
+                        return "$006cpt8";
+                    case "lpt9":
+                        return "$006cpt9";
+                    default:
+                        if (id.endsWith(".")) {
+                            return id.substring(0,id.length()-1)+"$002e";
+                        } else if (id.startsWith("-")) {
+                            return "$002d" + id.substring(1);
+                        }
+                        return id;
+                }
+            } else {
+                StringBuilder buf = new StringBuilder(id.length() + 16);
+                for (char c : id.toCharArray()) {
+                    if ('a' <= c && c <= 'z') {
+                        buf.append(c);
+                    } else if ('A' <= c && c <= 'Z') {
+                        buf.append(Character.toLowerCase(c));
+                    } else if ('0' <= c && c <= '9') {
+                        buf.append(c);
+                    } else if ('_' == c || '-' == c || ' ' == c || '@' == c || '.' == c) {
+                        buf.append(c);
+                    } else {
+                        buf.append('$');
+                        buf.append(StringUtils.leftPad(Integer.toHexString(c & 0xffff), 4, '0'));
+                    }
+                }
+                return buf.toString();
+            }
+        }
+
+        @Nonnull
+        @Override
+        public String legacyFilenameOf(@Nonnull String id) {
             return id.toLowerCase(Locale.ENGLISH);
         }
 
+        @Override
+        public String idFromFilename(@Nonnull String filename) {
+            if (filename.matches("[A-Za-z0-9_. @-]+")) {
+                return filename.toLowerCase(Locale.ENGLISH);
+            } else {
+                StringBuilder buf = new StringBuilder(filename.length());
+                final char[] chars = filename.toCharArray();
+                for (int i = 0; i < chars.length; i++) {
+                    char c = chars[i];
+                    if ('a' <= c && c <= 'z') {
+                        buf.append(c);
+                    } else if ('A' <= c && c <= 'a') {
+                        buf.append(Character.toLowerCase(c));
+                    } else if ('0' <= c && c <= '9') {
+                        buf.append(c);
+                    } else if ('_' == c || '.' == c || '-' == c || ' ' == c || '@' == c) {
+                        buf.append(c);
+                    } else if (c == '$') {
+                        StringBuilder hex = new StringBuilder(4);
+                        i++;
+                        if (i < chars.length) {
+                            hex.append(chars[i]);
+                        } else {
+                            break;
+                        }
+                        i++;
+                        if (i < chars.length) {
+                            hex.append(chars[i]);
+                        } else {
+                            break;
+                        }
+                        i++;
+                        if (i < chars.length) {
+                            hex.append(chars[i]);
+                        } else {
+                            break;
+                        }
+                        i++;
+                        if (i < chars.length) {
+                            hex.append(chars[i]);
+                        } else {
+                            break;
+                        }
+                        buf.append(Character.valueOf((char)Integer.parseInt(hex.toString(), 16)));
+                    }
+                }
+                return buf.toString();
+            }
+        }
+
         /**
          * {@inheritDoc}
          */
@@ -203,7 +354,93 @@ public CaseSensitive() {}
         @Override
         @Nonnull
         public String filenameOf(@Nonnull String id) {
-            if (id.matches("[a-z0-9_. -]+")) {
+            if (id.isEmpty() || id.matches("[a-z0-9_. @-]+")) {
+                switch (id) {
+                    case "":
+                    case ".":
+                        return "$002f";
+                    case "..":
+                        return "$002e$002e";
+                    case "con":
+                        return "$0063on";
+                    case "prn":
+                        return "$0070rn";
+                    case "aux":
+                        return "$0061ux";
+                    case "nul":
+                        return "$006eul";
+                    case "com1":
+                        return "$0063om1";
+                    case "com2":
+                        return "$0063om2";
+                    case "com3":
+                        return "$0063om3";
+                    case "com4":
+                        return "$0063om4";
+                    case "com5":
+                        return "$0063om5";
+                    case "com6":
+                        return "$0063om6";
+                    case "com7":
+                        return "$0063om7";
+                    case "com8":
+                        return "$0063om8";
+                    case "com9":
+                        return "$0063om9";
+                    case "lpt1":
+                        return "$006cpt1";
+                    case "lpt2":
+                        return "$006cpt2";
+                    case "lpt3":
+                        return "$006cpt3";
+                    case "lpt4":
+                        return "$006cpt4";
+                    case "lpt5":
+                        return "$006cpt5";
+                    case "lpt6":
+                        return "$006cpt6";
+                    case "lpt7":
+                        return "$006cpt7";
+                    case "lpt8":
+                        return "$006cpt8";
+                    case "lpt9":
+                        return "$006cpt9";
+                    default:
+                        if (id.endsWith(".")) {
+                            return id.substring(0,id.length()-1)+"$002e";
+                        } else if (id.startsWith("-")) {
+                            return "$002d" + id.substring(1);
+                        }
+                        return id;
+                }
+            } else {
+                StringBuilder buf = new StringBuilder(id.length() + 16);
+                for (char c : id.toCharArray()) {
+                    if ('a' <= c && c <= 'z') {
+                        buf.append(c);
+                    } else if ('0' <= c && c <= '9') {
+                        buf.append(c);
+                    } else if ('_' == c || '-' == c || ' ' == c || '@' == c || '.' == c) {
+                        buf.append(c);
+                    } else if ('A' <= c && c <= 'Z') {
+                        buf.append('~');
+                        buf.append(Character.toLowerCase(c));
+                    } else {
+                        buf.append('$');
+                        buf.append(StringUtils.leftPad(Integer.toHexString(c & 0xffff), 4, '0'));
+                    }
+                }
+                return buf.toString();
+            }
+        }
+
+        /**
+         * {@inheritDoc}
+         */
+        @Nonnull
+        @Override
+        public String legacyFilenameOf(@Nonnull String id) {
+            if (id.matches("[a-z0-9_. @-]+")) {
                 return id;
             } else {
                 StringBuilder buf = new StringBuilder(id.length() + 16);
diff --git a/core/src/test/java/jenkins/model/IdStrategyTest.java b/core/src/test/java/jenkins/model/IdStrategyTest.java
new file mode 100644
index 00000000000..e44cb0466b4
--- /dev/null
+++ b/core/src/test/java/jenkins/model/IdStrategyTest.java
@@ -0,0 +1,101 @@
+package jenkins.model;
+
+import org.junit.Test;
+
+import java.util.Locale;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertThat;
+
+public class IdStrategyTest {
+    private IdStrategy idStrategy;
+
+    @Test
+    public void caseInsensitive() {
+        idStrategy = new IdStrategy.CaseInsensitive();
+        assertRestrictedNames();
+
+        assertRoundTrip("foo", "foo");
+        assertRoundTrip("foo/bar", "foo$002fbar");
+        assertRoundTrip("../test", "..$002ftest");
+        assertRoundTrip("0123 _-@~a", "0123 _-@$007ea");
+        assertRoundTrip("foo.", "foo$002e");
+        assertRoundTrip("-foo", "$002dfoo");
+
+        // Should not return the same username due to case insensitivity
+        assertCaseInsensitiveRoundTrip("Foo", "foo");
+        assertCaseInsensitiveRoundTrip("Foo/Bar", "foo$002fbar");
+        assertCaseInsensitiveRoundTrip("../Test", "..$002ftest");
+        assertCaseInsensitiveRoundTrip("NUL", "$006eul");
+        assertEquals("foo", idStrategy.idFromFilename("~foo"));
+        assertEquals("0123 _-@a", idStrategy.idFromFilename("0123 _-@~a"));
+    }
+
+    @Test
+    public void caseSensitive() {
+        idStrategy = new IdStrategy.CaseSensitive();
+        assertRestrictedNames();
+
+        assertRoundTrip("foo", "foo");
+        assertRoundTrip("Foo", "~foo");
+        assertRoundTrip("foo/bar", "foo$002fbar");
+        assertRoundTrip("Foo/Bar", "~foo$002f~bar");
+        assertRoundTrip("../test", "..$002ftest");
+        assertRoundTrip("../Test", "..$002f~test");
+        assertRoundTrip("0123 _-@~a", "0123 _-@$007ea");
+        assertRoundTrip("0123 _-@A", "0123 _-@~a");
+        assertRoundTrip("foo.", "foo$002e");
+        assertRoundTrip("-foo", "$002dfoo");
+        assertRoundTrip("Con", "~con");
+        assertRoundTrip("Prn", "~prn");
+        assertRoundTrip("Aux", "~aux");
+        assertRoundTrip("Nul", "~nul");
+        assertRoundTrip("Com1", "~com1");
+        assertRoundTrip("Lpt1", "~lpt1");
+    }
+
+    private void assertRestrictedNames() {
+        assertEquals("$002f", idStrategy.filenameOf("."));
+        // "." and "/" are equivalent from an implementation standpoint, but both should return "/"
+        assertEquals("/", idStrategy.idFromFilename(idStrategy.filenameOf(".")));
+
+        assertEquals("$002f", idStrategy.filenameOf(""));
+        // "" and "/" are equivalent from an implementation standpoint, but both should return "/"
+        assertEquals("/", idStrategy.idFromFilename(idStrategy.filenameOf("")));
+
+        assertRoundTrip("/", "$002f");
+        assertRoundTrip("..", "$002e$002e");
+        assertRoundTrip("con", "$0063on");
+        assertRoundTrip("prn", "$0070rn");
+        assertRoundTrip("aux", "$0061ux");
+        assertRoundTrip("nul", "$006eul");
+        assertRoundTrip("com1", "$0063om1");
+        assertRoundTrip("com2", "$0063om2");
+        assertRoundTrip("com3", "$0063om3");
+        assertRoundTrip("com4", "$0063om4");
+        assertRoundTrip("com5", "$0063om5");
+        assertRoundTrip("com6", "$0063om6");
+        assertRoundTrip("com7", "$0063om7");
+        assertRoundTrip("com8", "$0063om8");
+        assertRoundTrip("com9", "$0063om9");
+        assertRoundTrip("lpt1", "$006cpt1");
+        assertRoundTrip("lpt2", "$006cpt2");
+        assertRoundTrip("lpt3", "$006cpt3");
+        assertRoundTrip("lpt4", "$006cpt4");
+        assertRoundTrip("lpt5", "$006cpt5");
+        assertRoundTrip("lpt6", "$006cpt6");
+        assertRoundTrip("lpt7", "$006cpt7");
+        assertRoundTrip("lpt8", "$006cpt8");
+        assertRoundTrip("lpt9", "$006cpt9");
+    }
+
+    private void assertRoundTrip(String username, String filename) {
+        assertEquals(filename, idStrategy.filenameOf(username));
+        assertEquals(username, idStrategy.idFromFilename(filename));
+    }
+
+    private void assertCaseInsensitiveRoundTrip(String username, String filename) {
+        assertEquals(filename, idStrategy.filenameOf(username));
+        assertEquals(username.toLowerCase(Locale.ENGLISH), idStrategy.idFromFilename(filename));
+    }
+}
diff --git a/test/src/test/java/hudson/model/UserTest.java b/test/src/test/java/hudson/model/UserTest.java
index 1ce0f24baff..d3c4527af04 100644
--- a/test/src/test/java/hudson/model/UserTest.java
+++ b/test/src/test/java/hudson/model/UserTest.java
@@ -29,6 +29,7 @@
 import com.gargoylesoftware.htmlunit.html.HtmlForm;
 import com.gargoylesoftware.htmlunit.html.HtmlPage;
 
+import hudson.Functions;
 import hudson.security.ACL;
 import hudson.security.ACLContext;
 import hudson.security.AbstractPasswordBasedSecurityRealm;
@@ -59,12 +60,17 @@
 import org.acegisecurity.userdetails.UserDetails;
 import org.acegisecurity.userdetails.UsernameNotFoundException;
 
+import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.not;
 import static org.hamcrest.collection.IsEmptyCollection.empty;
+import static org.hamcrest.core.StringEndsWith.endsWith;
 import static org.junit.Assert.*;
 import static org.junit.Assume.*;
 
+import org.apache.commons.lang.StringUtils;
 import org.hamcrest.collection.IsEmptyCollection;
+import org.hamcrest.core.IsEqual;
+import org.hamcrest.core.StringEndsWith;
 import org.junit.Assert;
 import org.junit.Rule;
 import org.junit.Test;
@@ -714,6 +720,95 @@ public void getAllPropertiesRequiresAdmin() {
         }
     }
 
+    @Test
+    @Issue("SECURITY-499")
+    public void createdUsersHaveCorrectConfigLocation() {
+        assertCorrectConfig(User.getById("admin", true), "users/admin/config.xml");
+        assertCorrectConfig(User.getById("foo", true), "users/foo/config.xml");
+        assertCorrectConfig(User.getById("foo/bar", true), "users/foo$002fbar/config.xml");
+        assertCorrectConfig(User.getById("foo/bar/baz", true), "users/foo$002fbar$002fbaz/config.xml");
+        assertCorrectConfig(User.getById("/", true), "users/$002f/config.xml");
+        assertCorrectConfig(User.getById(".", true), "users/$002f/config.xml");
+        assertCorrectConfig(User.getById("..", true), "users/$002e$002e/config.xml");
+        assertCorrectConfig(User.getById("../config.xml", true), "users/..$002fconfig.xml/config.xml");
+    }
+
+    @Test
+    @Issue("SECURITY-499")
+    @LocalData
+    public void legacyUserConfigDirsMigrated() {
+        File rootDir = new File(Jenkins.getInstance().getRootDir(), "users");
+
+        User admin = User.getById("admin", false);
+        assertCorrectConfig(admin, "users/admin/config.xml");
+        assertTrue(admin.getConfigFile().getFile().exists());
+        assertThat(admin.getFullName(), equalTo("Admin"));
+
+        User foo = User.getById("foo", false);
+        File fooDir = new File(rootDir, "foo");
+        assertCorrectConfig(foo, "users/foo/config.xml");
+        assertTrue(foo.getConfigFile().getFile().exists());
+        assertTrue(fooDir.exists());
+        assertThat(foo.getFullName(), equalTo("Foo"));
+
+        User fooBar = User.getById("foo/bar", false);
+        File fooBarDir = new File(fooDir, "bar");
+        assertCorrectConfig(fooBar, "users/foo$002fbar/config.xml");
+        assertTrue(fooBar.getConfigFile().getFile().exists());
+        assertTrue(fooDir.exists());
+        assertTrue(fooBarDir.exists());
+        assertThat(fooBar.getFullName(), equalTo("Foo Bar"));
+
+        User fooBaz = User.getById("foo/baz", false);
+        File fooBazDir = new File(fooDir, "baz");
+        assertCorrectConfig(fooBaz, "users/foo$002fbaz/config.xml");
+        assertTrue(fooBaz.getConfigFile().getFile().exists());
+        assertTrue(fooDir.exists());
+        assertFalse(fooBazDir.exists());
+        assertThat(fooBaz.getFullName(), equalTo("Foo Baz"));
+
+        User fooBarBaz = User.getById("foo/bar/baz", false);
+        File fooBarBazDir = new File(fooBarDir, "baz");
+        assertCorrectConfig(fooBarBaz, "users/foo$002fbar$002fbaz/config.xml");
+        assertTrue(fooBarBaz.getConfigFile().getFile().exists());
+        assertTrue(fooDir.exists());
+        assertFalse(fooBarBazDir.exists());
+        assertFalse(fooBarDir.exists());
+        assertThat(fooBarBaz.getFullName(), equalTo("Foo Bar Baz"));
+
+        User slash = User.getById("/", false);
+        File slashDir = new File(rootDir, "$002f");
+        assertCorrectConfig(slash, "users/$002f/config.xml");
+        assertTrue(slash.getConfigFile().getFile().exists());
+        assertTrue(slashDir.exists());
+        assertFalse(new File(rootDir, "config.xml").exists());
+        assertThat(slash.getFullName(), equalTo("Slash"));
+    }
+
+    @Test
+    @Issue("SECURITY-499")
+    @LocalData
+    public void emptyUsernameConfigMigrated() {
+        File rootDir = new File(Jenkins.getInstance().getRootDir(), "users");
+
+        User admin = User.getById("admin", false);
+        assertCorrectConfig(admin, "users/admin/config.xml");
+        assertTrue(admin.getConfigFile().getFile().exists());
+        assertThat(admin.getFullName(), equalTo("Admin"));
+
+        User empty = User.getById("", false);
+        File emptyDir = new File(rootDir, "$002f");
+        assertCorrectConfig(empty, "users/$002f/config.xml");
+        assertTrue(empty.getConfigFile().getFile().exists());
+        assertTrue(emptyDir.exists());
+        assertFalse(new File(rootDir, "config.xml").exists());
+        assertThat(empty.getFullName(), equalTo("Empty"));
+    }
+
+    private static void assertCorrectConfig(User user, String unixPath) {
+        assertThat(user.getConfigFile().getFile().getPath(), endsWith(unixPath.replace('/', File.separatorChar)));
+    }
+
      public static class SomeUserProperty extends UserProperty {
          
         @TestExtension
diff --git a/test/src/test/resources/hudson/model/UserTest/emptyUsernameConfigMigrated/config.xml b/test/src/test/resources/hudson/model/UserTest/emptyUsernameConfigMigrated/config.xml
new file mode 100644
index 00000000000..e8902ede4e1
--- /dev/null
+++ b/test/src/test/resources/hudson/model/UserTest/emptyUsernameConfigMigrated/config.xml
@@ -0,0 +1,41 @@
+<?xml version='1.0' encoding='UTF-8'?>
+<hudson>
+  <disabledAdministrativeMonitors/>
+  <version>1.0</version>
+  <numExecutors>2</numExecutors>
+  <mode>NORMAL</mode>
+  <useSecurity>true</useSecurity>
+  <authorizationStrategy class="hudson.security.FullControlOnceLoggedInAuthorizationStrategy">
+    <denyAnonymousReadAccess>true</denyAnonymousReadAccess>
+  </authorizationStrategy>
+  <securityRealm class="hudson.security.HudsonPrivateSecurityRealm">
+    <disableSignup>true</disableSignup>
+    <enableCaptcha>false</enableCaptcha>
+  </securityRealm>
+  <disableRememberMe>false</disableRememberMe>
+  <projectNamingStrategy class="jenkins.model.ProjectNamingStrategy$DefaultProjectNamingStrategy"/>
+  <workspaceDir>${JENKINS_HOME}/workspace/${ITEM_FULLNAME}</workspaceDir>
+  <buildsDir>${ITEM_ROOTDIR}/builds</buildsDir>
+  <jdks/>
+  <viewsTabBar class="hudson.views.DefaultViewsTabBar"/>
+  <myViewsTabBar class="hudson.views.DefaultMyViewsTabBar"/>
+  <clouds/>
+  <scmCheckoutRetryCount>0</scmCheckoutRetryCount>
+  <views>
+    <hudson.model.AllView>
+      <owner class="hudson" reference="../../.."/>
+      <name>all</name>
+      <filterExecutors>false</filterExecutors>
+      <filterQueue>false</filterQueue>
+      <properties class="hudson.model.View$PropertyList"/>
+    </hudson.model.AllView>
+  </views>
+  <primaryView>all</primaryView>
+  <slaveAgentPort>-1</slaveAgentPort>
+  <label></label>
+  <crumbIssuer class="hudson.security.csrf.DefaultCrumbIssuer">
+    <excludeClientIPFromCrumb>false</excludeClientIPFromCrumb>
+  </crumbIssuer>
+  <nodeProperties/>
+  <globalNodeProperties/>
+</hudson>
\ No newline at end of file
diff --git a/test/src/test/resources/hudson/model/UserTest/emptyUsernameConfigMigrated/users/admin/config.xml b/test/src/test/resources/hudson/model/UserTest/emptyUsernameConfigMigrated/users/admin/config.xml
new file mode 100644
index 00000000000..91fc2f3e1f5
--- /dev/null
+++ b/test/src/test/resources/hudson/model/UserTest/emptyUsernameConfigMigrated/users/admin/config.xml
@@ -0,0 +1,29 @@
+<?xml version='1.0' encoding='UTF-8'?>
+<user>
+  <fullName>Admin</fullName>
+  <properties>
+    <jenkins.security.ApiTokenProperty>
+      <apiToken>{AQAAABAAAAAwu9tm9n3SIC+bkaGz5WfsKwJz+a04aUUWiq4hACNLemh6f62j2cgIT9KuyMGtXvr7ab6GWBQGzThOrJfK1etETQ==}</apiToken>
+    </jenkins.security.ApiTokenProperty>
+    <hudson.model.MyViewsProperty>
+      <views>
+        <hudson.model.AllView>
+          <owner class="hudson.model.MyViewsProperty" reference="../../.."/>
+          <name>all</name>
+          <filterExecutors>false</filterExecutors>
+          <filterQueue>false</filterQueue>
+          <properties class="hudson.model.View$PropertyList"/>
+        </hudson.model.AllView>
+      </views>
+    </hudson.model.MyViewsProperty>
+    <hudson.model.PaneStatusProperties>
+      <collapsed/>
+    </hudson.model.PaneStatusProperties>
+    <hudson.search.UserSearchProperty>
+      <insensitiveSearch>false</insensitiveSearch>
+    </hudson.search.UserSearchProperty>
+    <hudson.security.HudsonPrivateSecurityRealm_-Details>
+      <passwordHash>#jbcrypt:$2a$10$eDQD3w/iXX0VWWKb3Kv5QOKjFg0Yj3Hk9Z.Y43iFHJQOUYmHdvVuS</passwordHash>
+    </hudson.security.HudsonPrivateSecurityRealm_-Details>
+  </properties>
+</user>
diff --git a/test/src/test/resources/hudson/model/UserTest/emptyUsernameConfigMigrated/users/config.xml b/test/src/test/resources/hudson/model/UserTest/emptyUsernameConfigMigrated/users/config.xml
new file mode 100644
index 00000000000..9df32ee88b4
--- /dev/null
+++ b/test/src/test/resources/hudson/model/UserTest/emptyUsernameConfigMigrated/users/config.xml
@@ -0,0 +1,29 @@
+<?xml version='1.0' encoding='UTF-8'?>
+<user>
+  <fullName>Empty</fullName>
+  <properties>
+    <jenkins.security.ApiTokenProperty>
+      <apiToken>{AQAAABAAAAAwkYgvFl7YHG1866pnHDawvcy2VQ0jlbQd85vu9WWI22SjmLmJS0TMMS4w+3XqvEt8nHx9/0U06huIcMj3XuDPuQ==}</apiToken>
+    </jenkins.security.ApiTokenProperty>
+    <hudson.model.MyViewsProperty>
+      <views>
+        <hudson.model.AllView>
+          <owner class="hudson.model.MyViewsProperty" reference="../../.."/>
+          <name>all</name>
+          <filterExecutors>false</filterExecutors>
+          <filterQueue>false</filterQueue>
+          <properties class="hudson.model.View$PropertyList"/>
+        </hudson.model.AllView>
+      </views>
+    </hudson.model.MyViewsProperty>
+    <hudson.model.PaneStatusProperties>
+      <collapsed/>
+    </hudson.model.PaneStatusProperties>
+    <hudson.search.UserSearchProperty>
+      <insensitiveSearch>false</insensitiveSearch>
+    </hudson.search.UserSearchProperty>
+    <hudson.security.HudsonPrivateSecurityRealm_-Details>
+      <passwordHash>#jbcrypt:$2a$10$dTn2EpIBa2E0T6R.2XK/HucVkyqdu9qGQ6FmBOYdZlpeN2mtv.Ez2</passwordHash>
+    </hudson.security.HudsonPrivateSecurityRealm_-Details>
+  </properties>
+</user>
diff --git a/test/src/test/resources/hudson/model/UserTest/legacyUserConfigDirsMigrated/config.xml b/test/src/test/resources/hudson/model/UserTest/legacyUserConfigDirsMigrated/config.xml
new file mode 100644
index 00000000000..e8902ede4e1
--- /dev/null
+++ b/test/src/test/resources/hudson/model/UserTest/legacyUserConfigDirsMigrated/config.xml
@@ -0,0 +1,41 @@
+<?xml version='1.0' encoding='UTF-8'?>
+<hudson>
+  <disabledAdministrativeMonitors/>
+  <version>1.0</version>
+  <numExecutors>2</numExecutors>
+  <mode>NORMAL</mode>
+  <useSecurity>true</useSecurity>
+  <authorizationStrategy class="hudson.security.FullControlOnceLoggedInAuthorizationStrategy">
+    <denyAnonymousReadAccess>true</denyAnonymousReadAccess>
+  </authorizationStrategy>
+  <securityRealm class="hudson.security.HudsonPrivateSecurityRealm">
+    <disableSignup>true</disableSignup>
+    <enableCaptcha>false</enableCaptcha>
+  </securityRealm>
+  <disableRememberMe>false</disableRememberMe>
+  <projectNamingStrategy class="jenkins.model.ProjectNamingStrategy$DefaultProjectNamingStrategy"/>
+  <workspaceDir>${JENKINS_HOME}/workspace/${ITEM_FULLNAME}</workspaceDir>
+  <buildsDir>${ITEM_ROOTDIR}/builds</buildsDir>
+  <jdks/>
+  <viewsTabBar class="hudson.views.DefaultViewsTabBar"/>
+  <myViewsTabBar class="hudson.views.DefaultMyViewsTabBar"/>
+  <clouds/>
+  <scmCheckoutRetryCount>0</scmCheckoutRetryCount>
+  <views>
+    <hudson.model.AllView>
+      <owner class="hudson" reference="../../.."/>
+      <name>all</name>
+      <filterExecutors>false</filterExecutors>
+      <filterQueue>false</filterQueue>
+      <properties class="hudson.model.View$PropertyList"/>
+    </hudson.model.AllView>
+  </views>
+  <primaryView>all</primaryView>
+  <slaveAgentPort>-1</slaveAgentPort>
+  <label></label>
+  <crumbIssuer class="hudson.security.csrf.DefaultCrumbIssuer">
+    <excludeClientIPFromCrumb>false</excludeClientIPFromCrumb>
+  </crumbIssuer>
+  <nodeProperties/>
+  <globalNodeProperties/>
+</hudson>
\ No newline at end of file
diff --git a/test/src/test/resources/hudson/model/UserTest/legacyUserConfigDirsMigrated/users/admin/config.xml b/test/src/test/resources/hudson/model/UserTest/legacyUserConfigDirsMigrated/users/admin/config.xml
new file mode 100644
index 00000000000..91fc2f3e1f5
--- /dev/null
+++ b/test/src/test/resources/hudson/model/UserTest/legacyUserConfigDirsMigrated/users/admin/config.xml
@@ -0,0 +1,29 @@
+<?xml version='1.0' encoding='UTF-8'?>
+<user>
+  <fullName>Admin</fullName>
+  <properties>
+    <jenkins.security.ApiTokenProperty>
+      <apiToken>{AQAAABAAAAAwu9tm9n3SIC+bkaGz5WfsKwJz+a04aUUWiq4hACNLemh6f62j2cgIT9KuyMGtXvr7ab6GWBQGzThOrJfK1etETQ==}</apiToken>
+    </jenkins.security.ApiTokenProperty>
+    <hudson.model.MyViewsProperty>
+      <views>
+        <hudson.model.AllView>
+          <owner class="hudson.model.MyViewsProperty" reference="../../.."/>
+          <name>all</name>
+          <filterExecutors>false</filterExecutors>
+          <filterQueue>false</filterQueue>
+          <properties class="hudson.model.View$PropertyList"/>
+        </hudson.model.AllView>
+      </views>
+    </hudson.model.MyViewsProperty>
+    <hudson.model.PaneStatusProperties>
+      <collapsed/>
+    </hudson.model.PaneStatusProperties>
+    <hudson.search.UserSearchProperty>
+      <insensitiveSearch>false</insensitiveSearch>
+    </hudson.search.UserSearchProperty>
+    <hudson.security.HudsonPrivateSecurityRealm_-Details>
+      <passwordHash>#jbcrypt:$2a$10$eDQD3w/iXX0VWWKb3Kv5QOKjFg0Yj3Hk9Z.Y43iFHJQOUYmHdvVuS</passwordHash>
+    </hudson.security.HudsonPrivateSecurityRealm_-Details>
+  </properties>
+</user>
diff --git a/test/src/test/resources/hudson/model/UserTest/legacyUserConfigDirsMigrated/users/config.xml b/test/src/test/resources/hudson/model/UserTest/legacyUserConfigDirsMigrated/users/config.xml
new file mode 100644
index 00000000000..f6d70dcd6ea
--- /dev/null
+++ b/test/src/test/resources/hudson/model/UserTest/legacyUserConfigDirsMigrated/users/config.xml
@@ -0,0 +1,29 @@
+<?xml version='1.0' encoding='UTF-8'?>
+<user>
+  <fullName>Slash</fullName>
+  <properties>
+    <jenkins.security.ApiTokenProperty>
+      <apiToken>{AQAAABAAAAAwkYgvFl7YHG1866pnHDawvcy2VQ0jlbQd85vu9WWI22SjmLmJS0TMMS4w+3XqvEt8nHx9/0U06huIcMj3XuDPuQ==}</apiToken>
+    </jenkins.security.ApiTokenProperty>
+    <hudson.model.MyViewsProperty>
+      <views>
+        <hudson.model.AllView>
+          <owner class="hudson.model.MyViewsProperty" reference="../../.."/>
+          <name>all</name>
+          <filterExecutors>false</filterExecutors>
+          <filterQueue>false</filterQueue>
+          <properties class="hudson.model.View$PropertyList"/>
+        </hudson.model.AllView>
+      </views>
+    </hudson.model.MyViewsProperty>
+    <hudson.model.PaneStatusProperties>
+      <collapsed/>
+    </hudson.model.PaneStatusProperties>
+    <hudson.search.UserSearchProperty>
+      <insensitiveSearch>false</insensitiveSearch>
+    </hudson.search.UserSearchProperty>
+    <hudson.security.HudsonPrivateSecurityRealm_-Details>
+      <passwordHash>#jbcrypt:$2a$10$dTn2EpIBa2E0T6R.2XK/HucVkyqdu9qGQ6FmBOYdZlpeN2mtv.Ez2</passwordHash>
+    </hudson.security.HudsonPrivateSecurityRealm_-Details>
+  </properties>
+</user>
diff --git a/test/src/test/resources/hudson/model/UserTest/legacyUserConfigDirsMigrated/users/foo/bar/baz/config.xml b/test/src/test/resources/hudson/model/UserTest/legacyUserConfigDirsMigrated/users/foo/bar/baz/config.xml
new file mode 100644
index 00000000000..25769bc78c6
--- /dev/null
+++ b/test/src/test/resources/hudson/model/UserTest/legacyUserConfigDirsMigrated/users/foo/bar/baz/config.xml
@@ -0,0 +1,29 @@
+<?xml version='1.0' encoding='UTF-8'?>
+<user>
+  <fullName>Foo Bar Baz</fullName>
+  <properties>
+    <jenkins.security.ApiTokenProperty>
+      <apiToken>{AQAAABAAAAAwykg9OxsaVN4tRz33o0I7RoexPAcg52/IhBfyoRqKMNNMjFH3SREdkGrpde49dhP1Otr6wbrbG8dE+E/bsd+fZQ==}</apiToken>
+    </jenkins.security.ApiTokenProperty>
+    <hudson.model.MyViewsProperty>
+      <views>
+        <hudson.model.AllView>
+          <owner class="hudson.model.MyViewsProperty" reference="../../.."/>
+          <name>all</name>
+          <filterExecutors>false</filterExecutors>
+          <filterQueue>false</filterQueue>
+          <properties class="hudson.model.View$PropertyList"/>
+        </hudson.model.AllView>
+      </views>
+    </hudson.model.MyViewsProperty>
+    <hudson.model.PaneStatusProperties>
+      <collapsed/>
+    </hudson.model.PaneStatusProperties>
+    <hudson.search.UserSearchProperty>
+      <insensitiveSearch>false</insensitiveSearch>
+    </hudson.search.UserSearchProperty>
+    <hudson.security.HudsonPrivateSecurityRealm_-Details>
+      <passwordHash>#jbcrypt:$2a$10$9FVRXp7wUK4VFULhuZqBguHtsqGa9KRmJzfe6FPTjE8Ve0D/Bca.a</passwordHash>
+    </hudson.security.HudsonPrivateSecurityRealm_-Details>
+  </properties>
+</user>
diff --git a/test/src/test/resources/hudson/model/UserTest/legacyUserConfigDirsMigrated/users/foo/bar/config.xml b/test/src/test/resources/hudson/model/UserTest/legacyUserConfigDirsMigrated/users/foo/bar/config.xml
new file mode 100644
index 00000000000..d36c3e6ad7c
--- /dev/null
+++ b/test/src/test/resources/hudson/model/UserTest/legacyUserConfigDirsMigrated/users/foo/bar/config.xml
@@ -0,0 +1,29 @@
+<?xml version='1.0' encoding='UTF-8'?>
+<user>
+  <fullName>Foo Bar</fullName>
+  <properties>
+    <jenkins.security.ApiTokenProperty>
+      <apiToken>{AQAAABAAAAAwqrNFnYtDmkxAb5Qs1j0lciURihCOMJ7xMp4fI279OIBsfW3WtxiigLfOzn+3yPU5v2d0/hY1ABrz/elzhs7xFA==}</apiToken>
+    </jenkins.security.ApiTokenProperty>
+    <hudson.model.MyViewsProperty>
+      <views>
+        <hudson.model.AllView>
+          <owner class="hudson.model.MyViewsProperty" reference="../../.."/>
+          <name>all</name>
+          <filterExecutors>false</filterExecutors>
+          <filterQueue>false</filterQueue>
+          <properties class="hudson.model.View$PropertyList"/>
+        </hudson.model.AllView>
+      </views>
+    </hudson.model.MyViewsProperty>
+    <hudson.model.PaneStatusProperties>
+      <collapsed/>
+    </hudson.model.PaneStatusProperties>
+    <hudson.search.UserSearchProperty>
+      <insensitiveSearch>false</insensitiveSearch>
+    </hudson.search.UserSearchProperty>
+    <hudson.security.HudsonPrivateSecurityRealm_-Details>
+      <passwordHash>#jbcrypt:$2a$10$1D8djmPHEmDX9TxJ4DG4eud936OUb8dB3rp9hTFStx5fIZ4.ZdRGO</passwordHash>
+    </hudson.security.HudsonPrivateSecurityRealm_-Details>
+  </properties>
+</user>
diff --git a/test/src/test/resources/hudson/model/UserTest/legacyUserConfigDirsMigrated/users/foo/baz/config.xml b/test/src/test/resources/hudson/model/UserTest/legacyUserConfigDirsMigrated/users/foo/baz/config.xml
new file mode 100644
index 00000000000..9bd5850c420
--- /dev/null
+++ b/test/src/test/resources/hudson/model/UserTest/legacyUserConfigDirsMigrated/users/foo/baz/config.xml
@@ -0,0 +1,29 @@
+<?xml version='1.0' encoding='UTF-8'?>
+<user>
+  <fullName>Foo Baz</fullName>
+  <properties>
+    <jenkins.security.ApiTokenProperty>
+      <apiToken>{AQAAABAAAAAwkxG8Z1KYPi1+vDNVMpTlAypMDOGQJFjr75hA+SUXdcohXsDRsi2L1OTrRvbmFlK02pYleeogvPoblSUuQsJOSA==}</apiToken>
+    </jenkins.security.ApiTokenProperty>
+    <hudson.model.MyViewsProperty>
+      <views>
+        <hudson.model.AllView>
+          <owner class="hudson.model.MyViewsProperty" reference="../../.."/>
+          <name>all</name>
+          <filterExecutors>false</filterExecutors>
+          <filterQueue>false</filterQueue>
+          <properties class="hudson.model.View$PropertyList"/>
+        </hudson.model.AllView>
+      </views>
+    </hudson.model.MyViewsProperty>
+    <hudson.model.PaneStatusProperties>
+      <collapsed/>
+    </hudson.model.PaneStatusProperties>
+    <hudson.search.UserSearchProperty>
+      <insensitiveSearch>false</insensitiveSearch>
+    </hudson.search.UserSearchProperty>
+    <hudson.security.HudsonPrivateSecurityRealm_-Details>
+      <passwordHash>#jbcrypt:$2a$10$RSZgsv46gLn5LJhpagbilOC/Pkc.74scxNbw6RqONsjc9fF3X4vry</passwordHash>
+    </hudson.security.HudsonPrivateSecurityRealm_-Details>
+  </properties>
+</user>
diff --git a/test/src/test/resources/hudson/model/UserTest/legacyUserConfigDirsMigrated/users/foo/config.xml b/test/src/test/resources/hudson/model/UserTest/legacyUserConfigDirsMigrated/users/foo/config.xml
new file mode 100644
index 00000000000..6c4219c9420
--- /dev/null
+++ b/test/src/test/resources/hudson/model/UserTest/legacyUserConfigDirsMigrated/users/foo/config.xml
@@ -0,0 +1,29 @@
+<?xml version='1.0' encoding='UTF-8'?>
+<user>
+  <fullName>Foo</fullName>
+  <properties>
+    <jenkins.security.ApiTokenProperty>
+      <apiToken>{AQAAABAAAAAwre0RkJCk2SvcRB7Lce+95AQodPejQb5rJMjuyd6yrSB/hQeJZzPkW4lbT9ueJO0Ui5CpYeRPEVHQMxvvvgy6dQ==}</apiToken>
+    </jenkins.security.ApiTokenProperty>
+    <hudson.model.MyViewsProperty>
+      <views>
+        <hudson.model.AllView>
+          <owner class="hudson.model.MyViewsProperty" reference="../../.."/>
+          <name>all</name>
+          <filterExecutors>false</filterExecutors>
+          <filterQueue>false</filterQueue>
+          <properties class="hudson.model.View$PropertyList"/>
+        </hudson.model.AllView>
+      </views>
+    </hudson.model.MyViewsProperty>
+    <hudson.model.PaneStatusProperties>
+      <collapsed/>
+    </hudson.model.PaneStatusProperties>
+    <hudson.search.UserSearchProperty>
+      <insensitiveSearch>false</insensitiveSearch>
+    </hudson.search.UserSearchProperty>
+    <hudson.security.HudsonPrivateSecurityRealm_-Details>
+      <passwordHash>#jbcrypt:$2a$10$1sYZ.uQWbRqioql2bqLkfOjuORvXD2b42HMwLhU/9EB2TVfjvSpAG</passwordHash>
+    </hudson.security.HudsonPrivateSecurityRealm_-Details>
+  </properties>
+</user>
