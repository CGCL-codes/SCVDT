diff --git a/spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/SpelView.java b/spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/SpelView.java
deleted file mode 100644
index 3a1cc3e20..000000000
--- a/spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/SpelView.java
+++ /dev/null
@@ -1,80 +0,0 @@
-/*
- * Copyright 2013-2014 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
- * the License. You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
- * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
- * specific language governing permissions and limitations under the License.
- */
-
-package org.springframework.security.oauth2.provider.endpoint;
-
-import java.util.HashMap;
-import java.util.Map;
-
-import javax.servlet.http.HttpServletRequest;
-import javax.servlet.http.HttpServletResponse;
-
-import org.springframework.context.expression.MapAccessor;
-import org.springframework.expression.Expression;
-import org.springframework.expression.spel.standard.SpelExpressionParser;
-import org.springframework.expression.spel.support.StandardEvaluationContext;
-import org.springframework.security.oauth2.common.util.RandomValueStringGenerator;
-import org.springframework.util.PropertyPlaceholderHelper;
-import org.springframework.util.PropertyPlaceholderHelper.PlaceholderResolver;
-import org.springframework.web.servlet.View;
-import org.springframework.web.servlet.support.ServletUriComponentsBuilder;
-
-/**
- * Simple String template renderer.
- * 
- */
-class SpelView implements View {
-
-	private final String template;
-	
-	private final String prefix;
-
-	private final SpelExpressionParser parser = new SpelExpressionParser();
-
-	private final StandardEvaluationContext context = new StandardEvaluationContext();
-
-	private PlaceholderResolver resolver;
-
-	public SpelView(String template) {
-		this.template = template;
-		this.prefix = new RandomValueStringGenerator().generate() + "{";
-		this.context.addPropertyAccessor(new MapAccessor());
-		this.resolver = new PlaceholderResolver() {
-			public String resolvePlaceholder(String name) {
-				Expression expression = parser.parseExpression(name);
-				Object value = expression.getValue(context);
-				return value == null ? null : value.toString();
-			}
-		};
-	}
-
-	public String getContentType() {
-		return "text/html";
-	}
-
-	public void render(Map<String, ?> model, HttpServletRequest request, HttpServletResponse response)
-			throws Exception {
-		Map<String, Object> map = new HashMap<String, Object>(model);
-		String path = ServletUriComponentsBuilder.fromContextPath(request).build()
-				.getPath();
-		map.put("path", (Object) path==null ? "" : path);
-		context.setRootObject(map);
-		String maskedTemplate = template.replace("${", prefix);
-		PropertyPlaceholderHelper helper = new PropertyPlaceholderHelper(prefix, "}");
-		String result = helper.replacePlaceholders(maskedTemplate, resolver);
-		result = result.replace(prefix, "${");
-		response.setContentType(getContentType());
-		response.getWriter().append(result);
-	}
-
-}
\ No newline at end of file
diff --git a/spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/WhitelabelApprovalEndpoint.java b/spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/WhitelabelApprovalEndpoint.java
index 73a643f5b..836b66b16 100644
--- a/spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/WhitelabelApprovalEndpoint.java
+++ b/spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/WhitelabelApprovalEndpoint.java
@@ -1,12 +1,17 @@
 package org.springframework.security.oauth2.provider.endpoint;
 
-import java.util.Map;
-
-import javax.servlet.http.HttpServletRequest;
-
+import org.springframework.security.oauth2.provider.AuthorizationRequest;
+import org.springframework.security.web.csrf.CsrfToken;
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.SessionAttributes;
 import org.springframework.web.servlet.ModelAndView;
+import org.springframework.web.servlet.View;
+import org.springframework.web.servlet.support.ServletUriComponentsBuilder;
+import org.springframework.web.util.HtmlUtils;
+
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+import java.util.Map;
 
 /**
  * Controller for displaying the approval page for the authorization server.
@@ -19,56 +24,91 @@
 
 	@RequestMapping("/oauth/confirm_access")
 	public ModelAndView getAccessConfirmation(Map<String, Object> model, HttpServletRequest request) throws Exception {
-		String template = createTemplate(model, request);
+		final String approvalContent = createTemplate(model, request);
 		if (request.getAttribute("_csrf") != null) {
 			model.put("_csrf", request.getAttribute("_csrf"));
 		}
-		return new ModelAndView(new SpelView(template), model);
+		View approvalView = new View() {
+			@Override
+			public String getContentType() {
+				return "text/html";
+			}
+
+			@Override
+			public void render(Map<String, ?> model, HttpServletRequest request, HttpServletResponse response) throws Exception {
+				response.setContentType(getContentType());
+				response.getWriter().append(approvalContent);
+			}
+		};
+		return new ModelAndView(approvalView, model);
 	}
 
 	protected String createTemplate(Map<String, Object> model, HttpServletRequest request) {
-		String template = TEMPLATE;
-		if (model.containsKey("scopes") || request.getAttribute("scopes") != null) {
-			template = template.replace("%scopes%", createScopes(model, request)).replace("%denial%", "");
+		AuthorizationRequest authorizationRequest = (AuthorizationRequest) model.get("authorizationRequest");
+		String clientId = authorizationRequest.getClientId();
+
+		StringBuilder builder = new StringBuilder();
+		builder.append("<html><body><h1>OAuth Approval</h1>");
+		builder.append("<p>Do you authorize \"").append(HtmlUtils.htmlEscape(clientId));
+		builder.append("\" to access your protected resources?</p>");
+		builder.append("<form id=\"confirmationForm\" name=\"confirmationForm\" action=\"");
+
+		String requestPath = ServletUriComponentsBuilder.fromContextPath(request).build().getPath();
+		if (requestPath == null) {
+			requestPath = "";
 		}
-		else {
-			template = template.replace("%scopes%", "").replace("%denial%", DENIAL);
+
+		builder.append(requestPath).append("/oauth/authorize\" method=\"post\">");
+		builder.append("<input name=\"user_oauth_approval\" value=\"true\" type=\"hidden\"/>");
+
+		String csrfTemplate = null;
+		CsrfToken csrfToken = (CsrfToken) (model.containsKey("_csrf") ? model.get("_csrf") : request.getAttribute("_csrf"));
+		if (csrfToken != null) {
+			csrfTemplate = "<input type=\"hidden\" name=\"" + HtmlUtils.htmlEscape(csrfToken.getParameterName()) +
+					"\" value=\"" + HtmlUtils.htmlEscape(csrfToken.getToken()) + "\" />";
 		}
-		if (model.containsKey("_csrf") || request.getAttribute("_csrf") != null) {
-			template = template.replace("%csrf%", CSRF);
+		if (csrfTemplate != null) {
+			builder.append(csrfTemplate);
 		}
-		else {
-			template = template.replace("%csrf%", "");
+
+		String authorizeInputTemplate = "<label><input name=\"authorize\" value=\"Authorize\" type=\"submit\"/></label></form>";
+
+		if (model.containsKey("scopes") || request.getAttribute("scopes") != null) {
+			builder.append(createScopes(model, request));
+			builder.append(authorizeInputTemplate);
+		} else {
+			builder.append(authorizeInputTemplate);
+			builder.append("<form id=\"denialForm\" name=\"denialForm\" action=\"");
+			builder.append(requestPath).append("/oauth/authorize\" method=\"post\">");
+			builder.append("<input name=\"user_oauth_approval\" value=\"false\" type=\"hidden\"/>");
+			if (csrfTemplate != null) {
+				builder.append(csrfTemplate);
+			}
+			builder.append("<label><input name=\"deny\" value=\"Deny\" type=\"submit\"/></label></form>");
 		}
-		return template;
+
+		builder.append("</body></html>");
+
+		return builder.toString();
 	}
 
 	private CharSequence createScopes(Map<String, Object> model, HttpServletRequest request) {
 		StringBuilder builder = new StringBuilder("<ul>");
 		@SuppressWarnings("unchecked")
-		Map<String, String> scopes = (Map<String, String>) (model.containsKey("scopes") ? model.get("scopes") : request
-				.getAttribute("scopes"));
+		Map<String, String> scopes = (Map<String, String>) (model.containsKey("scopes") ?
+				model.get("scopes") : request.getAttribute("scopes"));
 		for (String scope : scopes.keySet()) {
 			String approved = "true".equals(scopes.get(scope)) ? " checked" : "";
 			String denied = !"true".equals(scopes.get(scope)) ? " checked" : "";
-			String value = SCOPE.replace("%scope%", scope).replace("%key%", scope).replace("%approved%", approved)
-					.replace("%denied%", denied);
-			builder.append(value);
+			scope = HtmlUtils.htmlEscape(scope);
+
+			builder.append("<li><div class=\"form-group\">");
+			builder.append(scope).append(": <input type=\"radio\" name=\"");
+			builder.append(scope).append("\" value=\"true\"").append(approved).append(">Approve</input> ");
+			builder.append("<input type=\"radio\" name=\"").append(scope).append("\" value=\"false\"");
+			builder.append(denied).append(">Deny</input></div></li>");
 		}
 		builder.append("</ul>");
 		return builder.toString();
 	}
-
-	private static String CSRF = "<input type='hidden' name='${_csrf.parameterName}' value='${_csrf.token}' />";
-
-	private static String DENIAL = "<form id='denialForm' name='denialForm' action='${path}/oauth/authorize' method='post'><input name='user_oauth_approval' value='false' type='hidden'/>%csrf%<label><input name='deny' value='Deny' type='submit'/></label></form>";
-
-	private static String TEMPLATE = "<html><body><h1>OAuth Approval</h1>"
-			+ "<p>Do you authorize '${authorizationRequest.clientId}' to access your protected resources?</p>"
-			+ "<form id='confirmationForm' name='confirmationForm' action='${path}/oauth/authorize' method='post'><input name='user_oauth_approval' value='true' type='hidden'/>%csrf%%scopes%<label><input name='authorize' value='Authorize' type='submit'/></label></form>"
-			+ "%denial%</body></html>";
-
-	private static String SCOPE = "<li><div class='form-group'>%scope%: <input type='radio' name='%key%'"
-			+ " value='true'%approved%>Approve</input> <input type='radio' name='%key%' value='false'%denied%>Deny</input></div></li>";
-
-}
+}
\ No newline at end of file
diff --git a/spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/WhitelabelErrorEndpoint.java b/spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/WhitelabelErrorEndpoint.java
index 08bfb61e5..83f626cd4 100644
--- a/spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/WhitelabelErrorEndpoint.java
+++ b/spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/WhitelabelErrorEndpoint.java
@@ -1,15 +1,16 @@
 package org.springframework.security.oauth2.provider.endpoint;
 
-import java.util.HashMap;
-import java.util.Map;
-
-import javax.servlet.http.HttpServletRequest;
-
 import org.springframework.security.oauth2.common.exceptions.OAuth2Exception;
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.servlet.ModelAndView;
+import org.springframework.web.servlet.View;
 import org.springframework.web.util.HtmlUtils;
 
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+import java.util.HashMap;
+import java.util.Map;
+
 /**
  * Controller for displaying the error page for the authorization server.
  *
@@ -18,7 +19,7 @@
 @FrameworkEndpoint
 public class WhitelabelErrorEndpoint {
 
-	private static final String ERROR = "<html><body><h1>OAuth Error</h1><p>${errorSummary}</p></body></html>";
+	private static final String ERROR = "<html><body><h1>OAuth Error</h1><p>%errorSummary%</p></body></html>";
 
 	@RequestMapping("/oauth/error")
 	public ModelAndView handleError(HttpServletRequest request) {
@@ -34,7 +35,19 @@ public ModelAndView handleError(HttpServletRequest request) {
 		else {
 			errorSummary = "Unknown error";
 		}
-		model.put("errorSummary", errorSummary);
-		return new ModelAndView(new SpelView(ERROR), model);
+		final String errorContent = ERROR.replace("%errorSummary%", errorSummary);
+		View errorView = new View() {
+			@Override
+			public String getContentType() {
+				return "text/html";
+			}
+
+			@Override
+			public void render(Map<String, ?> model, HttpServletRequest request, HttpServletResponse response) throws Exception {
+				response.setContentType(getContentType());
+				response.getWriter().append(errorContent);
+			}
+		};
+		return new ModelAndView(errorView, model);
 	}
 }
diff --git a/spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/endpoint/SpelViewTests.java b/spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/endpoint/SpelViewTests.java
deleted file mode 100644
index c7b29f517..000000000
--- a/spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/endpoint/SpelViewTests.java
+++ /dev/null
@@ -1,67 +0,0 @@
-/*
- * Copyright 2012-2015 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.springframework.security.oauth2.provider.endpoint;
-
-import static org.junit.Assert.assertEquals;
-
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.Map;
-
-import org.junit.Test;
-import org.springframework.mock.web.MockHttpServletRequest;
-import org.springframework.mock.web.MockHttpServletResponse;
-
-/**
- * @author Dave Syer
- *
- */
-public class SpelViewTests {
-
-	private SpelView view;
-
-	private MockHttpServletResponse response = new MockHttpServletResponse();
-	private MockHttpServletRequest request = new MockHttpServletRequest();
-
-	@Test
-	public void sunnyDay() throws Exception {
-		view = new SpelView("${hit}");
-		view.render(Collections.singletonMap("hit", "Ouch"), request, response);
-		assertEquals("Ouch", response.getContentAsString());
-	}
-
-	@Test
-	public void nonRecursive() throws Exception {
-		view = new SpelView("${hit}");
-		view.render(Collections.singletonMap("hit", "${ouch}"), request, response);
-		// Expressions embedded in resolved values do not resolve recursively
-		assertEquals("${ouch}", response.getContentAsString());
-	}
-
-	@Test
-	public void recursive() throws Exception {
-		// Recursive expressions in the template resolve
-		view = new SpelView("${${hit}}");
-		Map<String,Object> map = new HashMap<String, Object>();
-		map.put("hit", "me");
-		map.put("me", "${ouch}");
-		view.render(map, request, response);
-		// But expressions embedded in resolved values do not
-		assertEquals("${ouch}", response.getContentAsString());
-	}
-
-}
diff --git a/spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/endpoint/WhitelabelApprovalEndpointTests.java b/spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/endpoint/WhitelabelApprovalEndpointTests.java
index bd05b3383..b37b75306 100644
--- a/spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/endpoint/WhitelabelApprovalEndpointTests.java
+++ b/spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/endpoint/WhitelabelApprovalEndpointTests.java
@@ -14,12 +14,6 @@
 
 package org.springframework.security.oauth2.provider.endpoint;
 
-import static org.junit.Assert.assertTrue;
-
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.Map;
-
 import org.junit.Test;
 import org.springframework.mock.web.MockHttpServletRequest;
 import org.springframework.mock.web.MockHttpServletResponse;
@@ -28,6 +22,12 @@
 import org.springframework.security.web.csrf.DefaultCsrfToken;
 import org.springframework.web.servlet.ModelAndView;
 
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.Map;
+
+import static org.junit.Assert.assertTrue;
+
 /**
  * @author Dave Syer
  *
@@ -98,4 +98,60 @@ public void testApprovalPageWithCsrf() throws Exception {
 		assertTrue("Wrong content: " + content, !content.contains("${"));
 	}
 
-}
+	// gh-1340
+	@Test
+	public void testApprovalPageWithSuspectScope() throws Exception {
+		request.setContextPath("/foo");
+		parameters.put("client_id", "client");
+		HashMap<String, Object> model = new HashMap<String, Object>();
+		model.put("authorizationRequest", createFromParameters(parameters));
+		String scope = "${T(java.lang.Runtime).getRuntime().exec(\"cd ..\")}";
+		String escapedScope = "T(java.lang.Runtime).getRuntime().exec(&quot;cd ..&quot;)";
+		model.put("scopes", Collections.singletonMap(scope, "true"));
+		ModelAndView result = endpoint.getAccessConfirmation(model, request);
+		result.getView().render(result.getModel(), request , response);
+		String content = response.getContentAsString();
+		assertTrue("Wrong content: " + content, !content.contains(scope));
+		assertTrue("Wrong content: " + content, content.contains(escapedScope));
+	}
+
+	@Test
+	public void testApprovalPageWithScopesInForm() throws Exception {
+		String expectedContent = "<html><body><h1>OAuth Approval</h1><p>Do you authorize \"client\" to access your protected resources?</p>" +
+				"<form id=\"confirmationForm\" name=\"confirmationForm\" action=\"/foo/oauth/authorize\" method=\"post\">" +
+				"<input name=\"user_oauth_approval\" value=\"true\" type=\"hidden\"/><input type=\"hidden\" name=\"_csrf\" value=\"FOO\" /><ul>" +
+				"<li><div class=\"form-group\">scope.read: <input type=\"radio\" name=\"scope.read\" value=\"true\" checked>Approve</input> " +
+				"<input type=\"radio\" name=\"scope.read\" value=\"false\">Deny</input></div></li></ul><label>" +
+				"<input name=\"authorize\" value=\"Authorize\" type=\"submit\"/></label></form></body></html>";
+		request.setContextPath("/foo");
+		request.setAttribute("_csrf", new DefaultCsrfToken("X-CSRF-TOKEN", "_csrf", "FOO"));
+		parameters.put("client_id", "client");
+		HashMap<String, Object> model = new HashMap<String, Object>();
+		model.put("authorizationRequest", createFromParameters(parameters));
+		model.put("scopes", Collections.singletonMap("scope.read", "true"));
+		ModelAndView result = endpoint.getAccessConfirmation(model, request);
+		result.getView().render(result.getModel(), request , response);
+		String content = response.getContentAsString();
+		assertTrue("Wrong content: " + content, content.equals(expectedContent));
+	}
+
+	@Test
+	public void testApprovalPageWithoutScopesInForm() throws Exception {
+		String expectedContent = "<html><body><h1>OAuth Approval</h1><p>Do you authorize \"client\" to access your protected resources?</p>" +
+				"<form id=\"confirmationForm\" name=\"confirmationForm\" action=\"/foo/oauth/authorize\" method=\"post\">" +
+				"<input name=\"user_oauth_approval\" value=\"true\" type=\"hidden\"/><input type=\"hidden\" name=\"_csrf\" value=\"FOO\" /><label>" +
+				"<input name=\"authorize\" value=\"Authorize\" type=\"submit\"/></label></form>" +
+				"<form id=\"denialForm\" name=\"denialForm\" action=\"/foo/oauth/authorize\" method=\"post\">" +
+				"<input name=\"user_oauth_approval\" value=\"false\" type=\"hidden\"/><input type=\"hidden\" name=\"_csrf\" value=\"FOO\" /><label>" +
+				"<input name=\"deny\" value=\"Deny\" type=\"submit\"/></label></form></body></html>";
+		request.setContextPath("/foo");
+		request.setAttribute("_csrf", new DefaultCsrfToken("X-CSRF-TOKEN", "_csrf", "FOO"));
+		parameters.put("client_id", "client");
+		HashMap<String, Object> model = new HashMap<String, Object>();
+		model.put("authorizationRequest", createFromParameters(parameters));
+		ModelAndView result = endpoint.getAccessConfirmation(model, request);
+		result.getView().render(result.getModel(), request , response);
+		String content = response.getContentAsString();
+		assertTrue("Wrong content: " + content, content.equals(expectedContent));
+	}
+}
\ No newline at end of file
diff --git a/tests/annotation/approval/src/test/java/demo/AuthorizationCodeProviderTests.java b/tests/annotation/approval/src/test/java/demo/AuthorizationCodeProviderTests.java
index 7b60325b0..2f3ddf7e7 100755
--- a/tests/annotation/approval/src/test/java/demo/AuthorizationCodeProviderTests.java
+++ b/tests/annotation/approval/src/test/java/demo/AuthorizationCodeProviderTests.java
@@ -22,9 +22,9 @@
 public class AuthorizationCodeProviderTests extends AbstractAuthorizationCodeProviderTests {
 
 	protected void verifyAuthorizationPage(String page) {
-		assertTrue(page.contains("action='/oauth/authorize'"));
-		assertTrue(page.contains("<input name='user_oauth_approval'"));
-		assertTrue(page.contains("type='radio")); // approval store
+		assertTrue(page.contains("action=\"/oauth/authorize\""));
+		assertTrue(page.contains("<input name=\"user_oauth_approval\""));
+		assertTrue(page.contains("type=\"radio")); // approval store
 	}
 
 }
diff --git a/tests/annotation/jdbc/src/test/java/demo/AuthorizationCodeProviderTests.java b/tests/annotation/jdbc/src/test/java/demo/AuthorizationCodeProviderTests.java
index 5882b7cd3..27a0a1c4e 100755
--- a/tests/annotation/jdbc/src/test/java/demo/AuthorizationCodeProviderTests.java
+++ b/tests/annotation/jdbc/src/test/java/demo/AuthorizationCodeProviderTests.java
@@ -34,8 +34,8 @@ protected String getUsername() {
 	}
 
 	protected void verifyAuthorizationPage(String page) {
-		assertTrue(page.contains("action='/oauth/authorize'"));
-		assertTrue(page.contains("<input name='user_oauth_approval'"));
-		assertFalse(page.contains("type='radio")); // no approval store
+		assertTrue(page.contains("action=\"/oauth/authorize\""));
+		assertTrue(page.contains("<input name=\"user_oauth_approval\""));
+		assertFalse(page.contains("type=\"radio")); // no approval store
 	}
 }
diff --git a/tests/xml/approval/src/test/java/demo/AuthorizationCodeProviderTests.java b/tests/xml/approval/src/test/java/demo/AuthorizationCodeProviderTests.java
index 3bc5e7dac..f336430f4 100755
--- a/tests/xml/approval/src/test/java/demo/AuthorizationCodeProviderTests.java
+++ b/tests/xml/approval/src/test/java/demo/AuthorizationCodeProviderTests.java
@@ -25,9 +25,9 @@
 public class AuthorizationCodeProviderTests extends AbstractAuthorizationCodeProviderTests {
 
 	protected void verifyAuthorizationPage(String page) {
-		assertTrue(page.contains("action='/oauth/authorize'"));
-		assertTrue(page.contains("<input name='user_oauth_approval'"));
-		assertTrue(page.contains("type='radio")); // approval store
+		assertTrue(page.contains("action=\"/oauth/authorize\""));
+		assertTrue(page.contains("<input name=\"user_oauth_approval\""));
+		assertTrue(page.contains("type=\"radio")); // approval store
 	}
 
 }
diff --git a/tests/xml/jdbc/src/test/java/demo/AuthorizationCodeProviderTests.java b/tests/xml/jdbc/src/test/java/demo/AuthorizationCodeProviderTests.java
index 8c4082abd..32cb5606d 100755
--- a/tests/xml/jdbc/src/test/java/demo/AuthorizationCodeProviderTests.java
+++ b/tests/xml/jdbc/src/test/java/demo/AuthorizationCodeProviderTests.java
@@ -26,8 +26,8 @@
 public class AuthorizationCodeProviderTests extends AbstractAuthorizationCodeProviderTests {
 
 	protected void verifyAuthorizationPage(String page) {
-		assertTrue(page.contains("action='/oauth/authorize'"));
-		assertTrue(page.contains("<input name='user_oauth_approval'"));
-		assertFalse(page.contains("type='radio")); // no approval store
+		assertTrue(page.contains("action=\"/oauth/authorize\""));
+		assertTrue(page.contains("<input name=\"user_oauth_approval\""));
+		assertFalse(page.contains("type=\"radio")); // no approval store
 	}
 }
