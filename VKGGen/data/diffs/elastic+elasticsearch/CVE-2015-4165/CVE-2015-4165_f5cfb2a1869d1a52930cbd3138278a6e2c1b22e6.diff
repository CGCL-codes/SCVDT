diff --git a/docs/reference/migration/migrate_1_6.asciidoc b/docs/reference/migration/migrate_1_6.asciidoc
index 9540d3b67598..6692ba27e92b 100644
--- a/docs/reference/migration/migrate_1_6.asciidoc
+++ b/docs/reference/migration/migrate_1_6.asciidoc
@@ -15,3 +15,18 @@ The More Like This API query has been deprecated and will be removed in 2.0. Ins
 The `top_children` query has been deprecated and will be removed in 2.0. Instead the `has_child` query should be used.
 The `top_children` query isn't always faster than the `has_child` query and the `top_children` query is often inaccurate.
 The total hits and any aggregations in the same search request will likely be off.
+
+[float]
+=== Snapshot and Restore
+
+Locations of file system repositories has to be now registered using `path.repo` setting. The `path.repo`
+setting can contain one or more repository locations:
+
+[source,yaml]
+---------------
+path.repo: ["/mnt/daily", "/mnt/weekly"]
+---------------
+
+If the file system repository location is specified as an absolute path it has to start with one of the locations
+specified in `path.repo`. If the location is specified as a relative path, it will be resolved against the first
+location specified in the `path.repo` setting.
diff --git a/docs/reference/modules/snapshots.asciidoc b/docs/reference/modules/snapshots.asciidoc
index 8f5b101e604f..a939d1621f91 100644
--- a/docs/reference/modules/snapshots.asciidoc
+++ b/docs/reference/modules/snapshots.asciidoc
@@ -9,16 +9,14 @@ backends are available via officially supported repository plugins.
 === Repositories
 
 Before any snapshot or restore operation can be performed a snapshot repository should be registered in
-Elasticsearch. The following command registers a shared file system repository with the name `my_backup` that
-will use location `/mount/backups/my_backup` to store snapshots.
+Elasticsearch. The repository settings are repository-type specific. See below for details.
 
 [source,js]
 -----------------------------------
 $ curl -XPUT 'http://localhost:9200/_snapshot/my_backup' -d '{
-    "type": "fs",
+    "type": "REPOSITORY TYPE",
     "settings": {
-        "location": "/mount/backups/my_backup",
-        "compress": true
+        ... repository specific settings ...
     }
 }'
 -----------------------------------
@@ -60,9 +58,48 @@ $ curl -XGET 'http://localhost:9200/_snapshot/_all'
 [float]
 ===== Shared File System Repository
 
-The shared file system repository (`"type": "fs"`) uses the shared file system to store snapshots. The path
-specified in the `location` parameter should point to the same location in the shared filesystem and be accessible
-on all data and master nodes. The following settings are supported:
+The shared file system repository (`"type": "fs"`) uses the shared file system to store snapshots. In order to register
+the shared file system repository it is necessary to mount the same shared filesystem to the same location on all
+master and data nodes. This location (or one of its parent directories) has to be registered in the `path.repo`
+setting on all master and data nodes.
+
+Assuming that the shared filesystem is mounted to `/mount/backups/my_backup`, the following setting should be added to
+`elasticsearch.yml` file:
+
+[source,yaml]
+--------------
+path.repo: ["/mount/backups", "/mount/longterm_backups"]
+--------------
+
+After all nodes are restarted, the following command can be used to register the shared file system repository with
+the name `my_backup`:
+
+[source,js]
+-----------------------------------
+$ curl -XPUT 'http://localhost:9200/_snapshot/my_backup' -d '{
+    "type": "fs",
+    "settings": {
+        "location": "/mount/backups/my_backup",
+        "compress": true
+    }
+}'
+-----------------------------------
+
+If the repository location is specified as a relative path this path will be resolved against the first path specified
+in `path.repo`:
+
+[source,js]
+-----------------------------------
+$ curl -XPUT 'http://localhost:9200/_snapshot/my_backup' -d '{
+    "type": "fs",
+    "settings": {
+        "location": "my_backup",
+        "compress": true
+    }
+}'
+-----------------------------------
+
+The following settings are supported:
 
 [horizontal]
 `location`:: Location of the snapshots. Mandatory.
diff --git a/docs/reference/setup/dir-layout.asciidoc b/docs/reference/setup/dir-layout.asciidoc
index bf89ea1e775c..be882f94b724 100644
--- a/docs/reference/setup/dir-layout.asciidoc
+++ b/docs/reference/setup/dir-layout.asciidoc
@@ -16,6 +16,8 @@ on the node. Can hold multiple locations. | {path.home}/data| path.data
 | logs | Log files location. | {path.home}/logs | path.logs
 
 | plugins | Plugin files location. Each plugin will be contained in a subdirectory. | {path.home}/plugins | path.plugins
+
+| repo | Shared file system repository locations. Can hold multiple locations. A file system repository can be placed in to any subdirectory of any directory specified here. | empty | path.repo
 |=======================================================================
 
 The multiple data locations allows to stripe it. The striping is simple,
diff --git a/src/main/java/org/elasticsearch/env/Environment.java b/src/main/java/org/elasticsearch/env/Environment.java
index 91be3a47024b..721d3c2658d5 100644
--- a/src/main/java/org/elasticsearch/env/Environment.java
+++ b/src/main/java/org/elasticsearch/env/Environment.java
@@ -30,6 +30,7 @@
 import java.io.InputStreamReader;
 import java.net.MalformedURLException;
 import java.net.URL;
+import java.nio.file.FileSystem;
 
 import static org.elasticsearch.common.Strings.cleanPath;
 import static org.elasticsearch.common.settings.ImmutableSettings.Builder.EMPTY_SETTINGS;
@@ -51,6 +52,8 @@
 
     private final File[] dataWithClusterFiles;
 
+    private final File[] repoFiles;
+
     private final File configFile;
 
     private final File pluginsFile;
@@ -101,6 +104,16 @@ public Environment(Settings settings) {
             dataWithClusterFiles = new File[]{new File(new File(homeFile, "data"), ClusterName.clusterNameFromSettings(settings).value())};
         }
 
+        String[] repoPaths = settings.getAsArray("path.repo");
+        if (repoPaths.length > 0) {
+            repoFiles = new File[repoPaths.length];
+            for (int i = 0; i < repoPaths.length; i++) {
+                repoFiles[i] = new File(repoPaths[i]);
+            }
+        } else {
+            repoFiles = new File[0];
+        }
+
         if (settings.get("path.logs") != null) {
             logsFile = new File(cleanPath(settings.get("path.logs")));
         } else {
@@ -156,6 +169,22 @@ public File workWithClusterFile() {
         return dataWithClusterFiles;
     }
 
+    /**
+     * The shared filesystem repo locations.
+     */
+    public File[] repoFiles() {
+        return repoFiles;
+    }
+
+    /**
+     * Resolves the specified location against the list of configured repository roots
+     *
+     * If the specified location doesn't match any of the roots, returns null.
+     */
+    public File resolveRepoFile(String location) {
+        return resolve(repoFiles, location);
+    }
+
     /**
      * The config location.
      */
@@ -212,4 +241,31 @@ public URL resolveConfig(String path) throws FailedToResolveConfigException {
         }
         throw new FailedToResolveConfigException("Failed to resolve config path [" + origPath + "], tried file path [" + f1 + "], path file [" + f2 + "], and classpath");
     }
+
+    /**
+     * Tries to resolve the given path against the list of available roots.
+     *
+     * If path starts with one of the listed roots, it returned back by this method, otherwise null is returned.
+     */
+    public static File resolve(File[] roots, String path) {
+        for (File root : roots) {
+            File file = new File(path);
+            final File normalizedPath;
+            try {
+                if (file.isAbsolute()) {
+                    normalizedPath = file.getCanonicalFile();
+                } else {
+                    normalizedPath = new File(root, path).getCanonicalFile();
+                }
+            } catch (IOException ex) {
+                continue;
+            }
+            if(normalizedPath.getAbsolutePath().startsWith(root.getAbsolutePath())) {
+                return normalizedPath;
+            }
+        }
+        return null;
+    }
+
+
 }
diff --git a/src/main/java/org/elasticsearch/repositories/fs/FsRepository.java b/src/main/java/org/elasticsearch/repositories/fs/FsRepository.java
index 184c672b0142..aaac27496f26 100644
--- a/src/main/java/org/elasticsearch/repositories/fs/FsRepository.java
+++ b/src/main/java/org/elasticsearch/repositories/fs/FsRepository.java
@@ -24,6 +24,7 @@
 import org.elasticsearch.common.blobstore.fs.FsBlobStore;
 import org.elasticsearch.common.inject.Inject;
 import org.elasticsearch.common.unit.ByteSizeValue;
+import org.elasticsearch.env.Environment;
 import org.elasticsearch.index.snapshots.IndexShardRepository;
 import org.elasticsearch.repositories.RepositoryException;
 import org.elasticsearch.repositories.RepositoryName;
@@ -66,15 +67,23 @@
      * @throws IOException
      */
     @Inject
-    public FsRepository(RepositoryName name, RepositorySettings repositorySettings, IndexShardRepository indexShardRepository) throws IOException {
+    public FsRepository(RepositoryName name, RepositorySettings repositorySettings, IndexShardRepository indexShardRepository, Environment environment) throws IOException {
         super(name.getName(), repositorySettings, indexShardRepository);
         File locationFile;
         String location = repositorySettings.settings().get("location", componentSettings.get("location"));
         if (location == null) {
-            logger.warn("using local fs location for gateway, should be changed to be a shared location across nodes");
+            logger.warn("the repository location is missing, it should point to a shared file system location that is available on all master and data nodes");
             throw new RepositoryException(name.name(), "missing location");
-        } else {
-            locationFile = new File(location);
+        }
+        locationFile = environment.resolveRepoFile(location);
+        if (locationFile == null) {
+            if (environment.repoFiles().length > 0) {
+                logger.warn("The specified location [{}] doesn't start with any repository paths specified by the path.repo setting: [{}] ", location, environment.repoFiles());
+                throw new RepositoryException(name.name(), "location [" + location + "] doesn't match any of the locations specified by path.repo");
+            } else {
+                logger.warn("The specified location [{}] should start with a repository path specified by the path.repo setting, but the path.repo setting was not set on this node", location);
+                throw new RepositoryException(name.name(), "location [" + location + "] doesn't match any of the locations specified by path.repo because this setting is empty");
+            }
         }
         blobStore = new FsBlobStore(componentSettings, locationFile);
         this.chunkSize = repositorySettings.settings().getAsBytesSize("chunk_size", componentSettings.getAsBytesSize("chunk_size", null));
diff --git a/src/test/java/org/elasticsearch/env/EnvironmentTests.java b/src/test/java/org/elasticsearch/env/EnvironmentTests.java
new file mode 100644
index 000000000000..e7e63e184cfc
--- /dev/null
+++ b/src/test/java/org/elasticsearch/env/EnvironmentTests.java
@@ -0,0 +1,60 @@
+/*
+ * Licensed to Elasticsearch under one or more contributor
+ * license agreements. See the NOTICE file distributed with
+ * this work for additional information regarding copyright
+ * ownership. Elasticsearch licenses this file to you under
+ * the Apache License, Version 2.0 (the "License"); you may
+ * not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.elasticsearch.env;
+
+import org.elasticsearch.common.settings.ImmutableSettings;
+import org.elasticsearch.common.settings.Settings;
+import org.elasticsearch.test.ElasticsearchTestCase;
+import org.junit.Test;
+
+import java.io.File;
+import java.io.IOException;
+
+import static org.elasticsearch.common.settings.ImmutableSettings.settingsBuilder;
+import static org.hamcrest.CoreMatchers.notNullValue;
+import static org.hamcrest.CoreMatchers.nullValue;
+
+public class EnvironmentTests extends ElasticsearchTestCase {
+
+    public Environment newEnvironment() throws IOException {
+        return newEnvironment(ImmutableSettings.EMPTY);
+    }
+
+    public Environment newEnvironment(Settings settings) throws IOException {
+        Settings build = ImmutableSettings.builder()
+                .put(settings)
+                .put("path.home", newTempDir().getAbsolutePath())
+                .putArray("path.data", "data").build();
+        return new Environment(build);
+    }
+
+    @Test
+    public void testRepositoryResolution() throws IOException {
+        Environment environment = newEnvironment();
+        assertThat(environment.resolveRepoFile("/test/repos/repo1"), nullValue());
+        assertThat(environment.resolveRepoFile("test/repos/repo1"), nullValue());
+        environment = newEnvironment(settingsBuilder().putArray("path.repo", "/test/repos", "/another/repos").build());
+        assertThat(environment.resolveRepoFile("/test/repos/repo1"), notNullValue());
+        assertThat(environment.resolveRepoFile("test/repos/repo1"), notNullValue());
+        assertThat(environment.resolveRepoFile("/another/repos/repo1"), notNullValue());
+        assertThat(environment.resolveRepoFile("/test/repos/../repo1"), nullValue());
+        assertThat(environment.resolveRepoFile("/test/repos/../repos/repo1"), notNullValue());
+        assertThat(environment.resolveRepoFile("/somethingeles/repos/repo1"), nullValue());
+    }
+}
\ No newline at end of file
diff --git a/src/test/java/org/elasticsearch/index/IndexWithShadowReplicasTests.java b/src/test/java/org/elasticsearch/index/IndexWithShadowReplicasTests.java
index 66d2df07cf03..f65e9a36ad5c 100644
--- a/src/test/java/org/elasticsearch/index/IndexWithShadowReplicasTests.java
+++ b/src/test/java/org/elasticsearch/index/IndexWithShadowReplicasTests.java
@@ -106,7 +106,7 @@ public void testRestoreToShadow() throws ExecutionException, InterruptedExceptio
 
         assertAcked(client().admin().cluster().preparePutRepository("test-repo")
                 .setType("fs").setSettings(ImmutableSettings.settingsBuilder()
-                        .put("location", newTempDir().toPath())));
+                        .put("location", randomRepoPath())));
         CreateSnapshotResponse createSnapshotResponse = client().admin().cluster().prepareCreateSnapshot("test-repo", "test-snap").setWaitForCompletion(true).setIndices("foo").get();
         assertThat(createSnapshotResponse.getSnapshotInfo().successfulShards(), greaterThan(0));
         assertThat(createSnapshotResponse.getSnapshotInfo().successfulShards(), equalTo(createSnapshotResponse.getSnapshotInfo().totalShards()));
diff --git a/src/test/java/org/elasticsearch/index/store/CorruptedFileTest.java b/src/test/java/org/elasticsearch/index/store/CorruptedFileTest.java
index 9626982522f8..87e35d618931 100644
--- a/src/test/java/org/elasticsearch/index/store/CorruptedFileTest.java
+++ b/src/test/java/org/elasticsearch/index/store/CorruptedFileTest.java
@@ -488,7 +488,7 @@ public void testCorruptFileThenSnapshotAndRestore() throws ExecutionException, I
         logger.info("-->  creating repository");
         assertAcked(client().admin().cluster().preparePutRepository("test-repo")
                 .setType("fs").setSettings(ImmutableSettings.settingsBuilder()
-                        .put("location", newTempDir(LifecycleScope.SUITE).getAbsolutePath())
+                        .put("location", randomRepoPath().getAbsolutePath())
                         .put("compress", randomBoolean())
                         .put("chunk_size", randomIntBetween(100, 1000))));
         logger.info("--> snapshot");
diff --git a/src/test/java/org/elasticsearch/indices/IndicesOptionsIntegrationTests.java b/src/test/java/org/elasticsearch/indices/IndicesOptionsIntegrationTests.java
index 00b699365844..bd371dc424bc 100644
--- a/src/test/java/org/elasticsearch/indices/IndicesOptionsIntegrationTests.java
+++ b/src/test/java/org/elasticsearch/indices/IndicesOptionsIntegrationTests.java
@@ -331,7 +331,7 @@ public void testSpecifiedIndexUnavailable_snapshotRestore() throws Exception {
         waitForRelocation();
 
         PutRepositoryResponse putRepositoryResponse = client().admin().cluster().preparePutRepository("dummy-repo")
-                .setType("fs").setSettings(ImmutableSettings.settingsBuilder().put("location", newTempDir())).get();
+                .setType("fs").setSettings(ImmutableSettings.settingsBuilder().put("location", randomRepoPath())).get();
         assertThat(putRepositoryResponse.isAcknowledged(), equalTo(true));
         client().admin().cluster().prepareCreateSnapshot("dummy-repo", "snap1").setWaitForCompletion(true).get();
 
@@ -493,7 +493,7 @@ public void testWildcardBehaviour_snapshotRestore() throws Exception {
         waitForRelocation();
 
         PutRepositoryResponse putRepositoryResponse = client().admin().cluster().preparePutRepository("dummy-repo")
-                .setType("fs").setSettings(ImmutableSettings.settingsBuilder().put("location", newTempDir())).get();
+                .setType("fs").setSettings(ImmutableSettings.settingsBuilder().put("location", randomRepoPath())).get();
         assertThat(putRepositoryResponse.isAcknowledged(), equalTo(true));
         client().admin().cluster().prepareCreateSnapshot("dummy-repo", "snap1").setWaitForCompletion(true).get();
 
diff --git a/src/test/java/org/elasticsearch/indices/recovery/IndexRecoveryTests.java b/src/test/java/org/elasticsearch/indices/recovery/IndexRecoveryTests.java
index fe2da61f3198..140496be74e9 100644
--- a/src/test/java/org/elasticsearch/indices/recovery/IndexRecoveryTests.java
+++ b/src/test/java/org/elasticsearch/indices/recovery/IndexRecoveryTests.java
@@ -427,7 +427,7 @@ public void snapshotRecoveryTest() throws Exception {
         logger.info("--> create repository");
         assertAcked(client().admin().cluster().preparePutRepository(REPO_NAME)
                 .setType("fs").setSettings(ImmutableSettings.settingsBuilder()
-                                .put("location", newTempDir(LifecycleScope.SUITE))
+                                .put("location", randomRepoPath())
                                 .put("compress", false)
                 ).get());
 
diff --git a/src/test/java/org/elasticsearch/snapshots/DedicatedClusterSnapshotRestoreTests.java b/src/test/java/org/elasticsearch/snapshots/DedicatedClusterSnapshotRestoreTests.java
index 089e574b80c3..a94bce7eb0a8 100644
--- a/src/test/java/org/elasticsearch/snapshots/DedicatedClusterSnapshotRestoreTests.java
+++ b/src/test/java/org/elasticsearch/snapshots/DedicatedClusterSnapshotRestoreTests.java
@@ -114,7 +114,7 @@ public void restorePersistentSettingsTest() throws Exception {
 
         logger.info("--> create repository");
         PutRepositoryResponse putRepositoryResponse = client.admin().cluster().preparePutRepository("test-repo")
-                .setType("fs").setSettings(ImmutableSettings.settingsBuilder().put("location", newTempDir())).execute().actionGet();
+                .setType("fs").setSettings(ImmutableSettings.settingsBuilder().put("location", randomRepoPath())).execute().actionGet();
         assertThat(putRepositoryResponse.isAcknowledged(), equalTo(true));
 
         logger.info("--> start snapshot");
@@ -147,7 +147,7 @@ public void restorePersistentSettingsTest() throws Exception {
 
     @Test
     public void restoreCustomMetadata() throws Exception {
-        File tempDir = newTempDir();
+        File tempDir = randomRepoPath();
 
         logger.info("--> start node");
         internalCluster().startNode(settingsBuilder().put("gateway.type", "local"));
@@ -294,7 +294,7 @@ public void snapshotDuringNodeShutdownTest() throws Exception {
         PutRepositoryResponse putRepositoryResponse = client.admin().cluster().preparePutRepository("test-repo")
                 .setType(MockRepositoryModule.class.getCanonicalName()).setSettings(
                         ImmutableSettings.settingsBuilder()
-                                .put("location", newTempDir(LifecycleScope.TEST))
+                                .put("location", randomRepoPath())
                                 .put("random", randomAsciiOfLength(10))
                                 .put("wait_after_unblock", 200)
                 ).get();
@@ -342,7 +342,7 @@ public void snapshotWithStuckNodeTest() throws Exception {
         PutRepositoryResponse putRepositoryResponse = client.admin().cluster().preparePutRepository("test-repo")
                 .setType(MockRepositoryModule.class.getCanonicalName()).setSettings(
                         ImmutableSettings.settingsBuilder()
-                                .put("location", newTempDir(LifecycleScope.TEST))
+                                .put("location", randomRepoPath())
                                 .put("random", randomAsciiOfLength(10))
                                 .put("wait_after_unblock", 200)
                 ).get();
@@ -430,7 +430,7 @@ public void restoreIndexWithMissingShards() throws Exception {
         logger.info("--> create repository");
         logger.info("--> creating repository");
         PutRepositoryResponse putRepositoryResponse = client().admin().cluster().preparePutRepository("test-repo")
-                .setType("fs").setSettings(ImmutableSettings.settingsBuilder().put("location", newTempDir())).execute().actionGet();
+                .setType("fs").setSettings(ImmutableSettings.settingsBuilder().put("location", randomRepoPath())).execute().actionGet();
         assertThat(putRepositoryResponse.isAcknowledged(), equalTo(true));
 
         logger.info("--> start snapshot with default settings and closed index - should be blocked");
@@ -545,7 +545,7 @@ public void restoreIndexWithShardsMissingInLocalGateway() throws Exception {
 
         logger.info("--> create repository");
         PutRepositoryResponse putRepositoryResponse = client().admin().cluster().preparePutRepository("test-repo")
-                .setType("fs").setSettings(ImmutableSettings.settingsBuilder().put("location", newTempDir())).execute().actionGet();
+                .setType("fs").setSettings(ImmutableSettings.settingsBuilder().put("location", randomRepoPath())).execute().actionGet();
         assertThat(putRepositoryResponse.isAcknowledged(), equalTo(true));
         int numberOfShards = 6;
         logger.info("--> create an index that will have some unallocated shards");
@@ -604,12 +604,12 @@ public void registrationFailureTest() {
         for (int i = 0; i < 5; i++) {
             client().admin().cluster().preparePutRepository("test-repo" + i)
                     .setType("mock").setSettings(ImmutableSettings.settingsBuilder()
-                    .put("location", newTempDir(LifecycleScope.SUITE))).setVerify(false).get();
+                    .put("location", randomRepoPath())).setVerify(false).get();
         }
         logger.info("--> make sure that properly setup repository can be registered on all nodes");
         client().admin().cluster().preparePutRepository("test-repo-0")
                 .setType("fs").setSettings(ImmutableSettings.settingsBuilder()
-                .put("location", newTempDir(LifecycleScope.SUITE))).get();
+                .put("location", randomRepoPath())).get();
 
     }
 
@@ -627,7 +627,7 @@ public void chaosSnapshotTest() throws Exception {
         logger.info("-->  creating repository");
         assertAcked(client().admin().cluster().preparePutRepository("test-repo")
                 .setType("fs").setSettings(ImmutableSettings.settingsBuilder()
-                        .put("location", newTempDir(LifecycleScope.SUITE))
+                        .put("location", randomRepoPath())
                         .put("compress", randomBoolean())
                         .put("chunk_size", randomIntBetween(100, 1000))));
 
diff --git a/src/test/java/org/elasticsearch/snapshots/RepositoriesTests.java b/src/test/java/org/elasticsearch/snapshots/RepositoriesTests.java
index b0149c4836d3..f5048b088e10 100644
--- a/src/test/java/org/elasticsearch/snapshots/RepositoriesTests.java
+++ b/src/test/java/org/elasticsearch/snapshots/RepositoriesTests.java
@@ -52,7 +52,7 @@
     public void testRepositoryCreation() throws Exception {
         Client client = client();
 
-        File location = newTempDir(LifecycleScope.SUITE);
+        File location = randomRepoPath();
 
         logger.info("-->  creating repository");
         PutRepositoryResponse putRepositoryResponse = client.admin().cluster().preparePutRepository("test-repo-1")
@@ -80,7 +80,7 @@ public void testRepositoryCreation() throws Exception {
         logger.info("-->  creating another repository");
         putRepositoryResponse = client.admin().cluster().preparePutRepository("test-repo-2")
                 .setType("fs").setSettings(ImmutableSettings.settingsBuilder()
-                                .put("location", newTempDir(LifecycleScope.SUITE))
+                                .put("location", randomRepoPath())
                 ).get();
         assertThat(putRepositoryResponse.isAcknowledged(), equalTo(true));
 
@@ -140,7 +140,7 @@ public void repositoryAckTimeoutTest() throws Exception {
         logger.info("-->  creating repository test-repo-1 with 0s timeout - shouldn't ack");
         PutRepositoryResponse putRepositoryResponse = client().admin().cluster().preparePutRepository("test-repo-1")
                 .setType("fs").setSettings(ImmutableSettings.settingsBuilder()
-                                .put("location", newTempDir(LifecycleScope.SUITE))
+                                .put("location", randomRepoPath())
                                 .put("compress", randomBoolean())
                                 .put("chunk_size", randomIntBetween(5, 100))
                 )
@@ -150,7 +150,7 @@ public void repositoryAckTimeoutTest() throws Exception {
         logger.info("-->  creating repository test-repo-2 with standard timeout - should ack");
         putRepositoryResponse = client().admin().cluster().preparePutRepository("test-repo-2")
                 .setType("fs").setSettings(ImmutableSettings.settingsBuilder()
-                                .put("location", newTempDir(LifecycleScope.SUITE))
+                                .put("location", randomRepoPath())
                                 .put("compress", randomBoolean())
                                 .put("chunk_size", randomIntBetween(5, 100))
                 ).get();
@@ -171,7 +171,7 @@ public void repositoryVerificationTest() throws Exception {
         Client client = client();
 
         Settings settings = ImmutableSettings.settingsBuilder()
-                .put("location", newTempDir(LifecycleScope.SUITE))
+                .put("location", randomRepoPath())
                 .put("random_control_io_exception_rate", 1.0).build();
         logger.info("-->  creating repository that cannot write any files - should fail");
         assertThrows(client.admin().cluster().preparePutRepository("test-repo-1")
@@ -185,7 +185,7 @@ public void repositoryVerificationTest() throws Exception {
         logger.info("-->  verifying repository");
         assertThrows(client.admin().cluster().prepareVerifyRepository("test-repo-1"), RepositoryVerificationException.class);
 
-        File location = newTempDir(LifecycleScope.SUITE);
+        File location = randomRepoPath();
 
         logger.info("-->  creating repository");
         try {
@@ -206,7 +206,7 @@ public void repositoryVerificationTimeoutTest() throws Exception {
         Client client = client();
 
         Settings settings = ImmutableSettings.settingsBuilder()
-                .put("location", newTempDir(LifecycleScope.SUITE))
+                .put("location", randomRepoPath())
                 .put("random_control_io_exception_rate", 1.0).build();
         logger.info("-->  creating repository that cannot write any files - should fail");
         assertThrows(client.admin().cluster().preparePutRepository("test-repo-1")
@@ -220,7 +220,7 @@ public void repositoryVerificationTimeoutTest() throws Exception {
         logger.info("-->  verifying repository");
         assertThrows(client.admin().cluster().prepareVerifyRepository("test-repo-1"), RepositoryVerificationException.class);
 
-        File location = newTempDir(LifecycleScope.SUITE);
+        File location = randomRepoPath();
 
         logger.info("-->  creating repository");
         try {
diff --git a/src/test/java/org/elasticsearch/snapshots/SharedClusterSnapshotRestoreTests.java b/src/test/java/org/elasticsearch/snapshots/SharedClusterSnapshotRestoreTests.java
index b9b4335a751d..6058cbb0dd13 100644
--- a/src/test/java/org/elasticsearch/snapshots/SharedClusterSnapshotRestoreTests.java
+++ b/src/test/java/org/elasticsearch/snapshots/SharedClusterSnapshotRestoreTests.java
@@ -86,7 +86,7 @@ public void basicWorkFlowTest() throws Exception {
         logger.info("-->  creating repository");
         assertAcked(client.admin().cluster().preparePutRepository("test-repo")
                 .setType("fs").setSettings(ImmutableSettings.settingsBuilder()
-                        .put("location", newTempDir())
+                        .put("location", randomRepoPath())
                         .put("compress", randomBoolean())
                         .put("chunk_size", randomIntBetween(100, 1000))));
 
@@ -181,7 +181,7 @@ public void singleGetAfterRestoreTest() throws Exception {
         String indexName = "testindex";
         String repoName = "test-restore-snapshot-repo";
         String snapshotName = "test-restore-snapshot";
-        String absolutePath = newTempDir().getAbsolutePath();
+        String absolutePath = randomRepoPath().getAbsolutePath();
         logger.info("Path [{}]", absolutePath);
         String restoredIndexName = indexName + "-restored";
         String typeName = "actions";
@@ -227,7 +227,7 @@ public void testFreshIndexUUID() {
         logger.info("-->  creating repository");
         assertAcked(client.admin().cluster().preparePutRepository("test-repo")
                 .setType("fs").setSettings(ImmutableSettings.settingsBuilder()
-                        .put("location", newTempDir())
+                        .put("location", randomRepoPath())
                         .put("compress", randomBoolean())
                         .put("chunk_size", randomIntBetween(100, 1000))));
 
@@ -276,7 +276,7 @@ public void restoreWithDifferentMappingsAndSettingsTest() throws Exception {
         logger.info("-->  creating repository");
         assertAcked(client.admin().cluster().preparePutRepository("test-repo")
                 .setType("fs").setSettings(ImmutableSettings.settingsBuilder()
-                        .put("location", newTempDir())
+                        .put("location", randomRepoPath())
                         .put("compress", randomBoolean())
                         .put("chunk_size", randomIntBetween(100, 1000))));
 
@@ -324,7 +324,7 @@ public void emptySnapshotTest() throws Exception {
 
         logger.info("-->  creating repository");
         PutRepositoryResponse putRepositoryResponse = client.admin().cluster().preparePutRepository("test-repo")
-                .setType("fs").setSettings(ImmutableSettings.settingsBuilder().put("location", newTempDir())).get();
+                .setType("fs").setSettings(ImmutableSettings.settingsBuilder().put("location", randomRepoPath())).get();
         assertThat(putRepositoryResponse.isAcknowledged(), equalTo(true));
 
         logger.info("--> snapshot");
@@ -341,7 +341,7 @@ public void restoreAliasesTest() throws Exception {
 
         logger.info("-->  creating repository");
         assertAcked(client.admin().cluster().preparePutRepository("test-repo")
-                .setType("fs").setSettings(ImmutableSettings.settingsBuilder().put("location", newTempDir())));
+                .setType("fs").setSettings(ImmutableSettings.settingsBuilder().put("location", randomRepoPath())));
 
         logger.info("--> create test indices");
         createIndex("test-idx-1", "test-idx-2", "test-idx-3");
@@ -397,7 +397,7 @@ public void restoreTemplatesTest() throws Exception {
 
         logger.info("-->  creating repository");
         assertAcked(client.admin().cluster().preparePutRepository("test-repo")
-                .setType("fs").setSettings(ImmutableSettings.settingsBuilder().put("location", newTempDir())));
+                .setType("fs").setSettings(ImmutableSettings.settingsBuilder().put("location", randomRepoPath())));
 
         logger.info("-->  creating test template");
         assertThat(client.admin().indices().preparePutTemplate("test-template").setTemplate("te*").addMapping("test-mapping", "{}").get().isAcknowledged(), equalTo(true));
@@ -429,7 +429,7 @@ public void includeGlobalStateTest() throws Exception {
         Client client = client();
 
         logger.info("-->  creating repository");
-        File location = newTempDir();
+        File location = randomRepoPath();
         assertAcked(client.admin().cluster().preparePutRepository("test-repo")
                 .setType("fs").setSettings(ImmutableSettings.settingsBuilder().put("location", location)));
 
@@ -511,7 +511,7 @@ public void snapshotFileFailureDuringSnapshotTest() throws Exception {
         assertAcked(client.admin().cluster().preparePutRepository("test-repo")
                 .setType(MockRepositoryModule.class.getCanonicalName()).setSettings(
                         ImmutableSettings.settingsBuilder()
-                                .put("location", newTempDir())
+                                .put("location", randomRepoPath())
                                 .put("random", randomAsciiOfLength(10))
                                 .put("random_control_io_exception_rate", 0.2))
                 .setVerify(false));
@@ -561,7 +561,7 @@ public void dataFileFailureDuringSnapshotTest() throws Exception {
         assertAcked(client.admin().cluster().preparePutRepository("test-repo")
                 .setType(MockRepositoryModule.class.getCanonicalName()).setSettings(
                         ImmutableSettings.settingsBuilder()
-                                .put("location", newTempDir())
+                                .put("location", randomRepoPath())
                                 .put("random", randomAsciiOfLength(10))
                                 .put("random_data_file_io_exception_rate", 0.3)));
 
@@ -623,7 +623,7 @@ public void dataFileFailureDuringSnapshotTest() throws Exception {
 
     @Test
     public void dataFileFailureDuringRestoreTest() throws Exception {
-        File repositoryLocation = newTempDir();
+        File repositoryLocation = randomRepoPath();
         Client client = client();
         logger.info("-->  creating repository");
         assertAcked(client.admin().cluster().preparePutRepository("test-repo")
@@ -665,7 +665,7 @@ public void dataFileFailureDuringRestoreTest() throws Exception {
 
     @Test
     public void deletionOfFailingToRecoverIndexShouldStopRestore() throws Exception {
-        File repositoryLocation = newTempDir();
+        File repositoryLocation = randomRepoPath();
         Client client = client();
         logger.info("-->  creating repository");
         assertAcked(client.admin().cluster().preparePutRepository("test-repo")
@@ -734,7 +734,7 @@ public void unallocatedShardsTest() throws Exception {
         logger.info("-->  creating repository");
         assertAcked(client.admin().cluster().preparePutRepository("test-repo")
                 .setType("fs").setSettings(ImmutableSettings.settingsBuilder()
-                        .put("location", newTempDir())));
+                        .put("location", randomRepoPath())));
 
         logger.info("-->  creating index that cannot be allocated");
         prepareCreate("test-idx", 2, ImmutableSettings.builder().put(FilterAllocationDecider.INDEX_ROUTING_INCLUDE_GROUP + ".tag", "nowhere").put("index.number_of_shards", 3)).get();
@@ -752,7 +752,7 @@ public void deleteSnapshotTest() throws Exception {
         final int numberOfSnapshots = between(5, 15);
         Client client = client();
 
-        File repo = newTempDir();
+        File repo = randomRepoPath();
         logger.info("-->  creating repository at " + repo.getAbsolutePath());
         assertAcked(client.admin().cluster().preparePutRepository("test-repo")
                 .setType("fs").setSettings(ImmutableSettings.settingsBuilder()
@@ -809,7 +809,7 @@ public void deleteSnapshotTest() throws Exception {
     public void deleteSnapshotWithMissingIndexAndShardMetadataTest() throws Exception {
         Client client = client();
 
-        File repo = newTempDir();
+        File repo = randomRepoPath();
         logger.info("-->  creating repository at " + repo.getAbsolutePath());
         assertAcked(client.admin().cluster().preparePutRepository("test-repo")
                 .setType("fs").setSettings(ImmutableSettings.settingsBuilder()
@@ -848,7 +848,7 @@ public void deleteSnapshotWithMissingIndexAndShardMetadataTest() throws Exceptio
     public void deleteSnapshotWithMissingMetadataTest() throws Exception {
         Client client = client();
 
-        File repo = newTempDir();
+        File repo = randomRepoPath();
         logger.info("-->  creating repository at " + repo.getAbsolutePath());
         assertAcked(client.admin().cluster().preparePutRepository("test-repo")
                 .setType("fs").setSettings(ImmutableSettings.settingsBuilder()
@@ -883,7 +883,7 @@ public void deleteSnapshotWithMissingMetadataTest() throws Exception {
     public void deleteSnapshotWithCorruptedSnapshotFileTest() throws Exception {
         Client client = client();
 
-        File repo = newTempDir();
+        File repo = randomRepoPath();
         logger.info("-->  creating repository at " + repo.getAbsolutePath());
         assertAcked(client.admin().cluster().preparePutRepository("test-repo")
                 .setType("fs").setSettings(ImmutableSettings.settingsBuilder()
@@ -928,7 +928,7 @@ public void snapshotClosedIndexTest() throws Exception {
         logger.info("-->  creating repository");
         assertAcked(client.admin().cluster().preparePutRepository("test-repo")
                 .setType("fs").setSettings(ImmutableSettings.settingsBuilder()
-                        .put("location", newTempDir())));
+                        .put("location", randomRepoPath())));
 
         createIndex("test-idx", "test-idx-closed");
         ensureGreen();
@@ -957,7 +957,7 @@ public void snapshotSingleClosedIndexTest() throws Exception {
         logger.info("-->  creating repository");
         assertAcked(client.admin().cluster().preparePutRepository("test-repo")
                 .setType("fs").setSettings(ImmutableSettings.settingsBuilder()
-                        .put("location", newTempDir())));
+                        .put("location", randomRepoPath())));
 
         createIndex("test-idx");
         ensureGreen();
@@ -976,7 +976,7 @@ public void renameOnRestoreTest() throws Exception {
         logger.info("-->  creating repository");
         assertAcked(client.admin().cluster().preparePutRepository("test-repo")
                 .setType("fs").setSettings(ImmutableSettings.settingsBuilder()
-                        .put("location", newTempDir())));
+                        .put("location", randomRepoPath())));
 
         createIndex("test-idx-1", "test-idx-2", "test-idx-3");
         ensureGreen();
@@ -1092,7 +1092,7 @@ public void renameOnRestoreTest() throws Exception {
     @Test
     public void moveShardWhileSnapshottingTest() throws Exception {
         Client client = client();
-        File repositoryLocation = newTempDir();
+        File repositoryLocation = randomRepoPath();
         logger.info("-->  creating repository");
         assertAcked(client.admin().cluster().preparePutRepository("test-repo")
                 .setType(MockRepositoryModule.class.getCanonicalName()).setSettings(
@@ -1154,7 +1154,7 @@ public void moveShardWhileSnapshottingTest() throws Exception {
     @Test
     public void deleteRepositoryWhileSnapshottingTest() throws Exception {
         Client client = client();
-        File repositoryLocation = newTempDir();
+        File repositoryLocation = randomRepoPath();
         logger.info("-->  creating repository");
         PutRepositoryResponse putRepositoryResponse = client.admin().cluster().preparePutRepository("test-repo")
                 .setType(MockRepositoryModule.class.getCanonicalName()).setSettings(
@@ -1239,7 +1239,7 @@ public void urlRepositoryTest() throws Exception {
         Client client = client();
 
         logger.info("-->  creating repository");
-        File repositoryLocation = newTempDir();
+        File repositoryLocation = randomRepoPath();
         assertAcked(client.admin().cluster().preparePutRepository("test-repo")
                 .setType("fs").setSettings(ImmutableSettings.settingsBuilder()
                         .put("location", repositoryLocation)
@@ -1297,7 +1297,7 @@ public void throttlingTest() throws Exception {
         Client client = client();
 
         logger.info("-->  creating repository");
-        File repositoryLocation = newTempDir();
+        File repositoryLocation = randomRepoPath();
         boolean throttleSnapshot = randomBoolean();
         boolean throttleRestore = randomBoolean();
         assertAcked(client.admin().cluster().preparePutRepository("test-repo")
@@ -1355,7 +1355,7 @@ public void throttlingTest() throws Exception {
     @Test
     public void snapshotStatusTest() throws Exception {
         Client client = client();
-        File repositoryLocation = newTempDir();
+        File repositoryLocation = randomRepoPath();
         logger.info("-->  creating repository");
         PutRepositoryResponse putRepositoryResponse = client.admin().cluster().preparePutRepository("test-repo")
                 .setType(MockRepositoryModule.class.getCanonicalName()).setSettings(
@@ -1450,7 +1450,7 @@ public void snapshotRelocatingPrimary() throws Exception {
         logger.info("-->  creating repository");
         assertAcked(client.admin().cluster().preparePutRepository("test-repo")
                 .setType("fs").setSettings(ImmutableSettings.settingsBuilder()
-                        .put("location", newTempDir())
+                        .put("location", randomRepoPath())
                         .put("compress", randomBoolean())
                         .put("chunk_size", randomIntBetween(100, 1000))));
 
@@ -1498,7 +1498,7 @@ public void testSnapshotMoreThanOnce() throws ExecutionException, InterruptedExc
         logger.info("-->  creating repository");
         assertAcked(client.admin().cluster().preparePutRepository("test-repo")
                 .setType("fs").setSettings(ImmutableSettings.settingsBuilder()
-                        .put("location", newTempDir())
+                        .put("location", randomRepoPath())
                         .put("compress", randomBoolean())
                         .put("chunk_size", randomIntBetween(100, 1000))));
 
@@ -1561,7 +1561,7 @@ public void changeSettingsOnRestoreTest() throws Exception {
         logger.info("-->  creating repository");
         assertAcked(client.admin().cluster().preparePutRepository("test-repo")
                 .setType("fs").setSettings(ImmutableSettings.settingsBuilder()
-                        .put("location", newTempDir())
+                        .put("location", randomRepoPath())
                         .put("compress", randomBoolean())
                         .put("chunk_size", randomIntBetween(100, 1000))));
 
@@ -1678,7 +1678,7 @@ public void deleteIndexDuringSnapshotTest() throws Exception {
         logger.info("-->  creating repository");
         assertAcked(client.admin().cluster().preparePutRepository("test-repo")
                 .setType(MockRepositoryModule.class.getCanonicalName()).setSettings(ImmutableSettings.settingsBuilder()
-                        .put("location", newTempDir())
+                        .put("location", randomRepoPath())
                         .put("compress", randomBoolean())
                         .put("chunk_size", randomIntBetween(100, 1000))
                         .put("block_on_init", true)
@@ -1730,7 +1730,7 @@ public void deleteOrphanSnapshotTest() throws Exception {
         logger.info("-->  creating repository");
         assertAcked(client.admin().cluster().preparePutRepository("test-repo")
                 .setType(MockRepositoryModule.class.getCanonicalName()).setSettings(ImmutableSettings.settingsBuilder()
-                                .put("location", newTempDir())
+                                .put("location", randomRepoPath())
                                 .put("compress", randomBoolean())
                                 .put("chunk_size", randomIntBetween(100, 1000))
                 ));
@@ -1810,7 +1810,7 @@ public void batchingShardUpdateTaskTest() throws Exception {
         logger.info("-->  creating repository");
         assertAcked(client.admin().cluster().preparePutRepository("test-repo")
                 .setType("fs").setSettings(ImmutableSettings.settingsBuilder()
-                        .put("location", newTempDir())
+                        .put("location", randomRepoPath())
                         .put("compress", randomBoolean())
                         .put("chunk_size", randomIntBetween(100, 1000))));
 
diff --git a/src/test/java/org/elasticsearch/snapshots/SnapshotBackwardsCompatibilityTest.java b/src/test/java/org/elasticsearch/snapshots/SnapshotBackwardsCompatibilityTest.java
index ef957ccc505f..35901dfed8bc 100644
--- a/src/test/java/org/elasticsearch/snapshots/SnapshotBackwardsCompatibilityTest.java
+++ b/src/test/java/org/elasticsearch/snapshots/SnapshotBackwardsCompatibilityTest.java
@@ -33,7 +33,6 @@
 import org.elasticsearch.cluster.routing.allocation.decider.EnableAllocationDecider;
 import org.elasticsearch.common.settings.ImmutableSettings;
 import org.elasticsearch.test.ElasticsearchBackwardsCompatIntegrationTest;
-import org.junit.Ignore;
 import org.junit.Test;
 
 import java.io.File;
@@ -56,7 +55,7 @@ public void testSnapshotAndRestore() throws ExecutionException, InterruptedExcep
         logger.info("-->  creating repository");
         assertAcked(client().admin().cluster().preparePutRepository("test-repo")
                 .setType("fs").setSettings(ImmutableSettings.settingsBuilder()
-                        .put("location", newTempDir(LifecycleScope.SUITE).getAbsolutePath())
+                        .put("location", randomRepoPath().getAbsolutePath())
                         .put("compress", randomBoolean())
                         .put("chunk_size", randomIntBetween(100, 1000))));
         String[] indicesBefore = new String[randomIntBetween(2,5)];
@@ -162,7 +161,7 @@ public void testSnapshotAndRestore() throws ExecutionException, InterruptedExcep
 
     public void testSnapshotMoreThanOnce() throws ExecutionException, InterruptedException, IOException {
         Client client = client();
-        final File tempDir = newTempDir(LifecycleScope.SUITE).getAbsoluteFile();
+        final File tempDir = randomRepoPath().getAbsoluteFile();
         logger.info("-->  creating repository");
         assertAcked(client.admin().cluster().preparePutRepository("test-repo")
                 .setType("fs").setSettings(ImmutableSettings.settingsBuilder()
diff --git a/src/test/java/org/elasticsearch/snapshots/mockstore/MockRepository.java b/src/test/java/org/elasticsearch/snapshots/mockstore/MockRepository.java
index fece459ca912..a7002d0291ea 100644
--- a/src/test/java/org/elasticsearch/snapshots/mockstore/MockRepository.java
+++ b/src/test/java/org/elasticsearch/snapshots/mockstore/MockRepository.java
@@ -31,6 +31,7 @@
 import org.elasticsearch.common.blobstore.BlobStore;
 import org.elasticsearch.common.inject.Inject;
 import org.elasticsearch.common.settings.Settings;
+import org.elasticsearch.env.Environment;
 import org.elasticsearch.index.snapshots.IndexShardRepository;
 import org.elasticsearch.repositories.RepositoryName;
 import org.elasticsearch.repositories.RepositorySettings;
@@ -74,8 +75,8 @@ public long getFailureCount() {
     private volatile boolean blocked = false;
 
     @Inject
-    public MockRepository(RepositoryName name, RepositorySettings repositorySettings, IndexShardRepository indexShardRepository, ClusterService clusterService) throws IOException {
-        super(name, overrideSettings(repositorySettings, clusterService), indexShardRepository);
+    public MockRepository(RepositoryName name, RepositorySettings repositorySettings, IndexShardRepository indexShardRepository, ClusterService clusterService, Environment environment) throws IOException {
+        super(name, overrideSettings(repositorySettings, clusterService), indexShardRepository, environment);
         randomControlIOExceptionRate = repositorySettings.settings().getAsDouble("random_control_io_exception_rate", 0.0);
         randomDataFileIOExceptionRate = repositorySettings.settings().getAsDouble("random_data_file_io_exception_rate", 0.0);
         blockOnControlFiles = repositorySettings.settings().getAsBoolean("block_on_control", false);
diff --git a/src/test/java/org/elasticsearch/test/ElasticsearchIntegrationTest.java b/src/test/java/org/elasticsearch/test/ElasticsearchIntegrationTest.java
index 2f1a49ad7246..5559d4fe2d21 100644
--- a/src/test/java/org/elasticsearch/test/ElasticsearchIntegrationTest.java
+++ b/src/test/java/org/elasticsearch/test/ElasticsearchIntegrationTest.java
@@ -92,6 +92,7 @@
 import org.elasticsearch.common.xcontent.json.JsonXContent;
 import org.elasticsearch.common.xcontent.support.XContentMapValues;
 import org.elasticsearch.discovery.zen.elect.ElectMasterService;
+import org.elasticsearch.env.Environment;
 import org.elasticsearch.index.IndexService;
 import org.elasticsearch.http.HttpServerTransport;
 import org.elasticsearch.index.fielddata.FieldDataType;
@@ -1109,8 +1110,8 @@ public boolean apply(Object o) {
      */
     public void setMinimumMasterNodes(int n) {
         assertTrue(client().admin().cluster().prepareUpdateSettings().setTransientSettings(
-            settingsBuilder().put(ElectMasterService.DISCOVERY_ZEN_MINIMUM_MASTER_NODES, n))
-            .get().isAcknowledged());
+                settingsBuilder().put(ElectMasterService.DISCOVERY_ZEN_MINIMUM_MASTER_NODES, n))
+                .get().isAcknowledged());
     }
 
     /**
@@ -1813,6 +1814,32 @@ public static DateTimeZone randomDateTimeZone() {
         return timeZone;
     }
 
+    /**
+     * Returns path to a random directory that can be used to create a temporary file system repo
+     */
+    public File randomRepoPath() {
+        if (currentCluster instanceof InternalTestCluster) {
+            return randomRepoPath(((InternalTestCluster) currentCluster).getDefaultSettings());
+        } else if (currentCluster instanceof CompositeTestCluster) {
+            return randomRepoPath(((CompositeTestCluster) currentCluster).internalCluster().getDefaultSettings());
+        }
+        throw new UnsupportedOperationException("unsupported cluster type");
+    }
+
+    /**
+     * Returns path to a random directory that can be used to create a temporary file system repo
+     */
+    public static File randomRepoPath(Settings settings) {
+        Environment environment = new Environment(settings);
+        File[] repoFiles = environment.repoFiles();
+        assert repoFiles.length > 0;
+        File path;
+        do {
+            path = new File(repoFiles[0], randomAsciiOfLength(10));
+        } while (path.exists());
+        return path;
+    }
+
     protected NumShards getNumShards(String index) {
         MetaData metaData = client().admin().cluster().prepareState().get().getState().metaData();
         assertThat(metaData.hasIndex(index), equalTo(true));
diff --git a/src/test/java/org/elasticsearch/test/InternalTestCluster.java b/src/test/java/org/elasticsearch/test/InternalTestCluster.java
index f4a0910b5ad8..1cc82900ba50 100644
--- a/src/test/java/org/elasticsearch/test/InternalTestCluster.java
+++ b/src/test/java/org/elasticsearch/test/InternalTestCluster.java
@@ -202,6 +202,8 @@
 
     private final boolean hasFilterCache;
 
+    private final File repoPath;
+
     /**
      * All nodes started by the cluster will have their name set to nodePrefix followed by a positive number
      */
@@ -277,6 +279,8 @@ public InternalTestCluster(long clusterSeed,
         }
         builder.put("bootstrap.sigar", rarely(random));
         final int basePort = 9300 + (100 * (jvmOrdinal+1));
+        repoPath = new File(new File(new File("work").getAbsoluteFile(), "repos"), clusterName);
+        builder.put("path.repo", repoPath.getAbsolutePath());
         builder.put("transport.tcp.port", basePort + "-" + (basePort+100));
         builder.put("http.port", basePort+101 + "-" + (basePort+200));
         builder.put("config.ignore_system_properties", true);
@@ -979,6 +983,7 @@ private synchronized void reset(boolean wipeData) throws IOException {
     @Override
     public synchronized void afterTest() throws IOException {
         wipeDataDirectories();
+        wipeRepositoryDirectories();
         randomlyResetClients(); /* reset all clients - each test gets its own client based on the Random instance created above. */
     }
 
@@ -1046,6 +1051,17 @@ private void randomlyResetClients() throws IOException {
         }
     }
 
+    private void wipeRepositoryDirectories() {
+        if (repoPath.exists()) {
+            assertThat(repoPath.getAbsolutePath(), containsString(clusterName));
+            if (FileSystemUtils.deleteRecursively(repoPath)) {
+                logger.info("Successfully wiped repository directory for node location: {}", repoPath);
+            } else {
+                logger.info("Failed to wipe data directory for node location: {}", repoPath);
+            }
+        }
+    }
+
     private void wipeDataDirectories() {
         if (!dataDirToClean.isEmpty()) {
             try {
diff --git a/src/test/java/org/elasticsearch/test/test/InternalTestClusterTests.java b/src/test/java/org/elasticsearch/test/test/InternalTestClusterTests.java
index 617703de0e22..b62f55237a05 100644
--- a/src/test/java/org/elasticsearch/test/test/InternalTestClusterTests.java
+++ b/src/test/java/org/elasticsearch/test/test/InternalTestClusterTests.java
@@ -75,8 +75,13 @@ public static void assertSettings(Settings left, Settings right, boolean compare
         Map<String, String> entries1 = right.getAsMap();
         assertThat(entries0.size(), equalTo(entries1.size()));
         for (Map.Entry<String, String> entry : entries0) {
-            if(entry.getKey().equals(ClusterName.SETTING) && compareClusterName == false) {
-                continue;
+            if (compareClusterName == false) {
+                if(entry.getKey().equals(ClusterName.SETTING)) {
+                    continue;
+                }
+                if(entry.getKey().equals("path.repo")) {
+                    continue;
+                }
             }
             assertThat(entries1, hasEntry(entry.getKey(), entry.getValue()));
         }
