diff --git a/src/main/java/org/elasticsearch/script/groovy/GroovyScriptEngineService.java b/src/main/java/org/elasticsearch/script/groovy/GroovyScriptEngineService.java
index 77f2cc7f97ea..1995e7b178ce 100644
--- a/src/main/java/org/elasticsearch/script/groovy/GroovyScriptEngineService.java
+++ b/src/main/java/org/elasticsearch/script/groovy/GroovyScriptEngineService.java
@@ -74,7 +74,7 @@
     @Inject
     public GroovyScriptEngineService(Settings settings) {
         super(settings);
-        this.sandboxed = settings.getAsBoolean(GROOVY_SCRIPT_SANDBOX_ENABLED, true);
+        this.sandboxed = settings.getAsBoolean(GROOVY_SCRIPT_SANDBOX_ENABLED, false);
         this.blacklistAdditions = ImmutableSet.copyOf(settings.getAsArray(GROOVY_SCRIPT_BLACKLIST_PATCH, Strings.EMPTY_ARRAY));
         reloadConfig();
     }
diff --git a/src/test/java/org/elasticsearch/script/GroovySandboxScriptTests.java b/src/test/java/org/elasticsearch/script/GroovySandboxScriptTests.java
index 91d931d2ad6c..52092f64f6df 100644
--- a/src/test/java/org/elasticsearch/script/GroovySandboxScriptTests.java
+++ b/src/test/java/org/elasticsearch/script/GroovySandboxScriptTests.java
@@ -34,11 +34,18 @@
 /**
  * Tests for the Groovy scripting sandbox
  */
-@ElasticsearchIntegrationTest.ClusterScope(scope = ElasticsearchIntegrationTest.Scope.TEST)
+@ElasticsearchIntegrationTest.ClusterScope(scope = ElasticsearchIntegrationTest.Scope.TEST, numDataNodes = 0)
 public class GroovySandboxScriptTests extends ElasticsearchIntegrationTest {
 
     @Test
-    public void testSandboxedGroovyScript() {
+    public void testSandboxedGroovyScript() throws Exception {
+        int nodes = randomIntBetween(1, 3);
+        Settings nodeSettings = ImmutableSettings.builder()
+                .put(GroovyScriptEngineService.GROOVY_SCRIPT_SANDBOX_ENABLED, true)
+                .build();
+        internalCluster().startNodesAsync(nodes, nodeSettings).get();
+        client().admin().cluster().prepareHealth().setWaitForNodes(nodes + "").get();
+
         client().prepareIndex("test", "doc", "1").setSource("foo", 5).setRefresh(true).get();
 
         // Plain test
@@ -100,6 +107,13 @@ public void testSandboxedGroovyScript() {
 
     @Test
     public void testDynamicBlacklist() throws Exception {
+        int nodes = randomIntBetween(1, 3);
+        Settings nodeSettings = ImmutableSettings.builder()
+                .put(GroovyScriptEngineService.GROOVY_SCRIPT_SANDBOX_ENABLED, true)
+                .build();
+        internalCluster().startNodesAsync(nodes, nodeSettings).get();
+        client().admin().cluster().prepareHealth().setWaitForNodes(nodes + "").get();
+
         client().prepareIndex("test", "doc", "1").setSource("foo", 5).setRefresh(true).get();
 
         testSuccess("[doc['foo'].value, 3, 4].isEmpty()");
diff --git a/src/test/java/org/elasticsearch/script/GroovyScriptTests.java b/src/test/java/org/elasticsearch/script/GroovyScriptTests.java
index a7a2e50b61b3..e60d1858fb25 100644
--- a/src/test/java/org/elasticsearch/script/GroovyScriptTests.java
+++ b/src/test/java/org/elasticsearch/script/GroovyScriptTests.java
@@ -76,19 +76,6 @@ public void testGroovyExceptionSerialization() throws Exception {
                     ExceptionsHelper.detailedMessage(e).contains("No such property: not_found"), equalTo(true));
         }
 
-        try {
-            client().prepareSearch("test").setQuery(constantScoreQuery(
-                    scriptFilter("pr = Runtime.getRuntime().exec(\"touch /tmp/gotcha\"); pr.waitFor()").lang("groovy"))).get();
-            fail("should have thrown an exception");
-        } catch (SearchPhaseExecutionException e) {
-            assertThat(ExceptionsHelper.detailedMessage(e) + "should not contained NotSerializableTransportException",
-                    ExceptionsHelper.detailedMessage(e).contains("NotSerializableTransportException"), equalTo(false));
-            assertThat(ExceptionsHelper.detailedMessage(e) + "should have contained GroovyScriptCompilationException",
-                    ExceptionsHelper.detailedMessage(e).contains("GroovyScriptCompilationException"), equalTo(true));
-            assertThat(ExceptionsHelper.detailedMessage(e) + "should have contained Method calls not allowed on [java.lang.Runtime]",
-                    ExceptionsHelper.detailedMessage(e).contains("Method calls not allowed on [java.lang.Runtime]"), equalTo(true));
-        }
-
         try {
             client().prepareSearch("test").setQuery(constantScoreQuery(
                     scriptFilter("assert false").lang("groovy"))).get();
diff --git a/src/test/java/org/elasticsearch/test/ElasticsearchSingleNodeTest.java b/src/test/java/org/elasticsearch/test/ElasticsearchSingleNodeTest.java
index a95614022b33..f58a6d6bb14b 100644
--- a/src/test/java/org/elasticsearch/test/ElasticsearchSingleNodeTest.java
+++ b/src/test/java/org/elasticsearch/test/ElasticsearchSingleNodeTest.java
@@ -79,6 +79,7 @@ private static Node newNode() {
                 .put("node.name", nodeName())
                 .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1)
                 .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 0)
+                .put("script.disable_dynamic", false)
                 .put(EsExecutors.PROCESSORS, 1) // limit the number of threads created
                 .put("http.enabled", false)
                 .put("index.store.type", "ram")
