diff --git a/src/main/java/org/bouncycastle/jcajce/provider/keystore/BC.java b/src/main/java/org/bouncycastle/jcajce/provider/keystore/BC.java
index 7d5d220db..30a81ffb1 100644
--- a/src/main/java/org/bouncycastle/jcajce/provider/keystore/BC.java
+++ b/src/main/java/org/bouncycastle/jcajce/provider/keystore/BC.java
@@ -16,7 +16,8 @@ public Mappings()
 
         public void configure(ConfigurableProvider provider)
         {
-            provider.addAlgorithm("KeyStore.BKS", PREFIX + "BcKeyStoreSpi");
+            provider.addAlgorithm("KeyStore.BKS", PREFIX + "BcKeyStoreSpi$Std");
+            provider.addAlgorithm("KeyStore.BKS-V1", PREFIX + "BcKeyStoreSpi$Version1");
             provider.addAlgorithm("KeyStore.BouncyCastle", PREFIX + "BcKeyStoreSpi$BouncyCastleStore");
             provider.addAlgorithm("Alg.Alias.KeyStore.UBER", "BouncyCastle");
             provider.addAlgorithm("Alg.Alias.KeyStore.BOUNCYCASTLE", "BouncyCastle");
diff --git a/src/main/java/org/bouncycastle/jcajce/provider/keystore/bc/BcKeyStoreSpi.java b/src/main/java/org/bouncycastle/jcajce/provider/keystore/bc/BcKeyStoreSpi.java
index 2207e661b..ea892610f 100644
--- a/src/main/java/org/bouncycastle/jcajce/provider/keystore/bc/BcKeyStoreSpi.java
+++ b/src/main/java/org/bouncycastle/jcajce/provider/keystore/bc/BcKeyStoreSpi.java
@@ -86,8 +86,11 @@
 
     protected SecureRandom    random = new SecureRandom();
 
-    public BcKeyStoreSpi()
+    protected int              version;
+
+    public BcKeyStoreSpi(int version)
     {
+        this.version = version;
     }
 
     private class StoreEntry
@@ -880,7 +883,7 @@ public void engineStore(OutputStream stream, char[] password)
 
         random.nextBytes(salt);
 
-        dOut.writeInt(STORE_VERSION);
+        dOut.writeInt(version);
         dOut.writeInt(salt.length);
         dOut.write(salt);
         dOut.writeInt(iterationCount);
@@ -892,7 +895,14 @@ public void engineStore(OutputStream stream, char[] password)
 
         pbeGen.init(passKey, salt, iterationCount);
 
-        hMac.init(pbeGen.generateDerivedMacParameters(hMac.getMacSize() * 8));
+        if (version < 2)
+        {
+            hMac.init(pbeGen.generateDerivedMacParameters(hMac.getMacSize()));
+        }
+        else
+        {
+            hMac.init(pbeGen.generateDerivedMacParameters(hMac.getMacSize() * 8));
+        }
 
         for (int i = 0; i != passKey.length; i++)
         {
@@ -923,6 +933,11 @@ public void engineStore(OutputStream stream, char[] password)
     public static class BouncyCastleStore
         extends BcKeyStoreSpi
     {
+        public BouncyCastleStore()
+        {
+            super(1);
+        }
+
         public void engineLoad(
             InputStream stream,
             char[]      password) 
@@ -1006,7 +1021,7 @@ public void engineStore(OutputStream stream, char[] password)
     
             random.nextBytes(salt);
     
-            dOut.writeInt(STORE_VERSION);
+            dOut.writeInt(version);
             dOut.writeInt(salt.length);
             dOut.write(salt);
             dOut.writeInt(iterationCount);
@@ -1025,4 +1040,22 @@ public void engineStore(OutputStream stream, char[] password)
             cOut.close();
         }
     }
+
+    public static class Std
+       extends BcKeyStoreSpi
+    {
+        public Std()
+        {
+            super(STORE_VERSION);
+        }
+    }
+
+    public static class Version1
+        extends BcKeyStoreSpi
+    {
+        public Version1()
+        {
+            super(1);
+        }
+    }
 }
diff --git a/src/test/java/org/bouncycastle/asn1/test/X500NameTest.java b/src/test/java/org/bouncycastle/asn1/test/X500NameTest.java
index 993ae7c63..be008a953 100644
--- a/src/test/java/org/bouncycastle/asn1/test/X500NameTest.java
+++ b/src/test/java/org/bouncycastle/asn1/test/X500NameTest.java
@@ -107,6 +107,19 @@ private void testEncodingIA5String(ASN1ObjectIdentifier oid, String value)
         }
     }
 
+    private void testEncodingUTF8String(ASN1ObjectIdentifier oid, String value)
+        throws IOException
+    {
+        ASN1Encodable converted = createEntryValue(oid, value);
+        if (!(converted instanceof DERUTF8String))
+        {
+            fail("encoding for " + oid + " not IA5String");
+        }
+        if (!value.equals((DERUTF8String.getInstance(converted.toASN1Primitive().getEncoded()).getString())))
+        {
+            fail("decoding not correct");
+        }
+    }
 
     private void testEncodingGeneralizedTime(ASN1ObjectIdentifier oid, String value)
     {
@@ -132,8 +145,9 @@ public void performTest()
         testEncodingIA5String(BCStyle.DC, "test");
         // correct encoding
         testEncodingGeneralizedTime(BCStyle.DATE_OF_BIRTH, "#180F32303032303132323132323232305A");
-        // compatability encoding
+        // compatibility encoding
         testEncodingGeneralizedTime(BCStyle.DATE_OF_BIRTH, "20020122122220Z");
+        testEncodingUTF8String(BCStyle.CN, "Mörsky");
 
         //
         // composite
diff --git a/src/test/java/org/bouncycastle/asn1/test/X509NameTest.java b/src/test/java/org/bouncycastle/asn1/test/X509NameTest.java
index 47c21a695..ffcc174d7 100644
--- a/src/test/java/org/bouncycastle/asn1/test/X509NameTest.java
+++ b/src/test/java/org/bouncycastle/asn1/test/X509NameTest.java
@@ -16,6 +16,7 @@
 import org.bouncycastle.asn1.ASN1Primitive;
 import org.bouncycastle.asn1.ASN1Sequence;
 import org.bouncycastle.asn1.ASN1Set;
+import org.bouncycastle.asn1.ASN1String;
 import org.bouncycastle.asn1.DERGeneralizedTime;
 import org.bouncycastle.asn1.DERIA5String;
 import org.bouncycastle.asn1.DERObjectIdentifier;
@@ -118,6 +119,20 @@ private void testEncodingIA5String(DERObjectIdentifier oid, String value)
     }
 
 
+    private void testEncodingUTF8String(DERObjectIdentifier oid, String value)
+        throws IOException
+    {
+        ASN1Encodable converted = createEntryValue(oid, value);
+        if (!(converted instanceof DERUTF8String))
+        {
+            fail("encoding for " + oid + " not IA5String");
+        }
+        if (!value.equals((DERUTF8String.getInstance(converted.toASN1Primitive().getEncoded()).getString())))
+        {
+            fail("decoding not correct");
+        }
+    }
+
     private void testEncodingGeneralizedTime(DERObjectIdentifier oid, String value)
     {
         ASN1Encodable converted = createEntryValue(oid, value);
@@ -142,9 +157,9 @@ public void performTest()
         testEncodingIA5String(X509Name.DC, "test");
         // correct encoding
         testEncodingGeneralizedTime(X509Name.DATE_OF_BIRTH, "#180F32303032303132323132323232305A");
-        // compatability encoding
+        // compatibility encoding
         testEncodingGeneralizedTime(X509Name.DATE_OF_BIRTH, "20020122122220Z");
-
+        testEncodingUTF8String(X509Name.CN, "Mörsky");
         //
         // composite
         //
diff --git a/src/test/java/org/bouncycastle/jce/provider/test/KeyStoreTest.java b/src/test/java/org/bouncycastle/jce/provider/test/KeyStoreTest.java
index d7f926773..4dc624798 100644
--- a/src/test/java/org/bouncycastle/jce/provider/test/KeyStoreTest.java
+++ b/src/test/java/org/bouncycastle/jce/provider/test/KeyStoreTest.java
@@ -328,6 +328,9 @@ private void oldStoreTest()
         checkStore(KeyStore.getInstance("BKS", "BC"), v2BKS);
         checkStore(KeyStore.getInstance("UBER", "BC"), v1UBER);
         checkStore(KeyStore.getInstance("UBER", "BC"), v2UBER);
+
+        checkOldStore(KeyStore.getInstance("BKS-V1", "BC"), v1BKS);
+        checkOldStore(KeyStore.getInstance("BKS-V1", "BC"), v2BKS);
     }
 
     private void checkStore(KeyStore ks, byte[] data)
@@ -351,6 +354,32 @@ private void checkStore(KeyStore ks, byte[] data)
         ks.store(bOut, oldStorePass);
     }
 
+    private void checkOldStore(KeyStore ks, byte[] data)
+        throws Exception
+    {
+        ks.load(new ByteArrayInputStream(data), oldStorePass);
+
+        if (!ks.containsAlias("android"))
+        {
+            fail("cannot find alias");
+        }
+
+        Key key = ks.getKey("android", oldStorePass);
+        if (key == null)
+        {
+            fail("cannot find key");
+        }
+
+        ByteArrayOutputStream bOut = new ByteArrayOutputStream();
+
+        ks.store(bOut, oldStorePass);
+
+        if (data.length != bOut.toByteArray().length)
+        {
+            fail("Old version key store write incorrect");
+        }
+    }
+
     private void checkException()
         throws Exception
     {
@@ -379,6 +408,7 @@ public void performTest()
     {
         keyStoreTest("BKS");
         keyStoreTest("UBER");
+        keyStoreTest("BKS-V1");
         ecStoreTest("BKS");
         oldStoreTest();
         checkException();
