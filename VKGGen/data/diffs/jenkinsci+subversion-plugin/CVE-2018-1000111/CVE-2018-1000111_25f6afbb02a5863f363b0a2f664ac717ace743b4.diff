diff --git a/src/main/java/hudson/scm/SubversionRepositoryStatus.java b/src/main/java/hudson/scm/SubversionRepositoryStatus.java
index 6ce3b224..c9cc89aa 100755
--- a/src/main/java/hudson/scm/SubversionRepositoryStatus.java
+++ b/src/main/java/hudson/scm/SubversionRepositoryStatus.java
@@ -8,7 +8,6 @@
 import hudson.Extension;
 import hudson.ExtensionList;
 import hudson.ExtensionPoint;
-import hudson.model.AbstractModelObject;
 import hudson.model.AbstractProject;
 import hudson.model.Job;
 import hudson.scm.SubversionSCM.ModuleLocation;
@@ -37,6 +36,7 @@
 import org.kohsuke.stapler.StaplerRequest;
 import org.kohsuke.stapler.StaplerResponse;
 
+import org.kohsuke.stapler.interceptor.RequirePOST;
 import org.tmatesoft.svn.core.SVNCancelException;
 import org.tmatesoft.svn.core.SVNURL;
 import org.tmatesoft.svn.core.SVNException;
@@ -49,7 +49,7 @@
  * @author Kohsuke Kawaguchi
  * @see SubversionStatus
  */
-public class SubversionRepositoryStatus extends AbstractModelObject {
+public class SubversionRepositoryStatus {
     public final UUID uuid;
 
     public SubversionRepositoryStatus(UUID uuid) {
@@ -60,10 +60,6 @@ public String getDisplayName() {
         return uuid.toString();
     }
 
-    public String getSearchUrl() {
-        return uuid.toString();
-    }
-    
     static interface JobProvider {
         @SuppressWarnings("rawtypes")
         List<Job> getAllJobs();
@@ -92,9 +88,8 @@ public String getSearchUrl() {
      * Because this URL is not guarded, we can't really trust the data that's sent to us. But we intentionally
      * don't protect this URL to simplify <tt>post-commit</tt> script set up.
      */
+    @RequirePOST
     public void doNotifyCommit(StaplerRequest req, StaplerResponse rsp) throws ServletException, IOException {
-        requirePOST();
-
         // compute the affected paths
         Set<String> affectedPath = new HashSet<String>();
         String line;
diff --git a/src/main/java/hudson/scm/SubversionStatus.java b/src/main/java/hudson/scm/SubversionStatus.java
index e7e17358..9c35dee8 100644
--- a/src/main/java/hudson/scm/SubversionStatus.java
+++ b/src/main/java/hudson/scm/SubversionStatus.java
@@ -24,7 +24,6 @@
 package hudson.scm;
 
 import hudson.Extension;
-import hudson.model.AbstractModelObject;
 import hudson.model.UnprotectedRootAction;
 
 import java.util.regex.Pattern;
@@ -37,15 +36,11 @@
  * @author Kohsuke Kawaguchi
  */
 @Extension
-public class SubversionStatus extends AbstractModelObject implements UnprotectedRootAction {
+public class SubversionStatus implements UnprotectedRootAction {
     public String getDisplayName() {
         return "Subversion";
     }
 
-    public String getSearchUrl() {
-        return getUrlName();
-    }
-
     public String getIconFileName() {
         // TODO
         return null;
diff --git a/src/test/java/hudson/scm/SubversionStatusTest.java b/src/test/java/hudson/scm/SubversionStatusTest.java
new file mode 100644
index 00000000..da41dac9
--- /dev/null
+++ b/src/test/java/hudson/scm/SubversionStatusTest.java
@@ -0,0 +1,97 @@
+/*
+ * The MIT License
+ *
+ * Copyright (c) 2018, CloudBees, Inc.
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a copy
+ * of this software and associated documentation files (the "Software"), to deal
+ * in the Software without restriction, including without limitation the rights
+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+ * copies of the Software, and to permit persons to whom the Software is
+ * furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in
+ * all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+ * THE SOFTWARE.
+ */
+package hudson.scm;
+
+import com.gargoylesoftware.htmlunit.FailingHttpStatusCodeException;
+import com.gargoylesoftware.htmlunit.HttpMethod;
+import com.gargoylesoftware.htmlunit.WebRequest;
+import com.gargoylesoftware.htmlunit.WebResponse;
+import com.gargoylesoftware.htmlunit.html.HtmlPage;
+import org.junit.Rule;
+import org.junit.Test;
+import org.jvnet.hudson.test.Issue;
+import org.jvnet.hudson.test.JenkinsRule;
+
+import java.net.URL;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.fail;
+
+public class SubversionStatusTest {
+    
+    @Rule
+    public JenkinsRule j = new JenkinsRule();
+    
+    @Test
+    @Issue("SECURITY-724")
+    public void shouldNotBeAbleToSearch() throws Exception {
+        JenkinsRule.WebClient wc = j.createWebClient();
+        checkUrl(wc, "subversion/search/");
+        checkUrl(wc, "subversion/search/?q=a");
+    }
+    
+    @Test
+    @Issue("SECURITY-724")
+    public void shouldNotBeAbleToSearchUsingDynamic() throws Exception {
+        String uuid = "12345678-1234-1234-1234-123456789012";
+        JenkinsRule.WebClient wc = j.createWebClient();
+        checkUrl(wc, "subversion/" + uuid + "/search/");
+        checkUrl(wc, "subversion/" + uuid + "/search/?q=a");
+    }
+    
+    @Test
+    public void canStillProvideTheCommitNotifyAction() throws Exception {
+        j.jenkins.setCrumbIssuer(null);
+        
+        String uuid = "12345678-1234-1234-1234-123456789012";
+        JenkinsRule.WebClient wc = j.createWebClient();
+        
+        String relativeUrl = "subversion/" + uuid + "/notifyCommit/";
+        
+        try {
+            // protected against GET request
+            wc.goTo(relativeUrl);
+            fail();
+        } catch (FailingHttpStatusCodeException e) {
+            assertEquals(405, e.getStatusCode());
+        }
+        
+        WebRequest request = new WebRequest(new URL(j.getURL() + relativeUrl), HttpMethod.POST);
+        HtmlPage page = wc.getPage(request);
+        j.assertGoodStatus(page);
+    }
+
+    private void checkUrl(JenkinsRule.WebClient wc, String url) throws Exception {
+        try {
+            wc.goTo(url);
+            fail();
+        } catch (FailingHttpStatusCodeException e) {
+            WebResponse response = e.getResponse();
+            assertEquals(404, response.getStatusCode());
+            String content = response.getContentAsString();
+            assertFalse(content.contains("Search for"));
+        }
+    }
+}
