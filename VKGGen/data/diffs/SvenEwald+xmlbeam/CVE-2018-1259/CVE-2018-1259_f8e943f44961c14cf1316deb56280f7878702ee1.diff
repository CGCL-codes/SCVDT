diff --git a/src/main/java/org/xmlbeam/config/DefaultXMLFactoriesConfig.java b/src/main/java/org/xmlbeam/config/DefaultXMLFactoriesConfig.java
index f4dabea..50b33b9 100644
--- a/src/main/java/org/xmlbeam/config/DefaultXMLFactoriesConfig.java
+++ b/src/main/java/org/xmlbeam/config/DefaultXMLFactoriesConfig.java
@@ -104,6 +104,10 @@
     }
 
     private static final String NON_EXISTING_URL = "http://xmlbeam.org/nonexisting_namespace";
+    private static final String[] FEATURE_DEFAULTS = new String[] { "http://apache.org/xml/features/disallow-doctype-decl#true", //
+            "http://xml.org/sax/features/external-general-entities#false", //
+            "http://xml.org/sax/features/external-parameter-entities#false", //
+            "http://apache.org/xml/features/nonvalidating/load-external-dtd#false" };
 
     private final Map<String, String> USER_DEFINED_MAPPING = new TreeMap<String, String>();
 
@@ -126,7 +130,7 @@ public DocumentBuilder createDocumentBuilder() {
             DocumentBuilder documentBuilder = createDocumentBuilderFactory().newDocumentBuilder();
             return documentBuilder;
         } catch (ParserConfigurationException e) {
-            throw new RuntimeException(e);
+            throw new XBException("Error on creating document builder",e);
         }
     }
 
@@ -136,7 +140,16 @@ public DocumentBuilder createDocumentBuilder() {
     @Override
     public DocumentBuilderFactory createDocumentBuilderFactory() {
         DocumentBuilderFactory instance = DocumentBuilderFactory.newInstance();
+        instance.setXIncludeAware(false);
         instance.setExpandEntityReferences(false);
+        for (String featureDefault : FEATURE_DEFAULTS) {
+            String[] featureValue = featureDefault.split("#");
+            try {
+                instance.setFeature(featureValue[0], Boolean.valueOf(featureValue[1]));
+            } catch (ParserConfigurationException e) {
+                // No worries if one feature is not supported.
+            }
+        }
         if (!NamespacePhilosophy.AGNOSTIC.equals(namespacePhilosophy)) {
             instance.setNamespaceAware(NamespacePhilosophy.HEDONISTIC.equals(namespacePhilosophy));
         }
@@ -161,7 +174,7 @@ public Transformer createTransformer(final Document... document) {
             }
             return transformer;
         } catch (TransformerConfigurationException e) {
-            throw new RuntimeException(e);
+            throw new XBException("Error on creating transformer",e);
         }
     }
 
