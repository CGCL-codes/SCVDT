diff --git a/pom.xml b/pom.xml
index d6ee5d5c..c7f16a5c 100644
--- a/pom.xml
+++ b/pom.xml
@@ -34,7 +34,7 @@ THE SOFTWARE.
     </parent>
 
     <artifactId>ec2</artifactId>
-    <version>1.38-SNAPSHOT</version>
+    <version>1.39-SNAPSHOT</version>
     <packaging>hpi</packaging>
     <name>Amazon EC2 plugin</name>
     <url>http://wiki.jenkins-ci.org/display/JENKINS/Amazon+EC2+Plugin</url>
diff --git a/src/main/java/hudson/plugins/ec2/AmazonEC2Cloud.java b/src/main/java/hudson/plugins/ec2/AmazonEC2Cloud.java
index d3b9de91..fda9be6f 100644
--- a/src/main/java/hudson/plugins/ec2/AmazonEC2Cloud.java
+++ b/src/main/java/hudson/plugins/ec2/AmazonEC2Cloud.java
@@ -23,6 +23,7 @@
  */
 package hudson.plugins.ec2;
 
+import com.amazonaws.SdkClientException;
 import hudson.Extension;
 import hudson.Util;
 import hudson.model.Failure;
@@ -152,13 +153,18 @@ public ListBoxModel doFillRegionItems(@QueryParameter boolean useInstanceProfile
                 return model;
             }
 
-            AWSCredentialsProvider credentialsProvider = createCredentialsProvider(useInstanceProfileForCredentials, credentialsId);
-            AmazonEC2 client = connect(credentialsProvider, new URL("http://ec2.amazonaws.com"));
-            DescribeRegionsResult regions = client.describeRegions();
-            List<Region> regionList = regions.getRegions();
-            for (Region r : regionList) {
-                String name = r.getRegionName();
-                model.add(name, name);
+            try {
+                AWSCredentialsProvider credentialsProvider = createCredentialsProvider(useInstanceProfileForCredentials,
+                        credentialsId);
+                AmazonEC2 client = connect(credentialsProvider, new URL("http://ec2.amazonaws.com"));
+                DescribeRegionsResult regions = client.describeRegions();
+                List<Region> regionList = regions.getRegions();
+                for (Region r : regionList) {
+                    String name = r.getRegionName();
+                    model.add(name, name);
+                }
+            } catch (SdkClientException ex) {
+                // Ignore, as this may happen before the credentials are specified
             }
             return model;
         }
diff --git a/src/main/java/hudson/plugins/ec2/SlaveTemplate.java b/src/main/java/hudson/plugins/ec2/SlaveTemplate.java
index 9aceba4c..47a80003 100644
--- a/src/main/java/hudson/plugins/ec2/SlaveTemplate.java
+++ b/src/main/java/hudson/plugins/ec2/SlaveTemplate.java
@@ -34,6 +34,8 @@
 
 import org.apache.commons.codec.binary.Base64;
 import org.apache.commons.lang.StringUtils;
+import org.kohsuke.accmod.Restricted;
+import org.kohsuke.accmod.restrictions.NoExternalUse;
 import org.kohsuke.stapler.DataBoundConstructor;
 import org.kohsuke.stapler.QueryParameter;
 
@@ -152,6 +154,15 @@ public SlaveTemplate(String ami, String zone, SpotConfiguration spotConfig, Stri
             boolean usePrivateDnsName, String instanceCapStr, String iamInstanceProfile, boolean deleteRootOnTermination,
             boolean useEphemeralDevices, boolean useDedicatedTenancy, String launchTimeoutStr, boolean associatePublicIp,
             String customDeviceMapping, boolean connectBySSHProcess, boolean connectUsingPublicIp) {
+
+        if(StringUtils.isNotBlank(remoteAdmin) || StringUtils.isNotBlank(jvmopts) || StringUtils.isNotBlank(tmpDir)){
+            LOGGER.log(Level.FINE, "As remoteAdmin, jvmopts or tmpDir is not blank, we must ensure the user has RUN_SCRIPTS rights.");
+            Jenkins j = Jenkins.getInstance();
+            if(j != null){
+                j.checkPermission(Jenkins.RUN_SCRIPTS);
+            }
+        }
+
         this.ami = ami;
         this.zone = zone;
         this.spotConfig = spotConfig;
@@ -1011,6 +1022,8 @@ public EC2AbstractSlave attach(String instanceId, TaskListener listener) throws
      * Initializes data structure that we don't persist.
      */
     protected Object readResolve() {
+        Jenkins.getInstance().checkPermission(Jenkins.RUN_SCRIPTS);
+
         labelSet = Label.parse(labels);
         securityGroupSet = parseSecurityGroups();
 
@@ -1089,6 +1102,33 @@ public String getHelpFile(String fieldName) {
             return p;
         }
 
+        @Restricted(NoExternalUse.class)
+        public FormValidation doCheckRemoteAdmin(@QueryParameter String value){
+            if(StringUtils.isBlank(value) || Jenkins.getInstance().hasPermission(Jenkins.RUN_SCRIPTS)){
+                return FormValidation.ok();
+            }else{
+                return FormValidation.error(Messages.General_MissingPermission());
+            }
+        }
+
+        @Restricted(NoExternalUse.class)
+        public FormValidation doCheckTmpDir(@QueryParameter String value){
+            if(StringUtils.isBlank(value) || Jenkins.getInstance().hasPermission(Jenkins.RUN_SCRIPTS)){
+                return FormValidation.ok();
+            }else{
+                return FormValidation.error(Messages.General_MissingPermission());
+            }
+        }
+
+        @Restricted(NoExternalUse.class)
+        public FormValidation doCheckJvmopts(@QueryParameter String value){
+            if(StringUtils.isBlank(value) || Jenkins.getInstance().hasPermission(Jenkins.RUN_SCRIPTS)){
+                return FormValidation.ok();
+            }else{
+                return FormValidation.error(Messages.General_MissingPermission());
+            }
+        }
+
         /***
          * Check that the AMI requested is available in the cloud and can be used.
          */
diff --git a/src/main/java/hudson/plugins/ec2/UnixData.java b/src/main/java/hudson/plugins/ec2/UnixData.java
index a178d740..5e1afb4c 100644
--- a/src/main/java/hudson/plugins/ec2/UnixData.java
+++ b/src/main/java/hudson/plugins/ec2/UnixData.java
@@ -3,11 +3,15 @@
 import hudson.Extension;
 import hudson.model.Descriptor;
 
+import hudson.util.FormValidation;
+import jenkins.model.Jenkins;
 import org.apache.commons.lang.StringUtils;
+import org.kohsuke.accmod.Restricted;
+import org.kohsuke.accmod.restrictions.NoExternalUse;
 import org.kohsuke.stapler.DataBoundConstructor;
+import org.kohsuke.stapler.QueryParameter;
 
 public class UnixData extends AMITypeData {
-
     private final String rootCommandPrefix;
     private final String slaveCommandPrefix;
     private final String sshPort;
@@ -17,6 +21,13 @@ public UnixData(String rootCommandPrefix, String slaveCommandPrefix, String sshP
         this.rootCommandPrefix = rootCommandPrefix;
         this.slaveCommandPrefix = slaveCommandPrefix;
         this.sshPort = sshPort;
+
+        this.readResolve();
+    }
+
+    protected Object readResolve() {
+        Jenkins.getInstance().checkPermission(Jenkins.RUN_SCRIPTS);
+        return this;
     }
 
     @Override
@@ -35,6 +46,24 @@ public boolean isUnix() {
         public String getDisplayName() {
             return "unix";
         }
+
+        @Restricted(NoExternalUse.class)
+        public FormValidation doCheckRootCommandPrefix(@QueryParameter String value){
+            if(StringUtils.isBlank(value) || Jenkins.getInstance().hasPermission(Jenkins.RUN_SCRIPTS)){
+                return FormValidation.ok();
+            }else{
+                return FormValidation.error(Messages.General_MissingPermission());
+            }
+        }
+
+        @Restricted(NoExternalUse.class)
+        public FormValidation doCheckSlaveCommandPrefix(@QueryParameter String value){
+            if(StringUtils.isBlank(value) || Jenkins.getInstance().hasPermission(Jenkins.RUN_SCRIPTS)){
+                return FormValidation.ok();
+            }else{
+                return FormValidation.error(Messages.General_MissingPermission());
+            }
+        }
     }
 
     public String getRootCommandPrefix() {
diff --git a/src/main/java/hudson/plugins/ec2/ssh/EC2UnixLauncher.java b/src/main/java/hudson/plugins/ec2/ssh/EC2UnixLauncher.java
index 935cb693..f9efe24a 100644
--- a/src/main/java/hudson/plugins/ec2/ssh/EC2UnixLauncher.java
+++ b/src/main/java/hudson/plugins/ec2/ssh/EC2UnixLauncher.java
@@ -204,7 +204,7 @@ protected void launch(EC2Computer computer, TaskListener listener, Instance inst
                     String sshClientLaunchString = String.format("ssh -o StrictHostKeyChecking=no -i %s %s@%s -p %d %s", identityKeyFile.getAbsolutePath(), node.remoteAdmin, getEC2HostAddress(computer, inst), node.getSshPort(), launchString);
 
                     logInfo(computer, listener, "Launching slave agent (via SSH client process): " + sshClientLaunchString);
-                    CommandLauncher commandLauncher = new CommandLauncher(sshClientLaunchString);
+                    CommandLauncher commandLauncher = new CommandLauncher(sshClientLaunchString, null);
                     commandLauncher.launch(computer, listener);
                 } finally {
                     identityKeyFile.delete();
diff --git a/src/main/resources/hudson/plugins/ec2/Messages.properties b/src/main/resources/hudson/plugins/ec2/Messages.properties
index 20648b4d..49b1aa72 100644
--- a/src/main/resources/hudson/plugins/ec2/Messages.properties
+++ b/src/main/resources/hudson/plugins/ec2/Messages.properties
@@ -8,4 +8,6 @@ EC2SpotSlave.AmazonEC2SpotInstance=Amazon EC2 Spot Instance
 EC2SpotSlave.Spot1=Spot $
 EC2SpotSlave.Spot2= max bid price
 
-AmazonEC2Cloud.NonUniqName=Cloud name must be unique across EC2 clouds
\ No newline at end of file
+AmazonEC2Cloud.NonUniqName=Cloud name must be unique across EC2 clouds
+
+General.MissingPermission=You do not have the Overall/RunScripts right to modify this field
