diff --git a/pom.xml b/pom.xml
index 739dd9fb..536c973d 100644
--- a/pom.xml
+++ b/pom.xml
@@ -8,7 +8,7 @@
   </parent>
 
   <artifactId>promoted-builds</artifactId>
-  <version>2.31.2-SNAPSHOT</version>
+  <version>3.0-SNAPSHOT</version>
   <packaging>hpi</packaging>
 
   <name>Jenkins promoted builds plugin</name>
@@ -61,6 +61,20 @@
     </pluginRepository>
   </pluginRepositories>
 
+  <build>
+    <plugins>
+      <plugin>
+        <groupId>org.jenkins-ci.tools</groupId>
+        <artifactId>maven-hpi-plugin</artifactId>
+        <extensions>true</extensions>
+        <configuration>
+          <!-- Significant permission changes. -->
+          <compatibleSinceVersion>3.0</compatibleSinceVersion>
+        </configuration>
+      </plugin>
+    </plugins>
+  </build>
+
   <dependencies>
     <dependency>
       <groupId>org.jenkins-ci.main</groupId>
diff --git a/src/main/java/hudson/plugins/promoted_builds/PromotedBuildAction.java b/src/main/java/hudson/plugins/promoted_builds/PromotedBuildAction.java
index 2db8710a..a1f4b20e 100644
--- a/src/main/java/hudson/plugins/promoted_builds/PromotedBuildAction.java
+++ b/src/main/java/hudson/plugins/promoted_builds/PromotedBuildAction.java
@@ -1,10 +1,12 @@
 package hudson.plugins.promoted_builds;
 
+import hudson.RestrictedSince;
 import hudson.model.AbstractBuild;
 import hudson.model.AbstractProject;
 import hudson.model.Action;
 import hudson.model.BuildBadgeAction;
 import hudson.model.Cause.UserCause;
+import hudson.plugins.promoted_builds.conditions.ManualCondition;
 import hudson.util.CopyOnWriteList;
 import org.kohsuke.stapler.HttpResponse;
 import org.kohsuke.stapler.HttpResponses;
@@ -17,6 +19,8 @@
 import java.util.Collections;
 import java.util.List;
 import javax.annotation.CheckForNull;
+import org.kohsuke.accmod.Restricted;
+import org.kohsuke.accmod.restrictions.NoExternalUse;
 import org.kohsuke.stapler.export.Exported;
 import org.kohsuke.stapler.export.ExportedBean;
 
@@ -134,10 +138,26 @@ public boolean hasPromotion() {
         return !statuses.isEmpty();
     }
 
+    /**
+     * @deprecated For internal code use {@link #canPromote(String)} with the name of the process that will be promoted instead.
+     */
+    @Deprecated
+    @Restricted(NoExternalUse.class)
+    @RestrictedSince("3.0")
     public boolean canPromote() {
         return this.getProject().hasPermission(Promotion.PROMOTE);
     }
 
+    @Restricted(NoExternalUse.class)
+    public boolean canPromote(String processName) {
+        PromotionProcess process = getPromotionProcess(processName);
+        ManualCondition manualCondition = null;
+        if (process != null) {
+            manualCondition = (ManualCondition) process.getPromotionCondition(ManualCondition.class.getName());
+        }
+        return PromotionPermissionHelper.hasPermission(getProject(), manualCondition);
+    }
+
     /**
      * Gets list of {@link PromotionProcess}s that are not yet attained.
      * @return can be empty but never null.
@@ -210,8 +230,6 @@ public HttpResponse doForcePromotion(@QueryParameter("name") String name) throws
 //            return;
 //        }
 
-        this.getProject().checkPermission(Promotion.PROMOTE);
-
         JobPropertyImpl pp = getProject().getProperty(JobPropertyImpl.class);
         if(pp==null)
             throw new IllegalStateException("This project doesn't have any promotion criteria set");
@@ -220,6 +238,9 @@ public HttpResponse doForcePromotion(@QueryParameter("name") String name) throws
         if(p==null)
             throw new IllegalStateException("This project doesn't have the promotion criterion called "+name);
 
+        ManualCondition manualCondition = (ManualCondition) p.getPromotionCondition(ManualCondition.class.getName());
+        PromotionPermissionHelper.checkPermission(getProject(), manualCondition);
+
         p.promote(owner,new UserCause(),new ManualPromotionBadge());
 
         return HttpResponses.redirectToDot();
diff --git a/src/main/java/hudson/plugins/promoted_builds/PromotionPermissionHelper.java b/src/main/java/hudson/plugins/promoted_builds/PromotionPermissionHelper.java
new file mode 100644
index 00000000..9be534da
--- /dev/null
+++ b/src/main/java/hudson/plugins/promoted_builds/PromotionPermissionHelper.java
@@ -0,0 +1,63 @@
+/*
+ * The MIT License
+ *
+ * Copyright 2018 CloudBees, Inc.
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a copy
+ * of this software and associated documentation files (the "Software"), to deal
+ * in the Software without restriction, including without limitation the rights
+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+ * copies of the Software, and to permit persons to whom the Software is
+ * furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in
+ * all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+ * THE SOFTWARE.
+ */
+
+package hudson.plugins.promoted_builds;
+
+import hudson.model.AbstractProject;
+import hudson.plugins.promoted_builds.conditions.ManualCondition;
+import hudson.security.AccessDeniedException2;
+import javax.annotation.CheckForNull;
+import javax.annotation.Nonnull;
+import jenkins.model.Jenkins;
+import org.kohsuke.accmod.Restricted;
+import org.kohsuke.accmod.restrictions.NoExternalUse;
+
+/**
+ * Used to ensure consistent permission checks for approvals of {@link ManualCondition}, re-executions of 
+ * {@link Status}, and force promotions of {@link PromotionProcess}.
+ */
+@Restricted(NoExternalUse.class)
+public class PromotionPermissionHelper {
+
+    public static void checkPermission(@Nonnull AbstractProject<?,?> target, @CheckForNull ManualCondition associatedCondition) {
+        if (!hasPermission(target, associatedCondition)) {
+            // TODO: Give a more accurate error message if the user has Promotion.PROMOTE but is not in the list of approvers.
+            throw new AccessDeniedException2(Jenkins.getAuthentication(), Promotion.PROMOTE);
+        }
+    }
+
+    public static boolean hasPermission(@Nonnull AbstractProject<?,?> target, @CheckForNull ManualCondition associatedCondition) {
+        if (associatedCondition == null) {
+            return target.hasPermission(Promotion.PROMOTE);
+        } else if (associatedCondition.getUsersAsSet().isEmpty()) {
+            return target.hasPermission(Promotion.PROMOTE);
+        } else if (associatedCondition.isInUsersList() || associatedCondition.isInGroupList()) {
+            // Explicitly listed users do not need Promotion/Promote permissions.
+            return true;
+        } else {
+            // Administrators can promote even if they are not included in the list of manual approvers.
+            return target.hasPermission(Jenkins.ADMINISTER);
+        }
+    }
+}
diff --git a/src/main/java/hudson/plugins/promoted_builds/Status.java b/src/main/java/hudson/plugins/promoted_builds/Status.java
index 761b542f..6a06699a 100644
--- a/src/main/java/hudson/plugins/promoted_builds/Status.java
+++ b/src/main/java/hudson/plugins/promoted_builds/Status.java
@@ -362,6 +362,22 @@ public boolean isManuallyApproved(){
         ManualCondition manualCondition=(ManualCondition) process.getPromotionCondition(ManualCondition.class.getName());
     	return manualCondition != null;
     }
+
+    public boolean canBuild() {
+        PromotionProcess process = getProcess();
+        if (process == null) {
+            return false;
+        }
+
+        AbstractBuild<?, ?> target = getTarget();
+        if (target == null) {
+            return false;
+        }
+
+        ManualCondition manualCondition = (ManualCondition) process.getPromotionCondition(ManualCondition.class.getName());
+        return PromotionPermissionHelper.hasPermission(target.getProject(), manualCondition);
+    }
+
     /**
      * Schedules a new build.
      * @param req Request
@@ -382,10 +398,8 @@ public void doBuild(StaplerRequest req, StaplerResponse rsp) throws IOException,
         }
         
         ManualCondition manualCondition = (ManualCondition) process.getPromotionCondition(ManualCondition.class.getName());     
-        if(!target.hasPermission(Promotion.PROMOTE)) {
-            if (manualCondition == null || (!manualCondition.getUsersAsSet().isEmpty() && !manualCondition.isInUsersList()
-                    && !manualCondition.isInGroupList()))
-                return;
+        if (!PromotionPermissionHelper.hasPermission(target.getProject(), manualCondition)) {
+            return;
         }
         
         JSONObject formData = req.getSubmittedForm();
diff --git a/src/main/java/hudson/plugins/promoted_builds/conditions/ManualCondition.java b/src/main/java/hudson/plugins/promoted_builds/conditions/ManualCondition.java
index 937e124f..6bdeab90 100644
--- a/src/main/java/hudson/plugins/promoted_builds/conditions/ManualCondition.java
+++ b/src/main/java/hudson/plugins/promoted_builds/conditions/ManualCondition.java
@@ -11,6 +11,7 @@
 import hudson.model.ParameterDefinition;
 import hudson.model.ParameterValue;
 import hudson.model.User;
+import hudson.plugins.promoted_builds.PromotionPermissionHelper;
 import hudson.plugins.promoted_builds.PromotionBadge;
 import hudson.plugins.promoted_builds.PromotionCondition;
 import hudson.plugins.promoted_builds.PromotionConditionDescriptor;
@@ -128,7 +129,7 @@ public PromotionBadge isMet(PromotionProcess promotionProcess, AbstractBuild<?,?
      * approved.
      */
     public boolean canApprove(PromotionProcess promotionProcess, AbstractBuild<?,?> build) {
-        if (!getUsersAsSet().isEmpty() && !isInUsersList() && !isInGroupList()) {
+        if (!PromotionPermissionHelper.hasPermission(build.getProject(), this)) {
             return false;
         }
         
diff --git a/src/main/resources/hudson/plugins/promoted_builds/PromotedBuildAction/index.jelly b/src/main/resources/hudson/plugins/promoted_builds/PromotedBuildAction/index.jelly
index 76d8d2cc..26872997 100644
--- a/src/main/resources/hudson/plugins/promoted_builds/PromotedBuildAction/index.jelly
+++ b/src/main/resources/hudson/plugins/promoted_builds/PromotedBuildAction/index.jelly
@@ -50,7 +50,7 @@
             <div>
               <!-- JENKINS-20492: show re-execute event when manually approved -->
               <j:choose>
-                <j:when test="${it.getPromotionProcess(p.name)!=null and it.canPromote()}">
+                <j:when test="${it.getPromotionProcess(p.name)!=null and p.canBuild()}">
                   <form style="float:right" method="post" action="${p.name}/build">
                     <f:submit value="${%Re-execute promotion}"/>
                   </form>
@@ -96,7 +96,7 @@
               <a href="../../promotion/process/${p.name}" class="model-link">${p.name}</a>
             </h2>
             <j:choose>
-              <j:when test="${it.getPromotionProcess(p.name)!=null and it.canPromote()}">
+              <j:when test="${it.getPromotionProcess(p.name)!=null and it.canPromote(p.name)}">
                 <form style="float:right" method="post" action="forcePromotion?name=${p.name}">
                   <f:submit value="${%Force promotion}"/>
                 </form>
diff --git a/src/main/resources/hudson/plugins/promoted_builds/conditions/ManualCondition/Badge/index.jelly b/src/main/resources/hudson/plugins/promoted_builds/conditions/ManualCondition/Badge/index.jelly
index f1fbff06..dfffe295 100644
--- a/src/main/resources/hudson/plugins/promoted_builds/conditions/ManualCondition/Badge/index.jelly
+++ b/src/main/resources/hudson/plugins/promoted_builds/conditions/ManualCondition/Badge/index.jelly
@@ -1,6 +1,7 @@
 <?jelly escape-by-default='true'?>
 <j:jelly xmlns:j="jelly:core" xmlns:st="jelly:stapler" xmlns:d="jelly:define" xmlns:l="/lib/layout" xmlns:t="/lib/hudson" xmlns:f="/lib/form" xmlns:i="jelly:fmt">
   <l:pane title="${%Manually Approved}" width="100"><tr><td>
+    <j:if test="${p.canBuild()}">
     <f:form method="post" action="${h.encode(p.name)}/build" name="build">
         <j:if test="${!p.last.parameterDefinitionsWithValue.isEmpty()}">
           <f:section title="${%Parameters}">
@@ -13,5 +14,6 @@
           <f:submit value="${%Re-execute promotion}" />
         </f:block>
     </f:form>
+    </j:if>
   </td></tr></l:pane>
 </j:jelly>
diff --git a/src/test/java/hudson/plugins/promoted_builds/conditions/ManualConditionTest.java b/src/test/java/hudson/plugins/promoted_builds/conditions/ManualConditionTest.java
index e7149367..477a0da3 100644
--- a/src/test/java/hudson/plugins/promoted_builds/conditions/ManualConditionTest.java
+++ b/src/test/java/hudson/plugins/promoted_builds/conditions/ManualConditionTest.java
@@ -1,35 +1,48 @@
 package hudson.plugins.promoted_builds.conditions;
 
 import hudson.ExtensionList;
+import hudson.model.AbstractProject;
 import hudson.model.FreeStyleBuild;
+import hudson.model.Item;
 import hudson.model.ParameterDefinition;
 import hudson.model.ParameterValue;
+import hudson.model.Result;
 import hudson.model.Descriptor;
 import hudson.model.FreeStyleProject;
 import hudson.model.StringParameterDefinition;
+import hudson.model.User;
 import hudson.plugins.promoted_builds.JobPropertyImpl;
 import hudson.plugins.promoted_builds.PromotedBuildAction;
 import hudson.plugins.promoted_builds.Promotion;
 import hudson.plugins.promoted_builds.PromotionProcess;
 import hudson.plugins.promoted_builds.Status;
 import hudson.plugins.promoted_builds.conditions.ManualCondition.ManualApproval;
+import hudson.security.ACL;
 
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
 import java.util.SortedMap;
 
+import com.gargoylesoftware.htmlunit.FailingHttpStatusCodeException;
 import com.gargoylesoftware.htmlunit.html.HtmlElement;
 import com.gargoylesoftware.htmlunit.html.HtmlForm;
 import com.gargoylesoftware.htmlunit.html.HtmlPage;
 import hudson.model.StringParameterValue;
 import hudson.model.TaskListener;
+import jenkins.model.Jenkins;
+import org.acegisecurity.context.SecurityContext;
 import org.junit.Rule;
 import org.junit.Test;
 import org.jvnet.hudson.test.Issue;
 import org.jvnet.hudson.test.JenkinsRule;
+import org.jvnet.hudson.test.JenkinsRule.WebClient;
+import org.jvnet.hudson.test.MockAuthorizationStrategy;
 
 import static com.gargoylesoftware.htmlunit.html.HtmlFormUtil.submit;
+import static org.hamcrest.CoreMatchers.equalTo;
+import static org.hamcrest.CoreMatchers.notNullValue;
+import static org.hamcrest.CoreMatchers.nullValue;
 import static org.junit.Assert.*;
 
 /**
@@ -206,4 +219,136 @@ public void testManualPromotionProcessViaWebClient() throws Exception {
         }
         
     }
+
+    @Test
+    @Issue("SECURITY-190")
+    public void testManualPromotionPermissions() throws Exception {
+        enableSecurity(j);
+        FreeStyleProject p = j.createFreeStyleProject();
+        PromotionProcess pp = addPromotionProcess(p, "foo");
+        ManualCondition cond = new ManualCondition();
+        pp.conditions.add(cond);
+
+        {
+            // No approvers specified and user does not have Promotion/Promote
+            FreeStyleBuild b = j.assertBuildStatusSuccess(p.scheduleBuild2(0));
+            SecurityContext previous = ACL.impersonate(User.get("non-promoter").impersonate());
+            cond.approve(b, pp, Collections.EMPTY_LIST);
+            ACL.impersonate(previous.getAuthentication());
+            ManualApproval approval = b.getAction(ManualApproval.class);
+            assertThat("If no users are specified, then users without Promotion/Promote permissions should not be able to approve the promotion",
+                    approval, nullValue());
+        }
+
+        {
+            // No approvers specified and user does have Promotion/Promote
+            FreeStyleBuild b = j.assertBuildStatusSuccess(p.scheduleBuild2(0));
+            SecurityContext previous = ACL.impersonate(User.get("promoter").impersonate());
+            j.assertBuildStatusSuccess(cond.approve(b, pp, Collections.EMPTY_LIST));
+            ACL.impersonate(previous.getAuthentication());
+            ManualApproval approval = b.getAction(ManualApproval.class);
+            assertThat("If no users are specified, then users with Promotion/Promote permissions should be able to approve the promotion",
+                    approval, notNullValue());
+        }
+
+        {
+            // Approvers specified, user is approver, but does not have Promotion/Promote
+            cond.setUsers("non-promoter");
+            FreeStyleBuild b = j.assertBuildStatusSuccess(p.scheduleBuild2(0));
+            SecurityContext previous = ACL.impersonate(User.get("non-promoter").impersonate());
+            j.assertBuildStatusSuccess(cond.approve(b, pp, Collections.EMPTY_LIST));
+            ACL.impersonate(previous.getAuthentication());
+            ManualApproval approval = b.getAction(ManualApproval.class);
+            assertThat("If users are specified, then users in that list should be able to approve even without Promotion/Promote permissions",
+                    approval, notNullValue());
+        }
+
+        {
+            // Approvers specified, user is not approver, but does have Promotion/Promote
+            cond.setUsers("non-promoter");
+            FreeStyleBuild b = j.assertBuildStatusSuccess(p.scheduleBuild2(0));
+            SecurityContext previous = ACL.impersonate(User.get("promoter").impersonate());
+            cond.approve(b, pp, Collections.EMPTY_LIST);
+            ACL.impersonate(previous.getAuthentication());
+            ManualApproval approval = b.getAction(ManualApproval.class);
+            assertThat("If users are specified, then users not in the list should not be able to approve regardless of their permissions",
+                    approval, nullValue());
+        }
+    }
+
+    @Test
+    public void testManualPromotionPermissionsViaWebClient() throws Exception {
+        enableSecurity(j);
+        FreeStyleProject p = j.createFreeStyleProject();
+        PromotionProcess pp = addPromotionProcess(p, "foo");
+        WebClient wc = j.createWebClient();
+
+        FreeStyleBuild b = j.assertBuildStatusSuccess(p.scheduleBuild2(0));
+        ManualCondition cond = new ManualCondition();
+        pp.conditions.add(cond);
+        j.assertBuildStatusSuccess(cond.approve(b, pp, Collections.EMPTY_LIST));
+        assertThat(b.getAction(ManualApproval.class), notNullValue());
+
+        {
+            // Re-execute promotion as user without Promotion/Promote when no users are specified
+            wc.login("non-promoter", "non-promoter");
+            wc.goTo(String.format("job/%s/%d/promotion/%s/build?json={}", p.getName(), b.getNumber(), pp.getName()), "");
+            assertThat(pp.getBuildByNumber(2), nullValue());
+        }
+
+        {
+            // Re-execute promotion as user with Promotion/Promote when no users are specified
+            wc.login("promoter", "promoter");
+            try {
+                wc.getPage(b, String.format("promotion/%s/build?json={}", pp.getName()));
+            } catch (FailingHttpStatusCodeException e) {
+                assertThat(e.getStatusCode(), equalTo(404)); // Redirect after the build is broken.
+            }
+            assertThat(pp.getBuildByNumber(2).getResult(), equalTo(Result.SUCCESS));
+        }
+
+        {
+            // Re-execute promotion as specified user without Promotion/Promote
+            cond.setUsers("non-promoter");
+            wc.login("non-promoter", "non-promoter");
+            try {
+                wc.getPage(b, String.format("promotion/%s/build?json={}", pp.getName()));
+            } catch (FailingHttpStatusCodeException e) {
+                assertThat(e.getStatusCode(), equalTo(404)); // Redirect after the build is broken.
+            }
+            assertThat(pp.getBuildByNumber(3).getResult(), equalTo(Result.SUCCESS));
+        }
+
+        {
+            // Re-execute promotion as unspecified user with Promotion/Promote
+            cond.setUsers("non-promoter");
+            wc.login("promoter", "promoter");
+            try {
+                wc.goTo(String.format("job/%s/%d/promotion/%s/build?json={}", p.getName(), b.getNumber(), pp.getName()), "");
+            } catch (FailingHttpStatusCodeException e) {
+                assertThat(e.getStatusCode(), equalTo(404)); // Redirect after the build is broken.
+            }
+            assertThat(pp.getBuildByNumber(4), nullValue());
+        }
+    }
+
+    private PromotionProcess addPromotionProcess(AbstractProject<?,?> owner, String name) throws Exception {
+        ExtensionList<Descriptor> list = j.jenkins.getExtensionList(Descriptor.class);
+        list.add(new JobPropertyImpl.DescriptorImpl(JobPropertyImpl.class));
+        JobPropertyImpl base = new JobPropertyImpl(owner);
+        owner.addProperty(base);
+        return base.addProcess(name);
+    }
+
+    private static void enableSecurity(JenkinsRule j) {
+        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());
+        MockAuthorizationStrategy mas = new MockAuthorizationStrategy();
+        mas.grant(Item.BUILD, Item.READ, Jenkins.READ)
+                .everywhere()
+                .to("non-promoter", "promoter");
+        mas.grant(Promotion.PROMOTE)
+                .everywhere()
+                .to("promoter");
+        j.jenkins.setAuthorizationStrategy(mas);
+    }
 }
