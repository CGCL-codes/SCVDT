diff --git a/src/org/mindrot/jbcrypt/BCrypt.java b/src/org/mindrot/jbcrypt/BCrypt.java
index e9056e3..9e1effd 100644
--- a/src/org/mindrot/jbcrypt/BCrypt.java
+++ b/src/org/mindrot/jbcrypt/BCrypt.java
@@ -55,7 +55,7 @@
  * <p>
  * The amount of work increases exponentially (2**log_rounds), so 
  * each increment is twice as much work. The default log_rounds is
- * 10, and the valid range is 4 to 31.
+ * 10, and the valid range is 4 to 30.
  *
  * @author Damien Miller
  * @version 0.2
@@ -335,7 +335,9 @@
 		0xb74e6132, 0xce77e25b, 0x578fdfe3, 0x3ac372e6
 	};
 
-	// bcrypt IV: "OrpheanBeholderScryDoubt"
+	// bcrypt IV: "OrpheanBeholderScryDoubt". The C implementation calls
+	// this "ciphertext", but it is really plaintext or an IV. We keep
+	// the name to make code comparison easier.
 	static private final int bf_crypt_ciphertext[] = {
 		0x4f727068, 0x65616e42, 0x65686f6c,
 		0x64657253, 0x63727944, 0x6f756274
@@ -601,15 +603,16 @@ private void ekskey(byte data[], byte key[]) {
 	 * @param salt	the binary salt to hash with the password
 	 * @param log_rounds	the binary logarithm of the number
 	 * of rounds of hashing to apply
+	 * @param cdata         the plaintext to encrypt
 	 * @return	an array containing the binary hashed password
 	 */
-	private byte[] crypt_raw(byte password[], byte salt[], int log_rounds) {
+	public byte[] crypt_raw(byte password[], byte salt[], int log_rounds,
+	    int cdata[]) {
 		int rounds, i, j;
-		int cdata[] = (int[])bf_crypt_ciphertext.clone();
 		int clen = cdata.length;
 		byte ret[];
 
-		if (log_rounds < 4 || log_rounds > 31)
+		if (log_rounds < 4 || log_rounds > 30)
 			throw new IllegalArgumentException ("Bad number of rounds");
 		rounds = 1 << log_rounds;
 		if (salt.length != BCRYPT_SALT_LEN)
@@ -678,7 +681,8 @@ public static String hashpw(String password, String salt) {
 		saltb = decode_base64(real_salt, BCRYPT_SALT_LEN);
 
 		B = new BCrypt();
-		hashed = B.crypt_raw(passwordb, saltb, rounds);
+		hashed = B.crypt_raw(passwordb, saltb, rounds,
+		    (int[])bf_crypt_ciphertext.clone());
 
 		rs.append("$2");
 		if (minor >= 'a')
@@ -686,9 +690,9 @@ public static String hashpw(String password, String salt) {
 		rs.append("$");
 		if (rounds < 10)
 			rs.append("0");
-		if (rounds > 31) {
+		if (rounds > 30) {
 			throw new IllegalArgumentException(
-			    "rounds exceeds maximum (31)");
+			    "rounds exceeds maximum (30)");
 		}
 		rs.append(Integer.toString(rounds));
 		rs.append("$");
@@ -715,9 +719,9 @@ public static String gensalt(int log_rounds, SecureRandom random) {
 		rs.append("$2a$");
 		if (log_rounds < 10)
 			rs.append("0");
-		if (log_rounds > 31) {
+		if (log_rounds > 30) {
 			throw new IllegalArgumentException(
-			    "log_rounds exceeds maximum (31)");
+			    "log_rounds exceeds maximum (30)");
 		}
 		rs.append(Integer.toString(log_rounds));
 		rs.append("$");
