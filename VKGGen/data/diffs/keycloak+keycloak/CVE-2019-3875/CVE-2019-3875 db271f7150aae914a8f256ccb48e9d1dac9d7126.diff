diff --git a/server-spi-private/src/main/java/org/keycloak/models/Constants.java b/server-spi-private/src/main/java/org/keycloak/models/Constants.java
index 38e25c78090..da2c32deffe 100755
--- a/server-spi-private/src/main/java/org/keycloak/models/Constants.java
+++ b/server-spi-private/src/main/java/org/keycloak/models/Constants.java
@@ -21,57 +21,65 @@
 
 import java.util.Arrays;
 import java.util.Collection;
+import java.util.regex.Pattern;
 
 /**
  * @author <a href="mailto:bill@burkecentral.com">Bill Burke</a>
  * @version $Revision: 1 $
  */
-public interface Constants {
-    String ADMIN_CONSOLE_CLIENT_ID = "security-admin-console";
-    String ADMIN_CLI_CLIENT_ID = "admin-cli";
+public final class Constants {
+    public static final String ADMIN_CONSOLE_CLIENT_ID = "security-admin-console";
+    public static final String ADMIN_CLI_CLIENT_ID = "admin-cli";
 
-    String ACCOUNT_MANAGEMENT_CLIENT_ID = "account";
-    String BROKER_SERVICE_CLIENT_ID = "broker";
-    String REALM_MANAGEMENT_CLIENT_ID = "realm-management";
+    public static final String ACCOUNT_MANAGEMENT_CLIENT_ID = "account";
+    public static final String BROKER_SERVICE_CLIENT_ID = "broker";
+    public static final String REALM_MANAGEMENT_CLIENT_ID = "realm-management";
 
-    Collection<String> defaultClients = Arrays.asList(ACCOUNT_MANAGEMENT_CLIENT_ID, ADMIN_CLI_CLIENT_ID, BROKER_SERVICE_CLIENT_ID, REALM_MANAGEMENT_CLIENT_ID, ADMIN_CONSOLE_CLIENT_ID);
+    public static final Collection<String> defaultClients = Arrays.asList(ACCOUNT_MANAGEMENT_CLIENT_ID, ADMIN_CLI_CLIENT_ID, BROKER_SERVICE_CLIENT_ID, REALM_MANAGEMENT_CLIENT_ID, ADMIN_CONSOLE_CLIENT_ID);
 
-    String INSTALLED_APP_URN = "urn:ietf:wg:oauth:2.0:oob";
-    String INSTALLED_APP_URL = "http://localhost";
-    String READ_TOKEN_ROLE = "read-token";
-    String[] BROKER_SERVICE_ROLES = {READ_TOKEN_ROLE};
-    String OFFLINE_ACCESS_ROLE = OAuth2Constants.OFFLINE_ACCESS;
+    public static final String INSTALLED_APP_URN = "urn:ietf:wg:oauth:2.0:oob";
+    public static final String INSTALLED_APP_URL = "http://localhost";
+    public static final String READ_TOKEN_ROLE = "read-token";
+    public static final String[] BROKER_SERVICE_ROLES = {READ_TOKEN_ROLE};
+    public static final String OFFLINE_ACCESS_ROLE = OAuth2Constants.OFFLINE_ACCESS;
 
-    String AUTHZ_UMA_PROTECTION = "uma_protection";
-    String AUTHZ_UMA_AUTHORIZATION = "uma_authorization";
-    String[] AUTHZ_DEFAULT_AUTHORIZATION_ROLES = {AUTHZ_UMA_AUTHORIZATION};
+    public static final String AUTHZ_UMA_PROTECTION = "uma_protection";
+    public static final String AUTHZ_UMA_AUTHORIZATION = "uma_authorization";
+    public static final String[] AUTHZ_DEFAULT_AUTHORIZATION_ROLES = {AUTHZ_UMA_AUTHORIZATION};
 
     // 15 minutes
-    int DEFAULT_ACCESS_TOKEN_LIFESPAN_FOR_IMPLICIT_FLOW_TIMEOUT = 900;
+    public static final int DEFAULT_ACCESS_TOKEN_LIFESPAN_FOR_IMPLICIT_FLOW_TIMEOUT = 900;
     // 30 days
-    int DEFAULT_OFFLINE_SESSION_IDLE_TIMEOUT = 2592000;
+    public static final int DEFAULT_OFFLINE_SESSION_IDLE_TIMEOUT = 2592000;
     // KEYCLOAK-7688 Offline Session Max for Offline Token
     // 60 days
-    int DEFAULT_OFFLINE_SESSION_MAX_LIFESPAN = 5184000;
+    public static final int DEFAULT_OFFLINE_SESSION_MAX_LIFESPAN = 5184000;
 
-    String VERIFY_EMAIL_KEY = "VERIFY_EMAIL_KEY";
-    String VERIFY_EMAIL_CODE = "VERIFY_EMAIL_CODE";
-    String EXECUTION = "execution";
-    String CLIENT_ID = "client_id";
-    String TAB_ID = "tab_id";
-    String KEY = "key";
+    public static final String VERIFY_EMAIL_KEY = "VERIFY_EMAIL_KEY";
+    public static final String VERIFY_EMAIL_CODE = "VERIFY_EMAIL_CODE";
+    public static final String EXECUTION = "execution";
+    public static final String CLIENT_ID = "client_id";
+    public static final String TAB_ID = "tab_id";
+    public static final String KEY = "key";
 
-    String SKIP_LINK = "skipLink";
-    String TEMPLATE_ATTR_ACTION_URI = "actionUri";
-    String TEMPLATE_ATTR_REQUIRED_ACTIONS = "requiredActions";
+    public static final String SKIP_LINK = "skipLink";
+    public static final String TEMPLATE_ATTR_ACTION_URI = "actionUri";
+    public static final String TEMPLATE_ATTR_REQUIRED_ACTIONS = "requiredActions";
 
     // Prefix for user attributes used in various "context"data maps
-    String USER_ATTRIBUTES_PREFIX = "user.attributes.";
+    public static final String USER_ATTRIBUTES_PREFIX = "user.attributes.";
 
     // Indication to admin-rest-endpoint that realm keys should be re-generated
-    String GENERATE = "GENERATE";
+    public static final String GENERATE = "GENERATE";
 
-    int DEFAULT_MAX_RESULTS = 100;
+    public static final int DEFAULT_MAX_RESULTS = 100;
 
-    String OFFLINE_ACCESS_SCOPE_CONSENT_TEXT = "${offlineAccessScopeConsentText}";
+    // Delimiter to be used in the configuration of authenticators (and some other components) in case that we need to save
+    // multiple values into single string
+    public static final String CFG_DELIMITER = "##";
+
+    // Better performance to use this instead of String.split
+    public static final Pattern CFG_DELIMITER_PATTERN = Pattern.compile("\\s*" + CFG_DELIMITER + "\\s*");
+
+    public static final String OFFLINE_ACCESS_SCOPE_CONSENT_TEXT = "${offlineAccessScopeConsentText}";
 }
diff --git a/services/src/main/java/org/keycloak/authentication/authenticators/x509/AbstractX509ClientCertificateAuthenticatorFactory.java b/services/src/main/java/org/keycloak/authentication/authenticators/x509/AbstractX509ClientCertificateAuthenticatorFactory.java
index ea77149e81e..ae531b8a2b8 100644
--- a/services/src/main/java/org/keycloak/authentication/authenticators/x509/AbstractX509ClientCertificateAuthenticatorFactory.java
+++ b/services/src/main/java/org/keycloak/authentication/authenticators/x509/AbstractX509ClientCertificateAuthenticatorFactory.java
@@ -56,6 +56,7 @@
 import static org.keycloak.authentication.authenticators.x509.AbstractX509ClientCertificateAuthenticator.USER_ATTRIBUTE_MAPPER;
 import static org.keycloak.authentication.authenticators.x509.AbstractX509ClientCertificateAuthenticator.USER_MAPPER_SELECTION;
 import static org.keycloak.provider.ProviderConfigProperty.BOOLEAN_TYPE;
+import static org.keycloak.provider.ProviderConfigProperty.MULTIVALUED_STRING_TYPE;
 import static org.keycloak.provider.ProviderConfigProperty.STRING_TYPE;
 import static org.keycloak.provider.ProviderConfigProperty.TEXT_TYPE;
 
@@ -138,14 +139,18 @@
         crlDPEnabled.setName(ENABLE_CRLDP);
         crlDPEnabled.setDefaultValue(false);
         crlDPEnabled.setLabel("Enable CRL Distribution Point to check certificate revocation status");
-        crlDPEnabled.setHelpText("CRL Distribution Point is a starting point for CRL. CDP is optional, but most PKI authorities include CDP in their certificates.");
+        crlDPEnabled.setHelpText("CRL Distribution Point is a starting point for CRL. If this is ON, then CRL checking will be done based on the CRL distribution points included" +
+                " in the checked certificates. CDP is optional, but most PKI authorities include CDP in their certificates.");
 
         ProviderConfigProperty cRLRelativePath = new ProviderConfigProperty();
-        cRLRelativePath.setType(STRING_TYPE);
+        cRLRelativePath.setType(MULTIVALUED_STRING_TYPE);
         cRLRelativePath.setName(CRL_RELATIVE_PATH);
         cRLRelativePath.setDefaultValue("crl.pem");
-        cRLRelativePath.setLabel("CRL File path");
-        cRLRelativePath.setHelpText("The path to a CRL file that contains a list of revoked certificates. Paths are assumed to be relative to $jboss.server.config.dir");
+        cRLRelativePath.setLabel("CRL Path");
+        cRLRelativePath.setHelpText("Applied just if CRL checking is ON and CRL Distribution point is OFF. It contains the URL (typically 'http' or 'ldap') " +
+                "where the CRL is available. Alternatively it can contain the path to a CRL file that contains a list of revoked certificates. Paths are assumed to be relative to $jboss.server.config.dir. " +
+                "Multiple CRLs can be included, however it can affect performance as the certificate will be checked against all listed CRLs."
+        );
 
         ProviderConfigProperty oCspCheckingEnabled = new ProviderConfigProperty();
         oCspCheckingEnabled.setType(BOOLEAN_TYPE);
diff --git a/services/src/main/java/org/keycloak/authentication/authenticators/x509/CertificateValidator.java b/services/src/main/java/org/keycloak/authentication/authenticators/x509/CertificateValidator.java
index 1b2aa80b690..1c163225030 100644
--- a/services/src/main/java/org/keycloak/authentication/authenticators/x509/CertificateValidator.java
+++ b/services/src/main/java/org/keycloak/authentication/authenticators/x509/CertificateValidator.java
@@ -20,6 +20,7 @@
 
 import org.keycloak.common.util.CRLUtils;
 import org.keycloak.common.util.OCSPUtils;
+import org.keycloak.models.Constants;
 import org.keycloak.services.ServicesLogger;
 
 import javax.naming.Context;
@@ -44,6 +45,7 @@
 import java.security.cert.X509Certificate;
 import java.security.cert.CertificateException;
 import java.security.cert.CRLException;
+import java.util.Arrays;
 import java.util.Collection;
 import java.util.Collections;
 import java.util.Hashtable;
@@ -51,6 +53,9 @@
 import java.util.Set;
 import java.util.LinkedList;
 import java.util.ArrayList;
+import java.util.stream.Collectors;
+import java.util.stream.Stream;
+
 import org.keycloak.saml.common.exceptions.ProcessingException;
 import org.keycloak.saml.processing.core.util.XMLSignatureUtil;
 
@@ -204,6 +209,29 @@ public CRLLoaderProxy(X509CRL crl) {
         }
     }
 
+    // Delegate to list of other CRLLoaders
+    public static class CRLListLoader extends CRLLoaderImpl {
+
+        private final List<CRLLoaderImpl> delegates;
+
+        public CRLListLoader(String cRLConfigValue) {
+            String[] delegatePaths = Constants.CFG_DELIMITER_PATTERN.split(cRLConfigValue);
+            this.delegates = Arrays.stream(delegatePaths)
+                    .map(CRLFileLoader::new)
+                    .collect(Collectors.toList());
+        }
+
+
+        @Override
+        public Collection<X509CRL> getX509CRLs() throws GeneralSecurityException {
+            Collection<X509CRL> result = new LinkedList<>();
+            for (CRLLoaderImpl delegate : delegates) {
+                result.addAll(delegate.getX509CRLs());
+            }
+            return result;
+        }
+    }
+
     public static class CRLFileLoader extends CRLLoaderImpl {
 
         private final String cRLPath;
@@ -670,7 +698,7 @@ public GotOCSP oCSPEnabled(boolean value) {
             public class GotCRLDP {
                 public GotCRLRelativePath cRLrelativePath(String value) {
                     if (value != null)
-                        _crlLoader = new CRLFileLoader(value);
+                        _crlLoader = new CRLListLoader(value);
                     return new GotCRLRelativePath();
                 }
 
diff --git a/testsuite/integration-arquillian/servers/auth-server/jboss/common/keystore/client.crt b/testsuite/integration-arquillian/servers/auth-server/jboss/common/keystore/client.crt
index 15b13562aae..c1dabba9e97 100644
--- a/testsuite/integration-arquillian/servers/auth-server/jboss/common/keystore/client.crt
+++ b/testsuite/integration-arquillian/servers/auth-server/jboss/common/keystore/client.crt
@@ -1,26 +1,39 @@
 -----BEGIN CERTIFICATE-----
-MIIEdDCCA1ygAwIBAgICEAAwDQYJKoZIhvcNAQELBQAwYzELMAkGA1UEBhMCVVMx
-CzAJBgNVBAgMAk1BMQ8wDQYDVQQHDAZCb3N0b24xEDAOBgNVBAoMB1JlZCBIYXQx
-ETAPBgNVBAsMCEtleWNsb2FrMREwDwYDVQQDDAhLZXljbG9hazAgFw0xNjEwMzEy
-MDM4NDNaGA8zMDE2MDMwMzIwMzg0M1owgZQxCzAJBgNVBAYTAlVTMQswCQYDVQQI
-DAJNQTERMA8GA1UEBwwIV2VzdHdvb2QxEDAOBgNVBAoMB1JlZCBIYXQxETAPBgNV
-BAsMCEtleWNsb2FrMRwwGgYDVQQDDBN0ZXN0LXVzZXJAbG9jYWxob3N0MSIwIAYJ
-KoZIhvcNAQkBFhN0ZXN0LXVzZXJAbG9jYWxob3N0MIIBIjANBgkqhkiG9w0BAQEF
-AAOCAQ8AMIIBCgKCAQEA0JQtc138gSkvEXOywfAbM2NW60I2//LyMSbjn1pg2H+O
-illwHd9KvB8tGC42HIClsUuNYQw623xVffD2CMvDW/5rVGTOhn7MWSWpRD6iMma8
-fQM8NfLou4TGFzD+HUqPcje3mwm0OxWmVnZ+zF3M68aesy4Qhbv201ND1PiQjzFH
-S/05mCV5SDlTRKf4iLszsV03SDc3zqSSAU7dbiLRQFlJ9PX6EAlkZhq+vcoa210s
-k5bKGh0D7j+m9rqATsQP9voq0TxN/HibLeQ6rJbraD2Zk++Z6XXGww7wdxV3gGW3
-1DOq6fC4QVF76qOXtons9rR0tReD5KC5vPzmW6No/wIDAQABo4H9MIH6MAkGA1Ud
-EwQCMAAwEQYJYIZIAYb4QgEBBAQDAgWgMDMGCWCGSAGG+EIBDQQmFiRPcGVuU1NM
-IEdlbmVyYXRlZCBDbGllbnQgQ2VydGlmaWNhdGUwHQYDVR0OBBYEFMLdiOrXFhFF
-sUcG4qYGwC2qkEOvMB8GA1UdIwQYMBaAFJ1G0xr/t9MQ/8lyXdmgbdoxAoOjMA4G
-A1UdDwEB/wQEAwIF4DAdBgNVHSUEFjAUBggrBgEFBQcDAgYIKwYBBQUHAwQwNgYI
-KwYBBQUHAQEEKjAoMCYGCCsGAQUFBzABhhpodHRwOi8vbG9jYWxob3N0Ojg4ODgv
-b3NjcDANBgkqhkiG9w0BAQsFAAOCAQEAK2v0XgHQcwSufq9Ax2841PfKo82vHiZu
-kKnT/rAc2VtG/A3ppMdwavFiMfWD9lLmx0+vSODVtcGVLqIbsd0VLrWxfs1CL214
-Ae1skj8gDBrEdfCwq0CQNJpcrBDHvFeq7PuFNNNT0ZDnoZ4FWGfcu+UFOgU5kWsW
-3ostYQczLRqiXklTnRnqRLA31tI/ImgPKE0gNc5SxcpOJsg0poUIprYT1Bdj7ZKV
-wlwN7HVjUGEVcPku9dGkwCRQxRlrL1z61IX79K538AWGHs/1mHyN68GQ1NYVe+y5
-+WES72t68nXFtLDMTNcDik0VKpwnpuyS++KVCX/6fQc04gN4fo8yyw==
+MIIG2zCCBMOgAwIBAgICEAkwDQYJKoZIhvcNAQELBQAwgYcxCzAJBgNVBAYTAlVT
+MQswCQYDVQQIDAJNQTEQMA4GA1UECgwHUmVkIEhhdDERMA8GA1UECwwIS2V5Y2xv
+YWsxITAfBgNVBAMMGEtleWNsb2FrIEludGVybWVkaWF0ZSBDQTEjMCEGCSqGSIb3
+DQEJARYUY29udGFjdEBrZXljbG9hay5vcmcwHhcNMTkwMzE0MTA1NDI4WhcNNDYw
+NzMwMTA1NDI4WjCBlDELMAkGA1UEBhMCVVMxCzAJBgNVBAgMAk1BMREwDwYDVQQH
+DAhXZXN0Zm9yZDEQMA4GA1UECgwHUmVkIEhhdDERMA8GA1UECwwIS2V5Y2xvYWsx
+HDAaBgNVBAMME3Rlc3QtdXNlckBsb2NhbGhvc3QxIjAgBgkqhkiG9w0BCQEWE3Rl
+c3QtdXNlckBsb2NhbGhvc3QwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoIC
+AQDpitg+FXUbxjlIwD1l6Jef4ZDMAjSl4DtGa4E5ga8yJ/BfDv0AmL5DYEQEyASD
+dvpzSvj3o/erRx84TwtOzuyjAy53I0hI45mdsZr4dhYz6/saKE/sdJs792vTIVQm
+I1hzO8fi1rgADJ3uMT8deADFWWvj+2E5s2m2zFhzPYPSLcY8pf46ZLfS5lrGYdl7
+7fejYD+AhtVXoJpdJzZ0egCMCpSpdseTTLl64QrNsp9D60lcMx7HSGo6mkwxnncI
+VqS8wsv/5Nyi0/cnUWoYW1CliuPAzy3/nCbm1RnBP4XYgEKgNQv91Jv5F0dT3CIx
+t2C3l2r4Zk/+x+d5UXtZnR5lJ9W+1a+qGF+7pZ/MGagTL3Hjitt8JCmPe9I9jeOl
+IwAXMPX51HJCmII6b/CNNvT4JyIAY1962cjJkQfCocPjHFSMdA7Bce6CXHOWVdek
+TOLR8ddOxdPODgZA5KidJONqcNYKbKL5Z/j1ShnrQRhWwALDcDDGcZiU/69UVVpO
+LqXvx381s9T78HE42kQ/DM4QtesTq+x0fLg0QxVONPl+ZpBCZM70+fooe2uuE7ED
+WblPw8d4+Z3GKbSzJdBb85TZXw5Gd1wlEH5K/aP58XavQ0wRqcupzGguQTH/Dys4
+1wupYqFAUExSRqx7HOfT0yNBkjl5JbP4DuPeEpmyJApmqwIDAQABo4IBQDCCATww
+CQYDVR0TBAIwADARBglghkgBhvhCAQEEBAMCBaAwMwYJYIZIAYb4QgENBCYWJE9w
+ZW5TU0wgR2VuZXJhdGVkIENsaWVudCBDZXJ0aWZpY2F0ZTAdBgNVHQ4EFgQU+mP2
+lV1sZIgt0Drjepygo2YEXW0wDgYDVR0PAQH/BAQDAgXgMB0GA1UdJQQWMBQGCCsG
+AQUFBwMCBggrBgEFBQcDBDBhBgNVHR8EWjBYMCWgI6Ahhh9odHRwOi8vbG9jYWxo
+b3N0Ojg4ODkvZW1wdHkuY3JsMC+gLaArhilodHRwOi8vbG9jYWxob3N0Ojg4ODkv
+aW50ZXJtZWRpYXRlLWNhLmNybDA2BggrBgEFBQcBAQQqMCgwJgYIKwYBBQUHMAGG
+Gmh0dHA6Ly9sb2NhbGhvc3Q6ODg4OC9vc2NwMA0GCSqGSIb3DQEBCwUAA4ICAQB5
+5CKLYbf69yohT4HD9YHdM/8a6/jOGZNLLcm9UOSPtnAFTzgPTuS0BJzIbJNA+6Cz
+W/71Inx+U03iSX9+DztCC275zt/ccTaWNk+oGRUsV4Y6moGVl9OfeR05Dek07lTp
+scW1q/BSTDBYy3C5IcCucMZaqOFRjKjdgaelDezuechcrSh5JWd1MwxecARDZ8c/
+8CSUDff7qTsBEiQCce2OprK1ZKCz5HnkeE2BgkxKofPYsHZxhFZprNYb3RQEwSmO
+G56P70yWl+EDaiaviu48TbjbhLtcP+Zw/eEihVS23tU1qQdxB3DJ+m6vf3CvOo8m
+2EyFi/eJmwFZI5zThm2XsdlyxeCtCZ6q/AokCocFtanCh/hJmS7ydo93xGL8Vu6g
+rME8jjqiLl94MFIhYUaTXS4ewNmKQpCREvkeXIuozwTn4KdAbjHDIAgUsDWJ3Tsk
+/xDbaMN/Sw9CUBXA+ETk+VtRm28Xnm93kTHuPWDNGvY5/DJ/+u3bqoWKUrGDZCX5
+cHXBk/x3mM2rNyw8JEFrsaKT47sugOaTA+8118mAK1/5dMV+W2Oda4bfJKqYrXJo
+WVBKEW4juYdlMvJhyknk1QOQGoMSNO9HE6Kxf7sjn5SrLPRRGKL6XaEZdijvkYA3
+dK3++VfcrFBG8mQ/K9ywqWq3ExV3V/p/bGLer8TyGg==
 -----END CERTIFICATE-----
diff --git a/testsuite/integration-arquillian/servers/auth-server/jboss/common/keystore/client.jks b/testsuite/integration-arquillian/servers/auth-server/jboss/common/keystore/client.jks
index b2ac2cf2f8e..d4d8c553069 100644
Binary files a/testsuite/integration-arquillian/servers/auth-server/jboss/common/keystore/client.jks and b/testsuite/integration-arquillian/servers/auth-server/jboss/common/keystore/client.jks differ
diff --git a/testsuite/integration-arquillian/servers/auth-server/jboss/common/keystore/client.key b/testsuite/integration-arquillian/servers/auth-server/jboss/common/keystore/client.key
index 53b5a40898a..20ff9ffc1cd 100644
--- a/testsuite/integration-arquillian/servers/auth-server/jboss/common/keystore/client.key
+++ b/testsuite/integration-arquillian/servers/auth-server/jboss/common/keystore/client.key
@@ -1,27 +1,54 @@
 -----BEGIN RSA PRIVATE KEY-----
-MIIEpQIBAAKCAQEA0JQtc138gSkvEXOywfAbM2NW60I2//LyMSbjn1pg2H+Oillw
-Hd9KvB8tGC42HIClsUuNYQw623xVffD2CMvDW/5rVGTOhn7MWSWpRD6iMma8fQM8
-NfLou4TGFzD+HUqPcje3mwm0OxWmVnZ+zF3M68aesy4Qhbv201ND1PiQjzFHS/05
-mCV5SDlTRKf4iLszsV03SDc3zqSSAU7dbiLRQFlJ9PX6EAlkZhq+vcoa210sk5bK
-Gh0D7j+m9rqATsQP9voq0TxN/HibLeQ6rJbraD2Zk++Z6XXGww7wdxV3gGW31DOq
-6fC4QVF76qOXtons9rR0tReD5KC5vPzmW6No/wIDAQABAoIBAQDNPLEIbzfyQ/sL
-miQQT1oEk8BIV+xUp9MG6HRcLgtTnRg+LEl1K22XdLnjrD0UiMYBkg04rFcR9+ML
-vNnrx8ygrdUgwtyxXP1ozvUisNra61qXTGKn1zCIq9pboZq6ac6Cni6tgLv205PM
-Smb0Y2wrqFIqj640WcNDKBB79GYSbq0oQKOxCXUI7Y+vv521X5Y0CCymDpeghPVv
-zC63bdH+IPsuKUHJJvWSTi3YhWPWgQ4qRk3E1PEBKK4La1qnZ+kCLn18Oq9n1r8s
-kUr+Wremnyvf4smnYpdqF/r3ZFUXEVRwhGpSE8yhxewtnurg9iJz6D5DKl5PR3UR
-T0PxIznxAoGBAOmQRtams3I5Ed+UdLJRjBnGj9Yts5GfmzlMPlaErjsEDGYaumQP
-sGyy4PfS6zGqI9EANR2q6Ei7eNs3zt233jvN0L7HobTyfvc1e8usmgsGmKXnKELx
-0QzmR7mxZ8d92goM2fOCVWJt8IeElZxlAUFlV7WbHJHrMrSKhHl7sBiXAoGBAOSd
-e7iby+tVJ7IShNkEvh1cSwxfFF1/E71WqRJ5ujotH7p8lmxF827sf7ZWOpeCoASS
-isPEr0iJ1t1jHAbOzFM9zYC3n397u6DaUawsAIVPHzs89n6nFmPRg6nqHrarb08F
-N13P/vdewolNq/k3CRNQcALfRcAGGi5OJoP8PxfZAoGAXVyrxF/seSsw5tN79k+8
-lg0WMAIitoI7VSMSBBmTX8nVfvcOLLNMzZaPcODh3P9qw7+2e752jaRKwi5DxcMa
-1YMG/0vjauZINF8vthGvndqsKB0HrgLlkqd2Ylb06fx3rO7ILJubr/XMYQ9xkouZ
-fd+ZuOFhAT8oDJ0WKU107c8CgYEAnw3iMgJS0ZwhTgcMXmCqVIsNu8G6zYHIHgbZ
-An2mTytt07Uygon4X8gy4o0Dnr3GzueVm7aPrQwZbVWy/hmKlq989nzKf0t6suKx
-x/OlORpfRDuZ02w0a6Ys0F6Ol9CWVIfwiVhYr4pCFnzvlSfxLHreM2Fbicm1FVpR
-+anZy6ECgYEA2w7y3z0WpUDiulDHnVT0qGaurHCjA8bNZdDVzAKIYlXP9NVP1fHV
-v+HIaViI2OH0knHVo+xybCqw9iREHw31pFbqKhLseoEsLgyp29532Ubug4xiaGdu
-1syDZbIVO+7b19lmJWxOkCzIF/7JPcnls7T1NbcGpMNMaZDUvugFde4=
+Proc-Type: 4,ENCRYPTED
+DEK-Info: AES-256-CBC,58507FBFA90F44D96D42E8ED4989032F
+
+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
 -----END RSA PRIVATE KEY-----
diff --git a/testsuite/integration-arquillian/servers/auth-server/jboss/common/keystore/client.p12 b/testsuite/integration-arquillian/servers/auth-server/jboss/common/keystore/client.p12
new file mode 100644
index 00000000000..835e3676ca1
Binary files /dev/null and b/testsuite/integration-arquillian/servers/auth-server/jboss/common/keystore/client.p12 differ
diff --git a/testsuite/integration-arquillian/servers/auth-server/jboss/common/keystore/empty.crl b/testsuite/integration-arquillian/servers/auth-server/jboss/common/keystore/empty.crl
index 5b85784c393..ee31d3a8c83 100644
--- a/testsuite/integration-arquillian/servers/auth-server/jboss/common/keystore/empty.crl
+++ b/testsuite/integration-arquillian/servers/auth-server/jboss/common/keystore/empty.crl
@@ -1,12 +1,19 @@
 -----BEGIN X509 CRL-----
-MIIBvzCBqAIBATANBgkqhkiG9w0BAQsFADBmMQswCQYDVQQGEwJVUzELMAkGA1UE
-CBMCTUExETAPBgNVBAcTCFdlc3R3b3JkMRAwDgYDVQQKEwdSZWQgSGF0MREwDwYD
-VQQLEwhLZXljbG9hazESMBAGA1UEAxMJbG9jYWxob3N0Fw0xNjEwMjUxNTQ1MTla
-Fw0xNjExMjQxNTQ1MTlaoA4wDDAKBgNVHRQEAwIBATANBgkqhkiG9w0BAQsFAAOC
-AQEAEOvgtvCPNjLTS9AMlv4AzhASQ3jbgFBhdNK6YuOSfvOk8t5YonxZACJy+3PR
-rK2aFl6GT4FhIPT4duK/r1s+VhlRKfTAjs3WYq2ftdYyBlZBjDFyoRHHmtblnY+H
-qRuaZRNGzPMjooLyCM0ZKVSoBgLrllzU8HCY+5kJ0lmo2/A83XORsfQ+pRm8vNOf
-l6Q17lS44ApOlUxLXux1gW5YEfJ6pnJkd2QCWJ5DOFKGrFZnm2CYA5baQS9SpxA/
-lqYVlC8oEDY6YAng1QYnGCPLHM0ONeYmdzB5p1xRbmXJLAqEQY6DqhNtWQAgKJy3
-ArqBs/g6CuuoPvwGogykmSI4AA==
+MIIDAzCB7AIBATANBgkqhkiG9w0BAQsFADCBhzELMAkGA1UEBhMCVVMxCzAJBgNV
+BAgMAk1BMRAwDgYDVQQKDAdSZWQgSGF0MREwDwYDVQQLDAhLZXljbG9hazEhMB8G
+A1UEAwwYS2V5Y2xvYWsgSW50ZXJtZWRpYXRlIENBMSMwIQYJKoZIhvcNAQkBFhRj
+b250YWN0QGtleWNsb2FrLm9yZxcNMTkwMzE0MTEwNTI1WhcNMTkwNDEzMTEwNTI1
+WqAwMC4wHwYDVR0jBBgwFoAURxJ8iQtHVxlUCvUDBM2fhqKWdpQwCwYDVR0UBAQC
+AhAAMA0GCSqGSIb3DQEBCwUAA4ICAQAnH3w3I/EYB51RrB0ZEmiVtxbuEoy4bbhj
+N1jvXsnM6OZb0me3Q6NzkozgVfDbDrWSGvdOaGqWcWrxsFuCqi5T8yHhTU3eRphh
++z01jOvk3UjfOdEOWMJGJWgBLAQj0RUsxRXqGT6n7gyndB+5RTuN/WNjCd96Vf0q
+yRDfoGGlanGh8sg7BFFnTfDH0dYw8ApYbt/rFT1suFmEaiH44Nd8dldSJxqjK2Ph
+B0+4etNpZZEjuUGq0U+oYUeppI4oE3vqAPrP9f/Wd0Kc+Ci56RC8X2lf9TSN4qb9
+xv2a85pUgxBhioZT2fXTDjiUbYKXZhj5tMPixP0M+NcI2yutHpm0Y44BO76bmcVf
+8AAfH8RcyJlPwfEGwENzY+CZTqCYbCbSg12CLs9UL6ITx8Z1lt/LnLOGCq672rWb
+Pw3wO3Wmam8Zdyyr2Pff+/+ZcL587/Xif+ho48JSWrJynGwOe9WEBjWqYkfcxCP7
+plZxWj8MF7A389eBmpLF95BVLFHJECJYUfN7CPU2g+4cKSuzXenlSWtqDs/GdbeJ
+tFMoA9SzFut9tZg7BMA/gXF/2dTMsjU/1Cy1AVzvWl654wB6OYZv8pktwrjQ77qj
+S0X4hovoKfpoxYIzw1OTdOuyu7oc6Wh3XWtJWHssrdZuGczDTXtu1qRstFeag/iO
+cpvmIaTdvQ==
 -----END X509 CRL-----
diff --git a/testsuite/integration-arquillian/servers/auth-server/jboss/common/keystore/intermediate-ca.crl b/testsuite/integration-arquillian/servers/auth-server/jboss/common/keystore/intermediate-ca.crl
index 10eb8fb10a6..5bf65737f49 100644
--- a/testsuite/integration-arquillian/servers/auth-server/jboss/common/keystore/intermediate-ca.crl
+++ b/testsuite/integration-arquillian/servers/auth-server/jboss/common/keystore/intermediate-ca.crl
@@ -1,13 +1,19 @@
 -----BEGIN X509 CRL-----
-MIIB9TCB3gIBATANBgkqhkiG9w0BAQsFADBjMQswCQYDVQQGEwJVUzELMAkGA1UE
-CAwCTUExDzANBgNVBAcMBkJvc3RvbjEQMA4GA1UECgwHUmVkIEhhdDERMA8GA1UE
-CwwIS2V5Y2xvYWsxETAPBgNVBAMMCEtleWNsb2FrFw0xNjEwMzEyMDQzNDBaFw0x
-NjExMzAyMDQzNDBaMBUwEwICEAAXDTE2MTAzMTIwNDI1MlqgMDAuMB8GA1UdIwQY
-MBaAFJ1G0xr/t9MQ/8lyXdmgbdoxAoOjMAsGA1UdFAQEAgIQATANBgkqhkiG9w0B
-AQsFAAOCAQEA5LZMg0uxFh2FtPEYeIrX4rKZ06Q7re5tE99U/Ua7KAXMyOhcz7ba
-wAQbC7qN5RxD34NHAUTKV+QYHNfu1569xsfB60YVdYHcecV+jbzvecPTJVxFDprU
-5puw0NqVUb0xPKqdJGhYqkPiATppsqggbmwgKJnLTy207K5KboOdRsCag4XSZLul
-9PttdON62HFPJfNGsbpfGleRGpM0C3uju+nUnqocaSIf11DNOpUpgKH4HqKv3yIM
-TY7R8fvSX0QxcUtA+CJg6eS+XArguD1PWb0PwEy1psrgxrazwUysl0FVnw2oYDhO
-PPLMXuNvkMQ5bMsTOHgX3ohIyLbAVfDhAA==
+MIIDGzCCAQMCAQEwDQYJKoZIhvcNAQELBQAwgYcxCzAJBgNVBAYTAlVTMQswCQYD
+VQQIDAJNQTEQMA4GA1UECgwHUmVkIEhhdDERMA8GA1UECwwIS2V5Y2xvYWsxITAf
+BgNVBAMMGEtleWNsb2FrIEludGVybWVkaWF0ZSBDQTEjMCEGCSqGSIb3DQEJARYU
+Y29udGFjdEBrZXljbG9hay5vcmcXDTE5MDMxNDExMTAwMFoXDTE5MDQxMzExMTAw
+MFowFTATAgIQCRcNMTkwMzE0MTEwOTMwWqAwMC4wHwYDVR0jBBgwFoAURxJ8iQtH
+VxlUCvUDBM2fhqKWdpQwCwYDVR0UBAQCAhABMA0GCSqGSIb3DQEBCwUAA4ICAQCd
+TwIDW5J1SJ9p+Nfiq7BSgAWkMHRFLzUCUd5OoF1t51ZZqfHpwDd8VN+NVYg1yyW0
+FQbDV6XcZ8eOAfC4rhOutklJ2s5xqFvwDHQkXU19cTeKO2Igb2eP3Fpa4o8qAHXy
+nrqffY7YThS2kQo9b6K+hWPEdK/vwTbfhjQ188qtqMMCdFNsmM7xN9SitQe6Rg66
+ML5ZWr6G4igovKXs+ixpW1MEUniCEaXhx5AkbNPohx8Lg5817Ujj+N9A4/aVUY22
+euq4qIC1WjVO28ar7sx3wtPXRTCg8P+v/Iai7/elKb3nDsR3Trsl03W2bfyglOC3
+qbFeLo+6Yn4l4E3Hp8LNBKFDxfg+hbJZDpwqn6RFADl5Qae7T59m8RT/nIP698aB
+hgpg8V+7cLrk5DXrkjuEMfOIp0Zg1EnTC/Jsp2lX7IuMC4WIqgatP0nDUw0YCphY
+E5jEjFi8gd6j/j1dwsVTAbcNYUiP97slA5TCQfUmEn8Gz3p4vv54TojY+rPMlSUD
+2jmBDtCitvt1ZYN/cGhFn9anHql/lrlUKdRfyaJ4c2/RsTXVxCMVYEHuqoL+NEWH
+Q4+bocZSnfuneeHbnZaWYY8ITFoLzAGMlk3GjgaUkMIbt6ADvs+JU7NzC6zlfW9O
+aXY77Qlc3dpjNufscmH4FCD1LfN0WqRiFMMMze0Jew==
 -----END X509 CRL-----
diff --git a/testsuite/integration-arquillian/servers/auth-server/jboss/common/pki/root/ca/intermediate/crlnumber b/testsuite/integration-arquillian/servers/auth-server/jboss/common/pki/root/ca/intermediate/crlnumber
index 83b33d238da..7d802a3e710 100644
--- a/testsuite/integration-arquillian/servers/auth-server/jboss/common/pki/root/ca/intermediate/crlnumber
+++ b/testsuite/integration-arquillian/servers/auth-server/jboss/common/pki/root/ca/intermediate/crlnumber
@@ -1 +1 @@
-1000
+1002
diff --git a/testsuite/integration-arquillian/servers/auth-server/jboss/common/pki/root/ca/intermediate/crlnumber.old b/testsuite/integration-arquillian/servers/auth-server/jboss/common/pki/root/ca/intermediate/crlnumber.old
new file mode 100644
index 00000000000..dd11724042e
--- /dev/null
+++ b/testsuite/integration-arquillian/servers/auth-server/jboss/common/pki/root/ca/intermediate/crlnumber.old
@@ -0,0 +1 @@
+1001
diff --git a/testsuite/integration-arquillian/servers/auth-server/jboss/common/pki/root/ca/intermediate/index.txt b/testsuite/integration-arquillian/servers/auth-server/jboss/common/pki/root/ca/intermediate/index.txt
index 60d40307c11..f7ed490a2a1 100644
--- a/testsuite/integration-arquillian/servers/auth-server/jboss/common/pki/root/ca/intermediate/index.txt
+++ b/testsuite/integration-arquillian/servers/auth-server/jboss/common/pki/root/ca/intermediate/index.txt
@@ -1 +1,2 @@
 V	450708200730Z		1000	unknown	/C=US/ST=MA/L=Boston/O=Red Hat/OU=Keycloak/CN=test-user
+R	460730105428Z	190314110930Z	1009	unknown	/C=US/ST=MA/L=Westford/O=Red Hat/OU=Keycloak/CN=test-user@localhost/emailAddress=test-user@localhost
diff --git a/testsuite/integration-arquillian/servers/auth-server/jboss/common/pki/root/ca/intermediate/index.txt.attr.old b/testsuite/integration-arquillian/servers/auth-server/jboss/common/pki/root/ca/intermediate/index.txt.attr.old
new file mode 100644
index 00000000000..8f7e63a3475
--- /dev/null
+++ b/testsuite/integration-arquillian/servers/auth-server/jboss/common/pki/root/ca/intermediate/index.txt.attr.old
@@ -0,0 +1 @@
+unique_subject = yes
diff --git a/testsuite/integration-arquillian/servers/auth-server/jboss/common/pki/root/ca/intermediate/index.txt.old b/testsuite/integration-arquillian/servers/auth-server/jboss/common/pki/root/ca/intermediate/index.txt.old
index e69de29bb2d..60d40307c11 100644
--- a/testsuite/integration-arquillian/servers/auth-server/jboss/common/pki/root/ca/intermediate/index.txt.old
+++ b/testsuite/integration-arquillian/servers/auth-server/jboss/common/pki/root/ca/intermediate/index.txt.old
@@ -0,0 +1 @@
+V	450708200730Z		1000	unknown	/C=US/ST=MA/L=Boston/O=Red Hat/OU=Keycloak/CN=test-user
diff --git a/testsuite/integration-arquillian/servers/auth-server/jboss/common/pki/root/ca/intermediate/openssl.cnf b/testsuite/integration-arquillian/servers/auth-server/jboss/common/pki/root/ca/intermediate/openssl.cnf
index acd341ff9e9..cc076d4bc70 100644
--- a/testsuite/integration-arquillian/servers/auth-server/jboss/common/pki/root/ca/intermediate/openssl.cnf
+++ b/testsuite/integration-arquillian/servers/auth-server/jboss/common/pki/root/ca/intermediate/openssl.cnf
@@ -104,12 +104,16 @@ basicConstraints = CA:FALSE
 nsCertType = client, email
 nsComment = "OpenSSL Generated Client Certificate"
 subjectKeyIdentifier = hash
-authorityKeyIdentifier = keyid,issuer
+#authorityKeyIdentifier = keyid,issuer
 keyUsage = critical, nonRepudiation, digitalSignature, keyEncipherment
 extendedKeyUsage = clientAuth, emailProtection
-crlDistributionPoints = URI:http://localhost:8888/crl                                                    
+crlDistributionPoints=@crl_section
 authorityInfoAccess = OCSP;URI:http://localhost:8888/oscp
 
+[crl_section]
+URI.1 = http://localhost:8889/empty.crl
+URI.2 = http://localhost:8889/intermediate-ca.crl
+
 [ server_cert ]
 # Extensions for server certificates (`man x509v3_config`).
 basicConstraints = CA:FALSE
diff --git a/testsuite/integration-arquillian/servers/auth-server/jboss/common/pki/root/ca/intermediate/serial b/testsuite/integration-arquillian/servers/auth-server/jboss/common/pki/root/ca/intermediate/serial
index fb35a14c027..6cb3869343b 100644
--- a/testsuite/integration-arquillian/servers/auth-server/jboss/common/pki/root/ca/intermediate/serial
+++ b/testsuite/integration-arquillian/servers/auth-server/jboss/common/pki/root/ca/intermediate/serial
@@ -1 +1 @@
-1007
+1009
diff --git a/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/MutualTLSClientTest.java b/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/MutualTLSClientTest.java
index 00ea3895323..536e22c6811 100644
--- a/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/MutualTLSClientTest.java
+++ b/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/MutualTLSClientTest.java
@@ -44,7 +44,7 @@
    private static final String USER = "keycloak-user@localhost";
    private static final String PASSWORD = "password";
    private static final String REALM = "test";
-   private static final String EXACT_CERTIFICATE_SUBJECT_DN = "CN=Keycloak, OU=Keycloak, O=Red Hat, L=Boston, ST=MA, C=US";
+   private static final String EXACT_CERTIFICATE_SUBJECT_DN = "EMAILADDRESS=contact@keycloak.org, CN=Keycloak Intermediate CA, OU=Keycloak, O=Red Hat, ST=MA, C=US";
 
    @Override
    public void configureTestRealm(RealmRepresentation testRealm) {
diff --git a/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/x509/AbstractX509AuthenticationTest.java b/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/x509/AbstractX509AuthenticationTest.java
index ebc2c5997cb..facae2829bf 100644
--- a/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/x509/AbstractX509AuthenticationTest.java
+++ b/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/x509/AbstractX509AuthenticationTest.java
@@ -25,12 +25,14 @@
 import org.junit.Before;
 import org.junit.BeforeClass;
 import org.junit.Rule;
+import org.keycloak.OAuth2Constants;
 import org.keycloak.admin.client.resource.AuthenticationManagementResource;
 import org.keycloak.authentication.AuthenticationFlow;
 import org.keycloak.authentication.authenticators.x509.ValidateX509CertificateUsernameFactory;
 import org.keycloak.authentication.authenticators.x509.X509AuthenticatorConfigModel;
 import org.keycloak.authentication.authenticators.x509.X509ClientCertificateAuthenticatorFactory;
 import org.keycloak.common.util.Encode;
+import org.keycloak.events.Details;
 import org.keycloak.events.admin.OperationType;
 import org.keycloak.events.admin.ResourceType;
 import org.keycloak.models.utils.KeycloakModelUtils;
@@ -45,10 +47,14 @@
 import org.keycloak.testsuite.AssertEvents;
 import org.keycloak.testsuite.admin.ApiUtil;
 import org.keycloak.testsuite.pages.AbstractPage;
+import org.keycloak.testsuite.pages.AppPage;
+import org.keycloak.testsuite.pages.LoginPage;
+import org.keycloak.testsuite.pages.x509.X509IdentityConfirmationPage;
 import org.keycloak.testsuite.util.AdminEventPaths;
 import org.keycloak.testsuite.util.AssertAdminEvents;
 import org.keycloak.testsuite.util.ClientBuilder;
 import org.keycloak.testsuite.util.DroneUtils;
+import org.keycloak.testsuite.util.PhantomJSBrowser;
 import org.keycloak.testsuite.util.RealmBuilder;
 import org.keycloak.testsuite.util.UserBuilder;
 import org.openqa.selenium.WebDriver;
@@ -79,7 +85,7 @@
 public abstract class AbstractX509AuthenticationTest extends AbstractTestRealmKeycloakTest {
 
     public static final String EMPTY_CRL_PATH = "empty.crl";
-    public static final String CLIENT_CRL_PATH = "intermediate-ca.crl";
+    public static final String INTERMEDIATE_CA_CRL_PATH = "intermediate-ca.crl";
     protected final Logger log = Logger.getLogger(this.getClass());
 
     static final String REQUIRED = "REQUIRED";
@@ -106,6 +112,19 @@
     @Rule
     public AssertAdminEvents assertAdminEvents = new AssertAdminEvents(this);
 
+    @Page
+    @PhantomJSBrowser
+    protected AppPage appPage;
+
+    @Page
+    @PhantomJSBrowser
+    protected X509IdentityConfirmationPage loginConfirmationPage;
+
+    @Page
+    @PhantomJSBrowser
+    protected LoginPage loginPage;
+
+
     @Override
     protected boolean isImportAfterEachMethod() {
         return true;
@@ -113,14 +132,13 @@ protected boolean isImportAfterEachMethod() {
 
     @Before
     public void validateConfiguration() {
-        Assume.assumeTrue("Only JBoss AS has proper certificate configuration", isAuthServerJBoss());
         Assume.assumeTrue(AUTH_SERVER_SSL_REQUIRED);
     }
 
 
     @BeforeClass
     public static void onBeforeTestClass() {
-        configurePhantomJS("/ca.crt", "/client.crt", "/client.key", "secret");
+        configurePhantomJS("/ca.crt", "/client.crt", "/client.key", "password");
     }
 
 
@@ -133,13 +151,9 @@ public static void onBeforeTestClass() {
      * @param clientKeyPassword
      */
     protected static void configurePhantomJS(String certificatesPath, String clientCertificateFile, String clientKeyFile, String clientKeyPassword) {
-        String authServerHome = System.getProperty("auth.server.home");
+        String authServerHome = getAuthServerHome();
 
         if (authServerHome != null && System.getProperty("auth.server.ssl.required") != null) {
-            if (isAuthServerJBoss()) {
-                authServerHome = authServerHome + "/standalone/configuration";
-            }
-
             StringBuilder cliArgs = new StringBuilder();
 
             cliArgs.append("--ignore-ssl-errors=true ");
@@ -153,10 +167,27 @@ protected static void configurePhantomJS(String certificatesPath, String clientC
         }
     }
 
+
     private static boolean isAuthServerJBoss() {
         return Boolean.parseBoolean(System.getProperty("auth.server.jboss"));
     }
 
+    /**
+     * @return server home directory. This directory is supposed to contain client key, certificate and CRLs used in the tests
+     */
+    protected static String getAuthServerHome() {
+        String authServerHome = System.getProperty("auth.server.home");
+        if (authServerHome == null) {
+            return null;
+        }
+
+        if (isAuthServerJBoss()) {
+            authServerHome = authServerHome + "/standalone/configuration";
+        }
+
+        return authServerHome;
+    }
+
     @Before
     public void configureFlows() {
         authMgmtResource = adminClient.realms().realm(REALM_NAME).flows();
@@ -247,6 +278,7 @@ public void configureTestRealm(RealmRepresentation testRealm) {
                 .email("localhost@localhost")
                 .enabled(true)
                 .password("password")
+                .addAttribute("x509_issuer_identity", "Keycloak Intermediate CA")
                 .build();
 
         userId2 = user.getId();
@@ -393,11 +425,12 @@ protected static X509AuthenticatorConfigModel createLoginSubjectCN2UsernameOrEma
                 .setUserIdentityMapperType(USERNAME_EMAIL);
     }
 
-    protected static X509AuthenticatorConfigModel createLoginIssuerCNToUsernameOrEmailConfig() {
+    protected static X509AuthenticatorConfigModel createLoginIssuerCNToCustomAttributeConfig() {
         return new X509AuthenticatorConfigModel()
                 .setConfirmationPageAllowed(true)
                 .setMappingSourceType(ISSUERDN_CN)
-                .setUserIdentityMapperType(USERNAME_EMAIL);
+                .setUserIdentityMapperType(USER_ATTRIBUTE)
+                .setCustomAttributeName("x509_issuer_identity");
     }
 
     protected static X509AuthenticatorConfigModel createLoginIssuerDN_OU2CustomAttributeConfig() {
@@ -418,13 +451,21 @@ protected void setUserEnabled(String userName, boolean enabled) {
         updateUser(user);
     }
 
+
     public void replaceDefaultWebDriver(WebDriver driver) {
         this.driver = driver;
         DroneUtils.addWebDriver(driver);
 
         List<Field> allFields = new ArrayList<>();
-        allFields.addAll(Arrays.asList(this.getClass().getDeclaredFields()));
-        allFields.addAll(Arrays.asList(this.getClass().getFields()));
+
+        // Add all fields of this class and superclasses
+        Class<?> testClass = this.getClass();
+        while (AbstractX509AuthenticationTest.class.isAssignableFrom(testClass)) {
+            allFields.addAll(Arrays.asList(testClass.getDeclaredFields()));
+            allFields.addAll(Arrays.asList(testClass.getFields()));
+            testClass = testClass.getSuperclass();
+        }
+
         for (Field f : allFields) {
             if (f.getAnnotation(Page.class) != null) {
                 try {
@@ -436,4 +477,28 @@ public void replaceDefaultWebDriver(WebDriver driver) {
             }
         }
     }
+
+
+    protected void x509BrowserLogin(X509AuthenticatorConfigModel config, String userId, String username, String attemptedUsername) {
+
+        AuthenticatorConfigRepresentation cfg = newConfig("x509-browser-config", config.getConfig());
+        String cfgId = createConfig(browserExecution.getId(), cfg);
+        Assert.assertNotNull(cfgId);
+
+        loginConfirmationPage.open();
+
+        Assert.assertTrue(loginConfirmationPage.getSubjectDistinguishedNameText().startsWith("EMAILADDRESS=test-user@localhost"));
+        Assert.assertEquals(username, loginConfirmationPage.getUsernameText());
+
+        loginConfirmationPage.confirm();
+
+        Assert.assertEquals(AppPage.RequestType.AUTH_RESPONSE, appPage.getRequestType());
+        Assert.assertNotNull(oauth.getCurrentQuery().get(OAuth2Constants.CODE));
+
+        events.expectLogin()
+                .user(userId)
+                .detail(Details.USERNAME, attemptedUsername)
+                .removeDetail(Details.REDIRECT_URI)
+                .assertEvent();
+    }
 }
diff --git a/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/x509/CRLRule.java b/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/x509/CRLRule.java
new file mode 100644
index 00000000000..05af98fc4d5
--- /dev/null
+++ b/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/x509/CRLRule.java
@@ -0,0 +1,108 @@
+/*
+ * Copyright 2017 Red Hat, Inc. and/or its affiliates
+ * and other contributors as indicated by the @author tags.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.keycloak.testsuite.x509;
+
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.InputStream;
+import java.nio.ByteBuffer;
+
+import io.undertow.Undertow;
+import io.undertow.io.Sender;
+import io.undertow.server.HttpHandler;
+import io.undertow.server.HttpServerExchange;
+import io.undertow.server.handlers.BlockingHandler;
+import io.undertow.server.handlers.PathHandler;
+import io.undertow.util.HeaderMap;
+import io.undertow.util.Headers;
+import org.apache.commons.io.IOUtils;
+import org.jboss.logging.Logger;
+import org.junit.rules.ExternalResource;
+
+/**
+ * Starts/stops embedded undertow server before/after the test class.
+ * The server will serve some predefined CRL lists under URL like "http://localhost:8889/empty.crl"
+ *
+ * @author <a href="mailto:mposolda@redhat.com">Marek Posolda</a>
+ */
+public class CRLRule extends ExternalResource {
+
+    protected static final Logger log = Logger.getLogger(CRLRule.class);
+
+    private static final String CRL_RESPONDER_HOST = "localhost";
+    private static final int CRL_RESPONDER_PORT = 8889;
+
+    public static final String CRL_RESPONDER_ORIGIN = "http://" + CRL_RESPONDER_HOST + ":" + CRL_RESPONDER_PORT;
+
+    private Undertow crlResponder;
+
+    @Override
+    protected void before() throws Throwable {
+        log.info("Starting CRL Responder");
+
+        PathHandler pathHandler = new PathHandler();
+        pathHandler.addExactPath(AbstractX509AuthenticationTest.EMPTY_CRL_PATH, new CRLHandler(AbstractX509AuthenticationTest.EMPTY_CRL_PATH));
+        pathHandler.addExactPath(AbstractX509AuthenticationTest.INTERMEDIATE_CA_CRL_PATH, new CRLHandler(AbstractX509AuthenticationTest.INTERMEDIATE_CA_CRL_PATH));
+
+        crlResponder = Undertow.builder().addHttpListener(CRL_RESPONDER_PORT, CRL_RESPONDER_HOST)
+                .setHandler(
+                        new BlockingHandler(pathHandler)
+                ).build();
+
+        crlResponder.start();
+    }
+
+    @Override
+    protected void after() {
+        log.info("Stoping CRL Responder");
+        crlResponder.stop();
+    }
+
+
+    private class CRLHandler implements HttpHandler {
+
+        private String crlFileName;
+
+        public CRLHandler(String crlFileName) {
+            this.crlFileName = crlFileName;
+        }
+
+
+        @Override
+        public void handleRequest(HttpServerExchange exchange) throws Exception {
+            if (exchange.isInIoThread()) {
+                exchange.dispatch(this);
+                return;
+            }
+
+            String fullFile = AbstractX509AuthenticationTest.getAuthServerHome() + File.separator + crlFileName;
+            InputStream is = new FileInputStream(new File(fullFile));
+
+            final byte[] responseBytes = IOUtils.toByteArray(is);
+
+            final HeaderMap responseHeaders = exchange.getResponseHeaders();
+            responseHeaders.put(Headers.CONTENT_TYPE, "application/pkix-crl");
+            // TODO: Add caching support? CRLs provided by well-known CA usually adds them
+
+            final Sender responseSender = exchange.getResponseSender();
+            responseSender.send(ByteBuffer.wrap(responseBytes));
+
+            exchange.endExchange();
+        }
+    }
+}
diff --git a/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/x509/OcspHandler.java b/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/x509/OcspHandler.java
index 0a4fe7ceb7d..ea83612df4e 100644
--- a/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/x509/OcspHandler.java
+++ b/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/x509/OcspHandler.java
@@ -78,7 +78,7 @@
 
     // add any certificates that the OCSP responder needs to know about in the tests here
     private static final Map<BigInteger, CertificateStatus> REVOKED_CERTIFICATES_STATUS = ImmutableMap
-            .of(BigInteger.valueOf(4096), new RevokedStatus(new Date(1472169600000L), CRLReason.unspecified));
+            .of(BigInteger.valueOf(4105), new RevokedStatus(new Date(1472169600000L), CRLReason.unspecified));
 
     private final SubjectPublicKeyInfo subjectPublicKeyInfo;
 
diff --git a/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/x509/X509BrowserCRLTest.java b/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/x509/X509BrowserCRLTest.java
new file mode 100644
index 00000000000..50a0b3ddec1
--- /dev/null
+++ b/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/x509/X509BrowserCRLTest.java
@@ -0,0 +1,181 @@
+/*
+ * Copyright 2017 Red Hat, Inc. and/or its affiliates
+ * and other contributors as indicated by the @author tags.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.keycloak.testsuite.x509;
+
+import org.jboss.arquillian.drone.api.annotation.Drone;
+import org.junit.Assert;
+import org.junit.Before;
+import org.junit.ClassRule;
+import org.junit.Test;
+import org.keycloak.OAuth2Constants;
+import org.keycloak.authentication.authenticators.x509.X509AuthenticatorConfigModel;
+import org.keycloak.events.Details;
+import org.keycloak.models.Constants;
+import org.keycloak.representations.idm.AuthenticatorConfigRepresentation;
+import org.keycloak.testsuite.pages.AppPage;
+import org.keycloak.testsuite.util.ContainerAssume;
+import org.keycloak.testsuite.util.PhantomJSBrowser;
+import org.openqa.selenium.WebDriver;
+
+import static org.hamcrest.Matchers.containsString;
+import static org.keycloak.authentication.authenticators.x509.X509AuthenticatorConfigModel.IdentityMapperType.USERNAME_EMAIL;
+import static org.keycloak.authentication.authenticators.x509.X509AuthenticatorConfigModel.MappingSourceType.SUBJECTDN_EMAIL;
+
+/**
+ * @author <a href="mailto:mposolda@redhat.com">Marek Posolda</a>
+ */
+public class X509BrowserCRLTest extends AbstractX509AuthenticationTest {
+
+    @ClassRule
+    public static CRLRule crlRule = new CRLRule();
+
+    @Drone
+    @PhantomJSBrowser
+    private WebDriver phantomJS;
+
+
+    @Before
+    public void replaceTheDefaultDriver() {
+        replaceDefaultWebDriver(phantomJS);
+    }
+
+
+    @Test
+    public void loginSuccessWithEmptyRevocationListFromFile() {
+        // Not possible to test file CRL on undertow at this moment - jboss config dir doesn't exists
+        ContainerAssume.assumeNotAuthServerUndertow();
+
+        X509AuthenticatorConfigModel config =
+                new X509AuthenticatorConfigModel()
+                        .setCRLEnabled(true)
+                        .setCRLRelativePath(EMPTY_CRL_PATH)
+                        .setConfirmationPageAllowed(true)
+                        .setMappingSourceType(SUBJECTDN_EMAIL)
+                        .setUserIdentityMapperType(USERNAME_EMAIL);
+        x509BrowserLogin(config, userId, "test-user@localhost", "test-user@localhost");
+    }
+
+
+    @Test
+    public void loginFailedWithIntermediateRevocationListFromFile() {
+        // Not possible to test file CRL on undertow at this moment - jboss config dir doesn't exists
+        ContainerAssume.assumeNotAuthServerUndertow();
+
+        X509AuthenticatorConfigModel config =
+                new X509AuthenticatorConfigModel()
+                        .setCRLEnabled(true)
+                        .setCRLRelativePath(INTERMEDIATE_CA_CRL_PATH)
+                        .setConfirmationPageAllowed(true)
+                        .setMappingSourceType(SUBJECTDN_EMAIL)
+                        .setUserIdentityMapperType(USERNAME_EMAIL);
+        AuthenticatorConfigRepresentation cfg = newConfig("x509-browser-config", config.getConfig());
+        String cfgId = createConfig(browserExecution.getId(), cfg);
+        Assert.assertNotNull(cfgId);
+
+        assertLoginFailedDueRevokedCertificate();
+    }
+
+
+    @Test
+    public void loginSuccessWithEmptyRevocationListFromHttp() {
+        X509AuthenticatorConfigModel config =
+                new X509AuthenticatorConfigModel()
+                        .setCRLEnabled(true)
+                        .setCRLRelativePath(CRLRule.CRL_RESPONDER_ORIGIN + "/" + EMPTY_CRL_PATH)
+                        .setConfirmationPageAllowed(true)
+                        .setMappingSourceType(SUBJECTDN_EMAIL)
+                        .setUserIdentityMapperType(USERNAME_EMAIL);
+        x509BrowserLogin(config, userId, "test-user@localhost", "test-user@localhost");
+    }
+
+
+    @Test
+    public void loginFailedWithIntermediateRevocationListFromHttp() {
+        X509AuthenticatorConfigModel config =
+                new X509AuthenticatorConfigModel()
+                        .setCRLEnabled(true)
+                        .setCRLRelativePath(CRLRule.CRL_RESPONDER_ORIGIN + "/" + INTERMEDIATE_CA_CRL_PATH)
+                        .setConfirmationPageAllowed(true)
+                        .setMappingSourceType(SUBJECTDN_EMAIL)
+                        .setUserIdentityMapperType(USERNAME_EMAIL);
+        AuthenticatorConfigRepresentation cfg = newConfig("x509-browser-config", config.getConfig());
+        String cfgId = createConfig(browserExecution.getId(), cfg);
+        Assert.assertNotNull(cfgId);
+
+        assertLoginFailedDueRevokedCertificate();
+    }
+
+
+    @Test
+    public void loginWithMultipleRevocationLists() {
+        X509AuthenticatorConfigModel config =
+                new X509AuthenticatorConfigModel()
+                        .setCRLEnabled(true)
+                        .setCRLRelativePath(CRLRule.CRL_RESPONDER_ORIGIN + "/" + EMPTY_CRL_PATH + Constants.CFG_DELIMITER + CRLRule.CRL_RESPONDER_ORIGIN + "/" + INTERMEDIATE_CA_CRL_PATH)
+                        .setConfirmationPageAllowed(true)
+                        .setMappingSourceType(SUBJECTDN_EMAIL)
+                        .setUserIdentityMapperType(USERNAME_EMAIL);
+        AuthenticatorConfigRepresentation cfg = newConfig("x509-browser-config", config.getConfig());
+        String cfgId = createConfig(browserExecution.getId(), cfg);
+        Assert.assertNotNull(cfgId);
+
+        assertLoginFailedDueRevokedCertificate();
+    }
+
+
+    @Test
+    public void loginFailedWithRevocationListFromDistributionPoints() {
+        X509AuthenticatorConfigModel config =
+                new X509AuthenticatorConfigModel()
+                        .setCRLEnabled(true)
+                        .setCRLDistributionPointEnabled(true)
+                        .setConfirmationPageAllowed(true)
+                        .setMappingSourceType(SUBJECTDN_EMAIL)
+                        .setUserIdentityMapperType(USERNAME_EMAIL);
+        AuthenticatorConfigRepresentation cfg = newConfig("x509-browser-config", config.getConfig());
+        String cfgId = createConfig(browserExecution.getId(), cfg);
+        Assert.assertNotNull(cfgId);
+
+        assertLoginFailedDueRevokedCertificate();
+    }
+
+
+
+    private void assertLoginFailedDueRevokedCertificate() {
+        loginConfirmationPage.open();
+        loginPage.assertCurrent();
+
+        // Verify there is an error message
+        Assert.assertNotNull(loginPage.getError());
+
+        Assert.assertThat(loginPage.getError(), containsString("Certificate validation's failed.\nCertificate has been revoked, certificate's subject:"));
+
+        // Continue with form based login
+        loginPage.login("test-user@localhost", "password");
+
+        Assert.assertEquals(AppPage.RequestType.AUTH_RESPONSE, appPage.getRequestType());
+        Assert.assertNotNull(oauth.getCurrentQuery().get(OAuth2Constants.CODE));
+
+        events.expectLogin()
+                .user(userId)
+                .detail(Details.USERNAME, "test-user@localhost")
+                .removeDetail(Details.REDIRECT_URI)
+                .assertEvent();
+    }
+
+}
diff --git a/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/x509/X509BrowserLoginSubjectAltNameTest.java b/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/x509/X509BrowserLoginSubjectAltNameTest.java
index 86110beb25d..41dcbee858f 100644
--- a/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/x509/X509BrowserLoginSubjectAltNameTest.java
+++ b/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/x509/X509BrowserLoginSubjectAltNameTest.java
@@ -41,18 +41,6 @@
 
 public class X509BrowserLoginSubjectAltNameTest extends AbstractX509AuthenticationTest {
 
-    @Page
-    @PhantomJSBrowser
-    protected AppPage appPage;
-
-    @Page
-    @PhantomJSBrowser
-    protected X509IdentityConfirmationPage loginConfirmationPage;
-
-    @Page
-    @PhantomJSBrowser
-    protected LoginPage loginPage;
-
     @Drone
     @PhantomJSBrowser
     private WebDriver phantomJS;
@@ -68,36 +56,14 @@ public static void onBeforeTestClass() {
                 "/certs/clients/test-user@localhost.key.pem", "password");
     }
 
-    private void login(X509AuthenticatorConfigModel config, String userId, String username, String attemptedUsername) {
-
-        AuthenticatorConfigRepresentation cfg = newConfig("x509-browser-config", config.getConfig());
-        String cfgId = createConfig(browserExecution.getId(), cfg);
-        Assert.assertNotNull(cfgId);
-
-        loginConfirmationPage.open();
-
-        Assert.assertEquals("EMAILADDRESS=test-user@localhost, CN=test-user, OU=Keycloak, O=Red Hat, L=Boston, ST=MA, C=US", loginConfirmationPage.getSubjectDistinguishedNameText());
-        Assert.assertEquals(username, loginConfirmationPage.getUsernameText());
-
-        loginConfirmationPage.confirm();
-
-        Assert.assertEquals(AppPage.RequestType.AUTH_RESPONSE, appPage.getRequestType());
-        Assert.assertNotNull(oauth.getCurrentQuery().get(OAuth2Constants.CODE));
-
-        events.expectLogin()
-                .user(userId)
-                .detail(Details.USERNAME, attemptedUsername)
-                .removeDetail(Details.REDIRECT_URI)
-                .assertEvent();
-    }
 
     @Test
     public void loginAsUserFromCertSANEmail() {
-        login(createLoginSubjectAltNameEmail2UserAttributeConfig(), userId, "test-user@localhost", "test-user-altmail@localhost");
+        x509BrowserLogin(createLoginSubjectAltNameEmail2UserAttributeConfig(), userId, "test-user@localhost", "test-user-altmail@localhost");
     }
 
     @Test
     public void loginAsUserFromCertSANUpn() {
-        login(createLoginSubjectAltNameOtherName2UserAttributeConfig(), userId, "test-user@localhost", "test_upn_name@localhost");
+        x509BrowserLogin(createLoginSubjectAltNameOtherName2UserAttributeConfig(), userId, "test-user@localhost", "test_upn_name@localhost");
     }
 }
\ No newline at end of file
diff --git a/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/x509/X509BrowserLoginTest.java b/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/x509/X509BrowserLoginTest.java
index 9bb72ed2294..e323acffbf5 100644
--- a/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/x509/X509BrowserLoginTest.java
+++ b/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/x509/X509BrowserLoginTest.java
@@ -19,8 +19,7 @@
 package org.keycloak.testsuite.x509;
 
 import org.jboss.arquillian.drone.api.annotation.Drone;
-import org.jboss.arquillian.graphene.page.Page;
-import org.jboss.arquillian.junit.InSequence;
+import org.keycloak.testsuite.util.PhantomJSBrowser;
 import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
@@ -30,8 +29,6 @@
 import org.keycloak.representations.idm.AuthenticatorConfigRepresentation;
 import org.keycloak.representations.idm.UserRepresentation;
 import org.keycloak.testsuite.pages.AppPage;
-import org.keycloak.testsuite.pages.LoginPage;
-import org.keycloak.testsuite.pages.x509.X509IdentityConfirmationPage;
 
 import javax.ws.rs.core.Response;
 
@@ -46,14 +43,7 @@
 import static org.keycloak.authentication.authenticators.x509.X509AuthenticatorConfigModel.MappingSourceType.SUBJECTDN_EMAIL;
 import org.keycloak.testsuite.ProfileAssume;
 import org.keycloak.testsuite.util.DroneUtils;
-import org.keycloak.testsuite.util.JavascriptBrowser;
-import org.keycloak.testsuite.util.PhantomJSBrowser;
-import org.keycloak.testsuite.util.SecondBrowser;
 import org.openqa.selenium.WebDriver;
-import org.openqa.selenium.firefox.FirefoxDriver;
-import org.openqa.selenium.phantomjs.PhantomJSDriver;
-
-import java.util.List;
 
 /**
  * @author <a href="mailto:brat000012001@gmail.com">Peter Nalyvayko</a>
@@ -63,22 +53,12 @@
 
 public class X509BrowserLoginTest extends AbstractX509AuthenticationTest {
 
-    @Page
-    @PhantomJSBrowser
-    protected AppPage appPage;
-
-    @Page
-    @PhantomJSBrowser
-    protected X509IdentityConfirmationPage loginConfirmationPage;
-
-    @Page
-    @PhantomJSBrowser
-    protected LoginPage loginPage;
 
     @Drone
     @PhantomJSBrowser
     private WebDriver phantomJS;
 
+
     @Before
     public void replaceTheDefaultDriver() {
         replaceDefaultWebDriver(phantomJS);
@@ -106,10 +86,11 @@ private void login(X509AuthenticatorConfigModel config, String userId, String us
                  .assertEvent();
     }
 
+
     @Test
     public void loginAsUserFromCertSubjectEmail() throws Exception {
         // Login using an e-mail extracted from certificate's subject DN
-        login(createLoginSubjectEmail2UsernameOrEmailConfig(), userId, "test-user@localhost", "test-user@localhost");
+        x509BrowserLogin(createLoginSubjectEmail2UsernameOrEmailConfig(), userId, "test-user@localhost", "test-user@localhost");
     }
 
     @Test
@@ -148,7 +129,7 @@ public void loginWithNonSupportedCertKeyUsage() throws Exception {
 
     @Test
     public void loginWithNonSupportedCertExtendedKeyUsage() throws Exception {
-        login(createLoginSubjectEmailWithExtendedKeyUsage("serverAuth"), userId, "test-user@localhost", "test-user@localhost");
+        x509BrowserLogin(createLoginSubjectEmailWithExtendedKeyUsage("serverAuth"), userId, "test-user@localhost", "test-user@localhost");
     }
 
     @Test
@@ -179,16 +160,16 @@ public void loginIgnoreX509IdentityContinueToFormLogin() throws Exception {
     @Test
     public void loginAsUserFromCertSubjectCN() {
         // Login using a CN extracted from certificate's subject DN
-        login(createLoginSubjectCN2UsernameOrEmailConfig(), userId, "test-user@localhost", "test-user@localhost");
+        x509BrowserLogin(createLoginSubjectCN2UsernameOrEmailConfig(), userId, "test-user@localhost", "test-user@localhost");
     }
 
     @Test
-    public void loginAsUserFromCertIssuerCN() {
-        login(createLoginIssuerCNToUsernameOrEmailConfig(), userId2, "keycloak", "Keycloak");
+    public void loginAsUserFromCertIssuerCNMappedToUserAttribute() {
+        x509BrowserLogin(createLoginIssuerCNToCustomAttributeConfig(), userId2, "keycloak", "Keycloak Intermediate CA");
     }
 
     @Test
-    public void loginAsUserFromCertIssuerCNMappedToUserAttribute() {
+    public void loginAsUserFromCertIssuerDNMappedToUserAttribute() {
 
         UserRepresentation user = testRealm().users().get(userId2).toRepresentation();
         Assert.assertNotNull(user);
@@ -198,7 +179,7 @@ public void loginAsUserFromCertIssuerCNMappedToUserAttribute() {
 
         events.clear();
 
-        login(createLoginIssuerDN_OU2CustomAttributeConfig(), userId2, "keycloak", "Red Hat");
+        x509BrowserLogin(createLoginIssuerDN_OU2CustomAttributeConfig(), userId2, "keycloak", "Red Hat");
     }
 
     @Test
@@ -425,51 +406,6 @@ public void loginValidCertificateDisabledUser() {
         }
     }
 
-    @Test
-    public void loginWithX509WithEmptyRevocationList() {
-        X509AuthenticatorConfigModel config =
-                new X509AuthenticatorConfigModel()
-                        .setCRLEnabled(true)
-                        .setCRLRelativePath(EMPTY_CRL_PATH)
-                        .setConfirmationPageAllowed(true)
-                        .setMappingSourceType(SUBJECTDN_EMAIL)
-                        .setUserIdentityMapperType(USERNAME_EMAIL);
-        login(config, userId, "test-user@localhost", "test-user@localhost");
-    }
-
-    @Test
-    public void loginCertificateRevoked() {
-        X509AuthenticatorConfigModel config =
-                new X509AuthenticatorConfigModel()
-                        .setCRLEnabled(true)
-                        .setCRLRelativePath(CLIENT_CRL_PATH)
-                        .setConfirmationPageAllowed(true)
-                        .setMappingSourceType(SUBJECTDN_EMAIL)
-                        .setUserIdentityMapperType(USERNAME_EMAIL);
-        AuthenticatorConfigRepresentation cfg = newConfig("x509-browser-config", config.getConfig());
-        String cfgId = createConfig(browserExecution.getId(), cfg);
-        Assert.assertNotNull(cfgId);
-
-        loginConfirmationPage.open();
-        loginPage.assertCurrent();
-
-        // Verify there is an error message
-        Assert.assertNotNull(loginPage.getError());
-
-        Assert.assertThat(loginPage.getError(), containsString("Certificate validation's failed.\nCertificate has been revoked, certificate's subject:"));
-
-        // Continue with form based login
-        loginPage.login("test-user@localhost", "password");
-
-        Assert.assertEquals(AppPage.RequestType.AUTH_RESPONSE, appPage.getRequestType());
-        Assert.assertNotNull(oauth.getCurrentQuery().get(OAuth2Constants.CODE));
-
-        events.expectLogin()
-                .user(userId)
-                .detail(Details.USERNAME, "test-user@localhost")
-                .removeDetail(Details.REDIRECT_URI)
-                .assertEvent();
-    }
 
     @Test
     public void loginNoIdentityConfirmationPage() {
diff --git a/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/x509/X509DirectGrantTest.java b/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/x509/X509DirectGrantTest.java
index 6a6fece7591..526d5ac9cb5 100644
--- a/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/x509/X509DirectGrantTest.java
+++ b/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/x509/X509DirectGrantTest.java
@@ -31,6 +31,7 @@
 import org.keycloak.representations.RefreshToken;
 import org.keycloak.representations.idm.AuthenticatorConfigRepresentation;
 import org.keycloak.representations.idm.UserRepresentation;
+import org.keycloak.testsuite.util.ContainerAssume;
 import org.keycloak.testsuite.util.OAuthClient;
 import org.keycloak.testsuite.util.PhantomJSBrowser;
 import org.openqa.selenium.WebDriver;
@@ -217,10 +218,13 @@ public void loginFailedDisabledUser() throws Exception {
 
     @Test
     public void loginCertificateRevoked() throws Exception {
+        // Not possible to test file CRL on undertow at this moment - jboss config dir doesn't exists
+        ContainerAssume.assumeNotAuthServerUndertow();
+
         X509AuthenticatorConfigModel config =
                 new X509AuthenticatorConfigModel()
                         .setCRLEnabled(true)
-                        .setCRLRelativePath(CLIENT_CRL_PATH)
+                        .setCRLRelativePath(INTERMEDIATE_CA_CRL_PATH)
                         .setConfirmationPageAllowed(true)
                         .setMappingSourceType(SUBJECTDN_EMAIL)
                         .setUserIdentityMapperType(USERNAME_EMAIL);
diff --git a/testsuite/integration-arquillian/tests/base/src/test/resources/client-auth-test/intermediate-ca.crt b/testsuite/integration-arquillian/tests/base/src/test/resources/client-auth-test/intermediate-ca.crt
index 73ad33f0271..3521cbccfa1 100644
--- a/testsuite/integration-arquillian/tests/base/src/test/resources/client-auth-test/intermediate-ca.crt
+++ b/testsuite/integration-arquillian/tests/base/src/test/resources/client-auth-test/intermediate-ca.crt
@@ -1,23 +1,34 @@
 -----BEGIN CERTIFICATE-----
-MIIDxTCCAq2gAwIBAgICEAAwDQYJKoZIhvcNAQELBQAwZjELMAkGA1UEBhMCVVMx
-CzAJBgNVBAgTAk1BMREwDwYDVQQHEwhXZXN0d29yZDEQMA4GA1UEChMHUmVkIEhh
-dDERMA8GA1UECxMIS2V5Y2xvYWsxEjAQBgNVBAMTCWxvY2FsaG9zdDAgFw0xNjEw
-MzEyMDA2NTJaGA8zMDE2MDMwMzIwMDY1MlowYzELMAkGA1UEBhMCVVMxCzAJBgNV
-BAgMAk1BMQ8wDQYDVQQHDAZCb3N0b24xEDAOBgNVBAoMB1JlZCBIYXQxETAPBgNV
-BAsMCEtleWNsb2FrMREwDwYDVQQDDAhLZXljbG9hazCCASIwDQYJKoZIhvcNAQEB
-BQADggEPADCCAQoCggEBAOyWSWjty1OtggI8zI+tbLy0mdyE5z3pnqUuspLZcrb3
-sWoSWh0m+OhZOH8wIldav3+nNtM3G5dLK8L+iMRFu/1clpIDtzoLSV/v0HxiovJi
-rOW9PhfyMu+vQE3D27zgOspW6leETQhO6tNKKT/NqBkgAIyYp0zAGT3tVs3k7mL+
-jVorVf8lbExOaomH3S2HoxFUHsMUBkS0WYV2tN1Fyqp9ieVGBu0fiItnZAOofi6G
-kS1L2ZBRbHW4eRbr77gUsETgPYXkPdN0mT7KC90KLEJfie7TyQf7O7EACQb+Y5nG
-ySBT93fDTaIbJ2JR4UYwLXiLGZF4k+mvlQj2PJAG1W0CAwEAAaN+MHwwHQYDVR0O
-BBYEFJ1G0xr/t9MQ/8lyXdmgbdoxAoOjMB8GA1UdIwQYMBaAFFCfEXmWKTtaiZG7
-tCvBrmQiujrLMBIGA1UdEwEB/wQIMAYBAf8CAQAwDgYDVR0PAQH/BAQDAgGGMBYG
-A1UdJQEB/wQMMAoGCCsGAQUFBwMJMA0GCSqGSIb3DQEBCwUAA4IBAQAbcogxp/yb
-i7gF1Z+mZUwhqd2hqmMlE2AmLrZuo5jsq66XhwQTk13kvUYExlQw6DStrKDuRySj
-DRIQhu5UU4hLhewa9yl8iRs/zvZQsShJZ0vJPBhisTzU5vnA+ioHqTF91DX66xHE
-l57O8Vcmt8fCAg+LpWTokNvy04/0+vmy0od1/LF9sawTgXYu5g+o4JYzurOMxH9v
-Kn6cOLvpiAO/BsCYXKZxTu6WQX2N4AVRDVBJSiTvHylXtQX/t7fMIm27qU/TYona
-jWmZjy8Up99LpL+q6L4W8zZc35jzKF64Th6lMz/shc4/BHa1QVPgQ9yRWnoNJvUz
-9IceMNNiEnA5
+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
 -----END CERTIFICATE-----
diff --git a/testsuite/integration-arquillian/tests/base/src/test/resources/client-auth-test/intermediate-ca.key b/testsuite/integration-arquillian/tests/base/src/test/resources/client-auth-test/intermediate-ca.key
index d1dc6cf1827..b1323fe6cb3 100644
--- a/testsuite/integration-arquillian/tests/base/src/test/resources/client-auth-test/intermediate-ca.key
+++ b/testsuite/integration-arquillian/tests/base/src/test/resources/client-auth-test/intermediate-ca.key
@@ -1,27 +1,51 @@
 -----BEGIN RSA PRIVATE KEY-----
-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
+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
 -----END RSA PRIVATE KEY-----
diff --git a/themes/src/main/resources/theme/base/admin/resources/js/app.js b/themes/src/main/resources/theme/base/admin/resources/js/app.js
index 70306b5fc3d..2fcf6a95e55 100755
--- a/themes/src/main/resources/theme/base/admin/resources/js/app.js
+++ b/themes/src/main/resources/theme/base/admin/resources/js/app.js
@@ -2722,6 +2722,8 @@ module.controller('ProviderConfigCtrl', function ($modal, $scope, ComponentUtils
         })
     }
 
+    ComponentUtils.convertAllMultivaluedStringValuesToList($scope.properties, $scope.config);
+
     ComponentUtils.addLastEmptyValueToMultivaluedLists($scope.properties, $scope.config);
 
     $scope.addValueToMultivalued = function(optionName) {
diff --git a/themes/src/main/resources/theme/base/admin/resources/js/controllers/realm.js b/themes/src/main/resources/theme/base/admin/resources/js/controllers/realm.js
index 029d849158b..723f3c6a887 100644
--- a/themes/src/main/resources/theme/base/admin/resources/js/controllers/realm.js
+++ b/themes/src/main/resources/theme/base/admin/resources/js/controllers/realm.js
@@ -2385,7 +2385,8 @@ module.controller('RequiredActionsCtrl', function($scope, realm, unregisteredReq
 
 });
 
-module.controller('AuthenticationConfigCtrl', function($scope, realm, flow, configType, config, AuthenticationConfig, Notifications, Dialog, $location) {
+module.controller('AuthenticationConfigCtrl', function($scope, realm, flow, configType, config, AuthenticationConfig, Notifications,
+                                              Dialog, $location, ComponentUtils) {
     $scope.realm = realm;
     $scope.flow = flow;
     $scope.configType = configType;
@@ -2406,10 +2407,13 @@ module.controller('AuthenticationConfigCtrl', function($scope, realm, flow, conf
     }, true);
 
     $scope.save = function() {
+        var configCopy = angular.copy($scope.config);
+        ComponentUtils.convertAllListValuesToMultivaluedString(configType.properties, configCopy.config);
+
         AuthenticationConfig.update({
             realm : realm.realm,
             config : config.id
-        }, $scope.config, function() {
+        }, configCopy, function() {
             $scope.changed = false;
             config = angular.copy($scope.config);
             $location.url("/realms/" + realm.realm + '/authentication/flows/' + flow.id + '/config/' + configType.providerId + "/" + config.id);
@@ -2438,7 +2442,8 @@ module.controller('AuthenticationConfigCtrl', function($scope, realm, flow, conf
 
 });
 
-module.controller('AuthenticationConfigCreateCtrl', function($scope, realm, flow, configType, execution, AuthenticationExecutionConfig, Notifications, Dialog, $location) {
+module.controller('AuthenticationConfigCreateCtrl', function($scope, realm, flow, configType, execution, AuthenticationExecutionConfig,
+                                                    Notifications, Dialog, $location, ComponentUtils) {
     $scope.realm = realm;
     $scope.flow = flow;
     $scope.create = true;
@@ -2463,10 +2468,13 @@ module.controller('AuthenticationConfigCreateCtrl', function($scope, realm, flow
     });
 
     $scope.save = function() {
+        var configCopy = angular.copy($scope.config);
+        ComponentUtils.convertAllListValuesToMultivaluedString(configType.properties, configCopy.config);
+
         AuthenticationExecutionConfig.save({
             realm : realm.realm,
             execution: execution
-        }, $scope.config, function(data, headers) {
+        }, configCopy, function(data, headers) {
             var l = headers().location;
             var id = l.substring(l.lastIndexOf("/") + 1);
             var url = "/realms/" + realm.realm + '/authentication/flows/' + flow.id + '/config/' + configType.providerId + "/" + id;
diff --git a/themes/src/main/resources/theme/base/admin/resources/js/services.js b/themes/src/main/resources/theme/base/admin/resources/js/services.js
index a2751fe67f3..10ebd19d7d3 100755
--- a/themes/src/main/resources/theme/base/admin/resources/js/services.js
+++ b/themes/src/main/resources/theme/base/admin/resources/js/services.js
@@ -202,6 +202,58 @@ module.factory('ComponentUtils', function() {
         }
         return -1;
     }
+
+    utils.convertAllMultivaluedStringValuesToList = function(properties, config) {
+        if (!properties) {
+            return;
+        }
+
+        for (var i=0 ; i<properties.length ; i++) {
+            var prop = properties[i];
+            if (prop.type === 'MultivaluedString') {
+                var configProperty = config[prop.name];
+
+                if (configProperty == null) {
+                    configProperty = [];
+                    config[prop.name] = configProperty;
+                }
+
+                if (typeof configProperty === "string") {
+                    configProperty = configProperty.split("##");
+                    config[prop.name] = configProperty;
+                }
+            }
+        }
+    }
+
+    utils.convertAllListValuesToMultivaluedString = function(properties, config) {
+        if (!properties) {
+            return;
+        }
+
+        for (var i=0 ; i<properties.length ; i++) {
+            var prop = properties[i];
+            if (prop.type === 'MultivaluedString') {
+                var configVal = config[prop.name];
+
+                if (configVal != null) {
+                    if (configVal.length > 0) {
+                        var lastVal = configVal[configVal.length - 1];
+                        if (lastVal === '') {
+                            console.log('Remove empty value from config property: ' + prop.name);
+                            configVal.splice(configVal.length - 1, 1);
+                        }
+                    }
+
+                    var attrVals = configVal.join("##");
+                    config[prop.name] = attrVals;
+
+                }
+            }
+        }
+    }
+
+
     
     utils.addLastEmptyValueToMultivaluedLists = function(properties, config) {
         if (!properties) {
diff --git a/themes/src/main/resources/theme/base/admin/resources/templates/kc-provider-config.html b/themes/src/main/resources/theme/base/admin/resources/templates/kc-provider-config.html
index 54547479361..220809b2a47 100755
--- a/themes/src/main/resources/theme/base/admin/resources/templates/kc-provider-config.html
+++ b/themes/src/main/resources/theme/base/admin/resources/templates/kc-provider-config.html
@@ -2,21 +2,21 @@
     <div data-ng-repeat="option in properties" class="form-group" data-ng-controller="ProviderConfigCtrl">
         <label class="col-md-2 control-label">{{:: option.label | translate}}</label>
 
-        <div class="col-md-6" data-ng-hide="option.type == 'boolean' || option.type == 'List' || option.type == 'Role' || option.type == 'ClientList' || option.type == 'Password' || option.type=='Script' || option.type=='Text'">
+        <div class="col-md-6" data-ng-if="option.type == 'String'">
             <input class="form-control" type="text" data-ng-model="config[ option.name ]" >
         </div>
-        <div class="col-md-6" data-ng-show="option.type == 'Password'">
+        <div class="col-md-6" data-ng-if="option.type == 'Password'">
             <input class="form-control" type="password" data-ng-model="config[ option.name ]" >
         </div>
-        <div class="col-md-6" data-ng-show="option.type == 'boolean'">
+        <div class="col-md-6" data-ng-if="option.type == 'boolean'">
             <input ng-model="config[ option.name ]" value="'true'" name="option.name" id="option.name" onoffswitchstring on-text="{{:: 'onText' | translate}}" off-text="{{:: 'offText' | translate}}"/>
         </div>
-        <div class="col-md-6" data-ng-show="option.type == 'List'">
+        <div class="col-md-6" data-ng-if="option.type == 'List'">
             <select ng-model="config[ option.name ]" ng-options="data for data in option.options">
                 <option value="" selected> {{:: 'selectOne' | translate}} </option>
             </select>
         </div>
-        <div class="col-md-6" data-ng-show="option.type == 'Role'">
+        <div class="col-md-6" data-ng-if="option.type == 'Role'">
             <div class="row">
                 <div class="col-md-8">
                     <input class="form-control" type="text" data-ng-model="config[ option.name ]" >
@@ -26,19 +26,33 @@
                 </div>
             </div>
         </div>
-        <div class="col-md-4" data-ng-show="option.type == 'ClientList'">
+        <div class="col-md-4" data-ng-if="option.type == 'ClientList'">
             <select ng-model="config[ option.name ]" ng-options="client.clientId as client.clientId for client in clients">
                 <option value="" selected> {{:: 'selectOne' | translate}} </option>
             </select>
         </div>
 
-        <div class="col-md-6" data-ng-show="option.type == 'Script'">
+        <div class="col-md-6" data-ng-if="option.type == 'Script'">
             <div ng-model="config[option.name]" placeholder="Enter your script..." ui-ace="{ onLoad : initEditor, useWrapMode: true, showGutter: true, theme:'github', mode: 'javascript'}">
                 {{config[option.name]}}
             </div>
         </div>
 
-        <div class="col-md-6" data-ng-show="option.type == 'Text'">
+        <div class="col-sm-6" data-ng-if="option.type == 'MultivaluedString'">
+            <div class="input-group" ng-repeat="(i, currentOption) in config[option.name] track by $index">
+                <input class="form-control" ng-model="config[option.name][i]">
+                <div class="input-group-btn" data-ng-if="$index < config[option.name].length - 1">
+                    <button class="btn btn-default" type="button" data-ng-click="deleteValueFromMultivalued(option.name, $index)"><span class="fa fa-minus"></span></button>
+                </div>
+
+                <div class="input-group-btn" data-ng-if="$index === config[option.name].length - 1">
+                    <button class="btn btn-default" type="button" data-ng-click="addValueToMultivalued(option.name)"><span class="fa fa-plus"></span></button>
+                </div>
+            </div>
+
+        </div>
+
+        <div class="col-md-6" data-ng-if="option.type == 'Text'">
             <textarea class="form-control" data-ng-model="config[ option.name ]"/>
         </div>
 
