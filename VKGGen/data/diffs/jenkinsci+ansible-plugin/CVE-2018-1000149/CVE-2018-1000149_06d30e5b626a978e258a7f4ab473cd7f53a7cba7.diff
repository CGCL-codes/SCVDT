diff --git a/pom.xml b/pom.xml
index 4a0bb03..5c18fd0 100644
--- a/pom.xml
+++ b/pom.xml
@@ -8,7 +8,7 @@
 
   <groupId>org.jenkins-ci.plugins</groupId>
   <artifactId>ansible</artifactId>
-  <version>0.9-SNAPSHOT</version>
+  <version>1.0-SNAPSHOT</version>
   <packaging>hpi</packaging>
   <name>Jenkins Ansible plugin</name>
   <description>Ansible support in Jenkins</description>
@@ -131,6 +131,16 @@
         </plugin>
       </plugins>
     </pluginManagement>
+    <plugins>
+      <plugin>
+        <groupId>org.jenkins-ci.tools</groupId>
+        <artifactId>maven-hpi-plugin</artifactId>
+        <extensions>true</extensions>
+        <configuration>
+          <compatibleSinceVersion>1.0</compatibleSinceVersion>
+        </configuration>
+      </plugin>
+    </plugins>
   </build>
 
   <properties>
diff --git a/src/main/java/org/jenkinsci/plugins/ansible/AbstractAnsibleInvocation.java b/src/main/java/org/jenkinsci/plugins/ansible/AbstractAnsibleInvocation.java
index 8ec4bee..c6a1a52 100644
--- a/src/main/java/org/jenkinsci/plugins/ansible/AbstractAnsibleInvocation.java
+++ b/src/main/java/org/jenkinsci/plugins/ansible/AbstractAnsibleInvocation.java
@@ -275,8 +275,8 @@ public T setColorizedOutput(boolean colorizedOutput) {
         return (T) this;
     }
 
-    public T setHostKeyCheck(boolean hostKeyChecking) {
-        if (! hostKeyChecking) {
+    public T setDisableHostKeyCheck(boolean disableHostKeyChecking) {
+        if (disableHostKeyChecking) {
             environment.put("ANSIBLE_HOST_KEY_CHECKING", "False");
         }
         return (T) this;
diff --git a/src/main/java/org/jenkinsci/plugins/ansible/AnsibleAdHocCommandBuilder.java b/src/main/java/org/jenkinsci/plugins/ansible/AnsibleAdHocCommandBuilder.java
index cbef0dd..120bd8f 100644
--- a/src/main/java/org/jenkinsci/plugins/ansible/AnsibleAdHocCommandBuilder.java
+++ b/src/main/java/org/jenkinsci/plugins/ansible/AnsibleAdHocCommandBuilder.java
@@ -22,6 +22,7 @@
 import com.cloudbees.plugins.credentials.CredentialsProvider;
 import com.cloudbees.plugins.credentials.common.StandardCredentials;
 import com.cloudbees.plugins.credentials.common.StandardUsernameCredentials;
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.AbortException;
 import hudson.EnvVars;
 import hudson.Extension;
@@ -79,7 +80,12 @@
 
     public boolean colorizedOutput = false;
 
-    public boolean hostKeyChecking = false;
+    public boolean disableHostKeyChecking = false;
+
+    @Deprecated
+    @SuppressWarnings("unused")
+    @SuppressFBWarnings("URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD")
+    public transient boolean hostKeyChecking = true;
 
     public String additionalParameters = null;
 
@@ -102,7 +108,8 @@ public AnsibleAdHocCommandBuilder(String ansibleName, String hostPattern, Invent
         this.forks = forks;
         this.unbufferedOutput = unbufferedOutput;
         this.colorizedOutput = colorizedOutput;
-        this.hostKeyChecking = hostKeyChecking;
+        // ignored because of SECURITY-630
+        //this.hostKeyChecking = hostKeyChecking;
         this.additionalParameters = additionalParameters;
     }
 
@@ -164,8 +171,14 @@ public void setColorizedOutput(boolean colorizedOutput) {
     }
 
     @DataBoundSetter
+    public void setDisableHostKeyChecking(boolean disableHostKeyChecking) {
+        this.disableHostKeyChecking = disableHostKeyChecking;
+    }
+
+    @DataBoundSetter
+    @Deprecated
     public void setHostKeyChecking(boolean hostKeyChecking) {
-        this.hostKeyChecking = hostKeyChecking;
+        this.hostKeyChecking = true;
     }
 
     @DataBoundSetter
@@ -204,7 +217,7 @@ public void perform(@Nonnull Run<?, ?> run, @Nonnull FilePath ws, @Nonnull Launc
                     null);
             invocation.setExtraVars(extraVars);
             invocation.setAdditionalParameters(additionalParameters);
-            invocation.setHostKeyCheck(hostKeyChecking);
+            invocation.setDisableHostKeyCheck(disableHostKeyChecking);
             invocation.setUnbufferedOutput(unbufferedOutput);
             invocation.setColorizedOutput(colorizedOutput);
             if (!invocation.execute(runner)) {
diff --git a/src/main/java/org/jenkinsci/plugins/ansible/AnsiblePlaybookBuilder.java b/src/main/java/org/jenkinsci/plugins/ansible/AnsiblePlaybookBuilder.java
index db04b5f..aca028a 100644
--- a/src/main/java/org/jenkinsci/plugins/ansible/AnsiblePlaybookBuilder.java
+++ b/src/main/java/org/jenkinsci/plugins/ansible/AnsiblePlaybookBuilder.java
@@ -22,6 +22,7 @@
 import com.cloudbees.plugins.credentials.CredentialsProvider;
 import com.cloudbees.plugins.credentials.common.StandardCredentials;
 import com.cloudbees.plugins.credentials.common.StandardUsernameCredentials;
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.AbortException;
 import hudson.EnvVars;
 import hudson.Extension;
@@ -82,7 +83,12 @@
 
     public boolean colorizedOutput = false;
 
-    public boolean hostKeyChecking = false;
+    public boolean disableHostKeyChecking = false;
+
+    @Deprecated
+    @SuppressWarnings("unused")
+    @SuppressFBWarnings("URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD")
+    public transient boolean hostKeyChecking = true;
 
     public String additionalParameters = null;
 
@@ -109,7 +115,7 @@ public AnsiblePlaybookBuilder(String ansibleName, String playbook, Inventory inv
         this.forks = forks;
         this.unbufferedOutput = unbufferedOutput;
         this.colorizedOutput = colorizedOutput;
-        this.hostKeyChecking = hostKeyChecking;
+        //this.hostKeyChecking = hostKeyChecking;
         this.additionalParameters = additionalParameters;
     }
 
@@ -194,8 +200,14 @@ public void setColorizedOutput(boolean colorizedOutput) {
     }
 
     @DataBoundSetter
+    public void setDisableHostKeyChecking(boolean disableHostKeyChecking) {
+        this.disableHostKeyChecking = disableHostKeyChecking;
+    }
+
+    @DataBoundSetter
+    @Deprecated
     public void setHostKeyChecking(boolean hostKeyChecking) {
-        this.hostKeyChecking = hostKeyChecking;
+        this.hostKeyChecking = true;
     }
 
     @DataBoundSetter
@@ -243,7 +255,7 @@ public void perform(@Nonnull Run<?, ?> run, @Nonnull Node node, @Nonnull FilePat
                 CredentialsProvider.findCredentialById(vaultCredentialsId, StandardCredentials.class, run) : null);
             invocation.setExtraVars(extraVars);
             invocation.setAdditionalParameters(additionalParameters);
-            invocation.setHostKeyCheck(hostKeyChecking);
+            invocation.setDisableHostKeyCheck(disableHostKeyChecking);
             invocation.setUnbufferedOutput(unbufferedOutput);
             invocation.setColorizedOutput(colorizedOutput);
             if (!invocation.execute(runner)) {
diff --git a/src/main/java/org/jenkinsci/plugins/ansible/jobdsl/AnsibleJobDslExtension.java b/src/main/java/org/jenkinsci/plugins/ansible/jobdsl/AnsibleJobDslExtension.java
index 21cf155..57e5b1d 100644
--- a/src/main/java/org/jenkinsci/plugins/ansible/jobdsl/AnsibleJobDslExtension.java
+++ b/src/main/java/org/jenkinsci/plugins/ansible/jobdsl/AnsibleJobDslExtension.java
@@ -30,7 +30,7 @@ public Object ansibleAdHoc(String module, String command, Runnable closure) {
         adhoc.setVaultCredentialsId(context.getVaultCredentialsId());
         adhoc.setColorizedOutput(context.isColorizedOutput());
         adhoc.setForks(context.getForks());
-        adhoc.setHostKeyChecking(context.isHostKeyChecking());
+        adhoc.setDisableHostKeyChecking(context.isDisableHostKeyChecking());
         adhoc.setBecome(context.isBecome());
         adhoc.setBecomeUser(context.getBecomeUser());
         adhoc.setSudo(context.isSudo());
@@ -54,7 +54,7 @@ public Object ansiblePlaybook(String playbook, Runnable closure) {
         plbook.setVaultCredentialsId(context.getVaultCredentialsId());
         plbook.setColorizedOutput(context.isColorizedOutput());
         plbook.setForks(context.getForks());
-        plbook.setHostKeyChecking(context.isHostKeyChecking());
+        plbook.setDisableHostKeyChecking(context.isDisableHostKeyChecking());
         plbook.setBecome(context.isBecome());
         plbook.setBecomeUser(context.getBecomeUser());
         plbook.setSudo(context.isSudo());
diff --git a/src/main/java/org/jenkinsci/plugins/ansible/jobdsl/context/AnsibleContext.java b/src/main/java/org/jenkinsci/plugins/ansible/jobdsl/context/AnsibleContext.java
index 0dcb572..0f1fd5f 100644
--- a/src/main/java/org/jenkinsci/plugins/ansible/jobdsl/context/AnsibleContext.java
+++ b/src/main/java/org/jenkinsci/plugins/ansible/jobdsl/context/AnsibleContext.java
@@ -2,6 +2,7 @@
 
 import java.util.List;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import javaposse.jobdsl.dsl.Context;
 import javaposse.jobdsl.plugin.ContextExtensionPoint;
 import org.jenkinsci.plugins.ansible.ExtraVar;
@@ -30,7 +31,11 @@
     private int forks = 5;
     private boolean unbufferedOutput = true;
     private boolean colorizedOutput = false;
-    private boolean hostKeyChecking = false;
+    private boolean disableHostKeyChecking = false;
+    @Deprecated
+    @SuppressWarnings("unused")
+    @SuppressFBWarnings("URF_UNREAD_FIELD")
+    private transient boolean hostKeyChecking = true;
     private String additionalParameters;
     ExtraVarsContext extraVarsContext = new ExtraVarsContext();
 
@@ -117,8 +122,8 @@ public void colorizedOutput(boolean colorizedOutput) {
         this.colorizedOutput = colorizedOutput;
     }
 
-    public void hostKeyChecking(boolean hostKeyChecking) {
-        this.hostKeyChecking = hostKeyChecking;
+    public void disableHostKeyChecking(boolean disableHostKeyChecking) {
+        this.disableHostKeyChecking = disableHostKeyChecking;
     }
 
     public void additionalParameters(String additionalParameters) {
@@ -213,8 +218,8 @@ public boolean isColorizedOutput() {
         return colorizedOutput;
     }
 
-    public boolean isHostKeyChecking() {
-        return hostKeyChecking;
+    public boolean isDisableHostKeyChecking() {
+        return disableHostKeyChecking;
     }
 
     public String getAdditionalParameters() {
@@ -244,4 +249,12 @@ public String getStartAtTask() {
     public List<ExtraVar> getExtraVars() {
         return extraVarsContext.getExtraVars();
     }
+
+    @Deprecated
+    public void hostKeyChecking(boolean hostKeyChecking) {
+    }
+    @Deprecated
+    public boolean isHostKeyChecking() {
+        return true;
+    }
 }
diff --git a/src/main/java/org/jenkinsci/plugins/ansible/workflow/AnsiblePlaybookStep.java b/src/main/java/org/jenkinsci/plugins/ansible/workflow/AnsiblePlaybookStep.java
index defb3a0..a245c0a 100644
--- a/src/main/java/org/jenkinsci/plugins/ansible/workflow/AnsiblePlaybookStep.java
+++ b/src/main/java/org/jenkinsci/plugins/ansible/workflow/AnsiblePlaybookStep.java
@@ -29,6 +29,7 @@
 import com.cloudbees.plugins.credentials.common.StandardUsernameCredentials;
 import com.cloudbees.plugins.credentials.common.UsernamePasswordCredentials;
 import com.google.inject.Inject;
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import hudson.*;
 import hudson.model.Computer;
 import hudson.model.Node;
@@ -77,7 +78,11 @@
     private String extras = null;
     private boolean colorized = false;
     private int forks = 0;
-    private boolean hostKeyChecking = false;
+    private boolean disableHostKeyChecking = false;
+    @Deprecated
+    @SuppressWarnings("unused")
+    @SuppressFBWarnings("URF_UNREAD_FIELD")
+    private transient boolean hostKeyChecking = true;
 
     @DataBoundConstructor
     public AnsiblePlaybookStep(String playbook) {
@@ -175,8 +180,13 @@ public void setForks(int forks) {
     }
 
     @DataBoundSetter
+    public void setDisableHostKeyChecking(boolean disableHostKeyChecking) {
+        this.disableHostKeyChecking = disableHostKeyChecking;
+    }
+
+    @DataBoundSetter
+    @Deprecated
     public void setHostKeyChecking(boolean hostKeyChecking) {
-        this.hostKeyChecking = hostKeyChecking;
     }
 
     public String getInstallation() {
@@ -247,8 +257,13 @@ public String getExtras() {
         return extras;
     }
 
+    public boolean isDisableHostKeyChecking() {
+        return disableHostKeyChecking;
+    }
+
+    @Deprecated
     public boolean isHostKeyChecking() {
-        return hostKeyChecking;
+        return true;
     }
 
     public int getForks() {
@@ -375,7 +390,7 @@ protected Void run() throws Exception {
             builder.setSkippedTags(step.getSkippedTags());
             builder.setExtraVars(convertExtraVars(step.extraVars));
             builder.setAdditionalParameters(step.getExtras());
-            builder.setHostKeyChecking(step.isHostKeyChecking());
+            builder.setDisableHostKeyChecking(step.isDisableHostKeyChecking());
             builder.setUnbufferedOutput(true);
             builder.setColorizedOutput(step.isColorized());
             Node node;
diff --git a/src/main/resources/org/jenkinsci/plugins/ansible/AnsibleAdHocCommandBuilder/config.jelly b/src/main/resources/org/jenkinsci/plugins/ansible/AnsibleAdHocCommandBuilder/config.jelly
index d0c4660..6517aae 100644
--- a/src/main/resources/org/jenkinsci/plugins/ansible/AnsibleAdHocCommandBuilder/config.jelly
+++ b/src/main/resources/org/jenkinsci/plugins/ansible/AnsibleAdHocCommandBuilder/config.jelly
@@ -53,7 +53,7 @@
       <f:number default="5"/>
     </f:entry>
 
-    <f:entry title="${%Check host SSH key}" field="hostKeyChecking">
+    <f:entry title="${%Disable the host SSH key check}" field="disableHostKeyChecking">
       <f:checkbox default="false" />
     </f:entry>
 
diff --git a/src/main/resources/org/jenkinsci/plugins/ansible/AnsibleAdHocCommandBuilder/help-disableHostKeyChecking.html b/src/main/resources/org/jenkinsci/plugins/ansible/AnsibleAdHocCommandBuilder/help-disableHostKeyChecking.html
new file mode 100644
index 0000000..7ace715
--- /dev/null
+++ b/src/main/resources/org/jenkinsci/plugins/ansible/AnsibleAdHocCommandBuilder/help-disableHostKeyChecking.html
@@ -0,0 +1,3 @@
+<div>
+    Check this box if you <b>really</b> want to disable the validation of the hosts SSH server keys.
+</div>
\ No newline at end of file
diff --git a/src/main/resources/org/jenkinsci/plugins/ansible/AnsibleAdHocCommandBuilder/help-hostKeyChecking.html b/src/main/resources/org/jenkinsci/plugins/ansible/AnsibleAdHocCommandBuilder/help-hostKeyChecking.html
deleted file mode 100644
index 4e95ca6..0000000
--- a/src/main/resources/org/jenkinsci/plugins/ansible/AnsibleAdHocCommandBuilder/help-hostKeyChecking.html
+++ /dev/null
@@ -1,3 +0,0 @@
-<div>
-    Check this box to enforce the validation of the hosts SSH server keys.
-</div>
\ No newline at end of file
diff --git a/src/main/resources/org/jenkinsci/plugins/ansible/AnsiblePlaybookBuilder/config.jelly b/src/main/resources/org/jenkinsci/plugins/ansible/AnsiblePlaybookBuilder/config.jelly
index 32ae016..29b1220 100644
--- a/src/main/resources/org/jenkinsci/plugins/ansible/AnsiblePlaybookBuilder/config.jelly
+++ b/src/main/resources/org/jenkinsci/plugins/ansible/AnsiblePlaybookBuilder/config.jelly
@@ -62,7 +62,7 @@
       <f:number default="5"/>
     </f:entry>
 
-    <f:entry title="${%Check host SSH key}" field="hostKeyChecking">
+    <f:entry title="${%Disable the host SSH key check}" field="disableHostKeyChecking">
       <f:checkbox default="false" />
     </f:entry>
 
diff --git a/src/main/resources/org/jenkinsci/plugins/ansible/AnsiblePlaybookBuilder/help-disableHostKeyChecking.html b/src/main/resources/org/jenkinsci/plugins/ansible/AnsiblePlaybookBuilder/help-disableHostKeyChecking.html
new file mode 100644
index 0000000..7ace715
--- /dev/null
+++ b/src/main/resources/org/jenkinsci/plugins/ansible/AnsiblePlaybookBuilder/help-disableHostKeyChecking.html
@@ -0,0 +1,3 @@
+<div>
+    Check this box if you <b>really</b> want to disable the validation of the hosts SSH server keys.
+</div>
\ No newline at end of file
diff --git a/src/main/resources/org/jenkinsci/plugins/ansible/AnsiblePlaybookBuilder/help-hostKeyChecking.html b/src/main/resources/org/jenkinsci/plugins/ansible/AnsiblePlaybookBuilder/help-hostKeyChecking.html
deleted file mode 100644
index 4e95ca6..0000000
--- a/src/main/resources/org/jenkinsci/plugins/ansible/AnsiblePlaybookBuilder/help-hostKeyChecking.html
+++ /dev/null
@@ -1,3 +0,0 @@
-<div>
-    Check this box to enforce the validation of the hosts SSH server keys.
-</div>
\ No newline at end of file
diff --git a/src/main/resources/org/jenkinsci/plugins/ansible/workflow/AnsiblePlaybookStep/config.jelly b/src/main/resources/org/jenkinsci/plugins/ansible/workflow/AnsiblePlaybookStep/config.jelly
index 761c741..ca11e1e 100644
--- a/src/main/resources/org/jenkinsci/plugins/ansible/workflow/AnsiblePlaybookStep/config.jelly
+++ b/src/main/resources/org/jenkinsci/plugins/ansible/workflow/AnsiblePlaybookStep/config.jelly
@@ -42,7 +42,7 @@
     <f:entry field="forks" title="Number of parallel processes to use">
         <f:textbox/>
     </f:entry>
-    <f:entry title="${%Check host SSH key}" field="hostKeyChecking">
+    <f:entry title="${%Disable the host SSH key check}" field="disableHostKeyChecking">
         <f:checkbox default="false" />
     </f:entry>
     <f:entry field="colorized" title="${%Colorized output}">
diff --git a/src/test/java/org/jenkinsci/plugins/ansible/AnsibleAdHocCommandInvocationTest.java b/src/test/java/org/jenkinsci/plugins/ansible/AnsibleAdHocCommandInvocationTest.java
index 241fda6..1e77e0f 100644
--- a/src/test/java/org/jenkinsci/plugins/ansible/AnsibleAdHocCommandInvocationTest.java
+++ b/src/test/java/org/jenkinsci/plugins/ansible/AnsibleAdHocCommandInvocationTest.java
@@ -88,7 +88,7 @@ public void should_generate_simple_invocation_with_env() throws Exception {
         invocation.setModule("ping");
         invocation.setForks(5);
         invocation.setColorizedOutput(true);
-        invocation.setHostKeyCheck(false);
+        invocation.setDisableHostKeyCheck(true);
         invocation.setUnbufferedOutput(true);
         // When
         invocation.execute(runner);
@@ -101,6 +101,34 @@ public void should_generate_simple_invocation_with_env() throws Exception {
                 .containsEntry("ANSIBLE_HOST_KEY_CHECKING", "False");
     }
 
+    @Test
+    public void secure_by_default_SEC_630() throws Exception {
+        // Given
+        Inventory inventory = new InventoryPath("/tmp/hosts");
+        BuildListener listener = mock(BuildListener.class);
+        CLIRunner runner = mock(CLIRunner.class);
+        AbstractBuild<?,?> build = mock(AbstractBuild.class);
+        when(build.getEnvironment(any(TaskListener.class))).thenReturn(new EnvVars());
+        AnsibleAdHocCommandInvocation invocation = new AnsibleAdHocCommandInvocation("/usr/local/bin/ansible", build, listener);
+        invocation.setHostPattern("localhost");
+        invocation.setInventory(inventory);
+        invocation.setModule("ping");
+        invocation.setForks(5);
+        invocation.setColorizedOutput(true);
+        //invocation.setDisableHostKeyCheck(true);
+        invocation.setUnbufferedOutput(true);
+        // When
+        invocation.execute(runner);
+        // Then
+        ArgumentCaptor<Map> argument = ArgumentCaptor.forClass(Map.class);
+        verify(runner).execute(any(ArgumentListBuilder.class), argument.capture());
+        assertThat((Map<String, String>)argument.getValue())
+                .containsEntry("PYTHONUNBUFFERED", "1")
+                .containsEntry("ANSIBLE_FORCE_COLOR", "true")
+                .doesNotContainEntry("ANSIBLE_HOST_KEY_CHECKING", "False");
+    }
+
+
     @Test
     @Ignore("build.getWorkspace() cannot be mocked")
     public void should_handle_private_key_credentials() throws Exception {
diff --git a/src/test/java/org/jenkinsci/plugins/ansible/CompatibilityTest.java b/src/test/java/org/jenkinsci/plugins/ansible/CompatibilityTest.java
new file mode 100644
index 0000000..fa96d6a
--- /dev/null
+++ b/src/test/java/org/jenkinsci/plugins/ansible/CompatibilityTest.java
@@ -0,0 +1,24 @@
+package org.jenkinsci.plugins.ansible;
+
+import hudson.model.AbstractProject;
+import hudson.model.FreeStyleProject;
+import org.junit.Rule;
+import org.junit.Test;
+import org.jvnet.hudson.test.JenkinsRule;
+import org.jvnet.hudson.test.recipes.LocalData;
+
+import static org.junit.Assert.assertEquals;
+
+public class CompatibilityTest {
+
+    @Rule
+    public JenkinsRule r = new JenkinsRule();
+
+    @LocalData
+    @Test
+    public void test() throws Exception {
+        FreeStyleProject p = (FreeStyleProject) r.jenkins.getItem("old");
+        assertEquals(2, p.getBuilders().size());
+        assertEquals(false, r.jenkins.getAdministrativeMonitor("OldData").isActivated());
+    }
+}
diff --git a/src/test/java/org/jenkinsci/plugins/ansible/jobdsl/JobDslIntegrationTest.java b/src/test/java/org/jenkinsci/plugins/ansible/jobdsl/JobDslIntegrationTest.java
index ebed889..0188221 100644
--- a/src/test/java/org/jenkinsci/plugins/ansible/jobdsl/JobDslIntegrationTest.java
+++ b/src/test/java/org/jenkinsci/plugins/ansible/jobdsl/JobDslIntegrationTest.java
@@ -21,6 +21,7 @@
  */
 public class JobDslIntegrationTest {
     public static final String ANSIBLE_DSL_GROOVY_PLAYBOOK = "jobdsl/playbook.groovy";
+    public static final String ANSIBLE_DSL_GROOVY_SECURITY_630 = "jobdsl/security630.groovy";
     public static final String ANSIBLE_DSL_GROOVY_PLAYBOOK_LEGACY = "jobdsl/legacyPlaybook.groovy";
     public static final String ANSIBLE_DSL_GROOVY_ADHOC = "jobdsl/adhoc.groovy";
     public static final String ANSIBLE_DSL_GROOVY_VAULT = "jobdsl/vault.groovy";
@@ -31,6 +32,14 @@
     @Rule
     public RuleChain chain = RuleChain.outerRule(jenkins).around(dsl);
 
+    @Test
+    @DslJobRule.WithJobDsl(ANSIBLE_DSL_GROOVY_SECURITY_630)
+    public void shouldCreateJobSecurity630Dsl() throws Exception {
+        AnsiblePlaybookBuilder step = dsl.getGeneratedJob().getBuildersList().get(AnsiblePlaybookBuilder.class);
+        assertThat("Should add playbook builder", step, notNullValue());
+        assertThat("disableHostKeyChecking", step.disableHostKeyChecking, is(false));
+    }
+
     @Test
     @DslJobRule.WithJobDsl(ANSIBLE_DSL_GROOVY_PLAYBOOK)
     public void shouldCreateJobWithPlaybookDsl() throws Exception {
@@ -52,7 +61,7 @@ public void shouldCreateJobWithPlaybookDsl() throws Exception {
         assertThat("forks", step.forks, is(6));
         assertThat("unbufferedOutput", step.unbufferedOutput, is(false));
         assertThat("colorizedOutput", step.colorizedOutput, is(true));
-        assertThat("hostKeyChecking", step.hostKeyChecking, is(false));
+        assertThat("disableHostKeyChecking", step.disableHostKeyChecking, is(false));
         assertThat("additionalParameters", step.additionalParameters, is("params"));
         assertThat("extraVar.key", step.extraVars.get(0).getKey(), is("key"));
         assertThat("extraVar.value", step.extraVars.get(0).getValue(), is("value"));
@@ -81,7 +90,7 @@ public void shouldCreateJobWithLegacyPlaybookDsl() throws Exception {
         assertThat("forks", step.forks, is(6));
         assertThat("unbufferedOutput", step.unbufferedOutput, is(false));
         assertThat("colorizedOutput", step.colorizedOutput, is(true));
-        assertThat("hostKeyChecking", step.hostKeyChecking, is(false));
+        assertThat("disableHostKeyChecking", step.disableHostKeyChecking, is(true));
         assertThat("additionalParameters", step.additionalParameters, is("params"));
         assertThat("extraVar.key", step.extraVars.get(0).getKey(), is("key"));
         assertThat("extraVar.value", step.extraVars.get(0).getValue(), is("value"));
@@ -106,7 +115,7 @@ public void shouldCreateJobAdhocDsl() throws Exception {
         assertThat("forks", step.forks, is(5));
         assertThat("unbufferedOutput", step.unbufferedOutput, is(true));
         assertThat("colorizedOutput", step.colorizedOutput, is(false));
-        assertThat("hostKeyChecking", step.hostKeyChecking, is(false));
+        assertThat("disableHostKeyChecking", step.disableHostKeyChecking, is(false));
     }
 
     @Test
diff --git a/src/test/resources/jobdsl/legacyPlaybook.groovy b/src/test/resources/jobdsl/legacyPlaybook.groovy
index ff10903..9ec7f91 100644
--- a/src/test/resources/jobdsl/legacyPlaybook.groovy
+++ b/src/test/resources/jobdsl/legacyPlaybook.groovy
@@ -14,6 +14,7 @@ freeStyleJob('ansible') {
             unbufferedOutput(false)
             colorizedOutput(true)
             hostKeyChecking(false)
+            disableHostKeyChecking(true)
             additionalParameters('params')
             extraVars {
                 extraVar ("key","value",true)
diff --git a/src/test/resources/jobdsl/playbook.groovy b/src/test/resources/jobdsl/playbook.groovy
index ffb0779..24433f1 100644
--- a/src/test/resources/jobdsl/playbook.groovy
+++ b/src/test/resources/jobdsl/playbook.groovy
@@ -13,7 +13,7 @@ freeStyleJob('ansible') {
             forks(6)
             unbufferedOutput(false)
             colorizedOutput(true)
-            hostKeyChecking(false)
+            disableHostKeyChecking(false)
             additionalParameters('params')
             extraVars {
                 extraVar ("key","value",true)
diff --git a/src/test/resources/jobdsl/security630.groovy b/src/test/resources/jobdsl/security630.groovy
new file mode 100644
index 0000000..be71edc
--- /dev/null
+++ b/src/test/resources/jobdsl/security630.groovy
@@ -0,0 +1,22 @@
+freeStyleJob('ansible') {
+    steps {
+        ansiblePlaybook('path/playbook.yml') {
+            inventoryPath('hosts.ini')
+            ansibleName('1.9.4')
+            limit('retry.limit')
+            tags('one,two')
+            skippedTags('three')
+            startAtTask('task')
+            credentialsId('credsid')
+            become(true)
+            becomeUser("user")
+            forks(6)
+            unbufferedOutput(false)
+            colorizedOutput(true)
+            additionalParameters('params')
+            extraVars {
+                extraVar ("key","value",true)
+            }
+        }
+    }
+}
diff --git a/src/test/resources/org/jenkinsci/plugins/ansible/CompatibilityTest/jobs/old/config.xml b/src/test/resources/org/jenkinsci/plugins/ansible/CompatibilityTest/jobs/old/config.xml
new file mode 100644
index 0000000..10a4442
--- /dev/null
+++ b/src/test/resources/org/jenkinsci/plugins/ansible/CompatibilityTest/jobs/old/config.xml
@@ -0,0 +1,48 @@
+<?xml version='1.0' encoding='UTF-8'?>
+<project>
+    <actions/>
+    <description></description>
+    <keepDependencies>false</keepDependencies>
+    <scm class="hudson.scm.NullSCM"/>
+    <canRoam>true</canRoam>
+    <disabled>false</disabled>
+    <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
+    <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
+    <triggers/>
+    <concurrentBuild>false</concurrentBuild>
+    <builders>
+        <org.jenkinsci.plugins.ansible.AnsiblePlaybookBuilder plugin="ansible@0.8">
+            <playbook>playbook.yml</playbook>
+            <limit></limit>
+            <tags></tags>
+            <skippedTags></skippedTags>
+            <startAtTask></startAtTask>
+            <credentialsId></credentialsId>
+            <vaultCredentialsId></vaultCredentialsId>
+            <sudo>false</sudo>
+            <sudoUser></sudoUser>
+            <forks>5</forks>
+            <unbufferedOutput>true</unbufferedOutput>
+            <colorizedOutput>false</colorizedOutput>
+            <hostKeyChecking>false</hostKeyChecking>
+            <additionalParameters></additionalParameters>
+            <copyCredentialsInWorkspace>false</copyCredentialsInWorkspace>
+        </org.jenkinsci.plugins.ansible.AnsiblePlaybookBuilder>
+        <org.jenkinsci.plugins.ansible.AnsibleAdHocCommandBuilder plugin="ansible@0.8">
+            <credentialsId></credentialsId>
+            <vaultCredentialsId></vaultCredentialsId>
+            <hostPattern>one.example.com</hostPattern>
+            <module></module>
+            <command></command>
+            <sudo>false</sudo>
+            <sudoUser></sudoUser>
+            <forks>5</forks>
+            <unbufferedOutput>true</unbufferedOutput>
+            <colorizedOutput>false</colorizedOutput>
+            <hostKeyChecking>true</hostKeyChecking>
+            <additionalParameters></additionalParameters>
+        </org.jenkinsci.plugins.ansible.AnsibleAdHocCommandBuilder>
+    </builders>
+    <publishers/>
+    <buildWrappers/>
+</project>
\ No newline at end of file
