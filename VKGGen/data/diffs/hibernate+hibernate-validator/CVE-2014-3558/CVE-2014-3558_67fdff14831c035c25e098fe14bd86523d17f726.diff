diff --git a/engine/src/main/java/org/hibernate/validator/internal/util/ExecutableHelper.java b/engine/src/main/java/org/hibernate/validator/internal/util/ExecutableHelper.java
index 5105bfc47..2a37789f8 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/util/ExecutableHelper.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/util/ExecutableHelper.java
@@ -19,6 +19,8 @@
 import java.lang.reflect.Constructor;
 import java.lang.reflect.Method;
 import java.lang.reflect.Modifier;
+import java.security.AccessController;
+import java.security.PrivilegedAction;
 
 import com.fasterxml.classmate.Filter;
 import com.fasterxml.classmate.MemberResolver;
@@ -29,6 +31,7 @@
 import com.fasterxml.classmate.members.ResolvedMethod;
 
 import org.hibernate.validator.internal.metadata.raw.ExecutableElement;
+import org.hibernate.validator.internal.util.privilegedactions.GetResolvedMemberMethods;
 
 /**
  * Provides shared functionality dealing with executables.
@@ -122,7 +125,10 @@ private boolean instanceMethodParametersResolveToSameTypes(Method subTypeMethod,
 				null
 		);
 
-		ResolvedMethod[] resolvedMethods = typeWithMembers.getMemberMethods();
+		// ClassMate itself doesn't require any special permissions, but it invokes reflection APIs which do.
+		// Wrapping the call into a privileged action to avoid that all calling code bases need to have the required
+		// permission
+		ResolvedMethod[] resolvedMethods = run( GetResolvedMemberMethods.action( typeWithMembers ) );
 
 		// The ClassMate doc says that overridden methods are flattened to one
 		// resolved method. But that is the case only for methods without any
@@ -144,6 +150,16 @@ private boolean instanceMethodParametersResolveToSameTypes(Method subTypeMethod,
 		return true;
 	}
 
+	/**
+	 * Runs the given privileged action, using a privileged block if required.
+	 * <p>
+	 * <b>NOTE:</b> This must never be changed into a publicly available method to avoid execution of arbitrary
+	 * privileged actions within HV's protection domain.
+	 */
+	private <T> T run(PrivilegedAction<T> action) {
+		return System.getSecurityManager() != null ? AccessController.doPrivileged( action ) : action.run();
+	}
+
 	/**
 	 * A filter implementation filtering methods matching given methods.
 	 *
diff --git a/engine/src/main/java/org/hibernate/validator/internal/util/privilegedactions/GetResolvedMemberMethods.java b/engine/src/main/java/org/hibernate/validator/internal/util/privilegedactions/GetResolvedMemberMethods.java
new file mode 100644
index 000000000..d9c4c6cf0
--- /dev/null
+++ b/engine/src/main/java/org/hibernate/validator/internal/util/privilegedactions/GetResolvedMemberMethods.java
@@ -0,0 +1,45 @@
+/*
+ * JBoss, Home of Professional Open Source
+ * Copyright 2014, Red Hat, Inc. and/or its affiliates, and individual contributors
+ * by the @authors tag. See the copyright.txt in the distribution for a
+ * full listing of individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.hibernate.validator.internal.util.privilegedactions;
+
+import java.security.PrivilegedAction;
+
+import com.fasterxml.classmate.ResolvedTypeWithMembers;
+import com.fasterxml.classmate.members.ResolvedMethod;
+
+/**
+ * Returns the member methods - with resolved type parameters - of a given type.
+ *
+ * @author Gunnar Morling
+ */
+public final class GetResolvedMemberMethods implements PrivilegedAction<ResolvedMethod[]> {
+
+	private final ResolvedTypeWithMembers type;
+
+	public static GetResolvedMemberMethods action(ResolvedTypeWithMembers type) {
+		return new GetResolvedMemberMethods( type );
+	}
+
+	private GetResolvedMemberMethods(ResolvedTypeWithMembers type) {
+		this.type = type;
+	}
+
+	@Override
+	public ResolvedMethod[] run() {
+		return type.getMemberMethods();
+	}
+}
