diff --git a/engine/src/main/java/org/hibernate/validator/internal/util/logging/Log.java b/engine/src/main/java/org/hibernate/validator/internal/util/logging/Log.java
index 6aaeda466..5d51cc00b 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/util/logging/Log.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/util/logging/Log.java
@@ -35,7 +35,6 @@
 import javax.validation.Path;
 import javax.validation.UnexpectedTypeException;
 import javax.validation.ValidationException;
-import javax.xml.bind.JAXBException;
 import javax.xml.stream.XMLStreamException;
 
 import org.jboss.logging.BasicLogger;
@@ -360,7 +359,7 @@
 	ValidationException getUnableToInstantiateValidationProviderClassException(String providerClassName, @Cause Exception e);
 
 	@Message(id = 100, value = "Unable to parse %s.")
-	ValidationException getUnableToParseValidationXmlFileException(String file, @Cause JAXBException e);
+	ValidationException getUnableToParseValidationXmlFileException(String file, @Cause Exception e);
 
 	@Message(id = 101, value = "%s is not an annotation.")
 	ValidationException getIsNotAnAnnotationException(String annotationClassName);
@@ -407,7 +406,7 @@
 	ValidationException getWrongPayloadClassException(String payloadClassName);
 
 	@Message(id = 115, value = "Error parsing mapping file.")
-	ValidationException getErrorParsingMappingFileException(@Cause JAXBException e);
+	ValidationException getErrorParsingMappingFileException(@Cause Exception e);
 
 	@Message(id = 116, value = "%s")
 	IllegalArgumentException getIllegalArgumentException(String message);
diff --git a/engine/src/main/java/org/hibernate/validator/internal/util/privilegedactions/NewJaxbContext.java b/engine/src/main/java/org/hibernate/validator/internal/util/privilegedactions/NewJaxbContext.java
new file mode 100644
index 000000000..948dd3055
--- /dev/null
+++ b/engine/src/main/java/org/hibernate/validator/internal/util/privilegedactions/NewJaxbContext.java
@@ -0,0 +1,45 @@
+/*
+ * JBoss, Home of Professional Open Source
+ * Copyright 2014, Red Hat, Inc. and/or its affiliates, and individual contributors
+ * by the @authors tag. See the copyright.txt in the distribution for a
+ * full listing of individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.hibernate.validator.internal.util.privilegedactions;
+
+import java.security.PrivilegedExceptionAction;
+
+import javax.xml.bind.JAXBContext;
+import javax.xml.bind.JAXBException;
+
+/**
+ * Returns a new {@link JAXBContext} for the given class.
+ *
+ * @author Gunnar Morling
+ */
+public final class NewJaxbContext implements PrivilegedExceptionAction<JAXBContext> {
+
+	private final Class<?> clazz;
+
+	public static NewJaxbContext action(Class<?> clazz) {
+		return new NewJaxbContext( clazz );
+	}
+
+	private NewJaxbContext(Class<?> clazz) {
+		this.clazz = clazz;
+	}
+
+	@Override
+	public JAXBContext run() throws JAXBException {
+		return JAXBContext.newInstance( clazz );
+	}
+}
diff --git a/engine/src/main/java/org/hibernate/validator/internal/util/privilegedactions/Unmarshal.java b/engine/src/main/java/org/hibernate/validator/internal/util/privilegedactions/Unmarshal.java
new file mode 100644
index 000000000..76f6b9561
--- /dev/null
+++ b/engine/src/main/java/org/hibernate/validator/internal/util/privilegedactions/Unmarshal.java
@@ -0,0 +1,51 @@
+/*
+ * JBoss, Home of Professional Open Source
+ * Copyright 2014, Red Hat, Inc. and/or its affiliates, and individual contributors
+ * by the @authors tag. See the copyright.txt in the distribution for a
+ * full listing of individual contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.hibernate.validator.internal.util.privilegedactions;
+
+import java.security.PrivilegedExceptionAction;
+
+import javax.xml.bind.JAXBElement;
+import javax.xml.bind.JAXBException;
+import javax.xml.bind.Unmarshaller;
+import javax.xml.transform.Source;
+
+/**
+ * Unmarshals the given source.
+ *
+ * @author Gunnar Morling
+ */
+public final class Unmarshal<T> implements PrivilegedExceptionAction<JAXBElement<T>> {
+
+	private final Unmarshaller unmarshaller;
+	private final Source source;
+	private final Class<T> clazz;
+
+	public static <T> Unmarshal<T> action(Unmarshaller unmarshaller, Source source, Class<T> clazz) {
+		return new Unmarshal<T>( unmarshaller, source, clazz );
+	}
+
+	private Unmarshal(Unmarshaller unmarshaller, Source source, Class<T> clazz) {
+		this.unmarshaller = unmarshaller;
+		this.source = source;
+		this.clazz = clazz;
+	}
+
+	@Override
+	public JAXBElement<T> run() throws JAXBException {
+		return unmarshaller.unmarshal( source, clazz );
+	}
+}
diff --git a/engine/src/main/java/org/hibernate/validator/internal/xml/ValidationXmlParser.java b/engine/src/main/java/org/hibernate/validator/internal/xml/ValidationXmlParser.java
index 83159f5f9..01ef0c27a 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/xml/ValidationXmlParser.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/xml/ValidationXmlParser.java
@@ -18,17 +18,19 @@
 
 import java.io.IOException;
 import java.io.InputStream;
+import java.security.AccessController;
+import java.security.PrivilegedExceptionAction;
 import java.util.EnumSet;
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentMap;
+
 import javax.validation.BootstrapConfiguration;
 import javax.validation.executable.ExecutableType;
 import javax.xml.bind.JAXBContext;
 import javax.xml.bind.JAXBElement;
-import javax.xml.bind.JAXBException;
 import javax.xml.bind.Unmarshaller;
 import javax.xml.transform.stream.StreamSource;
 import javax.xml.validation.Schema;
@@ -36,6 +38,8 @@
 import org.hibernate.validator.internal.util.ResourceLoaderHelper;
 import org.hibernate.validator.internal.util.logging.Log;
 import org.hibernate.validator.internal.util.logging.LoggerFactory;
+import org.hibernate.validator.internal.util.privilegedactions.NewJaxbContext;
+import org.hibernate.validator.internal.util.privilegedactions.Unmarshal;
 
 /**
  * Parser for <i>validation.xml</i> using JAXB.
@@ -111,14 +115,19 @@ private ValidationConfigType unmarshal(InputStream inputStream, Schema schema) {
 		log.parsingXMLFile( VALIDATION_XML_FILE );
 
 		try {
-			JAXBContext jc = JAXBContext.newInstance( ValidationConfigType.class );
+			// JAXBContext#newInstance() requires several permissions internally and doesn't use any privileged blocks
+			// itself; Wrapping it here avoids that all calling code bases need to have these permissions as well
+			JAXBContext jc = run( NewJaxbContext.action( ValidationConfigType.class ) );
 			Unmarshaller unmarshaller = jc.createUnmarshaller();
 			unmarshaller.setSchema( schema );
 			StreamSource stream = new StreamSource( inputStream );
-			JAXBElement<ValidationConfigType> root = unmarshaller.unmarshal( stream, ValidationConfigType.class );
+
+			// Unmashaller#unmarshal() requires several permissions internally and doesn't use any privileged blocks
+			// itself; Wrapping it here avoids that all calling code bases need to have these permissions as well
+			JAXBElement<ValidationConfigType> root = run( Unmarshal.action( unmarshaller, stream, ValidationConfigType.class ) );
 			return root.getValue();
 		}
-		catch ( JAXBException e ) {
+		catch ( Exception e ) {
 			throw log.getUnableToParseValidationXmlFileException( VALIDATION_XML_FILE, e );
 		}
 	}
@@ -183,4 +192,14 @@ private BootstrapConfiguration createBootstrapConfiguration(ValidationConfigType
 
 		return executableTypes;
 	}
+
+	/**
+	 * Runs the given privileged action, using a privileged block if required.
+	 * <p>
+	 * <b>NOTE:</b> This must never be changed into a publicly available method to avoid execution of arbitrary
+	 * privileged actions within HV's protection domain.
+	 */
+	private <T> T run(PrivilegedExceptionAction<T> action) throws Exception {
+		return System.getSecurityManager() != null ? AccessController.doPrivileged( action ) : action.run();
+	}
 }
diff --git a/engine/src/main/java/org/hibernate/validator/internal/xml/XmlMappingParser.java b/engine/src/main/java/org/hibernate/validator/internal/xml/XmlMappingParser.java
index a5db48cfa..2083e11a3 100644
--- a/engine/src/main/java/org/hibernate/validator/internal/xml/XmlMappingParser.java
+++ b/engine/src/main/java/org/hibernate/validator/internal/xml/XmlMappingParser.java
@@ -22,6 +22,7 @@
 import java.lang.annotation.Annotation;
 import java.security.AccessController;
 import java.security.PrivilegedAction;
+import java.security.PrivilegedExceptionAction;
 import java.util.Collections;
 import java.util.List;
 import java.util.Map;
@@ -49,6 +50,8 @@
 import org.hibernate.validator.internal.util.logging.Log;
 import org.hibernate.validator.internal.util.logging.LoggerFactory;
 import org.hibernate.validator.internal.util.privilegedactions.LoadClass;
+import org.hibernate.validator.internal.util.privilegedactions.NewJaxbContext;
+import org.hibernate.validator.internal.util.privilegedactions.Unmarshal;
 
 import static org.hibernate.validator.internal.util.CollectionHelper.newArrayList;
 import static org.hibernate.validator.internal.util.CollectionHelper.newHashMap;
@@ -100,7 +103,9 @@ public XmlMappingParser(ConstraintHelper constraintHelper, ParameterNameProvider
 	 */
 	public final void parse(Set<InputStream> mappingStreams) {
 		try {
-			JAXBContext jc = JAXBContext.newInstance( ConstraintMappingsType.class );
+			// JAXBContext#newInstance() requires several permissions internally and doesn't use any privileged blocks
+			// itself; Wrapping it here avoids that all calling code bases need to have these permissions as well
+			JAXBContext jc = run( NewJaxbContext.action( ConstraintMappingsType.class ) );
 
 			Set<String> alreadyProcessedConstraintDefinitions = newHashSet();
 			for ( InputStream in : mappingStreams ) {
@@ -308,7 +313,10 @@ private ConstraintMappingsType getValidationConfig(InputStream in, Unmarshaller
 			}
 
 			StreamSource stream = new StreamSource( new CloseIgnoringInputStream( in ) );
-			JAXBElement<ConstraintMappingsType> root = unmarshaller.unmarshal( stream, ConstraintMappingsType.class );
+
+			// Unmashaller#unmarshal() requires several permissions internally and doesn't use any privileged blocks
+			// itself; Wrapping it here avoids that all calling code bases need to have these permissions as well
+			JAXBElement<ConstraintMappingsType> root = run( Unmarshal.action( unmarshaller, stream, ConstraintMappingsType.class ) );
 			constraintMappings = root.getValue();
 
 			if ( markSupported ) {
@@ -320,7 +328,7 @@ private ConstraintMappingsType getValidationConfig(InputStream in, Unmarshaller
 				}
 			}
 		}
-		catch ( JAXBException e ) {
+		catch ( Exception e ) {
 			throw log.getErrorParsingMappingFileException( e );
 		}
 		return constraintMappings;
@@ -346,6 +354,18 @@ private String getSchemaResourceName(String schemaVersion) {
 		return System.getSecurityManager() != null ? AccessController.doPrivileged( action ) : action.run();
 	}
 
+	private <T> T run(PrivilegedExceptionAction<T> action) throws JAXBException {
+		try {
+			return System.getSecurityManager() != null ? AccessController.doPrivileged( action ) : action.run();
+		}
+		catch ( JAXBException e ) {
+			throw e;
+		}
+		catch ( Exception e ) {
+			throw log.getErrorParsingMappingFileException( e );
+		}
+	}
+
 	// JAXB closes the underlying input stream
 	private static class CloseIgnoringInputStream extends FilterInputStream {
 		public CloseIgnoringInputStream(InputStream in) {
