commit 8e4642602b076340340a838d705b82c9594915b6
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Jan 10 00:18:26 2021 +0000

    Daily bump.

commit 0865ed377b034351b93d3c04abd3e50b7661d59f
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Jan 9 00:18:32 2021 +0000

    Daily bump.

commit 6fab822465a941e0f7c0861f34a76067d64c801c
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Jan 8 00:18:38 2021 +0000

    Daily bump.

commit ef7d053ea33cc9abc7fc413213705a16478fefc4
Author: Harald Anlauf <anlauf@gmx.de>
Date:   Wed Jan 6 19:37:11 2021 +0100

    PR fortran/78746 - invalid access after error recovery
    
    The error recovery after an invalid reference to an undefined CLASS
    during a TYPE declaration lead to an invalid access.  Add a check.
    
    gcc/fortran/ChangeLog:
    
            * resolve.c (resolve_component): Add check for valid CLASS
            reference before trying to access CLASS data.
    
    (cherry picked from commit 8b6f1e8f97fe0d435d334075821149dbd85c8266)

commit 4d3d6343903f7ad79f0c70767bd106008fbfc346
Author: Paul Thomas <pault@gcc.gnu.org>
Date:   Tue Aug 4 07:53:50 2020 +0100

    Change testcase for pr96325 from run to compile.
    
    2020-08-04  Paul Thomas  <pault@gcc.gnu.org>
    
    gcc/testsuite/
            PR fortran/96325
            * gfortran.dg/pr96325.f90: Change from run to compile.
    
    (cherry picked from commit 863de9321813f947018cc60b06ba163ddcfbb5f2)

commit b66dc7d363d26681113692f75ae9c033c12f3897
Author: Paul Thomas <pault@gcc.gnu.org>
Date:   Sun Aug 2 10:35:36 2020 +0100

    This patch fixes PR96325. See the explanatory comment in the testcase.
    
    2020-08-02  Paul Thomas  <pault@gcc.gnu.org>
    
    gcc/fortran
            PR fortran/96325
            * primary.c (gfc_match_varspec): In the case that a component
            reference is added to an intrinsic type component, emit the
            error message in this function.
    
    gcc/testsuite/
            PR fortran/96325
            * gfortran.dg/pr96325.f90: New test.
            * gfortran.dg/pr91589.f90: Update error message.
    
    (cherry picked from commit e41da82345fb01c4c2641c979a94a975d15312ab)

commit 1fa1430d1cfc4b373bfde9e3a749a5255a589643
Author: Paul Thomas <pault@gcc.gnu.org>
Date:   Sat Dec 26 15:08:11 2020 +0000

    Fix failures with -m32 and some memory leaks.
    
    2020-12-23  Paul Thomas  <pault@gcc.gnu.org>
    
    gcc/fortran
            PR fortran/83118
            * trans-array.c (gfc_alloc_allocatable_for_assignment): Make
            sure that class expressions are captured for dummy arguments by
            use of gfc_get_class_from_gfc_expr otherwise the wrong vptr is
            used.
            * trans-expr.c (gfc_get_class_from_gfc_expr): New function.
            (gfc_get_class_from_expr): If a constant expression is
            encountered, return NULL_TREE;
            (gfc_trans_assignment_1): Deallocate rhs allocatable components
            after passing derived type function results to class lhs.
            * trans.h : Add prototype for gfc_get_class_from_gfc_expr.
    
    (cherry picked from commit 0175d45d14b1f9ebc4c15ea5bafcda655c37fc35)

commit e780e940a9f53b93bdf6bd70fdb3ec2b287a52e3
Author: Paul Thomas <pault@gcc.gnu.org>
Date:   Fri Dec 18 14:00:11 2020 +0000

    As well as the PR this patch fixes problems in handling class objects
    
    2020-12-18  Paul Thomas  <pault@gcc.gnu.org>
    
    gcc/fortran
            PR fortran/83118
            PR fortran/96012
            * resolve.c (resolve_ordinary_assign): Generate a vtable if
            necessary for scalar non-polymorphic rhs's to unlimited lhs's.
            * trans-array.c (get_class_info_from_ss): New function.
            (gfc_trans_allocate_array_storage): Defer obtaining class
            element type until all sources of class exprs are tried. Use
            class API rather than TREE_OPERAND. Look for class expressions
            in ss->info by calling get_class_info_from_ss. After, obtain
            the element size for class descriptors. Where the element type
            is unknown, cast the data as character(len=size) to overcome
            unlimited polymorphic problems.
            (gfc_conv_ss_descriptor): Do not fix class variable refs.
            (build_class_array_ref, structure_alloc_comps): Replace code
            replicating the new function gfc_resize_class_size_with_len.
            (gfc_alloc_allocatable_for_assignment): Obtain element size
            for lhs in cases of deferred characters and class enitities.
            Move code for the element size of rhs to start of block. Clean
            up extraction of class parameters throughout this function.
            After the shape check test whether or not the lhs and rhs
            element sizes are the same. Use earlier evaluation of
            'cond_null'. Reallocation of lhs only to happen if size changes
            or element size changes.
            * trans-expr.c (gfc_resize_class_size_with_len): New function.
            (gfc_get_class_from_expr): If a constant expression is
            encountered, return NULL_TREE;
            (trans_scalar_class_assign): New function.
            (gfc_conv_procedure_call): Ensure the vtable is present for
            passing a non-class actual to an unlimited formal.
            (trans_class_vptr_len_assignment): For expressions of type
            BT_CLASS, extract the class expression if necessary. Use a
            statement block outside the loop body. Ensure that 'rhs' is
            of the correct type. Obtain rhs vptr in all circumstances.
            (gfc_trans_scalar_assign): Call trans_scalar_class_assign to
            make maximum use of the vptr copy in place of assignment.
            (trans_class_assignment): Actually do reallocation if needed.
            (gfc_trans_assignment_1): Simplify some of the logic with
            'realloc_flag'. Set 'vptr_copy' for all array assignments to
            unlimited polymorphic lhs.
            * trans.c (gfc_build_array_ref): Call gfc_resize_class_size_
            with_len to correct span for unlimited polymorphic decls.
            * trans.h : Add prototype for gfc_resize_class_size_with_len.
    
    gcc/testsuite/
            PR fortran/83118
            PR fortran/96012
            * gfortran.dg/dependency_60.f90: New test.
            * gfortran.dg/class_allocate_25.f90: New test.
            * gfortran.dg/class_assign_4.f90: New test.
            * gfortran.dg/unlimited_polymorphic_32.f03: New test.
    
    (cherry picked from commit ce8dcc9105cbd4043d575d8b2c91309a423951a9)

commit 3d85846b179ddef1d84214da2c4f4f6b27d9165f
Author: Martin Liska <mliska@suse.cz>
Date:   Thu Jan 7 11:30:29 2021 +0100

    Sync gcc-changelog scripts.
    
    contrib/ChangeLog:
    
            * gcc-changelog/git_commit.py: Sync from master.
            * gcc-changelog/git_email.py: Likewise.
            * gcc-changelog/git_repository.py: Likewise.
            * gcc-changelog/test_email.py: Likewise.
            * gcc-changelog/test_patches.txt: Likewise.

commit b7c47eee95a2c7cc9589874793604506720d8ca3
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Jan 7 00:18:46 2021 +0000

    Daily bump.

commit b82d7465fb347eef804038269d36985878711fbf
Author: Tobias Burnus <tobias@codesourcery.com>
Date:   Tue Apr 14 13:57:52 2020 +0200

    [Fortran] Fix name conflict check for use-assoc (PR 92736)
    
            * module.c (gfc_match_use): Fix name-conflict check for use-associating
            the same symbol again in a submodule.
    
            * gfortran.dg/use_rename_10.f90: New.
            * gfortran.dg/use_rename_11.f90: New.
    
    (cherry picked from commit 36c3edb1e39c74e2705efac738a389b5597d9d88)

commit 9c7a3bf73df4581c8ea9a4db507c290524e91cd5
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Wed Jan 6 12:06:41 2021 +0100

    Fix PR testsuite/90806 on the 9 branch
    
    gcc/ChangeLog:
            PR testsuite/90806
            Backport from mainline
                2019-07-10  Marc Glisse  <marc.glisse@inria.fr>
    
            * wide-int.h (wi::lshift): Reject negative values for the fast path.

commit f5b4858e5aa403b712430aff9f6940ead04af0d1
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Jan 6 00:19:08 2021 +0000

    Daily bump.

commit 45300bef458d46c04734dc602722cb54b9b795bf
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Jan 5 00:18:53 2021 +0000

    Daily bump.

commit 2bfcf6011a6cdce0439e3d1b94bcb5fcf078f4c2
Author: Harald Anlauf <anlauf@gmx.de>
Date:   Fri Jan 1 18:55:41 2021 +0100

    PR fortran/96381 - invalid read in gfc_find_derived_vtab
    
    An invalid declaration of a CLASS instance can lead to an internal state
    with inconsistent attributes during parsing that needs to be handled with
    sufficient care when processing subsequent statements.  Avoid a lookup of
    the vtab entry for such cases.
    
    gcc/fortran/ChangeLog:
    
            * class.c (gfc_find_vtab): Add check on attribute is_class.
    
    (cherry picked from commit d816b0c144d15e6570eb5b124b9f3ccbe3d40082)

commit b7be64f9079dee9f326c791bcec1897047ae0de5
Author: Tobias Burnus <tobias@codesourcery.com>
Date:   Thu Dec 17 10:39:09 2020 +0100

    Fortran: Delay vtab generation until after parsing [PR92587]
    
    gcc/fortran/ChangeLog:
    
            PR fortran/92587
            * match.c (gfc_match_assignment): Move gfc_find_vtab call from here ...
            * resolve.c (gfc_resolve_code): ... to here.
    
    gcc/testsuite/ChangeLog:
    
            PR fortran/92587
            * gfortran.dg/finalize_37.f90: New test.
    
    (cherry picked from commit ba9fa684053917a07bfa8f4742da0e196e72b9a2)

commit 101873f243237de4d868af95b89120a48cf86f6e
Author: Paul Thomas <pault@gcc.gnu.org>
Date:   Mon Jan 4 14:42:10 2021 +0000

    This patch fixes PR96320. See the explanatory comment in the testcase.
    
    2021-01-04  Paul Thomas  <pault@gcc.gnu.org>
    
    gcc/fortran
            PR fortran/96320
            * interface.c (gfc_check_dummy_characteristics): If a module
            procedure arrives with assumed shape in the interface and
            deferred shape in the procedure itself, update the latter and
            copy the lower bounds.
    
    gcc/testsuite/
            PR fortran/96320
            * gfortran.dg/module_procedure_4.f90 : New test.

commit f448af69b208ba95496748c4596a22d11b1a09b9
Author: Paul Thomas <pault@gcc.gnu.org>
Date:   Mon Jan 4 08:15:18 2021 +0000

    Fortran: Fix scalarization of constant expressions. [PR94246].
    
    2021-01-04  Paul Thomas  <pault@gcc.gnu.org>
    
    gcc/fortran
            PR fortran/94246
            * expr.c (scalarize_intrinsic_call): Remove the error checking.
            Make a copy of the expression to be simplified and only replace
            the original if the simplification succeeds.
    
    gcc/testsuite/
            PR fortran/94246
            * gfortran.dg/bessel_5_redux.f90 : New test.

commit d0b3fd419c4d6c77b5f31cec22edbc4d688de5d6
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Jan 4 00:18:43 2021 +0000

    Daily bump.

commit 0124a9af406da81301778ffdd91bc2aef1b6601e
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Jan 3 00:18:35 2021 +0000

    Daily bump.

commit 6770d499240e575d1c421f319d887a9ceeed04e8
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Jan 2 00:18:28 2021 +0000

    Daily bump.

commit 25ded800995fbd864e3dcd60e9b87870f6b27688
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Jan 1 00:18:29 2021 +0000

    Daily bump.

commit 608ac6041d1bf94ec36df58427c8641ed974ee68
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Dec 31 00:18:32 2020 +0000

    Daily bump.

commit 4b00a7598278a79f44372ddf21ba76e321d349f1
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Dec 30 00:18:42 2020 +0000

    Daily bump.

commit fe37f4aac179e8a7489fa5492dd56dce95f094b2
Author: Harald Anlauf <anlauf@gmx.de>
Date:   Fri Dec 25 15:40:39 2020 +0100

    PR fortran/93685 - ICE in gfc_constructor_append_expr, at fortran/constructor.c:135
    
    Fix handling of F2018 enhancements to DATA statements that allows
    initialization of pointer components to derived types, and adjust error
    handling for the CHARACTER case.
    
    gcc/fortran/ChangeLog:
    
            * data.c (gfc_assign_data_value): Restrict use of
            create_character_initializer to constant initializers.
            * trans-expr.c (gfc_conv_initializer): Ensure that character
            initializer is constant, otherwise fall through to get the same
            error handling as for non-character cases.
    
    gcc/testsuite/ChangeLog:
    
            * gfortran.dg/pr93685_1.f90: New test.
            * gfortran.dg/pr93685_2.f90: New test.
    
    (cherry picked from commit 6e36772ba6a8173318c173508bd3254e4140b726)

commit d8d1358a4a6978273d482ab0769ee613c62acc6b
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Sun Oct 11 15:36:13 2020 +0100

    libobjc, Darwin : Fix powerpc encoding regression.
    
    This corrects a typo in the recipe for the special type alignment
    rules that are used for 32bit powerpc Darwin platforms.
    
    libobjc/ChangeLog:
    
            * encoding.c (_darwin_rs6000_special_round_type_align):
            Use DFMode in the emulation of the special round type.
    
    (cherry picked from commit dcd9800fcd42489034c0774247eb898d79b1ea2d)

commit e1f0f6eea7d55f8b5539f2d585dfb75c6721992e
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Sat Nov 21 09:06:03 2020 +0000

    Darwin, libgfortran : Do not use environ directly from the library.
    
    On macOS / Darwin, the environ variable can be used directly in the
    code of an executable, but cannot be used in the code of a shared
    library (i.e. libgfortran.dylib), in this case.
    
    In such cases, the  function _NSGetEnviron should be called to get
    the address of 'environ'.
    
    libgfortran/ChangeLog:
    
            * intrinsics/execute_command_line.c (environ): Use
            _NSGetEnviron to get the environment pointer on Darwin.
    
    (cherry picked from commit a3454130760bf51b76495663c60ac6dffbe3d130)

commit f2d3dc43d6b8b3549a0d83b278305c4042d570df
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Dec 29 00:18:43 2020 +0000

    Daily bump.

commit 5012380fe157d03d6066e4d615fdbfcb4084de84
Author: Uros Bizjak <ubizjak@gmail.com>
Date:   Mon Dec 28 23:52:59 2020 +0100

    i386: Fix __builtin_rint with FE_DOWNWARD rounding direction [PR96793]
    
    x86_expand_rint expander uses x86_sse_copysign_to_positive, which
    is unable to change the sign from - to +.  When FE_DOWNWARD rounding
    direction is in effect, the expanded sequence that involves subtraction
    can trigger x - x = -0.0 special rule.  x86_sse_copysign_to_positive
    fails to change the sign of the intermediate value, assumed to always
    be positive, back to positive.
    
    The patch adds one extra fabs that strips the sign from the intermediate
    value when flag_rounding_math is in effect.
    
    2020-12-28  Uroš Bizjak  <ubizjak@gmail.com>
    
    gcc/
            PR target/96793
            * config/i386/i386.c (ix86_expand_rint):
            Remove the sign of the intermediate value for flag_rounding_math.
    
    gcc/testsuite/
            PR target/96793
            * gcc.target/i386/pr96793-2.c: New test.

commit 9db58db5b3986531475968dd383f13a3f925d7ae
Author: Paul Thomas <pault@gcc.gnu.org>
Date:   Thu Aug 20 18:17:59 2020 +0100

    This patch fixes PRs 96100 and 96101.
    
    2020-08-20  Paul Thomas  <pault@gcc.gnu.org>
    
    gcc/fortran
            PR fortran/96100
            PR fortran/96101
            * trans-array.c (get_array_charlen): Tidy up the evaluation of
            the string length for array constructors. Avoid trailing array
            references. Ensure string lengths of deferred length components
            are set. For parentheses operator apply string  length to both
            the primary expression and the enclosed expression.
    
    gcc/testsuite/
            PR fortran/96100
            PR fortran/96101
            * gfortran.dg/char_length_23.f90: New test.
    
    (cherry picked from commit 300ef2fcc10e98359d14654be23bbb84a5d141e1)

commit f7c9f203a73a311d01fdb44f8bf47f6bf99bb02e
Author: Piotr Kubaj <pkubaj@FreeBSD.org>
Date:   Wed Dec 16 22:26:18 2020 +0000

    rs6000: Add support for powerpc64le-unknown-freebsd
    
    This implements support for powerpc64le architecture on FreeBSD.  Since
    we don't have powerpcle (32-bit), I did not add support for powerpcle
    here. This remains to be changed if there is powerpcle support in the
    future.
    
    2020-12-15  Piotr Kubaj  <pkubaj@FreeBSD.org>
    
    gcc/
            * config.gcc (powerpc*le-*-freebsd*): Add.
            * configure.ac (powerpc*le-*-freebsd*): Ditto.
            * configure: Regenerate.
            * config/rs6000/freebsd64.h (ASM_SPEC_COMMON): Use ENDIAN_SELECT.
            (DEFAULT_ASM_ENDIAN): Add little endian support.
            (LINK_OS_FREEBSD_SPEC64): Ditto.
    
    (cherry picked from commit 2a4183234a45ba28db5ce16cf3ccdd70cdef3b7c)

commit bfe4f9f83d9ea94db96c943b884f2c3340a239b2
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Dec 28 00:18:36 2020 +0000

    Daily bump.

commit 6a5fa636d322b10ae53b8f2b52aaf566cb566e86
Author: Uros Bizjak <ubizjak@gmail.com>
Date:   Sun Dec 27 20:54:14 2020 +0100

    i386: Fix __builtin_trunc with FE_DOWNWARD rounding direction [PR96793]
    
    x86_expand_truncdf_32 expander uses x86_sse_copysign_to_positive, which
    is unable to change the sign from - to +.  When FE_DOWNWARD rounding
    direction is in effect, the expanded sequence that involves subtraction
    can trigger x - x = -0.0 special rule.  x86_sse_copysign_to_positive
    fails to change the sign of the intermediate value, assumed to always
    be positive, back to positive.
    
    The patch adds one extra fabs that strips the sign from the intermediate
    value when flag_rounding_math is in effect.
    
    2020-12-27  Uroš Bizjak  <ubizjak@gmail.com>
    
    gcc/
            PR target/96793
            * config/i386/i386.c (ix86_expand_truncdf_32):
            Remove the sign of the intermediate value for flag_rounding_math.
    
    gcc/testsuite/
            PR target/96793
            * gcc.target/i386/pr96793-1.c: New test.

commit a07cb501cd984a8dc8a26b68214c8141001ba747
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Dec 27 00:18:25 2020 +0000

    Daily bump.

commit 96a2c794eb8c4e214de730c71036128b7ea57280
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Dec 26 00:18:22 2020 +0000

    Daily bump.

commit dba421da877fa20779835366f74148f35aaa9a76
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Dec 25 00:18:29 2020 +0000

    Daily bump.

commit 2435878321b053aebb2e2a886465662199542875
Author: Roman Zhuykov <zhroma@ispras.ru>
Date:   Thu Dec 24 19:42:14 2020 +0300

    modulo-sched: Carefully process loop counter initialization [PR97421]
    
    Do not allow direct adjustment of pre-header initialization instruction for
    count register if is read in some instruction below in that basic block.
    
    gcc/ChangeLog:
    
            PR rtl-optimization/97421
            * modulo-sched.c (generate_prolog_epilog): Remove forward
            declaration, adjust last argument name and type.
            (const_iteration_count): Add bool pointer parameter to return
            whether count register is read in pre-header after its
            initialization.
            (sms_schedule): Fix count register initialization adjustment
            procedure according to what const_iteration_count said.
    
    gcc/testsuite/ChangeLog:
    
            PR rtl-optimization/97421
            * gcc.c-torture/execute/pr97421-1.c: New test.
            * gcc.c-torture/execute/pr97421-2.c: New test.
            * gcc.c-torture/execute/pr97421-3.c: New test.
    
    (cherry picked from commit 4eb8f93d026eaa1de9b4820337069f3ce3465cd0)

commit 38e0d26587e1de98d33c00c9577b13dc4787963c
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Dec 24 00:18:36 2020 +0000

    Daily bump.

commit ea8d2c77e11b7a27d29e2a438536dcd203c206a9
Author: Harald Anlauf <anlauf@gmx.de>
Date:   Thu Dec 17 10:31:55 2020 +0100

    PR fortran/98307 - Dependency check fails when using "allocatable"
    
    The dependency check for FORALL constructs already handled pointer
    components to derived types, but missed allocatables.  Fix that.
    
    gcc/fortran/ChangeLog:
    
            PR fortran/98307
            * trans-stmt.c (check_forall_dependencies): Extend dependency
            check to allocatable components of derived types.
    
    gcc/testsuite/ChangeLog:
    
            PR fortran/98307
            * gfortran.dg/forall_19.f90: New test.
    
    (cherry picked from commit c09deceb534b82ce144af3a345dcb06ab5e49ba4)

commit c40b640ebcef1aae78eaca56e04d204dda9e4cad
Author: Uros Bizjak <ubizjak@gmail.com>
Date:   Wed Dec 23 09:09:29 2020 +0100

    i386: Fix __builtin_floor with FE_DOWNWARD rounding direction [PR96793]
    
    x86_expand_floorceil expander uses x86_sse_copysign_to_positive, which
    is unable to change the sign from - to +.  When FE_DOWNWARD rounding
    direction is in effect, the expanded sequence that involves subtraction
    can trigger x - x = -0.0 special rule.  x86_sse_copysign_to_positive
    fails to change the sign of the intermediate value, assumed to always
    be positive, back to positive.
    
    The patch adds one extra fabs that strips the sign from the intermediate
    value when flag_rounding_math is in effect.
    
    2020-12-22  Uroš Bizjak  <ubizjak@gmail.com>
    
    gcc/
            PR target/96793
            * config/i386/i386.c (ix86_expand_floorceil):
            Remove the sign of the intermediate value for flag_rounding_math.
            (ix86_expand_floorceildf_32): Ditto.
    
    gcc/testsuite/
            PR target/96793
            * gcc.target/i386/pr96793.c: New test.

commit 66d3e6b8911b33c2aa0687a450c7093ce255452f
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Dec 23 00:18:31 2020 +0000

    Daily bump.

commit 25b33ea27b13437b500804e0195c5a1c6ed5818a
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Dec 22 00:18:37 2020 +0000

    Daily bump.

commit a6a15fc45e23b15dff1c17cc187bbf56e0f234e0
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Dec 21 00:18:29 2020 +0000

    Daily bump.

commit ac03093140bc1f32e900f6960c2ef8404faef457
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Dec 20 00:18:29 2020 +0000

    Daily bump.

commit 80ffeaec54da6afd2eb31245b1d4d42898a33051
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Dec 19 00:18:30 2020 +0000

    Daily bump.

commit 34f70625ce5cb8c045437719159510afc561bb19
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Dec 18 00:18:29 2020 +0000

    Daily bump.

commit b8301e0973f0cd17f99d60c9695d9a768b0e7238
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Dec 17 00:18:43 2020 +0000

    Daily bump.

commit 9894ea94114129f59d6799abc135ef213ad8f687
Author: Nathan Sidwell <nathan@acm.org>
Date:   Wed Dec 16 11:49:41 2020 -0800

    c++: Fix template parm ICE [PR 98297]
    
    I think this is nonsense code, we seem to be naming an instantiation
    of a template template parm.  But this fixes the ICE.  Perhaps we
    should diagnose the issue earlier?
    
            gcc/cp/
            * parser.c (cp_parser_elaborated_type_specifier): Test
            BOUND_TEMPLATE_TEMPLATE_PARM before checking for instantiation.
            gcc/testsuite/
            * g++.dg/template/pr98297.C: New.

commit 1be9347b81502322d47b1efca10d8845cf98b993
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Dec 16 00:18:26 2020 +0000

    Daily bump.

commit 85b55ae6e87bd5cf6a23175065f634614e96a243
Author: Iain Buclaw <ibuclaw@gdcproject.org>
Date:   Tue Dec 15 10:36:00 2020 +0100

    d: Fix ICE in gimplify_expr, at gimplify.c (PR98277)
    
    The DMD front-end shouldn't, but can sometimes leak manifest constants
    in the AST passed to the code generator.  To prevent this being an
    issue, the setting of DECL_INITIAL has been moved to the point where the
    CONST_DECL is used, rather than in the declaration handler.
    
    gcc/d/ChangeLog:
    
            PR d/98277
            * decl.cc (DeclVisitor::visit (VarDeclaration *)): Move setting of
            DECL_INITIAL for manifest constants to ...
            (get_symbol_decl): ... here.
    
    gcc/testsuite/ChangeLog:
    
            PR d/98277
            * gdc.dg/pr98277.d: New test.
    
    (cherry picked from commit 36c9a3fe3f3c200ad3937d00d339b7269cf07adb)

commit 0a143997d86b2669b9e4d035dede20d1505a9921
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Dec 15 00:18:37 2020 +0000

    Daily bump.

commit a356432379b1630ac953fc11e5f2dd53be40004e
Author: Wilco Dijkstra <wdijkstr@arm.com>
Date:   Thu Dec 3 18:40:34 2020 +0000

    AArch64: Add support for --with-tune
    
    Add support for --with-tune. Like --with-cpu and --with-arch, the argument is
    validated and transformed into a -mtune option to be processed like any other
    command-line option.  --with-tune has no effect if a -mcpu or -mtune option
    is used. The validating code didn't allow --with-cpu=native, so explicitly
    allow that.
    
    Co-authored-by:  Delia Burduv  <delia.burduv@arm.com>
    
    Bootstrap OK, regress pass, OK to commit?
    
    2020-09-03  Wilco Dijkstra  <wdijkstr@arm.com>
    
    gcc/
            * config.gcc (aarch64*-*-*): Add --with-tune. Support --with-cpu=native.
            * config/aarch64/aarch64.h (OPTION_DEFAULT_SPECS): Add --with-tune.
    
    gcc/testsuite/
            * lib/target-supports.exp (check_effective_target_tune_cortex_a76): New
            effective target test.
            * gcc.target/aarch64/with-tune-config.c: New test.
            * gcc.target/aarch64/with-tune-march.c: Likewise.
            * gcc.target/aarch64/with-tune-mcpu.c: Likewise.
            * gcc.target/aarch64/with-tune-mtune.c: Likewise.

commit e074841107e04cc6141bd3922dfcddac52447095
Author: Sebastian Pop <spop@amazon.com>
Date:   Thu Dec 3 17:35:18 2020 +0000

    disable --with-{cpu,arch,tune}-32
    
    gcc/
            * config.gcc (aarch64*-*-*): Remove --with-{cpu,arch,tune}-32 flags.

commit a199f82b3e48466f496f24b6f87bb69cb79fd642
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Dec 14 09:03:52 2020 +0000

    Daily bump.

commit 954c8c3e969a936005cd6a21f30372f210e05b5d
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Dec 13 00:18:13 2020 +0000

    Daily bump.

commit 1349cbd01328452013acc584512e15dff7625713
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Dec 12 00:18:30 2020 +0000

    Daily bump.

commit 342be4dce16630575e2de21dbeec4baaed7a143a
Author: Harald Anlauf <anlauf@gmx.de>
Date:   Sun Nov 29 23:23:16 2020 +0100

    PR fortran/98017 - Suspected regression using PACK
    
    When substituting a parameter variable of type character, the character
    length was reset to 1.  Fix this by copying the length.
    
    gcc/fortran/ChangeLog:
    
            * expr.c (simplify_parameter_variable): Fix up character length
            after copying an array-valued expression.
    
    gcc/testsuite/ChangeLog:
    
            * gfortran.dg/pr98017.f90: New test.
    
    (cherry picked from commit bb67ad5cff58a707aaae645d4f45a913d8511c86)

commit 3ff352b4a1a2d94c98b72bf91df321462140e564
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Dec 11 18:24:52 2020 +0000

    Daily bump.

commit da6e672dc9bbedb993a5fea498954f0ca861b7ec
Author: Ed Schonberg <schonberg@adacore.com>
Date:   Thu Dec 10 22:26:57 2020 +0100

    Fix PR ada/98230
    
    It's a rather curious malfunction of the 'Mod attribute applied to the
    variable of a loop whose upper bound is dynamic.
    
    gcc/ada/ChangeLog:
            PR ada/98230
            * exp_attr.adb (Expand_N_Attribute_Reference, case Mod): Use base
            type of argument to obtain static bound and required size.
    
    gcc/testsuite/ChangeLog:
            * gnat.dg/modular6.adb: New test.

commit ece29230d95b86c5e2ee169c629c9e2988c6c1ec
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Dec 10 00:18:44 2020 +0000

    Daily bump.

commit 71e1f21abb541733eede4343755cfadaefee9718
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Dec 9 00:18:51 2020 +0000

    Daily bump.

commit 216670dbd6e83b4cc750ed886417f266d8a3ddf7
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Dec 8 00:18:48 2020 +0000

    Daily bump.

commit 16f8769c966732eabcc98ecf1eb190dcfee3bd94
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Mon Dec 7 10:48:06 2020 +0100

    Fix internal error on library-level type extended locally
    
    The compiler aborts on the local extension of a tagged type declared
    at library level, with a progenitor given by an interface type having
    a primitive that is a homograph of a primitive of the tagged type.
    
    gcc/ada/ChangeLog:
            * gcc-interface/trans.c (maybe_make_gnu_thunk): Return false if the
            target is local and thunk and target do not have the same context.

commit a1120b50ac3ddd929d4ea75e9c89bc2ce5981147
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Dec 7 00:18:21 2020 +0000

    Daily bump.

commit 9a77f24a427229c81a9118d6710b9df6307a54e2
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Dec 6 00:18:47 2020 +0000

    Daily bump.

commit ca242c8bdfe4ea6e925126574793691eb63dd856
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Dec 5 00:18:37 2020 +0000

    Daily bump.

commit 34e72e050bf4e23689af7061f6381b95339eb7fa
Author: Harald Anlauf <anlauf@gmx.de>
Date:   Thu Dec 3 20:33:22 2020 +0100

    PR fortran/95342 - ICE in gfc_match_subroutine, at fortran/decl.c:7913
    
    Add checks for NULL pointers before dereferencing them.
    
    gcc/fortran/ChangeLog:
    
            PR fortran/95342
            * decl.c (gfc_match_function_decl): Avoid NULL pointer dereference.
            (gfc_match_subroutine): Likewise.
    
    gcc/testsuite/ChangeLog:
    
            PR fortran/95342
            * gfortran.dg/pr95342.f90: New test.
    
    (cherry picked from commit 30b606bb9b9314010a446ea4bed3481632008f75)

commit d910ca0493455ffa84d4d934957cda1cb1588a25
Author: Richard Biener <rguenther@suse.de>
Date:   Fri Dec 4 11:39:44 2020 +0100

    tree-optimization/96075 - adjust testcase
    
    This adds an XFAIL when load-lanes can be used.
    
    2020-12-04  Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/96075
            * gcc.dg/vect/slp-46.c: Add XFAIL for load-lanes.
    
    (cherry picked from commit 0f50805bb3b0924bab94bd85203370703af50f26)

commit 7de6338ecabd5f803c11a7eb9997378a44fdfec5
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Dec 4 00:18:35 2020 +0000

    Daily bump.

commit 521c839fad4e4a30cdadda254fb3f07706285033
Author: Uros Bizjak <ubizjak@gmail.com>
Date:   Thu Dec 3 19:08:23 2020 +0100

    i386: Fix up ix86_md_asm_adjust for TImode [PR98086]
    
    ix86_md_asm_adjust assumes that dest_mode can be only [QHSD]Imode
    and nothing else.  The patch rewrites zero-extension part to use
    convert_to_mode to handle TImode and hypothetically even wider modes.
    
    2020-12-03  Uroš Bizjak  <ubizjak@gmail.com>
                Jakub Jelinek  <jakub@redhat.com>
    
    gcc/
            PR target/98086
            * config/i386/i386.c (ix86_md_asm_adjustmd): Rewrite
            zero-extension part to use convert_to_mode.
    
    gcc/testsuite/
            PR target/98086
            * gcc.target/i386/pr98086.c: New test.

commit 9f4ae405df5ca9f7292326789f78c740309fae3b
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Dec 3 00:18:48 2020 +0000

    Daily bump.

commit 53d76fe758a3e8e0c1f049e75030278427a8fe5d
Author: Richard Biener <rguenther@suse.de>
Date:   Mon Jul 6 16:26:50 2020 +0200

    tree-optimization/96075 - fix bogus misalignment calculation
    
    This fixes bogus misalignment calculation for negative steps
    since an assertion a previous comment indicated no longer holds:
    
          /* DR_STEP(dr) is the same as -TYPE_SIZE of the scalar type,
             otherwise we wouldn't be here.  */
    
    Thus the following replaces DR_STEP by -TYPE_SIZE.
    
    2020-07-06  Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/96075
            * tree-vect-data-refs.c (vect_compute_data_ref_alignment): Use
            TYPE_SIZE_UNIT of the vector component type instead of DR_STEP
            for the misalignment calculation for negative step.
    
            * gcc.dg/vect/slp-46.c: New testcase.
    
    (cherry picked from commit dccbf1e2a6e544f71b4a5795f0c79015db019fc3)

commit 505767905735a3c8f171c140108ee263f9fdcad6
Author: Richard Biener <rguenther@suse.de>
Date:   Fri Jul 31 08:41:56 2020 +0200

    middle-end/96369 - fix missed short-circuiting during range folding
    
    This makes the special case of constant evaluated LHS for a
    short-circuiting or/and explicit rather than doing range
    merging and eventually exposing a side-effect that shouldn't be
    evaluated.
    
    2020-07-31  Richard Biener  <rguenther@suse.de>
    
            PR middle-end/96369
            * fold-const.c (fold_range_test): Special-case constant
            LHS for short-circuiting operations.
    
            * c-c++-common/pr96369.c: New testcase.
    
    (cherry picked from commit 10231958fcfb13bc4847729eba21470c101b4a88)

commit 165ae61a9f7e484cd9cc1ad09f477ecad59c77e9
Author: Richard Biener <rguenther@suse.de>
Date:   Fri Nov 13 11:31:22 2020 +0100

    tree-optimization/97812 - fix range query in VRP assert discovery
    
    This makes sure to properly extend the input range before seeing
    whether it fits the target.
    
    2020-11-13  Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/97812
            * tree-vrp.c (register_edge_assert_for_2): Extend the range
            according to its sign before seeing whether it fits.
    
            * gcc.dg/torture/pr97812.c: New testcase.
    
    (cherry picked from commit dcfd302a79a5e2ea3bb16fc4fc45a5ee31cc0eab)

commit f720a0d776252aac3002a0a9307a96465f1975bd
Author: Richard Biener <rguenther@suse.de>
Date:   Thu Oct 1 09:29:32 2020 +0200

    tree-optimization/97255 - missing vector bool pattern of SRAed bool
    
    SRA tends to use VIEW_CONVERT_EXPR when replacing bool fields with
    unsigned char fields.  Those are not handled in vector bool pattern
    detection causing vector true values to leak.  The following fixes
    this by turning those into b ? 1 : 0 as well.
    
    2020-10-01  Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/97255
            * tree-vect-patterns.c (vect_recog_bool_pattern): Also handle
            VIEW_CONVERT_EXPR.
    
            * g++.dg/vect/pr97255.cc: New testcase.
    
    (cherry picked from commit 36e691d3a62145fda1f4a1b3143d215cc113c10a)

commit f75352bdb139c40abb400746c03d9242a0c30bd6
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Fri Sep 18 15:05:53 2020 +0200

    testsuite: add another test for the rotate vectorization miscompilation
    
    This time with short and char where the used mask used to be larger
    than it should have been.
    
    2020-09-18  Jakub Jelinek  <jakub@redhat.com>
    
            PR tree-optimization/97081
            * gcc.dg/vect/pr97081-2.c: New test.
    
    (cherry picked from commit 3d3fe967b0961cb59f5df03ae2a55d83dc4bbd34)

commit 86b25a1a5e1956c30fe7eaee80ebf719b759d631
Author: Richard Biener <rguenther@suse.de>
Date:   Fri Sep 18 13:36:24 2020 +0200

    tree-optimization/97081 - fix wrong-code with vectorized shift
    
    This corrects the mask for creation of x << s | x >> (-x & mask)
    from a rotate x <<r s to use the precision of x.
    
    2020-09-18  Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/97081
            * tree-vect-patterns.c (vect_recog_rotate_pattern): Use the
            precision of the shifted operand to determine the mask.
    
            * gcc.dg/vect/pr97081.c: New testcase.
    
    (cherry picked from commit 9c9b88fdcff3520b2c4fb520c5d3b422eaa9a72f)

commit 92b6627874cc924eeed9084a09f09504e20b5387
Author: Richard Biener <rguenther@suse.de>
Date:   Thu Aug 27 10:02:22 2020 +0200

    tree-optimization/96579 - another special-operands fix in reassoc
    
    This makes sure to put special-ops expanded rhs left where
    expression rewrite expects it.
    
    2020-08-27  Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/96579
            * tree-ssa-reassoc.c (linearize_expr_tree): If we expand
            rhs via special ops make sure to swap operands.
    
            * gcc.dg/pr96579.c: New testcase.
    
    (cherry picked from commit ff7463172e564c5dd2432d7af8eaa0124cbd4af7)

commit a5fff78405c3bfea287434e7711c6f10a770cb0a
Author: Richard Biener <rguenther@suse.de>
Date:   Thu Jul 30 10:24:42 2020 +0200

    tree-optimization/96370 - make reassoc expr rewrite more robust
    
    In the face of the more complex tricks in reassoc with respect
    to negate processing it can happen that the expression rewrite
    is fooled to recurse on a leaf and pick up a bogus expression
    code.  The following patch makes the expression rewrite more
    robust in providing the expression code to it directly since
    it is the same for all operations in a chain.
    
    2020-07-30  Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/96370
            * tree-ssa-reassoc.c (rewrite_expr_tree): Add operation
            code parameter and use it instead of picking it up from
            the stmt that is being rewritten.
            (reassociate_bb): Pass down the operation code.
    
            * gcc.dg/pr96370.c: New testcase.
    
    (cherry picked from commit 2c558d2655cb22f472c83e8296b5cd2a92365cd3)

commit 6178c27b4bbea186305ecbfeb4b9939dece75a9d
Author: Richard Biener <rguenther@suse.de>
Date:   Fri Aug 7 10:16:05 2020 +0200

    tree-optimization/96514 - avoid if-converting control-altering calls
    
    This avoids if-converting when encountering control-altering calls.
    
    2020-08-07  Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/96514
            * tree-if-conv.c (if_convertible_bb_p): If the last stmt
            is a call that is control-altering, fail.
    
            * gcc.dg/pr96514.c: New testcase.
    
    (cherry picked from commit c3f94f5786a014515c09c7852db228c74adf51e5)

commit 56d71887c9013a6bf73c53c7dabc31d473328dc5
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Dec 2 00:18:41 2020 +0000

    Daily bump.

commit da7a7d4f0f978f7851efc9437501767e5cb30154
Author: Richard Biener <rguenther@suse.de>
Date:   Thu Nov 26 10:07:06 2020 +0100

    testsuite/98002 - fix gcc.dg/strncmp-2.c
    
    This makes sure not to free() memory we have mprotected to PROT_NONE
    by calling mprotect again with PROT_READ|PROT_WRITE.  This avoids
    crashing the allocator when in debug mode.
    
    2020-11-16  Richard Biener  <rguenther@suse.de>
    
            PR testsuite/98002
            * gcc.dg/strncmp-2.c: Call mprotect again before free.
    
    (cherry picked from commit 5b3a8fad18324cd38c221bdb0ae2b690fc82ede0)

commit 5005e6c2a8a8cacfd501fed16dc4ce3ee24e8b26
Author: Richard Biener <rguenther@suse.de>
Date:   Mon Oct 26 10:10:46 2020 +0100

    middle-end/97554 - avoid overflow in alloc size compute
    
    This avoids overflow in the allocation size computations in
    sbitmap_vector_alloc when the result exceeds 2GB.
    
    2020-10-26  Richard Biener  <rguenther@suse.de>
    
            PR middle-end/97554
            * sbitmap.c (sbitmap_vector_alloc): Use size_t for byte
            quantities to avoid overflow.
    
    (cherry picked from commit 50f9e1f4d458e36d306b2449c689e45492847f68)

commit d7026d80fef08199ffbbee909c4c8024235e7dcc
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Dec 1 00:18:36 2020 +0000

    Daily bump.

commit 6b7ab0e565d79a7e6ae5dbbf17a5eb4eafe56dc8
Author: Stam Markianos-Wright <stam.markianos-wright@arm.com>
Date:   Mon Nov 30 11:05:30 2020 +0000

    Backport of the patch for PR target/91816
    
    This is a patch for an issue where the compiler was generating a
    conditional branch in Thumb2, which was too far for b{cond} to handle.
    
    This backport also includes the subsequent fixes to the test in this
    patch.
    
    gcc/ChangeLog
    
            * config/arm/arm-protos.h: New function arm_gen_far_branch prototype.
            * config/arm/arm.c (arm_gen_far_branch): New function
            arm_gen_far_branch.
            * config/arm/arm.md: Update b<cond> for Thumb2 range checks.
    
    gcc/testsuite/ChangeLog
    
            * gcc.target/arm/pr91816.c: New test.

commit 90ed2b9e92fe62b7d4c11105f16e5ea0fd26c1a7
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Nov 30 00:18:26 2020 +0000

    Daily bump.

commit 06d68f2b8375c7109bc89980f31874ec087dc025
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Nov 29 00:18:21 2020 +0000

    Daily bump.

commit e6280f66297e5886a62dc5f1ae3c6b559868193b
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Sat Nov 28 12:54:48 2020 +0100

    Fix PR target/97939
    
    The little dance around 4096 that add/sub instructions do on the SPARC
    needs to be taken into account for the overflow arithmetic operations.
    It cannot be done for unsigned overflow, but it can be done for signed
    overflow.
    
    gcc/ChangeLog:
            PR target/97939
            * config/sparc/predicates.md (arith_double_add_operand): Comment.
            * config/sparc/sparc.md (uaddvdi4): Use arith_double_operand.
            (addvdi4): Use arith_double_add_operand.
            (addsi3): Remove useless attributes.
            (addvsi4): Use arith_add_operand.
            (*cmp_ccv_plus): Likewise and add second alternative accordingly.
            (*cmp_ccxv_plus): Likewise.
            (*cmp_ccv_plus_set): Likewise.
            (*cmp_ccxv_plus_set): Likewise.
            (*cmp_ccv_plus_sltu_set): Likewise.
            (usubvdi4): Use arith_double_operand.
            (subvdi4): Use arith_double_add_operand.
            (subsi3): Remove useless attributes.
            (subvsi4): Use arith_add_operand.
            (*cmp_ccv_minus): Likewise and add second alternative accordingly.
            (*cmp_ccxv_minus): Likewise.
            (*cmp_ccv_minus_set): Likewise.
            (*cmp_ccxv_minus_set): Likewise.
            (*cmp_ccv_minus_sltu_set): Likewise.
            (negsi2): Use register_operand.
            (unegvsi3): Likewise.
            (negvsi3) Likewise.
            (*cmp_ccnz_neg): Likewise.
            (*cmp_ccxnz_neg): Likewise.
            (*cmp_ccnz_neg_set): Likewise.
            (*cmp_ccxnz_neg_set): Likewise.
            (*cmp_ccc_neg_set): Likewise.
            (*cmp_ccxc_neg_set): Likewise.
            (*cmp_ccc_neg_sltu_set): Likewise.
            (*cmp_ccv_neg): Likewise.
            (*cmp_ccxv_neg): Likewise.
            (*cmp_ccv_neg_set): Likewise.
            (*cmp_ccxv_neg_set): Likewise.
            (*cmp_ccv_neg_sltu_set): Likewise.
    
    gcc/testsuite/ChangeLog:
            * gcc.target/sparc/overflow-6.c: New test.

commit 2d9acb94cb78956b8451bc01cdda275926f6a1c2
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Thu Nov 26 16:38:35 2020 +0100

    Fix PR target/96607
    
    After 15 years trying to find out what can go into the delay slot of
    the call to __tls_get_addr with the Solaris linker, it's now time to
    concede defeat and consider it as not to be filled.
    
    gcc/ChangeLog:
            PR target/96607
            * config/sparc/sparc-protos.h (eligible_for_call_delay): Delete.
            * config/sparc/sparc.c (eligible_for_call_delay): Likewise.
            * config/sparc/sparc.md (in_call_delay): Likewise.
            (tls_delay_slot): New attribute.
            (define_delay [call]): Use in_branch_delay.
            (tgd_call<P:mode>): Set type to call_no_delay_slot when
            tls_delay_slot is false.
            (tldm_call<P:mode>): Likewise.

commit 6fd4560b3fb89f2eb1c7d66ea953331e037ed28b
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Nov 28 00:18:35 2020 +0000

    Daily bump.

commit 11e0a9e68ed2cc99d5d9f45c8c07be4a28edd048
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Nov 27 12:48:07 2020 +0000

    Daily bump.

commit e45e65016754cf4bfc6c00cbbdca700f01f7c324
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Thu Nov 26 11:25:55 2020 +0000

    libstdc++: Fix undefined FILE* operations in test
    
    We only need to check that the constructor doesn't clear errno, so
    there's no need to use an invalid FILE* for that.
    
    libstdc++-v3/ChangeLog:
    
            PR libstdc++/98001
            * testsuite/ext/stdio_filebuf/char/79820.cc: Do not pass invalid
            FILE* to constructor.
    
    (cherry picked from commit 2762cb1df686fc1ebcee23c7c4f0f6e8bf5a6abc)

commit 25b61f935a8eca56c68c8587fc8915797250bb30
Author: Thomas Schwinge <thomas@codesourcery.com>
Date:   Wed Nov 25 20:36:55 2020 +0100

    Don't create location wrapper nodes within OpenACC clauses
    
    This fixes a GCC 11, 10, 9 regression introduced by commit
    dfd7fdca2ac17d8b823a16700525824ca312ade0 (Subversion r267272) "C++: more
    location wrapper nodes (PR c++/43064, PR c++/43486)".  But: this isn't
    intending to blame David, because back then, the problem hasn't been visible in
    the testsuite (or else I'm sure would've been addressed right away) because of
    our all dear friend: missing testsuite coverage.  Thus, for GCC 8, I'm likewise
    enhancing the testsuite, without the C++ front end code changes.
    
    I actually had presumed that there may be an issue for OpenACC:
    <http://mid.mail-archive.com/874lb9qr2u.fsf@euler.schwinge.homeip.net>, so here
    we are, two years (and many "wasted" hours...) later...
    
            gcc/cp/
            * parser.c (cp_parser_omp_var_list_no_open): Assert that array
            section's 'low_bound', 'length' are not location wrapper nodes.
            (cp_parser_oacc_all_clauses, cp_parser_oacc_cache): Instantiate
            'auto_suppress_location_wrappers'.
            gcc/testsuite/
            * c-c++-common/goacc/cache-3-1.c: New.
            * c-c++-common/goacc/cache-3-2.c: Likewise.
            * c-c++-common/goacc/data-clause-1.c: Likewise.
            * c-c++-common/goacc/data-clause-2.c: Likewise.
            * c-c++-common/gomp/map-1.c: Adjust.
            * c-c++-common/gomp/map-2.c: Likewise.
            * g++.dg/goacc/cache-3-1.C: New.
            * g++.dg/goacc/cache-3-2.C: Likewise.
            * g++.dg/goacc/data-clause-1.C: Likewise.
            * g++.dg/goacc/data-clause-2.C: Likewise.
            * g++.dg/gomp/map-1.C: Adjust.
            * g++.dg/gomp/map-2.C: Likewise.
    
    Reported-by: Sandra Loosemore <sandra@codesourcery.com>
    (cherry picked from commit c0c7270cc4efd896fe99f8ad5409dbef089a407f)

commit 1e89a236a2e761fb73556086c85561364e480ebf
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Nov 26 00:18:43 2020 +0000

    Daily bump.

commit a03fa173f60c66889f84da947a62f5b1b42cdf07
Author: Thomas Schwinge <thomas@codesourcery.com>
Date:   Wed Nov 25 11:41:45 2020 +0100

    Add 'g++.dg/gomp/map-{1,2}.C'
    
            gcc/testsuite/
            * g++.dg/gomp/map-1.C: New.
            * g++.dg/gomp/map-2.C: Likewise.
            * c-c++-common/gomp/map-1.c: Adjust.
            * c-c++-common/gomp/map-2.c: Likewise.
    
    (cherry picked from commit 1049e5408fa343b5bf0a6380212a8ec8dfe2b6fc)

commit 1cb1c9e62f92ad674976b0da8cc46d7350d79a05
Author: Thomas Schwinge <thomas@codesourcery.com>
Date:   Wed Nov 25 13:03:52 2020 +0100

    Fix templatized C++ OpenACC 'cache' directive ICEs
    
    This has been broken forever, whoops...
    
            gcc/cp/
            * pt.c (tsubst_omp_clauses): Handle 'OMP_CLAUSE__CACHE_'.
            (tsubst_expr): Handle 'OACC_CACHE'.
            gcc/testsuite/
            * c-c++-common/goacc/cache-1.c: Update.
            * c-c++-common/goacc/cache-2.c: Likewise.
            * g++.dg/goacc/cache-1.C: New.
            * g++.dg/goacc/cache-2.C: Likewise.
            libgomp/
            * testsuite/libgomp.oacc-c++/cache-1.C: New.
            * testsuite/libgomp.oacc-c-c++-common/cache-1.c: Update.
    
    (cherry picked from commit 0cab70604cfda30bc64351b39493ef884ff7ba10)

commit 8476cfe5ab12b83107f43fc5a95a3aaee558d6cc
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Nov 25 09:35:57 2020 +0000

    Daily bump.

commit b22f1b34c492d2c63f3d8f2fb98022796da6d1c7
Author: Martin Liska <mliska@suse.cz>
Date:   Wed Nov 25 07:56:57 2020 +0100

    changelog: fix parsing of a revert commit
    
    contrib/ChangeLog:
    
            * gcc-changelog/git_commit.py: Use revert_regex instead
            of string prefix.  Convert sets to literals.

commit 196716c10bcd4074c404cc8f13bf8d9b31c76238
Author: Jason Merrill <jason@redhat.com>
Date:   Fri Nov 20 15:20:45 2020 -0500

    dwarf2: ICE with local class in unused function [PR97918]
    
    Here, since we only mention bar<B>, we never emit debug information for it.
    But we do emit debug information for H<J>::h, so we need to refer to the
    debug info for bar<B>::J even though there is no bar<B>.  We deal with this
    sort of thing in dwarf2out with the limbo_die_list; parentless dies like J
    get attached to the CU at EOF.  But here, we were flushing the limbo list,
    then generating the template argument DIE for H<J> that refers to J, which
    adds J to the limbo list, too late to be flushed.  So let's flush a little
    later.
    
    gcc/ChangeLog:
    
            PR c++/97918
            * dwarf2out.c (dwarf2out_early_finish): flush_limbo_die_list
            after gen_scheduled_generic_parms_dies.
    
    gcc/testsuite/ChangeLog:
    
            PR c++/97918
            * g++.dg/debug/localclass2.C: New test.

commit 19323ea3e9344eb773f8fe872eadbe4f1ac6461f
Author: Jason Merrill <jason@redhat.com>
Date:   Wed Jun 3 23:50:06 2020 -0400

    c++: Fix FE devirt with diamond inheritance [PR95158]
    
    This started breaking in GCC 8 because of the fix for PR15272; after that
    change, we (correctly) remember the lookup from template parsing time that
    found Base::foo through the non-dependent MiddleB base, and so we overlook
    the overrider in MiddleA.  But given that, the devirtualization condition
    from the fix for PR59031 is insufficient; we know that d has to be a
    Derived, and we found Base::foo in Base, but forcing a non-virtual call
    gets the wrong function.
    
    Fixed by removing the PR59031 code, and instead looking up the overrider in
    BINFO_VIRTUALS.
    
    gcc/cp/ChangeLog:
    
            PR c++/95158
            * class.c (lookup_vfn_in_binfo): New.
            * call.c (build_over_call): Use it.
            (build_new_method_call_1): Don't set LOOKUP_NONVIRTUAL.
            * cp-tree.h (resolves_to_fixed_type_p): Add default argument.
            (lookup_vfn_in_binfo): Declare.
    
    gcc/testsuite/ChangeLog:
    
            PR c++/95158
            * g++.dg/template/virtual5.C: New test.

commit b5eabef5daa1393763f2f6df6562d0c4c8ef63ab
Author: Thomas Schwinge <thomas@codesourcery.com>
Date:   Fri Nov 6 09:51:16 2020 +0100

    [testsuite] Emit 'warning' instead of 'error' diagnostics for 'dg-optimized', 'dg-missed'
    
    The diagnostics produced by 'dg-optimized', 'dg-missed' aren't error
    diagnostics (fatal, meaning: causes compilation to fail) but rather warning
    diagnostics (non-fatal, doesn't cause compilation to fail).  Thus, same as
    'dg-message', these should use 'saved-dg-warning' instead of 'saved-dg-error',
    which then prints: "(test for *warnings*, line [...]) instead of currently:
    "(test for *errors*, line [...])".
    
    This is a small bug-fix for commit ed2d9d3720adef3a260b8a55e17e744352a901fc
    "dumpfile.c: use prefixes other than 'note: ' for
    MSG_{OPTIMIZED_LOCATIONS|MISSED_OPTIMIZATION}", which added 'dg-optimized',
    'dg-missed'.
    
            gcc/testsuite/
            * lib/gcc-dg.exp (dg-optimized, dg-missed): Use 'saved-dg-warning'
            instead of 'saved-dg-error'.
    
    (cherry picked from commit 54f72078fc05b865601645edafbc6b21701ea546)

commit c71d97549d4dca17d452b4a47e406c5f6b2a1a56
Author: Thomas Schwinge <thomas@codesourcery.com>
Date:   Fri Nov 6 09:18:06 2020 +0100

    [testsuite] Enable column location checking for 'dg-optimized', 'dg-missed'
    
    'process-message' would like the 'msgprefix' argument without trailing space.
    
    This is a small bug-fix for commit ed2d9d3720adef3a260b8a55e17e744352a901fc
    "dumpfile.c: use prefixes other than 'note: ' for
    MSG_{OPTIMIZED_LOCATIONS|MISSED_OPTIMIZATION}", which added 'dg-optimized',
    'dg-missed'.
    
            gcc/testsuite/
            * lib/gcc-dg.exp (dg-optimized, dg-missed): Fix 'process-message'
            call.
            * gcc.dg/vect/nodump-vect-opt-info-1.c: Demonstrate.
            * gcc.dg/vect/nodump-vect-opt-info-2.c: Likewise.
    
    (cherry picked from commit 24b553d0f73ffea2551a77c67859ad6fe44110a6)

commit 18023fa6225509ce1a91101b61df32116a7249ee
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Nov 24 00:18:43 2020 +0000

    Daily bump.

commit 23114fd9ba06f315276dfbc0dd5decbadfb423de
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Nov 23 00:18:22 2020 +0000

    Daily bump.

commit fe03562f2ad614df74f38f13c3e3bf187440b9f7
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Nov 22 00:18:21 2020 +0000

    Daily bump.

commit fc6c39c207c114fdf182685fc8d35fca8f2bb229
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Nov 21 00:18:25 2020 +0000

    Daily bump.

commit c368cd5d88521ecf63e793f50bf8e69792577894
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Nov 20 00:18:36 2020 +0000

    Daily bump.

commit 9c78c3426bebb3978be133ffc55e5766370cb7e5
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Nov 19 00:18:28 2020 +0000

    Daily bump.

commit 83ded159c9685fc2faf4cb8bd490098eee3fc67a
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Nov 18 00:18:35 2020 +0000

    Daily bump.

commit e56eee08489ca23f28d863cbf59562c0fc40b307
Author: Sebastian Pop <spop@amazon.com>
Date:   Tue Nov 17 18:56:15 2020 +0000

    add --with-{cpu,arch,tune}-{32,64} as alias flags for --with-{cpu,arch,tune}
    
    gcc/
            * config.gcc: add configure flags --with-{cpu,arch,tune}-{32,64}
            as alias flags for --with-{cpu,arch,tune} on AArch64.
            * doc/install.texi: Document new flags for aarch64.
    
    (cherry picked from commit 61ef34c503443dadc0744c5150256b90d138db0a)

commit 600ef5614b28a267a7ad288528c0f90a9e4c95dd
Author: Sebastian Pop <spop@amazon.com>
Date:   Tue Nov 17 16:00:51 2020 +0000

    add --with-tune configure flag
    
    fixes a configure error on Arm64 when passing --with-tune=... to configure:
    ```
    This target does not support --with-tune.
    Valid --with options are: abi cpu arch
    ```
    The missing flag sets target tuning to a different value than generic tuning.
    
    gcc/
            * config.gcc: Add --with-tune to AArch64 configure flags.
    
    (cherry picked from commit 04dedd18141ccf42e59f7f5f0abc3b86dd63bdb9)

commit cbc9dab25fb807278d2e09ec3e89e466385c9fce
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Mon May 4 13:34:23 2020 +0100

    libstdc++: Make pmr::synchronized_pool_resource work without libpthread (PR 94936)
    
    I implicitly assumed that programs using pmr::synchronized_pool_resource
    would also be using multiple threads, and so the weak symbols in
    gthr-posix.h would be resolved by linking to libpthread. If that isn't
    true then it crashes when trying to use pthread_key_create.
    
    This commit makes the pool resource check __gthread_active_p() before
    using thread-specific data, and just use a single set of memory pools
    when there's only a single thread.
    
            PR libstdc++/94936
            * src/c++17/memory_resource.cc (synchronized_pool_resource::_TPools):
            Add comment about single-threaded behaviour.
            (synchronized_pool_resource::_TPools::move_nonempty_chunks()): Hoist
            class member access out of loop.
            (synchronized_pool_resource::synchronized_pool_resource())
            (synchronized_pool_resource::~synchronized_pool_resource())
            (synchronized_pool_resource::release()): Check __gthread_active_p
            before creating and/or deleting the thread-specific data key.
            (synchronized_pool_resource::_M_thread_specific_pools()): Adjust
            assertions.
            (synchronized_pool_resource::do_allocate(size_t, size_t)): Add fast
            path for single-threaded case.
            (synchronized_pool_resource::do_deallocate(void*, size_t, size_t)):
            Likewise. Return if unable to find a pool that owns the allocation.
            * testsuite/20_util/synchronized_pool_resource/allocate_single.cc:
            New test.
            * testsuite/20_util/synchronized_pool_resource/cons_single.cc: New
            test.
            * testsuite/20_util/synchronized_pool_resource/release_single.cc: New
            test.
    
    (cherry picked from commit ec40967f1323069da3a5a45286f71fa4f80926df)

commit 7e785f4c7643dbf5c4ae8cf02e2c148429adbfcf
Author: Tamar Christina <tamar.christina@arm.com>
Date:   Wed Oct 28 19:13:27 2020 +0000

    AArch64: Skip test for pr97535 on ILP32 since it can't express the range.
    
    I am excluding the test from ILP32 since the goal of the test is to test
    truncations of large numbers above INT_MAX.
    
    gcc/testsuite/ChangeLog:
    
            PR target/97535
            * gcc.target/aarch64/pr97535.c: Exclude ILP32.
    
    (cherry picked from commit 3dcd47389b16f48dcf5512b9ebba15af5c0be948)

commit 9d65095e72502c12903e202cfe2e1fc58140522a
Author: Tamar Christina <tamar.christina@arm.com>
Date:   Tue Oct 27 16:30:31 2020 +0000

    AArch64: Fix overflow in memcopy expansion on aarch64.
    
    Currently the inline memcpy expansion code for AArch64 is using a signed int
    to hold the number of elements to copy.  When you giver give it a value larger
    than INT_MAX it will overflow.
    
    The overflow causes the maximum number of instructions we want to expand to
    check to fail since this assumes an unsigned number.
    
    This patch changes the maximum isns arithmetic to be unsigned HOST_WIDE_INT.
    
    note that the calculation *must* remained signed as the memcopy issues
    overlapping unaligned copies.  This means the pointer must be moved back and
    so you need signed arithmetic.
    
    gcc/ChangeLog:
    
            PR target/97535
            * config/aarch64/aarch64.c (aarch64_expand_cpymem): Use unsigned
            arithmetic in check.
    
    gcc/testsuite/ChangeLog:
    
            PR target/97535
            * gcc.target/aarch64/pr97535.c: New test.
    
    (cherry picked from commit 0f801e0b6cc9f67c9a8983127e23161f6025c5b6)

commit c52868904b784f5a90db6cf347edba81d14cf921
Author: Monk Chiang <monk.chiang@sifive.com>
Date:   Fri Nov 13 19:35:11 2020 -0800

    PR target/97682 - Fix to reuse t1 register between call address and epilogue.
    
      - When expanding the call pattern, choose t1 register be a jump register.
        Epilogue also uses a t1 register to adjust Stack point. The call pattern
        and epilogue will initial t1 twice, if both are generated in the same
        function. The call pattern will emit 'la t1,symbol' and 'jalr t1'instructions.
        Epilogue also emits 'li t1,4096' and 'addi sp,sp,t1' instructions.
        But li and addi instructions will be placed between la and jalr instructions.
        The la instruction will be removed by some optimizations,
        because t1 register define twice, the first define instruction look
        likes duplicate.
    
      - To resolve this issue, Prologue and Epilogue use the t0 register
        be a temporary register, the call pattern use the t1 register be
        a temporary register.
    
    gcc/
    2020-11-13  Monk Chiang  <monk.chiang@sifive.com>
    
            PR target/97682
            * config/riscv/riscv.h (RISCV_PROLOGUE_TEMP_REGNUM): Change register
            to t0.
            (RISCV_CALL_ADDRESS_TEMP_REGNUM): New Marco, define t1 register.
            (RISCV_CALL_ADDRESS_TEMP): Use it for call instructions.
            * config/riscv/riscv.c (riscv_legitimize_call_address): Use
            RISCV_CALL_ADDRESS_TEMP.
            (riscv_compute_frame_info): Change temporary register to t0 form t1.
            (riscv_trampoline_init): Adjust comment.
    
    gcc/testsuite/
    2020-11-13  Monk Chiang  <monk.chiang@sifive.com>
    
            PR target/97682
            * g++.target/riscv/pr97682.C: New test.
            * gcc.target/riscv/interrupt-3.c: Check register for t0.
            * gcc.target/riscv/interrupt-4.c: Likewise.
    
    (cherry picked from commit 207de83922bda8707aa33d6a2185e691116377e7)

commit 6abef270285f80bad01f7682c54dcd641ee26a4a
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Nov 17 00:18:25 2020 +0000

    Daily bump.

commit a27067c70b7fe79b9d1fdacf9d7fa39a6556f401
Author: Cui,Lili <lili.cui@intel.com>
Date:   Fri Nov 13 14:20:31 2020 +0800

    Put PREFETCHW back to march=broadwell
    
    PREFETCHW should be both in march=broadwell and march=silvermont.
    I move PREFETCHW from march=broadwell to march=silvermont in previous
    patch.
    
    gcc/ChangeLog:
    
            * config/i386/i386.h: Add PREFETCHW to march=broadwell.
            * doc/invoke.texi: Put PREFETCHW back to relation arch.

commit e1a08689ce27cc7c676b05594ef956726a9777bf
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Nov 16 00:18:25 2020 +0000

    Daily bump.

commit ba616f85556822933eb4ac80f3586f7e1c9153d8
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Nov 15 00:18:21 2020 +0000

    Daily bump.

commit 83a51f1af92e5537da3729eb78efb67b615307b4
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Nov 14 00:18:33 2020 +0000

    Daily bump.

commit 62c2d527307d8adce31f5c9ca6e19e15b2866b83
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Thu Nov 12 10:29:21 2020 +0000

    libstdc++: Fix __numeric_traits_integer<__int20> [PR 97798]
    
    The expression used to calculate the maximum value for an integer type
    assumes that the number of bits in the value representation is always
    sizeof(T) * CHAR_BIT. This is not true for the __int20 type on msp430,
    which has only 20 bits in the value representation but 32 bits in the
    object representation. This causes an integer overflow in a constant
    expression, which is ill-formed.
    
    This problem was already solved by DJ for std::numeric_limits<__int20>
    by generalizing the helper macros to use a specified number of bits
    instead of assuming sizeof(T) * CHAR_BIT. Then the INT_N_n types can
    specify the number of bits using the __GLIBCXX_BITSIZE_INT_N_n macros
    that the compiler defines.
    
    I'm using a slightly different approach here. I've replaced the helper
    macros entirely, and just expanded the calculations in the initializers
    for the static data members. By reordering the data members we can reuse
    __is_signed and __digits in the other initializers. This removes the
    repetition of expanding __glibcxx_signed(T) and __glibcxx_digits(T)
    multiple times in each initializer.
    
    The __is_integer_nonstrict trait now defines a new constant, __width,
    which is sizeof(T) * CHAR_BIT by default (defined as an enumerator so
    that no storage is needed for a static data member). By specializing
    __is_integer_nonstrict for the INT_N types that have padding bits, we
    can provide the correct width via the __GLIBCXX_BITSIZE_INT_N_n macros.
    
    The backport for the gcc-9 branch adds the __is_integer_nonstrict trait,
    which was not previously present on the branch at all.
    
    libstdc++-v3/ChangeLog:
    
            PR libstdc++/97798
            * include/ext/numeric_traits.h (__glibcxx_signed)
            (__glibcxx_digits, __glibcxx_min, __glibcxx_max): Remove
            macros.
            (__is_integer_nonstrict::__width): Define new constant.
            (__numeric_traits_integer): Define constants in terms of each
            other and __is_integer_nonstrict::__width, rather than the
            removed macros.
            (_GLIBCXX_INT_N_TRAITS): Macro to define explicit
            specializations for non-standard integer types.
    
    (cherry picked from commit 99f22a5ed91c7e4306b727f61c01484faf104115)

commit afa885d7d70985b9ea1ff673823892d9535013ef
Author: Patrick Palka <ppalka@redhat.com>
Date:   Mon Sep 21 20:48:23 2020 -0400

    libstdc++: Fix division by zero in std::sample
    
    This fixes a division by zero in the selection-sampling std::__sample
    overload when the input range is empty (and hence __unsampled_sz is 0).
    
    libstdc++-v3/ChangeLog:
    
            * include/bits/stl_algo.h (__sample): Exit early when the
            input range is empty.
            * testsuite/25_algorithms/sample/3.cc: New test.
    
    (cherry picked from commit 813ad9c4dd5a779f12ad2abf710c6e75a3117ef0)

commit 9df05884b3a30d32744a070d3fc5780b7323231a
Author: Patrick Palka <ppalka@redhat.com>
Date:   Wed Oct 7 10:49:00 2020 -0400

    c++: Distinguish alignof and __alignof__ in cp_tree_equal [PR97273]
    
    cp_tree_equal currently considers alignof the same as __alignof__, but
    these operators are semantically different ever since r8-7957.  In the
    testcase below, this causes the second static_assert to fail on targets
    where alignof(double) != __alignof__(double) because the specialization
    table (which uses cp_tree_equal as its equality predicate) conflates the
    two dependent specializations integral_constant<__alignof__(T)> and
    integral_constant<alignof(T)>.
    
    This patch makes cp_tree_equal distinguish between these two operators
    by inspecting the ALIGNOF_EXPR_STD_P flag.
    
    gcc/cp/ChangeLog:
    
            PR c++/88115
            PR libstdc++/97273
            * tree.c (cp_tree_equal) <case ALIGNOF_EXPR>: Return false if
            ALIGNOF_EXPR_STD_P differ.
    
    gcc/testsuite/ChangeLog:
    
            PR c++/88115
            PR libstdc++/97273
            * g++.dg/template/alignof3.C: New test.
    
    (cherry picked from commit 592fe221735bdaa375b1834dd49ce125d0b600d8)

commit 0db10534f2e3bf494846aa8f465b455467b7f6f7
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Nov 13 00:18:32 2020 +0000

    Daily bump.

commit 547d07637bf09d74543f688454ce53a4c5eecd47
Author: Tobias Burnus <tobias@codesourcery.com>
Date:   Thu Nov 12 16:39:58 2020 +0100

    Fortran: Fix function decl's location [PR95847]
    
    gcc/fortran/ChangeLog:
    
            PR fortran/95847
            * trans-decl.c (gfc_get_symbol_decl): Do not (re)set the location
            of an external procedure.
            (build_entry_thunks, generate_coarray_init, create_main_function,
            gfc_generate_function_code): Use fndecl's location in BIND_EXPR.
    
    gcc/testsuite/ChangeLog:
    
            PR fortran/95847
            * gfortran.dg/coverage.f90: New test.
    
    (cherry picked from commit 2d59593105d3b1e38e49f96b74fd81e4e5038c7f)

commit 5615ab38bdc62295924015733cd6623adf583bc9
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Nov 12 00:18:31 2020 +0000

    Daily bump.

commit d8157e053f397327a45851fd584f3e906770c629
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Wed Nov 11 15:08:16 2020 +0100

    Fix biased integer arithmetic
    
    The Ada compiler uses a biased representation when a size clause reserves
    fewer bits than normal either for the lower or for the upper bound.
    
    gcc/ada/ChangeLog:
            * gcc-interface/trans.c (build_binary_op_trapv): Convert operands
            to the result type before doing generic overflow checking.
            * gcc-interface/utils.c (can_materialize_object_renaming_p): Add
            pair of missing parentheses.
    
    gcc/testsuite/ChangeLog:
            * gnat.dg/bias2.adb: New test.

commit c797c85aedb8921235c203dc6813318dc63b8c5b
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Wed Nov 11 14:52:45 2020 +0100

    Fix segfault on elaboration of empty 1-element array at -O
    
    This is a rather obscure case where the elaboration of an empty array
    whose base type is an array type of length at most 1 goes awry when
    the code is compiled with optimization.
    
    gcc/ada/ChangeLog:
            * gcc-interface/trans.c (can_be_lower_p): Remove.
            (Regular_Loop_to_gnu): Add ENTRY_COND unconditionally if
            BOTTOM_COND is non-zero.
    
    gcc/testsuite/ChangeLog:
            * gnat.dg/opt89.adb: New test.

commit 286cc2e8a9fcf75dcc3db8285c08895d6f89fbaa
Author: liuhongt <hongtao.liu@intel.com>
Date:   Tue Nov 10 16:48:08 2020 +0800

    Fix missing defination of PTA_CLDEMOTE, PTA_MOVDIRI, PTA_MOVDIR64B.
    
    gcc/ChangeLog
            * config/i386/i386.c (ix86_option_override_internal):
            Handle PTA_CLDEMOTE, PTA_MOVDIRI, PTA_MOVDIR64B.
            * config/i386/i386.h (PTA_CLDEMOTE, PTA_MOVDIRI,
            PTA_MOVDIR64B.): Define.

commit c3c554432131c64ac264318713a216269d34edcd
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Nov 11 00:18:28 2020 +0000

    Daily bump.

commit ae03b42a69fa08a84a7b257f08b4f3bd46c7d530
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Nov 10 00:18:23 2020 +0000

    Daily bump.

commit c9769a6eee38c396b797cffd819957fa9f1926b1
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Thu Nov 5 17:26:13 2020 +0000

    libstdc++: Use non-throwing increment in recursive_directory_iterator [PR 97731]
    
    As described in the PR, the recursive_directory_iterator constructor
    calls advance(ec), but ec is a pointer so it calls _Dir::advance(bool).
    The intention was to either call advance() or advance(*ec) depending
    whether the pointer is null or not.
    
    This fixes the bug and renames the parameter to ecptr to make similar
    mistakes less likely in future.
    
    libstdc++-v3/ChangeLog:
    
            PR libstdc++/97731
            * src/filesystem/dir.cc (recursive_directory_iterator): Call the
            right overload of _Dir::advance.
            * testsuite/experimental/filesystem/iterators/97731.cc: New test.
    
    (cherry picked from commit 2f93a2a03a343a29f614a530d7657f1ed6347ed5)

commit 97dd08aa244af1e236dec54c014a3e03d34594d0
Author: Cui,Lili <lili.cui@intel.com>
Date:   Wed Nov 4 14:20:31 2020 +0800

    Enable MOVDIRI, MOVDIR64B, CLDEMOTE and WAITPKG for march=tremont
    
    1. Enable MOVDIRI, MOVDIR64B, CLDEMOTE and WAITPKG for march=tremont
    2. Move PREFETCHW from march=broadwell to march=silvermont.
    3. Add PREFETCHWT1 to march=knl
    
    gcc/ChangeLog:
    
    2020-11-09  Lili Cui  <lili.cui@intel.com>
    
            PR target/97685
            * config/i386/i386.h:
            (PTA_BROADWELL): Delete PTA_PRFCHW.
            (PTA_SILVERMONT): Add PTA_PRFCHW.
            (PTA_KNL): Add PTA_PREFETCHWT1.
            (PTA_TREMONT): Add PTA_MOVDIRI, PTA_MOVDIR64B, PTA_CLDEMOTE and PTA_WAITPKG.
            * doc/invoke.texi: Delete PREFETCHW for broadwell, skylake, knl, knm,
            skylake-avx512, cannonlake, icelake-client, icelake-server, cascadelake,
            cooperlake, tigerlake and sapphirerapids.
            Add PREFETCHW for silvermont, goldmont, goldmont-plus and tremont.
            Add XSAVEC and XSAVES for goldmont, goldmont-plus and tremont.
            Add MOVDIRI, MOVDIR64B, CLDEMOTE and WAITPKG for tremont.
            Add KEYLOCKER and HREST for alderlake.
            Add AMX-BF16, AMX-TILE, AMX-INT8 and UINTR for sapphirerapids.
            Add KEYLOCKER for tigerlake.

commit e19caccb41efc864cc08cc150ec66c7027757fc7
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Nov 9 00:18:24 2020 +0000

    Daily bump.

commit e4e39f3a114ebbed69c89a1d57da2053f281053d
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Nov 8 00:18:26 2020 +0000

    Daily bump.

commit 3216a013107d25f86ea190d49657d20d2e94d166
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Nov 7 00:18:38 2020 +0000

    Daily bump.

commit 9824022a0b818304b0679f59b19ce39e5fa9b0b9
Author: Peter Bergner <bergner@linux.ibm.com>
Date:   Fri Nov 6 16:49:37 2020 -0600

    rs6000: Use the correct minimized testcase
    
    Use the correct minimized test case source rather than the large test
    source.
    
    gcc/testsuite/
            * gcc.target/powerpc/pr64505.c: Run everywhere.  Use correct minimized
            test case.
    
    (cherry picked from commit bd7ed0974fe634e0001a6132528a76d24b5e024f)

commit 542b564343fdb896ede9c9d5e32d45dcd96b2a00
Author: Tobias Burnus <tobias@codesourcery.com>
Date:   Fri Nov 6 08:26:51 2020 +0100

    Fortran: Fix type-decl for PDT / wrong-code pdt_14.f03 issue [PR97652]
    
    Parameterized derived types are handled in a special way and start with 'Pdt'.
    If the 'P' is not uppercase, gfc_get_derived_type (which calls
    gfc_get_module_backend_decl) does not find the existing declaration and
    builds a new type. The middle end then sees those types as being different
    and nonalising, creating an endless loop for pdt_14.f03.
    
    gcc/fortran/ChangeLog:
    
            PR fortran/97652
            * module.c (mio_symbol): Fix symbol name for pdt_type.
    
    (cherry picked from commit c283a711c850efaab4fe3bca5ef7200eb854bba1)

commit fe640ed0039d1b3e1d54fb1f17b1f2365fb81e23
Author: Martin Liska <mliska@suse.cz>
Date:   Fri Nov 6 14:52:05 2020 +0100

    Sync gcc-changelog scripts.
    
    contrib/ChangeLog:
    
    2020-11-06  Martin Liska  <mliska@suse.cz>
    
            * gcc-changelog/git_commit.py: Sync.
            * gcc-changelog/git_email.py: Likewise.
            * gcc-changelog/git_repository.py: Likewise.
            * gcc-changelog/test_email.py: Likewise.
            * gcc-changelog/test_patches.txt: Likewise.
            * gcc-changelog/setup.cfg: New file.

commit 892c8c9fc5dc12e14678f20c3d6789499502d2f5
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Nov 6 00:18:28 2020 +0000

    Daily bump.

commit 82972dc3ec83b88280a830540e8127e2a45d61f0
Author: Martin Liska <mliska@suse.cz>
Date:   Tue Oct 13 10:09:47 2020 +0200

    ASAN: disable -Wno-stringop-overflow for 2 tests
    
    gcc/testsuite/ChangeLog:
    
            PR middle-end/97392
            * g++.dg/asan/asan_test.C: Disable -Wstringop-overflow.
            * gcc.dg/asan/pr80166.c: Likewise.
    
    (cherry picked from commit 8e0e9417ccda583a1bf05ff08e86fdffbec62b3e)
    (cherry picked from commit a79cb813205027576d47a27655198cec4b5cd046)

commit 88a72dbe1e56aaa36b31ab754f4808c5c028b92b
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Nov 5 00:18:34 2020 +0000

    Daily bump.

commit d1bcf0e3f4f9cbaa231eb459d593eab2e601de23
Author: Martin Liska <mliska@suse.cz>
Date:   Wed Nov 4 10:18:39 2020 +0100

    Remove duplicate ChangeLog entry.

commit c1a2868385ee5756a809b116f5d9fb8b1c61450d
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Nov 4 00:18:44 2020 +0000

    Daily bump.

commit e42cb1d48035b85a43adb202433ff0193c151410
Author: Richard Biener <rguenther@suse.de>
Date:   Tue Nov 3 10:24:02 2020 +0100

    testsuite/97688 - fix check_vect () with __AVX2__
    
    This fixes the cpuid check to always specify a subleaf zero
    which is required to detect AVX2 and doesn't hurt for level one.
    Without this fix we get zero runtime coverage when -mavx2 is
    specified.
    
    2020-11-03  Richard Biener  <rguenther@suse.de>
    
            PR testsuite/97688
            * gcc.dg/vect/tree-vect.h (check_vect): Fix the x86 cpuid
            check to always specify subleaf zero.
    
    (cherry picked from commit 8414529156e0bca37647c440c71beeca1d04ac86)

commit fc1af160fa18c7adeaf252f983a5184e87ccefa9
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Nov 3 00:18:23 2020 +0000

    Daily bump.

commit dd0b8347d45c22aaa481a8ab2dfdd06febcc8852
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Nov 2 20:54:57 2020 +0000

    Daily bump.

commit 8860822a91e2e90a5eae726a478cd5ffc0d1fbfa
Author: Thomas Schwinge <thomas@codesourcery.com>
Date:   Wed Oct 28 10:56:20 2020 +0100

    Simplify and enhance 'libgomp.oacc-c-c++-common/pr85486*.c' [PR85486]
    
    Avoid code duplication, and better test what we expect to happen.
    
            libgomp/
            PR target/85486
            * testsuite/libgomp.oacc-c-c++-common/pr85486-2.c: Simplify and enhance.
            * testsuite/libgomp.oacc-c-c++-common/pr85486-3.c: Likewise.
            * testsuite/libgomp.oacc-c-c++-common/pr85486.c: Likewise.
    
    (cherry picked from commit 79680c1d5cd3d89c2e7423e20dc8a6e1d6dc8151)

commit d824c5df1714403067f2a7170dd884887ce04712
Author: Thomas Schwinge <thomas@codesourcery.com>
Date:   Thu Oct 29 10:29:19 2020 +0100

    libgomp testsuite: tell warning from error diagnostics, etc. [PR80219, PR85303]
    
    This changes makes 'dg-warning', 'dg-error', 'dg-bogus', 'dg-message' behave as
    expected, and also enables use of relative line numbers as well as 'dg-line'.
    
            libgomp/
            PR testsuite/80219
            PR testsuite/85303
            * testsuite/lib/libgomp.exp (libgomp_init): Set
            'gcc_warning_prefix', 'gcc_error_prefix'.
    
    (cherry picked from commit 528507fa0314c75d1105890e4781a475c8badd7c)

commit b2593aa80448b9dfa90c878997ac2cb5cf979cfc
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Oct 30 00:18:21 2020 +0000

    Daily bump.

commit a62986155876293bf3b66f9d7eccbd485ca95b60
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Oct 29 00:18:51 2020 +0000

    Daily bump.

commit f35a7956d8791b604443f71b33ca50b4f513d570
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Oct 28 00:18:37 2020 +0000

    Daily bump.

commit c9e421e5f9bb4b62eee824ded5026f8d345e1da0
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Oct 27 00:18:16 2020 +0000

    Daily bump.

commit e84932fd59031be2f27cccbda1a3439aa48db3e5
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Oct 26 00:18:17 2020 +0000

    Daily bump.

commit b18bc6be5f579e05e27cfd09fc6ee0cae4090062
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Oct 25 00:18:22 2020 +0000

    Daily bump.

commit 8d3b261f250a3863d886ae845e47f235d301fb09
Author: Harald Anlauf <anlauf@gmx.de>
Date:   Sun Oct 18 20:15:26 2020 +0200

    PR libfortran/97063 - Wrong result for vector (step size is negative) * matrix
    
    The MATMUL intrinsic provided a wrong result for rank-1 times rank-2 array
    when a negative stride was used for addressing the elements of the rank-1
    array, because a check on strides was erroneously placed before the check
    on the rank.  Interchange order of checks.
    
    libgfortran/ChangeLog:
    
            * m4/matmul_internal.m4: Move check for rank-1 times rank-2 before
            checks on strides for rank-2 times rank-2.
            * generated/matmul_c10.c: Regenerated.
            * generated/matmul_c16.c: Likewise.
            * generated/matmul_c4.c: Likewise.
            * generated/matmul_c8.c: Likewise.
            * generated/matmul_i1.c: Likewise.
            * generated/matmul_i16.c: Likewise.
            * generated/matmul_i2.c: Likewise.
            * generated/matmul_i4.c: Likewise.
            * generated/matmul_i8.c: Likewise.
            * generated/matmul_r10.c: Likewise.
            * generated/matmul_r16.c: Likewise.
            * generated/matmul_r4.c: Likewise.
            * generated/matmul_r8.c: Likewise.
            * generated/matmulavx128_c10.c: Likewise.
            * generated/matmulavx128_c16.c: Likewise.
            * generated/matmulavx128_c4.c: Likewise.
            * generated/matmulavx128_c8.c: Likewise.
            * generated/matmulavx128_i1.c: Likewise.
            * generated/matmulavx128_i16.c: Likewise.
            * generated/matmulavx128_i2.c: Likewise.
            * generated/matmulavx128_i4.c: Likewise.
            * generated/matmulavx128_i8.c: Likewise.
            * generated/matmulavx128_r10.c: Likewise.
            * generated/matmulavx128_r16.c: Likewise.
            * generated/matmulavx128_r4.c: Likewise.
            * generated/matmulavx128_r8.c: Likewise.
    
    gcc/testsuite/ChangeLog:
    
            * gfortran.dg/matmul_20.f90: New test.
    
    (cherry picked from commit cd6cd6aed195b4ec7d652e8b41d60b60e174304e)

commit 412541a35e4c6def9baee17cbc3b6110df8cf640
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Oct 24 00:18:24 2020 +0000

    Daily bump.

commit 3fca9cad041097627a1db3b84598b155c204bc5a
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Oct 23 00:18:30 2020 +0000

    Daily bump.

commit a07af7753004e711d0db8d4e5620a4e8afc8f10c
Author: Andreas Krebbel <krebbel@linux.ibm.com>
Date:   Thu Oct 22 12:24:22 2020 +0200

    Fix PR97439
    
    decimal_real_maxval misses to set the sign flag in the REAL_VALUE_TYPE.
    
    gcc/ChangeLog:
    
            PR rtl-optimization/97439
            * dfp.c (decimal_real_maxval): Set the sign flag in the
            generated number.
    
    gcc/testsuite/ChangeLog:
    
            * gcc.dg/dfp/pr97439.c: New test.
    
    (cherry picked from commit e3f25eac67aee77af0b2038cd4d6cbd36d7f1030)

commit 4c1fd5efc20bff60bd446072bbcb51ed2b9d55d6
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Oct 22 08:30:32 2020 +0000

    Daily bump.

commit abaf301ce428713e544e0c99a873815bebe9e107
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Oct 21 00:18:23 2020 +0000

    Daily bump.

commit 1b454055b1d2c4bb806aca8a81d203a6b6762854
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Oct 20 00:18:19 2020 +0000

    Daily bump.

commit 77923ad01415f6e72af844cbef5227f5b5a9fb4b
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Mon Sep 21 14:28:58 2020 +0100

    libstdc++: Make std::assume_aligned a constexpr function [PR 97132]
    
    The cast from void* to T* in std::assume_aligned is not valid in a
    constexpr function. The optimization hint is redundant during constant
    evaluation anyway (the compiler can see the object and knows its
    alignment). Simply return the original pointer without applying the
    __builtin_assume_aligned hint to it when doing constant evaluation.
    
    libstdc++-v3/ChangeLog:
    
            PR libstdc++/97132
            * include/std/memory (assume_aligned): Do not use
            __builtin_assume_aligned during constant evaluation.
            * testsuite/20_util/assume_aligned/1.cc: Improve test.
            * testsuite/20_util/assume_aligned/97132.cc: New test.
    
    (cherry picked from commit f10ed928e2f8ecc2c859abff8f2f9296b11b8d95)

commit 5ea03b98ba07da37652cb071ae7c6e49a5bfb5b8
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Oct 19 00:18:17 2020 +0000

    Daily bump.

commit 8a762e43cabf9cabc394811536dcea18ed224266
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Oct 18 00:18:11 2020 +0000

    Daily bump.

commit fea6def784d448918b48116c65aeedb031e81297
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Oct 17 00:18:26 2020 +0000

    Daily bump.

commit 3faef34e9e0888ad82a115a5a7d775d299863c4f
Author: Martin Liska <mliska@suse.cz>
Date:   Thu Oct 15 14:57:31 2020 +0200

    IPA: compare VRP types.
    
    gcc/ChangeLog:
    
            PR ipa/97404
            * ipa-prop.c (struct ipa_vr_ggc_hash_traits):
            Compare types of VRP as we can merge ranges of different types.
    
    gcc/testsuite/ChangeLog:
    
            PR ipa/97404
            * gcc.c-torture/execute/pr97404.c: New test.
    
    (cherry picked from commit a86623902767122c71c7229150a8b8a79cbb3673)

commit 8a03074417bae793cf8e5a515e9b676db6731cee
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Oct 16 00:18:24 2020 +0000

    Daily bump.

commit 3de9bf7df48f4e6943ca2fcf463ea513f262f685
Author: Maciej W. Rozycki <macro@linux-mips.org>
Date:   Mon Oct 12 19:09:13 2020 +0100

    MIPS/libphobos: Fix switchcontext.S assembly for MIPS I ISA
    
    Correct MIPS I assembly build errors in switchcontext.S:
    
    .../libphobos/libdruntime/config/mips/switchcontext.S: Assembler messages:
    .../libphobos/libdruntime/config/mips/switchcontext.S:50: Error: opcode not supported on this processor: mips1 (mips1) `sdc1 $f20,(0*8-((6*8+4+(-6*8+4&7))))($sp)'
    
    etc., due to the use of the MIPS II LDC1 and SDC1 hardware instructions
    for FP register load and store operations.  Instead use the L.D and S.D
    generic assembly instructions, which are strict aliases for the LDC1 and
    SDC1 instructions respectively and produce identical machine code where
    the assembly for the MIPS II or a higher ISA has been requested, however
    they become assembly macros and expand to compatible sequences of LWC1
    and SWC1 hardware instructions where the assembly for the MIPS I ISA is
    in effect.
    
            libphobos/
            * libdruntime/config/mips/switchcontext.S [__mips_hard_float]:
            Use L.D and S.D generic assembly instructions rather than LDC1
            and SDC1 MIPS II hardware instructions.
    
    (cherry picked from commit 6f0a4ae1274cc41ee9d9a142af5e51e416a2c08d)

commit 12c9413228d2955126ff5c45194f8aacf1aa81f6
Author: Martin Liska <mliska@suse.cz>
Date:   Tue Oct 13 16:44:47 2020 +0200

    IPA: fix profile handling in IRA
    
    gcc/ChangeLog:
    
            PR ipa/97295
            * profile-count.c (profile_count::to_frequency): Move part of
            gcc_assert to STATIC_ASSERT.
            * regs.h (REG_FREQ_FROM_BB): Do not use count.to_frequency for
            a function that does not have count_max initialized.
    
    (cherry picked from commit 508e2d88a4c512e8b8685cf5ba201ad48e6bb58d)

commit e85a4a7fb1888ebc6480510e61e93a25b8387953
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Oct 15 00:18:27 2020 +0000

    Daily bump.

commit 823bdd057e7254bcffd504d6db455b124d051974
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Oct 14 00:18:14 2020 +0000

    Daily bump.

commit 90b787cfc897dea9fb8a8b01c88b39d68d05db9f
Author: Kyrylo Tkachov <kyrylo.tkachov@arm.com>
Date:   Thu Oct 8 15:10:57 2020 +0100

    AArch64: Add Neoverse N2 tuning model
    
    This is the GCC 9 patch for the Neoverse N2 tuning struct.
    It sets the AARCH64_EXTRA_TUNE_PREFER_ADVSIMD_AUTOVEC tune flag as well.
    
    Bootstrapped and tested on the branch.
    
    gcc/
            * config/aarch64/aarch64.c (neoversen2_tunings): Define.
            * config/aarch64/aarch64-cores.def (neoverse-n2): Use it.

commit b9c1ca3e2fc84b40dc2ab70d12064e3d0eb8abdd
Author: Kyrylo Tkachov <kyrylo.tkachov@arm.com>
Date:   Fri Oct 9 10:34:15 2020 +0100

    PR target/97349 AArch64: Incorrect types for some Neon vdupq_n_<...> intrinsics
    
    This patch fixes the PR by adjusting the input types of the intrinsic
    prototypes to the ones mandated by ACLE
    Turns out the tests in the testsuite were already using the correct
    ones, but implicit conversions hid the bug...
    
    Bootstrapped and tested on aarch64-none-linux-gnu.
    
    gcc/
            PR target/97349
            * config/aarch64/arm_neon.h (vdupq_n_p8, vdupq_n_p16,
            vdupq_n_p64, vdupq_n_s8, vdupq_n_s16, vdupq_n_u8, vdupq_n_u16):
            Fix argument type.
    
    gcc/testsuite/
            PR target/97349
            * gcc.target/aarch64/simd/pr97349.c: New test.
    
    (cherry picked from commit 8a3da2e6060ff0f61dae6aaada716e2c67f3d54f)

commit a2090e89888055f2ffc343a83711d829d6751151
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Oct 13 00:18:20 2020 +0000

    Daily bump.

commit 69e8d80dfb6bb0935c897e3e40c498a0a32c7ddb
Author: Iain Buclaw <ibuclaw@gdcproject.org>
Date:   Sun Oct 11 22:20:43 2020 +0200

    d: Fix alias protection being ignored if used before declaration.
    
    Fixes a symbol resolver bug where a private alias becomes public if used
    before its declaration.
    
    gcc/d/ChangeLog:
    
    2020-10-12  Iain Buclaw  <ibuclaw@gdcproject.org>
    
            * dmd/declaration.c (AliasDeclaration::aliasSemantic): Apply storage
            class and protection attributes.
    
    gcc/testsuite/ChangeLog:
    
    2020-10-12  Iain Buclaw  <ibuclaw@gdcproject.org>
    
            * gdc.test/fail_compilation/fail21001.d: New test.
            * gdc.test/fail_compilation/imports/fail21001b.d: New test.
            * gdc.test/fail_compilation/imports/issue21295ast_node.d: New test.
            * gdc.test/fail_compilation/imports/issue21295astcodegen.d: New test.
            * gdc.test/fail_compilation/imports/issue21295dtemplate.d: New test.
            * gdc.test/fail_compilation/imports/issue21295visitor.d: New test.
            * gdc.test/fail_compilation/issue21295.d: New test.
    
    (cherry picked from commit c3249210b0108b5fc2dc403e558ab63882293be4)

commit 6d71115ef69c41fc0ec8bccaa04fdaeef00bde96
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Oct 12 00:18:16 2020 +0000

    Daily bump.

commit c4fafd1bf728ebb38ff1db04c27719d6b588cee0
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Oct 11 00:18:14 2020 +0000

    Daily bump.

commit f157526fb5f50beb12fcd564c79891fc3a39bc17
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Oct 10 00:18:17 2020 +0000

    Daily bump.

commit f3327324f9f533c1798485b4789137893e2efd1b
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Oct 9 00:18:19 2020 +0000

    Daily bump.

commit 83967508034454425dfce7fe0ea33a153c34e7cb
Author: Harald Anlauf <anlauf@gmx.de>
Date:   Sun Oct 4 20:24:29 2020 +0200

    PR fortran/97272 - Wrong answer from MAXLOC with character arg
    
    The optional KIND argument to the MINLOC/MAXLOC intrinsic must not be
    passed to the library function, as the kind conversion of the result
    is treated explicitly elsewhere.
    
    gcc/fortran/ChangeLog:
    
            PR fortran/97272
            * trans-intrinsic.c (strip_kind_from_actual): Helper function for
            removal of KIND argument.
            (gfc_conv_intrinsic_minmaxloc): Ignore KIND argument here, as it
            is treated elsewhere.
    
    gcc/testsuite/ChangeLog:
    
            PR fortran/97272
            * gfortran.dg/pr97272.f90: New test.
    
    (cherry picked from commit 35d2c6b6e8a7448a84abbf967feeb78a29117014)

commit d4256c8a662a6a575463eb843aa3f378dac9f3c7
Author: Kyrylo Tkachov <kyrylo.tkachov@arm.com>
Date:   Tue Sep 3 08:38:08 2019 +0000

    Implement ACLE intrinsics for FRINT[32,64][Z,X]
    
    This patch implements the ACLE intrinsics to access the FRINT[32,64][Z,X] scalar[1] and vector[2][3] instructions
    from Armv8.5-a. These are enabled when the __ARM_FEATURE_FRINT macro is defined.
    
    They're added in a fairly standard way through builtins and unspecs at the RTL level.
    
            * config/aarch64/aarch64.md ("unspec"): Add UNSPEC_FRINT32Z,
            UNSPEC_FRINT32X, UNSPEC_FRINT64Z, UNSPEC_FRINT64X.
            (aarch64_<frintnzs_op><mode>): New define_insn.
            * config/aarch64/aarch64.h (TARGET_FRINT): Define.
            * config/aarch64/aarch64-c.c (aarch64_update_cpp_builtins): Define
            __ARM_FEATURE_FRINT when appropriate.
            * config/aarch64/aarch64-simd-builtins.def: Add builtins for frint32z,
            frint32x, frint64z, frint64x.
            * config/aarch64/arm_acle.h (__rint32zf, __rint32z, __rint64zf,
            __rint64z, __rint32xf, __rint32x, __rint64xf, __rint64x): Define.
            * config/aarch64/arm_neon.h (vrnd32z_f32, vrnd32zq_f32, vrnd32z_f64,
            vrnd32zq_f64, vrnd32x_f32, vrnd32xq_f32, vrnd32x_f64, vrnd32xq_f64,
            vrnd64z_f32, vrnd64zq_f32, vrnd64z_f64, vrnd64zq_f64, vrnd64x_f32,
            vrnd64xq_f32, vrnd64x_f64, vrnd64xq_f64): Define.
            * config/aarch64/iterators.md (VSFDF): Define.
            (FRINTNZX): Likewise.
            (frintnzs_op): Likewise.
    
            * gcc.target/aarch64/acle/rintnzx_1.c: New test.
            * gcc.target/aarch64/simd/vrndnzx_1.c: Likewise.

commit d5c6ea22fe6db1ee19a178941a8c7f8ff5d0538c
Author: Kyrylo Tkachov <kyrylo.tkachov@arm.com>
Date:   Wed Sep 30 12:01:23 2020 +0100

    PR target/97150 AArch64: 2nd parameter of unsigned Neon scalar shift intrinsics should be signed
    
    In this PR the second argument to the intrinsics should be signed but we
    use an unsigned one erroneously.
    The corresponding builtins are already using the correct types so it's
    just a matter of correcting the signatures in arm_neon.h
    
    gcc/
            PR target/97150
            * config/aarch64/arm_neon.h (vqrshlb_u8): Make second argument
            signed.
            (vqrshlh_u16): Likewise.
            (vqrshls_u32): Likewise.
            (vqrshld_u64): Likewise.
            (vqshlb_u8): Likewise.
            (vqshlh_u16): Likewise.
            (vqshls_u32): Likewise.
            (vqshld_u64): Likewise.
            (vshld_u64): Likewise.
    
    gcc/testsuite/
            PR target/97150
            * gcc.target/aarch64/pr97150.c: New test.
    
    (cherry picked from commit 2d8fbebdb1eaca8de557ab3052535a8e4b8f8972)
    (cherry picked from commit 11af9c329ae528abb8c69ae8fae96a0f3fc6ed87)

commit 18d980d94f8d7187ce30bf23ddd365fa54189c36
Author: Kyrylo Tkachov <kyrylo.tkachov@arm.com>
Date:   Wed Sep 30 12:00:20 2020 +0100

    PR target/96313 AArch64: vqmovun* return types should be unsigned
    
    In this PR we have the wrong return type for some intrinsics. It should
    be unsigned, but we implement it as signed.
    Fix this by adjusting the type qualifiers used when creating the
    builtins and fixing the type in the arm_neon.h intrinsic.
    With the adjustment in qualifiers we now don't need to cast the result
    when returning.
    
    Bootstrapped and tested on aarch64-none-linux-gnu.
    
    gcc/
            PR target/96313
            * config/aarch64/aarch64-simd-builtins.def (sqmovun): Use UNOPUS
            qualifiers.
            * config/aarch64/arm_neon.h (vqmovun_s16): Adjust builtin call.
            Remove unnecessary result cast.
            (vqmovun_s32): Likewise.
            (vqmovun_s64): Likewise.
            (vqmovunh_s16): Likewise.  Fix return type.
            (vqmovuns_s32): Likewise.
            (vqmovund_s64): Likewise.
    
    gcc/testsuite/
            PR target/96313
            * gcc.target/aarch64/pr96313.c: New test.
            * gcc.target/aarch64/scalar_intrinsics.c (test_vqmovunh_s16):
            Adjust return type.
            (test_vqmovuns_s32): Likewise.
            (test_vqmovund_s64): Likewise.
    
    (cherry picked from commit 135b043196b5575c690ef1e07bcbb49bf037c3a2)
    (cherry picked from commit 7d177b142dcbe841124fe023cb592914d4200e57)

commit 6d6b093133b4c676e8ed9f7752c707b211430bfa
Author: Alan Modra <amodra@gmail.com>
Date:   Thu Oct 1 19:14:09 2020 +0930

    [RS6000] ICE in decompose, at rtl.h:2282
    
    during RTL pass: fwprop1
    gcc.dg/pr82596.c: In function 'test_cststring':
    gcc.dg/pr82596.c:27:1: internal compiler error: in decompose, at rtl.h:2282
    
    -m32 gcc/testsuite/gcc.dg/pr82596.c fails along with other tests after
    applying rtx_cost patches, which exposed a backend bug.
    legitimize_address when presented with the following address
            (plus (reg) (const_int 0x7ffffffff))
    attempts to rewrite it as a high/low sum.  The low part is 0xffff, or
    -1, making the high part 0x80000000.  But this is no longer canonical
    for SImode.
    
            * config/rs6000/rs6000.c (rs6000_legitimize_address): Use
            gen_int_mode for high part of address constant.
    
    (cherry picked from commit 4c69e61f4307865b95151006e480ae2022b30454)

commit 4c591af5947efd6686c627de787d3e97c32a191f
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Thu Oct 8 00:05:53 2020 +0100

    libstdc++: Fix non-reserved name in header
    
    There's a "il" parameter in a std::seed_seq constructor in <random>
    which is only reserved since C++14.
    
    libstdc++-v3/ChangeLog:
    
            * include/bits/random.h (seed_seq(initializer_list<T>)): Rename
            parameter to use reserved name.
            * testsuite/17_intro/names.cc: Check "il".
    
    (cherry picked from commit 23f75da95f5e8e09e9fcbd5b0d2885e6c44739aa)

commit 0d8776b2d7ef2e5a643617db1ae08fe828f554bb
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Oct 8 00:18:24 2020 +0000

    Daily bump.

commit 7be480b6cddbd83826c19368be56b5feb8011894
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Oct 7 00:18:26 2020 +0000

    Daily bump.

commit 96b32c86f507f5391512a9cb5ec536e604472ea2
Author: Tobias Burnus <tobias@codesourcery.com>
Date:   Tue Oct 6 11:49:34 2020 +0200

    configure: Fix in-tree building of GMP on BSD [PR97302]
    
    ChangeLog:
            PR target/97302
            * configure.ac: Only set with_gmp to /usr/local
            if not building in tree.
            * configure: Regenerate.
    (cherry picked from commit c0d0a722da8583f74a0c192041be2f379cf487c1)

commit 972bc5c8e40cd7a7ca285304227e9ecfec7e2868
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Oct 6 00:18:24 2020 +0000

    Daily bump.

commit 6725de4e8376afefa7ee501ba7b31d74cbf4303d
Author: Alex Coplan <alex.coplan@arm.com>
Date:   Mon Oct 5 15:49:50 2020 +0100

    arm: Add missing part number for Neoverse V1
    
    This patch adds vendor and part numbers which were missing from the
    initial entry for Neoverse V1 in AArch32 GCC.
    
    gcc/ChangeLog:
    
            * config/arm/arm-cpus.in (neoverse-v1): Add missing vendor and
            part numbers.

commit 4a437d67c7fa0698d63d42275af6391daac53979
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Oct 5 00:18:08 2020 +0000

    Daily bump.

commit 99f2956cc745c0e49b55f45b0a4c6c53695b5199
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Oct 4 00:18:16 2020 +0000

    Daily bump.

commit fd808e9751cc6bf24b16ead7cd91b45c64207a5f
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Oct 3 00:18:27 2020 +0000

    Daily bump.

commit 54e50dc2d7633d1d5930f472aaeb4e52ba403ade
Author: Alex Coplan <alex.coplan@arm.com>
Date:   Fri Oct 2 16:09:06 2020 +0100

    arm: Add support for Neoverse N2 CPU
    
    This patch backports the AArch32 support for Arm's Neoverse N2 CPU to
    GCC 9.
    
    gcc/ChangeLog:
    
            * config/arm/arm-cpus.in (neoverse-n2): New.
            * config/arm/arm-tables.opt: Regenerate.
            * config/arm/arm-tune.md: Regenerate.
            * doc/invoke.texi: Document support for Neoverse N2.

commit ec3abe75d652f0c14165343922364a7f0f3d390a
Author: Kyrylo Tkachov <kyrylo.tkachov@arm.com>
Date:   Fri Oct 2 15:35:38 2020 +0100

    AArch64: Add Neoverse V1 tuning struct
    
    This GCC 9 patch duplicates the Neoverse N1 tuning struct that's
    currently used for Neoverse V1 and
    AARCH64_EXTRA_TUNE_PREFER_ADVSIMD_AUTOVEC tune flag to prefer Advanced
    SIMD over SVE autovectorisation.
    
    gcc/
            * config/aarch64/aarch64.c (neoversev1_tunings): Define.
            * config/aarch64/aarch64-cores.def (zeus): Use it.
            (neoverse-v1): Likewise.

commit 991a376015309ac9b413eeb97d94511908498e9a
Author: Martin Liska <mliska@suse.cz>
Date:   Fri Sep 25 10:53:26 2020 +0200

    GCOV: do not mangle .gcno files.
    
    gcc/ChangeLog:
    
            PR gcov-profile/97193
            * coverage.c (coverage_init): GCDA note files should not be
            mangled and should end in output directory.
    
    (cherry picked from commit f8dcbea5d2fb17dca3a7de97f15fc49997222365)

commit 7c55364eaaf5f882e80e8943e702081f9648f582
Author: Martin Liska <mliska@suse.cz>
Date:   Thu Oct 1 21:28:30 2020 +0200

    gcov: fix streaming of HIST_TYPE_IOR histogram type.
    
    gcc/ChangeLog:
    
            PR gcov-profile/64636
            * value-prof.c (stream_out_histogram_value): Allow negative
            values for HIST_TYPE_IOR.
    
    (cherry picked from commit 1921ebcaf6467996aede69e1bbe32400d8a20fe7)

commit 20f699a44492f2f43351d19849873d1112ffc7e0
Author: Martin Liska <mliska@suse.cz>
Date:   Mon Sep 21 16:26:10 2020 +0200

    gcov: fix streaming corruption
    
    gcc/ChangeLog:
    
            PR gcov-profile/97069
            * profile.c (branch_prob): Line number must be at least 1.
    
    gcc/testsuite/ChangeLog:
    
            PR gcov-profile/97069
            * g++.dg/gcov/pr97069.C: New test.
    
    (cherry picked from commit 6b4e8bf88f1172ce8561f57b12fb81063b21a78f)

commit 3f7059376b73df9d51b36dbbe47dc1793ff97a6b
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Oct 2 00:18:23 2020 +0000

    Daily bump.

commit 19870c2b458a5f13b8ccb31bae445e33ce37d64d
Author: Kyrylo Tkachov <kyrylo.tkachov@arm.com>
Date:   Thu Oct 1 17:23:56 2020 +0100

    AArch64: Add prefer_advsimd_autovec internal tune_flag
    
    I'd like to add a prefer_advsimd_autovec internal tune_flag that makes
    GCC pick Advanced SIMD over SVE for autovectorisation.
    No CPU tuning uses it yet, but I'd like to add this to the GCC 8 and 9
    branches only as SVE autovectorisation is less mature there and CPUs
    may want to prefer Advanced SIMD over SVE when tuning for performance.
    This patch provides a minimally invasive way of achieving that.
    
    Bootstrapped and tested on aarch64-none-linux-gnu.
    
    gcc/
            * config/aarch64/aarch64-tuning-flags.def
            (PREFER_ADVSIMD_AUTOVEC): Define.
            * config/aarch64/aarch64.c (aarch64_preferred_simd_mode): Use
            it.
            (aarch64_autovectorize_vector_sizes): Likewise.

commit 472396ebbca0aab0332232fc6a7054633059f143
Author: Kyrylo Tkachov <kyrylo.tkachov@arm.com>
Date:   Thu Oct 1 15:20:07 2020 +0100

    AArch64: Add rng feature to Neoverse V1
    
    This patch adds the +rng feature to the Neoverse V1 entry. It exists in
    the GCC 11 and 10 branches, but was missed out on GCC 9 and 8 as those
    didn't support the rng intrinsic then, but they do now.
    
    Bootstrapped and tested on aarch64-none-linux-gnu.
    gcc/
            * config/aarch64/aarch64-cores.def (zeus): Add AARCH64_FL_RNG to
            features.
            (neoverse-v1): Likewise.

commit b35353f96be5fb029ffa7073c3dbef46adbe683a
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Oct 1 11:04:56 2020 +0200

    s390: Fix up s390_atomic_assign_expand_fenv
    
    The following patch fixes
    -FAIL: gcc.dg/pr94780.c (internal compiler error)
    -FAIL: gcc.dg/pr94780.c (test for excess errors)
    -FAIL: gcc.dg/pr94842.c (internal compiler error)
    -FAIL: gcc.dg/pr94842.c (test for excess errors)
    on s390x-linux.  The fix is essentially the same as has been applied to many
    other targets (i386, aarch64, arm, rs6000, alpha, riscv).
    
    2020-10-01  Jakub Jelinek  <jakub@redhat.com>
    
            * config/s390/s390.c (s390_atomic_assign_expand_fenv): Use
            TARGET_EXPR instead of MODIFY_EXPR for the first assignments to
            fenv_var and old_fpc.  Formatting fixes.
    
    (cherry picked from commit 85516b71730d8f9401c34407ac3fadf5f1ebfc4e)

commit df52e2f8fc85e179cd7bc6dafee32b216d1ba7f6
Author: Alex Coplan <alex.coplan@arm.com>
Date:   Thu Oct 1 09:52:36 2020 +0100

    aarch64: Add support for Neoverse N2 CPU
    
    This patch backports the AArch64 support for Arm's Neoverse N2 CPU to
    GCC 9.
    
    gcc/ChangeLog:
    
            * config/aarch64/aarch64-cores.def: Add Neoverse N2.
            * config/aarch64/aarch64-tune.md: Regenerate.
            * doc/invoke.texi: Document AArch64 support for Neoverse N2.

commit 5420d2d0ffac26216ebeeed62eeeebd1f6d5a202
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Oct 1 00:18:24 2020 +0000

    Daily bump.

commit 05c3a208a19af25fbfd5c7cad8be12e23bf84cfa
Author: Kyrylo Tkachov <kyrylo.tkachov@arm.com>
Date:   Fri Sep 25 17:32:43 2020 +0100

    AArch64: Add Linux cpuinfo string for rng feature
    
    The Linux kernel has defined the cpuinfo string for the +rng feature, so
    this patch adds that to GCC so that -march=native can pick it up.
    Bootstrapped and tested on aarch64-none-linux-gnu.
    
    gcc/
            * config/aarch64/aarch64-option-extensions.def (rng): Add
            cpuinfo string.
    
    (cherry picked from commit 0d8f3f612d662ea3007c184a11ea5eb7d58760e7)

commit cbe1264d10f34d514cae5f002e0d717bbc8d32a3
Author: H.J. Lu <hjl.tools@gmail.com>
Date:   Wed Sep 23 12:11:45 2020 -0700

    x86: Use SET operation in MOVDIRI and MOVDIR64B
    
    Since MOVDIRI and MOVDIR64B write to memory, similar to UNSPEC_MOVNT,
    use SET operation in MOVDIRI and MOVDIR64B patterns with UNSPEC instead
    of UNSPECV.
    
    gcc/
    
            PR target/97184
            * config/i386/i386.md (UNSPECV_MOVDIRI): Renamed to ...
            (UNSPEC_MOVDIRI): This.
            (UNSPECV_MOVDIR64B): Renamed to ...
            (UNSPEC_MOVDIR64B): This.
            (movdiri<mode>): Use SET operation.
            (@movdir64b_<mode>): Likewise.
    
    gcc/testsuite/
    
            PR target/97184
            * gcc.target/i386/movdir64b.c: New test.
            * gcc.target/i386/movdiri32.c: Likewise.
            * gcc.target/i386/movdiri64.c: Likewise.
            * lib/target-supports.exp (check_effective_target_movdir): New.
    
    (cherry picked from commit 5521e8a629f8bee3a7778d69521d857496556d1f)

commit a8ee77ee592d3afa023d06740a337c0320499d8c
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Sep 30 00:18:18 2020 +0000

    Daily bump.

commit 97bbda2c7e29e39719278055bcc7b07a5e89eba3
Author: Hongyu Wang <hongyu.wang@intel.com>
Date:   Mon Sep 28 22:22:28 2020 +0000

    Add missing FSF copyright notes for x86 intrinsic headers.
    
    gcc/ChangeLog:
    
            PR target/97231
            * config/i386/pconfigintrin.h: Add FSF copyright notes.
            * config/i386/wbnoinvdintrin.h: Ditto.
    
    (cherry picked from commit d68f4d2ecb8ed6781e4e535d2abc498b1674d68a)

commit f6d4b96180adec4fc5ea34de6d268350b98bb4ab
Author: Alex Coplan <alex.coplan@arm.com>
Date:   Tue Sep 29 11:42:24 2020 +0100

    arm: Add support for Neoverse V1 CPU
    
    This patch backports the AArch32 support for Arm's Neoverse V1 CPU to
    GCC 9.
    
    gcc/ChangeLog:
    
            * config/arm/arm-cpus.in (neoverse-v1): New.
            * config/arm/arm-tables.opt: Regenerate.
            * config/arm/arm-tune.md: Regenerate.
            * doc/invoke.texi: Document AArch32 support for Neoverse V1.

commit 333a4fe84349fdea7d095fc7f605f8e2d86f4ec8
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Sep 29 00:18:35 2020 +0000

    Daily bump.

commit 3fa772a7acfea62a01fb36d1451c8be9c54ba7da
Author: Christophe Lyon <christophe.lyon@linaro.org>
Date:   Fri Sep 25 10:40:18 2020 +0000

    testsuite: [aarch64] Fix aarch64/advsimd-intrinsics/v{trn,uzp,zip}_half.c
    
    Since r11-3402 (g:65c9878641cbe0ed898aa7047b7b994e9d4a5bb1), the
    vtrn_half, vuzp_half and vzip_half started failing with
    
    vtrn_half.c:76:17: error: redeclaration of 'vector_float64x2' with no linkage
    vtrn_half.c:77:17: error: redeclaration of 'vector2_float64x2' with no linkage
    vtrn_half.c:80:17: error: redeclaration of 'vector_res_float64x2' with no linkage
    
    This is because r11-3402 now always declares float64x2 variables for
    aarch64, leading to a duplicate declaration in these testcases.
    
    The fix is simply to remove these now useless declarations.
    
    These tests are skipped on arm*, so there is no impact on that target.
    
    2020-09-25  Christophe Lyon  <christophe.lyon@linaro.org>
    
            gcc/testsuite/
            PR target/71233
            * gcc.target/aarch64/advsimd-intrinsics/vtrn_half.c: Remove
            declarations of vector, vector2, vector_res for float64x2 type.
            * gcc.target/aarch64/advsimd-intrinsics/vuzp_half.c: Likewise.
            * gcc.target/aarch64/advsimd-intrinsics/vzip_half.c: Likewise.
    
    (cherry picked from commit 8c775bf447e190024fa08c55e38db94dd013a393)

commit 803f597d3125bfd67d29a11c118e131353ee314e
Author: Kyrylo Tkachov <kyrylo.tkachov@arm.com>
Date:   Wed Sep 23 17:37:58 2020 +0100

    AArch64: Implement missing p128<->f64 reinterpret intrinsics
    
    This patch implements the missing reinterprets to and from poly128_t and
    float64x2_t.
    I've plugged in the appropriate testing in the advsimd-intrinsics.exp
    too.
    
    Bootstrapped and tested on aarch64-none-linux-gnu.
    Tested advsimd-intrinsics.exp on arm-none-eabi too to make sure arm
    testing isn't affected.
    
    gcc/
            PR target/71233
            * config/aarch64/arm_neon.h (vreinterpretq_f64_p128,
            vreinterpretq_p128_f64): Define.
    
    gcc/testsuite/
            PR target/71233
            * gcc.target/aarch64/advsimd-intrinsics/arm-neon-ref.h
            (clean_results): Add float64x2_t cleanup.
            (DECL_VARIABLE_128BITS_VARIANTS): Add float64x2_t variable.
            * gcc.target/aarch64/advsimd-intrinsics/vreinterpret_p128.c: Add
            testing of vreinterpretq_f64_p128, vreinterpretq_p128_f64.
    
    (cherry picked from commit 65c9878641cbe0ed898aa7047b7b994e9d4a5bb1)

commit 61291c4b7d429ddd12536732759bd56708e78e14
Author: Kyrylo Tkachov <kyrylo.tkachov@arm.com>
Date:   Wed Sep 23 12:02:29 2020 +0100

    AArch64: Implement missing vrndns_f32 intrinsic
    
    This patch implements the missing vrndns_f32 intrinsic. This operates on a scalar float32_t value.
    It can be mapped down to a __builtin_aarch64_frintnsf builtin.
    
    This patch does that.
    
    Bootstrapped and tested on aarch64-none-linux-gnu.
    
    gcc/
            PR target/71233
            * config/aarch64/aarch64-simd-builtins.def (frintn): Use BUILTIN_VHSDF_HSDF
            for modes.  Remove explicit hf instantiation.
            * config/aarch64/arm_neon.h (vrndns_f32): Define.
    
    gcc/testsuite/
            PR target/71233
            * gcc.target/aarch64/simd/vrndns_f32_1.c: New test.
    
    (cherry picked from commit 02b5377b3766804059b7824330d33d0e1cef2e5b)

commit 23b4d65ef54b9ad8eb5cca65b7412d46f35d913f
Author: Kyrylo Tkachov <kyrylo.tkachov@arm.com>
Date:   Wed Sep 23 11:07:50 2020 +0100

    AArch64: Implement missing _p64 intrinsics for vector permutes
    
    This patch implements some missing vector permute intrinsics operating on poly64x2_t types.
    They are implemented identically to their uint64x2_t brethren.
    
    Bootstrapped and tested on aarch64-none-linux-gnu.
    
    gcc/
            PR target/71233
            * config/aarch64/arm_neon.h (vtrn1q_p64, vtrn2q_p64, vuzp1q_p64,
            vuzp2q_p64, vzip1q_p64, vzip2q_p64): Define.
    
    gcc/testsuite/
            PR target/71233
            * gcc.target/aarch64/simd/trn_zip_p64_1.c: New test.
    
    (cherry picked from commit e8e818399d70c5a5a3d30a54d305c6e2b92e2c66)

commit 0d27e8eb8dc8ed28fdf4d6876d7f6f0610273198
Author: Kyrylo Tkachov <kyrylo.tkachov@arm.com>
Date:   Wed Sep 23 10:32:42 2020 +0100

    AArch64: Implement vldrq_p128 intrinsic
    
    This patch implements the missing vldrq_p128 intrinsic that just loads from the appropriate pointer.
    
    Bootstrapped and tested on aarch64-none-linux-gnu.
    
    gcc/
            PR target/71233
            * config/aarch64/arm_neon.h (vldrq_p128): Define.
    
    gcc/testsuite/
            PR target/71233
            * gcc.target/aarch64/simd/vldrq_p128_1.c: New test.
    
    (cherry picked from commit f2868e4bcff2c7b882d01231f039459c00e59d7b)

commit 9f7c4bb47c97aa6cd68bd48f6f2129e19f01c892
Author: Kyrylo Tkachov <kyrylo.tkachov@arm.com>
Date:   Wed Sep 23 10:29:17 2020 +0100

    AArch64: Implement vstrq_p128 intrinsic
    
    This patch implements the missing vstrq_p128 intrinsic.
    It just performs a store of the poly128_t argument to a memory location.
    
    Bootstrapped and tested on aarch64-none-linux-gnu.
    
    gcc/
            PR target/71233
            * config/aarch64/arm_neon.h (vstrq_p128): Define.
    
    gcc/testsuite/
            PR target/71233
            * gcc.target/aarch64/simd/vstrq_p128_1.c: New test.
    
    (cherry picked from commit d23ea1e865301cd45f14ccbdb0bca49251fde9e1)

commit 6f189fa29bc90c658ce1df33774a04d4956dcc27
Author: Kyrylo Tkachov <kyrylo.tkachov@arm.com>
Date:   Tue Sep 22 12:03:49 2020 +0100

    AArch64: Implement missing vcls intrinsics on unsigned types
    
    This patch implements some missing intrinsics that perform a CLS on unsigned SIMD types.
    
    Bootstrapped and tested on aarch64-none-linux-gnu.
    
    gcc/
            PR target/71233
            * config/aarch64/arm_neon.h (vcls_u8, vcls_u16, vcls_u32,
            vclsq_u8, vclsq_u16, vclsq_u32): Define.
    
    gcc/testsuite/
            PR target/71233
            * gcc.target/aarch64/simd/vcls_unsigned_1.c: New test.
    
    (cherry picked from commit 30957092db46d8798e632feefb5df634488dbb33)

commit 11874a0d4033908e596181a17dab5444271f892b
Author: Kyrylo Tkachov <kyrylo.tkachov@arm.com>
Date:   Tue Sep 22 12:00:38 2020 +0100

    AArch64: Implement missing vceq*_p* intrinsics
    
    This patch implements some missing vceq* intrinsics on poly types.
    The behaviour is to produce the appropriate CMEQ instruction as for the unsigned types.
    
    Bootstrapped and tested on aarch64-none-linux-gnu.
    
    gcc/
            PR target/71233
            * config/aarch64/arm_neon.h (vceqq_p64, vceqz_p64, vceqzq_p64): Define.
    
    gcc/testsuite/
    
            PR target/71233
            * gcc.target/aarch64/simd/vceq_poly_1.c: New test.
    
    (cherry picked from commit d4703be185b422f637deebd3bb9222a41c8023d6)

commit 48e274be62b924379541ae0321b82862f572b973
Author: Kyrylo Tkachov <kyrylo.tkachov@arm.com>
Date:   Tue Sep 22 11:58:36 2020 +0100

    AArch64: Implement poly-type vadd intrinsics
    
    This implements the vadd[p]_p* intrinsics.
    In terms of functionality they are aliases of veor operations on the relevant unsigned types.
    
    Bootstrapped and tested on aarch64-none-linux-gnu.
    
    gcc/
            PR target/71233
            * config/aarch64/arm_neon.h (vadd_p8, vadd_p16, vadd_p64, vaddq_p8,
            vaddq_p16, vaddq_p64, vaddq_p128): Define.
    
    gcc/testsuite/
            PR target/71233
            * gcc.target/aarch64/simd/vadd_poly_1.c: New test.
    
    (cherry picked from commit fa9ad35dae03dcb20c4ccb50ba1b351a8ab77970)

commit 0676e194c753a1959ea7f7a05761a26466148bda
Author: Mark Eggleston <markeggleston@gcc.gnu.org>
Date:   Mon Sep 28 12:04:43 2020 +0100

    Revert "Fortran  :  ICE in build_field PR95614"
    
    This reverts commit 7a8c40bca889785fc4664e5e11c430e31d297696.

commit d1b51d13d763db3efdf0152a273e4f06c098af5f
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Sep 28 00:18:12 2020 +0000

    Daily bump.

commit aa42c1ac24a0427a27aec19c483780662cd150b8
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Sun Sep 27 23:18:26 2020 +0200

    optabs: Don't reuse target for multi-word expansions if it overlaps operand(s) [PR97073]
    
    The following testcase is miscompiled on i686-linux, because
    we try to expand a double-word bitwise logic operation with op0
    being a (mem:DI u) and target (mem:DI u+4), i.e. partial overlap, and
    thus end up with:
            movl    4(%esp), %eax
            andl    u, %eax
            movl    %eax, u+4
    ! movl u+4, %eax optimized out
            andl    8(%esp), %eax
            movl    %eax, u+8
    rather than with the desired:
            movl    4(%esp), %edx
            movl    8(%esp), %eax
            andl    u, %edx
            andl    u+4, %eax
            movl    %eax, u+8
            movl    %edx, u+4
    because the store of the first word to target overwrites the second word of
    the operand.
    expand_binop for this (and several similar places) already check for target
    == op0 or target == op1, this patch just adds reg_overlap_mentioned_p calls
    next to it.
    Pedantically, at least for some of these it might be sufficient to force
    a different target if there is overlap but target is not rtx_equal_p to
    the operand (e.g. in this bitwise logical case, but e.g. not in the shift
    cases where there is reordering), though that would go against the
    preexisting target == op? checks and the rationale that REG_EQUAL notes in
    that case isn't correct.
    
    2020-09-27  Jakub Jelinek  <jakub@redhat.com>
    
            PR middle-end/97073
            * optabs.c (expand_binop, expand_absneg_bit, expand_unop,
            expand_copysign_bit): Check reg_overlap_mentioned_p between target
            and operand(s) and if it returns true, force a pseudo as target.
    
            * gcc.c-torture/execute/pr97073.c: New test.
    
    (cherry picked from commit a4b31d5807f2bc67c8999b3d53369cf2a5c6e1ec)

commit 7a8c40bca889785fc4664e5e11c430e31d297696
Author: Mark Eggleston <markeggleston@gcc.gnu.org>
Date:   Thu Jun 11 14:33:51 2020 +0100

    Fortran  :  ICE in build_field PR95614
    
    Local identifiers can not be the same as a module name.  Original
    patch by Steve Kargl resulted in name clashes between common block
    names and local identifiers.  A local identifier can be the same as
    a global identier if that identifier represents a common.  The patch
    was modified to allow global identifiers that represent a common
    block.
    
    2020-09-27  Steven G. Kargl  <kargl@gcc.gnu.org>
                Mark Eggleston  <markeggleston@gcc.gnu.org>
    
    gcc/fortran/
    
            PR fortran/95614
            * decl.c (gfc_get_common): Use gfc_match_common_name instead
            of match_common_name.
            * decl.c (gfc_bind_idents): Use gfc_match_common_name instead
            of match_common_name.
            * match.c : Rename match_common_name to gfc_match_common_name.
            * match.c (gfc_match_common): Use gfc_match_common_name instead
            of match_common_name.
            * match.h : Rename match_common_name to gfc_match_common_name.
            * resolve.c (resolve_common_vars): Check each symbol in a
            common block has a global symbol.  If there is a global symbol
            issue an error if the symbol type is known as is not a common
            block name.
    
    2020-09-27  Mark Eggleston  <markeggleston@gcc.gnu.org>
    
    gcc/testsuite/
    
            PR fortran/95614
            * gfortran.dg/pr95614_1.f90: New test.
            * gfortran.dg/pr95614_2.f90: New test.
    
    (cherry picked from commit e5a76af3a2f3324efc60b4b2778ffb29d5c377bc)

commit b61572eaf186aa2daa0c4b8deae21d5c3f21e367
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Sep 27 00:18:12 2020 +0000

    Daily bump.

commit f9b2251d584e47b323b01438fbedc9b7fc354cf3
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Sep 26 00:18:25 2020 +0000

    Daily bump.

commit 4fb606b503780b91ad79c203003dc41a32cfbab7
Author: Kyrylo Tkachov <kyrylo.tkachov@arm.com>
Date:   Mon Oct 21 10:52:05 2019 +0000

    Implement __rndr, __rndrrs intrinsics
    
    This patch implements the recently published[1] __rndr and __rndrrs
    intrinsics used to access the RNG in Armv8.5-A.
    The __rndrrs intrinsics can be used to reseed the generator too.
    They are guarded by the __ARM_FEATURE_RNG feature macro.
    A quirk with these intrinsics is that they store the random number in
    their pointer argument and return a status
    code if the generation succeeded.
    
    The instructions themselves write the CC flags indicating the success of
    the operation that we can then read with a CSET.
    Therefore this implementation makes use of the IGNORE indicator to the
    builtin expand machinery to avoid generating
    the CSET if its result is unused (the CC reg clobbering effect is still
    reflected in the pattern).
    I've checked that using unspec_volatile prevents undesirable CSEing of
    the instructions.
    
    [1] https://developer.arm.com/docs/101028/latest/data-processing-intrinsics
    
    gcc/
            PR target/71233
            * config/aarch64/aarch64.md (UNSPEC_RNDR, UNSPEC_RNDRRS):
            Define.
            (aarch64_rndr): New define_insn.
            (aarch64_rndrrs): Likewise.
            * config/aarch64/aarch64.h (AARCH64_ISA_RNG): Define.
            (TARGET_RNG): Likewise.
            * config/aarch64/aarch64-builtins.c (enum aarch64_builtins):
            Add AARCH64_BUILTIN_RNG_RNDR, AARCH64_BUILTIN_RNG_RNDRRS.
            (aarch64_init_rng_builtins): Define.
            (aarch64_init_builtins): Call aarch64_init_rng_builtins.
            (aarch64_expand_rng_builtin): Define.
            (aarch64_expand_builtin): Use IGNORE argument, handle
            RNG builtins.
            * config/aarch64/aarch64-c.c (aarch64_update_cpp_builtins):
            Define __ARM_FEATURE_RNG when TARGET_RNG.
            * config/aarch64/arm_acle.h (__rndr, __rndrrs): Define.
    
    gcc/testsuite/
            PR target/71233
            * gcc.target/aarch64/acle/rng_1.c: New test.

commit aea14213c850724cedfdfb65b2d678183e39047c
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Sep 25 00:18:27 2020 +0000

    Daily bump.

commit 3bec35d813cc706b3334bd0b0edbd51869b0f725
Author: H.J. Lu <hjl.tools@gmail.com>
Date:   Mon Sep 14 08:52:27 2020 -0700

    rtl_data: Add sp_is_clobbered_by_asm
    
    Add sp_is_clobbered_by_asm to rtl_data to inform backends that the stack
    pointer is clobbered by asm statement.
    
    gcc/
    
            PR target/97032
            * cfgexpand.c (asm_clobber_reg_kind): Set sp_is_clobbered_by_asm
            to true if the stack pointer is clobbered by asm statement.
            * emit-rtl.h (rtl_data): Add sp_is_clobbered_by_asm.
            * config/i386/i386.c (ix86_get_drap_rtx): Set need_drap to true
            if the stack pointer is clobbered by asm statement.
    
    gcc/testsuite/
    
            PR target/97032
            * gcc.target/i386/pr97032.c: New test.
    
    (cherry picked from commit 453a20c65722719b9e2d84339f215e7ec87692dc)

commit 6f06be1769d45359940c60517f9d55bedd3cb1f4
Author: Kyrylo Tkachov <kyrylo.tkachov@arm.com>
Date:   Tue Sep 3 08:40:30 2019 +0000

    Add support for __jcvt intrinsic
    
    This patch implements the __jcvt ACLE intrinsic [1] that maps down to the FJCVTZS [2] instruction from Armv8.3-a.
    No fancy mode iterators or nothing. Just a single builtin, UNSPEC and define_insn and the associate plumbing.
    This patch also defines __ARM_FEATURE_JCVT to indicate when the intrinsic is available.
    
    [1] https://developer.arm.com/docs/101028/latest/data-processing-intrinsics
    [2] https://developer.arm.com/docs/ddi0596/latest/simd-and-floating-point-instructions-alphabetic-order/fjcvtzs-floating-point-javascript-convert-to-signed-fixed-point-rounding-toward-zero
    
    gcc/
            PR target/71233
            * config/aarch64/aarch64.md (UNSPEC_FJCVTZS): Define.
            (aarch64_fjcvtzs): New define_insn.
            * config/aarch64/aarch64.h (TARGET_JSCVT): Define.
            * config/aarch64/aarch64-builtins.c (aarch64_builtins):
            Add AARCH64_JSCVT.
            (aarch64_init_builtins): Initialize __builtin_aarch64_jcvtzs.
            (aarch64_expand_builtin): Handle AARCH64_JSCVT.
            * config/aarch64/aarch64-c.c (aarch64_update_cpp_builtins): Define
            __ARM_FEATURE_JCVT where appropriate.
            * config/aarch64/arm_acle.h (__jcvt): Define.
            * doc/sourcebuild.texi (aarch64_fjcvtzs_hw) Document new
            target supports option.
    
    gcc/testsuite/
            PR target/71233
            * gcc.target/aarch64/acle/jcvt_1.c: New test.
            * gcc.target/aarch64/acle/jcvt_2.c: New testcase.
            * lib/target-supports.exp
            (check_effective_target_aarch64_fjcvtzs_hw): Add new check for
            FJCVTZS hw.
    
    Co-Authored-By: Andrea Corallo  <andrea.corallo@arm.com>
    
    (cherry picked from commit e1d5d19ec4f84b67ac693fef5b2add7dc9cf056d)
    (cherry picked from commit 2c62952f8160bdc8d4111edb34a4bc75096c1e05)
    (cherry picked from commit d2b86e14c14020f3e119ab8f462e2a91bd7d46e5)

commit 6ca87f2ae832dfcca950cc219c8adbbdf733f652
Author: Alex Coplan <alex.coplan@arm.com>
Date:   Thu Sep 24 10:21:48 2020 +0100

    aarch64: Add support for Neoverse V1 CPU
    
    This patch backports the AArch64 support for Arm's Neoverse V1 CPU to
    GCC 9.
    
    gcc/ChangeLog:
    
            * config/aarch64/aarch64-cores.def: Add Neoverse V1.
            * config/aarch64/aarch64-tune.md: Regenerate.
            * doc/invoke.texi: Document support for Neoverse V1.

commit dbc775fc2ba2df43f31c092a7c23b6b983480ded
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Sep 24 00:18:23 2020 +0000

    Daily bump.

commit c189842fef7f5fa87edcba271af4cb6796a03492
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Sep 23 00:18:20 2020 +0000

    Daily bump.

commit e7285587186bac5692171d7493e29e16c729281d
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Tue Sep 22 20:02:58 2020 +0100

    libstdc++: Fix out-of-bounds string_view access in filesystem::path [PR 97167]
    
    libstdc++-v3/ChangeLog:
    
            PR libstdc++/97167
            * src/c++17/fs_path.cc (path::_Parser::root_path()): Check
            for empty string before inspecting the first character.
            * testsuite/27_io/filesystem/path/append/source.cc: Append
            empty string_view to path.
    
    (cherry picked from commit 49ff88bd0d8a36a9e903f01ce05685cfe07dee5d)

commit 132ddcc78c118a6ab52063193462bf2a6dbdae32
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Tue Sep 22 08:42:18 2020 +0100

    libstdc++: Use correct argument type for __use_alloc, again [PR 96803]
    
    While backporting 5494edae83ad33c769bd1ebc98f0c492453a6417 I noticed
    that it's still not correct. I made the allocator-extended constructor
    use the right type for the uses-allocator construction detection, but I
    used an rvalue when it should be a const lvalue.
    
    This should fix it properly this time.
    
    libstdc++-v3/ChangeLog:
    
            PR libstdc++/96803
            * include/std/tuple
            (_Tuple_impl(allocator_arg_t, Alloc, const _Tuple_impl<U...>&)):
            Use correct value category in __use_alloc call.
            * testsuite/20_util/tuple/cons/96803.cc: Check with constructors
            that require correct value category to be used.
    
    (cherry picked from commit 7825399092d572ce8ea82c4aa8dfeb65076b0e52)

commit 4be18e2f16bccad652c7deddf04284804d7be530
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Wed Aug 26 19:32:30 2020 +0100

    libstdc++: Use correct argument type for __use_alloc [PR 96803]
    
    The _Tuple_impl constructor for allocator-extended construction from a
    different tuple type uses the _Tuple_impl's own _Head type in the
    __use_alloc test. That is incorrect, because the argument tuple could
    have a different type. Using the wrong type might select the
    leading-allocator convention when it should use the trailing-allocator
    convention, or vice versa.
    
    libstdc++-v3/ChangeLog:
    
            PR libstdc++/96803
            * include/std/tuple
            (_Tuple_impl(allocator_arg_t, Alloc, const _Tuple_impl<U...>&)):
            Replace parameter pack with a type parameter and a pack and pass
            the first type to __use_alloc.
            * testsuite/20_util/tuple/cons/96803.cc: New test.
    
    (cherry picked from commit 5494edae83ad33c769bd1ebc98f0c492453a6417)

commit 6dceae0cb9c724591fc86e30daafdbeaa1eeb993
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Sep 22 00:18:22 2020 +0000

    Daily bump.

commit b3043e490896ea37cd0273e6e149c3eeb3298720
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Fri Aug 28 22:45:24 2020 +0100

    libstdc++: Fix std::gcd and std::lcm for unsigned integers [PR 92978]
    
    This fixes a bug with mixed signed and unsigned types, where converting
    a negative value to the unsigned result type alters the value. The
    solution is to obtain the absolute values of the arguments immediately
    and to perform the actual GCD or LCM algorithm on two arguments of the
    same type.
    
    In order to operate on the most negative number without overflow when
    taking its absolute, use an unsigned type for the result of the abs
    operation. For example, -INT_MIN will overflow, but -(unsigned)INT_MIN
    is (unsigned)INT_MAX+1U which is the correct value.
    
    libstdc++-v3/ChangeLog:
    
            PR libstdc++/92978
            * include/std/numeric (__abs_integral): Replace with ...
            (__detail::__absu): New function template that returns an
            unsigned type, guaranteeing it can represent the most
            negative signed value.
            (__detail::__gcd, __detail::__lcm): Require arguments to
            be unsigned and therefore already non-negative.
            (gcd, lcm): Convert arguments to absolute value as unsigned
            type before calling __detail::__gcd or __detail::__lcm.
            * include/experimental/numeric (gcd, lcm): Likewise.
            * testsuite/26_numerics/gcd/gcd_neg.cc: Adjust expected
            errors.
            * testsuite/26_numerics/lcm/lcm_neg.cc: Likewise.
            * testsuite/26_numerics/gcd/92978.cc: New test.
            * testsuite/26_numerics/lcm/92978.cc: New test.
            * testsuite/experimental/numeric/92978.cc: New test.
    
    (cherry picked from commit 82db1a42e9254c9009bbf8ac01366da4d1ab6df5)

commit 90f845adff0379682080a1253d477e0b621768b7
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Mon Aug 10 18:58:14 2020 +0100

    libstdc++: Fix build for targets without lstat [PR 94681]
    
    libstdc++-v3/ChangeLog:
    
            PR libstdc++/94681
            * src/c++17/fs_ops.cc (read_symlink): Use posix::lstat instead
            of calling ::lstat directly.
            * src/filesystem/ops.cc (read_symlink): Likewise.
    
    (cherry picked from commit 5b065f0563262a0d6cd1fea8426913bfdd841301)

commit 3ec14c9a49aa6c35609eaf04f74132e28a2dc9d5
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Mon Aug 10 13:21:59 2020 +0100

    libstdc++: Make C++17 ignore --disable-libstdcxx-filesystem-ts [PR 94681]
    
    The configure switch should only affect the optional Filesystem TS, not
    the std::filesystem features of C++17.
    
    libstdc++-v3/ChangeLog:
    
            PR libstdc++/94681
            * acinclude.m4 (GLIBCXX_CHECK_FILESYSTEM_DEPS): Do not depend on
            $enable_libstdcxx_filesystem_ts.
            * configure: Regenerate.
    
    (cherry picked from commit 90f7636bf8df50940e0f749af60a6b374a8f09b4)

commit 90fdf477a1cb9ec756f21a09bc649185c3174c9a
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Mon Sep 21 00:17:02 2020 +0100

    libstdc++: Fix noexcept-specifier for std::bind_front [PR 97101]
    
    libstdc++-v3/ChangeLog:
    
            PR libstdc++/97101
            * include/std/functional (bind_front): Fix order of parameters
            in is_nothrow_constructible_v specialization.
            * testsuite/20_util/function_objects/bind_front/97101.cc: New test.
    
    (cherry picked from commit 3c755b428e188228d0bad90625c995fd25a02322)

commit bdaf0ce0af30dfedac61ea1a7e842a45e55deb25
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Thu Sep 10 15:39:15 2020 +0100

    libstdc++: handle small max_blocks_per_chunk in pool resources [PR 94160]
    
    When a pool resource is constructed with max_blocks_per_chunk=1 it ends
    up creating a pool with blocks_per_chunk=0 which means it never
    allocates anything. Instead it returns null pointers, which should be
    impossible.
    
    To avoid this problem, round the max_blocks_per_chunk value to a
    multiple of four, so it's never smaller than four.
    
    libstdc++-v3/ChangeLog:
    
            PR libstdc++/94160
            * src/c++17/memory_resource.cc (munge_options): Round
            max_blocks_per_chunk to a multiple of four.
            (__pool_resource::_M_alloc_pools()): Simplify slightly.
            * testsuite/20_util/unsynchronized_pool_resource/allocate.cc:
            Check that valid pointers are returned when small values are
            used for max_blocks_per_chunk.
    
    (cherry picked from commit 30b41cfbb2dade63e52465234a725d1d02fe70aa)

commit 54213005e6d73f68bdbee68b5b1e3bbb7ea069a2
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Sep 21 00:18:21 2020 +0000

    Daily bump.

commit 2ec5c131a4ae1f0d9fd057ba9aed97855e992108
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Sep 20 00:18:14 2020 +0000

    Daily bump.

commit 0e442063a0adf01e6348e9fc55cc3e9869974769
Author: Tobias Burnus <tobias@codesourcery.com>
Date:   Thu Sep 17 14:01:09 2020 +0200

    Fortran: Avoid double-free with parse error (PR96041, PR93423)
    
    gcc/fortran/
    
            PR fortran/96041
            PR fortran/93423
            * decl.c (gfc_match_submod_proc): Avoid later double-free
            in the error case.
    
    (cherry picked from commit c12facd22881517127ebbe213d7ecc7fc1fcea4e)

commit 5ec4a3d307210b5c62e9718eff4a32b058e14c78
Author: Harald Anlauf <anlauf@gmx.de>
Date:   Thu Jul 2 20:48:16 2020 +0200

    PR fortran/93423 - ICE on invalid with argument list for module procedure
    
    When recovering from an error, a NULL pointer dereference could occur.
    Check for that situation and punt.
    
    gcc/fortran/
            PR fortran/93423
            * resolve.c (resolve_symbol): Avoid NULL pointer dereference.
    
    (cherry picked from commit b88744905a46be44ffa3c57d46080f601ae832b8)

commit 03732d58b0388f04893577ffca32c282581843be
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Sep 19 00:18:25 2020 +0000

    Daily bump.

commit a24744c1ed89e255f3db5b3981519f538d231886
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Wed Sep 16 09:42:33 2020 +0200

    store-merging: Consider also overlapping stores earlier in the by bitpos sorting [PR97053]
    
    As the testcases show, if we have something like:
      MEM <char[12]> [&b + 8B] = {};
      MEM[(short *) &b] = 5;
      _5 = *x_4(D);
      MEM <long long unsigned int> [&b + 2B] = _5;
      MEM[(char *)&b + 16B] = 88;
      MEM[(int *)&b + 20B] = 1;
    then in sort_by_bitpos the stores are almost like in the given order,
    except the first store is after the = _5; store.
    We can't coalesce the = 5; store with = _5;, because the latter is MEM_REF,
    while the former INTEGER_CST, and we can't coalesce the = _5 store with
    the = {} store because the former is MEM_REF, the latter INTEGER_CST.
    But we happily coalesce the remaining 3 stores, which is wrong, because the
    = _5; store overlaps those and is in between them in the program order.
    We already have code to deal with similar cases in check_no_overlap, but we
    deal only with the following stores in sort_by_bitpos order, not the earlier
    ones.
    
    The following patch checks also the earlier ones.  In coalesce_immediate_stores
    it computes the first one that needs to be checked (all the ones whose
    bitpos + bitsize is smaller or equal to merged_store->start don't need to be
    checked and don't need to be checked even for any following attempts because
    of the sort_by_bitpos sorting) and the end of that (that is the first store
    in the merged_store).
    
    2020-09-16  Jakub Jelinek  <jakub@redhat.com>
    
            PR tree-optimization/97053
            * gimple-ssa-store-merging.c (check_no_overlap): Add FIRST_ORDER,
            START, FIRST_EARLIER and LAST_EARLIER arguments.  Return false if
            any stores between FIRST_EARLIER inclusive and LAST_EARLIER exclusive
            has order in between FIRST_ORDER and LAST_ORDER and overlaps the to
            be merged store.
            (imm_store_chain_info::try_coalesce_bswap): Add FIRST_EARLIER argument.
            Adjust check_no_overlap caller.
            (imm_store_chain_info::coalesce_immediate_stores): Add first_earlier
            and last_earlier variables, adjust them during iterations.  Adjust
            check_no_overlap callers, call check_no_overlap even when extending
            overlapping stores by extra INTEGER_CST stores.
    
            * gcc.dg/store_merging_31.c: New test.
            * gcc.dg/store_merging_32.c: New test.
    
    (cherry picked from commit bd909071ac04e94f4b6f0baab64d0687ec55681d)

commit 7ebf06c0a44e9bbb0b2cff769689c9d36e3165bc
Author: Richard Sandiford <richard.sandiford@arm.com>
Date:   Wed Apr 29 11:51:38 2020 +0100

    arm: Extend the PR94780 fix to arm
    
    Essentially the same fix as for x86.
    
    2020-04-29  Richard Sandiford  <richard.sandiford@arm.com>
    
    gcc/
            * config/arm/arm-builtins.c (arm_atomic_assign_expand_fenv): Use
            TARGET_EXPR instead of MODIFY_EXPR for the first assignments to
            fenv_var and new_fenv_var.
    
    (cherry picked from commit 1d7ead9cba91533291e0048d22b711ca124e19de)

commit 37e53874d4df9c624e953f0193f12226b6ba7fe8
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Sep 18 00:18:38 2020 +0000

    Daily bump.

commit 336b4100940a9db7825b96d450a21040ae11b7b9
Author: Segher Boessenkool <segher@kernel.crashing.org>
Date:   Fri Apr 24 13:33:14 2020 +0000

    rs6000: Properly handle LE index munging in vec_shr (PR94710)
    
    The PR shows the compiler crashing with -mvsx -mlittle -O0.  This turns
    out to be caused by a failure to make of the higher bits in an index
    endian conversion.
    
    2020-04-24  Segher Boessenkool  <segher@kernel.crashing.org>
    
            PR target/94710
            * config/rs6000/vector.md (vec_shr_<mode> for VEC_L): Correct little
            endian byteshift_val calculation.
    
    (cherry picked from commit 9c725245beed2f056b67f5dc218fef6cb869c5f2)

commit 956ef4a2144440a85b774c9bc7796d0d54b762ec
Author: liuhongt <hongtao.liu@intel.com>
Date:   Wed Sep 16 13:56:30 2020 +0800

    If -mavx implies -mxsave, then -mno-xsave should imply -mno-avx.
    
    Current status is -mno-avx implies -mno-xsave which should be wrong.
    
    gcc/ChangeLog
    
            * common/config/i386/i386-common.c
            (OPTION_MASK_ISA_AVX_UNSET): Remove OPTION_MASK_ISA_XSAVE_UNSET.
            (OPTION_MASK_ISA_XSAVE_UNSET): Add OPTION_MASK_ISA_AVX_UNSET.
    
    gcc/testsuite/ChangeLog
    
            * gcc.target/i386/xsave-avx-1.c: New test.

commit ce53a9ac0700f81ed338913e7dc934fbbf4fc138
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Sep 17 00:18:33 2020 +0000

    Daily bump.

commit 25542b27aa6a75ad0f7316c3767c957cce912fb7
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Sep 3 20:11:43 2020 +0200

    c++: Disable -frounding-math during manifestly constant evaluation [PR96862]
    
    As discussed in the PR, fold-const.c punts on floating point constant
    evaluation if the result is inexact and -frounding-math is turned on.
          /* Don't constant fold this floating point operation if the
             result may dependent upon the run-time rounding mode and
             flag_rounding_math is set, or if GCC's software emulation
             is unable to accurately represent the result.  */
          if ((flag_rounding_math
               || (MODE_COMPOSITE_P (mode) && !flag_unsafe_math_optimizations))
              && (inexact || !real_identical (&result, &value)))
            return NULL_TREE;
    Jonathan said that we should be evaluating them anyway, e.g. conceptually
    as if they are done with the default rounding mode before user had a chance
    to change that, and e.g. in C in initializers it is also ignored.
    In fact, fold-const.c for C initializers turns off various other options:
    
    /* Perform constant folding and related simplification of initializer
       expression EXPR.  These behave identically to "fold_buildN" but ignore
       potential run-time traps and exceptions that fold must preserve.  */
    
      int saved_signaling_nans = flag_signaling_nans;\
      int saved_trapping_math = flag_trapping_math;\
      int saved_rounding_math = flag_rounding_math;\
      int saved_trapv = flag_trapv;\
      int saved_folding_initializer = folding_initializer;\
      flag_signaling_nans = 0;\
      flag_trapping_math = 0;\
      flag_rounding_math = 0;\
      flag_trapv = 0;\
      folding_initializer = 1;
    
      flag_signaling_nans = saved_signaling_nans;\
      flag_trapping_math = saved_trapping_math;\
      flag_rounding_math = saved_rounding_math;\
      flag_trapv = saved_trapv;\
      folding_initializer = saved_folding_initializer;
    
    So, shall cxx_eval_outermost_constant_expr instead turn off all those
    options (then warning_sentinel wouldn't be the right thing to use, but given
    the 8 or how many return stmts in cxx_eval_outermost_constant_expr, we'd
    need a RAII class for this.  Not sure about the folding_initializer, that
    one is affecting complex multiplication and division constant evaluation
    somehow.
    
    2020-09-03  Jakub Jelinek  <jakub@redhat.com>
    
            PR c++/96862
            * constexpr.c (cxx_eval_outermost_constant_expr): Temporarily disable
            flag_rounding_math during manifestly constant evaluation.
    
            * g++.dg/cpp1z/constexpr-96862.C: New test.
    
    (cherry picked from commit 6641d6d3fe79113f8d9f3ced355aea79bffda822)

commit ace10c37de7c2f9f2d419337dc1f173c01f7ec7d
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Wed Aug 26 10:30:15 2020 +0200

    dwarf2out: Fix up dwarf2out_next_real_insn caching [PR96729]
    
    The addition of NOTE_INSN_BEGIN_STMT and NOTE_INSN_INLINE_ENTRY notes
    reintroduced quadratic behavior into dwarf2out_var_location.
    This function needs to know the next real instruction to which the var
    location note applies, but the way final_scan_insn is called outside of
    final.c main loop doesn't make it easy to look up the next real insn in
    there (and for non-dwarf it is even useless).  Usually next real insn is
    only a few notes away, but we can have hundreds of thousands of consecutive
    notes only followed by a real insn.  dwarf2out_var_location to avoid the
    quadratic behavior contains a cache, it remembers the next note and when it
    is called again on that loc_note, it can use the previously computed
    dwarf2out_next_real_insn result, rather than walking the insn chain once
    again.  But, for NOTE_INSN_{BEGIN_STMT,INLINE_ENTRY} dwarf2out_var_location
    is not called while the code puts into the cache those notes, which means if
    we have e.g. in the worst case NOTE_INSN_VAR_LOCATION and
    NOTE_INSN_BEGIN_STMT notes alternating, the cache is not really used.
    
    The following patch fixes it by looking up the next NOTE_INSN_VAR_LOCATION
    if any.  While the lookup could be perhaps done together with looking for
    the next real insn once (e.g. in dwarf2out_next_real_insn or its copy),
    there are other dwarf2out_next_real_insn callers which don't need/want that
    behavior and if there are more than two NOTE_INSN_VAR_LOCATION notes
    followed by the same real insn, we need to do that "find next
    NOTE_INSN_VAR_LOCATION" walk anyway.
    
    On the testcase from the PR this patch speeds it 2.8times, from 0m0.674s
    to 0m0.236s (why it takes for the reporter more than 60s is unknown).
    
    2020-08-26  Jakub Jelinek  <jakub@redhat.com>
    
            PR debug/96729
            * dwarf2out.c (dwarf2out_next_real_insn): Adjust function comment.
            (dwarf2out_var_location): Look for next_note only if next_real is
            non-NULL, in that case look for the first non-deleted
            NOTE_INSN_VAR_LOCATION between loc_note and next_real, if any.
    
    (cherry picked from commit ca1afa261d03c9343dff1208325f87d9ba69ec7a)

commit acd97038dba34830520ed58915d509d21348b554
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Aug 25 13:49:40 2020 +0200

    gimple: Ignore *0 = {CLOBBER} in path isolation [PR96722]
    
    Clobbers of MEM_REF with NULL address are just fancy nops, something we just
    ignore and don't emit any code for it (ditto for other clobbers), they just
    mark end of life on something, so we shouldn't infer from those that there
    is some UB.
    
    2020-08-25  Jakub Jelinek  <jakub@redhat.com>
    
            PR tree-optimization/96722
            * gimple.c (infer_nonnull_range): Formatting fix.
            (infer_nonnull_range_by_dereference): Return false for clobber stmts.
    
            * g++.dg/opt/pr96722.C: New test.
    
    (cherry picked from commit a5b15fcb954ba63d58f0daa700281aba33b5f24a)

commit d2472e513c6490b6e2832b07d08731df26e6dc06
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Aug 18 07:51:58 2020 +0200

    c: Fix -Wunused-but-set-* warning with _Generic [PR96571]
    
    The following testcase shows various problems with -Wunused-but-set*
    warnings and _Generic construct.  I think it is best to treat the selector
    and the ignored expressions as (potentially) read, because when they are
    parsed, the vars in there are already marked as TREE_USED.
    
    2020-08-18  Jakub Jelinek  <jakub@redhat.com>
    
            PR c/96571
            * c-parser.c (c_parser_generic_selection): Change match_found from bool
            to int, holding index of the match.  Call mark_exp_read on the selector
            expression and on expressions other than the selected one.
    
            * gcc.dg/Wunused-var-4.c: New test.
    
    (cherry picked from commit 6d42cbe5ad7a7b46437f2576c9920e44dc14b386)

commit 67627293b4fe2b230c6c32484752adb49f713315
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Aug 11 16:46:49 2020 +0200

    c-family: Fix ICE in get_atomic_generic_size [PR96545]
    
    As the testcase shows, we would ICE if the type of the first argument of
    various atomic builtins was pointer to (non-void) incomplete type, we would
    assume that TYPE_SIZE_UNIT must be non-NULL.  This patch diagnoses it
    instead.  And also changes the TREE_CODE != INTEGER_CST check to
    !tree_fits_uhwi_p, as we use tree_to_uhwi after this and at least in theory
    the int could be too large and not fit.
    
    2020-08-11  Jakub Jelinek  <jakub@redhat.com>
    
            PR c/96545
            * c-common.c (get_atomic_generic_size): Require that first argument's
            type points to a complete type and use tree_fits_uhwi_p instead of
            just INTEGER_CST TREE_CODE check for the TYPE_SIZE_UNIT.
    
            * c-c++-common/pr96545.c: New test.
    
    (cherry picked from commit 7840b4dc05539cf5575b3e9ff57ff5f6c3da2cae)

commit cdc1ed0ceaf7e520164c262358ea6bfe89ff027c
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Sat Aug 8 11:10:30 2020 +0200

    openmp: Handle clauses with gimple sequences in convert_nonlocal_omp_clauses properly
    
    If the walk_body on the various sequences of reduction, lastprivate and/or linear
    clauses needs to create a temporary variable, we should declare that variable
    in that sequence rather than outside, where it would need to be privatized inside of
    the construct.
    
    2020-08-08  Jakub Jelinek  <jakub@redhat.com>
    
            PR fortran/93553
            * tree-nested.c (convert_nonlocal_omp_clauses): For
            OMP_CLAUSE_REDUCTION, OMP_CLAUSE_LASTPRIVATE and OMP_CLAUSE_LINEAR
            save info->new_local_var_chain around walks of the clause gimple
            sequences and declare_vars if needed into the sequence.
    
    2020-08-08  Tobias Burnus  <tobias@codesourcery.com>
    
            PR fortran/93553
            * testsuite/libgomp.fortran/pr93553.f90: New test.
    
    (cherry picked from commit 676b5525e8333005bdc1c596ed086f1da27a450f)

commit 464ed899038051f80af1df7197e561f327502107
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Wed Aug 5 10:40:10 2020 +0200

    openmp: Handle reduction clauses on host teams construct [PR96459]
    
    As the new testcase shows, we weren't actually performing reductions on
    host teams construct.  And fixing that revealed a flaw in the for-14.c testcase.
    The problem is that the tests perform also initialization and checking around the
    calls to the functions with the OpenMP constructs.  In that testcase, all the
    tests have been spawned from a teams construct but only the tested loops were
    distribute, which means the initialization and checking has been performed
    redundantly and racily in each team.  Fixed by performing the initialization
    and checking outside of host teams and only do the calls to functions with
    the tested constructs inside of host teams.
    
    2020-08-05  Jakub Jelinek  <jakub@redhat.com>
    
            PR middle-end/96459
            * omp-low.c (lower_omp_taskreg): Call lower_reduction_clauses even in
            for host teams.
    
            * testsuite/libgomp.c/teams-3.c: New test.
            * testsuite/libgomp.c-c++-common/for-2.h (OMPTEAMS): Define to nothing
            if not defined yet.
            (N(test)): Use it before all N(f*) calls.
            * testsuite/libgomp.c-c++-common/for-14.c (DO_PRAGMA, OMPTEAMS): Define.
            (main): Don't call all test_* functions from within
            #pragma omp teams reduction(|:err), call them directly.
    
    (cherry picked from commit 916c7a201a9a1dc94f2c056a773826a26d1daca9)

commit 3f804f63cde54ff94f35abd00953b050a4c861c7
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Aug 4 11:33:18 2020 +0200

    veclower: Don't ICE on .VEC_CONVERT calls with no lhs [PR96426]
    
    .VEC_CONVERT is a const internal call, so normally if the lhs is not used,
    we'd DCE it far before getting to veclower, but with -O0 (or perhaps
    -fno-tree-dce and some other -fno-* options) it can happen.
    But as the internal fn needs the lhs to know the type to which the
    conversion is done (and I think that is a reasonable representation, having
    some magic another argument and having to create constants with that type
    looks overkill to me), we just should DCE those calls ourselves.
    During veclower, we can't really remove insns, as the callers would be
    upset, so this just replaces it with a GIMPLE_NOP.
    
    2020-08-04  Jakub Jelinek  <jakub@redhat.com>
    
            PR middle-end/96426
            * tree-vect-generic.c (expand_vector_conversion): Replace .VEC_CONVERT
            call with GIMPLE_NOP if there is no lhs.
    
            * gcc.c-torture/compile/pr96426.c: New test.
    
    (cherry picked from commit 95f5a3258dd8a9584f2b10304f79441ef2d4c64c)

commit fdcb6dae610aba75e23c1fd2d31b491691e54091
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Wed Jul 15 11:34:44 2020 +0200

    fix _mm512_{,mask_}cmp*_p[ds]_mask at -O0 [PR96174]
    
    The _mm512_{,mask_}cmp_p[ds]_mask and also _mm_{,mask_}cmp_s[ds]_mask
    intrinsics have an argument which must have a constant passed to it
    and so use an inline version only for ifdef __OPTIMIZE__ and have
    a #define for -O0.  But the _mm512_{,mask_}cmp*_p[ds]_mask intrinsics
    don't need a constant argument, they are essentially the first
    set with the constant added to them implicitly based on the comparison
    name, and so there is no #define version for them (correctly).
    But their inline versions are defined in between the first and s[ds]
    set and so inside of ifdef __OPTIMIZE__, which means that with -O0
    they aren't defined at all.
    
    This patch fixes that by moving those after the #ifdef __OPTIMIZE #else
    use #define #endif block.
    
    2020-07-15  Jakub Jelinek  <jakub@redhat.com>
    
            PR target/96174
            * config/i386/avx512fintrin.h (_mm512_cmpeq_pd_mask,
            _mm512_mask_cmpeq_pd_mask, _mm512_cmplt_pd_mask,
            _mm512_mask_cmplt_pd_mask, _mm512_cmple_pd_mask,
            _mm512_mask_cmple_pd_mask, _mm512_cmpunord_pd_mask,
            _mm512_mask_cmpunord_pd_mask, _mm512_cmpneq_pd_mask,
            _mm512_mask_cmpneq_pd_mask, _mm512_cmpnlt_pd_mask,
            _mm512_mask_cmpnlt_pd_mask, _mm512_cmpnle_pd_mask,
            _mm512_mask_cmpnle_pd_mask, _mm512_cmpord_pd_mask,
            _mm512_mask_cmpord_pd_mask, _mm512_cmpeq_ps_mask,
            _mm512_mask_cmpeq_ps_mask, _mm512_cmplt_ps_mask,
            _mm512_mask_cmplt_ps_mask, _mm512_cmple_ps_mask,
            _mm512_mask_cmple_ps_mask, _mm512_cmpunord_ps_mask,
            _mm512_mask_cmpunord_ps_mask, _mm512_cmpneq_ps_mask,
            _mm512_mask_cmpneq_ps_mask, _mm512_cmpnlt_ps_mask,
            _mm512_mask_cmpnlt_ps_mask, _mm512_cmpnle_ps_mask,
            _mm512_mask_cmpnle_ps_mask, _mm512_cmpord_ps_mask,
            _mm512_mask_cmpord_ps_mask): Move outside of __OPTIMIZE__ guarded
            section.
    
            * gcc.target/i386/avx512f-vcmppd-3.c: New test.
            * gcc.target/i386/avx512f-vcmpps-3.c: New test.
    
    (cherry picked from commit 12d69dbfff9dd5ad4a30b20d1636f5cab6425e8c)

commit 62714a106493d0f1f22ff98c2dff2204f09cfcc0
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Jul 2 11:38:20 2020 +0200

    tree-cfg: Fix ICE with switch stmt to unreachable opt and forced labels [PR95857]
    
    The following testcase ICEs, because during the cfg cleanup, we see:
      switch (i$e_11) <default: <L12> [33.33%], case -3: <lab2> [33.33%], case 0: <L10> [33.33%], case 2: <lab2> [33.33%]>
    ...
    lab2:
      __builtin_unreachable ();
    where lab2 is FORCED_LABEL.  The way it works, we go through the case labels
    and when we reach the first one that points to gimple_seq_unreachable*
    basic block, we remove the edge (if any) from the switch bb to the bb
    containing the label and bbs reachable only through that edge we've just
    removed.  Once we do that, we must throw away all other cases that use
    the same label (or some other labels from the same bb we've removed the edge
    to and the bb).  To avoid quadratic behavior, this is not done by walking
    all remaining cases immediately before removing, but only when processing
    them later.
    For normal labels this works, fine, if the label is in a deleted bb, it will
    have NULL label_to_block and we handle that case, or, if the unreachable bb
    has some other edge to it, only the edge will be removed and not the bb,
    and again, find_edge will not find the edge and we only remove the case.
    And if a label would be to some other block, that other block wouldn't have
    been removed earlier because there would be still an edge from the switch
    block.
    Now, FORCED_LABEL (and I think DECL_NONLOCAL too) break this, because
    those labels aren't removed, but instead moved to some surrounding basic
    block.  So, when we later process those, when their gimple_seq_unreachable*
    basic block is removed, label_to_block will return some unrelated block
    (in the testcase the switch bb), so we decide to keep the case which doesn't
    seem to be unreachable, but we don't really have an edge from the switch
    block to the block the label got moved to.
    
    I thought first about punting in gimple_seq_unreachable* on
    FORCED_LABEL/DECL_NONLOCAL labels, but that might penalize even code that
    doesn't care, so this instead just makes sure that for
    FORCED_LABEL/DECL_NONLOCAL labels that are being removed (and thus moved
    randomly) we remember in a hash_set the fact that those labels should be
    treated as removed for the purpose of the optimization, and later on
    handle those labels that way.
    
    2020-07-02  Jakub Jelinek  <jakub@redhat.com>
    
            PR tree-optimization/95857
            * tree-cfg.c (group_case_labels_stmt): When removing an unreachable
            base_bb, remember all forced and non-local labels on it and later
            treat those as if they have NULL label_to_block.  Formatting fix.
            Fix a comment typo.
    
            * gcc.dg/pr95857.c: New test.
    
    (cherry picked from commit 00f24f56732861d09a9716fa5b6b8a96c2289143)

commit a1eb6e41832816b671d3b945014f7e8255167470
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Sat Jun 27 12:38:23 2020 +0200

    c-family: Use TYPE_OVERFLOW_UNDEFINED instead of !TYPE_UNSIGNED in pointer_sum [PR95903]
    
    For lp64 targets and int off ... ptr[off + 1]
    is lowered in pointer_sum to *(ptr + ((sizetype) off + (sizetype) 1)).
    That is fine when signed integer wrapping is undefined (and is not done
    already if off has unsigned type), but changes behavior for -fwrapv, where
    overflow is well defined.  Runtime test could be:
    int
    main ()
    {
      char *p = __builtin_malloc (0x100000000UL);
      if (!p) return 0;
      char *q = p + 0x80000000UL;
      int o = __INT_MAX__;
      q[o + 1] = 1;
      if (q[-__INT_MAX__ - 1] != 1) __builtin_abort ();
      return 0;
    }
    with -fwrapv or so, not included in the testsuite because it requires 4GB
    allocation (with some other test it would be enough to have something
    slightly above 2GB, but still...).
    
    2020-06-27  Jakub Jelinek  <jakub@redhat.com>
    
            PR middle-end/95903
    gcc/c-family/
            * c-common.c (pointer_int_sum): Use TYPE_OVERFLOW_UNDEFINED instead of
            !TYPE_UNSIGNED check to see if we can apply distributive law and handle
            smaller precision intop operands separately.
    gcc/testsuite/
            * c-c++-common/pr95903.c: New test.
    
    (cherry picked from commit 37995960984ea2222346dd9d168d332cd6f7adf0)

commit 6ff6c02695c9b6ae6e840422080f6d10449577b8
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Wed Jun 24 10:40:02 2020 +0200

    fold-const: Fix A <= 0 ? A : -A folding [PR95810]
    
    We folded A <= 0 ? A : -A into -ABS (A), which is for signed integral types
    incorrect - can invoke on INT_MIN UB twice, once on ABS and once on its
    negation.
    
    The following patch fixes it by instead folding it to (type)-ABSU (A).
    
    2020-06-24  Jakub Jelinek  <jakub@redhat.com>
    
            PR middle-end/95810
            * fold-const.c (fold_cond_expr_with_comparison): Optimize
            A <= 0 ? A : -A into (type)-absu(A) rather than -abs(A).
    
            * gcc.dg/ubsan/pr95810.c: New test.
    
    (cherry picked from commit 01e10b0ee77e82cb331414c569e02dc7a2c4999e)

commit 8efa945b308307fd9b0313705f5826a8499de405
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu May 28 23:40:54 2020 +0200

    c++: Try to complete decomp types [PR95328]
    
    Two years ago Paolo has added the
      else if (processing_template_decl && !COMPLETE_TYPE_P (type))
        pedwarn (...);
    lines into cp_finish_decomp.  For type dependent decl we punt much earlier,
    but even for types which aren't type dependent COMPLETE_TYPE_P might be
    false as this testcase shows, so this patch tries to complete_type first
    (the reason for writing it that way is that it is then followed by another
    else if and if complete_type returns error_mark_node, we shouldn't report
    anything, as a bug should have been reported already.
    
    2020-05-28  Jakub Jelinek  <jakub@redhat.com>
    
            PR c++/95328
            * decl.c (cp_finish_decomp): Call complete_type before checking
            COMPLETE_TYPE_P.
    
            * g++.dg/cpp1z/decomp53.C: New test.
    
    (cherry picked from commit 3d8d5ddb539a5254c7ef83414377f4c74c7701d4)

commit b78ea59edbd354fed914d0f8eb78109db7316ce8
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu May 14 09:51:05 2020 +0200

    openmp: Fix placement of 2nd+ preparation statement for PHIs in simd clone lowering [PR95108]
    
    For normal stmts, preparation statements are inserted before the stmt, so if we need multiple,
    they are in the correct order, but for PHIs we emit them after labels in the entry successor
    bb, and we used to emit them in the reverse order that way.
    
    2020-05-14  Jakub Jelinek  <jakub@redhat.com>
    
            PR middle-end/95108
            * omp-simd-clone.c (struct modify_stmt_info): Add after_stmt member.
            (ipa_simd_modify_stmt_ops): For PHIs, only add before first stmt in
            entry block if info->after_stmt is NULL, otherwise add after that stmt
            and update it after adding each stmt.
            (ipa_simd_modify_function_body): Initialize info.after_stmt.
    
            * gcc.dg/gomp/pr95108.c: New test.
    
    (cherry picked from commit d0fb9ffc1b8f3b86bbdf0e915cec2136141b329b)

commit 9d01f91514f627590adc408ac9a35a7153123119
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Wed May 13 11:22:37 2020 +0200

    Fix -fcompare-debug issue in purge_dead_edges [PR95080]
    
    The following testcase fails with -fcompare-debug, the bug used to be latent
    since introduction of -fcompare-debug.
    The loop at the start of purge_dead_edges behaves differently between -g0
    and -g - if the last insn is a DEBUG_INSN, then it skips not just
    DEBUG_INSNs but also NOTEs until it finds some other real insn (or bb head),
    while with -g0 it will not skip any NOTEs, so if we have
    real_insn
    note
    debug_insn // not present with -g0
    then with -g it might remove useless REG_EH_REGION from real_insn, while
    with -g0 it will not.
    
    Yet another option would be not skipping NOTE_P in the loop; I couldn't find
    in history rationale for why it is done.
    
    2020-05-13  Jakub Jelinek  <jakub@redhat.com>
    
            PR debug/95080
            * cfgrtl.c (purge_dead_edges): Skip over debug and note insns even
            if the last insn is a note.
    
            * g++.dg/opt/pr95080.C: New test.
    
    (cherry picked from commit 18edc195442291525e04f0fa4d5ef972155117da)

commit eca1dbea010ba4c18ccec90bacbad5d8ec72c09f
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Wed May 6 23:38:13 2020 +0200

    c++: Avoid strict_aliasing_warning on dependent types or expressions [PR94951]
    
    The following testcase gets a bogus warning during build_base_path,
    when cp_build_indirect_ref* calls strict_aliasing_warning with a dependent
    expression.  IMHO calling get_alias_set etc. on dependent types feels wrong
    to me, we should just defer the warnings in those cases until instantiation
    and only handle the cases where neither type nor expr are dependent.
    
    2020-05-06  Jakub Jelinek  <jakub@redhat.com>
    
            PR c++/94951
            * typeck.c (cp_strict_aliasing_warning): New function.
            (cp_build_indirect_ref_1, build_reinterpret_cast_1): Use
            it instead of strict_aliasing_warning.
    
            * g++.dg/warn/Wstrict-aliasing-bogus-tmpl.C: New test.
    
    (cherry picked from commit d82414ebcf7716ea24688510594a2c464a105908)

commit 79002374e81588fa1052c21f3d397cf9ad61f97d
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Wed May 6 09:40:33 2020 +0200

    riscv: Fix up riscv_atomic_assign_expand_fenv [PR94950]
    
    Similarly to the fixes on many other targets, riscv needs to use TARGET_EXPR
    to avoid having the create_tmp_var_raw temporaries without proper DECL_CONTEXT
    and not mentioned in local decls.
    
    2020-05-06  Jakub Jelinek  <jakub@redhat.com>
    
            PR target/94950
            * config/riscv/riscv-builtins.c (riscv_atomic_assign_expand_fenv): Use
            TARGET_EXPR instead of MODIFY_EXPR for first assignment to old_flags.
    
    (cherry picked from commit 5454a13add37fa6a8eedbf9d2f6bdc63a7825e2c)

commit 0f717ba5975ab42e1176db4cd2384f1862872519
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Wed May 6 09:31:19 2020 +0200

    combine: Don't replace SET_SRC with REG_EQUAL note content if SET_SRC has side-effects [PR94873]
    
    There were some discussions about whether REG_EQUAL notes are valid on insns with a single
    set which contains auto-inc-dec side-effects in the SET_SRC and the majority thinks that
    it should be valid.  So, this patch fixes the combiner to punt in that case, because otherwise
    the auto-inc-dec side-effects from the SET_SRC are lost.
    
    2020-05-06  Jakub Jelinek  <jakub@redhat.com>
    
            PR rtl-optimization/94873
            * combine.c (combine_instructions): Don't optimize using REG_EQUAL
            note if SET_SRC (set) has side-effects.
    
            * gcc.dg/pr94873.c: New test.
    
    (cherry picked from commit 8982e39b46b1e4a4b09022ddebd758b77ab73bac)

commit b66139a3ba159473432edabb983c62219a28590d
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Apr 30 21:48:30 2020 +0200

    c: Fix ICE with _Atomic side-effect in nested fn param decls [PR94842]
    
    If there are _Atomic side-effects in the parameter declarations
    of non-nested function, when they are parsed, current_function_decl is
    NULL, the create_artificial_label created labels during build_atomic* are
    then adjusted by store_parm_decls through set_labels_context_r callback.
    Unfortunately, if such thing happens in nested function parameter
    declarations, while those decls are parsed current_function_decl is the
    parent function (and am not sure it is a good idea to temporarily clear it,
    some code perhaps should be aware it is in a nested function, or it can
    refer to variables from the parent function etc.) and that means
    store_param_decls through set_labels_context_r doesn't adjust anything.
    As those labels are emitted in the nested function body rather than in the
    parent, I think it is ok to override the context in those cases.
    
    2020-04-30  Jakub Jelinek  <jakub@redhat.com>
    
            PR c/94842
            * c-decl.c (set_labels_context_r): In addition to context-less
            LABEL_DECLs adjust also LABEL_DECLs with context equal to
            parent function if any.
            (store_parm_decls): Adjust comment.
    
            * gcc.dg/pr94842.c: New test.
    
    (cherry picked from commit 61fb8963c22d91152a9c46a3512307bef3b3d7f7)

commit f479346c78e15cf4ea548347165f3229d2332544
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Sat May 2 12:09:04 2020 +0200

    tilegx: Unbreak build
    
    ../../gcc/config/tilegx/tilegx.md:4109:1: ambiguous attribute 'n'; could be '1' (via 'I124MODE:n') or '4' (via 'I48MODE:n')
    ../../gcc/config/tilegx/tilegx.md:4109:1: ambiguous attribute 'n'; could be '1' (via 'I124MODE:n') or '' (via 'I48MODE:n')
    ../../gcc/config/tilegx/tilegx.md:4109:1: ambiguous attribute 'n'; could be '2' (via 'I124MODE:n') or '4' (via 'I48MODE:n')
    ../../gcc/config/tilegx/tilegx.md:4109:1: ambiguous attribute 'n'; could be '2' (via 'I124MODE:n') or '' (via 'I48MODE:n')
    ../../gcc/config/tilegx/tilegx.md:4109:1: ambiguous attribute 'n'; could be '4' (via 'I124MODE:n') or '' (via 'I48MODE:n')
    
    The insn name already uses <I124MODE:n> explicitly, just the preparation
    stmts don't, and as it creates a I124MODE lowpart subreg of a word mode
    register, <I124MODE:n> seems obviously correct.
    
    2020-05-02  Jakub Jelinek  <jakub@redhat.com>
    
            * config/tilegx/tilegx.md
            (insn_stnt<I124MODE:n>_add<I48MODE:bitsuffix>): Use <I124MODE:n>
            rather than just <n>.
    
    (cherry picked from commit 0118d0397f94c307b76aa14abec99347a93da621)

commit ccee0511abf6e0bb679fa6b4941e5a71a6521b12
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Wed Apr 29 17:31:26 2020 +0200

    x86: Fix -O0 remaining intrinsic macros [PR94832]
    
    A few other macros seem to suffer from the same issue.  What I've done was:
    cat gcc/config/i386/*intrin.h | sed -e ':x /\\$/ { N; s/\\\n//g ; bx }' \
    | grep '^[[:blank:]]*#[[:blank:]]*define[[:blank:]].*(' | sed 's/[      ]\+/ /g' \
    > /tmp/macros
    and then looking for regexps:
    )[a-zA-Z]
    ) [a-zA-Z]
    [a-zA-Z][-+*/%]
    [a-zA-Z] [-+*/%]
    [-+*/%][a-zA-Z]
    [-+*/%] [a-zA-Z]
    in the resulting file.
    
    2020-04-29  Jakub Jelinek  <jakub@redhat.com>
    
            PR target/94832
            * config/i386/avx512bwintrin.h (_mm512_alignr_epi8,
            _mm512_mask_alignr_epi8, _mm512_maskz_alignr_epi8): Wrap macro operands
            used in casts into parens.
            * config/i386/avx512fintrin.h (_mm512_cvt_roundps_ph, _mm512_cvtps_ph,
            _mm512_mask_cvt_roundps_ph, _mm512_mask_cvtps_ph,
            _mm512_maskz_cvt_roundps_ph, _mm512_maskz_cvtps_ph,
            _mm512_mask_cmp_epi64_mask, _mm512_mask_cmp_epi32_mask,
            _mm512_mask_cmp_epu64_mask, _mm512_mask_cmp_epu32_mask,
            _mm512_mask_cmp_round_pd_mask, _mm512_mask_cmp_round_ps_mask,
            _mm512_mask_cmp_pd_mask, _mm512_mask_cmp_ps_mask): Likewise.
            * config/i386/avx512vlbwintrin.h (_mm256_mask_alignr_epi8,
            _mm256_maskz_alignr_epi8, _mm_mask_alignr_epi8, _mm_maskz_alignr_epi8,
            _mm256_mask_cmp_epu8_mask): Likewise.
            * config/i386/avx512vlintrin.h (_mm_mask_cvtps_ph, _mm_maskz_cvtps_ph,
            _mm256_mask_cvtps_ph, _mm256_maskz_cvtps_ph): Likewise.
            * config/i386/f16cintrin.h (_mm_cvtps_ph, _mm256_cvtps_ph): Likewise.
            * config/i386/shaintrin.h (_mm_sha1rnds4_epu32): Likewise.
    
    (cherry picked from commit 0c8217b16f307c3eedce8f22354714938613f701)

commit f97bf9657cecaaf8afd14b43e5ca9be294ab870c
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Wed Apr 29 17:30:22 2020 +0200

    x86: Fix -O0 intrinsic *gather*/*scatter* macros [PR94832]
    
    As reported in the PR, while most intrinsic -O0 macro argument uses
    are properly wrapped in ()s or used in context where having a complex
    expression passed as the argument doesn't pose a problem (e.g. when
    macro argument use is in between commas, or between ( and comma, or
    between comma and ) etc.), especially the gather/scatter macros don't do
    this and if one passes to some macro e.g. x + y as argument, the
    corresponding inline function would do cast on the argument, but
    the macro does (int) ARG, then it is (int) x + y rather than (int) (x + y).
    
    The following patch fixes those issues in *gather/*scatter*; additionally,
    the AVX2 macros were passing incorrect mask of e.g.
    (__v2df)_mm_set1_pd((double)(long long int) -1)
    which is IMHO equivalent to
    (__v2df){-1.0, -1.0}
    when it really wants to pass __v2df vector with all bits set.
    I've used what the inline functions use for those cases.
    
    2020-04-29  Jakub Jelinek  <jakub@redhat.com>
    
            PR target/94832
            * config/i386/avx2intrin.h (_mm_mask_i32gather_pd,
            _mm256_mask_i32gather_pd, _mm_mask_i64gather_pd,
            _mm256_mask_i64gather_pd, _mm_mask_i32gather_ps,
            _mm256_mask_i32gather_ps, _mm_mask_i64gather_ps,
            _mm256_mask_i64gather_ps, _mm_i32gather_epi64,
            _mm_mask_i32gather_epi64, _mm256_i32gather_epi64,
            _mm256_mask_i32gather_epi64, _mm_i64gather_epi64,
            _mm_mask_i64gather_epi64, _mm256_i64gather_epi64,
            _mm256_mask_i64gather_epi64, _mm_i32gather_epi32,
            _mm_mask_i32gather_epi32, _mm256_i32gather_epi32,
            _mm256_mask_i32gather_epi32, _mm_i64gather_epi32,
            _mm_mask_i64gather_epi32, _mm256_i64gather_epi32,
            _mm256_mask_i64gather_epi32): Surround macro parameter uses with
            parens.
            (_mm_i32gather_pd, _mm256_i32gather_pd, _mm_i64gather_pd,
            _mm256_i64gather_pd, _mm_i32gather_ps, _mm256_i32gather_ps,
            _mm_i64gather_ps, _mm256_i64gather_ps): Likewise.  Don't use
            as mask vector containing -1.0 or -1.0f elts, but instead vector
            with all bits set using _mm*_cmpeq_p? with zero operands.
            * config/i386/avx512fintrin.h (_mm512_i32gather_ps,
            _mm512_mask_i32gather_ps, _mm512_i32gather_pd,
            _mm512_mask_i32gather_pd, _mm512_i64gather_ps,
            _mm512_mask_i64gather_ps, _mm512_i64gather_pd,
            _mm512_mask_i64gather_pd, _mm512_i32gather_epi32,
            _mm512_mask_i32gather_epi32, _mm512_i32gather_epi64,
            _mm512_mask_i32gather_epi64, _mm512_i64gather_epi32,
            _mm512_mask_i64gather_epi32, _mm512_i64gather_epi64,
            _mm512_mask_i64gather_epi64, _mm512_i32scatter_ps,
            _mm512_mask_i32scatter_ps, _mm512_i32scatter_pd,
            _mm512_mask_i32scatter_pd, _mm512_i64scatter_ps,
            _mm512_mask_i64scatter_ps, _mm512_i64scatter_pd,
            _mm512_mask_i64scatter_pd, _mm512_i32scatter_epi32,
            _mm512_mask_i32scatter_epi32, _mm512_i32scatter_epi64,
            _mm512_mask_i32scatter_epi64, _mm512_i64scatter_epi32,
            _mm512_mask_i64scatter_epi32, _mm512_i64scatter_epi64,
            _mm512_mask_i64scatter_epi64): Surround macro parameter uses with
            parens.
            * config/i386/avx512pfintrin.h (_mm512_prefetch_i32gather_pd,
            _mm512_prefetch_i32gather_ps, _mm512_mask_prefetch_i32gather_pd,
            _mm512_mask_prefetch_i32gather_ps, _mm512_prefetch_i64gather_pd,
            _mm512_prefetch_i64gather_ps, _mm512_mask_prefetch_i64gather_pd,
            _mm512_mask_prefetch_i64gather_ps, _mm512_prefetch_i32scatter_pd,
            _mm512_prefetch_i32scatter_ps, _mm512_mask_prefetch_i32scatter_pd,
            _mm512_mask_prefetch_i32scatter_ps, _mm512_prefetch_i64scatter_pd,
            _mm512_prefetch_i64scatter_ps, _mm512_mask_prefetch_i64scatter_pd,
            _mm512_mask_prefetch_i64scatter_ps): Likewise.
            * config/i386/avx512vlintrin.h (_mm256_mmask_i32gather_ps,
            _mm_mmask_i32gather_ps, _mm256_mmask_i32gather_pd,
            _mm_mmask_i32gather_pd, _mm256_mmask_i64gather_ps,
            _mm_mmask_i64gather_ps, _mm256_mmask_i64gather_pd,
            _mm_mmask_i64gather_pd, _mm256_mmask_i32gather_epi32,
            _mm_mmask_i32gather_epi32, _mm256_mmask_i32gather_epi64,
            _mm_mmask_i32gather_epi64, _mm256_mmask_i64gather_epi32,
            _mm_mmask_i64gather_epi32, _mm256_mmask_i64gather_epi64,
            _mm_mmask_i64gather_epi64, _mm256_i32scatter_ps,
            _mm256_mask_i32scatter_ps, _mm_i32scatter_ps, _mm_mask_i32scatter_ps,
            _mm256_i32scatter_pd, _mm256_mask_i32scatter_pd, _mm_i32scatter_pd,
            _mm_mask_i32scatter_pd, _mm256_i64scatter_ps,
            _mm256_mask_i64scatter_ps, _mm_i64scatter_ps, _mm_mask_i64scatter_ps,
            _mm256_i64scatter_pd, _mm256_mask_i64scatter_pd, _mm_i64scatter_pd,
            _mm_mask_i64scatter_pd, _mm256_i32scatter_epi32,
            _mm256_mask_i32scatter_epi32, _mm_i32scatter_epi32,
            _mm_mask_i32scatter_epi32, _mm256_i32scatter_epi64,
            _mm256_mask_i32scatter_epi64, _mm_i32scatter_epi64,
            _mm_mask_i32scatter_epi64, _mm256_i64scatter_epi32,
            _mm256_mask_i64scatter_epi32, _mm_i64scatter_epi32,
            _mm_mask_i64scatter_epi32, _mm256_i64scatter_epi64,
            _mm256_mask_i64scatter_epi64, _mm_i64scatter_epi64,
            _mm_mask_i64scatter_epi64): Likewise.
    
    (cherry picked from commit 78cef09019cc9c80d1b39a49861f8827a2ee2e60)

commit 540e1de23a70360fe9b626df8420be704d02e3a7
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Wed Apr 29 15:55:39 2020 +0200

    rs6000: Fix rs6000_atomic_assign_expand_fenv [PR94826]
    
    This is the rs6000 version of the earlier committed x86, aarch64 and arm
    fixes, as create_tmp_var_raw is used because the C FE can call this outside
    of function context, we need to make sure the first references to those
    VAR_DECLs are through a TARGET_EXPR, so that it gets gimple_add_tmp_var
    marked in whatever function it gets expanded in.  Without that DECL_CONTEXT
    is NULL and the vars aren't added as local decls of the containing function.
    
    2020-04-29  Jakub Jelinek  <jakub@redhat.com>
    
            PR target/94826
            * config/rs6000/rs6000.c (rs6000_atomic_assign_expand_fenv): Use
            TARGET_EXPR instead of MODIFY_EXPR for first assignment to
            fenv_var, fenv_clear and old_fenv variables.  For fenv_addr
            take address of TARGET_EXPR of fenv_var with void_node initializer.
            Formatting fixes.
    
    (cherry picked from commit c7137fcc7cbc1f1f14f9fed75adcc6bd8f1d418c)

commit 029d813ddf3595bfc93bfb4afad645dd033d21bf
Author: Haijian Zhang <z.zhanghaijian@huawei.com>
Date:   Wed Apr 29 10:23:11 2020 +0200

    pr94780.c fails with ICE on aarch64 [PR94820]
    
    This is a simple fix for pr94820.
    The PR was only fixed on i386, the same error was also reported on aarch64.
    This function, because it is sometimes called even outside of function bodies, uses create_tmp_var_raw rather than create_tmp_var.
    But in order for that to work, when first referenced, the VAR_DECLs need to appear in a TARGET_EXPR so that during gimplification
    the var gets the right DECL_CONTEXT and is added to local decls. Without that, e.g. tree-nested.c ICEs on those.
    
    2020-04-29  Haijian Zhang  <z.zhanghaijian@huawei.com>
    
            PR target/94820
            * config/aarch64/aarch64-builtins.c
            (aarch64_atomic_assign_expand_fenv): Use TARGET_EXPR instead of
            MODIFY_EXPR for first assignment to fenv_cr, fenv_sr and
            new_fenv_var.
    
    (cherry picked from commit d81bc2af7d2700888e414eb5a322ff5f5b0df0bb)

commit 522022361984407ebc84cde22bdbd199261d0443
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Apr 28 11:26:56 2020 +0200

    tree: Fix up TREE_SIDE_EFFECTS on internal calls [PR94809]
    
    On the following testcase, match.pd during GENERIC folding
    changes the -1U / x < y into __imag__ .MUL_OVERFLOW (x, y),
    but unfortunately unlike for normal calls nothing sets TREE_SIDE_EFFECTS on
    the call.  There is the process_call_operands function that non-internal
    call creation calls and it is usable for internal calls too,
    e.g. TREE_SIDE_EFFECTS is derived from checking whether the
    call has side-effects (non-ECF_{CONST,PURE}; we have those for internal
    calls) and from whether any of the arguments has TREE_SIDE_EFFECTS.
    
    2020-04-28  Jakub Jelinek  <jakub@redhat.com>
    
            PR tree-optimization/94809
            * tree.c (build_call_expr_internal_loc_array): Call
            process_call_operands.
    
            * gcc.c-torture/execute/pr94809.c: New test.
    
    (cherry picked from commit 34f6b14ff33e0c64b3a4a1a2cd871df715d69151)

commit 1777beb6b12983b946dae4177470a319693fc0dc
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Mon Apr 27 21:14:52 2020 +0200

    x86: Fix up ix86_atomic_assign_expand_fenv [PR94780]
    
    This function, because it is sometimes called even outside of function
    bodies, uses create_tmp_var_raw rather than create_tmp_var.  But in order
    for that to work, when first referenced, the VAR_DECLs need to appear in a
    TARGET_EXPR so that during gimplification the var gets the right
    DECL_CONTEXT and is added to local decls.  Without that, e.g. tree-nested.c
    ICEs on those.
    
    2020-04-27  Jakub Jelinek  <jakub@redhat.com>
    
            PR target/94780
            * config/i386/i386.c (ix86_atomic_assign_expand_fenv): Use
            TARGET_EXPR instead of MODIFY_EXPR for first assignment to
            sw_var, exceptions_var, mxcsr_orig_var and mxcsr_mod_var.
    
            * gcc.dg/pr94780.c: New test.
    
    (cherry picked from commit 9b8e9006bb35641865358e2df4f6b3ae185b239a)

commit d6a341eb9170fdb21aee235142d1f09e6dc5c5cd
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Mon Apr 27 16:05:03 2020 +0200

    c-family: Fix ICE on __builtin_speculation_safe_value () [PR94755]
    
    When this builtin has no parameters, speculation_safe_value_resolve_call
    returns BUILT_IN_NONE, but resolve_overloaded_builtin uselessly
    dereferences the first param just to return error_mark_node immediately.
    
    The following patch rearranges it so that we only read the first parameter
    if fncode is not BUILT_IN_NONE.
    
    2020-04-27  Jakub Jelinek  <jakub@redhat.com>
    
            PR c/94755
            * c-common.c (resolve_overloaded_builtin): Return error_mark_node for
            fncode == BUILT_IN_NONE before initialization of first_param.
    
            * c-c++-common/pr94755.c: New test.
    
    (cherry picked from commit 26d76be7af6db75aaab662f4e93395f4ff8acb38)

commit e9dbd80b5e62a126ccb40970f0fb233f7e0ac3a6
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Sat Apr 25 00:11:35 2020 +0200

    c++: Avoid -Wreturn-type warning if a template fn calls noreturn template fn [PR94742]
    
    finish_call_expr already has code to set current_function_returns_abnormally
    if a template calls a noreturn function, but on the following testcase it
    doesn't call a FUNCTION_DECL, but TEMPLATE_DECL instead, in which case
    we didn't check noreturn at all and just assumed it could return.
    
    2020-04-25  Jakub Jelinek  <jakub@redhat.com>
    
            PR c++/94742
            * semantics.c (finish_call_expr): When looking if all overloads
            are noreturn, use STRIP_TEMPLATE to look through TEMPLATE_DECLs.
    
            * g++.dg/warn/Wreturn-type-12.C: New test.
    
    (cherry picked from commit 4ff685a8705e8ee55fa86e75afb769ffb0975aea)

commit 15e2cca37186c848d12f4a0bb9ebcb8be32ed9de
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Apr 23 21:57:50 2020 +0200

    Shortcut identity VEC_PERM expansion [PR94710]
    
    This PR is about the rs6000 backend emitting wrong assembly
    for whole vector shift by 0, and while I think it is desirable
    to fix the backend, I don't see a point why the expander should
    try to emit that, whole vector shift by 0 is identity, we can just
    return the operand.
    
    2020-04-23  Jakub Jelinek  <jakub@redhat.com>
    
            PR target/94710
            * optabs.c (expand_vec_perm_const): For shift_amt const0_rtx
            just return v2.
    
    (cherry picked from commit f51be2fb8653f81092f8158a0f0527275f86603b)

commit 934ede34973909eb15b678f88395d83be01433e7
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Apr 23 09:54:14 2020 +0200

    attribs: Don't diagnose attribute exclusions during error recovery [PR94705]
    
    On the following testcase GCC ICEs, because last_decl is error_mark_node,
    and diag_attr_exclusions assumes that if it is not NULL, it must be a decl.
    
    The following patch just doesn't diagnose attribute exclusions if the
    other decl is erroneous (and thus we've already reported errors for it).
    
    2020-04-23  Jakub Jelinek  <jakub@redhat.com>
    
            PR c/94705
            * attribs.c (decl_attribute): Don't diagnose attribute exclusions
            if last_decl is error_mark_node or has such a TREE_TYPE.
    
            * gcc.dg/pr94705.c: New test.
    
    (cherry picked from commit e2a71816b4949225498bec37e947293aa7f5841b)

commit 1e4a928134e8f17bbcae99f2bac2bbce73ef6f73
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Apr 21 17:06:31 2020 +0200

    ubsan: Avoid -Wpadded warnings [PR94641]
    
    -Wpadded warnings aren't really useful for the artificial types that GCC
    lays out for ubsan.
    
    2020-04-21  Jakub Jelinek  <jakub@redhat.com>
    
            PR c/94641
            * stor-layout.c (place_field, finalize_record_size): Don't emit
            -Wpadded warning on TYPE_ARTIFICIAL rli->t.
            * ubsan.c (ubsan_get_type_descriptor_type,
            ubsan_get_source_location_type, ubsan_create_data): Set
            TYPE_ARTIFICIAL.
            * asan.c (asan_global_struct): Likewise.
    
            * c-c++-common/ubsan/pr94641.c: New test.
    
    (cherry picked from commit 73f8e9dca5ff891ed19001b213fd1f6ce31417e3)

commit dea597314f4503228e23e887ddbb773cbf197093
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Fri Apr 17 10:33:27 2020 +0200

    Fix -fcompare-debug issue in delete_insn_and_edges [PR94618]
    
    delete_insn_and_edges calls purge_dead_edges whenever deleting the last insn
    in a bb, whatever it is.  If it called it only for mandatory last insns
    in the basic block (that may not be followed by DEBUG_INSNs, dunno if that
    is control_flow_insn_p or something more complex), that wouldn't be a
    problem, but as it calls it on any last insn and can actually do something
    in the bb, if such an insn is followed by one more more DEBUG_INSNs and
    nothing else in the same bb, we don't call purge_dead_edges with -g and do
    call it with -g0.
    
    On the testcase, there are two reg-to-reg moves with REG_EH_REGION notes
    (previously memory accesses but simplified and yet not optimized), and the
    second is followed by DEBUG_INSNs; the second move is delete_insn_and_edges
    and after removing it, for -g0 purge_dead_edges removes the REG_EH_REGION
    from the now last insn in the bb (the first reg-to-reg move), while
    for -g it isn't called and things diverge from that quickly on.
    
    Fixed by calling purdge_dead_edges even if we remove the last real insn
    followed only by DEBUG_INSNs in the same bb.
    
    2020-04-17  Jakub Jelinek  <jakub@redhat.com>
    
            PR rtl-optimization/94618
            * cfgrtl.c (delete_insn_and_edges): Set purge not just when
            insn is the BB_END of its block, but also when it is only followed
            by DEBUG_INSNs in its block.
    
            * g++.dg/opt/pr94618.C: New test.
    
    (cherry picked from commit c41884a09206be0e21cad7eea71b9754daa969d4)

commit 5b23b0c44692cc5e4d5e726f96497bff73094e7b
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Fri Apr 17 09:07:49 2020 +0200

    inliner: Don't ICE on NULL TYPE_DOMAIN [PR94621]
    
    When I've added the VLA tweak for OpenMP to avoid error_mark_nodes in the IL in
    type, I forgot that TYPE_DOMAIN could be NULL.  Furthermore, as an optimization,
    this patch checks the hopefully cheapest condition that is very likely false
    most of the time (enabled only during OpenMP handling) first.
    
    2020-04-17  Jakub Jelinek  <jakub@redhat.com>
    
            PR tree-optimization/94621
            * tree-inline.c (remap_type_1): Don't dereference NULL TYPE_DOMAIN.
            Move id->adjust_array_error_bounds check first in the condition.
    
            * gcc.c-torture/compile/pr94621.c: New test.
    
    (cherry picked from commit c58cb6ac6891886b7aa01c440ac71a5e7cbcba97)

commit a43981bb51fd0b8e68452faea6ec160cbea058e5
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Apr 16 07:19:57 2020 +0200

    c++: Fix pasto in structured binding diagnostics [PR94571]
    
    This snippet has been copied from the non-structured binding declaration
    parsing later in the function, and while for non-structured bindings
    it can be followed by comma or semicolon, structured bindings may be
    only followed by semicolon.
    
    Or, do we want to have a different message for the case when there is
    a comma (and keep this corrected one only if there is something else)
    that would explain better what is the bug (or add a fix-it hint)?
    Marek said in the PR that clang++ reports
    error: decomposition declaration must be the only declaration in its group
    
    There is another thing Marek noted (though, something for different spot),
    that diagnostic for auto x(1), [e,f] = test2; could also use a clearer
    wording like the above (or a fix-it hint), but the question is if we should
    assume [ after , as a structured binding or if we should do some tentative
    parsing first to figure out if it looks like a structured binding.
    
    2020-04-16  Jakub Jelinek  <jakub@redhat.com>
    
            PR c++/94571
            * parser.c (cp_parser_simple_declaration): Fix up a pasto in
            diagnostics.
    
            * g++.dg/cpp1z/decomp51.C: New test.
    
    (cherry picked from commit e4658c7dbbe88f742c96e5f58ee4a6d549d642ca)

commit 489c62beef150f870d1755d3772bd2d0ce7344b4
Author: Gustavo Romero <gromero@linux.ibm.com>
Date:   Wed Apr 15 15:14:45 2020 +0200

    selftest: Work around GCC 4.2 PR33916 bug by optimizing the ctor [PR89494]
    
    GCC 4.2 due to PR33916 miscompiles temp_dump_context ctor, because it doesn't
    zero initialize the whole dump_context temporary on which it runs the static
    get method and during destruction of the temporary an uninitialized pointer
    is deleted.
    
    More recent GCC versions properly zero initialize it and ideally optimize away
    the construction/destruction of the temporary, as it isn't used for anything,
    but there is no reason to create the temporary, static member functions can
    be called without an associated object.
    
    2020-04-15  Gustavo Romero  <gromero@linux.ibm.com>
    
            PR bootstrap/89494
            * dumpfile.c (selftest::temp_dump_context::temp_dump_context):
            Don't construct a dump_context temporary to call static method.
    
    (cherry picked from commit c00568f376078129196740d83946d54dc5437401)

commit 780b2ab071391495690141c61604370d6cf7af49
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Wed Apr 8 21:22:05 2020 +0200

    vect: Fix up lowering of TRUNC_MOD_EXPR by negative constant [PR94524]
    
    The first testcase below is miscompiled, because for the division part
    of the lowering we canonicalize negative divisors to their absolute value
    (similarly how expmed.c canonicalizes it), but when multiplying the division
    result back by the VECTOR_CST, we use the original constant, which can
    contain negative divisors.
    
    Fixed by computing ABS_EXPR of the VECTOR_CST.  Unfortunately, fold-const.c
    doesn't support const_unop (ABS_EXPR, VECTOR_CST) and I think it is too late
    in GCC 10 cycle to add it now.
    
    Furthermore, while modulo by most negative constant happens to return the
    right value, it does that only by invoking UB in the IL, because
    we then expand division by that 1U+INT_MAX and say for INT_MIN % INT_MIN
    compute the division as -1, and then multiply by INT_MIN, which is signed
    integer overflow.  We in theory could do the computation in unsigned vector
    types instead, but is it worth bothering.  People that are doing % INT_MIN
    are either testing for standard conformance, or doing something wrong.
    So, I've also added punting on % INT_MIN, both in vect lowering and vect
    pattern recognition (we punt already for / INT_MIN).
    
    2020-04-08  Jakub Jelinek  <jakub@redhat.com>
    
            PR tree-optimization/94524
            * tree-vect-generic.c (expand_vector_divmod): If any elt of op1 is
            negative for signed TRUNC_MOD_EXPR, multiply with absolute value of
            op1 rather than op1 itself at the end.  Punt for signed modulo by
            most negative constant.
            * tree-vect-patterns.c (vect_recog_divmod_pattern): Punt for signed
            modulo by most negative constant.
    
            * gcc.c-torture/execute/pr94524-1.c: New test.
            * gcc.c-torture/execute/pr94524-2.c: New test.
    
    (cherry picked from commit f52eb4f988992d393c69ee4ab76f236dced80e36)

commit cb09410d3c61d325c64b17eabe9dfd1609cec1a6
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Wed Apr 8 18:24:12 2020 +0200

    i386: Don't use AVX512F integral masks for V*TImode [PR94438]
    
    The ix86_get_mask_mode hook uses int mask for 512-bit vectors or 128/256-bit
    vectors with AVX512VL (that is correct), and only for V*[SD][IF]mode if not
    AVX512BW (also correct), but with AVX512BW it would stop checking the
    elem_size altogether and pretend the hw has masking support for V*TImode
    etc., which it doesn't.  That can lead to various ICEs later on.
    
    2020-04-08  Jakub Jelinek  <jakub@redhat.com>
    
            PR target/94438
            * config/i386/i386.c (ix86_get_mask_mode): Only use int mask for elem_size
            1, 2, 4 and 8.
    
            * gcc.target/i386/avx512bw-pr94438.c: New test.
            * gcc.target/i386/avx512vlbw-pr94438.c: New test.
    
    (cherry picked from commit 8bf5faa9c463f0d53ffe835ba03d4502edfb959d)

commit 175f052446556d32e887e1658a5a92c3c2f3a6f5
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Wed Apr 8 15:30:16 2020 +0200

    c++: Further fix for -fsanitize=vptr [PR94325]
    
    For -fsanitize=vptr, we insert a NULL store into the vptr instead of just
    adding a CLOBBER of this.  build_clobber_this makes the CLOBBER conditional
    on in_charge (implicit) parameter whenever CLASSTYPE_VBASECLASSES, but when
    adding this conditionalization to the -fsanitize=vptr code in PR87095,
    I wanted it to catch some more cases when the class has CLASSTYPE_VBASECLASSES,
    but the vptr is still not shared with something else, otherwise the
    sanitization would be less effective.
    The following testcase shows that the chosen test that CLASSTYPE_PRIMARY_BINFO
    is non-NULL and has BINFO_VIRTUAL_P set wasn't sufficient,
    the D class has still sizeof(D) == sizeof(void*) and thus contains just
    a single vptr, but while in B::~B() this results in the vptr not being
    cleared, in C::~C() this condition isn't true, as CLASSTYPE_PRIMARY_BINFO
    in that case is B and is not BINFO_VIRTUAL_P, so it clears the vptr, but the
    D::~D() dtor after invoking C::~C() invokes A::~A() with an already cleared
    vptr, which is then reported.
    The following patch is just a shot in the dark, keep looking through
    CLASSTYPE_PRIMARY_BINFO until we find BINFO_VIRTUAL_P, but it works on the
    existing testcase as well as this new one.
    
    2020-04-08  Jakub Jelinek  <jakub@redhat.com>
    
            PR c++/94325
            * decl.c (begin_destructor_body): For CLASSTYPE_VBASECLASSES class
            dtors, if CLASSTYPE_PRIMARY_BINFO is non-NULL, but not BINFO_VIRTUAL_P,
            look at CLASSTYPE_PRIMARY_BINFO of its BINFO_TYPE if it is not
            BINFO_VIRTUAL_P, and so on.
    
            * g++.dg/ubsan/vptr-15.C: New test.
    
    (cherry picked from commit 4cf6b06cb5b02c053738e2975e3b7a4b3c577401)

commit c5aca0333b723d5e20366593cd01047d105f54e4
Author: Sylvia Taylor <sylvia.taylor@arm.com>
Date:   Thu Aug 22 11:28:26 2019 +0000

    add intrinsics for vld1(q)_x4 and vst1(q)_x4
    
    This patch adds the intrinsic functions for:
    - vld1_<mode>_x4
    - vst1_<mode>_x4
    - vld1q_<mode>_x4
    - vst1q_<mode>_x4
    
    Bootstrapped and tested on aarch64-none-linux-gnu.
    
    Committed on behalf of Sylvia Taylor.
    
    2019-08-22  Sylvia Taylor  <sylvia.taylor@arm.com>
    
    gcc/
            * config/aarch64/aarch64-simd-builtins.def:
            (ld1x4): New.
            (st1x4): Likewise.
            * config/aarch64/aarch64-simd.md:
            (aarch64_ld1x4<VALLDIF:mode>): New pattern.
            (aarch64_st1x4<VALLDIF:mode>): Likewise.
            (aarch64_ld1_x4_<mode>): Likewise.
            (aarch64_st1_x4_<mode>): Likewise.
            * config/aarch64/arm_neon.h:
            (vld1_s8_x4): New function.
            (vld1q_s8_x4): Likewise.
            (vld1_s16_x4): Likewise.
            (vld1q_s16_x4): Likewise.
            (vld1_s32_x4): Likewise.
            (vld1q_s32_x4): Likewise.
            (vld1_u8_x4): Likewise.
            (vld1q_u8_x4): Likewise.
            (vld1_u16_x4): Likewise.
            (vld1q_u16_x4): Likewise.
            (vld1_u32_x4): Likewise.
            (vld1q_u32_x4): Likewise.
            (vld1_f16_x4): Likewise.
            (vld1q_f16_x4): Likewise.
            (vld1_f32_x4): Likewise.
            (vld1q_f32_x4): Likewise.
            (vld1_p8_x4): Likewise.
            (vld1q_p8_x4): Likewise.
            (vld1_p16_x4): Likewise.
            (vld1q_p16_x4): Likewise.
            (vld1_s64_x4): Likewise.
            (vld1_u64_x4): Likewise.
            (vld1_p64_x4): Likewise.
            (vld1q_s64_x4): Likewise.
            (vld1q_u64_x4): Likewise.
            (vld1q_p64_x4): Likewise.
            (vld1_f64_x4): Likewise.
            (vld1q_f64_x4): Likewise.
            (vst1_s8_x4): Likewise.
            (vst1q_s8_x4): Likewise.
            (vst1_s16_x4): Likewise.
            (vst1q_s16_x4): Likewise.
            (vst1_s32_x4): Likewise.
            (vst1q_s32_x4): Likewise.
            (vst1_u8_x4): Likewise.
            (vst1q_u8_x4): Likewise.
            (vst1_u16_x4): Likewise.
            (vst1q_u16_x4): Likewise.
            (vst1_u32_x4): Likewise.
            (vst1q_u32_x4): Likewise.
            (vst1_f16_x4): Likewise.
            (vst1q_f16_x4): Likewise.
            (vst1_f32_x4): Likewise.
            (vst1q_f32_x4): Likewise.
            (vst1_p8_x4): Likewise.
            (vst1q_p8_x4): Likewise.
            (vst1_p16_x4): Likewise.
            (vst1q_p16_x4): Likewise.
            (vst1_s64_x4): Likewise.
            (vst1_u64_x4): Likewise.
            (vst1_p64_x4): Likewise.
            (vst1q_s64_x4): Likewise.
            (vst1q_u64_x4): Likewise.
            (vst1q_p64_x4): Likewise.
            (vst1_f64_x4): Likewise.
            (vst1q_f64_x4): Likewise.
    
    gcc/testsuite/
            * gcc.target/aarch64/advsimd-intrinsics/vld1x4.c: New test.
            * gcc.target/aarch64/advsimd-intrinsics/vst1x4.c: New test.
    
    (cherry picked from commit 391625888d4d97f9016ab9ac04acc55d81f0c26f)

commit b0dc0c07a27dc8c9c76f982bed477781a185c080
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Sep 16 00:18:28 2020 +0000

    Daily bump.

commit 04a9b796436c68a07c052805631e962a1126dcca
Author: Will Schmidt <will_schmidt@vnet.ibm.com>
Date:   Tue Sep 15 15:06:08 2020 -0500

    [PATCH, rs6000] Fix vector long long subtype (PR96139)
    
    Hi,
      This corrects an issue with the powerpc vector long long subtypes.
    As reported by SjMunroe, when building some code with -Wall, and
    attempting to print an element of a "long long vector" with a
    long long printf format string, we will report an error because
    the vector sub-type was improperly defined as int.
    
    When defining a V2DI_type_node we use a TARGET_POWERPC64 ternary to
    define the V2DI_type_node with "vector long" or "vector long long".
    We also need to specify the proper sub-type when we define the type.
    
    Due to some file renames, This is a backport and rework of both
        [PATCH, rs6000] Fix vector long long subtype (PR96139)
    and
        [PATCH, rs6000] Testsuite fixup pr96139 tests
    
    
    PR target/96139
    
    2020-09-03  Will Schmidt  <will_schmidt@vnet.ibm.com>
    
    gcc/ChangeLog:
            * config/rs6000/rs6000.c (rs6000_init_builtin): Update V2DI_type_node
            and unsigned_V2DI_type_node definitions.
    
    gcc/testsuite/ChangeLog:
            * gcc.target/powerpc/pr96139-a.c: New test.
            * gcc.target/powerpc/pr96139-b.c: New test.
            * gcc.target/powerpc/pr96139-c.c: New test.

commit d0a094ce39fc49681b0d5cfd2ee1d232859c4824
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Sep 15 09:37:48 2020 +0200

    i386: Fix up vector mul and div with broadcasts in -masm=intel mode
    
    These patterns printed bogus <>s around the {1to16} and similar strings.
    
    2020-09-15  Jakub Jelinek  <jakub@redhat.com>
    
            PR target/97028
            * config/i386/sse.md (mul<mode>3<mask_name>_bcs,
            <avx512>_div<mode>3<mask_name>_bcst): Use <avx512bcst> instead of
            <<avx512bcst>>.
    
            * gcc.target/i386/avx512f-pr97028.c: Untested fix.
    
    (cherry picked from commit 0f079e104a8d1994b6b47169a6b45737615eb2d7)

commit ce74ad2f0f211533bc524cf2ce6e58ba7928bfee
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Sep 15 00:18:32 2020 +0000

    Daily bump.

commit 3c035affb6f5a676365cfef9516945b168ff333e
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Sep 14 00:18:12 2020 +0000

    Daily bump.

commit f71ca5cab1b7acb0f671f33211c2258343cca53d
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Sep 13 00:18:11 2020 +0000

    Daily bump.

commit d8eb8abfb8c929b67ef5da35f367b544f583d479
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Sep 12 00:18:25 2020 +0000

    Daily bump.

commit 7cfb86a2a18c9d54d1fd43f17affcd184477ecb3
Author: Richard Biener <rguenther@suse.de>
Date:   Thu May 7 14:06:02 2020 +0200

    ipa/94947 - avoid using externally_visible_p ()
    
    externally_visible_p wasn't the correct predicate to use (even if it
    worked), instead we should use DECL_EXTERNAL || TREE_PUBLIC.
    
    2020-05-07  Richard Biener  <rguenther@suse.de>
    
            PR ipa/94947
            * tree-ssa-structalias.c (refered_from_nonlocal_fn): Use
            DECL_EXTERNAL || TREE_PUBLIC instead of externally_visible.
            (refered_from_nonlocal_var): Likewise.
            (ipa_pta_execute): Likewise.
    
    (cherry picked from commit b9250b3cb91b667cd67943e0fac94bf39ac089a8)

commit 0bcf016768f32799d4dabc82a29440b2ab1d717b
Author: Richard Biener <rguenther@suse.de>
Date:   Tue May 5 13:09:50 2020 +0200

    ipa/94947 - fix test for externally visible variables for IPA PTA
    
    This fixes lack of an escape point of externally declared variables.
    
    2020-05-05  Richard Biener  <rguenther@suse.de>
    
            PR ipa/94947
            * tree-ssa-structalias.c (ipa_pta_execute): Use
            varpool_node::externally_visible_p ().
            (refered_from_nonlocal_var): Likewise.
    
            * gcc.dg/torture/pr94947-1.c: New testcase.
            * gcc.dg/torture/pr94947-2.c: Likewise.
    
    (cherry picked from commit f9b5db750bc7fbba69fee93564907f7da1bca35f)

commit 95a8572ce7bdf152cc8c7d069ce24508a9ff0bfe
Author: Richard Biener <rguenther@suse.de>
Date:   Wed May 6 10:23:15 2020 +0200

    middle-end/94964 - avoid EH loop entry with CP_SIMPLE_PREHEADERS
    
    Loop optimizers expect to be able to insert on the preheader
    edge w/o splitting it thus avoid ending up with a preheader
    that enters the loop via an EH edge (or an abnormal edge).
    
    2020-05-06  Richard Biener  <rguenther@suse.de>
    
            PR middle-end/94964
            * cfgloopmanip.c (create_preheader): Require non-complex
            preheader edge for CP_SIMPLE_PREHEADERS.
    
    (cherry picked from commit 6fc00b41e764219e2c88d8892d7c701c0d292a17)

commit 0c7ae564f42b605e21001e5e6968a58cc454be9b
Author: Richard Biener <rguenther@suse.de>
Date:   Mon May 11 13:40:37 2020 +0200

    tree-optimization/95049 - fix not terminating RPO VN iteration
    
    This rejects lattice changes from one constant to another.
    
    2020-05-11  Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/95049
            * tree-ssa-sccvn.c (set_ssa_val_to): Reject lattice transition
            between different constants.
    
            * gcc.dg/torture/pr95049.c: New testcase.
    
    (cherry picked from commit 84f4954c38228e4cb3e6f0b5471883e6c2523631)

commit 5024ea60b74ac61c00b2aee40878761f7cf58973
Author: Richard Biener <rguenther@suse.de>
Date:   Fri May 15 09:38:54 2020 +0200

    tree-optimization/95133 - avoid abnormal edges in path splitting
    
    When path splitting tries to detect a CFG diamond make sure it
    is composed of normal (non-EH, not abnormal) edges.  Otherwise
    CFG manipulation later may fail.
    
    2020-05-15  Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/95133
            * gimple-ssa-split-paths.c
            (find_block_to_duplicate_for_splitting_paths): Check for
            normal edges.
    
            * gcc.dg/pr95133.c: New testcase.
    
    (cherry picked from commit aaf1ee48316f9b414b11c17e298198925d816595)

commit 1102a2c1fd221ee38f2f41aaf1094d4abbc3aedc
Author: Richard Biener <rguenther@suse.de>
Date:   Wed Jun 17 14:57:59 2020 +0200

    tree-optimization/95717 - fix SSA update for vectorizer epilogue
    
    This fixes yet another issue with the custom SSA updating in the
    vectorizer when we copy from the non-if-converted loop.  We must
    not mess with current defs before we updated the BB copies.
    
    2020-06-17  Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/95717
            * tree-vect-loop-manip.c (slpeel_tree_duplicate_loop_to_edge_cfg):
            Move BB SSA updating before exit/latch PHI current def copying.
    
            * g++.dg/torture/pr95717.C: New testcase.
    
    (cherry picked from commit d0909f5858ad81e6d8b73fa6193be19cb5e6ed7b)

commit 6d06c17e9f470f4a2d7e41ca6f3a8b36c729dc6a
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Wed Mar 18 23:19:12 2020 +0000

    libstdc++: Fix is_trivially_constructible (PR 94033)
    
    This attempts to make is_nothrow_constructible more robust (and
    efficient to compile) by not depending on is_constructible. Instead the
    __is_constructible intrinsic is used directly. The helper class
    __is_nt_constructible_impl which checks whether the construction is
    non-throwing now takes a bool template parameter that is substituted by
    the result of the instrinsic. This fixes the reported bug by not using
    the already-instantiated (and incorrect) value of std::is_constructible.
    I don't think it really fixes the problem in general, because
    std::is_nothrow_constructible itself could already have been
    instantiated in a context where it gives the wrong result. A proper fix
    needs to be done in the compiler.
    
    Backported to the gcc-8 and gcc-9 branches to fix PR 96999.
    
            PR libstdc++/94033
            * include/std/type_traits (__is_nt_default_constructible_atom): Remove.
            (__is_nt_default_constructible_impl): Remove.
            (__is_nothrow_default_constructible_impl): Remove.
            (__is_nt_constructible_impl): Add bool template parameter. Adjust
            partial specializations.
            (__is_nothrow_constructible_impl): Replace class template with alias
            template.
            (is_nothrow_default_constructible): Derive from alias template
            __is_nothrow_constructible_impl instead of
            __is_nothrow_default_constructible_impl.
            * testsuite/20_util/is_nothrow_constructible/94003.cc: New test.
    
    (cherry picked from commit b3341826531e80e02f194460b4fbe1b0541c0463)

commit b3a51b99dbba2035723ccec69a8f0037f547bddf
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Fri Sep 11 10:41:28 2020 +0200

    Fix crash on array component with nonstandard index type
    
    This is a regression present on mainline, 10 and 9 branches: the compiler
    goes into an infinite recursion eventually exhausting the stack for the
    declaration of a discriminated record type with an array component having
    a discriminant as bound and an index type that is an enumeration type with
    a non-standard representation clause.
    
    gcc/ada/ChangeLog:
            * gcc-interface/decl.c (gnat_to_gnu_entity) <E_Array_Subtype>: Only
            create extra subtypes for discriminants if the RM size of the base
            type of the index type is lower than that of the index type.
    
    gcc/testsuite/ChangeLog:
            * gnat.dg/specs/discr7.ads: New test.

commit 0679082b1db61603472aec2a1d704bbf25d64686
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Fri Sep 11 10:19:10 2020 +0200

    Adjust email address

commit 10f5c90ea5640dc6a51cae2f178e119fff7d6d51
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Sep 11 00:18:08 2020 +0000

    Daily bump.

commit 3bad57d476f7a96dc7a73081196eb53d6f516481
Author: Eric Botcazou <ebotcazou@gcc.gnu.org>
Date:   Thu Sep 10 17:47:32 2020 +0200

    Fix uninitialized variable with nested variant record types
    
    This fixes a wrong code issue with nested variant record types: the
    compiler generates move instructions that depend on an uninitialized
    variable, which was initially a SAVE_EXPR not instantiated early enough.
    
    gcc/ada/ChangeLog:
            * gcc-interface/decl.c (build_subst_list): For a definition, make
            sure to instantiate the SAVE_EXPRs generated by the elaboration of
            the constraints in front of the elaboration of the type itself.
    
    gcc/testsuite/ChangeLog:
            * gnat.dg/discr59.adb: New test.
            * gnat.dg/discr59_pkg1.ads: New helper.
            * gnat.dg/discr59_pkg2.ads: Likewise.

commit c170582594944a2b881b9f03d09f0ff09febcf26
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Sep 10 00:18:15 2020 +0000

    Daily bump.

commit 32f34977d60cafce47e10e601d7ccc7bbfbfabb9
Author: Harald Anlauf <anlauf@gmx.de>
Date:   Thu Sep 3 20:33:14 2020 +0200

    PR fortran/96890 - Wrong answer with intrinsic IALL
    
    The IALL intrinsic would always return 0 when the DIM and MASK arguments
    were present since the initial value of repeated BIT-AND operations was
    set to 0 instead of -1.
    
    libgfortran/ChangeLog:
    
            * m4/iall.m4: Initial value for result should be -1.
            * generated/iall_i1.c (miall_i1): Generated.
            * generated/iall_i16.c (miall_i16): Likewise.
            * generated/iall_i2.c (miall_i2): Likewise.
            * generated/iall_i4.c (miall_i4): Likewise.
            * generated/iall_i8.c (miall_i8): Likewise.
    
    gcc/testsuite/ChangeLog:
    
            * gfortran.dg/iall_masked.f90: New test.
    
    (cherry picked from commit 8eeeecbcc17041fdfd3ccc928161ae86e7f9b456)

commit 5353d0ba23f56039c01c0753ad69c4b02fa73c7a
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Sep 9 00:18:16 2020 +0000

    Daily bump.

commit ad67f1e77c9d994165be0f03076310908e422fb3
Author: Thomas Koenig <tkoenig@gcc.gnu.org>
Date:   Tue Sep 8 08:13:29 2020 +0200

    Fix description of FINDLOC result.
    
    gcc/fortran/ChangeLog:
    
            * intrinsic.texi: Fix description of FINDLOC result.
    
    (cherry picked from commit 213200a27d756df1709be1a1a6a85af97a32fddc)

commit 1eaa4c2f8584de3a40647f500c35c08e9eba240a
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Sep 8 00:18:22 2020 +0000

    Daily bump.

commit fe6f6d44d9ae8ab1ab360e910fb47c6232dddc8d
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Sep 7 00:18:14 2020 +0000

    Daily bump.

commit 586896484ddee146ce872b05ca2521b74b15afaa
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Sep 6 00:18:11 2020 +0000

    Daily bump.

commit fc0256c1fc4cea9a4a77049832f6995afc532e87
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Sep 5 00:18:07 2020 +0000

    Daily bump.

commit 5371ab207594ae2ef4c5223c2adae88b7a27b76b
Author: Kewen Lin <linkw@linux.ibm.com>
Date:   Thu Sep 3 21:28:51 2020 -0500

    changelog: Fix up changelogs for commit 8c18220564

commit e71b6bcd222972c233e2f44d2ea71c565a388e66
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Sep 4 00:18:27 2020 +0000

    Daily bump.

commit 7f84245366067259bc5604f5abf8b1e0c8e16b71
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Thu Apr 30 15:47:52 2020 +0100

    libstdc++: Avoid errors in allocator's noexcept-specifier (PR 89510)
    
    This fixes a regression due to the conditional noexcept-specifier on
    std::allocator::construct and std::allocator::destroy, as well as the
    corresponding members of new_allocator, malloc_allocator, and
    allocator_traits. Those noexcept-specifiers were using expressions which
    might be ill-formed, which caused errors outside the immediate context
    when checking for the presence of construct and destroy in SFINAE
    contexts.
    
    The fix is to use the is_nothrow_constructible and
    is_nothrow_destructible type traits instead, because those traits are
    safe to use even when the construction/destruction itself is not valid.
    
    The is_nothrow_constructible trait will be false for a type that is not
    also nothrow-destructible, even if the new-expression used in the
    construct function body is actually noexcept. That's not the correct
    answer, but isn't a problem because providing a noexcept-specifier on
    these functions is not required by the standard anyway. If the answer is
    false when it should be true, that's suboptimal but OK (unlike giving
    errors for valid code, or giving a true answer when it should be false).
    
            PR libstdc++/89510
            * include/bits/alloc_traits.h (allocator_traits::_S_construct)
            (allocator_traits::_S_destroy)
            (allocator_traits<allocator<T>>::construct): Use traits in
            noexcept-specifiers.
            * include/bits/allocator.h (allocator<void>::construct)
            (allocator<void>::destroy): Likewise.
            * include/ext/malloc_allocator.h (malloc_allocator::construct)
            (malloc_allocator::destroy): Likewise.
            * include/ext/new_allocator.h (new_allocator::construct)
            (new_allocator::destroy): Likewise.
            * testsuite/20_util/allocator/89510.cc: New test.
            * testsuite/ext/malloc_allocator/89510.cc: New test.
            * testsuite/ext/new_allocator/89510.cc: New test.
    
    (cherry picked from commit b1983f4582bbe060b7da83578acb9ed653681fc8)

commit 9790fa53b48f3a48e0f7a7ad65e2bbf3b206a7b0
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Sep 3 00:18:16 2020 +0000

    Daily bump.

commit 8c18220564f8372f4d45ed1a4df3fc7f71928654
Author: Kewen Lin <linkw@linux.ibm.com>
Date:   Tue Sep 1 21:12:32 2020 -0500

    rs6000: Backport fixes for PR92923 and PR93136
    
    This patch is to backport the fix for PR92923 and its sequent fix
    for PR93136.  We found the builtin functions needlessly using
    VIEW_CONVERT_EXPRs on their operands can probably cause remarkable
    performance degradation especailly when they are used in the hotspot.
    One typical case is
      ...github.com/antonblanchard/crc32-vpmsum/blob/master/vec_crc32.c
    With this patch, the execution time can improve 47.81%.
    
    Apart from the original fixes, this patch also gets two cases below
    updated.  During the regression testing I found two cases failed due
    to icf optimization able to be adopted with this patch, the function
    bodies use tail calls, the expected assembly instructions are gone.
    
      gcc.target/powerpc/fold-vec-logical-ands-longlong.c
      gcc.target/powerpc/fold-vec-logical-ors-longlong.c
    
    Bootstrapped/regtested on powerpc64{,le}-linux-gnu P8.
    
    2019-12-30  Peter Bergner <bergner@linux.ibm.com>
    
    gcc/ChangeLog
    
            PR target/92923
            * config/rs6000/rs6000-builtin.def (VAND, VANDC, VNOR, VOR, VXOR):
            Delete.
            (EQV_V16QI_UNS, EQV_V8HI_UNS, EQV_V4SI_UNS, EQV_V2DI_UNS, EQV_V1TI_UNS,
            NAND_V16QI_UNS, NAND_V8HI_UNS, NAND_V4SI_UNS, NAND_V2DI_UNS,
            NAND_V1TI_UNS, ORC_V16QI_UNS, ORC_V8HI_UNS, ORC_V4SI_UNS, ORC_V2DI_UNS,
            ORC_V1TI_UNS, VAND_V16QI_UNS, VAND_V16QI, VAND_V8HI_UNS, VAND_V8HI,
            VAND_V4SI_UNS, VAND_V4SI, VAND_V2DI_UNS, VAND_V2DI, VAND_V4SF,
            VAND_V2DF, VANDC_V16QI_UNS, VANDC_V16QI, VANDC_V8HI_UNS, VANDC_V8HI,
            VANDC_V4SI_UNS, VANDC_V4SI, VANDC_V2DI_UNS, VANDC_V2DI, VANDC_V4SF,
            VANDC_V2DF, VNOR_V16QI_UNS, VNOR_V16QI, VNOR_V8HI_UNS, VNOR_V8HI,
            VNOR_V4SI_UNS, VNOR_V4SI, VNOR_V2DI_UNS, VNOR_V2DI, VNOR_V4SF,
            VNOR_V2DF, VOR_V16QI_UNS, VOR_V16QI, VOR_V8HI_UNS, VOR_V8HI,
            VOR_V4SI_UNS, VOR_V4SI, VOR_V2DI_UNS, VOR_V2DI, VOR_V4SF, VOR_V2DF,
            VXOR_V16QI_UNS, VXOR_V16QI, VXOR_V8HI_UNS, VXOR_V8HI,
            VXOR_V4SI_UNS, VXOR_V4SI, VXOR_V2DI_UNS, VXOR_V2DI, VXOR_V4SF,
            VXOR_V2DF): Add definitions.
            * config/rs6000/rs6000-c.c (altivec_overloaded_builtins)
            <ALTIVEC_BUILTIN_VAND, ALTIVEC_BUILTIN_VANDC, ALTIVEC_BUILTIN_VNOR,
            ALTIVEC_BUILTIN_VOR, ALTIVEC_BUILTIN_VXOR>: Remove.
            <ALTIVEC_BUILTIN_VAND_V4SF, ALTIVEC_BUILTIN_VAND_V2DF,
            ALTIVEC_BUILTIN_VAND_V2DI, ALTIVEC_BUILTIN_VAND_V2DI_UNS,
            ALTIVEC_BUILTIN_VAND_V4SI_UNS, ALTIVEC_BUILTIN_VAND_V4SI,
            ALTIVEC_BUILTIN_VAND_V8HI_UNS, ALTIVEC_BUILTIN_VAND_V8HI,
            ALTIVEC_BUILTIN_VAND_V16QI, ALTIVEC_BUILTIN_VAND_V16QI_UNS,
            ALTIVEC_BUILTIN_VANDC_V4SF, ALTIVEC_BUILTIN_VANDC_V2DF,
            ALTIVEC_BUILTIN_VANDC_V2DI, ALTIVEC_BUILTIN_VANDC_V2DI_UNS,
            ALTIVEC_BUILTIN_VANDC_V4SI_UNS, ALTIVEC_BUILTIN_VANDC_V4SI,
            ALTIVEC_BUILTIN_VANDC_V8HI_UNS, ALTIVEC_BUILTIN_VANDC_V8HI,
            ALTIVEC_BUILTIN_VANDC_V16QI, ALTIVEC_BUILTIN_VANDC_V16QI_UNS,
            ALTIVEC_BUILTIN_VNOR_V4SF, ALTIVEC_BUILTIN_VNOR_V2DF,
            ALTIVEC_BUILTIN_VNOR_V2DI, ALTIVEC_BUILTIN_VNOR_V2DI_UNS,
            ALTIVEC_BUILTIN_VNOR_V4SI, ALTIVEC_BUILTIN_VNOR_V4SI_UNS,
            ALTIVEC_BUILTIN_VNOR_V8HI, ALTIVEC_BUILTIN_VNOR_V8HI_UNS,
            ALTIVEC_BUILTIN_VNOR_V16QI, ALTIVEC_BUILTIN_VNOR_V16QI_UNS,
            ALTIVEC_BUILTIN_VOR_V4SF, ALTIVEC_BUILTIN_VOR_V2DF,
            ALTIVEC_BUILTIN_VOR_V2DI, ALTIVEC_BUILTIN_VOR_V2DI_UNS,
            ALTIVEC_BUILTIN_VOR_V4SI_UNS, ALTIVEC_BUILTIN_VOR_V4SI,
            ALTIVEC_BUILTIN_VOR_V8HI_UNS, ALTIVEC_BUILTIN_VOR_V8HI,
            ALTIVEC_BUILTIN_VOR_V16QI, ALTIVEC_BUILTIN_VOR_V16QI_UNS,
            ALTIVEC_BUILTIN_VXOR_V4SF, ALTIVEC_BUILTIN_VXOR_V2DF,
            ALTIVEC_BUILTIN_VXOR_V2DI, ALTIVEC_BUILTIN_VXOR_V2DI_UNS,
            ALTIVEC_BUILTIN_VXOR_V4SI_UNS, ALTIVEC_BUILTIN_VXOR_V4SI,
            ALTIVEC_BUILTIN_VXOR_V8HI, ALTIVEC_BUILTIN_VXOR_V8HI_UNS,
            ALTIVEC_BUILTIN_VXOR_V16QI, ALTIVEC_BUILTIN_VXOR_V16QI_UNS>: Add
            definitions.
            <P8V_BUILTIN_EQV_V16QI, P8V_BUILTIN_EQV_V8HI, P8V_BUILTIN_EQV_V4SI,
            P8V_BUILTIN_EQV_V2DI, P8V_BUILTIN_NAND_V16QI, P8V_BUILTIN_NAND_V8HI,
            P8V_BUILTIN_NAND_V4SI, P8V_BUILTIN_NAND_V2DI, P8V_BUILTIN_ORC_V16QI,
            P8V_BUILTIN_ORC_V8HI, P8V_BUILTIN_ORC_V4SI,
            P8V_BUILTIN_ORC_V2DI>: Change unsigned usages to use the new *_UNS
            definition names.
            * config/rs6000/rs6000.c
            (rs6000_gimple_fold_builtin) <ALTIVEC_BUILTIN_VAND_V16QI_UNS,
            ALTIVEC_BUILTIN_VAND_V16QI, ALTIVEC_BUILTIN_VAND_V8HI_UNS,
            ALTIVEC_BUILTIN_VAND_V8HI, ALTIVEC_BUILTIN_VAND_V4SI_UNS,
            ALTIVEC_BUILTIN_VAND_V4SI, ALTIVEC_BUILTIN_VAND_V2DI_UNS,
            ALTIVEC_BUILTIN_VAND_V2DI, ALTIVEC_BUILTIN_VAND_V4SF,
            ALTIVEC_BUILTIN_VAND_V2DF, ALTIVEC_BUILTIN_VANDC_V16QI_UNS,
            ALTIVEC_BUILTIN_VANDC_V16QI, ALTIVEC_BUILTIN_VANDC_V8HI_UNS,
            ALTIVEC_BUILTIN_VANDC_V8HI, ALTIVEC_BUILTIN_VANDC_V4SI_UNS,
            ALTIVEC_BUILTIN_VANDC_V4SI, ALTIVEC_BUILTIN_VANDC_V2DI_UNS,
            ALTIVEC_BUILTIN_VANDC_V2DI, ALTIVEC_BUILTIN_VANDC_V4SF,
            ALTIVEC_BUILTIN_VANDC_V2DF, P8V_BUILTIN_NAND_V16QI_UNS,
            P8V_BUILTIN_NAND_V8HI_UNS, P8V_BUILTIN_NAND_V4SI_UNS,
            P8V_BUILTIN_NAND_V2DI_UNS, P8V_BUILTIN_NAND_V2DI,
            ALTIVEC_BUILTIN_VOR_V16QI_UNS, ALTIVEC_BUILTIN_VOR_V16QI,
            ALTIVEC_BUILTIN_VOR_V8HI_UNS, ALTIVEC_BUILTIN_VOR_V8HI,
            ALTIVEC_BUILTIN_VOR_V4SI_UNS, ALTIVEC_BUILTIN_VOR_V4SI,
            ALTIVEC_BUILTIN_VOR_V2DI_UNS, ALTIVEC_BUILTIN_VOR_V2DI,
            ALTIVEC_BUILTIN_VOR_V4SF, ALTIVEC_BUILTIN_VOR_V2DF,
            P8V_BUILTIN_ORC_V16QI_UNS, P8V_BUILTIN_ORC_V8HI_UNS,
            P8V_BUILTIN_ORC_V4SI_UNS, P8V_BUILTIN_ORC_V2DI_UNS,
            P8V_BUILTIN_ORC_V2DI, ALTIVEC_BUILTIN_VXOR_V16QI_UNS,
            ALTIVEC_BUILTIN_VXOR_V16QI, ALTIVEC_BUILTIN_VXOR_V8HI_UNS,
            ALTIVEC_BUILTIN_VXOR_V8HI, ALTIVEC_BUILTIN_VXOR_V4SI_UNS,
            ALTIVEC_BUILTIN_VXOR_V4SI, ALTIVEC_BUILTIN_VXOR_V2DI_UNS,
            ALTIVEC_BUILTIN_VXOR_V2DI, ALTIVEC_BUILTIN_VXOR_V4SF,
            ALTIVEC_BUILTIN_VXOR_V2DF, ALTIVEC_BUILTIN_VNOR_V16QI_UNS,
            ALTIVEC_BUILTIN_VNOR_V16QI, ALTIVEC_BUILTIN_VNOR_V8HI_UNS,
            ALTIVEC_BUILTIN_VNOR_V8HI, ALTIVEC_BUILTIN_VNOR_V4SI_UNS,
            ALTIVEC_BUILTIN_VNOR_V4SI, ALTIVEC_BUILTIN_VNOR_V2DI_UNS,
            ALTIVEC_BUILTIN_VNOR_V2DI, ALTIVEC_BUILTIN_VNOR_V4SF,
            ALTIVEC_BUILTIN_VNOR_V2DF>: Use new definition names.
            (builtin_function_type) <ALTIVEC_BUILTIN_VAND_V16QI_UNS,
            ALTIVEC_BUILTIN_VAND_V8HI_UNS, ALTIVEC_BUILTIN_VAND_V4SI_UNS,
            ALTIVEC_BUILTIN_VAND_V2DI_UNS, ALTIVEC_BUILTIN_VANDC_V16QI_UNS,
            ALTIVEC_BUILTIN_VANDC_V8HI_UNS, ALTIVEC_BUILTIN_VANDC_V4SI_UNS,
            ALTIVEC_BUILTIN_VANDC_V2DI_UNS, ALTIVEC_BUILTIN_VNOR_V16QI_UNS,
            ALTIVEC_BUILTIN_VNOR_V8HI_UNS, ALTIVEC_BUILTIN_VNOR_V4SI_UNS,
            ALTIVEC_BUILTIN_VNOR_V2DI_UNS, ALTIVEC_BUILTIN_VOR_V16QI_UNS,
            ALTIVEC_BUILTIN_VOR_V8HI_UNS, ALTIVEC_BUILTIN_VOR_V4SI_UNS,
            ALTIVEC_BUILTIN_VOR_V2DI_UNS, ALTIVEC_BUILTIN_VXOR_V16QI_UNS,
            ALTIVEC_BUILTIN_VXOR_V8HI_UNS, ALTIVEC_BUILTIN_VXOR_V4SI_UNS,
            ALTIVEC_BUILTIN_VXOR_V2DI_UNS, P8V_BUILTIN_EQV_V16QI_UNS,
            P8V_BUILTIN_EQV_V8HI_UNS, P8V_BUILTIN_EQV_V4SI_UNS,
            P8V_BUILTIN_EQV_V2DI_UNS, P8V_BUILTIN_EQV_V1TI_UNS,
            P8V_BUILTIN_NAND_V16QI_UNS, P8V_BUILTIN_NAND_V8HI_UNS,
            P8V_BUILTIN_NAND_V4SI_UNS, P8V_BUILTIN_NAND_V2DI_UNS,
            P8V_BUILTIN_NAND_V1TI_UNS, P8V_BUILTIN_ORC_V16QI_UNS,
            P8V_BUILTIN_ORC_V8HI_UNS, P8V_BUILTIN_ORC_V4SI_UNS,
            P8V_BUILTIN_ORC_V2DI_UNS, P8V_BUILTIN_ORC_V1TI_UNS>: Handle unsigned
            builtins.
    
    2019-12-30  Peter Bergner  <bergner@linux.ibm.com>
    2020-02-08  Peter Bergner  <bergner@linux.ibm.com>
    
    gcc/testsuite/ChangeLog
    
            * gcc.target/powerpc/fold-vec-logical-ands-longlong.c: Adjust.
            * gcc.target/powerpc/fold-vec-logical-ors-longlong.c: Likewise.
    
            PR target/92923
            * gcc.target/powerpc/pr92923-1.c: New test.
            * gcc.target/powerpc/pr92923-2.c: Likewise.
    
            PR target/93136
            * gcc.dg/vmx/ops.c: Add -flax-vector-conversions to dg-options.
            * gcc.target/powerpc/vsx-vector-6.h: Split tests into smaller functions.
            * gcc.target/powerpc/vsx-vector-6.p7.c: Adjust scan-assembler-times
            regex directives.  Adjust expected instruction counts.
            * gcc.target/powerpc/vsx-vector-6.p8.c: Likewise.
            * gcc.target/powerpc/vsx-vector-6.p9.c: Likewise.
    
    (cherry picked from commit 4559be2358020714ec7521c80589992716d23035)
    (cherry picked from commit 4b39d801b2698d0f756231f6f8fa0be5a36f0c05)

commit f5ec77cf6e50f6254f56de202aa6c9f55c43f526
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Sep 2 00:18:19 2020 +0000

    Daily bump.

commit 1404c0045ff7a138523b3a0a3448313762eb3e9f
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Sep 1 00:18:15 2020 +0000

    Daily bump.

commit 794a013c529c30611fe5e4a49c7cd8150badb344
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Aug 31 00:18:12 2020 +0000

    Daily bump.

commit ba059280f8792bfff0ac2cc4308f802caff05d6b
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Aug 30 00:18:09 2020 +0000

    Daily bump.

commit 58d3fb351ffe6cf1ad71b37bcceda05c09b44f98
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Aug 29 00:18:12 2020 +0000

    Daily bump.

commit 4c1b39564fa9794141df46ea42370d6ed0f46fcc
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Aug 28 00:18:08 2020 +0000

    Daily bump.

commit 042c58a4b8ba48fdf26c9003154e9d3b83d4c568
Author: Mark Eggleston <markeggleston@gcc.gnu.org>
Date:   Fri Aug 21 06:39:30 2020 +0100

    Fortran  : ICE for division by zero in declaration PR95882
    
    A length expression containing a divide by zero in a character
    declaration will result in an ICE if the constant is anymore
    complicated that a contant divided by a constant.
    
    The cause was that char_len_param_value can return MATCH_YES
    even if a divide by zero was seen.  Prior to returning check
    whether a divide by zero was seen and if so set it to MATCH_ERROR.
    
    2020-08-27  Mark Eggleston  <markeggleston@gcc.gnu.org>
    
    gcc/fortran
    
            PR fortran/95882
            * decl.c (char_len_param_value): Check gfc_seen_div0 and
            if it is set return MATCH_ERROR.
    
    2020-08-27  Mark Eggleston  <markeggleston@gcc.gnu.org>
    
    gcc/testsuite/
    
            PR fortran/95882
            * gfortran.dg/pr95882_1.f90: New test.
            * gfortran.dg/pr95882_2.f90: New test.
            * gfortran.dg/pr95882_3.f90: New test.
            * gfortran.dg/pr95882_4.f90: New test.
            * gfortran.dg/pr95882_5.f90: New test.
    
    (cherry picked from commit c336eda750d4e7a0827fedf995da955d6d88d5ca)

commit 967a5f8e585a5d499870903849c0fa06c326547a
Author: Christophe Lyon <christophe.lyon@linaro.org>
Date:   Wed Aug 19 09:02:21 2020 +0000

    arm: Fix -mpure-code support/-mslow-flash-data for armv8-m.base [PR94538]
    
    armv8-m.base (cortex-m23) has the movt instruction, so we need to
    disable the define_split to generate a constant in this case,
    otherwise we get incorrect insn constraints as described in PR94538.
    
    We also need to fix the pure-code alternative for thumb1_movsi_insn
    because the assembler complains with instructions like
    movs r0, #:upper8_15:1234
    (Internal error in md_apply_fix)
    We now generate movs r0, 4 instead.
    
    2020-08-24  Christophe Lyon  <christophe.lyon@linaro.org>
    
            PR target/94538
            gcc/
            * config/arm/thumb1.md: Disable set-constant splitter when
            TARGET_HAVE_MOVT.
            (thumb1_movsi_insn): Fix -mpure-code
            alternative.
    
            PR target/94538
            gcc/testsuite/
            * gcc.target/arm/pure-code/pr94538-1.c: New test.
            * gcc.target/arm/pure-code/pr94538-2.c: New test.
    
    (cherry picked from commit 259d072067997ab8f55afcf735c91b6740fd0425)

commit d831749b21a934929c13b1a042b1872263600f6b
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Aug 27 00:18:14 2020 +0000

    Daily bump.

commit 42fb390082b59c0b5af6a9f1e5a2e608ccb8e193
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Wed Aug 26 14:47:51 2020 +0100

    libstdc++: Enable assertions in constexpr string_view members [PR 71960]
    
    Since GCC 6.1 there is no reason we can't just use __glibcxx_assert in
    constexpr functions in string_view. As long as the condition is true,
    there will be no call to std::__replacement_assert that would make the
    function ineligible for constant evaluation.
    
            PR libstdc++/71960
            * include/experimental/string_view (basic_string_view):
            Enable debug assertions.
            * include/std/string_view (basic_string_view):
            Likewise.
    
    (cherry picked from commit 3eefb302d2bd8502cb3d8fe44e672b11092ccaf6)

commit 9def04578cca8a0850e835eb095d9ff60097f691
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Mon Aug 24 16:10:07 2020 +0100

    libstdc++: Make variant_npos conversions explicit [PR 96766]
    
    libstdc++-v3/ChangeLog:
    
            PR libstdc++/96766
            * include/std/variant (_Variant_storage): Replace implicit
            conversions from size_t to __index_type with explicit casts.
    
    (cherry picked from commit 074436cf8cdd2a9ce75cadd36deb8301f00e55b9)

commit de24191d18f4ee5721e95ac01b6a1a388569ada5
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Aug 26 00:18:28 2020 +0000

    Daily bump.

commit fc921d69523b7e8786e8abfa966f1965446fea07
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Aug 25 00:18:10 2020 +0000

    Daily bump.

commit bbe17767c602f1ff08a1520a1d989c6b86b536fd
Author: Mark Eggleston <markeggleston@gcc.gnu.org>
Date:   Mon Aug 10 08:07:39 2020 +0100

    Fortran  :  get_environment_variable runtime error PR96486
    
    Runtime error occurs when the type of the value argument is
    character(0):  "Zero-length string passed as value...".
    The status argument, intent(out), will contain -1 if the value
    of the environment is too large to fit in the value argument, this
    is the case if the type is character(0) so there is no reason to
    produce a runtime error if the value argument is zero length.
    
    2020-08-24  Mark Eggleston  <markeggleston@gcc.gnu.org>
    
    libgfortran/
    
            PR fortran/96486
            * intrinsics/env.c: If value_len is > 0 blank the string.
            Copy the result only if its length is > 0.
    
    2020-08-24  Mark Eggleston  <markeggleston@gcc.gnu.org>
    
    gcc/testsuite/
    
            PR fortran/96486
            * gfortran.dg/pr96486.f90: New test.
    
    (cherry picked from commit de09e7ebc9d5555653745a103eef2b20c7f1dd76)

commit 92462d8835d8d740128e98d9dd468aca828968fb
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Aug 24 00:18:12 2020 +0000

    Daily bump.

commit 2c358e17d0a7c3e659d561ae4f8f2dd790d1adcb
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Aug 23 00:18:17 2020 +0000

    Daily bump.

commit c1cf3ed54c825c8f9aed83e80b6f7d08ff803312
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Aug 22 00:18:12 2020 +0000

    Daily bump.

commit 0fc33daacbdf993ab0d5830b0af3468b0df7c187
Author: Richard Sandiford <richard.sandiford@arm.com>
Date:   Fri Aug 21 19:06:14 2020 +0100

    Update links to Arm docs
    
    gcc/
            * doc/extend.texi: Update links to Arm docs.
            * doc/invoke.texi: Likewise.
    
    (cherry picked from commit 09698e44c766c4a05ee463d2e36bc1fdac21dce4)

commit ac17af1aed6b59ce635b8b916daffc282a60b614
Author: Tamar Christina <tamar.christina@arm.com>
Date:   Mon Aug 3 12:03:17 2020 +0100

    AArch64: Fix hwasan failure in readline.
    
    My previous fix added an unchecked call to fgets in the new function readline.
    fgets can fail when there's an error reading the file in which case it returns
    NULL.  It also returns NULL when the next character is EOF.
    
    The EOF case is already covered by the existing code but the error case isn't.
    This fixes it by returning the empty string on error.
    
    Also I now use strnlen instead of strlen to make sure we never read outside the
    buffer.
    
    This was flagged by Matthew Malcomson during his hwasan work.
    
    gcc/ChangeLog:
    
            * config/aarch64/driver-aarch64.c (readline): Check return value fgets.
    
    (cherry picked from commit 341573406b392f4d57e052ce22f80e85a7c479e9)

commit 28b0ea877e2d0c72656489baad2d81637ba540c7
Author: Tamar Christina <tamar.christina@arm.com>
Date:   Wed Jul 8 14:32:34 2020 +0100

    AArch64: Add test for -mcpu=native
    
    gcc/testsuite/ChangeLog:
    
            * gcc.target/aarch64/cpunative/aarch64-cpunative.exp: New file.
            * gcc.target/aarch64/cpunative/info_0: New test.
            * gcc.target/aarch64/cpunative/info_1: New test.
            * gcc.target/aarch64/cpunative/info_10: New test.
            * gcc.target/aarch64/cpunative/info_11: New test.
            * gcc.target/aarch64/cpunative/info_12: New test.
            * gcc.target/aarch64/cpunative/info_13: New test.
            * gcc.target/aarch64/cpunative/info_14: New test.
            * gcc.target/aarch64/cpunative/info_15: New test.
            * gcc.target/aarch64/cpunative/info_2: New test.
            * gcc.target/aarch64/cpunative/info_3: New test.
            * gcc.target/aarch64/cpunative/info_4: New test.
            * gcc.target/aarch64/cpunative/info_5: New test.
            * gcc.target/aarch64/cpunative/info_6: New test.
            * gcc.target/aarch64/cpunative/info_7: New test.
            * gcc.target/aarch64/cpunative/info_8: New test.
            * gcc.target/aarch64/cpunative/info_9: New test.
            * gcc.target/aarch64/cpunative/native_cpu_0.c: New test.
            * gcc.target/aarch64/cpunative/native_cpu_1.c: New test.
            * gcc.target/aarch64/cpunative/native_cpu_10.c: New test.
            * gcc.target/aarch64/cpunative/native_cpu_13.c: New test.
            * gcc.target/aarch64/cpunative/native_cpu_14.c: New test.
            * gcc.target/aarch64/cpunative/native_cpu_2.c: New test.
            * gcc.target/aarch64/cpunative/native_cpu_3.c: New test.
            * gcc.target/aarch64/cpunative/native_cpu_4.c: New test.
            * gcc.target/aarch64/cpunative/native_cpu_5.c: New test.
            * gcc.target/aarch64/cpunative/native_cpu_6.c: New test.
            * gcc.target/aarch64/cpunative/native_cpu_7.c: New test.
            * gcc.target/aarch64/cpunative/native_cpu_8.c: New test.
    
    (cherry picked from commit 8bc83ee378e1cac65d75752b5137ec35d9e1aca1)

commit dd35c36defdf45b9e12337fd7a102edb40d08880
Author: Tamar Christina <tamar.christina@arm.com>
Date:   Fri Jul 17 13:12:46 2020 +0100

    Testuite: Document environment setting directives
    
    This document some of the existing DejaGnu directives to modify
    environment variables before test or compiler invocations.
    
    gcc/ChangeLog:
    
            * doc/sourcebuild.texi (dg-set-compiler-env-var,
            dg-set-target-env-var): Document.
    
    (cherry picked from commit 7c4491e33d1be16bfb85d448862a8b956d35e4d8)

commit 2630b0b3b73e8e6c6311cfbfb1947551c45a2123
Author: Tamar Christina <tamar.christina@arm.com>
Date:   Fri Jul 17 13:12:23 2020 +0100

    Testsuite: Make it easier to debug environment setting functions
    
    This adds verbose output to dg-set-compiler-env-var and dg-set-target-env-var
    so you can actually see what they're setting when you add -v -v.
    
    gcc/testsuite/ChangeLog:
    
            * lib/gcc-dg.exp (dg-set-compiler-env-var, dg-set-target-env-var): Add
            verbose output.
    
    (cherry picked from commit e410cbff5d5a408b7c64a0c426951afc2a24df93)

commit a1360f71887b6f3832f7ec045da245b2e3fa48a0
Author: Tamar Christina <tamar.christina@arm.com>
Date:   Fri Jul 17 13:12:00 2020 +0100

    Arm: Add GCC_CPUINFO override
    
    This adds an in intentionally undocumented environment variable
    GCC_CPUINFO which can be used to test -mcpu=native.
    
    Tests using these are added later on.
    
    gcc/ChangeLog:
    
            * config/arm/driver-arm.c (host_detect_local_cpu): Add GCC_CPUINFO.
    
    (cherry picked from commit 34a6c43487caf3a2a0ec9c7c79c526d116abc8b9)

commit 74b38bca7fdd9390536bac399392cf5fd4bbd7f5
Author: Tamar Christina <tamar.christina@arm.com>
Date:   Fri Jul 17 13:10:53 2020 +0100

    AArch64: Add GCC_CPUINFO override
    
    This adds an in intentionally undocumented environment variable
    GCC_CPUINFO which can be used to test -mcpu=native.
    
    Tests using this are added later on.
    
    gcc/ChangeLog:
    
            * config/aarch64/driver-aarch64.c (host_detect_local_cpu):
            Add GCC_CPUINFO.
    
    (cherry picked from commit 55f6addc0c102eab2bf19d94de3ce52f9de0ab91)

commit 120fcbb414726798ca08708e53d590fa998acc7e
Author: Tamar Christina <tamar.christina@arm.com>
Date:   Fri Jul 17 13:10:28 2020 +0100

    AArch64: Fix bugs in -mcpu=native detection.
    
    This patch fixes a couple of issues in AArch64's -mcpu=native processing:
    
    The buffer used to read the lines from /proc/cpuinfo is 128 bytes long.  While
    this was enough in the past with the increase in architecture extensions it is
    no longer enough.   It results in two bugs:
    
    1) No option string longer than 127 characters is correctly parsed.  Features
       that are supported are silently ignored.
    
    2) It incorrectly enables features that are not present on the machine:
      a) It checks for substring matching instead of full word matching.  This makes
         it incorrectly detect sb support when ssbs is provided instead.
      b) Due to the truncation at the 127 char border it also incorrectly enables
         features due to the full feature being cut off and the part that is left
         accidentally enables something else.
    
    This breaks -mcpu=native detection on some of our newer system.
    
    The patch fixes these issues by reading full lines up to the \n in a string.
    This gives us the full feature line.  Secondly it creates a set from this string
    to:
    
     1) Reduce matching complexity from O(n*m) to O(n*logm).
     2) Perform whole word matching instead of substring matching.
    
    To make this code somewhat cleaner I also changed from using char* to using
    std::string and std::set.
    
    Note that I have intentionally avoided the use of ifstream and stringstream
    to make it easier to backport.  I have also not change the substring matching
    for the initial line classification as I cannot find a documented cpuinfo format
    which leads me to believe there may be kernels out there that require this which
    may be why the original code does this.
    
    I also do not want this to break if the kernel adds a new line that is long and
    indents the file by two tabs to keep everything aligned.  In short I think an
    imprecise match is the right thing here.
    
    Test for this is added as the last thing in this series as it requires some
    changes to be made to be able to test this.
    
    gcc/ChangeLog:
    
            * config/aarch64/driver-aarch64.c (INCLUDE_SET): New.
            (parse_field): Use std::string.
            (split_words, readline, find_field): New.
            (host_detect_local_cpu): Fix truncation issues.
    
    (cherry picked from commit b399f3c6425f6c33b64e813899cbd589288ef716)

commit 43ddc027addb7f4f1904a1b739e6ba1ab5acbb6c
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Aug 21 00:18:16 2020 +0000

    Daily bump.

commit bb885448e07efa1f29a7657faa1c034492efe1dc
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Aug 20 00:18:20 2020 +0000

    Daily bump.

commit 495bdda5305b366e6f15134431d9d18b952884fc
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Wed Aug 19 12:13:03 2020 +0100

    libstdc++: Add deprecated attributes to old iostream members
    
    Back in 2017 I removed these prehistoric members (which were deprecated
    since C++98) for C++17 mode. But I didn't add deprecated attributes to
    most of them, so users didn't get any warning they would be going away.
    Apparently some poor souls do actually use some of these names, and so
    now that GCC 11 defaults to -std=gnu++17 some code has stopped
    compiling.
    
    This adds deprecated attributes to them, so that C++98/03/11/14 code
    will get a warning if it uses them. I'll also backport this to the
    release branches so that users can find out about the deprecation before
    they start using C++17.
    
    libstdc++-v3/ChangeLog:
    
            * include/bits/c++config (_GLIBCXX_DEPRECATED_SUGGEST): New
            macro for "use 'foo' instead" message in deprecated warnings.
            * include/bits/ios_base.h (io_state, open_mode, seek_dir)
            (streampos, streamoff): Use _GLIBCXX_DEPRECATED_SUGGEST.
            * include/std/streambuf (stossc): Replace C++11 attribute
            with _GLIBCXX_DEPRECATED_SUGGEST.
            * testsuite/27_io/types/1.cc: Check for deprecated warnings.
            Also check for io_state, open_mode and seek_dir typedefs.
    
    (cherry picked from commit eef9bf4ca8d90a1751bc4bff03722ee68999eb8e)

commit 25512fdf4d49f30212897dfb07ecef262a94e646
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Aug 19 00:18:16 2020 +0000

    Daily bump.

commit 65f460db575eb004172e75b88f5a76724f04e255
Author: Uros Bizjak <ubizjak@gmail.com>
Date:   Tue Aug 18 18:47:47 2020 +0200

    i386: Fix restore_stack_nonlocal expander [PR96536].
    
    -fcf-protection code in restore_stack_nonlocal uses a branch based on
    a clobber result.  The patch adds missing compare.
    
    2020-08-18  Uroš Bizjak  <ubizjak@gmail.com>
    
    gcc/ChangeLog:
    
            PR target/96536
            * config/i386/i386.md (restore_stack_nonlocal):
            Add missing compare RTX.

commit b5edb37ce309f1d08f8deff1cea5e1e061874c29
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Aug 18 00:18:15 2020 +0000

    Daily bump.

commit 98a86842f75d92d0b9246dc76686ea2567550896
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Aug 17 00:18:06 2020 +0000

    Daily bump.

commit 16242107b8171fbd6d2a9f14fa153aa9f3fa915f
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Aug 16 00:18:07 2020 +0000

    Daily bump.

commit db9737e65d8d9b3b973f2711774cd6def902314c
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Aug 15 00:18:06 2020 +0000

    Daily bump.

commit 3a00e557bcf09e0ffcd8fb4912617217da8e0e9c
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Aug 14 00:18:07 2020 +0000

    Daily bump.

commit 2ea6c2252642005f33a9bdf86439ef144a0e7f2a
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Aug 13 00:18:16 2020 +0000

    Daily bump.

commit ffb32ba2fb79d90be4be9a59ef0336d3404ff538
Author: Kewen Lin <linkw@linux.ibm.com>
Date:   Wed Aug 12 04:19:16 2020 -0500

    testsuite: Add -fno-common to pr82374.c [PR94077]
    
    As the PR comments show, the case gcc.dg/gomp/pr82374.c fails on
    Power7 since gcc8.  But it passes from gcc10.  By looking into
    the difference, it's due to that gcc10 sets -fno-common as default,
    which makes vectorizer force the alignment and be able to use
    aligned vector load/store on those targets which doesn't support
    unaligned vector load/store (here it's Power7).
    
    As Jakub suggested in the PR, this patch is to append -fno-common
    into dg-options.
    
    Verified with gcc8/gcc9 releases on ppc64-redhat-linux (Power7).
    
    gcc/testsuite/ChangeLog:
    
            PR testsuite/94077
            * gcc.dg/gomp/pr82374.c: Add option -fno-common.

commit 071cfcbc065569dd2384f03634f991afefa9fbea
Author: Christophe Lyon <christophe.lyon@linaro.org>
Date:   Wed Aug 12 09:22:38 2020 +0000

    testsuite: Fix gcc.target/arm/stack-protector-1.c for Cortex-M
    
    The stack-protector-1.c test fails when compiled for Cortex-M:
    - for Cortex-M0/M1, str r0, [sp #-8]! is not supported
    - for Cortex-M3/M4..., the assembler complains that "use of r13 is
      deprecated"
    
    This patch replaces the str instruction with
         sub   sp, sp, #8
         str r0, [sp]
    and removes the check for r13, which is unlikely to leak the canary
    value.
    
    2020-08-11  Christophe Lyon  <christophe.lyon@linaro.org>
    
            gcc/testsuite/
            * gcc.target/arm/stack-protector-1.c: Adapt code to Cortex-M
            restrictions.
    
    (cherry picked from commit 6606fdc0aad85cbca1bb58e1b2ffe05611aabd7a)

commit 11ccbb771365709a761bc260a2c2f73fc695b66a
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Aug 12 00:18:16 2020 +0000

    Daily bump.

commit 5e4128fd723d6ff7b19600e96839d2bd9c9a69e4
Author: Andrea Corallo <andrea.corallo@arm.com>
Date:   Wed Apr 1 10:19:04 2020 +0100

    libstdc++-v3/test: Better skip for "use_service.cc"
    
    2020-04-01  Andrea Corallo  <andrea.corallo@arm.com>
    
            * testsuite/experimental/net/execution_context/use_service.cc:
            Require pthread and gthreads.
    
    (cherry picked from commit c1effaa209f9f9b4bcf4cd7c6fcfccaf5e59a2b2)

commit f7a449909a53ec6e4ea13f197f86ed1aed7de560
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Tue Aug 11 16:55:01 2020 +0100

    libstdc++: Disable net tests that depend on threads [PR 89760]
    
    libstdc++-v3/ChangeLog:
    
            PR libstdc++/89760
            * testsuite/experimental/net/execution_context/make_service.cc:
            Add dg-require-gthreads.
            * testsuite/experimental/net/executor/1.cc: Likewise.
            * testsuite/experimental/net/headers.cc: Likewise.
            * testsuite/experimental/net/internet/address/v4/comparisons.cc:
            Likewise.
            * testsuite/experimental/net/internet/address/v4/cons.cc:
            Likewise.
            * testsuite/experimental/net/internet/address/v4/creation.cc:
            Likewise.
            * testsuite/experimental/net/internet/address/v4/members.cc:
            Likewise.
            * testsuite/experimental/net/internet/resolver/base.cc:
            Likewise.
            * testsuite/experimental/net/internet/resolver/ops/lookup.cc:
            Likewise.
            * testsuite/experimental/net/internet/resolver/ops/reverse.cc:
            Likewise.
            * testsuite/experimental/net/timer/waitable/cons.cc: Likewise.
            * testsuite/experimental/net/timer/waitable/dest.cc: Likewise.
            * testsuite/experimental/net/timer/waitable/ops.cc: Likewise.

commit e6eab4652f4d1dac4e8093f0e2c1f187c5647cb9
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Aug 11 00:18:33 2020 +0000

    Daily bump.

commit caac3ee7008286404323c4aa93ee0e1c4753c4c2
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Mon Aug 10 11:10:26 2020 +0100

    libstdc++: Use _wstat64 for Windows [PR 95749]
    
    In order to handle large files on Windows we need to use stat API with
    64-bit st_size member.
    
    libstdc++-v3/ChangeLog:
    
            PR libstdc++/95749
            * src/filesystem/ops-common.h [_GLIBCXX_FILESYSTEM_IS_WINDOWS]
            (stat_type): Change to __stat64.
            (stat): Use _wstat64.
    
    (cherry picked from commit 9939be5758b52ed2fe1a7e56b94ce6d0f4d81580)

commit 15d460f9d36f6674357e7ac090192c4094c7ed38
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Aug 10 00:18:20 2020 +0000

    Daily bump.

commit 5c4818367206b0d2c0072eea8a8e8748cf3a0680
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Aug 9 00:18:26 2020 +0000

    Daily bump.

commit 4ad02cfb768b86c1d501469dd45c38ab8425e87a
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Aug 8 00:18:22 2020 +0000

    Daily bump.

commit 4e91af9877df9e6b28ea8e50ae9445590363d5b0
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Mon Aug 3 22:55:28 2020 +0200

    aarch64: Fix up __aarch64_cas16_acq_rel fallback
    
    As mentioned in the PR, the fallback path when LSE is unavailable writes
    incorrect registers to the memory if the previous content compares equal
    to x0, x1 - it writes copy of x0, x1 from the start of function, but it
    should write x2, x3.
    
    2020-08-03  Jakub Jelinek  <jakub@redhat.com>
    
            PR target/96402
            * config/aarch64/lse.S (__aarch64_cas16_acq_rel): Use x2, x3 instead
            of x(tmp0), x(tmp1) in STXP arguments.
    
            * gcc.target/aarch64/pr96402.c: New test.
    
    (cherry picked from commit 90b43856fdff7d96d93d22970eca8a86c56e0ddc)

commit 3e40be9cc92d3fa117be7f4fab07cedeed8361a2
Author: Richard Sandiford <richard.sandiford@arm.com>
Date:   Fri Aug 7 12:17:37 2020 +0100

    arm: Clear canary value after stack_protect_test [PR96191]
    
    The stack_protect_test patterns were leaving the canary value in the
    temporary register, meaning that it was often still in registers on
    return from the function.  An attacker might therefore have been
    able to use it to defeat stack-smash protection for a later function.
    
    gcc/
            PR target/96191
            * config/arm/arm.md (arm_stack_protect_test_insn): Zero out
            operand 2 after use.
            * config/arm/thumb1.md (thumb1_stack_protect_test_insn): Likewise.
    
    gcc/testsuite/
            * gcc.target/arm/stack-protector-1.c: New test.
            * gcc.target/arm/stack-protector-2.c: Likewise.
    
    (cherry picked from commit 6a3f3e08723063ea2dadb7ddf503f02972a724e2)

commit 5380912a17ea09a8996720fb62b1a70c16c8f9f2
Author: Richard Sandiford <richard.sandiford@arm.com>
Date:   Fri Aug 7 12:17:37 2020 +0100

    aarch64: Clear canary value after stack_protect_test [PR96191]
    
    The stack_protect_test patterns were leaving the canary value in the
    temporary register, meaning that it was often still in registers on
    return from the function.  An attacker might therefore have been
    able to use it to defeat stack-smash protection for a later function.
    
    gcc/
            PR target/96191
            * config/aarch64/aarch64.md (stack_protect_test_<mode>): Set the
            CC register directly, instead of a GPR.  Replace the original GPR
            destination with an extra scratch register.  Zero out operand 3
            after use.
            (stack_protect_test): Update accordingly.
    
    gcc/testsuite/
            PR target/96191
            * gcc.target/aarch64/stack-protector-1.c: New test.
            * gcc.target/aarch64/stack-protector-2.c: Likewise.
    
    (cherry picked from commit fe1a26429038d7cd17abc53f96a6f3e2639b605f)

commit 88f2b72e77fea11803b761f4fb569d83266e1d9e
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Sat Mar 21 22:11:44 2020 +0000

    libstdc++: Fix experimental::path::generic_string (PR 93245)
    
    This function was unimplemented, simply returning the native format
    string instead.
    
            PR libstdc++/93245
            * include/experimental/bits/fs_path.h (path::generic_string<C,T,A>()):
            Return the generic format path, not the native one.
            * testsuite/experimental/filesystem/path/generic/generic_string.cc:
            Improve test coverage.
    
    (cherry picked from commit a577c0c26931090e7c25e56ef5ffc807627961ec)

commit e7406c364496dae51ef294b5720923fe4a1dfccb
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Sat Mar 21 21:51:07 2020 +0000

    libstdc++: Fix path::generic_string allocator handling (PR 94242)
    
    It's not possible to construct a path::string_type from an allocator of
    a different type. Create the correct specialization of basic_string, and
    adjust path::_S_str_convert to use a basic_string_view so that it is
    independent of the allocator type.
    
            PR libstdc++/94242
            * include/bits/fs_path.h (path::_S_str_convert): Replace first
            parameter with basic_string_view so that strings with different
            allocators can be accepted.
            (path::generic_string<C,T,A>()): Use basic_string object that uses the
            right allocator type.
            * testsuite/27_io/filesystem/path/generic/94242.cc: New test.
            * testsuite/27_io/filesystem/path/generic/generic_string.cc: Improve
            test coverage.
    
    (cherry picked from commit 9fc985118d9f5014afc1caf32a411ee5803fba61)

commit 7ebca347d1da90d07822ce86a70ec9786a73356b
Author: Qian Jianhua <qianjh@cn.fujitsu.com>
Date:   Fri Aug 7 10:39:40 2020 +0100

    aarch64: Add A64FX machine model
    
    This patch add support for Fujitsu A64FX, as the first step of adding
    A64FX machine model.
    
    A64FX is used in FUJITSU Supercomputer PRIMEHPC FX1000,
    PRIMEHPC FX700, and supercomputer Fugaku.
    The official microarchitecture information of A64FX can be read at
    https://github.com/fujitsu/A64FX.
    
    2020-08-07  Qian jianhua  <qianjh@cn.fujitsu.com>
    
    gcc/
            * config/aarch64/aarch64-cores.def (a64fx): New core.
            * config/aarch64/aarch64-tune.md: Regenerated.
            * config/aarch64/aarch64.c (a64fx_prefetch_tune, a64fx_tunings): New.
            * doc/invoke.texi: Add a64fx to the list.
    
    (cherry picked from commit 02f21aea0679c5cac094a3f575e839d44cb57a39)

commit cdb0af30f73923ec4355ecd5c294b7a026bb4aa4
Author: Richard Sandiford <richard.sandiford@arm.com>
Date:   Fri Aug 7 10:39:39 2020 +0100

    early-remat: Handle sets of multiple candidate regs [PR94605]
    
    early-remat.c:process_block wasn't handling insns that set multiple
    candidate registers, which led to an assertion failure at the end
    of the main loop.
    
    Instructions that set two pseudos aren't rematerialisation candidates in
    themselves, but we still need to track them if another instruction that
    sets the same register is a rematerialisation candidate.
    
    gcc/
            PR rtl-optimization/94605
            * early-remat.c (early_remat::process_block): Handle insns that
            set multiple candidate registers.
    
    gcc/testsuite/
            PR rtl-optimization/94605
            * gcc.target/aarch64/sve/pr94605.c: New test.
    
    (cherry picked from commit 3c3f12e2a7625c9a2f5d74a47dbacb2fd1ae5643)

commit e4c68cc7dcb6617740ee26f359a34c37c6981685
Author: Richard Sandiford <richard.sandiford@arm.com>
Date:   Fri Aug 7 10:39:38 2020 +0100

    ipa-devirt: Fix crash in obj_type_ref_class [PR95114]
    
    The testcase has failed since r9-5035, because obj_type_ref_class
    tries to look up an ODR type when no ODR type information is
    available.  (The information was available earlier in the
    compilation, but was freed during pass_ipa_free_lang_data.)
    We then crash dereferencing the null get_odr_type result.
    
    The test passes with -O2.  However, it fails again if -fdump-tree-all
    is used, since obj_type_ref_class is called indirectly from the
    dump routines.
    
    Other code creates ODR type entries on the fly by passing “true”
    as the insert parameter.  But obj_type_ref_class can't do that
    unconditionally, since it should have no side-effects when used
    from the dumping code.
    
    Following a suggestion from Honza, this patch adds parameters
    to say whether the routines are being called from dump routines
    and uses those to derive the insert parameter.
    
    gcc/
            PR middle-end/95114
            * tree.h (virtual_method_call_p): Add a default-false parameter
            that indicates whether the function is being called from dump
            routines.
            (obj_type_ref_class): Likewise.
            * tree.c (virtual_method_call_p): Likewise.
            * ipa-devirt.c (obj_type_ref_class): Likewise.  Lazily add ODR
            type information for the type when the parameter is false.
            * tree-pretty-print.c (dump_generic_node): Update calls to
            virtual_method_call_p and obj_type_ref_class accordingly.
    
    gcc/testsuite/
            PR middle-end/95114
            * g++.target/aarch64/pr95114.C: New test.
    
    (cherry picked from commit 5834e96a08fd8b86a42428f38a95903d2f1de202)

commit 13dc9bf3a88627838c6d27dcb912adac938eb345
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Aug 7 00:18:26 2020 +0000

    Daily bump.

commit f86f80dbccece356fa5ca7e1fd4dc581cc6a1cc4
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Thu Aug 6 18:44:50 2020 +0100

    libstdc++: Fix unnecessary allocations in read_symlink [PR 96484]
    
    libstdc++-v3/ChangeLog:
    
            PR libstdc++/96484
            * src/c++17/fs_ops.cc (fs::read_symlink): Return an error
            immediately for non-symlinks.
            * src/filesystem/ops.cc (fs::read_symlink): Likewise.
    
    (cherry picked from commit 6a13a4e3f29fc4ce5eff96d74ba965c9fdc02184)

commit 5226c9f5b0f666e305758d81f622d6896f32e708
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Aug 6 00:18:18 2020 +0000

    Daily bump.

commit 0d1987fb5c63d96768d47064c7a69bc8b038aa89
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Aug 5 00:18:38 2020 +0000

    Daily bump.

commit 2155170525f93093b90a1a065e7ed71a925566e9
Author: Matthew Malcomson <matthew.malcomson@arm.com>
Date:   Thu Jul 9 09:11:59 2020 +0100

    aarch64: Mitigate SLS for BLR instruction
    
    This patch introduces the mitigation for Straight Line Speculation past
    the BLR instruction.
    
    This mitigation replaces BLR instructions with a BL to a stub which uses
    a BR to jump to the original value.  These function stubs are then
    appended with a speculation barrier to ensure no straight line
    speculation happens after these jumps.
    
    When optimising for speed we use a set of stubs for each function since
    this should help the branch predictor make more accurate predictions
    about where a stub should branch.
    
    When optimising for size we use one set of stubs for all functions.
    This set of stubs can have human readable names, and we are using
    `__call_indirect_x<N>` for register x<N>.
    
    When BTI branch protection is enabled the BLR instruction can jump to a
    `BTI c` instruction using any register, while the BR instruction can
    only jump to a `BTI c` instruction using the x16 or x17 registers.
    Hence, in order to ensure this transformation is safe we mov the value
    of the original register into x16 and use x16 for the BR.
    
    As an example when optimising for size:
    a
        BLR x0
    instruction would get transformed to something like
        BL __call_indirect_x0
    where __call_indirect_x0 labels a thunk that contains
    __call_indirect_x0:
        MOV X16, X0
        BR X16
        <speculation barrier>
    
    The first version of this patch used local symbols specific to a
    compilation unit to try and avoid relocations.
    This was mistaken since functions coming from the same compilation unit
    can still be in different sections, and the assembler will insert
    relocations at jumps between sections.
    
    On any relocation the linker is permitted to emit a veneer to handle
    jumps between symbols that are very far apart.  The registers x16 and
    x17 may be clobbered by these veneers.
    Hence the function stubs cannot rely on the values of x16 and x17 being
    the same as just before the function stub is called.
    
    Similar can be said for the hot/cold partitioning of single functions,
    so function-local stubs have the same restriction.
    
    This updated version of the patch never emits function stubs for x16 and
    x17, and instead forces other registers to be used.
    
    Given the above, there is now no benefit to local symbols (since they
    are not enough to avoid dealing with linker intricacies).  This patch
    now uses global symbols with hidden visibility each stored in their own
    COMDAT section.  This means stubs can be shared between compilation
    units while still avoiding the PLT indirection.
    
    This patch also removes the `__call_indirect_x30` stub (and
    function-local equivalent) which would simply jump back to the original
    location.
    
    The function-local stubs are emitted to the assembly output file in one
    chunk, which means we need not add the speculation barrier directly
    after each one.
    This is because we know for certain that the instructions directly after
    the BR in all but the last function stub will be from another one of
    these stubs and hence will not contain a speculation gadget.
    Instead we add a speculation barrier at the end of the sequence of
    stubs.
    
    The global stubs are emitted in COMDAT/.linkonce sections by
    themselves so that the linker can remove duplicates from multiple object
    files.  This means they are not emitted in one chunk, and each one must
    include the speculation barrier.
    
    Another difference is that since the global stubs are shared across
    compilation units we do not know that all functions will be targeting an
    architecture supporting the SB instruction.
    Rather than provide multiple stubs for each architecture, we provide a
    stub that will work for all architectures -- using the DSB+ISB barrier.
    
    This mitigation does not apply for BLR instructions in the following
    places:
    - Some accesses to thread-local variables use a code sequence with a BLR
      instruction.  This code sequence is part of the binary interface between
      compiler and linker. If this BLR instruction needs to be mitigated, it'd
      probably be best to do so in the linker. It seems that the code sequence
      for thread-local variable access is unlikely to lead to a Spectre Revalation
      Gadget.
    - PLT stubs are produced by the linker and each contain a BLR instruction.
      It seems that at most only after the last PLT stub a Spectre Revalation
      Gadget might appear.
    
    Testing:
      Bootstrap and regtest on AArch64
        (with BOOT_CFLAGS="-mharden-sls=retbr,blr")
      Used a temporary hack(1) in gcc-dg.exp to use these options on every
      test in the testsuite, a slight modification to emit the speculation
      barrier after every function stub, and a script to check that the
      output never emitted a BLR, or unmitigated BR or RET instruction.
      Similar on an aarch64-none-elf cross-compiler.
    
    1) Temporary hack emitted a speculation barrier at the end of every stub
    function, and used a script to ensure that:
      a) Every RET or BR is immediately followed by a speculation barrier.
      b) No BLR instruction is emitted by compiler.
    
    (cherry picked from 96b7f495f9269d5448822e4fc28882edb35a58d7)
    
    gcc/ChangeLog:
    
            * config/aarch64/aarch64-protos.h (aarch64_indirect_call_asm):
            New declaration.
            * config/aarch64/aarch64.c (aarch64_regno_regclass): Handle new
            stub registers class.
            (aarch64_class_max_nregs): Likewise.
            (aarch64_register_move_cost): Likewise.
            (aarch64_sls_shared_thunks): Global array to store stub labels.
            (aarch64_sls_emit_function_stub): New.
            (aarch64_create_blr_label): New.
            (aarch64_sls_emit_blr_function_thunks): New.
            (aarch64_sls_emit_shared_blr_thunks): New.
            (aarch64_asm_file_end): New.
            (aarch64_indirect_call_asm): New.
            (TARGET_ASM_FILE_END): Use aarch64_asm_file_end.
            (TARGET_ASM_FUNCTION_EPILOGUE): Use
            aarch64_sls_emit_blr_function_thunks.
            * config/aarch64/aarch64.h (STB_REGNUM_P): New.
            (enum reg_class): Add STUB_REGS class.
            (machine_function): Introduce `call_via` array for
            function-local stub labels.
            * config/aarch64/aarch64.md (*call_insn, *call_value_insn): Use
            aarch64_indirect_call_asm to emit code when hardening BLR
            instructions.
            * config/aarch64/constraints.md (Ucr): New constraint
            representing registers for indirect calls.  Is GENERAL_REGS
            usually, and STUB_REGS when hardening BLR instruction against
            SLS.
            * config/aarch64/predicates.md (aarch64_general_reg): STUB_REGS class
            is also a general register.
    
    gcc/testsuite/ChangeLog:
    
            * gcc.target/aarch64/sls-mitigation/sls-miti-blr-bti.c: New test.
            * gcc.target/aarch64/sls-mitigation/sls-miti-blr.c: New test.

commit dc586a749228ecfb71f72ec2ca10e6f7b6874af3
Author: Matthew Malcomson <matthew.malcomson@arm.com>
Date:   Thu Jul 9 09:11:59 2020 +0100

    aarch64: Introduce SLS mitigation for RET and BR instructions
    
    Instructions following RET or BR are not necessarily executed.  In order
    to avoid speculation past RET and BR we can simply append a speculation
    barrier.
    
    Since these speculation barriers will not be architecturally executed,
    they are not expected to add a high performance penalty.
    
    The speculation barrier is to be SB when targeting architectures which
    have this enabled, and DSB SY + ISB otherwise.
    
    We add tests for each of the cases where such an instruction was seen.
    
    This is implemented by modifying each machine description pattern that
    emits either a RET or a BR instruction.  We choose not to use something
    like `TARGET_ASM_FUNCTION_EPILOGUE` since it does not affect the
    `indirect_jump`, `jump`, `sibcall_insn` and `sibcall_value_insn`
    patterns and we find it preferable to implement the functionality in the
    same way for every pattern.
    
    There is one particular case which is slightly tricky.  The
    implementation of TARGET_ASM_TRAMPOLINE_TEMPLATE uses a BR which needs
    to be mitigated against.  The trampoline template is used *once* per
    compilation unit, and the TRAMPOLINE_SIZE is exposed to the user via the
    builtin macro __LIBGCC_TRAMPOLINE_SIZE__.
    In the future we may implement function specific attributes to turn on
    and off hardening on a per-function basis.
    The fixed nature of the trampoline described above implies it will be
    safer to ensure this speculation barrier is always used.
    
    Testing:
      Bootstrap and regtest done on aarch64-none-linux
      Used a temporary hack(1) to use these options on every test in the
      testsuite and a script to check that the output never emitted an
      unmitigated RET or BR.
    
    1) Temporary hack was a change to the testsuite to always use
    `-save-temps` and run a script on the assembly output of those
    compilations which produced one to ensure every RET or BR is immediately
    followed by a speculation barrier.
    
    (cherry picked from be178ecd5ac1fe1510d960ff95c66d0ff831afe1)
    
    gcc/ChangeLog:
    
            * config/aarch64/aarch64-protos.h (aarch64_sls_barrier): New.
            * config/aarch64/aarch64.c (aarch64_output_casesi): Emit
            speculation barrier after BR instruction if needs be.
            (aarch64_trampoline_init): Handle ptr_mode value & adjust size
            of code copied.
            (aarch64_sls_barrier): New.
            (aarch64_asm_trampoline_template): Add needed barriers.
            * config/aarch64/aarch64.h (AARCH64_ISA_SB): New.
            (TARGET_SB): New.
            (TRAMPOLINE_SIZE): Account for barrier.
            * config/aarch64/aarch64.md (indirect_jump, *casesi_dispatch,
            simple_return, *do_return, *sibcall_insn, *sibcall_value_insn):
            Emit barrier if needs be, also account for possible barrier using
            "sls_length" attribute.
            (sls_length): New attribute.
            (length): Determine default using any non-default sls_length
            value.
    
    gcc/testsuite/ChangeLog:
    
            * gcc.target/aarch64/sls-mitigation/sls-miti-retbr.c: New test.
            * gcc.target/aarch64/sls-mitigation/sls-miti-retbr-pacret.c:
            New test.
            * gcc.target/aarch64/sls-mitigation/sls-mitigation.exp: New file.
            * lib/target-supports.exp (check_effective_target_aarch64_asm_sb_ok):
            New proc.

commit 20da13e395bde597d8337167c712039c8f923c3b
Author: Matthew Malcomson <matthew.malcomson@arm.com>
Date:   Thu Jul 9 09:11:58 2020 +0100

    aarch64: New Straight Line Speculation (SLS) mitigation flags
    
    Here we introduce the flags that will be used for straight line speculation.
    
    The new flag introduced is `-mharden-sls=`.
    This flag can take arguments of `none`, `all`, or a comma seperated list
    of one or more of `retbr` or `blr`.
    `none` indicates no special mitigation of the straight line speculation
    vulnerability.
    `all` requests all mitigations currently implemented.
    `retbr` requests that the RET and BR instructions have a speculation
    barrier inserted after them.
    `blr` requests that BLR instructions are replaced by a BL to a function
    stub using a BR with a speculation barrier after it.
    
    Setting this on a per-function basis using attributes or the like is not
    enabled, but may be in the future.
    
    (cherry picked from commit a9ba2a9b77bec7eacaf066801f22d1c366a2bc86)
    
    gcc/ChangeLog:
    
    2020-06-02  Matthew Malcomson  <matthew.malcomson@arm.com>
    
            * config/aarch64/aarch64-protos.h (aarch64_harden_sls_retbr_p):
            New.
            (aarch64_harden_sls_blr_p): New.
            * config/aarch64/aarch64.c (enum aarch64_sls_hardening_type):
            New.
            (aarch64_harden_sls_retbr_p): New.
            (aarch64_harden_sls_blr_p): New.
            (aarch64_validate_sls_mitigation): New.
            (aarch64_override_options): Parse options for SLS mitigation.
            * config/aarch64/aarch64.opt (-mharden-sls): New option.
            * doc/invoke.texi: Document new option.

commit c512a43092ab6ace0cb8547f4b49df0454a8170b
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Aug 4 00:18:11 2020 +0000

    Daily bump.

commit 0a8cf19d14f7113ae4793cd95d1a82dc38d03b84
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Mon Aug 3 21:16:50 2020 +0100

    cpp: Do not use @dots for ... tokens in code examples
    
    This prevents a ... token in code examples from being turned into a
    single HORIZONTAL ELLIPSIS glyph (e.g. via the HTML &hellip; entity).
    
    gcc/ChangeLog:
    
            * doc/cpp.texi (Variadic Macros): Use the exact ... token in
            code examples.
    
    (cherry picked from commit 2ac7fe2769890fe4c146da9cfa6d0eabb185d7db)

commit 09809e84d761c185a9189621341d25adb21c1c11
Author: Rainer Orth <ro@CeBiTec.Uni-Bielefeld.DE>
Date:   Mon Aug 3 09:49:43 2020 +0200

    libsanitizer: Fix GetPcSpBp determination of SP on 32-bit Solaris/x86
    
    The latest Solaris 11.4/x86 update uncovered a libsanitizer bug that
    caused one test to FAIL for 32-bit:
    
    +FAIL: c-c++-common/asan/null-deref-1.c   -O0  output pattern test
    +FAIL: c-c++-common/asan/null-deref-1.c   -O1  output pattern test
    +FAIL: c-c++-common/asan/null-deref-1.c   -O2  output pattern test
    +FAIL: c-c++-common/asan/null-deref-1.c   -O2 -flto  output pattern test
    +FAIL: c-c++-common/asan/null-deref-1.c -O2 -flto -flto-partition=none
    output pattern test
    +FAIL: c-c++-common/asan/null-deref-1.c   -O3 -g  output pattern test
    +FAIL: c-c++-common/asan/null-deref-1.c   -Os  output pattern test
    
    I've identified the problem and the fix has just landed in upstream
    llvm-project:
    
            https://reviews.llvm.org/D83664
    
    Tested on i386-pc-solaris2.11 and x86_64-pc-linux.gnu.
    
            libsanitizer:
            * sanitizer_common/sanitizer_linux.cc: Cherry-pick llvm-project
            revision f0e9b76c3500496f8f3ea7abe6f4bf801e3b41e7.

commit c74b896317b33d07ae24afeb36a9545fe80e0483
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Aug 3 00:18:07 2020 +0000

    Daily bump.

commit a9c2fba85294b554498914166e106f3d221feac9
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Aug 2 00:18:13 2020 +0000

    Daily bump.

commit a6e2dc45099d5d23dfeae245617f316e95ac646b
Author: Iain Buclaw <ibuclaw@gdcproject.org>
Date:   Thu Jul 16 18:34:18 2020 +0200

    d: Fix ICE in expand_intrinsic_vaarg
    
    Both intrinsics did not handle the case where the va_list object comes
    from a ref parameter.
    
    gcc/d/ChangeLog:
    
            PR d/96140
            * intrinsics.cc (expand_intrinsic_vaarg): Handle ref parameters as
            arguments to va_arg().
            (expand_intrinsic_vastart): Handle ref parameters as arguments to
            va_start().
    
    gcc/testsuite/ChangeLog:
    
            PR d/96140
            * gdc.dg/pr96140.d: New test.
    
    (cherry picked from commit dfc420f8d4492dbf5f45df4fecf93cb9645c0d7b)

commit 7f473cb48a1045fc4a97ae709f8d47512ff6f09e
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Aug 1 00:18:15 2020 +0000

    Daily bump.

commit 5e12156a709a3c1534ed797e65ffb03f6ba32a40
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Jul 31 00:18:12 2020 +0000

    Daily bump.

commit cd8377a50f5c0c3f6e0c4708005565e8dd6dff94
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Jul 30 00:18:10 2020 +0000

    Daily bump.

commit c1350a8f542b39f6bc2d1f719ab58ef0dea1ec92
Author: Martin Liska <mliska@suse.cz>
Date:   Wed Jul 29 14:13:42 2020 +0200

    gcc-changelog: fix combining of arguments.
    
    contrib/ChangeLog:
    
    2020-07-29  Martin Liska  <mliska@suse.cz>
    
            * git-backport.py: fix how are ChangeLog paths combined.

commit 2ed8962e85ee72f49034d5a04f864eb25221bd53
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Jul 29 00:18:08 2020 +0000

    Daily bump.

commit 7b34890e3df517101d6b6dc19c7387dfa336b240
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Jul 28 00:18:19 2020 +0000

    Daily bump.

commit 5574b84469263eeaa3e6b40da18b743d7b0fa5dd
Author: Mark Eggleston <markeggleston@gcc.gnu.org>
Date:   Thu Jun 11 11:05:40 2020 +0100

    Fortran  : ICE in gfc_check_pointer_assign PR95612
    
    Output an error if the right hand value is a zero sized array or
    does not have a symbol tree otherwise continue checking.
    
    2020-07-27  Steven G. Kargl  <kargl@gcc.gnu.org>
    
    gcc/fortran/
    
            PR fortran/95612
            * expr.c (gfc_check_pointer_assigb): Output an error if
            rvalue is a zero sized array or output an error if rvalue
            doesn't have a symbol tree.
    
    2020-07-27  Mark Eggleston  <markeggleston@gcc.gnu.org>
    
    gcc/testsuite/
    
            PR fortran/95612
            * gfortran.dg/pr95612.f90: New test.
    
    (cherry picked from commit 81072bab8d1e48ee83d9711dcb559ea1e019b351)

commit d09b2606a5ddba7cd31567dad8c401b5886ac132
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Jul 27 00:18:06 2020 +0000

    Daily bump.

commit 5aa8760e31909d278f28d7d4bb1479d7607228c6
Author: Mark Eggleston <markeggleston@gcc.gnu.org>
Date:   Thu Jun 11 06:42:36 2020 +0100

    Fortran  : ICE in gfc_check_reshape PR95585
    
    Issue an error where an array is used before its definition
    instead of an ICE.
    
    2020-07-26  Steven G. Kargl  <kargl@gcc.gnu.org>
    
    gcc/fortran/
    
            PR fortran/95585
            * check.c (gfc_check_reshape): Add check for a value when
            the symbol has an attribute flavor FL_PARAMETER.
    
    2020-07-26  Mark Eggleston  <markeggleston@gcc.gnu.org>
    
    gcc/testsuite/
    
            PR fortran/95585
            * gfortran.dg/pr95585.f90: New test.
    
    (cherry picked from commit d9aed5f1ccffc019ddf980e349caa3d092755cb4)

commit ae835ea03fa5f73afcb9fa5e3144ce072fd55c8e
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Jul 26 00:18:05 2020 +0000

    Daily bump.

commit eca316afa46907e6b0e1513ecbc3010aaf2590f3
Author: Dominique d'Humieres <dhumieres.dominique@free.fr>
Date:   Fri Jul 24 20:07:12 2020 +0200

    PR 93592 - Invalid UP/DOWN rounding with EN descriptor.
    
    The fix is obvious (I have added a comment). The tests are probably
    an overkill, but it does not hurt.
    
    libgfortran/ChangeLog:
    
            PR fortran/93592
            * io/write_float.def (build_float_string): Do not reset
              nbefore for FMT_F and FMT_EN.
    
    gcc/testsuite/ChangeLog:
    
            PR fortran/93592
            * gfortran.dg/fmt_en.f90: Adjust test.
            * gfortran.dg/fmt_en_rd.f90: New test.
            * gfortran.dg/fmt_en_rn.f90: New test.
            * gfortran.dg/fmt_en_ru.f90: New test.
            * gfortran.dg/fmt_en_rz.f90: New test.
    
    (cherry picked from commit 05e0971bcf94a481cbfa2731484f024a67dbd4a5)

commit e6df73e8ec60a5e0b3ccf5ae2b5a145f6f06453a
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Jul 25 00:18:13 2020 +0000

    Daily bump.

commit 6ca6eb70b0cc752feb02b6ef05170048b2efb5f1
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Jul 24 00:18:09 2020 +0000

    Daily bump.

commit b2fe9b1bf79037a90bc5146efe77417b888a86a0
Author: Harald Anlauf <anlauf@gmx.de>
Date:   Tue Jul 21 21:37:30 2020 +0200

    PR fortran/89574 - ICE in conv_function_val, at fortran/trans-expr.c:3792
    
    When checking for an external procedure from the same file, do not
    consider symbols from different modules.
    
    gcc/fortran/
            PR fortran/89574
            * trans-decl.c (gfc_get_extern_function_decl): Check whether a
            symbol belongs to a different module.
    
    (cherry picked from commit 28f2a080cc27531a8c78aec9f44aeff4961c2a4c)

commit 7be5add5534f4310b294f1b7ad8855a424edb8c1
Author: Thomas Koenig <tkoenig@gcc.gnu.org>
Date:   Thu Jul 23 20:26:10 2020 +0200

    Fix handling of implicit_pure by checking if non-pure procedures are called.
    
    Procedures are marked as implicit_pure if they fulfill the criteria of
    pure procedures.  In this case, a procedure was not marked as not being
    implicit_pure which called another procedure, which had not yet been
    marked as not being implicit_impure.
    
    Fixed by iterating over all procedures, setting callers of procedures
    which are non-pure and non-implicit_pure as non-implicit_pure and
    doing this until no more procedure has been changed.
    
    Backport from trunk r11-2215-g3055d879edb1bc2a3923f92a5e681c8f6774fbc3 .
    
    gcc/fortran/ChangeLog:
    
    2020-07-10  Thomas Koenig  <tkoenig@gcc.gnu.org>
    
            PR fortran/96018
            * frontend-passes.c (gfc_check_externals): Adjust formatting.
            (implicit_pure_call): New function.
            (implicit_pure_expr): New function.
            (gfc_fix_implicit_pure): New function.
            * gfortran.h (gfc_fix_implicit_pure): New prototype.
            * parse.c (translate_all_program_units): Call gfc_fix_implicit_pure.

commit 159c7ca3c3ce34e401b9e57734ecca8b37d8a0ec
Author: Thomas Koenig <tkoenig@gcc.gnu.org>
Date:   Sun Jul 19 17:27:45 2020 +0200

    Always use name from c_interop_kinds_table for -fc-prototypes.
    
    When a user specified a KIND that was a parameter taking the value
    of an iso_c_binding KIND, the code used the name of that parameter
    to look up the type name.  Corrected by always looking it up in
    the table of C interop kinds (which was previously done for
    non-C-interop types, anyway).
    
    gcc/fortran/ChangeLog:
    
            PR fortran/96220
            * dump-parse-tree.c (get_c_type_name): Always use the entries from
            c_interop_kinds_table to find the correct C type.
    
    (cherry picked from commit 2e1b25350aa96b3f5678a056d0b55bb323c452d9)

commit eb0a835d643394d89b13d4f0ac12f2af3e78228d
Author: David Edelsohn <dje.gcc@gmail.com>
Date:   Thu Mar 5 20:41:08 2020 -0500

    rs6000: Correct logic to disable NO_SUM_IN_TOC and NO_FP_IN_TOC [PR94065]
    
    aix61.h, aix71.h and aix72.h intends to prevent SUM_IN_TOC and FP_IN_TOC
    when cmodel=large.  This patch defines the variables associated with the
    target options to 1 to _enable_ NO_SUM_IN_TOC and enable NO_FP_IN_TOC.
    
    Bootstrapped on powerpc-ibm-aix7.2.0.0
    
            2020-03-06  David Edelsohn  <dje.gcc@gmail.com>
            PR target/94065
            * config/rs6000/aix61.h (TARGET_NO_SUM_IN_TOC): Set to 1 for
            cmodel=large.
            (TARGET_NO_FP_IN_TOC): Same.
            * config/rs6000/aix71.h: Same.
            * config/rs6000/aix72.h: Same.
    
    (cherry picked from commit 3dcf51ad7b0a9cacba1a056755c16cc1cf7984ee)

commit ef7b4fe80656172f1f6906f48bbe4c88f505bb51
Author: Martin Liska <mliska@suse.cz>
Date:   Thu Jul 23 10:39:00 2020 +0200

    gcc-changelog: fix when somebody reverts a backport
    
    contrib/ChangeLog:
    
            * gcc-changelog/git_commit.py: When reverting a backport,
            we should print only Revert header.
    
    (cherry picked from commit 02cada26e4783b4bfeaf6512a6c22df24d7a25fc)

commit ed9356630dc5fec59ed109f22ea2dae881559e5d
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Fri Jul 17 09:53:19 2020 +0100

    gcc-changelog: Fix typo in output
    
    contrib/ChangeLog:
    
            * gcc-changelog/git_update_version.py: Fix typo.
    
    (cherry picked from commit 0c1d1c01039a96c191a7aded40e5df40b14d387a)

commit 0a5be099c6f38b301518b94150c4bbc35cc85a00
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Jul 23 00:18:13 2020 +0000

    Daily bump.

commit 9db53472af1b255f8adbbfd03c103d7009420863
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Jul 22 00:18:13 2020 +0000

    Daily bump.

commit 7e9ce2ecfc63b332bd97367ffbe8b04f03d15b75
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Jul 21 00:18:17 2020 +0000

    Daily bump.

commit 5e1e8bb00b0f1e446ac27cdd8a7845c0d81a8ee4
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Jul 20 00:18:12 2020 +0000

    Daily bump.

commit 1aa8732ff97a366aeeb34b4bee5c130abb65282d
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Jul 19 00:18:08 2020 +0000

    Daily bump.

commit 6e2d60002ac2256b758958fbb024d8c662b8f8c6
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Jul 18 00:18:12 2020 +0000

    Daily bump.

commit da193dadf2882ab77527bc86c5b5307c74ec1fae
Author: Romain Naour <romain.naour@gmail.com>
Date:   Wed Jun 3 12:30:57 2020 -0600

    Fix missing dependencies for selftests which occasionally causes failed builds.
    
    gcc/
    
            * Makefile.in (SELFTEST_DEPS): Move before including language makefile
            fragments.
    
    (cherry picked from commit b19d8aac15649f31a7588b2634411a1922906ea8)
    (cherry picked from commit e86ae54172bb982e3c9d5aa62d20be5b72fe0f24)

commit 0eca9685d19939fc3895319998183b56de827b72
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Jul 17 00:18:14 2020 +0000

    Daily bump.

commit 8281cdda59d7bcdccba784d44367b3a404324cc8
Author: Szabolcs Nagy <szabolcs.nagy@arm.com>
Date:   Thu Jul 2 16:11:04 2020 +0100

    aarch64: Add missing ACLE support for PAC-RET
    
    Define the __ARM_FEATURE_PAC_DEFAULT feature test
    macro when PAC-RET branch protection is enabled.
    
    2020-07-13  Szabolcs Nagy  <szabolcs.nagy@arm.com>
    
    gcc/ChangeLog:
    
            * config/aarch64/aarch64-c.c (aarch64_update_cpp_builtins): Add
            __ARM_FEATURE_PAC_DEFAULT support.
    
    (cherry picked from commit a1faa8e2470b33e92f6274804bf7941fbb6e2d38)

commit a6a2935076b192109171310db5159183e5ab059b
Author: Szabolcs Nagy <szabolcs.nagy@arm.com>
Date:   Thu May 28 10:28:30 2020 +0100

    doc: Clarify __builtin_return_address [PR94891]
    
    The expected semantics and valid usage of __builtin_return_address is
    not clear since it exposes implementation internals that are normally
    not meaningful to portable c code.
    
    This documentation change tries to clarify the semantics in case the
    return address is stored in a mangled form. This affects AArch64 when
    pointer authentication is used for the return address signing (i.e.
    -mbranch-protection=pac-ret).
    
    2020-07-13  Szabolcs Nagy  <szabolcs.nagy@arm.com>
    
    gcc/ChangeLog:
    
            PR target/94891
            * doc/extend.texi: Update the text for  __builtin_return_address.
    
    (cherry picked from commit 6a391e06f953c3390b14020d8cacb6d55f81b2b9)

commit f5cab5862172176c49814214cc7df2fa6d6b5e56
Author: Szabolcs Nagy <szabolcs.nagy@arm.com>
Date:   Thu Jun 4 09:33:35 2020 +0100

    libgcc: fix the handling of return address mangling [PR94891]
    
    Mangling, currently only used on AArch64 for return address signing,
    is an internal representation that should not be exposed via
    
      __builtin_return_address return value,
      __builtin_eh_return handler argument,
      _Unwind_DebugHook handler argument.
    
    Note that a mangled address might not even fit into a void *, e.g.
    with AArch64 ilp32 ABI the return address is stored as 64bit, so
    the mangled return address cannot be accessed via _Unwind_GetPtr.
    
    This patch changes the unwinder hooks as follows:
    
    MD_POST_EXTRACT_ROOT_ADDR is removed: root address comes from
    __builtin_return_address which is not mangled.
    
    MD_POST_EXTRACT_FRAME_ADDR is renamed to MD_DEMANGLE_RETURN_ADDR,
    it now operates on _Unwind_Word instead of void *, so the hook
    should work when return address signing is enabled on AArch64 ilp32.
    (But for that __builtin_aarch64_autia1716 should be fixed to operate
    on 64bit input instead of a void *.)
    
    MD_POST_FROB_EH_HANDLER_ADDR is removed: it is the responsibility of
    __builtin_eh_return to do the mangling if necessary.
    
    2020-07-13  Szabolcs Nagy  <szabolcs.nagy@arm.com>
    
    libgcc/ChangeLog:
    
            PR target/94891
            * config/aarch64/aarch64-unwind.h (MD_POST_EXTRACT_ROOT_ADDR): Remove.
            (MD_POST_FROB_EH_HANDLER_ADDR): Remove.
            (MD_POST_EXTRACT_FRAME_ADDR): Rename to ...
            (MD_DEMANGLE_RETURN_ADDR): This.
            (aarch64_post_extract_frame_addr): Rename to ...
            (aarch64_demangle_return_addr): This.
            (aarch64_post_frob_eh_handler_addr): Remove.
            * unwind-dw2.c (uw_update_context): Demangle return address.
            (uw_frob_return_addr): Remove.
    
    (cherry picked from commit b097c7a27fb0796b2653a1d003cbf6b7a69d8961)

commit a0ae6c76529ccee9ee53c32dc115aec263ee633b
Author: Szabolcs Nagy <szabolcs.nagy@arm.com>
Date:   Thu Jun 4 13:42:16 2020 +0100

    aarch64: fix __builtin_eh_return with pac-ret [PR94891]
    
    Currently __builtin_eh_return takes a signed return address, which can
    cause ABI and API issues: 1) pointer representation problems if the
    address is passed around before eh return, 2) the source code needs
    pac-ret specific changes and needs to know if pac-ret is used in the
    current frame, 3) signed address may not be representible as void *
    (with ilp32 abi).
    
    Using address signing to protect eh return is ineffective because the
    instruction sequence in the unwinder that starts from the address
    signing and ends with a ret can be used as a return to anywhere gadget.
    Using indirect branch istead of ret with bti j landing pads at the
    target can reduce the potential of such gadget, which also implies
    that __builtin_eh_return should not take a signed address.
    
    This is a big hammer fix to the ABI and API issues: it turns pac-ret
    off for the caller completely (not just on the eh return path).  To
    harden the caller against ROP attacks, it should use indirect branch
    instead of ret, this is not attempted so the patch remains small and
    backportable.
    
    2020-07-13  Szabolcs Nagy  <szabolcs.nagy@arm.com>
    
    gcc/ChangeLog:
    
            PR target/94891
            * config/aarch64/aarch64.c (aarch64_return_address_signing_enabled):
            Disable return address signing if __builtin_eh_return is used.
    
    gcc/testsuite/ChangeLog:
    
            PR target/94891
            * gcc.target/aarch64/return_address_sign_1.c: Update test.
    
    (cherry picked from commit 2bc95be3bb8c8138e2e87c1c11c84bfede989d61)

commit a70d5d81c41048556fd86eaa1036018a6bfba115
Author: Szabolcs Nagy <szabolcs.nagy@arm.com>
Date:   Tue Jun 2 16:44:41 2020 +0100

    aarch64: fix return address access with pac [PR94891][PR94791]
    
    This is a big hammer fix for __builtin_return_address (PR target/94891)
    returning signed addresses (sometimes, depending on wether lr happens
    to be signed or not at the time of call which depends on optimizations),
    and similarly -pg may pass signed return address to _mcount
    (PR target/94791).
    
    At the time of return address expansion we don't know if it's signed or
    not so it is done unconditionally.
    
    2020-07-13  Szabolcs Nagy  <szabolcs.nagy@arm.com>
    
    gcc/ChangeLog:
    
            PR target/94891
            PR target/94791
            * config/aarch64/aarch64-protos.h (aarch64_return_addr_rtx): Declare.
            * config/aarch64/aarch64.c (aarch64_return_addr_rtx): New.
            (aarch64_return_addr): Use aarch64_return_addr_rtx.
            * config/aarch64/aarch64.h (PROFILE_HOOK): Likewise.
    
    (cherry picked from commit 463a54e5d4956143f81c1f23b91cbd2d93855741)

commit 91aab0f70e0d6614b990eff35c39b7b607f2c520
Author: Szabolcs Nagy <szabolcs.nagy@arm.com>
Date:   Thu Jul 2 17:12:05 2020 +0100

    aarch64: Fix BTI support in libitm
    
    sjlj.S did not have the GNU property note markup and the BTI c
    instructions that are necessary when it is built with branch
    protection.
    
    The notes are only added when libitm is built with branch
    protection, because old linkers mishandle the note (merge
    them incorrectly or emit warnings), the BTI instructions
    are added unconditionally.
    
    2020-07-09  Szabolcs Nagy  <szabolcs.nagy@arm.com>
    
    libitm/ChangeLog:
    
            * config/aarch64/sjlj.S: Add BTI marking and related definitions,
            and add BTI c to function entries.
    
    (cherry picked from commit 319078dad62eba942d33c8975bdcbb09d1c68ba6)

commit 315a7e8cca13530d4d3c5b5f39775c7a62877f3d
Author: Szabolcs Nagy <szabolcs.nagy@arm.com>
Date:   Thu Jul 2 17:11:56 2020 +0100

    aarch64: Fix BTI support in libgcc [PR96001]
    
    lse.S did not have the GNU property note markup and the BTI c
    instructions that are necessary when it is built with branch
    protection.
    
    The notes are only added when libgcc is built with branch
    protection, because old linkers mishandle the note (merge
    them incorrectly or emit warnings), the BTI instructions
    are added unconditionally.
    
    Note: BTI c is only necessary at function entry if the function
    may be called indirectly, currently lse functions are not called
    indirectly, but BTI is added for ABI reasons e.g. to allow
    linkers later to emit stub code with indirect jump.
    
    2020-07-09  Szabolcs Nagy  <szabolcs.nagy@arm.com>
    
    libgcc/ChangeLog:
    
            PR target/96001
            * config/aarch64/lse.S: Add BTI marking and related definitions,
            and add BTI c to function entries.
    
    (cherry picked from commit f0f62fa0320762119446893c67cb52934bc5a05e)

commit be6028a7a6581176fd3568ce1d992e331fcac1bb
Author: Szabolcs Nagy <szabolcs.nagy@arm.com>
Date:   Fri Jul 3 14:11:49 2020 +0100

    aarch64: Fix noexecstack note in libgcc
    
    lse.S did not have GNU stack note, this may cause missing
    PT_GNU_STACK in binaries on Linux and FreeBSD.
    
    2020-07-09  Szabolcs Nagy  <szabolcs.nagy@arm.com>
    
    libgcc/ChangeLog:
    
            * config/aarch64/lse.S: Add stack note.
    
    (cherry picked from commit e73ec755489afc9fcc75dfac6f06ac73e243e72a)

commit ae6f7309862e19164cd52324888c354c942af7dd
Author: Szabolcs Nagy <szabolcs.nagy@arm.com>
Date:   Fri Jul 3 14:09:25 2020 +0100

    aarch64: Fix noexecstack note in libitm
    
    sjlj.S only had the note on Linux, but it is supposed
    to have it on FreeBSD too.
    
    2020-07-09  Szabolcs Nagy  <szabolcs.nagy@arm.com>
    
    libitm/ChangeLog:
    
            * config/aarch64/sjlj.S: Add stack note if __FreeBSD__ is defined.
    
    (cherry picked from commit 463ba375f7b857995068403a4c63690d03162c00)

commit 313e02cfb97287863780a856a324b83b1c683aba
Author: Stefan Schulze Frielinghaus <stefansf@linux.ibm.com>
Date:   Tue May 26 18:21:52 2020 +0200

    S/390: Emit vector alignment hints for z13 if AS accepts them
    
    Squashed with commit 87cb9423add08743d8bb3368f0af61ddc9572837
    
    gcc/ChangeLog:
    
            * config.in: Regenerate.
            * config/s390/s390.c (print_operand): Emit vector alignment hints
            for target z13, if AS accepts them.  For other targets the logic
            stays the same.
            * config/s390/s390.h (TARGET_VECTOR_LOADSTORE_ALIGNMENT_HINTS): Define
            macro.
            * configure: Regenerate.
            * configure.ac: Check HAVE_AS_VECTOR_LOADSTORE_ALIGNMENT_HINTS_ON_Z13.
    
    gcc/testsuite/ChangeLog:
    
            * gcc.target/s390/vector/align-1.c: Change target architecture
            to z13.
            * gcc.target/s390/vector/align-2.c: Change target architecture
            to z13.
    
    (cherry picked from commit 929fd91ba975eebf9e57f7f092041271dcaf0c34)

commit f95f1ac7241513803b0851def11e839efa7a44c7
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Jul 16 00:18:31 2020 +0000

    Daily bump.

commit 92a63f056ca101aa5614b8c849c3ab0522c63ae1
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Jul 15 00:18:26 2020 +0000

    Daily bump.

commit c00d40c9535356de3a09318276dfcaf561c01ffa
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Jul 14 00:18:23 2020 +0000

    Daily bump.

commit ba6291a1c2c368efa063afa58f1b512f41ed0a91
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Jul 13 00:18:01 2020 +0000

    Daily bump.

commit 4175295d1587a222c46a56b54651cc3950933823
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Jul 12 00:18:01 2020 +0000

    Daily bump.

commit 34ffcfe7621549be8badd4b1b8553e87847b1e79
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Jul 11 00:18:18 2020 +0000

    Daily bump.

commit 00672d956d0e2ac42c34ae17bbcf9b61c5efa2a5
Author: Will Schmidt <will_schmidt@vnet.ibm.com>
Date:   Fri Jul 10 11:04:37 2020 -0500

    [PATCH, rs6000]Add support to enable vmsumudm behind vec_msum builtin.
    
    2020-07-08  Will Schmidt  <will_schmidt@vnet.ibm.com>
    
    gcc/ChangeLog:
    
            * config/rs6000/altivec.h (vec_vmsumudm): New define.
            * config/rs6000/altivec.md (UNSPEC_VMSUMUDM): New unspec.
              (altivec_vmsumudm): New define_insn.
            * config/rs6000/rs6000-builtin.def (altivec_vmsumudm): New BU_ALTIVEC_3
              entry. (vmsumudm): New BU_ALTIVEC_OVERLOAD_3 entry.
            * config/rs6000/rs6000-c.c (altivec_overloaded_builtins): Add
              entries for ALTIVEC_BUILTIN_VMSUMUDM variants of vec_msum.
            * doc/extend.texi: Add document for vmsumudm behind vmsum.
    
    gcc/testsuite/ChangeLog:
    
            * gcc.target/powerpc/builtins-msum-runnable.c: New test.
            * gcc.target/powerpc/vsx-builtin-msum.c: New test.
    
            Modified from ...
            (cherry picked from commit c1a57681a64150d2fc336ba8e055c5f82e3737e8)

commit 8c25c91b117d814cf5c1deffd8a79b03fce68621
Author: Bin Cheng <bin.cheng@linux.alibaba.com>
Date:   Thu Jul 9 18:10:03 2020 +0800

    Schedule reduction partition in the last.
    
    If reduction partition's SCC is broken by runtime alias checks, force
    a negative post order to it so that it will be scheduled in the last.
    
    2020-07-09  Bin Cheng  <bin.cheng@linux.alibaba.com>
    
    gcc/
            PR tree-optimization/95804
            * tree-loop-distribution.c (break_alias_scc_partitions): Force
            negative post order to reduction partition.
    
    gcc/testsuite/
            PR tree-optimization/95804
            * gcc.dg/tree-ssa/pr95804.c: New test.
    
    (cherry picked from commit dd21b03900085c4d60bf03207ad28bcbfbc86a4b)

commit dc7a8afce35eb8948b481b5bcb8d26124a267f55
Author: Bin Cheng <bin.cheng@linux.alibaba.com>
Date:   Sat Jun 20 15:42:12 2020 +0800

    Record and restore postorder information in breaking alias sccs.
    
    gcc/
            PR tree-optimization/95638
            * tree-loop-distribution.c (pg_edge_callback_data): New field.
            (loop_distribution::break_alias_scc_partitions): Record and restore
            postorder information.  Fix memory leak.
    
    gcc/testsuite/
            PR tree-optimization/95638
            * g++.dg/tree-ssa/pr95638.C: New test.
    
    (cherry picked from commit 2c0069fafb53ccb7a45a6815025dfcbd2882a36e)

commit 21b27a613451c90738c88fc9c24366f6de1f7f5a
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Jul 10 00:18:18 2020 +0000

    Daily bump.

commit f69a6c40123d40543cb229364272d6ae930ec766
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Jul 9 00:18:36 2020 +0000

    Daily bump.

commit 006fda1b17a4d55b6548a1b3bd7efd0d8e40b6c4
Author: Harald Anlauf <anlauf@gmx.de>
Date:   Mon Jul 6 18:52:39 2020 +0200

    PR fortran/95709 - ICE in gfc_resolve_code, at fortran/resolve.c:11807
    
    The legacy "assigned GOTO" accepts only scalar integer variables.
    Check for proper arguments.
    
    gcc/fortran/
            PR fortran/95709
            * resolve.c (gfc_resolve_code): Check for valid arguments to
            assigned GOTO.
    
    (cherry picked from commit 824084e72e388f81015e7f67922c75f50741355a)

commit 6fa3b3bbac91861a56e7e16ee9315f28bb5f78a8
Author: Alexandre Oliva <oliva@adacore.com>
Date:   Tue Jul 7 09:02:01 2020 +0200

    accept <case> and [cond] in ChangeLog
    
    Only '(' and ':' currently terminate file lists in ChangeLog entries
    in the ChangeLog parser.  This rules out such legitimate entries as:
    
    * filename <CASE>:
    * filename [COND]:
    
    This patch extends the ChangeLog parser to recognize these forms.
    
    for  contrib/ChangeLog
    
            * gcc-changelog/git_commit.py: Support CASE and COND.
            * gcc-changelog/test_patches.txt: Add test.
            * gcc-changelog/test_email.py: Add test.
    
    Co-Authored-By: Martin Liska <mliska@suse.cz>
    (cherry picked from commit a759bfc7cf238b9fc5bf97884297fc69d8cdf2b5)

commit 170b863585d6c6af1dbbb5caaeaa61bafe820f82
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Jul 8 00:18:30 2020 +0000

    Daily bump.

commit ed54352ccfc3f0ec6c14e61035a78d06d5d44194
Author: Harald Anlauf <anlauf@gmx.de>
Date:   Thu Jul 2 20:41:51 2020 +0200

    PR fortran/93337 - ICE in gfc_dt_upper_string, at fortran/module.c:441
    
    When declaring a polymorphic variable that is not a dummy, allocatable or
    pointer, an ICE occurred due to a NULL pointer dereference.  Check for
    that situation and punt.
    
    gcc/fortran/
            PR fortran/93337
            * class.c (gfc_find_derived_vtab): Punt if name is not set.
    
    (cherry picked from commit d9fb6f2b4f1321b059807ff6073156f07d9d376b)

commit 35de2547db99de284233cbdd51ea5284f898cb80
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Jul 7 00:18:24 2020 +0000

    Daily bump.

commit 972c78d3f65354aa9ea23d5e503835d68881f494
Author: Will Schmidt <will_schmidt@vnet.ibm.com>
Date:   Wed Jun 24 13:59:34 2020 -0500

    Backport to gcc-9
    
            [PATCH, PR target/94954] Fix wrong codegen for vec_pack_to_short_fp32() builtin
    
    Hi,
      Fix codegen for builtin vec_pack_to_short_fp32.  This includes adding
    a define_insn for xvcvsphp, and adding a new define_expand for
    convert_4f32_8f16.
    
    [v2]
       Comment on altivec.md "convert_4f32_8f16" enhanced.
       Testsuite builtins-1-p9-runnable.c updated.
    
    OK for trunk and backports?
    
    Thanks
    -Will
    
            PR target/94954
    
    2020-07-06  Will Schmidt  <will_schmidt@vnet.ibm.com>
    
    gcc/ChangeLog:
    
            * config/rs6000/altivec.h (vec_pack_to_short_fp32): Update.
            * config/rs6000/altivec.md (UNSPEC_CONVERT_4F32_8F16): New unspec.
            (convert_4f32_8f16): New define_expand
            * config/rs6000/rs6000-builtin.def (convert_4f32_8f16): New builtin define
            and overload.
            * config/rs6000/rs6000-c.c (P9V_BUILTIN_VEC_CONVERT_4F32_8F16): New
            overloaded builtin entry.
            * config/rs6000/vsx.md (UNSPEC_VSX_XVCVSPHP): New unspec.
            (vsx_xvcvsphp): New define_insn.
    
    gcc/testsuite/ChangeLog:
    
            * gcc.target/powerpc/builtins-1-p9-runnable.c: Update.

commit 4ba3c53a298cebdbc05e7bb90de14cc22fd3115b
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Jul 6 00:18:20 2020 +0000

    Daily bump.

commit 4e9e0dab7a1dd9003269a8663117135f9ad91a94
Author: Harald Anlauf <anlauf@gmx.de>
Date:   Tue Jun 30 23:36:56 2020 +0200

    PR fortran/88379 - ICE with allocatable coarray, class and associate
    
    Catch NULL pointer dereference for ASSOCIATE on allocatable coarray variable.
    
    gcc/fortran/
            PR fortran/88379
            * resolve.c (resolve_assoc_var): Avoid NULL pointer dereference.
    
    (cherry picked from commit 267f84c6035c9380c8d1e9cb83ffe299c23e3a85)

commit f97862481a5bc37b4d244677b69dc0337f122dd4
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Jul 5 00:18:08 2020 +0000

    Daily bump.

commit dd1d01bc44650c49ad7754862692f9fe8312b957
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Jul 4 00:18:12 2020 +0000

    Daily bump.

commit 709faac49c7260c2e40da0a7727630ef6c72b59a
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Jul 3 00:18:11 2020 +0000

    Daily bump.

commit eb77f6f1b74aa200b70eb0a9e261c9f3b68294a0
Author: Ville Voutilainen <ville.voutilainen@gmail.com>
Date:   Thu Jul 2 22:16:39 2020 +0300

    PR libstdc++/91807
    
            PR libstdc++/91807
            * include/std/variant
            (_Copy_assign_base::operator=(const _Copy_assign_base&):
            Do the move-assignment from a temporary so that the temporary
            is constructed with an explicit index.
            * testsuite/20_util/variant/91807.cc: New.
    
    (cherry picked from commit dbca7a69f276e4829354f87f2747ebff36f6090e)

commit 3a3e472c9f6b79c2edd6595c345b77c0779ec2c6
Author: Martin Liska <mliska@suse.cz>
Date:   Thu Jul 2 10:51:06 2020 +0200

    gcc-changelog: sync from master.
    
    contrib/ChangeLog:
    
            * gcc-changelog/git_check_commit.py: New file.
            * gcc-changelog/git_commit.py: New file.
            * gcc-changelog/git_email.py: New file.
            * gcc-changelog/git_repository.py: New file.
            * gcc-changelog/git_update_version.py: New file.
            * gcc-changelog/test_email.py: New file.
            * gcc-changelog/test_patches.txt: New file.

commit 2f5922a5a0c6c921ed97a414f692e105764a9abb
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Jul 2 00:18:12 2020 +0000

    Daily bump.

commit e4490e7771e4df28427cca5e113afe58a7fff8d5
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Wed Jul 1 21:01:15 2020 +0100

    libstdc++: Remove noexcept from match_results comparisons (PR 94627)
    
    These functions can't be noexcept because the iterators stored in the
    sub_match objects can throw on any operation.
    
    libstdc++-v3/ChangeLog:
    
            PR libstdc++/94627
            * include/bits/regex.h (operator==, operator!=): Remove noexcept
            equality comparisons for match_results.
            * testsuite/28_regex/match_results/94627.cc: New test.
    
    (cherry picked from commit a1a0dc4548979f8a340a7ea71624a52a20e1e0b3)

commit 0c6cec5ce99a7f532d66373e0ba340c94ef688a6
Author: Harald Anlauf <anlauf@gmx.de>
Date:   Mon Jun 29 15:15:49 2020 +0200

    PR fortran/71706 - ICE on using sync images with -fcheck=bounds
    
    The run-time checking code did not properly convert the kind of the
    argument to SYNC IMAGES, leading to an error in verify_gimple.  Fix that.
    
    gcc/fortran/
            PR fortran/71706
            * trans-stmt.c (gfc_trans_sync): Do proper kind conversion in
            bounds-checking code.
    
    (cherry picked from commit e6cc67f6616c96f3e18a434e0c74ba2f3818cb6d)

commit f60918f960594ab6aa6d3082d342385210e8ac90
Author: Harald Anlauf <anlauf@gmx.de>
Date:   Sun Jun 28 13:52:09 2020 +0200

    PR fortran/95880 - ICE in gfc_add_type, at fortran/symbol.c:2030
    
    The fix for PR39695 did not properly distinguish between procedure names
    and other symbols names in errors emitted for invalid code.  Fix that.
    
    gcc/fortran/
            PR fortran/95880
            * symbol.c (gfc_add_type): If sym->ns->proc_name is set, use it,
            otherwise fall back to sym->name.
    
    (cherry picked from commit f3a8f66a83f8c94f6fbb0233cefba8032f2e4876)

commit a833478ca9898fe287ad423e5af8462938886758
Author: Mark Eggleston <markeggleston@gcc.gnu.org>
Date:   Tue Jun 23 11:01:28 2020 +0100

    Fortran  : Bogus error with additional blanks in type(*) PR95829
    
    Checking for "* ) " instead of "*)" clears the bogus error.
    
    2020-07-01  Steven G. Kargl  <kargl@gcc.gnu.org>
    
    gcc/fortran/
    
            PR fortran/95829
            * decl.c (gfc_match_decl_type_spec): Compare with "* ) " instead
            of "*)".
    
    2020-07-01  Mark Eggleston  <markeggleston@gcc.gnu.org>
    
    gcc/testsuite/
    
            PR fortran/95829
            * gfortran.dg/pr95829.f90: New test.
    
    (cherry picked from commit 624e60f080989fa57756575a0bb47a97748b52b8)

commit 57aa039a755a7278182e0c6312b774cb36a5d25d
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Jul 1 00:18:12 2020 +0000

    Daily bump.

commit 1b9f2e47a7d5d39df7b8248f2a199aa5c7a1778c
Author: Alex Coplan <alex.coplan@arm.com>
Date:   Mon May 18 16:29:04 2020 +0100

    arm: Don't generate invalid LDRD insns
    
    This fixes a bug in the arm backend where GCC generates invalid LDRD
    instructions. The LDRD instruction requires the first transfer register to be
    even, but GCC attempts to use odd registers here. For example, with the
    following C code:
    
        struct c {
          double a;
        } __attribute((aligned)) __attribute((packed));
        struct c d;
        struct c f(struct c);
        void e() { f(d); }
    
    The struct d is passed in registers r1 and r2 to the function f, and GCC
    attempted to do this with a LDRD instruction when compiling with -march=armv7-a
    on a soft float toolchain.
    
    The fix is analogous to the corresponding one for STRD in the same function:
    https://gcc.gnu.org/git/?p=gcc.git;a=commit;h=52057dc4ac5295caebf83147f688d769c93cbc8d
    
    gcc/:
            * config/arm/arm.c (output_move_double): Fix codegen when loading into
            a register pair with an odd base register.
    
    gcc/testsuite/:
            * gcc.c-torture/compile/packed-aligned-1.c: New test.
            * gcc.c-torture/execute/packed-aligned.c: New test.
    
    (cherry picked from commit 8b8f3117263ca79b3febadadb07732588d99d5f6)

commit dc0a56856417a91dc49fd1ea75e0802d0f5da276
Author: Thomas Koenig <tkoenig@gcc.gnu.org>
Date:   Mon Jun 29 23:11:06 2020 +0200

    Do not generate recursion check for compiler-generated procedures.
    
    This one-line fix removes a check for recursion for procedures
    which are compiler-generated, such as finalizers or deallocation.
    These need to be recursive, even if the user code should not be.
    
    gcc/fortran/ChangeLog:
    
            PR fortran/95743
            * trans-decl.c (gfc_generate_function_code): Do not generate
            recursion check for compiler-generated procedures.
    
    (cherry picked from commit 95cdcf701dad826f225d6413b59650f181954399)

commit c49ed508f1d9420e9608036978cfe1f146707894
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Jun 30 09:04:17 2020 +0000

    Daily bump.

commit d8d451ec344af2fde2fd9248bf707207f89f8a29
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Jun 29 00:18:18 2020 +0000

    Daily bump.

commit d8f8749e9c8542289ed179f1a0a18a7cf893714f
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Jun 28 00:18:11 2020 +0000

    Daily bump.

commit cb797c730dd37ffe88ed0b1d04aec01982feacb5
Author: Harald Anlauf <anlauf@gmx.de>
Date:   Sat Jun 27 14:56:33 2020 +0200

    PR fortran/95881 - ICE in resolve_symbol, at fortran/resolve.c:15175
    
    Avoid NULL pointer dereference.
    
    gcc/fortran/
            PR fortran/95881
            * resolve.c (resolve_symbol): Avoid NULL pointer dereference.
    
    (cherry picked from commit 3cbc0fb39c84ae0a51a9a88649dccd105bf17d6e)

commit de6a3297416fa448c35ae9ea4baa41dedec6ec44
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Jun 27 00:18:07 2020 +0000

    Daily bump.

commit 57096f5c52be8c5f0c29663234f31845bb172216
Author: Iain Buclaw <ibuclaw@gdcproject.org>
Date:   Tue Jun 23 22:43:27 2020 +0200

    d: Fix ICE during error recovery in semantic pass
    
    Fixes a regression caused by an incomplete backport of converting the
    Expression semantic pass to a Visitor.
    
    gcc/d/ChangeLog:
    
            PR d/95250
            * dmd/expressionsem.c (class ExpressionSemanticVisitor): Return early
            if error occurred during semantic of DivExp.
    
    gcc/testsuite/ChangeLog:
    
            PR d/95250
            * gdc.dg/pr95250.d: New test.
    
    (cherry picked from commit 1d19c9cd3dd99ba8885c0fc93223918399f73939)

commit 53bc489468c3bf2958151ba624679cadff403ce8
Author: Iain Buclaw <ibuclaw@gdcproject.org>
Date:   Tue Jun 23 16:25:29 2020 +0200

    d: Fix ICE in uda_attribute_p when looking up unknown attribute
    
    The target attribute table is not guaranteed to be set in all backends.
    
    gcc/d/ChangeLog:
    
            PR d/95173
            * d-attribs.cc (uda_attribute_p): Don't search target attribute table
            if NULL.
    
    gcc/testsuite/ChangeLog:
    
            PR d/95173
            * gdc.dg/pr95173.d: New test.
    
    (cherry picked from commit 62e02c8729a75c4a859edc18e0bcafb87d717f46)

commit 597b99c3221e43c52f076e982f12f18be580649c
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Jun 26 00:18:08 2020 +0000

    Daily bump.

commit 12cdfdd5b143866406c0d2ba4e67e9409b5cf341
Author: H.J. Lu <hjl.tools@gmail.com>
Date:   Wed Jun 24 09:12:47 2020 -0700

    x96: Remove PTA_CLWB from PTA_ICELAKE_CLIENT
    
    CLWB isn't supported on Ice Lake client.  But Ice Lake server support it.
    Move PTA_CLWB to PTA_ICELAKE_SERVER.
    
            PR target/95874
            * config/i386/i386.h (PTA_ICELAKE_CLIENT): Remove PTA_CLWB.
            (PTA_ICELAKE_SERVER): Add PTA_CLWB.
    
    (cherry picked from commit c422e5f81f42a0fc197f0715f4fcd81f1be90bff)

commit c66d68d1e1e17ff1dd808d0acf42d12edf833b4e
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Jun 25 00:18:08 2020 +0000

    Daily bump.

commit e3d976ae009b873596b47961869b7cdfc41d7e67
Author: Harald Anlauf <anlauf@gmx.de>
Date:   Wed Jun 24 22:44:11 2020 +0200

    Revert "PR fortran/95689 - ICE in check_sym_interfaces, at fortran/interface.c:2015"
    
    With submodules, name mangling of interfaces may result in long internal
    symbols overflowing an internal buffer.  We now check that we do not
    exceed the enlarged buffer size.
    
    gcc/fortran/
            PR fortran/95689
            * interface.c (check_sym_interfaces): Enlarge temporary buffer,
            and add check on length on mangled name to prevent overflow.
    
    gcc/testsuite/
            PR fortran/95689
            * gfortran.dg/pr95689.f90: New test.
    
            (reverts the cherry-pick from commit 62c0c0ea7bfb6f8f6b8d767b05120cafb6823da6)

commit ce2da7f82f4f5469c435ff3731fdeaffcdab0f66
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Wed Jun 24 11:45:01 2020 +0100

    libstdc++: Fix std::from_chars to ignore leading zeros in base 2
    
    The parser for binary numbers returned an error if the entire string
    contains more digits than the result type. Leading zeros should be
    ignored.
    
    libstdc++-v3/ChangeLog:
    
            * include/std/charconv (__from_chars_binary): Ignore leading zeros.
            * testsuite/20_util/from_chars/1.cc: Check "0x1" for all bases,
            not just 10 and 16.
            * testsuite/20_util/from_chars/3.cc: New test.
    
    (cherry picked from commit eb0ff770e29715deb8b2e6f5da736e0c1e8f8d07)

commit ea3f1f2347841c7bbc469c0a7c8fd46fdbb0b251
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Jun 24 00:18:18 2020 +0000

    Daily bump.

commit 84323d9fa7526496d844f167f6353e0ec12279e8
Author: Harald Anlauf <anlauf@gmx.de>
Date:   Sat Jun 20 16:09:45 2020 +0200

    PR fortran/95689 - ICE in check_sym_interfaces, at fortran/interface.c:2015
    
    With submodules, name mangling of interfaces may result in long internal
    symbols overflowing an internal buffer.  We now check that we do not
    exceed the enlarged buffer size.
    
    gcc/fortran/
            PR fortran/95689
            * interface.c (check_sym_interfaces): Enlarge temporary buffer,
            and add check on length on mangled name to prevent overflow.
    
    (cherry picked from commit 62c0c0ea7bfb6f8f6b8d767b05120cafb6823da6)

commit 449246af10befa7e973cd6f864138e6cdd5c24e5
Author: Harald Anlauf <anlauf@gmx.de>
Date:   Sat Jun 20 16:05:13 2020 +0200

    PR fortran/95587 - ICE in gfc_target_encode_expr, at fortran/target-memory.c:362
    
    EQUIVALENCE objects are subject to constraints listed in the Fortran 2018
    standard, section 8.10.1.1.  These constraints are to be checked
    also for CLASS variables.
    
    gcc/fortran/
            PR fortran/95587
            * match.c (gfc_match_equivalence): Check constraints on
            EQUIVALENCE objects also for CLASS variables.
    
    (cherry picked from commit 5eb947601bdce59f2ff26694327ad173c51c2724)

commit f541655e8b9cb5ea5afaff6a3ad164fec3e3b276
Author: Eric Botcazou <ebotcazou@gcc.gnu.org>
Date:   Tue Jun 23 18:33:28 2020 +0200

    Fix memory corruption with vector and variant record
    
    The problem is that Has_Constrained_Partial_View must be tested on the
    base type of the designated type of an allocator.
    
    gcc/ada/ChangeLog:
            * gcc-interface/trans.c (gnat_to_gnu) <N_Allocator>: Minor tweaks.
            Call Has_Constrained_Partial_View on base type of designated type.

commit eb9a24a6b6b2a020824b835e3a6ac0e52a5bdbd2
Author: Mark Eggleston <markeggleston@gcc.gnu.org>
Date:   Mon Jun 22 13:35:01 2020 +0100

    Fortran  : ICE in resolve_fl_procedure PR95708
    
    Now issues an error "Intrinsic procedure 'num_images' not
    allowed in PROCEDURE" instead of an ICE.
    
    2020-06-22  Steven G. Kargl  <kargl@gcc.gnu.org>
    
    gcc/fortran/
    
            PR fortran/95708
            * intrinsic.c (add_functions): Replace CLASS_INQUIRY with
            CLASS_TRANSFORMATIONAL for intrinsic num_images.
            (make_generic): Replace ACTUAL_NO with ACTUAL_YES for
            intrinsic team_number.
            * resolve.c (resolve_fl_procedure): Check pointer ts.u.derived
            exists before using it.
    
    2020-06-22  Mark Eggleston  <markeggleston@gcc.gnu.org>
    
    gcc/testsuite/
    
            PR fortran/95708
            * gfortran.dg/pr95708.f90: New test.
    
    (cherry picked from commit 647340c92a042e8e6f7d004637f07060dbde49c0)

commit 0e871a5b84339006697ba43732809eeda9159480
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Jun 23 00:18:04 2020 +0000

    Daily bump.

commit ba6547307106a80d84f24e1773b21c2c3d1e5c5b
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Jun 22 00:18:16 2020 +0000

    Daily bump.

commit ebfec202cb26b5c3aa4912f0f521223666d2596a
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Jun 21 00:18:05 2020 +0000

    Daily bump.

commit b2246cd6e9fd708e4e3e6c53f1c42e9b11524f84
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Jun 20 00:18:03 2020 +0000

    Daily bump.

commit 4255258f6703be4726cdd44ec5b4649a649db0c8
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Jun 19 00:18:21 2020 +0000

    Daily bump.

commit 5e91fc4718e3e5b5f8c00c343fdab1abd80eeac3
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Jun 18 00:18:27 2020 +0000

    Daily bump.

commit cd32b2c51b913eed517e9503009fb3f0822d9cab
Author: Samuel Thibault <samuel.thibault@gnu.org>
Date:   Fri May 29 13:46:50 2020 +0200

    hurd: libgcc unwinding support over signal trampolines
    
            libgcc/
            * config.host (md_unwind_header) <i[34567]86-*-gnu*>: Set to
            'i386/gnu-unwind.h'
            * config/i386/gnu-unwind.h: New file.
    
    Signed-off-by: Thomas Schwinge <thomas@codesourcery.com>
    (cherry picked from commit 5e2eebc80d6eeca24745c27a925afdb64292ed22)

commit b7a185371cb9e5ca07bfe5af9c65fbff874c76f6
Author: Thomas Schwinge <thomas@codesourcery.com>
Date:   Sat Jun 6 18:44:34 2020 +0200

    [HSA] Avoid ICE when "HSA does not implement indirect calls"
    
    Made apparent by recent commit dc703151d4f4560e647649506d5b4ceb0ee11e90
    "openmp: Implement discovery of implicit declare target to clauses":
    
        +FAIL: libgomp.c/target-39.c (internal compiler error)
        +FAIL: libgomp.c/target-39.c (test for excess errors)
        +UNRESOLVED: libgomp.c/target-39.c compilation failed to produce executable
    
    This is in a '--enable-offload-targets=[...],hsa' build, with '-foffload=hsa'
    enabled (by default).
    
        during GIMPLE pass: hsagen
        source-gcc/libgomp/testsuite/libgomp.c/target-39.c: In function ‘main._omp_fn.0.hsa.0’:
        source-gcc/libgomp/testsuite/libgomp.c/target-39.c:23:11: internal compiler error: Segmentation fault
           23 |   #pragma omp target map(from:err)
              |           ^~~
        [...]
    
    GDB:
    
        Program received signal SIGSEGV, Segmentation fault.
        fndecl_built_in_p (node=0x0, name=BUILT_IN_PREFETCH) at [...]/source-gcc/gcc/tree.h:6267
        6267      return (fndecl_built_in_p (node, BUILT_IN_NORMAL)
        (gdb) bt
        #0  fndecl_built_in_p (node=0x0, name=BUILT_IN_PREFETCH) at [...]/source-gcc/gcc/tree.h:6267
        #1  0x0000000000b19739 in gen_hsa_insns_for_call (stmt=stmt@entry=0x7ffff693b200, hbb=hbb@entry=0x2b152c0) at [...]/source-gcc/gcc/hsa-gen.c:5304
        #2  0x0000000000b1aca7 in gen_hsa_insns_for_gimple_stmt (stmt=0x7ffff693b200, hbb=hbb@entry=0x2b152c0) at [...]/source-gcc/gcc/hsa-gen.c:5770
        #3  0x0000000000b1bd21 in gen_body_from_gimple () at [...]/source-gcc/gcc/hsa-gen.c:5999
        #4  0x0000000000b1dbd2 in generate_hsa (kernel=<optimized out>) at [...]/source-gcc/gcc/hsa-gen.c:6596
        #5  0x0000000000b1de66 in (anonymous namespace)::pass_gen_hsail::execute (this=0x2a2aac0) at [...]/source-gcc/gcc/hsa-gen.c:6680
        #6  0x0000000000d06f90 in execute_one_pass (pass=pass@entry=0x2a2aac0) at [...]/source-gcc/gcc/passes.c:2502
        [...]
        (gdb) up
        #1  0x0000000000b19739 in gen_hsa_insns_for_call (stmt=stmt@entry=0x7ffff693b200, hbb=hbb@entry=0x2b152c0) at /home/thomas/tmp/source/gcc/build/track-slim-omp/source-gcc/gcc/hsa-gen.c:5304
        5304          if (fndecl_built_in_p (function_decl, BUILT_IN_PREFETCH))
        (gdb) print function_decl
        $1 = (tree) 0x0
        (gdb) list
        5299      if (!gimple_call_builtin_p (stmt, BUILT_IN_NORMAL))
        5300        {
        5301          tree function_decl = gimple_call_fndecl (stmt);
        5302          /* Prefetch pass can create type-mismatching prefetch builtin calls which
        5303             fail the gimple_call_builtin_p test above.  Handle them here.  */
        5304          if (fndecl_built_in_p (function_decl, BUILT_IN_PREFETCH))
        5305            return;
        5306
        5307          if (function_decl == NULL_TREE)
        5308            {
    
    The problem is present already since 2016-11-23 commit
    56b1c60e412fcf1245b4780871553cbdebb956a3 (r242761) "Merge from HSA branch to
    trunk", and the fix obvious enough.
    
            gcc/
            * hsa-gen.c (gen_hsa_insns_for_call): Move 'function_decl ==
            NULL_TREE' check earlier.
            gcc/testsuite/
            * c-c++-common/gomp/hsa-indirect-call-1.c: New file.
    
    (cherry picked from commit 973bce0fb50bbfd91f47238b82b99935525716ad)

commit d2132067ab23f9ab135f81fba816e39e5940c098
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Jun 17 00:18:14 2020 +0000

    Daily bump.

commit d9867034e033c08fdabaebfe2f0914d7d9bb25c6
Author: Patrick Palka <ppalka@redhat.com>
Date:   Tue Jun 16 12:16:02 2020 -0400

    c++: zero_init_expr_p of dependent expression [PR95678]
    
    gcc/cp/ChangeLog:
    
            PR c++/95678
            * tree.c (zero_init_expr_p): Use uses_template_parms instead of
            dependent_type_p.
    
    gcc/testsuite/ChangeLog:
    
            PR c++/95678
            * g++.dg/cpp0x/dependent3.C: New test.
    
    (cherry picked from commit 9a453da5cac7b6610cd342a7bea256acba5e61e1)

commit 93c2834e92419abf04fd9f54ca25ed22086611b0
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Jun 16 00:18:11 2020 +0000

    Daily bump.

commit a251bf8229e3fca1adaddd822e2bab12a43d8ea6
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Jun 15 00:17:59 2020 +0000

    Daily bump.

commit 152aaef6feb909689132c74bebb01420dc7776e3
Author: Harald Anlauf <anlauf@gmx.de>
Date:   Thu Jun 11 15:48:56 2020 +0200

    PR fortran/95503 - Fix ICE in gfc_is_simply_contiguous, at fortran/expr.c:5844
    
    The check for assigning a pointer that cannot be determined to be simply
    contiguous at compile time to a contiguous pointer does not need to be
    invoked if the lhs of the assignment is known to have conflicting attributes.
    
    2020-06-11  Harald Anlauf  <anlauf@gmx.de>
    
    gcc/fortran/
            PR fortran/95503
            * expr.c (gfc_check_pointer_assign): Skip contiguity check of rhs
            of pointer assignment if lhs cannot be simply contiguous.
    
    gcc/testsuite/
            PR fortran/95503
            * gfortran.dg/pr95503.f90: New test.
    
    (cherry picked from commit 87af4f40453a9c84363bde5d9a58466de7fbee2e)

commit 9224bcfd6a4edf61e371e2d83fb126c948182cba
Author: Thomas Koenig <tkoenig@gcc.gnu.org>
Date:   Sun Jun 14 13:50:48 2020 +0200

    When avoiding double deallocation, look at namespace, expression and component.
    
    Our finalization handling is a mess.  Really, we should get to try and get
    this fixed for gcc 11.
    
    In the meantime, here is a patch which fixes a regression I introduced
    when fixing a regression with a memory leak.  The important thing
    here is to realize that we do not need to finalize (and deallocate)
    multiple times for the same expression and the same component
    in the same namespace.  It might cause code size regressions, but
    better big code than wrong code...
    
    Backported from r11-1296-g1af22e455584ef5fcad2b4474c1efc3fd26f6cb3 .
    
    gcc/fortran/ChangeLog:
    
            PR fortran/94109
            * class.c (finalize_component): Return early if finalization has
            already happened for expression and component within namespace.
            * gfortran.h (gfc_was_finalized): New type.
            (gfc_namespace): Add member was_finalzed.
            (gfc_expr): Remove finalized.
            * symbol.c (gfc_free_namespace): Free was_finalized.
    
    gcc/testsuite/ChangeLog:
    
            PR fortran/94109
            * gfortran.dg/finalize_34.f90: Adjust free counts.
            * gfortran.dg/finalize_36.f90: New test.

commit e783a36f0b8c2d0d629d2fd9d9fb91a8d17cc659
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Jun 14 00:18:00 2020 +0000

    Daily bump.

commit 81568ce966da8c5a13af9c0f1c4f1b13aba39fbc
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Jun 13 00:18:12 2020 +0000

    Daily bump.

commit 9322c84f46594f6689c6164418e35dad9770a56c
Author: Ian Lance Taylor <iant@golang.org>
Date:   Fri Jun 12 14:00:11 2020 -0700

    go.test: update issue4085b.go to version from Go 1.13
    
    This lets the test pass on AIX.
    
    Not updating to master because we get slightly different error messages,
    so that is a more complex change.

commit 187c96ea5310cef1977d8a44b0b9a6b561b6c8c7
Author: Martin Liska <mliska@suse.cz>
Date:   Thu Jun 11 09:34:41 2020 +0200

    asan: fix RTX emission for ilp32
    
    gcc/ChangeLog:
    
            PR sanitizer/95634
            * asan.c (asan_emit_stack_protection): Fix emission for ilp32
            by using Pmode instead of ptr_mode.
    
    Co-Authored-By: Jakub Jelinek <jakub@redhat.com>
    (cherry picked from commit 8cff672cb9a132d3d3158c2edfc9a64b55292b80)

commit 877d8d63228579bd56f94e6c56fbfeb015da08e5
Author: Martin Liska <mliska@suse.cz>
Date:   Tue May 19 16:57:56 2020 +0200

    Add missing store in emission of asan_stack_free.
    
    gcc/ChangeLog:
    
    2020-05-19  Martin Liska  <mliska@suse.cz>
    
            PR sanitizer/94910
            * asan.c (asan_emit_stack_protection): Emit
            also **SavedFlagPtr(FakeStack, class_id) = 0 in order to release
            a stack frame.
    
    (cherry picked from commit 8b6731e674c76cb48a417f2eef74ced92a17f469)

commit 91efbd795b9a89fbf1408415e23f7223747442ba
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Jun 12 00:18:20 2020 +0000

    Daily bump.

commit 74eb19c2499c1b9011629799e16d74f299f35b33
Author: Marek Polacek <polacek@redhat.com>
Date:   Thu Jun 11 18:38:00 2020 -0400

    c++: Fix bogus -Wparentheses warning [PR95344]
    
    Since r267272, which added location wrappers, cp_fold loses
    TREE_NO_WARNING on a MODIFY_EXPR that finish_parenthesized_expr set, and
    that results in a bogus -Wparentheses warning.
    
    I.e., previously we had "b = 1" but now we have "VIEW_CONVERT_EXPR<bool>(b) = 1"
    and cp_fold_maybe_rvalue folds away the location wrapper and so we do
    2718             x = fold_build2_loc (loc, code, TREE_TYPE (x), op0, op1);
    in cp_fold and the flag is lost.
    
            PR c++/95344
            * cp-gimplify.c (cp_fold) <case MODIFY_EXPR>: Don't set
            TREE_THIS_VOLATILE here.
            (cp_fold): Set it here along with TREE_NO_WARNING.
    
            * c-c++-common/Wparentheses-2.c: New test.

commit 02f6c5b711b8188c3f49a79c730911b0bd216585
Author: Marek Polacek <polacek@redhat.com>
Date:   Thu Jun 11 17:58:21 2020 -0400

    c++: Fix ICE in check_local_shadow with enum [PR95560]
    
    Another indication that perhaps this warning is emitted too early.  We
    crash because same_type_p gets a null type: we have an enumerator
    without a fixed underlying type and finish_enum_value_list hasn't yet
    run.  So check if the type is null before calling same_type_p.
    
            PR c++/95560
            * name-lookup.c (check_local_shadow): Check if types are
            non-null before calling same_type_p.
    
            * g++.dg/warn/Wshadow-compatible-local-3.C: New test.

commit f2db0516e1ad6e1c08ed36b14920422f7699c153
Author: Harald Anlauf <anlauf@gmx.de>
Date:   Thu Jun 11 21:03:48 2020 +0200

    PR fortran/95611 - ICE in access_attr_decl, at fortran/decl.c:9075
    
    When reporting a duplicate access specification of an operator, refer to
    the proper symbol.
    
    2020-06-11  Harald Anlauf <anlauf@gmx.de>
    
    gcc/fortran/
            PR fortran/95611
            * decl.c (access_attr_decl): Use correct symbol in error message.
    
    Co-Authored-By: Steven G. Kargl  <kargl@gcc.gnu.org>
    (cherry picked from commit 393ccb72566dc004b9ab5c3b8fb6fdca6c095812)

commit 77137fbd464b20e2422c887d1e46fa5f1c38dc9e
Author: Harald Anlauf <anlauf@gmx.de>
Date:   Sun Jun 7 16:43:12 2020 +0200

    PR fortran/95091 - Buffer overflows with submodules and long symbols
    
    Add cast to fix bootstrap error with -Werror=sign-compare.
    
    gcc/fortran/
            PR fortran/95091
            * class.c (gfc_hash_value): Add cast.
    
    (cherry picked from commit 5aaccde3db39fac7e7f6677ceccc1eadd9c6a424)

commit abfe42c1fb66a534290bd0a808c2d90842ee848b
Author: Harald Anlauf <anlauf@gmx.de>
Date:   Sun Jun 7 14:47:24 2020 +0200

    PR fortran/95091 - Buffer overflows with submodules and long symbols
    
    With submodules, name mangling results in long internal symbols.  This
    requires adjustment of the sizes of temporaries to avoid buffer overflows.
    
    2020-06-07  Harald Anlauf  <anlauf@gmx.de>
    
    gcc/fortran/
            PR fortran/95091
            * class.c (get_unique_type_string, gfc_hash_value): Enlarge
            buffers, and check whether the strings returned by
            get_unique_type_string() fit.
    
    (cherry picked from commit b342cfd648e6658363c7c8fef83af8f59dba1795)

commit cb05b2d55fbf6c909ce7f96f9fad272873c8efe6
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Jun 11 00:18:31 2020 +0000

    Daily bump.

commit d76ee72858dd373ea2bb4594623eb7590c925e68
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Jun 10 00:18:31 2020 +0000

    Daily bump.

commit 6dee1cefd81bd7e5fb1fbee727794e073f5e34a6
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Jun 9 00:18:34 2020 +0000

    Daily bump.

commit 30afda5a2f01a0b3b63725dc5ca566a000ecf790
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Jun 8 00:18:07 2020 +0000

    Daily bump.

commit f72eeedb437605355e0893c2beb05fa3fa486b9c
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Jun 7 00:18:03 2020 +0000

    Daily bump.

commit a47259fa7737ff6d4a7def074fb30bc7baef2f86
Author: Carl Love <cel@us.ibm.com>
Date:   Wed Apr 29 10:23:11 2020 -0500

    pr94833, fix vec_first_match_index for nulls
    
    Backported patch from mainline.  Updated ChangeLog format
            commit 24f68831d25bad739a6fe167a58b5b4c0c3cbf9a
            Author: Carl Love <cel@us.ibm.com>
            Date:   Wed Apr 29 10:23:11 2020 -0500
    
    2020-04-30  Carl Love  <cel@us.ibm.com>
    
    gcc/
            PR target/94833
            * config/rs6000/vsx.md (define_expand): Fix instruction generation for
            first_match_index_<mode>.
    
    gcc/testsuite/
            PR target/94833
            * gcc.target/powerpc/builtins-8-p9-runnable.c (main): Add
            additional test cases with zero vector elements.

commit bded95b1f8c9180428d0d6e247f1c07645203075
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Jun 6 00:18:13 2020 +0000

    Daily bump.

commit d82e9d37d843539127df59d7b8894e5e3baec9b9
Author: Harald Anlauf <anlauf@gmx.de>
Date:   Sat May 30 20:59:41 2020 +0200

    PR fortran/95373 - ICE in build_reference_type, at tree.c:7942
    
    The use of KIND, LEN, RE, and IM inquiry references for applicable intrinsic
    types is valid only for suffienctly new Fortran standards.  Add appropriate
    checks in the appropriate place.
    
    2020-05-30  Harald Anlauf  <anlauf@gmx.de>
    
    gcc/fortran/
            PR fortran/95373
            * primary.c (is_inquiry_ref): Move validity check of inquiry
            references against selected Fortran standard from here...
            (gfc_match_varspec) ...to here.
    
    gcc/testsuite/
            PR fortran/95373
            * gfortran.dg/pr95373_1.f90: Adjust error messages.
            * gfortran.dg/pr95373_2.f90: Adjust error message.
    
    (cherry picked from commit dd38c765a04d06c775134a135f68b18c3b7c9c78)

commit 2039ad0eb5261a2e7eb1d3c9da7576a5c370c073
Author: Harald Anlauf <anlauf@gmx.de>
Date:   Thu May 28 22:28:08 2020 +0200

    PR fortran/95373 - ICE in build_reference_type, at tree.c:7942
    
    The use of KIND, LEN, RE, and IM inquiry references for applicable intrinsic
    types is valid only for suffienctly new Fortran standards.  Add appropriate
    check.
    
    2020-05-28  Harald Anlauf  <anlauf@gmx.de>
    
    gcc/fortran/
            PR fortran/95373
            * primary.c (is_inquiry_ref): Check validity of inquiry
            references against selected Fortran standard.
    
    gcc/testsuite/
            PR fortran/95373
            * gfortran.dg/pr95373_1.f90: New test.
            * gfortran.dg/pr95373_2.f90: New test.
    
    (cherry picked from commit 5c715e6a2990cfb6c15acc1ee14219523534ec69)

commit 371739d01d00ae4c55902e0937b73ddee7d66391
Author: Harald Anlauf <anlauf@gmx.de>
Date:   Sun May 24 21:35:04 2020 +0200

    PR fortran/95106 - truncation of long symbol names with EQUIVALENCE
    
            For long module names, the generated name-mangled symbol was
            truncated, leading to bogus warnings about COMMON block
            mismatches.  Provide sufficiently large temporaries.
    
    gcc/fortran/
    
    2020-05-24  Harald Anlauf  <anlauf@gmx.de>
    
            PR fortran/95106
            * trans-common.c (gfc_sym_mangled_common_id): Enlarge temporaries
            for name-mangling.
    
    gcc/testsuite/
    
    2020-05-24  Harald Anlauf  <anlauf@gmx.de>
    
            PR fortran/95106
            * gfortran.dg/equiv_11.f90: New test.
    
    (cherry picked from commit d176184d98a00ab379ae5959aed1908a79995e6b)

commit 075bec57a1c63a1b1de9d95909866a6548380390
Author: Harald Anlauf <anlauf@gmx.de>
Date:   Fri Jun 5 20:30:34 2020 +0200

    PR fortran/95530, PR fortran/95537 - Buffer overflows with long symbols
    
    The testcases for PR95090 and PR95106 trigger buffer overflows with long
    symbols that were found with an instrumented compiler.  Enlarge the
    affected buffers, and add checks that the buffers will suffice.
    
    2020-06-05  Harald Anlauf  <anlauf@gmx.de>
    
    gcc/fortran/
            PR fortran/95530
            PR fortran/95537
            * decl.c (gfc_match_decl_type_spec): Enlarge buffer, and enhance
            string copy to detect buffer overflow.
            * gfortran.h (gfc_common_head): Enlarge buffer.
            * trans-common.c (finish_equivalences): Enhance string copy to
            detect buffer overflow.
    
    (cherry picked from commit bcd96c9cce962ca5b2c6f8459597fb759f945ccf)

commit fa0d6c132c8fd7deb118f8309aa9dfe41a88e840
Author: Harald Anlauf <anlauf@gmx.de>
Date:   Thu Jun 4 21:00:33 2020 +0200

    PR fortran/95500 - Segfault compiling extra interface on intrinsic
    
    Converting an expression so that it can be passed by reference could
    result in a NULL pointer dereference.
    
    2020-06-04  Steven G. Kargl  <kargl@gcc.gnu.org>
                Harald Anlauf  <anlauf@gmx.de>
    
    gcc/fortran/
            PR fortran/95500
            * trans-expr.c (gfc_conv_expr_reference): Do not dereference NULL
            pointer.
    
    gcc/testsuite/
            PR fortran/95500
            * gfortran.dg/pr95500.f90: New test.
    
    (cherry picked from commit 8c727bdf4acf28c8315b119a1c8f6d6af745c2af)

commit aa9bdd7359efe45cda06edede738b44c9bf4eea4
Author: H.J. Lu <hjl.tools@gmail.com>
Date:   Mon May 18 05:35:27 2020 -0700

    x86: Update Intel processor detection
    
    Add cpu model numbers for Intel Airmont, Tremont, Comet Lake, Ice Lake
    and Tiger Lake processor families.
    
            * config/i386/driver-i386.c (host_detect_local_cpu): Support
            Intel Airmont, Tremont, Comet Lake, Ice Lake and Tiger Lake
            processor families.

commit 3376296664b5bd2372902290f51902ad82b5b378
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Jun 5 00:18:16 2020 +0000

    Daily bump.

commit 62758cf490afdf73f0deeba39aa05583de99b3a4
Author: Thomas Schwinge <thomas@codesourcery.com>
Date:   Wed May 6 10:05:49 2020 +0200

    'libgomp.oacc-fortran/{error_,}stop-{1,2,3}.f': initialize before the checkpoint
    
    If, for example, GCC is configured such that 'libgomp-plugin-nvptx.so.1'
    dynamically links against 'libcuda.so.1', but testing is run on a system where
    there is no 'libcuda.so.1', this produces output such as:
    
        PASS: libgomp.oacc-fortran/error_stop-1.f -DACC_DEVICE_TYPE_host=1 -DACC_MEM_SHARED=1 -foffload=disable  -O0  (test for excess errors)
        PASS: libgomp.oacc-fortran/error_stop-1.f -DACC_DEVICE_TYPE_host=1 -DACC_MEM_SHARED=1 -foffload=disable  -O0  execution test
        FAIL: libgomp.oacc-fortran/error_stop-1.f -DACC_DEVICE_TYPE_host=1 -DACC_MEM_SHARED=1 -foffload=disable  -O0  output pattern test, is  CheCKpOInT
    
        libgomp: while loading libgomp-plugin-nvptx.so.1: libcuda.so.1: cannot open shared object file: No such file or directory
        ERROR STOP
    
        Error termination. Backtrace: [...]
        , should match CheCKpOInT(
        |
        |^M)+ERROR STOP (
        |
        |^M)+Error termination.*
    
    ..., where after 'CheCKpOInT' we got 'libgomp: while loading [...]' injected
    before the expected 'ERROR STOP'.
    
            libgomp/
            * testsuite/libgomp.oacc-fortran/error_stop-1.f: Initialize before
            the checkpoint.
            * testsuite/libgomp.oacc-fortran/error_stop-2.f: Likewise.
            * testsuite/libgomp.oacc-fortran/error_stop-3.f: Likewise.
            * testsuite/libgomp.oacc-fortran/stop-1.f: Likewise.
            * testsuite/libgomp.oacc-fortran/stop-2.f: Likewise.
            * testsuite/libgomp.oacc-fortran/stop-3.f: Likewise.
    
    (cherry picked from commit 1e378edd8f038c52914bc6cac8f6dd5a5c4f8a98)

commit 2b65b10c4c678b294aa1c2ac918d57f2de7f9af1
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Jun 4 00:18:14 2020 +0000

    Daily bump.

commit 3ed8a0c02bad7fb92b095e8f52fba63a9f002fd6
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Jun 3 00:18:19 2020 +0000

    Daily bump.

commit 6506cd198fa1c511d2ffb14bd213b9da271f124f
Author: Kyrylo Tkachov <kyrylo.tkachov@arm.com>
Date:   Tue Jun 2 17:50:47 2020 +0100

    aarch64: Add initial support for -mcpu=zeus
    
    This patch adds support for the Arm Zeus CPU.
    Bootstrapped and tested on aarch64-none-linux-gnu.
    
    2020-06-02  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>
    
            * config/aarch64/aarch64-cores.def (zeus): Define.
            * config/aarch64/aarch64-tune.md: Regenerate.
            * doc/invoke.texi (AArch64 Options): Document zeus -mcpu option.

commit 4f7b7f91e68128b4adc4d9dfbe1389fd543602a0
Author: Martin Liska <mliska@suse.cz>
Date:   Tue Jun 2 08:56:27 2020 +0200

    Remove bad ChangeLog entry.

commit ae6e1872de167ae39c11c2a6dca1a6898ca303bf
Author: Martin Liska <mliska@suse.cz>
Date:   Tue Jun 2 08:54:54 2020 +0200

    Remove accidentally installed file.
    
    ChangeLog:
    
            * -: Remove.

commit d2c5c8d103ab2c2269d8037d74276263ba860ab1
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Jun 2 00:18:16 2020 +0000

    Daily bump.

commit 2a0de88ccf2ecc6659b0f1e4580c1ce5cff976b3
Author: Thomas Koenig <tkoenig@gcc.gnu.org>
Date:   Sun May 31 10:26:40 2020 +0200

    Finalization depends on the expression, not on the component.
    
    This patch fixes a 8/9/10/11 regression, where finalized types
    were not finalized (and deallocated), which led to memory
    leaks.
    
    gcc/fortran/ChangeLog:
    
    2020-05-24  Thomas Koenig  <tkoenig@gcc.gnu.org>
    
            PR fortran/94361
            * class.c (finalize_component): Use expr->finalized instead of
            comp->finalized.
            * gfortran.h (gfc_component): Remove finalized member.
            (gfc_expr): Add it here instead.
    
    gcc/testsuite/ChangeLog:
    
    2020-05-24  Thomas Koenig  <tkoenig@gcc.gnu.org>
    
            PR fortran/94361
            * gfortran.dg/finalize_28.f90: Adjusted free counts.
            * gfortran.dg/finalize_33.f90: Likewise.
            * gfortran.dg/finalize_34.f90: Likewise.
            * gfortran.dg/finalize_35.f90: New test.
    
    (cherry picked from commit 811f902b764c5a13178cbd7588e96c16b3fab504)

commit 0e6aad5d9561e4df611e588f0cb1d819f41cdc27
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Jun 1 00:18:13 2020 +0000

    Daily bump.

commit a5a3b1326f07616ba984199d9a916f6dc59ad597
Author: Gerald Pfeifer <gerald@pfeifer.com>
Date:   Fri May 8 00:48:52 2020 +0200

    i386: Define __ILP32__ and _ILP32 for all 32-bit targets
    
            * config/i386/i386-c.c (ix86_target_macros): Define _ILP32 and
            __ILP32__ for 32-bit targets.
    
    (cherry picked from commit 13a46321516e2efd3bbb1f1899c539c6724240a9)

commit d03edb50a2319bde546dc0f9992c8edeb8837d80
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun May 31 00:18:08 2020 +0000

    Daily bump.

commit 59f2c72055391a6d1c4498f490dee68b7f1703d8
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat May 30 00:18:15 2020 +0000

    Daily bump.

commit 2631d84ba7dedc3c5c9f77e7065fbfbc11876ca6
Author: Alex Coplan <alex.coplan@arm.com>
Date:   Fri May 29 14:19:23 2020 +0100

    aarch64: PR target/94591: Don't generate invalid REV64 insns
    
    This fixes PR94591. The problem was the function
    aarch64_evpc_rev_local() matching vector permutations that were not
    reversals. In particular, prior to this patch, this function matched the
    identity permutation which led to generating bogus REV64 insns which
    were rejected by the assembler.
    
    gcc/
            PR target/94591
            * config/aarch64/aarch64.c (aarch64_evpc_rev_local): Don't match
            identity permutation.
    
    gcc/testsuite/
            PR target/94591
            * gcc.c-torture/execute/pr94591.c: New test.
    
    (cherry picked from commit 98452668d362bb9e6358f7eb5cff69f4f5ab1d45)

commit b6dc99434abb6f5fa70ced8790bcae29d4b6a4b1
Author: Kyrylo Tkachov <kyrylo.tkachov@arm.com>
Date:   Wed May 6 16:20:38 2020 +0100

    [AArch64] Use __getauxval instead of getauxval in LSE detection code in libgcc
    
    This version of the fix uses __getauxval instead of getauxval.
    The whole thing is guarded simply on __gnu_linux__.
    __getauxval was introduced in 2.16 but the aarch64 port was added in 2.17 so in practice I expect all aarch64 glibcs to support __getauxval.
    
    Bootstrapped and tested on aarch64-none-linux-gnu.
    Also tested on aarch64-none-elf.
    
    2020-05-06  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>
    
            * config/aarch64/lse-init.c (init_have_lse_atomics): Use __getauxval
            instead of getauxval.
            (AT_HWCAP): Define.
            (HWCAP_ATOMICS): Define.
            Guard detection on __gnu_linux__.
    
    (cherry picked from commit 1266778548e20de82983b6446f3cb685068cfb1e)

commit a243b6316937e4d4149e7ff5ad616f7baf4d4d34
Author: Martin Liska <mliska@suse.cz>
Date:   Thu May 28 08:16:58 2020 +0200

    gcov-tool: Flexible endian adjustment for merging coverage data
    
    gcc/ChangeLog:
    2020-05-27  Dong JianQiang  <dongjianqiang2@huawei.com>
    
            PR gcov-profile/95332
            * gcov-io.c (gcov_var::endian): Move field.
            (from_file): Add IN_GCOV_TOOL check.
            * gcov-io.h (gcov_magic): Ditto.
    
    libgcc/ChangeLog:
    2020-05-27  Dong JianQiang  <dongjianqiang2@huawei.com>
    
            PR gcov-profile/95332
            * libgcov-util.c (read_gcda_file): Call gcov_magic.
            * libgcov.h (gcov_magic): Disable GCC poison.
    
    (cherry picked from commit 17d1594bfe08f3c768e024b180816cbe37ac08ac)

commit e2786fecd84c86c61eb3273ec0ec754eac397588
Author: Martin Liska <mliska@suse.cz>
Date:   Fri May 29 11:29:25 2020 +0200

    Fix various limitations of git-backport.py.
    
    I've just tested the script and I'm going to install the patch
    to all active branches.
    
    contrib/ChangeLog:
    
            * git-backport.py: The script did 'git co HEAD~' when
            there was no modified ChangeLog file in a successful
            git cherry pick.
            Run cherry-pick --continue without editor.
    
    (cherry picked from commit 24663f1f6d709daf8913484914ed01af9f7a480a)

commit b9c8e38c11bed7d27979c693f4ec4e02001ebe23
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri May 29 00:18:04 2020 +0000

    Daily bump.

commit 0d607ecbf125551513e182a181ca9c6e25dc7609
Author: Harald Anlauf <anlauf@gmx.de>
Date:   Thu May 28 21:53:17 2020 +0200

    PR fortran/95104 - Segfault on a legal WAIT statement
    
    The initial commit for this PR uncovered a latent issue with unit locking
    in the Fortran run-time library.  Add check for valid unit.
    
    2020-05-28  Harald Anlauf  <anlauf@gmx.de>
    
    libgfortran/
            PR libfortran/95104
            * io/unit.c (unlock_unit): Guard by check for NULL pointer.
    
    (cherry picked from commit 6ce3d791dfcba469e709935aba5743640f7d4959)

commit e211b3da3899b3496add56ba45acb07569e7c15a
Author: Mark Eggleston <markeggleston@gcc.gnu.org>
Date:   Wed Apr 1 09:52:41 2020 +0100

    Fortran  : "type is( real(kind(1.)) )" spurious syntax error PR94397
    
    Based on a patch in the comments of the PR. That patch fixed this
    problem but caused the test cases for PR93484 to fail. It has been
    changed to reduce initialisation expressions if the expression is
    not EXPR_VARIABLE and not EXPR_CONSTANT.
    
    2020-05-28  Steven G. Kargl  <kargl@gcc.gnu.org>
                Mark Eggleston  <markeggleston@gcc.gnu.org>
    
    gcc/fortran/
    
            PR fortran/94397
            * match.c (gfc_match_type_spec): New variable ok initialised
            to true. Set ok with the return value of gfc_reduce_init_expr
            called only if the expression is not EXPR_CONSTANT and is not
            EXPR_VARIABLE. Add !ok to the check for type not being integer
            or the rank being greater than zero.
    
    2020-05-28  Mark Eggleston  <markeggleston@gcc.gnu.org>
    
    gcc/testsuite/
    
            PR fortran/94397
            * gfortran.dg/pr94397.F90: New test.
    
    (cherry picked from commit 3ea6977d0f1813d982743a09660eec1760e981ec)

commit c575cd2e0089cf2fcb11ffb7899e5fd472b3780c
Author: Mark Eggleston <markeggleston@gcc.gnu.org>
Date:   Thu May 7 08:15:26 2020 +0100

    Fortran  : ICE in gfc_trans_label_assign PR50392
    
    A function may contain an assigned goto.  If the the return variable
    is an integer a statement can be assigned to it.  Prior to this fix
    this resulted in an ICE.
    
    2020-05-28  Tobias Burnus  <tobias@codesourcery.com>
    
    gcc/fortran/
    
            PR fortran/50392
            * trans-decl.c (gfc_get_symbol_decl): Remove unnecessary block
            delimiters.  Add auxiliary variables if a label is assigned to
            a return variable. (gfc_gat_fake_result): If the symbol has an
            assign attribute set declaration from the symbol's backend
            declaration.
    
    2020-05-28  Mark Eggleston  <markeggleston@gnu.gcc.org>
    
    gcc/testsuite/
    
            PR fortran/50392
            * gfortran.dg/pr50392.f: New test.
    
    (cherry picked from commit a7fd43c38f7469a3ef5ee30e889d60e1376d4dfc)

commit bb42c9f52712c7ada6e0f18c82ac353aa76ce857
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu May 28 04:25:40 2020 +0000

    Daily bump.

commit 6f64bc18a664e1d003120cfa8508cb5fe06fa7ad
Author: Harald Anlauf <anlauf@gmx.de>
Date:   Tue May 26 23:29:52 2020 +0200

    PR fortran/95104 - Segfault on a legal WAIT statement
    
    Referencing a unit in a WAIT statement that has not been opened before
    resulted in a NULL pointer dereference.  Check for this condition.
    
    2020-05-26  Harald Anlauf  <anlauf@gmx.de>
    
    libgfortran/
            PR libfortran/95104
            * io/transfer.c (st_wait_async): Do not dereference NULL pointer.
    
    gcc/testsuite/
            PR libfortran/95104
            * gfortran.dg/pr95104.f90: New test.
    
    Co-Authored-By: Steven G. Kargl  <kargl@gcc.gnu.org>
    (cherry picked from commit 56f03cd12be26828788a27f6f3c250041a958e45)

commit b3b9ee70f3ea73bae3f7d2956172ca9c0a338980
Author: Thomas Koenig <tkoenig@gcc.gnu.org>
Date:   Sat May 23 19:01:43 2020 +0200

    Fixes a hang on an invalid ID in a WAIT statement.
    
    gcc/fortran/ChangeLog:
    
    2020-05-23  Thomas Koenig  <tkoenig@gcc.gnu.org>
    
            PR libfortran/95191
            * libgfortran.h (libgfortran_error_codes): Add
            LIBERROR_BAD_WAIT_ID.
    
    libgfortran/ChangeLog:
    
    2020-05-23  Thomas Koenig  <tkoenig@gcc.gnu.org>
    
            PR libfortran/95191
            * io/async.c (async_wait_id): Generate error if ID is higher
            than the highest current ID.
            * runtime/error.c (translate_error): Handle LIBERROR_BAD_WAIT_ID.
    
    libgomp/ChangeLog:
    
    2020-05-23  Thomas Koenig  <tkoenig@gcc.gnu.org>
    
            PR libfortran/95191
            * testsuite/libgomp.fortran/async_io_9.f90: New test.
    
    (cherry picked from commit 8df7ee67f6fdc780e9453f2baa8d1bf62c000761)

commit 2fbc989aee0a703a637cc2c907a985a117b60a7c
Author: Martin Liska <mliska@suse.cz>
Date:   Tue May 26 15:32:32 2020 +0200

    Add new git-backport.py script.
    
    contrib/ChangeLog:
    
            * git-backport.py: New file.

commit c99418920caec4c8df8479cb2a11da8bd574dc5a
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed May 27 07:47:38 2020 +0000

    Daily bump.

commit cd8cc299de624a764a5dcbcd7fb031a6b3e6b855
Author: Alexandre Oliva <oliva@adacore.com>
Date:   Tue May 26 11:28:42 2020 -0300

    [rs6000] fix mffsl emulation
    
    The emulation of mffsl with mffs, used when !TARGET_P9_MISC, is going
    through the motions, but not storing the result in the given
    operands[0]; it rather modifies operands[0] without effect.  It also
    creates a DImode pseudo that it doesn't use, overwriting subregs
    instead.
    
    The patch below fixes all of these, the indentation and a typo.
    
    
    I'm concerned about several issues in the mffsl testcase.  First, I
    don't see that comparing the values as doubles rather than as long
    longs is desirable.  These are FPSCR bitfields, not FP numbers.  I
    understand mffs et al use double because they output to FP registers,
    and the bit patterns are subnormal FP numbers, so it works, but given
    the need for bit masking of at least one side, I'm changing the
    compare to long longs.
    
    Another issue with the test is that, if the compare fails, it calls
    mffsl again to print the value, as if it would yield the same result.
    But part of the FPSCR that mffsl (emulated with mffs or not) copies to
    the output FP register is the FPCC, so the fcmpu used to compare the
    result of the first mffsl will modify FPSCR and thus the result of the
    second mffsl call.  After changing the compare, this is no longer the
    case, but I still think it's better to make absolutely sure what we
    print is what we compared.
    
    Yet another issue is that the test assumed the mffs bits that are not
    to be extracted by mffsl to be already zero, instead of masking them
    out explicitly.  This is not about the mffs emulation in the mffsl
    implementation, but about the mffs use in the test proper.  The bits
    appear to be zero indeed, as the bits left out are for sticky
    exceptions, but there are reserved parts of FPSCR that might turn out
    to be set in the future, so we're better off masking them out
    explicitly, otherwise those bits could cause the compare to fail.
    
    If some future mffsl is changed so that it copies additional nonzero
    bits, the test will fail, and then we'll have a chance to adjust it
    and the emulation.
    
    
    gcc/ChangeLog:
    
            PR target/94812
            * config/rs6000/rs6000.md (rs6000_mffsl): Copy result to
            output operand in emulation.  Don't overwrite pseudos.
    
    gcc/testsuite/ChangeLog:
    
            PR target/94812
            * gcc.target/powerpc/test_mffsl.c: Call mffsl only once.
            Reinterpret the doubles as long longs for compares.  Mask out
            mffs bits that are not expected from mffsl.
    
    (cherry picked from commit 50714f45eeaf315a0b55d3db3de3bf8df8e94b04)

commit b31e1415414e9f53179c04727b1196e98c5c16e3
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue May 26 00:17:54 2020 +0000

    Daily bump.

commit 0296697cf9893dc9509cdcd8e3fd4ba9fe422527
Author: Jason Merrill <jason@redhat.com>
Date:   Mon May 25 18:38:09 2020 -0400

    c++: constexpr and lambda capture [PR90212]
    
    This is the same issue as PR86429, just in potential_constant_expression_1
    rather than cxx_eval_constant_expression.  As in that case, when we're
    trying to evaluate a constant expression within a lambda, we don't have a
    constant closure object to refer to, but we can try to refer directly to the
    captured variable.
    
    gcc/cp/ChangeLog
    2020-05-05  Jason Merrill  <jason@redhat.com>
    
            PR c++/90212
            * constexpr.c (potential_constant_expression_1): In a lambda
            function, consider a captured variable directly.

commit e153e0ef3a35c2c72e8bf89bd905fe27f8877852
Author: Jason Merrill <jason@redhat.com>
Date:   Mon May 25 18:38:09 2020 -0400

    c++: Local class DMI using local static [PR90479]
    
    For default member initializers in templates it's important to push into the
    right context during get_nsdmi.  But for a local class that's not possible,
    and trying leaves the function context we need to be in, so don't try.
    
    gcc/cp/ChangeLog
    2020-05-01  Jason Merrill  <jason@redhat.com>
    
            PR c++/90479
            * init.c (get_nsdmi): Don't push_to_top_level for a local class.

commit f76202e096fc0be4db21761399b55f10cd09b20d
Author: Jason Merrill <jason@redhat.com>
Date:   Mon May 25 18:38:09 2020 -0400

    c++: -fmerge-all-constants vs. destructors [PR91529]
    
    cp_finish_decl avoids setting TREE_READONLY on TREE_STATIC variables that
    have non-constant construction or destruction, but -fmerge-all-constants was
    converting an automatic variable to static while leaving TREE_READONLY set.
    
    Fixed by clearing the flag in cp_finish_decl in the presence of
    -fmerge-all-constants.
    
    gcc/cp/ChangeLog
    2020-05-01  Jason Merrill  <jason@redhat.com>
    
            PR c++/91529
            * decl.c (cp_finish_decl): Also clear TREE_READONLY if
            -fmerge-all-constants.

commit 91664c43c0acf56fd86643530e4b0be78a06446c
Author: Jason Merrill <jason@redhat.com>
Date:   Mon May 25 18:38:09 2020 -0400

    c++: generic lambda and -fsanitize=vla-bound [PR93822]
    
    Within the generic lambda the VLA capture proxy VAR_DECL has DECL_VALUE_EXPR
    which is a NOP_EXPR to the VLA type of the proxy.  The problem here was that
    when instantiating we were tsubsting that type twice, once for the type of
    the DECL and once for the type of the NOP_EXPR, and getting two
    different (though equivalent) types.  Then gimplify_type_sizes fixed up the
    type of the DECL, but that didn't affect the type of the NOP_EXPR, leading
    to sadness.
    
    Fixed by directly reusing the type from the DECL.
    
    gcc/cp/ChangeLog
    2020-05-01  Jason Merrill  <jason@redhat.com>
    
            PR c++/93822
            * pt.c (tsubst_decl): Make sure DECL_VALUE_EXPR continues to have
            the same type as the variable.

commit 1b91e2f53b61bdd3dad5ecbe66497e891abac67d
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon May 25 00:17:52 2020 +0000

    Daily bump.

commit 81e65b210d33bad3e9263cd74fd8eca775df6ff9
Author: H.J. Lu <hjl.tools@gmail.com>
Date:   Fri May 22 04:18:34 2020 -0700

    x86: Handle -mavx512vpopcntdq for -march=native
    
    Add -mavx512vpopcntdq for -march=native if AVX512VPOPCNTDQ is available.
    
            PR target/95258
            * config/i386/driver-i386.c (host_detect_local_cpu): Detect
            AVX512VPOPCNTDQ.
    
    (cherry picked from commit 808b611bfb4b05703ea174e50874c711dca44c98)

commit 104c812b36afd205f539dece0047f97a330d7cd2
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun May 24 00:17:49 2020 +0000

    Daily bump.

commit abbdc12d020cf28b331c582b6692a109572c3327
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat May 23 00:17:41 2020 +0000

    Daily bump.

commit f1d34396c264ae15ba7492bd2b800c5764d92134
Author: Thomas Koenig <tkoenig@gcc.gnu.org>
Date:   Thu May 14 18:30:27 2020 +0200

    Add early return for invalid STATUS for close.
    
    2020-05-14  Thomas Koenig  <tkoenig@gcc.gnu.org>
    
            PR libfortran/95119
            * io/close.c (close_status): Add CLOSE_INVALID.
            (st_close): Return early on invalid STATUS parameter.
    
    2020-05-14  Thomas Koenig  <tkoenig@gcc.gnu.org>
    
            PR libfortran/95119
            * testsuite/libgomp.fortran/close_errors_1.f90: New test.
    
    (cherry picked from commit cdc34b505796327b3eee9e97bc5f27ba71fd9e7a)
    (cherry picked from commit d975519ad1066ed0397714c91aafadadb52a63dd)
    (cherry picked from commit 8275e0a6686b465d4d1717784e3e864305d37d02)

commit 466ad887c9e1cd5a6762e7ec620eef2c8175b50d
Author: Bin Cheng <bin.cheng@linux.alibaba.com>
Date:   Fri May 22 11:42:11 2020 +0800

    Add missing unit dependence vector in data dependence analysis
    
    Current data dependence analysis misses unit distant vector if DRs in
    DDR have the same invariant access functions.  This adds the vector as
    the constant access function case.
    
    Also fix typo in testcase.
    
    Backport from master.
    
    2020-05-13  Bin Cheng  <bin.cheng@linux.alibaba.com>
    
    gcc/
            PR tree-optimization/94969
            * tree-data-ref.c (constant_access_functions): Rename to...
            (invariant_access_functions): ...this.  Add parameter.  Check for
            invariant access function, rather than constant.
            (build_classic_dist_vector): Call above function.
            * tree-loop-distribution.c (pg_add_dependence_edges): Add comment.
    
    gcc/testsuite/
            PR tree-optimization/94969
            * gcc.dg/tree-ssa/pr94969.c: New test.
    
    2020-05-13  Jakub Jelinek  <jakub@redhat.com>
    
    gcc/testsuite/
            PR tree-optimization/95110
            * gcc.dg/tree-ssa/pr94969.c: Swap scan-tree-dump-not arguments.

commit 5885168dd31031c2b4c77abc5fb66b120d4fa0be
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri May 22 00:17:38 2020 +0000

    Daily bump.

commit ef1420e89c796924ed2f00513de0b256ab838d0c
Author: Martin Liska <mliska@suse.cz>
Date:   Thu May 21 16:53:35 2020 +0200

    Fix backport due to usage for x_target_flags.
    
    gcc/ChangeLog:
    
            * common/config/aarch64/aarch64-common.c (aarch64_handle_option):
            Use MASK_OUTLINE_ATOMICS for x_target_flags.
    
    (cherry picked from commit f26cfe27e19eeb538675ffb2de0503b760662261)

commit 595a1376002a10273fe7b73fed32fbcbb29e5090
Author: Martin Liska <mliska@suse.cz>
Date:   Thu May 21 12:45:47 2020 +0200

    Add outline-atomics to target attribute.
    
            * common/config/aarch64/aarch64-common.c (aarch64_handle_option):
            Handle OPT_moutline_atomics.
            * config/aarch64/aarch64.c: Add outline-atomics to
            aarch64_attributes.
    
            * doc/extend.texi: Document the newly added target attribute.
    
            * gcc.target/aarch64/target_attr_20.c: New test.
            * gcc.target/aarch64/target_attr_21.c: New test.
    
    (cherry picked from commit 9e02b45ffc60e0078bde3c56a14f00c54b7f8039)

commit d7796c9d0c851392f91564cb8715dbea4f33eacd
Author: H.J. Lu <hjl.tools@gmail.com>
Date:   Tue May 19 18:55:08 2020 -0700

    x86: Update VPCLMULQDQ check
    
    Update VPCLMULQDQ check to support processors with AVX version of
    VPCLMULQDQ.
    
            Backport from master
            PR target/91695
            * config/i386/cpuinfo.c (get_available_features): Fix VPCLMULQDQ
            check.
    
    (cherry picked from commit 1e46a443f25d26816536c0c480211714b123a1d5)

commit ce911702b71992ccd0e48d5946b311ed6572e1e6
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu May 21 00:18:01 2020 +0000

    Daily bump.

commit 7c9bfd404691e5dac7e32830ae6d9726ccf59683
Author: Mark Eggleston <markeggleston@gcc.gnu.org>
Date:   Thu May 7 08:02:02 2020 +0100

    Fortran  : ProcPtr function results: 'ppr@' in error message PR39695
    
    The value 'ppr@' is set in the name of result symbol, the actual
    name of the symbol is in the procedure name symbol pointed
    to by the result symbol's namespace (ns). When reporting errors for
    symbols that have the proc_pointer attribute check whether the
    result attribute is set and set the name accordingly.
    
    Backported from master.
    
    2020-05-20  Mark Eggleston  <markeggleston@gcc.gnu.org>
    
    gcc/fortran/
    
            PR fortran/39695
            * resolve.c (resolve_fl_procedure): Set name depending on
            whether the result attribute is set.  For PROCEDURE/RESULT
            conflict use the name in sym->ns->proc_name->name.
            * symbol.c (gfc_add_type): Add check for function and result
            attributes use sym->ns->proc_name->name if both are set.
            Where the symbol cannot have a type use the name in
            sym->ns->proc_name->name.
    
    2020-05-20  Mark Eggleston  <markeggleston@gcc.gnu.org>
    
    gcc/testsuite/
    
            PR fortran/39695
            * gfortran.dg/pr39695_1.f90: New test.
            * gfortran.dg/pr39695_2.f90: New test.
            * gfortran.dg/pr39695_3.f90: New test.
            * gfortran.dg/pr39695_4.f90: New test.
    
            (cherry picked from commit eb069ae8819c3a84d7f78becc5501e21ee3a9554)

commit 5207cd427ac5221f209e66da022efacea09d15bb
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed May 20 00:18:00 2020 +0000

    Daily bump.

commit 2c7b747995a687d513dddfeafa54c6af4d10dc17
Author: H.J. Lu <hjl.tools@gmail.com>
Date:   Tue May 19 14:42:12 2020 -0700

    x86: Update GFNI check
    
    Update GFNI check to support processors with SSE and AVX versions of GFNI.
    
            Backport from master
            PR target/95220
            * config/i386/cpuinfo.c (get_available_features): Fix
            FEATURE_GFNI check.

commit f49afad3a0a9d918aa57da14220ac59b5e755c16
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue May 19 00:18:07 2020 +0000

    Daily bump.

commit 87891f424b2d167446d693103a09e3adbb083d84
Author: Douglas Rupp <rupp@adacore.com>
Date:   Mon May 18 11:43:48 2020 -0700

    Require powerpc_vsx_ok in gcc.target/powerpc/pr71763.c
    
    We're getting an error when running this test on PowerPC VxWorks 7,
    due to an unexpected warning:
    
        | Excess errors:
        | cc1: warning: '-mvsx' and '-mno-altivec' are incompatible
    
    The warning comes from a combination of factors:
      - The test itself uses -mvsx explicitly via the following directive:
           // { dg-options "-O1 -mvsx" }
      - Our toolchain was configured so as to make -mno-altivec
        the default;
      - These two options are mutually exclusive.
    
    This commit adds a powerpc_vsx_ok dg-require-effective-target directive
    to that test, and thus making it UNSUPPORTED instead.
    
    Tested on PowerPC VxWorks 7. Also tested on PowerPC ELF as well,
    a platform where we do not make -mno-altivec the default, to verify
    that the test continues to run as usual in that case.
    
    gcc/testsuite/
    
            * gcc.target/powerpc/pr71763.c: Require powerpc_vsx_ok.
    
    (cherry picked from commit c917584aa9ec32934acf0082ed383b04f49fd174)

commit 3e84ee0fab9cedfa57fe86ea3c00608f6a873ab9
Author: Iain Buclaw <ibuclaw@gdcproject.org>
Date:   Mon Mar 16 23:04:49 2020 +0100

    d: Fix multiple definition error when using mixins and interfaces.
    
    gcc/d/ChangeLog:
    
            PR d/92216
            * decl.cc (make_thunk): Don't set TREE_PUBLIC on thunks if the target
            function is external to the current compilation.
    
    gcc/testsuite/ChangeLog:
    
            PR d/92216
            * gdc.dg/imports/pr92216.d: New.
            * gdc.dg/pr92216.d: New test.

commit e8dcd6c79335997a80f75db389263b63dfa45ca1
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon May 18 00:17:45 2020 +0000

    Daily bump.

commit 80cefde6212c3de603dda46d05123a750b378ff2
Author: Iain Buclaw <ibuclaw@gdcproject.org>
Date:   Sun May 17 16:28:24 2020 +0200

    d: Fix ICE in verify_gimple_stmt, at tree-cfg.c:4959
    
    Both array concat and array new expressions wrapped any temporaries
    created into a BIND_EXPR.  This does not work if an expression used to
    construct the result requires scope destruction, which is represented by
    a TARGET_EXPR with a clean-up, and a CLEANUP_POINT_EXPR at the
    location where the temporaries logically go out of scope.  The reason
    for this not working is because the lowering of cleanup point
    expressions does not traverse inside BIND_EXPRs to expand any gimple
    cleanup expressions within.
    
    The use of creating BIND_EXPR has been removed at both locations, and
    replaced with a normal temporary variable that has initialization
    delayed until its address is taken.
    
    gcc/d/ChangeLog:
    
            PR d/94970
            * d-codegen.cc (force_target_expr): Move create_temporary_var
            implementation inline here.
            (create_temporary_var): Remove.
            (maybe_temporary_var): Remove.
            (bind_expr): Remove.
            * d-convert.cc (d_array_convert): Use build_local_temp to generate
            temporaries, and generate its assignment.
            * d-tree.h (create_temporary_var): Remove.
            (maybe_temporary_var): Remove.
            (d_array_convert): Remove vars argument.
            * expr.cc (ExprVisitor::visit (CatExp *)): Use build_local_temp to
            generate temporaries, don't wrap them in a BIND_EXPR.
            (ExprVisitor::visit (NewExp *)): Likewise.
    
    gcc/testsuite/ChangeLog:
    
            PR d/94970
            * gdc.dg/pr94970.d: New test.

commit cdbe37dee2225d96aadfd0d756ec3c9463d8c9b1
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun May 17 00:18:03 2020 +0000

    Daily bump.

commit 7d505b0ed8565b8c120ddd2b0b4630c93eecdec5
Author: Iain Buclaw <ibuclaw@gdcproject.org>
Date:   Sat May 16 23:33:15 2020 +0200

    d: Fix wrong vtable offset in virtual function call
    
    The Semantic (pass 1) analysis for classes is handled by
    ClassDeclaration::semantic.  For a given class, this method may be ran
    multiple times in order to resolve forward references.  The method
    incrementally tries to resolve the types referred to by the members of
    the class.
    
    The subsequent calls to this method are short-circuited if the class
    members have been fully analyzed.  For this the code tests that it is
    not the first/main call to the method (semanticRun == PASS.init else
    branch), scx is not set, and that the this->symtab is already set.  If
    all these conditions are met, the method returns.  But before returning,
    the method was setting this->semanticRun to PASSsemanticdone.  It should
    not set semanticRun since the class has not been fully analyzed yet.
    The base class analysis for this class could be pending and as a result
    vtable may not have been fully created.
    
    This fake setting of semanticRun results in the semantic analyzer to
    believe that the class has been fully analyzed.  As exposed by the
    issues in upstream, it may result in compile time errors when a derived
    type class is getting analyzed and because of this fake semanticdone on
    the base class, the semantic analysis construes that an overriden method
    is not defined in the base class.  PR95155 exposes anoter scenario where
    a buggy vtable may be created and a call to a class method may result in
    execution of some adhoc code.
    
    gcc/d/ChangeLog:
    
            PR d/95155
            * dmd/dclass.c (ClassDeclaration::semantic): Don't prematurely
            set done on semantic analysis.
    
    gcc/testsuite/ChangeLog:
    
            PR d/95155
            * gdc.test/compilable/imports/pr9471a.d: New test.
            * gdc.test/compilable/imports/pr9471b.d: New test.
            * gdc.test/compilable/imports/pr9471c.d: New test.
            * gdc.test/compilable/imports/pr9471d.d: New test.
            * gdc.test/compilable/pr9471.d: New test.

commit 866f7405707dd2970868941635a32bd9197cd731
Author: Iain Buclaw <ibuclaw@gdcproject.org>
Date:   Sat May 16 22:32:17 2020 +0200

    libphobos: Fix struct layout of stat_t on sparc-*-solaris*
    
    The last change to the bindings removed the st_pad3 field from the wrong
    struct.  It should have been stat64_t that needed updating instead.
    
    libphobos/ChangeLog
    
            PR d/90719
            * libdruntime/core/sys/posix/sys/stat.d (Solaris): Move st_pad3 from
            struct stat64_t to stat32_t.

commit 6d0e00a92d3d62e331175df3a548a6a9988df1ad
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat May 16 00:17:52 2020 +0000

    Daily bump.

commit aa237c6dceeeab1455d83a9063ab87afb4a18082
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri May 15 00:17:56 2020 +0000

    Daily bump.

commit 9a1b74d49e2e25b29675fac4322bb7ba6cec5894
Author: Szabolcs Nagy <szabolcs.nagy@arm.com>
Date:   Fri Apr 24 17:36:02 2020 +0100

    aarch64: don't emit bti j after NOTE_INSN_DELETED_LABEL [PR94748]
    
    It was previously discussed that indirect branches cannot go to
    NOTE_INSN_DELETED_LABEL so inserting a landing pad is unnecessary.
    See https://gcc.gnu.org/pipermail/gcc-patches/2019-May/522625.html
    
    Before the patch a bti j was inserted after the label in
    
      __attribute__((target("branch-protection=bti")))
      int foo (void)
      {
      label:
        return 0;
      }
    
    This is not necessary and weakens the security protection.
    
    gcc/ChangeLog:
    
            Backport from mainline.
            2020-04-30  Szabolcs Nagy  <szabolcs.nagy@arm.com>
    
            PR target/94748
            * config/aarch64/aarch64-bti-insert.c (rest_of_insert_bti): Remove
            the check for NOTE_INSN_DELETED_LABEL.
    
    gcc/testsuite/ChangeLog:
    
            Backport from mainline.
            2020-04-30  Szabolcs Nagy  <szabolcs.nagy@arm.com>
    
            PR target/94748
            * gcc.target/aarch64/pr94748.c: New test.

commit f6e42cdee5de2b3441afc88c8888c1166bdffe57
Author: Szabolcs Nagy <szabolcs.nagy@arm.com>
Date:   Fri Apr 17 16:54:12 2020 +0100

    aarch64: ensure bti c is emitted at function start [PR94697]
    
    The bti pass currently first emits bti c at function start
    if there is no paciasp (which also acts as indirect call
    landing pad), then bti j is emitted at jump labels, however
    if there is a label right before paciasp then the function
    start can end up like
    
      foo:
      label:
        bti j
        paciasp
        ...
    
    This patch is a minimal fix that just moves the bti c handling
    after the bti j handling so we end up with
    
      foo:
        bti c
      label:
        bti j
        paciasp
        ...
    
    This could be improved by emitting bti jc in this case, or by
    detecting that the label is not in fact an indirect jump target
    and then this situation would be much less common.
    
    Needs to be backported to gcc-9 branch.
    
    Backported without the testcase because of missing infrastructure
    for check-function-bodies.
    
    gcc/ChangeLog:
    
            Backport from mainline.
            2020-04-23  Szabolcs Nagy  <szabolcs.nagy@arm.com>
    
            PR target/94697
            * config/aarch64/aarch64-bti-insert.c (rest_of_insert_bti): Swap
            bti c and bti j handling.

commit 95833c34424f340a7e465ee38b6a41369bc7c90b
Author: Szabolcs Nagy <szabolcs.nagy@arm.com>
Date:   Mon Apr 27 09:07:15 2020 +0100

    aarch64: Fix .cfi_window_save with pac-ret [PR94515]
    
    On aarch64 -mbranch-protection=pac-ret reuses the dwarf
    opcode for window_save to mean "toggle the return address
    mangle state", but in the dwarf2cfi internal logic the
    state was not updated when an opcode was emitted, the
    currently present update logic is only valid for the
    original sparc use of window_save so a separate bool is
    used on aarch64 to track the state.
    
    This bug can cause the unwinder not to authenticate return
    addresses that were signed (or vice versa) which means a
    runtime crash on a pauth enabled system.
    
    Currently only aarch64 pac-ret uses REG_CFA_TOGGLE_RA_MANGLE.
    
    This should be backported to gcc-9 and gcc-8 branches.
    
    gcc/ChangeLog:
    
            Backport from mainline.
            2020-04-27  Szabolcs Nagy  <szabolcs.nagy@arm.com>
    
            PR target/94515
            * dwarf2cfi.c (struct GTY): Add ra_mangled.
            (cfi_row_equal_p): Check ra_mangled.
            (dwarf2out_frame_debug_cfa_window_save): Remove the argument,
            this only handles the sparc logic now.
            (dwarf2out_frame_debug_cfa_toggle_ra_mangle): New function for
            the aarch64 specific logic.
            (dwarf2out_frame_debug): Update to use the new subroutines.
            (change_cfi_row): Check ra_mangled.
    
    gcc/testsuite/ChangeLog:
    
            Backport from mainline.
            2020-04-27  Szabolcs Nagy  <szabolcs.nagy@arm.com>
    
            PR target/94515
            * g++.target/aarch64/pr94515-1.C: New test.
            * g++.target/aarch64/pr94515-2.C: New test.

commit 6173489dbfe5828b2c4082d7a450a766779f87c7
Author: Szabolcs Nagy <szabolcs.nagy@arm.com>
Date:   Fri Apr 3 09:35:41 2020 +0000

    aarch64, libgcc: Fix unwinding from pac-ret to normal frames [PR94514]
    
    With -mbranch-protection=pac-ret the debug info toggles the
    signedness state of the return address so the unwinder knows when
    the return address needs pointer authentication.
    
    The unwind context flags were not updated according to the dwarf
    frame info.
    
    This causes unwinding across frames that were built without pac-ret
    to incorrectly authenticate the return address wich corrupts the
    return address on a system where PAuth is enabled.
    
    Note: This even affects systems where all code use pac-ret because
    unwinding across a signal frame the return address is not signed.
    
    gcc/testsuite/ChangeLog:
    
            Backport from mainline.
            2020-04-23  Szabolcs Nagy  <szabolcs.nagy@arm.com>
    
            PR target/94514
            * g++.target/aarch64/pr94514.C: Require lp64.
            * gcc.target/aarch64/pr94514.c: Likewise.
    
            Backport from mainline.
            2020-04-21  Szabolcs Nagy  <szabolcs.nagy@arm.com>
    
            PR target/94514
            * g++.target/aarch64/pr94514.C: New test.
            * gcc.target/aarch64/pr94514.c: New test.
    
    libgcc/ChangeLog:
    
            Backport from mainline.
            2020-04-21  Szabolcs Nagy  <szabolcs.nagy@arm.com>
    
            PR target/94514
            * config/aarch64/aarch64-unwind.h (aarch64_frob_update_context):
            Update context->flags accroding to the frame state.

commit a357a7b9d53342a35f7e77e3cdfe72f58f3ac346
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu May 14 00:17:55 2020 +0000

    Daily bump.

commit cf7a6070c3688db20447643c789e157f73fc178b
Author: Mark Eggleston <markeggleston@gcc.gnu.org>
Date:   Thu May 7 08:29:14 2020 +0100

    Fortran  : ICE in gfc_conv_array_constructor_expr PR93497
    
    Invalid expressions, such as those involving array constructors,
    used for the length of character types will cause an ICE.
    
    2020-05-11  Mark Eggleston  <markeggleston@gcc.gnu.org>
    
    Backported from master
    2020-05-13  Steven G. Kargl  <kargl@gcc.gnu.org>
    
    gcc/fortran/
    
            PR fortran/93497
            * decl.c (char_len_param_value): Check whether character
            length expression is of type EXPR_OP and if so simplify it.
            * resolve.c (resolve_charlen): Reject length if it has a
            rank.
    
    2020-05-11  Mark Eggleston  <markeggleston@gcc.gnu.org>
    
    Backported from master
    2020-05-13  Mark Eggleston  <markeggleston@gcc.gnu.org>
    
    gcc/testsuite/
    
            PR fortran/93497
            * gfortran.dg/pr88025.f90: Change in wording of error.
            * gfortran.dg/pr93497.f90: New test.
            * gfortran.dg/pr93714_1.f90: Change in wording of errors.
            * gfortran.dg/pr93714_2.f90: Change in wording of errors.

commit 6c0bd2f0230d52ec191895640f11301329f543c2
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed May 13 00:18:03 2020 +0000

    Daily bump.

commit 45a6686e76bfcd48f7c72a23d0e15186f76b4bfc
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Tue May 12 09:54:44 2020 +0100

    libstdc++: Fix incorrect size calculation in PMR resource  (PR 94906)
    
    Calculating the size of a chunk being returned to the upstream allocator
    was done with a 32-bit type, so it wrapped if the chunk was 4GB or
    larger.
    
    I don't know how to test this without allocating 4GB, so there's no test
    in the testsuite. It has been tested manually of course.
    
    Backport from mainline
    2020-05-04  Jonathan Wakely  <jwakely@redhat.com>
    
            PR libstdc++/94906
            * src/c++17/memory_resource.cc
            (monotonic_buffer_resource::_Chunk::release): Use size_t for shift
            operands.

commit 89714e45f0b91eb501e802946862f0ddacb7f6d8
Author: Clement Chigot <clement.chigot@atos.net>
Date:   Wed Apr 8 16:58:36 2020 -0400

    rs6000: Link with libc128.a for long-double-128.
    
    AIX applications using 128-bit long double must be linked with
    libc128.a, in order to have 128-bit compatible routines.
    
    AIX 7.2, 7.1, 6.1: Build/Tests: OK
    
    2020-04-03 Clément Chigot <clement.chigot@atos.net>
    
    * config/rs6000/aix61.h (LIB_SPEC): Add -lc128 with -mlong-double-128.
    * config/rs6000/aix71.h (LIB_SPEC): Likewise.
    * config/rs6000/aix72.h (LIB_SPEC): Likewise.

commit e042b0490c8c22292547539af244aa19543a599a
Author: David Edelsohn <dje.gcc@gmail.com>
Date:   Tue May 12 11:46:47 2020 -0400

    rs6000: AIX long double builtins for 64 bit long double.
    
    When long doubles are 64 bit, the AIX C library overrides the definitions
    but GCC builtins point to 128 bit names.  This patch overrides the
    builtins for fmodl, frexpl, ldexpl and modfl to refer to the 64 bit symbols.
    
    Backport from mainline
    2020-05-04  Clement Chigot  <clement.chigot@atos.net>
                David Edelsohn  <dje.gcc@gmail.com>
    
            * config/rs6000/rs6000-call.c (rs6000_init_builtins): Override explicit
            for fmodl, frexpl, ldexpl and modfl builtins.

commit 6c1668fe923c84fd617a42ccae17990a0c10a859
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue May 12 00:17:47 2020 +0000

    Daily bump.

commit 5a17beaecadf10d1c9c44d2b31eedc11dfdea35a
Author: Mark Eggleston <markeggleston@gcc.gnu.org>
Date:   Mon May 11 12:38:14 2020 +0100

    Fortran : Spurious warning message with -Wsurprising PR59107
    
    This change is from a patch developed for gcc-5.  The code
    has moved on since then requiring a change to interface.c
    
    2020-05-11  Mark Eggleston  <markeggleston@gcc.gnu.org>
    
    Backported from mainline
    2020-05-11  Janus Weil  <janus@gcc.gnu.org>
                Dominique d'Humieres  <dominiq@lps.ens.fr>
    
    gcc/fortran/
    
            PR fortran/59107
            * gfortran.h: Rename field resolved as resolve_symbol_called
            and assign two 2 bits instead of 1.
            * interface.c (gfc_find_typebound_dtio_proc): Use new field name.
            * resolve.c (gfc_resolve_intrinsic): Replace check of the formal
            field with resolve_symbol_called is at least 2, if it is not
            set the field to 2.  (resolve_typebound_procedure): Use new field
            name.  (resolve_symbol): Use new field name and check whether it
            is at least 1, if it is not set the field to 1.
    
    Backported from mainline
    2020-05-11  Mark Eggleston  <markeggleston@gcc.gnu.org>
    
    gcc/testsuite/
    
            PR fortran/59107
            * gfortran.dg/pr59107.f90: New test.

commit b8da02efe62611a9f173c699a76010de5b916d33
Author: Xionghu Luo <luoxhu@linux.ibm.com>
Date:   Sun May 10 20:27:38 2020 -0500

    rs6000: Don't use HARD_FRAME_POINTER_REGNUM if it's not live in pro_and_epilogue (PR91518)
    
    Backport from master.
    
    This bug is exposed by FRE refactor of r263875.  Comparing the fre
    dump file shows no obvious change of the segment fault function proves
    it to be a target issue.
    frame_pointer_needed is set to true in reload pass setup_can_eliminate,
    but regs_ever_live[31] is false, pro_and_epilogue uses it without live
    check causing CPU2006 465.tonto segment fault of loading from invalid
    addresses due to r31 not saved/restored.  Thus, add HARD_FRAME_POINTER_REGNUM
    live check with frame_pointer_needed_indeed when generating pro_and_epilogue
    instructions.
    
    gcc/ChangeLog
    
    2020-05-11  Xiong Hu Luo  <luoxhu@linux.ibm.com>
    
            Backport from master.
            2020-04-27  Xiong Hu Luo  <luoxhu@linux.ibm.com>
    
            PR target/91518
            * config/rs6000/rs6000.c (frame_pointer_needed_indeed):
            New variable.
            (rs6000_emit_prologue_components):
            Check with frame_pointer_needed_indeed.
            (rs6000_emit_epilogue_components): Likewise.
            (rs6000_emit_prologue): Likewise.
            (rs6000_emit_epilogue): Set frame_pointer_needed_indeed.

commit f877a0c82c90d2e0efc44a0e66e405acf24bc9d1
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon May 11 00:18:03 2020 +0000

    Daily bump.

commit 1bcc05f210ce15d516013d06e8216b1525e0df50
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun May 10 00:17:52 2020 +0000

    Daily bump.

commit 232a40538db99e3d5202a50e3bc8bda44b85b5e1
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat May 9 00:17:46 2020 +0000

    Daily bump.

commit 9a3dde5fed64b412884d17b013cb105d4f5e452c
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri May 8 00:17:54 2020 +0000

    Daily bump.

commit 7790399265d60921250282cca60d7ee0665d9f2c
Author: Uros Bizjak <ubizjak@gmail.com>
Date:   Thu May 7 17:21:15 2020 +0200

    alpha: Implement the PR94780 fix for alpha.
    
    Essentially the same fix as for x86.
    
    2020-05-07  Uroš Bizjak  <ubizjak@gmail.com>
    
    gcc/
            * config/alpha/alpha.c (alpha_atomic_assign_expand_fenv): Use
            TARGET_EXPR instead of MODIFY_EXPR for the first assignments to
            fenv_var and new_fenv_var.

commit fadd59262921825b135b8e018ac8510e97dee92a
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu May 7 14:56:51 2020 +0200

    testsuite: Improve g++.dg/ext/attr-parm-1.C testcase [PR94946]
    
    The testcase in the current form doesn't FAIL without the patch on
    x86_64-linux unless also testing with -m32; as that the 64-bit testing
    on that target is probably way more common, and we can use also attributes
    that FAIL without the patch with -m64, the following patch adjusts the
    test, so that it FAILs without the patch for both -m64 and -m32 (but not
    -mx32) and PASSes with the patch.
    
    2020-05-07  Jakub Jelinek  <jakub@redhat.com>
    
            PR c++/94946
            * g++.dg/ext/attr-parm-1.C: Enable the test also for lp64 x86, use
            sysv_abi and ms_abi attributes in that case instead of fastcall and
            no attribute.

commit 1c42711cd0003a0b6888c8af2cb411b9296bba68
Author: Eric Botcazou <ebotcazou@gcc.gnu.org>
Date:   Thu May 7 14:11:43 2020 +0200

    Update the baseline symbols for SPARC64/Linux

commit 611f8711b4e4967ccbfd48f0ed86e7c77f330d8a
Author: Rainer Orth <ro@CeBiTec.Uni-Bielefeld.DE>
Date:   Thu May 7 09:41:21 2020 +0200

    libstdc++: Update Solaris baselines for GCC 9.4
    
    Just as for GCC 10.1, the libstdc++ ABI baselines need to be regenerated on
    the gcc-9 branch for the GLIBCXX_3.4.28 symbols added in GCC 9.3.0.  The
    following patch does that for Solaris.
    
    Tested on i386-pc-solaris2.1[01] and sparc-sun-solaris2.1[01].
    
            * config/abi/post/i386-solaris2.10/baseline_symbols.txt: Regenerate.
            * config/abi/post/i386-solaris2.10/amd64/baseline_symbols.txt:
            Likewise.
            * config/abi/post/i386-solaris2.11/baseline_symbols.txt: Likewise.
            * config/abi/post/i386-solaris2.11/amd64/baseline_symbols.txt:
            Likewise.
            * config/abi/post/sparc-solaris2.10/baseline_symbols.txt: Likewise.
            * config/abi/post/sparc-solaris2.10/sparcv9/baseline_symbols.txt:
            Likewise.
            * config/abi/post/sparc-solaris2.11/baseline_symbols.txt: Likewise.
            * config/abi/post/sparc-solaris2.11/sparcv9/baseline_symbols.txt:
            Likewise.

commit 25c60fcadc397c42a0ec778e5b1238888f2c94d3
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu May 7 00:18:04 2020 +0000

    Daily bump.

commit efdbd4fbea08005091e490ec3f9972aa9c946374
Author: Nathan Sidwell <nathan@acm.org>
Date:   Wed May 6 12:37:30 2020 -0700

    c++: QT overload regression with attribute [PR94946]
    
    Jason's fix for 90570 & 79585 was a bit overzealous.  Dependent attribs should still
    ttach to a parameter decl.
    
                    * decl.c (grokdeclarator): Don't splice template attributes in
                    parm context -- they can apply to the parm.

commit f714faeee44a3d76ef91cc7b58b51bc397812b0a
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Wed May 6 10:30:15 2020 +0100

    libstdc++: Document library versioning for 9.[123] and 10.1
    
            * doc/xml/manual/abi.xml (abi.versioning.history): Document library
            versions for GCC 9.[123] and 10.1 releases.
            * doc/html/*: Regenerate.

commit f0e2dc789221c903791117ca1af20e15d383871f
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Wed May 6 11:21:28 2020 +0200

    libstdc++: Update {x86_64,i?86,powerpc64,s390x,aarch64}-linux baselines for GCC 10.1
    
    On Wed, May 06, 2020 at 10:49:13AM +0200, Rainer Orth wrote:
    > I just remembered that the libstdc++ ABI baselines haven't been updated
    > for the GCC 10 release yet.  This patch corrects this for Solaris/SPARC
    > and x86.
    
    Oops, here are the updates from Fedora packages built during the weekend.
    
    2020-05-06  Jakub Jelinek  <jakub@redhat.com>
    
            * config/abi/post/x86_64-linux-gnu/baseline_symbols.txt: Update.
            * config/abi/post/x86_64-linux-gnu/32/baseline_symbols.txt: Update.
            * config/abi/post/i386-linux-gnu/baseline_symbols.txt: Update.
            * config/abi/post/i486-linux-gnu/baseline_symbols.txt: Update.
            * config/abi/post/aarch64-linux-gnu/baseline_symbols.txt: Update.
            * config/abi/post/s390x-linux-gnu/baseline_symbols.txt: Update.
            * config/abi/post/powerpc64-linux-gnu/baseline_symbols.txt: Update.

commit fa01517b28f87b57b934d13a4f7b01c67e663fb9
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed May 6 00:17:45 2020 +0000

    Daily bump.

commit f3e32d19dc5463a5422badaee9cc503645910e7b
Author: Andreas Krebbel <krebbel@linux.ibm.com>
Date:   Tue May 5 10:46:33 2020 +0200

    IBM Z: vec_store_len_r/vec_load_len_r fix
    
    This fixes a problem with the vec_store_len_r intrinsic.  The macros
    mapping the intrinsic to a GCC builtin had the wrong signature.
    
    With the patch an immediate length operand of vlrl/vstrl is handled
    the same way as if it was passed in a register to vlrlr/vstrlr.
    Values bigger than 15 always load the full vector.  If it can be
    recognized that it is in effect a full vector register load or store
    it is now implemented with vl/vst instead.
    
    gcc/ChangeLog:
    
    2020-05-05  Andreas Krebbel  <krebbel@linux.ibm.com>
    
            Backport from mainline
            2020-04-30  Andreas Krebbel  <krebbel@linux.ibm.com>
    
            * config/s390/constraints.md ("j>f", "jb4"): New constraints.
            * config/s390/vecintrin.h (vec_load_len_r, vec_store_len_r): Fix
            macro definitions.
            * config/s390/vx-builtins.md ("vlrlrv16qi", "vstrlrv16qi"): Add a
            separate expander.
            ("*vlrlrv16qi", "*vstrlrv16qi"): Add alternative for vl/vst.
            Change constraint for vlrl/vstrl to jb4.
    
    gcc/testsuite/ChangeLog:
    
    2020-05-05  Andreas Krebbel  <krebbel@linux.ibm.com>
    
            Backport from mainline
            2020-04-30  Andreas Krebbel  <krebbel@linux.ibm.com>
    
            * gcc.target/s390/zvector/vec_load_len_r.c: New test.
            * gcc.target/s390/zvector/vec_store_len_r.c: New test.

commit 8b7fb3935ab0e3ce22d69e84e613e818a3ecd919
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue May 5 00:18:00 2020 +0000

    Daily bump.

commit 173bf488b5e5ab4f9e7235ed8911b1e0ea615061
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Mon May 4 22:54:25 2020 +0100

    libstdc++: Fix broken link to SGI STL FAQ
    
    The previous URL to an entry in the wayback machine now redirects to a
    page saying "SGI.com Tech Archive Resources now retired" so use an older
    entry from the archive.
    
            * doc/xml/faq.xml: Use working link for SGI STL FAQ.
            * doc/html/*: Regenerate.

commit a34b818215174f6cbe46e2e2bfae874fde7aec72
Author: Eric Botcazou <ebotcazou@gcc.gnu.org>
Date:   Mon May 4 23:32:39 2020 +0200

    Fix Ada bootstrap on Cygwin64
    
    This fixes a compilation error preventing bootstrap with Ada
    on x86_64-pc-cygwin.
    
    2020-05-04  Mikael Pettersson  <mikpelinux@gmail.com>
    
            PR bootstrap/94918
            * mingw32.h: Prevent windows.h from including emmintrin.h on Cygw64.

commit da710a35525cc7631b778fa4a5cfd20c366c01a4
Author: Tobias Burnus <tobias@codesourcery.com>
Date:   Mon May 4 13:47:41 2020 +0200

    ICE in gfc_get_dataptr_offset, at fortran/trans-array.c:6951
    
     gcc/testsuite/
            Backport from mainline.
            2020-03-08  Paul Thomas  <pault@gcc.gnu.org>
    
            PR fortran/93581
            * resolve.c (gfc_resolve_ref): Modify array refs to be elements
            if the ref chain ends in INQUIRY_LEN.
            * trans-array.c (gfc_get_dataptr_offset): Provide the offsets
            for INQUIRY_RE and INQUIRY_IM.
    
    gcc/testsuite/
            Backport from mainline.
            2020-03-08  Paul Thomas  <pault@gcc.gnu.org>
    
            PR fortran/93581
            * gfortran.dg/inquiry_type_ref_6.f90 : New test.

commit 677859736f077b1d521b8a2d78a45f51e51e45d3
Author: Andreas Krebbel <krebbel@linux.ibm.com>
Date:   Mon May 4 10:50:42 2020 +0200

    Add missing changelog entries

commit 2aed24d90989065a361bb22406b894c8d3c7b733
Author: Andreas Krebbel <krebbel@linux.ibm.com>
Date:   Mon Apr 20 20:06:53 2020 +0200

    S/390: Fix PR94666
    
    The vector popcount expanders use a hardcoded subreg.  This might lead
    to double subregs being generated which then fail to match.  With this
    patch simplify_gen_subreg is used instead to fold the subregs.
    
    gcc/ChangeLog:
    
    2020-05-04  Andreas Krebbel  <krebbel@linux.ibm.com>
    
            Backport from mainline
            2020-04-20  Andreas Krebbel  <krebbel@linux.ibm.com>
    
            * config/s390/vector.md ("popcountv8hi2_vx", "popcountv4si2_vx")
            ("popcountv2di2_vx"): Use simplify_gen_subreg.
    
    gcc/testsuite/ChangeLog:
    
    2020-05-04  Andreas Krebbel  <krebbel@linux.ibm.com>
    
            Backport from mainline
            2020-04-20  Andreas Krebbel  <krebbel@linux.ibm.com>
    
            * g++.dg/pr94666.C: New test.

commit 92ee7d437a98a0f9e63549b4aa83af87382821cf
Author: Andreas Krebbel <krebbel@linux.ibm.com>
Date:   Mon Apr 20 19:36:33 2020 +0200

    PR94613: Fix vec_sel builtin for IBM Z
    
    The vsel instruction is a bit-wise select instruction.  Using an
    IF_THEN_ELSE to express it in RTL is wrong and leads to wrong code being
    generated in the combine pass.
    
    With the patch the pattern is written using bit operations.  However,
    I've just noticed that the manual still demands a fixed point mode for
    AND/IOR and friends although several targets emit bit ops on floating
    point vectors (including i386, Power, and s390). So I assume this is a
    safe thing to do?!
    
    gcc/ChangeLog:
    
    2020-05-04  Andreas Krebbel  <krebbel@linux.ibm.com>
    
            Backport from mainline
            2020-04-20  Andreas Krebbel  <krebbel@linux.ibm.com>
    
            PR target/94613
            * config/s390/s390-builtin-types.def: Add 3 new function modes.
            * config/s390/s390-builtins.def: Add mode dependent low-level
            builtin and map the overloaded builtins to these.
            * config/s390/vx-builtins.md ("vec_selV_HW"): Rename to ...
            ("vsel<V_HW"): ... this and rewrite the pattern with bitops.
    
    gcc/testsuite/ChangeLog:
    
    2020-05-04  Andreas Krebbel  <krebbel@linux.ibm.com>
    
            Backport from mainline
            2020-04-20  Andreas Krebbel  <krebbel@linux.ibm.com>
    
            PR target/94613
            * gcc.target/s390/zvector/pr94613.c: New test.
            * gcc.target/s390/zvector/vec_sel-1.c: New test.

commit 28d68fde77363520d64b2a7ea480040cf7cb004d
Author: Bin Cheng <bin.cheng@linux.alibaba.com>
Date:   Mon May 4 14:28:54 2020 +0800

    Add unsigned type iv_cand for iv_use with non mode-precision type
    
    Precisely,  for iv_use if it's not integer/pointer type, or non-mode
    precision type, add candidate for the corresponding scev in unsigned
    type with the same precision, rather than its original type.
    
    Backport from master.
    2020-04-09  Bin Cheng  <bin.cheng@linux.alibaba.com>
        PR tree-optimization/93674
    
    gcc/
        * tree-ssa-loop-ivopts.c (langhooks.h): New include.
        (add_iv_candidate_for_use): For iv_use of non integer or pointer type,
        or non-mode precision type, add candidate in unsigned type with the
        same precision.
    
    gcc/testsuite/
        * g++.dg/pr93674.C: New test.

commit 6f48762bb41df4eddefc34ea87f7bb88f4d61255
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon May 4 00:17:45 2020 +0000

    Daily bump.

commit a33fc705a8303cc5c8c0e8fb101459d6c0d82357
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun May 3 00:17:51 2020 +0000

    Daily bump.

commit 23ec41764cccb7af4ea43489c21b43dc049393ef
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat May 2 00:17:47 2020 +0000

    Daily bump.

commit cb2c76c8b156c6d8541ddb3aa894568a2de3b02b
Author: Thomas Koenig <tkoenig@gcc.gnu.org>
Date:   Fri May 1 14:45:56 2020 +0200

    Revert patch for PR fortran/93956.
    
    2020-04-27  Thomas Koenig  <tkoenig@gcc.gnu.org>
    
                PR fortran/93956
                PR fortran/94788
                * expr.c (gfc_check_pointer_assign): Revert patch for PR 93956.
                * interface.c: Likewise.

commit 0c3519218fb11bdde5356aec9fcac133b4988698
Author: Alan Modra <amodra@gmail.com>
Date:   Wed Mar 11 21:22:37 2020 +1030

    [RS6000] PR94145, make PLT loads volatile
    
            PR target/94145
            * config/rs6000/rs6000.c (rs6000_longcall_ref): Use unspec_volatile
            for PLT16_LO.
            * config/rs6000/rs6000.md (UNSPEC_PLT16_LO): Remove.
            (UNSPECV_PLT16_LO): Define.
            (pltseq_plt16_lo_): Use unspec_volatile.
    
    (cherry picked from commit 19e5389debb03c3623f6a2ce8a8f6f4aa2118901)
    minus the PLT_PCREL parts

commit af501c5a9c4280376b5dca4d93a76c1a398796b5
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri May 1 00:17:51 2020 +0000

    Daily bump.

commit 0c9344e0250db274277cc3e1d6bd56d64ee01a05
Author: Carl Love <carll@us.ibm.com>
Date:   Wed Apr 22 11:57:53 2020 -0500

    rs6000, Fix header comment for intrinsic function _mm_movemask_epi8
    
    gcc/ChangeLog
    
    2020-04-30  Carl Love  <cel@us.ibm.com>
    
            * config/rs6000/emmintrin.h (_mm_movemask_epi8): Fix comment.

commit 1242741110699aebf8d37accd18cca403ef71ffa
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Apr 30 00:17:22 2020 +0000

    Daily bump.

commit a03efb266fcbf4a01285fff871a5bfe5caac4944
Author: H.J. Lu <hjl.tools@gmail.com>
Date:   Wed Apr 29 04:52:46 2020 -0700

    x86: Allow -fcf-protection with external thunk
    
    Allow -fcf-protection with external thunk since the external thunk can be
    made compatible with -fcf-protection.
    
    gcc/
    
            Backport from master
            PR target/93654
            * config/i386/i386-options.c (ix86_set_indirect_branch_type):
            Allow -fcf-protection with -mindirect-branch=thunk-extern and
            -mfunction-return=thunk-extern.
            * doc/invoke.texi: Update notes for -fcf-protection=branch with
            -mindirect-branch=thunk-extern and -mindirect-return=thunk-extern.
    
    gcc/testsuite/
    
            Backport from master
            PR target/93654
            * gcc.target/i386/pr93654.c: New test.
    
    (cherry picked from commit 9be3bb2c0a258fd6a7d3d05d232a21930c757d3c)

commit c285d9792c4a240b321984bf567f2d9592a6209a
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Apr 29 00:17:27 2020 +0000

    Daily bump.

commit aa988998be8f85334665a6b049d5d9139408c250
Author: Jason Merrill <jason@redhat.com>
Date:   Mon Jan 27 05:45:01 2020 -0500

    c++: Avoid ICE with dependent attribute on type.
    
    We previously happened to accept this testcase, but never actually did
    anything useful with the attribute.  The patch for PR86379 stopped using
    TREE_TYPE as USING_DECL_SCOPE, so 'using A::b' no longer had TREE_TYPE set,
    so the language-independent decl_attributes started crashing on it.
    
    GNU attributes are more flexible in their placement than C++11 attributes,
    so if we encounter a dependent GNU attribute that syntactically appertains
    to a type rather than the declaration as a whole, move it to the
    declaration; that's almost certainly what the user meant, anyway.
    
    gcc/cp/ChangeLog
    2020-01-27  Jason Merrill  <jason@redhat.com>
    
            PR c++/90750
            PR c++/79585
            * decl.c (grokdeclarator): Move dependent attribute to decl.
            * decl2.c (splice_template_attributes): No longer static.

commit 89da6494d784937f20701b13500b296003311491
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Apr 28 00:17:30 2020 +0000

    Daily bump.

commit 253b6edd2fc3499f1f2bd0f2d55cd47f852cfa09
Author: Iain Buclaw <ibuclaw@gdcproject.org>
Date:   Mon Apr 27 23:51:50 2020 +0200

    libphobos: Fix struct layout of addrinfo on sparc-*-solaris*
    
    Comparing the struct addrinfo declarations in <netdb.h>
    
        struct addrinfo {
            ...
        #ifdef __sparcv9
            int _ai_pad;
        #endif /* __sparcv9 */
            ...
        };
    
    In the extern(C) core.sys bindings, there's a mismatch here; the system
    version has no _aid_pad member on 32-bit SPARC.
    
    libphobos/ChangeLog:
    
            PR d/90718
            * libdruntime/core/sys/posix/netdb.d (Solaris): Include _ai_pad member
            in struct addrinfo only when targeting SPARC64.

commit 1f0eba390fb5f887874e37a1f626eeab4ad55a44
Author: Iain Buclaw <ibuclaw@gdcproject.org>
Date:   Mon Apr 27 23:40:48 2020 +0200

    libphobos: Fix struct layout of stat32_t on sparc-*-solaris*
    
    Solaris 11 <sys/stat.h> has:
    
        struct stat {
            ...
        #if _FILE_OFFSET_BITS != 64
            long st_pad3;
        #endif
            ...
        };
    
    In the extern(C) core.sys bindings, st_pad3 is included in the
    non-largefie version of struct stat when it shouldn't be.
    
    libphobos/ChangeLog:
    
            PR d/90719
            * libdruntime/core/sys/posix/sys/stat.d (Solaris): Remove st_pad3 from
            struct stat32_t.

commit 71c6db5737cf153c8dc1e8b94d266579971b2b0c
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Apr 27 00:17:28 2020 +0000

    Daily bump.

commit 88eeae263ffc637e0a6f9869e10201b41b13ee00
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Apr 26 00:17:26 2020 +0000

    Daily bump.

commit b343018b2612346e0eb87d8806785a736c4c53a8
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Apr 25 00:17:29 2020 +0000

    Daily bump.

commit 942b32e261c414a033766ed7848d923f9630b991
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Fri Apr 24 14:29:37 2020 +0100

    libstdc++: Fix type-erasure in experimental::net::executor (PR 94203)
    
    The _Tgt and _TgtImpl types that implement type-erasure didn't agree on
    the virtual interface, so failed as soon as they were instantiated. With
    Clang they failed even sooner. The interface was also dependent on
    whether RTTI was enabled or not.
    
    This patch fixes the broken virtual functions and makes the type work
    without RTTI, by using a pointer to a specialization of a function
    template (similar to the approaches in std::function and std::any).
    
    The changes to the virtual functions would be an ABI change, except that
    the previous code didn't even compile if instantiated. This is
    experimental TS material anyway.
    
    Backport from mainline
    2020-03-18  Jonathan Wakely  <jwakely@redhat.com>
    
            PR libstdc++/94203
            * include/experimental/executor (executor::executor(Executor)): Call
            make_shared directly instead of _M_create. Create _Tgt1 object.
            (executor::executor(allocator_arg_t, const ProtoAlloc&, Executor)):
            Call allocate_shared directly instead of _M_create. Create _Tgt2
            object.
            (executor::target_type): Add cast needed for new _Tgt interface.
            (executor::target): Define when RTTI is disabled. Use _Tgt::_M_func.
            (executor::_Tgt): Define the same interface whether RTTI is enabled or
            not.
            (executor::_Tgt::target_type, executor::_Tgt::target): Do not use
            std::type_info in the interface.
            (executor::_Tgt::_M_func): Add data member.
            (executor::_TgtImpl): Replace with _Tgt1 and _Tgt2 class templates.
            (executor::_Tgt1::_S_func): Define function to access target without
            depending on RTTI.
            (executor::_M_create): Remove.
            (operator==, operator!=): Simplify comparisons for executor.
            * include/experimental/socket (is_error_code_enum<socket_errc>):
            Define specialization before use.
            * testsuite/experimental/net/executor/1.cc: New test.

commit 557fd3b4989b677ac944afb0b0ca2d60480e19e4
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Fri Apr 24 14:27:23 2020 +0100

    libstdc++: Make net::service_already_exists default constructible
    
    The LWG issue I created is Tentatively Ready and proposes to declare a
    public default constructor, rather than the private one I added
    recently.
    
    Backport from mainline
    2020-04-24  Jonathan Wakely  <jwakely@redhat.com>
    
            * include/experimental/executor (service_already_exists): Make default
            constructor public (LWG 3414).
            * testsuite/experimental/net/execution_context/make_service.cc: Check
            the service_already_exists can be default constructed.

commit 2a732dbdfcc0a3bc2b4bdb5387fffa193fea6df6
Author: Thomas König <tkoenig@gcc.gnu.org>
Date:   Fri Apr 24 08:22:48 2020 +0200

    Fix PR 93956, wrong pointer when returned via function.
    
    Backport from trunk.
    
    This one took a bit of detective work.  When array pointers point
    to components of derived types, we currently set the span field
    and then create an array temporary when we pass the array
    pointer to a procedure as a non-pointer or non-target argument.
    (This is inefficient, but that's for another release).
    
    Now, the compiler detected this case when there was a direct assignment
    like p => a%b, but not when p was returned either as a function result
    or via an argument.  This patch fixes that.
    
    2020-04-24  Thomas Koenig  <tkoenig@gcc.gnu.org>
    
            PR fortran/93956
            * expr.c (gfc_check_pointer_assign): Also set subref_array_pointer
            when a function returns a pointer.
            * interface.c (gfc_set_subref_array_pointer_arg): New function.
            (gfc_procedure_use): Call it.
    
    2020-04-24  Thomas Koenig  <tkoenig@gcc.gnu.org>
    
            PR fortran/93956
            * gfortran.dg/pointer_assign_13.f90: New test.

commit 0eef00149a0bd0b6f4e4c7d9cdf0a029bfeeb892
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Apr 24 00:17:28 2020 +0000

    Daily bump.

commit bdeb48c6d84c7651f180887c66f617aaaf598ac3
Author: Thomas Rodgers <rodgert@appliantology.com>
Date:   Thu Apr 23 13:42:46 2020 -0700

    libstdc++: Mark experimental::net::system_context ctor deleted
    
               Backport from mainline.
    
               * include/experimental/net/executor (system_context): Mark
               system_context::system_context() = delete.
               * testsuite/experimental/net/executor/1.cc: Add new
               test to check system_context is not default constructible.

commit d626e49c438453c2f161c586d9df3d5e0a67d09a
Author: Thomas Rodgers <rodgert@appliantology.com>
Date:   Thu Apr 23 13:57:01 2020 -0700

    libstdc++: Fix date of changelog entry

commit c32aa69c086e1b76d2176829db85a6ba9650a2da
Author: Thomas Rodgers <rodgert@appliantology.com>
Date:   Thu Apr 23 13:33:09 2020 -0700

    libstdc++: Fix PSTL tests to run correctly with newer Thread Building Blocks
    
            * testsuite/lib/libstdc++.exp: Add additional_flags=
            -DTBB_SUPRESS_DEPRECATED_MESSAGES=1 to suppress warnings when
            compiling with a newer Thread Building Blocks.

commit 9d13ebadf78821fe5a239600460a81c10def10cc
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Thu Apr 23 18:48:50 2020 +0100

    libstdc++: Define __cpp_lib_execution feature test
    
    This macro has never been defined by libstdc++, despite supporting the
    parallel algorithms. It should have a different value for C++17 and
    C++20, because P1001R2 should not be supported in C++17, but
    unsequenced_policy is defined for C++17 (see PR 94702).
    
    Backport from mainline
    2020-04-22  Jonathan Wakely  <jwakely@redhat.com>
    
            * include/std/execution (__cpp_lib_execution): Define to indicate
            support for P0024R2 and P1001R2.
            * include/std/version (__cpp_lib_execution): Define.
            * testsuite/25_algorithms/pstl/feature_test.cc: Only test macro
            defined by <algorithm>, move other tests to new tests ...
            * testsuite/25_algorithms/pstl/feature_test-2.cc: New test.
            * testsuite/25_algorithms/pstl/feature_test-3.cc: New test.
            * testsuite/25_algorithms/pstl/feature_test-4.cc: New test.
            * testsuite/25_algorithms/pstl/feature_test-5.cc: New test.

commit c1d1dab64aa787e6e399c28ec9a852e1be85af0d
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Thu Apr 23 18:42:04 2020 +0100

    libstdc++: Update __cpp_lib_array_constexpr and __cpp_lib_string_view
    
    The C++20 P0858R0 changes are supported even in C++17 (because array and
    string_view iterators are just pointers), so the feature test macros can
    be defined to 201803 for C++17.
    
            * include/bits/stl_iterator.h (__cpp_lib_array_constexpr): Update
            value to indicate P0858R0 support.
            * include/std/string_view (__cpp_lib_string_view): Likewise.
            * include/std/version (__cpp_lib_array_constexpr)
            (__cpp_lib_string_view): Likewise.
            * testsuite/23_containers/array/element_access/constexpr_c++17.cc:
            New test.
            * testsuite/23_containers/array/requirements/constexpr_iter.cc: Test
            in C++17 mode and check feature test macro.

commit 46790405c5204d0c00501b1b972138d1d5481ba9
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Thu Apr 23 17:39:21 2020 +0100

    libstdc++: Add missing feature test macros
    
    These macros all correspond to features that are already supported, but
    the macro was not defined when the feature was implemented.
    
    Backport from mainline
    2020-04-22  Jonathan Wakely  <jwakely@redhat.com>
    
            * include/bits/ptr_traits.h (__cpp_lib_constexpr_memory): Define to
            indicate P1006R1 support.
            (__cpp_lib_to_address): Define to indicate P0653R2 support.
            * include/std/memory (__cpp_lib_assume_aligned): Define to indicate
            P1007R3 support.
            * include/std/memory_resource (__cpp_lib_polymorphic_allocator):
            Define to indicate P0339R6 support.
            * include/std/string_view (__cpp_lib_starts_ends_with): Define to
            indicate P0457R2 support.
            * include/std/type_traits (__cpp_lib_is_nothrow_convertible): Define
            to indicate P0758R1 support.
            (__cpp_lib_remove_cvref): Define to indicate P0550R2 support.
            (__cpp_lib_type_identity): Define to indicate P0887R1 support.
            * include/std/version (__cpp_lib_is_nothrow_convertible)
            (__cpp_lib_remove_cvref, __cpp_lib_type_identity)
            (__cpp_lib_assume_aligned, __cpp_lib_constexpr_memory)
            (__cpp_lib_polymorphic_allocator, __cpp_lib_starts_ends_with)
            (__cpp_lib_to_address): Define.
            * testsuite/20_util/to_address/1_neg.cc: Adjust dg-error line number.

commit 152d89e33d7cb84c2a1b78e58d10ad6873168c96
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Thu Apr 23 17:26:26 2020 +0100

    libstdc++: Add comments to non-standard feature test macros
    
    These macros were replaced by __cpp_lib_map_try_emplace and
    __cpp_lib_unordered_map_try_emplace, because those names are more
    descriptive. The old names have been removed for gcc-10, but for this
    branch just add comments noting they are non-standard.
    
            * include/bits/stl_map.h (__cpp_lib_map_insertion): Add comment to
            non-standard macro.
            * include/bits/unordered_map.h (__cpp_lib_unordered_map_insertion):
            Likewise.
            * include/std/version (__cpp_lib_map_insertion)
            (__cpp_lib_unordered_map_insertion): Likewise.

commit e29964838b08dd7c0113582620b61505d2ee6c68
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Thu Apr 23 17:20:47 2020 +0100

    libstdc++: Define missing __cpp_lib_int_pow2 macro
    
    The P1956R1 renaming isn't implemented on the gcc-9 branch, so this is
    the old value corresponding to the original proposal that added these
    functions.
    
            * include/std/bit (__cpp_lib_int_pow2): Define to indicate P0556R3
            support.
            * include/std/version (__cpp_lib_int_pow2): Likewise.

commit 7ddb714f4e950c0a2621a333d139891d0648bf83
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Thu Apr 23 17:14:09 2020 +0100

    libstdc++: Define __cpp_lib_constexpr_complex macro
    
    This is LWG issue 3349.
    
    Backport from mainline
    2019-12-10  Jonathan Wakely  <jwakely@redhat.com>
    
            * include/std/complex (__cpp_lib_constexpr_complex): Define.
            * include/std/version (__cpp_lib_constexpr_complex): Likewise.
            * testsuite/26_numerics/complex/1.cc: New test.
            * testsuite/26_numerics/complex/2.cc: New test.

commit 81b90b924a9205a2f227b6f634a3ff06ff45b47b
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Thu Apr 23 17:07:54 2020 +0100

    Fix <version> header for freestanding
    
    Backport from mainline
    2019-11-05  Jonathan Wakely  <jwakely@redhat.com>
    
            * include/std/version [!_GLIBCXX_HOSTED]: Do not define feature test
            macros for features that are only present in hosted builds.

commit 906eb61a84c838375952993f4bd46640f29a48cc
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Thu Apr 23 16:56:01 2020 +0100

    libstdc++: Fix some missing/incorrect feature test macros
    
    Backport from mainline
    2019-10-30  Jonathan Wakely  <jwakely@redhat.com>
    
            * include/std/bit (__cpp_lib_bitops): Define.
            * include/std/version (__cpp_lib_constexpr): Remove.
            (__cpp_lib_bitops): Define.
            * testsuite/26_numerics/bit/header.cc: New test.
            * testsuite/26_numerics/bit/header-2.cc: New test.

commit 8079a9ab972b1fc8618a30f0a42a6533810e1c07
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Wed Feb 19 15:06:24 2020 +0000

    libstdc++: Add __cpp_lib_unwrap_ref feature test macro
    
    We already defined the traits in <type_traits> as now required by LWG
    3348, but the macro was missing. This adds it.
    
    Backport from mainline
    2020-02-19  Jonathan Wakely  <jwakely@redhat.com>
    
            * include/std/type_traits (__cpp_lib_unwrap_ref): Define (LWG 3348).
            * include/std/version (__cpp_lib_unwrap_ref): Likewise.
            * testsuite/20_util/unwrap_reference/1.cc: Check macro.
            * testsuite/20_util/unwrap_reference/3.cc: New test.

commit 8b3cd6da5b5df7e244a5a590ccb530562802a389
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Apr 23 00:17:27 2020 +0000

    Daily bump.

commit 35699e75a502bb25a2cb23a456e8d6f036b8f226
Author: Martin Sebor <msebor@gmail.com>
Date:   Tue Apr 21 11:02:06 2020 -0400

    c++: reject scalar array initialization with nullptr [PR94510]
    
    The change committed to GCC 9 to allow string literals as template arguments
    caused the compiler to prune away, and thus miss diagnosing, conversion from
    nullptr to int in an array initializer.  After looking at various approaches
    to improving the pruning, we realized that the only place the pruning is
    necessary is in the mangler.
    
    gcc/cp/ChangeLog
    2020-04-21  Martin Sebor  <msebor@redhat.com>
                Jason Merrill  <jason@redhat.com>
    
            PR c++/94510
            * decl.c (reshape_init_array_1): Avoid stripping redundant trailing
            zero initializers...
            * mangle.c (write_expression): ...and handle them here even for
            pointers to members by calling zero_init_expr_p.
            * cp-tree.h (zero_init_expr_p): Declare.
            * tree.c (zero_init_expr_p): Define.
            (type_initializer_zero_p): Remove.
            * pt.c (tparm_obj_values): New hash_map.
            (get_template_parm_object): Store to it.
            (tparm_object_argument): New.
    
    gcc/testsuite/ChangeLog
    2020-04-21  Martin Sebor  <msebor@redhat.com>
    
            PR c++/94510
            * g++.dg/init/array58.C: New test.
            * g++.dg/init/array59.C: New test.
            * g++.dg/cpp2a/nontype-class34.C: New test.
            * g++.dg/cpp2a/nontype-class35.C: New test.

commit bfe912a35c0c39a623ba6e0066b6010e0ade0f5e
Author: Andre Vieira <andre.simoesdiasvieira@arm.com>
Date:   Wed Apr 22 15:16:20 2020 +0100

    aarch64: Fix bootstrap with old binutils [PR93053]
    
    As reported in the PR, GCC 10 (and also 9.3.1 but not 9.3.0) fails to build
    when using older binutils which lack LSE support, because those instructions
    are used in libgcc.
    Thanks to Kyrylo's hint, the following patches (hopefully) allow it to build
    even with older binutils by using .inst directive if LSE support isn't
    available in the assembler.
    
    2020-04-22  Andre Vieira  <andre.simoesdiasvieira@arm.com>
    
            Backport from mainline.
            2020-04-15  Jakub Jelinek  <jakub@redhat.com>
    
            PR target/93053
            * configure.ac (LIBGCC_CHECK_AS_LSE): Add HAVE_AS_LSE checking.
            * config/aarch64/lse.S: Include auto-target.h, if HAVE_AS_LSE
            is not defined, use just .arch armv8-a.
            (B, M, N, OPN): Define.
            (COMMENT): New .macro.
            (CAS, CASP, SWP, LDOP): Use .inst directive if HAVE_AS_LSE is not
            defined.  Otherwise, move the operands right after the glue? and
            comment out operands where the macros are used.
            * configure: Regenerated.
            * config.in: Regenerated.

commit 9a5cb1b3725e2c89f0dca00a76fdcc3772c2a400
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Wed Apr 22 08:09:11 2020 +0100

    libstdc++: Improve C++14 status docs
    
    This adds a full table of contents for the C++14 standard, with status
    for each part.
    
    The list of C++14 proposals is removed, as it adds little value now that
    everything is supported.
    
            * doc/Makefile.am (xml_sources_manual): Add missing XML files.
            * doc/Makefile.in: Regenerate.
            * doc/xml/manual/status_cxx1998.xml: Refer to "this section" instead
            of "this page".
            * doc/xml/manual/status_cxx2011.xml: Formatting and other corrections
            to the C++11 status table.
            * doc/xml/manual/status_cxx2014.xml: Replace list of C++14 feature
            proposals with table matching contents of the C++14 standard.
            * doc/html/*: Regenerate.

commit 6153cc3b756fbcb347176bb93b5a03433faa7ff8
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Wed Apr 22 07:21:01 2020 +0100

    libstdc++: Update __cpp_lib_erase_if macro (P1115R3)
    
    Now that this feature has been approved for C++20 we can define the
    macro to the official value.
    
    Backport from mainline
    2020-02-15  Jonathan Wakely  <jwakely@redhat.com>
    
            * include/bits/erase_if.h (__cpp_lib_erase_if): Define to 202002L.
            * include/std/deque (__cpp_lib_erase_if): Likewise.
            * include/std/forward_list (__cpp_lib_erase_if): Likewise.
            * include/std/list (__cpp_lib_erase_if): Likewise.
            * include/std/string (__cpp_lib_erase_if): Likewise.
            * include/std/vector (__cpp_lib_erase_if): Likewise.
            * include/std/version (__cpp_lib_erase_if): Likewise.
            * testsuite/21_strings/basic_string/erasure.cc: Test for new value.
            * testsuite/23_containers/deque/erasure.cc: Likewise.
            * testsuite/23_containers/forward_list/erasure.cc: Likewise.
            * testsuite/23_containers/list/erasure.cc: Likewise.
            * testsuite/23_containers/map/erasure.cc: Likewise.
            * testsuite/23_containers/set/erasure.cc: Likewise.
            * testsuite/23_containers/unordered_map/erasure.cc: Likewise.
            * testsuite/23_containers/unordered_set/erasure.cc: Likewise.
            * testsuite/23_containers/vector/erasure.cc: Likewise.

commit beb84b76b395bb283dbfb17f724c0b2f9647747e
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Apr 22 00:17:32 2020 +0000

    Daily bump.

commit f9622455e61e0a688cad4996f587781487edc067
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Tue Apr 21 17:26:52 2020 +0100

    libstdc++: Document correct feature test macro, __cpp_lib_is_invocable
    
    The std::is_callable trait was renamed to is_invocable, but I never
    updated the manual to reflect the updated feature test macro.
    
            * doc/xml/manual/status_cxx2017.xml: Fix name of feature test macro.
            * doc/html/*: Regenerate.

commit 9300be2c74e35709ded209a378edab91a9073fbc
Author: Martin Jambor <mjambor@suse.cz>
Date:   Tue Apr 21 14:20:37 2020 +0200

    sra-9: Fix sra_modify_expr handling of partial writes (PR 94482)
    
    This is a fairly straightforward backport of the mainline fix for PR 94482.
    
    When sra_modify_expr is invoked on an expression that modifies only
    part of the underlying replacement, such as a BIT_FIELD_REF on a LHS
    of an assignment and the SRA replacement's type is not compatible with
    what is being replaced (0th operand of the B_F_R in the above
    example), it does not work properly, basically throwing away the part
    of the expr that should have stayed intact.
    
    This is fixed in two ways.  For BIT_FIELD_REFs, which operate on the
    binary image of the replacement (and so in a way serve as a
    VIEW_CONVERT_EXPR) we just do not bother with converting.  For
    REALPART_EXPRs and IMAGPART_EXPRs, if the replacement is not a
    register, we insert a VIEW_CONVERT_EXPR under
    the complex partial access expression, which is always OK, for loads
    from registers we take the extra step of converting it to a temporary.
    
    This revealed a bug in fwprop which is fixed with the hunk from Richi.
    This is the only difference from the mainline patch which has two
    hunks, but the code handling BIT_FIELD_REF is not present in gcc-9.
    
    Oh, and the testcase options were changed to what Jakub put there on
    the mainline to suppress all vector ABI warnings.
    
    Bootstrapped and tested on x86_64-linux.
    
    2020-04-21  Martin Jambor  <mjambor@suse.cz>
    
            Backport from master
            2020-04-09  Martin Jambor  <mjambor@suse.cz>
                        Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/94482
            * tree-sra.c (create_access_replacement): Dump new replacement with
            TDF_UID.
            (sra_modify_expr): Fix handling of cases when the original EXPR writes
            to only part of the replacement.
            * tree-ssa-forwprop.c (pass_forwprop::execute): Properly verify
            the first operand of combinations into REAL/IMAGPART_EXPR and
            BIT_FIELD_REF.
    
            testsuite/
            * gcc.dg/torture/pr94482.c: New test.
            * gcc.dg/tree-ssa/pr94482-2.c: Likewise.

commit 6b99e1947733079fe0f5d77f2e234e567e31f873
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Apr 21 00:17:27 2020 +0000

    Daily bump.

commit 83eeda5f004c3b9cbeccd3da1c3fe58b3015e55f
Author: Marek Polacek <polacek@redhat.com>
Date:   Mon Apr 20 15:43:49 2020 -0400

    c++: Fix bogus -Wparentheses warning with fold-expression [PR94505]
    
    We issue bogus -Wparentheses warnings (3 of them!) for this fold expression:
    
      ((B && true) || ...)
    
    Firstly, issuing a warning for a compiler-generated expression is wrong
    and secondly, B && true must be wrapped in ( ) otherwise you'll get
    error: binary expression in operand of fold-expression.
    
            PR c++/94505 - bogus -Wparentheses warning with fold-expression.
            * pt.c (fold_expression): Add warning_sentinel for -Wparentheses
            before calling build_x_binary_op.
    
            * g++.dg/cpp1z/fold11.C: New test.

commit 47ea8616d4f5fee875e0849e393575e00def5894
Author: H.J. Lu <hjl.tools@gmail.com>
Date:   Mon Apr 20 05:51:29 2020 -0700

    x86: Restore the frame pointer in word_mode
    
    We must restore the frame pointer in word_mode for eh_return epilogues
    since the upper 32 bits of RBP register can have any values.
    
    Tested on Linux/x32 and Linux/x86-64.
    
            Backport from master
            PR target/94556
            * config/i386/i386.c (ix86_expand_epilogue): Restore the frame
            pointer in word_mode for eh_return epilogues.
    
    (cherry picked from commit efc1f3577f38bb213b313661c025ac965baee953)

commit f32d02e223d49a5d9db295969da9d2c04dc9d086
Author: Harald Anlauf <anlauf@gmx.de>
Date:   Mon Apr 20 14:45:10 2020 +0200

    PR fortran/93364 - ICE in gfc_set_array_spec, at fortran/array.c:879
    
    Backport from mainline.
    
    2020-04-20  Harald Anlauf  <anlauf@gmx.de>
    
    Add missing check in gfc_set_array_spec for sum of rank and corank to not
    exceed GFC_MAX_DIMENSIONS.
    
            PR fortran/93364
            * array.c (gfc_set_array_spec): Check for sum of rank and corank
            not exceeding GFC_MAX_DIMENSIONS.
    
            PR fortran/93364
            * gfortran.dg/pr93364.f90: New test.

commit 5e022e3b3f7b2109f47fefffd6368fe3d378bdaa
Author: Andrea Corallo <andrea.corallo@arm.com>
Date:   Thu Apr 16 09:55:51 2020 +0200

    aarch64: backport fix for PR target/94530
    
    gcc/ChangeLog
    
    2020-04-16  Andrea Corallo  <andrea.corallo@arm.com>
    
            Backport from mainline.
            2020-04-15  Andrea Corallo  <andrea.corallo@arm.com
    
            PR target/94530
            * config/aarch64/falkor-tag-collision-avoidance.c
            (valid_src_p): Check for aarch64_address_info type before
            accessing base field.
    
    gcc/testsuite/ChangeLog
    
    2020-04-16  Andrea Corallo  <andrea.corallo@arm.com>
    
            Backport from mainline.
            2020-04-09  Andrea Corallo  <andrea.corallo@arm.com>
    
            PR target/94530
            * gcc.target/aarch64/pr94530.c: New test.

commit 910c610dcc220ed04123e4da59296457254d85d4
Author: Tamar Christina <tamar.christina@arm.com>
Date:   Mon Apr 20 11:43:43 2020 +0100

    AArch64: Fix options canonicanization for assembler
    
    It is currently impossible to use fp16 on any architecture higher than Armv8.3-a
    due to a bug in options canonization.  This bug results in the fp16 flag not
    being emitted in the assembly when it should have been.
    
    This is caused by a complicated architectural requirement at Armv8.4-a.  On
    Armv8.2-a and Armv8.3-a fp16fml is an optional extension and turning it on turns
    on both fp and fp16.  However starting with Armv8.4-a fp16fml is mandatory if
    fp16 is available, otherwise it's optional.
    
    In short this means that to enable fp16fml the smallest option that needs to
    passed to the assembler is Armv8.4-a+fp16.
    
    The fix in this patch takes into account that an option may be on by default in
    an architecture, but that not all the bits required to use it are on by default
    in an architecture.  In such cases the difference between the two are still
    emitted to the assembler.
    
    gcc/ChangeLog:
    
            PR target/94396
            * common/config/aarch64/aarch64-common.c
            (aarch64_get_extension_string_for_isa_flags): Handle default flags.
    
    gcc/testsuite/ChangeLog:
    
            PR target/94396
            * gcc.target/aarch64/options_set_11.c: New test.
            * gcc.target/aarch64/options_set_12.c: New test.
            * gcc.target/aarch64/options_set_13.c: New test.
            * gcc.target/aarch64/options_set_14.c: New test.
            * gcc.target/aarch64/options_set_15.c: New test.
            * gcc.target/aarch64/options_set_16.c: New test.
            * gcc.target/aarch64/options_set_17.c: New test.
            * gcc.target/aarch64/options_set_18.c: New test.
            * gcc.target/aarch64/options_set_19.c: New test.
            * gcc.target/aarch64/options_set_20.c: New test.
            * gcc.target/aarch64/options_set_21.c: New test.
            * gcc.target/aarch64/options_set_22.c: New test.
            * gcc.target/aarch64/options_set_23.c: New test.
            * gcc.target/aarch64/options_set_24.c: New test.
            * gcc.target/aarch64/options_set_25.c: New test.
            * gcc.target/aarch64/options_set_26.c: New test.

commit 5c09a1b71bb96d1fd6488d040b65001807fd16c2
Author: Martin Liska <mliska@suse.cz>
Date:   Mon Apr 20 11:26:58 2020 +0200

    Backport e9f799d25973fc38022c5ea71ed5a2bca58a847f
    
            Backport from mainline
            2020-04-17  Martin Liska  <mliska@suse.cz>
                        Jonathan Yong <10walls@gmail.com>
    
            PR gcov-profile/94570
            * ltmain.sh: Do not define HAVE_DOS_BASED_FILE_SYSTEM
            for CYGWIN.
            Backport from mainline
            2020-04-17  Martin Liska  <mliska@suse.cz>
                        Jonathan Yong <10walls@gmail.com>
    
            PR gcov-profile/94570
            * coverage.c (coverage_init): Use separator properly.
            Backport from mainline
            2020-04-17  Martin Liska  <mliska@suse.cz>
                        Jonathan Yong <10walls@gmail.com>
    
            PR gcov-profile/94570
            * filenames.h (defined): Do not define HAVE_DOS_BASED_FILE_SYSTEM
            for CYGWIN.
    
    Co-Authored-By: Jonathan Yong <10walls@gmail.com>

commit 642eed0f8e7417129169e6a125d5b86869670323
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Apr 20 00:17:32 2020 +0000

    Daily bump.

commit 84282b05a85fcc0c3507b717515ef8defe1c9ece
Author: Uros Bizjak <ubizjak@gmail.com>
Date:   Sun Apr 19 15:32:17 2020 +0200

    i386: Remove unneeded assignments when triggering SSE exceptions
    
    According to "Intel 64 and IA32 Arch SDM, Vol. 3":
    
    "Because SIMD floating-point exceptions are precise and occur immediately,
    the situation does not arise where an x87 FPU instruction, a WAIT/FWAIT
    instruction, or another SSE/SSE2/SSE3 instruction will catch a pending
    unmasked SIMD floating-point exception."
    
    Remove unneeded assignments to volatile memory.
    
    libgcc/ChangeLog:
    
            * config/i386/sfp-exceptions.c (__sfp_handle_exceptions) [__SSE_MATH__]:
            Remove unneeded assignments to volatile memory.
    
    libatomic/ChangeLog:
    
            * config/x86/fenv.c (__atomic_feraiseexcept) [__SSE_MATH__]:
            Remove unneeded assignments to volatile memory.
    
    libgfortran/ChangeLog:
    
            * config/fpu-387.h (local_feraiseexcept) [__SSE_MATH__]:
            Remove unneeded assignments to volatile memory.

commit 5fe50e5a5cc405922ba26195d33ff58994f93938
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Apr 19 00:17:30 2020 +0000

    Daily bump.

commit b29ea6948c8e936b07ff8befad7befee6dbfe1a5
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Apr 18 00:17:34 2020 +0000

    Daily bump.

commit 4a745938b56da04ed01055d5bcb520dc1c760414
Author: H.J. Lu <hjl.tools@gmail.com>
Date:   Fri Apr 17 15:23:27 2020 -0700

    x86: Insert ENDBR if function will be called indirectly
    
    Since constant_call_address_operand has
    
    ;; Test for a pc-relative call operand
    (define_predicate "constant_call_address_operand"
      (match_code "symbol_ref")
    {
      if (ix86_cmodel == CM_LARGE || ix86_cmodel == CM_LARGE_PIC
          || flag_force_indirect_call)
        return false;
      if (TARGET_DLLIMPORT_DECL_ATTRIBUTES && SYMBOL_REF_DLLIMPORT_P (op))
        return false;
      return true;
    })
    
    even if cgraph_node::get (cfun->decl)->only_called_directly_p () returns
    false, the fuction may still be called indirectly.  Copy the logic from
    constant_call_address_operand to rest_of_insert_endbranch to insert ENDBR
    at function entry if function will be called indirectly.
    
    NB: gcc.target/i386/pr94417-2.c is updated to expect 4 ENDBRs, instead
    of 2, since only GCC 10 has the fix for PR target/89355 not to insert
    ENDBR after NOTE_INSN_DELETED_LABEL.
    
    gcc/
    
            Backport from master
            PR target/94417
            * config/i386/i386.c (rest_of_insert_endbranch): Insert ENDBR at
            function entry if function will be called indirectly.
    
    gcc/testsuite/
    
            Backport from master
            PR target/94417
            * gcc.target/i386/pr94417-1.c: New test.
            * gcc.target/i386/pr94417-2.c: Likewise.
            * gcc.target/i386/pr94417-3.c: Likewise.
    
    (cherry picked from commit c5f379653964a1d2c7037b2de3e947a48370a198)

commit 7bce1c72444bb3c9636b492975a0494b376678cf
Author: Kewen Lin <linkw@linux.ibm.com>
Date:   Fri Apr 3 02:10:08 2020 -0500

    Fix PR94443 with gsi_insert_seq_before [PR94443]
    
    This patch is to fix the stupid mistake by using
    gsi_insert_seq_before instead of gsi_insert_before.
    
    BTW, the regression testing on one x86_64 machine from CFarm is
    unable to reveal it (I guess due to native arch sandybridge?), so I
    specified additional option -march=znver2 and verified the coverage.
    
    Bootstrapped/regtested on powerpc64le-linux-gnu (P9) and
    x86_64-pc-linux-gnu, also verified the fail cases in related PRs.
    
    Backport from mainline.
    
      2020-04-03  Kewen Lin  <linkw@gcc.gnu.org>
    
      gcc/
          PR tree-optimization/94443
          * tree-vect-loop.c (vectorizable_live_operation): Use
          gsi_insert_seq_before to replace gsi_insert_before.
    
      gcc/testsuite/
          PR tree-optimization/94443
          * gcc.dg/vect/pr94443.c: New test.

commit a809efd70d18c079d41051dc408de5e5f86a9797
Author: Kewen Lin <linkw@linux.ibm.com>
Date:   Tue Mar 31 22:48:46 2020 -0500

    Fix PR94043 by making vect_live_op generate lc-phi
    
    As PR94043 shows, my commit r10-4524 exposed one issue in
    vectorizable_live_operation, which inserts one extra BB
    before the single exit, leading unexpected operand expansion
    and unexpected loop depth assertion.  As Richi suggested,
    this patch is to teach vectorizable_live_operation to
    generate loop closed phi for vec_lhs, it looks like:
         loop;
         # lhs' = PHI <lhs>
    =>
         loop;
         # vec_lhs' = PHI <vec_lhs>
         new_tree = BIT_FIELD_REF <vec_lhs', ...>;
         lhs' = new_tree;
    
    I noticed that there are some SLP cases that have same lhs
    and vec_lhs but different offsets, which can make us have
    more PHIs for the same vec_lhs there.  But I think it would
    be fine since only one of them is actually live, the others
    should be eliminated by the following dce.  So the patch
    doesn't check whether there is one phi for vec_lhs, just
    create one directly instead.
    
    Bootstrapped/regtested on powerpc64le-linux-gnu (LE) P8.
    
    Backport from mainline.
    
      2020-04-01  Kewen Lin  <linkw@gcc.gnu.org>
    
      gcc/ChangeLog
    
          PR tree-optimization/94043
          * tree-vect-loop.c (vectorizable_live_operation): Generate loop-closed
          phi for vec_lhs and use it for lane extraction.
    
      gcc/testsuite/ChangeLog
    
          PR tree-optimization/94043
          * gfortran.dg/graphite/vect-pr94043.f90: New test.

commit 3c5d3cc15a5ab7cb4a05ecd20a18de88e835d943
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Apr 17 00:17:32 2020 +0000

    Daily bump.

commit baf3a5a94244b4a260810825870be6ecc15fa35a
Author: Michael Meissner <2019-02-12  Michael Meissner  meissner@linux.ibm.com>
Date:   Thu Apr 16 12:49:22 2020 -0400

    Fix target/94557 PowerPC regression on GCC 9 (variable vec_extract)
    
    2020-04-16  Michael Meissner  <meissner@linux.ibm.com>
    
            PR target/94557
            * config/rs6000/rs6000.c (rs6000_adjust_vec_address): Fix
            regression caused by PR target/93932 backport.  Mask variable
            vector extract index so it does not go beyond the vector when
            extracting a vector element from memory.

commit 0f1cf13ecee1b4f9d963426b35acb5a0625816c4
Author: Richard Biener <rguenther@suse.de>
Date:   Tue Apr 7 16:29:37 2020 +0200

    middle-end/94479 - fix gimplification of address
    
    When gimplifying an address operand we may expose an indirect
    ref via DECL_VALUE_EXPR for example.  This is dealt with in the
    code already but it fails to consider that INDIRECT_REFs get
    gimplified to MEM_REFs.
    
    Fixed which makes the ICE observed on x86_64-netbsd go away.
    
    2020-04-07  Richard Biener  <rguenther@suse.de>
    
            PR middle-end/94479
            * gimplify.c (gimplify_addr_expr): Also consider generated
            MEM_REFs.
    
            * gcc.dg/torture/pr94479.c: New testcase.

commit d998a89f9c532af04a58da63d722daea00c681b2
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Apr 16 00:17:35 2020 +0000

    Daily bump.

commit 79b59676531631331b9353107f7d40c887852433
Author: Max Filippov <jcmvbkbc@gmail.com>
Date:   Mon Apr 13 13:26:04 2020 -0700

    xtensa: backport fix for PR target/94584
    
    Patterns zero_extendhisi2, zero_extendqisi2 and extendhisi2_internal can
    load value from memory, but they don't treat volatile memory correctly.
    Add %v1 before load instructions to emit 'memw' instruction when
    -mserialize-volatile is in effect.
    
    2020-04-15  Max Filippov  <jcmvbkbc@gmail.com>
    gcc/
            * config/xtensa/xtensa.md (zero_extendhisi2, zero_extendqisi2)
            (extendhisi2_internal): Add %v1 before the load instructions.
    
    gcc/testsuite/
            * gcc.target/xtensa/pr94584.c: New test.

commit 20c6c0c8b18ae1bb3582456085e98cb50ab5854a
Author: Max Filippov <jcmvbkbc@gmail.com>
Date:   Thu Sep 26 20:51:27 2019 +0000

    xtensa: backport fix for PR target/91880
    
    Xtensa hwloop_optimize segfaults when zero overhead loop is about to be
    inserted as the first instruction of the function.
    Insert zero overhead loop instruction into new basic block before the
    loop when basic block that precedes the loop is empty.
    
    2020-04-15  Max Filippov  <jcmvbkbc@gmail.com>
    gcc/
            * config/xtensa/xtensa.c (hwloop_optimize): Insert zero overhead
            loop instruction into new basic block before the loop when basic
            block that precedes the loop is empty.
    
    gcc/testsuite/
            * gcc.target/xtensa/pr91880.c: New test case.
            * gcc.target/xtensa/xtensa.exp: New test suite.

commit 1eccf9955614a6f0597bf624bbc88788b8b0fdc5
Author: Uros Bizjak <ubizjak@gmail.com>
Date:   Wed Apr 15 22:02:39 2020 +0200

    i386: Require OPTION_MASK_ISA_SSE2 for __builtin_ia32_movq128 [PR94603]
    
            PR target/94603
            * config/i386/i386-builtin.def (__builtin_ia32_movq128):
            Require OPTION_MASK_ISA_SSE2.
    
    testsuite/ChangeLog:
    
            PR target/94603
            * gcc.target/i386/pr94603.c: New test.

commit 54ab0a7d757890d6d6add10ff277377fc54fe786
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Apr 15 00:17:34 2020 +0000

    Daily bump.

commit 7c94472580af3e2328bebb1493e7693c2b9cadc2
Author: Thomas König <tkoenig@gcc.gnu.org>
Date:   Tue Apr 14 16:15:49 2020 +0200

    Backport from trunk of the fix for PR 94270.
    
    2020-04-14  Thomas Koenig  <tkoenig@gcc.gnu.org>
    
            Backport from trunk
            PR fortran/94270
            * gfortran.dg/warn_unused_dummy_argument_6.f90: New test.
    
    2020-04-14  Thomas Koenig  <tkoenig@gcc.gnu.org>
    
            PR fortran/94270
            * gfortran.dg/warn_unused_dummy_argument_6.f90: New test.

commit 12d027adaf2d93b0d5d0288efff0241b03e3b21a
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Apr 14 00:17:35 2020 +0000

    Daily bump.

commit a99a8431e670a6c0ac861d738249ff4d94d6552e
Author: Thomas Schwinge <thomas@codesourcery.com>
Date:   Mon Apr 13 08:56:03 2020 +0200

    Rename 'libgomp.oacc-c-c++-common/static-dynamic-lifetimes-*' to 'libgomp.oacc-c-c++-common/structured-dynamic-lifetimes-*' [PR92843]
    
    Fix-up for commit be9862dd96945772ae0692bc95b37ec6dbcabda0 "Test cases for
    mixed structured/dynamic data lifetimes with OpenACC [PR92843]": it's
    "structured", not "static" data lifetimes/reference counters.
    
            libgomp/
            PR libgomp/92843
            * testsuite/libgomp.oacc-c-c++-common/static-dynamic-lifetimes-1-lib.c:
            Rename to...
            * testsuite/libgomp.oacc-c-c++-common/structured-dynamic-lifetimes-1-lib.c:
            ... this.
            * testsuite/libgomp.oacc-c-c++-common/static-dynamic-lifetimes-1.c:
            Rename to...
            * testsuite/libgomp.oacc-c-c++-common/structured-dynamic-lifetimes-1.c:
            ... this.
            * testsuite/libgomp.oacc-c-c++-common/static-dynamic-lifetimes-2-lib.c:
            Rename to...
            * testsuite/libgomp.oacc-c-c++-common/structured-dynamic-lifetimes-2-lib.c:
            ... this.
            * testsuite/libgomp.oacc-c-c++-common/static-dynamic-lifetimes-2.c:
            Rename to...
            * testsuite/libgomp.oacc-c-c++-common/structured-dynamic-lifetimes-2.c:
            ... this.
            * testsuite/libgomp.oacc-c-c++-common/static-dynamic-lifetimes-3-lib.c:
            Rename to...
            * testsuite/libgomp.oacc-c-c++-common/structured-dynamic-lifetimes-3-lib.c:
            ... this.
            * testsuite/libgomp.oacc-c-c++-common/static-dynamic-lifetimes-3.c:
            Rename to...
            * testsuite/libgomp.oacc-c-c++-common/structured-dynamic-lifetimes-3.c:
            ... this.
            * testsuite/libgomp.oacc-c-c++-common/static-dynamic-lifetimes-4-lib.c:
            Rename to...
            * testsuite/libgomp.oacc-c-c++-common/structured-dynamic-lifetimes-4-lib.c:
            ... this.
            * testsuite/libgomp.oacc-c-c++-common/static-dynamic-lifetimes-4.c:
            Rename to...
            * testsuite/libgomp.oacc-c-c++-common/structured-dynamic-lifetimes-4.c:
            ... this.
            * testsuite/libgomp.oacc-c-c++-common/static-dynamic-lifetimes-5-lib.c:
            Rename to...
            * testsuite/libgomp.oacc-c-c++-common/structured-dynamic-lifetimes-5-lib.c:
            ... this.
            * testsuite/libgomp.oacc-c-c++-common/static-dynamic-lifetimes-5.c:
            Rename to...
            * testsuite/libgomp.oacc-c-c++-common/structured-dynamic-lifetimes-5.c:
            ... this.
            * testsuite/libgomp.oacc-c-c++-common/static-dynamic-lifetimes-6-lib.c:
            Rename to...
            * testsuite/libgomp.oacc-c-c++-common/structured-dynamic-lifetimes-6-lib.c:
            ... this.
            * testsuite/libgomp.oacc-c-c++-common/static-dynamic-lifetimes-6.c:
            Rename to...
            * testsuite/libgomp.oacc-c-c++-common/structured-dynamic-lifetimes-6.c:
            ... this.
            * testsuite/libgomp.oacc-c-c++-common/static-dynamic-lifetimes-7-lib.c:
            Rename to...
            * testsuite/libgomp.oacc-c-c++-common/structured-dynamic-lifetimes-7-lib.c:
            ... this.
            * testsuite/libgomp.oacc-c-c++-common/static-dynamic-lifetimes-7.c:
            Rename to...
            * testsuite/libgomp.oacc-c-c++-common/structured-dynamic-lifetimes-7.c:
            ... this.
            * testsuite/libgomp.oacc-c-c++-common/static-dynamic-lifetimes-8-lib.c:
            Rename to...
            * testsuite/libgomp.oacc-c-c++-common/structured-dynamic-lifetimes-8-lib.c:
            ... this.
            * testsuite/libgomp.oacc-c-c++-common/static-dynamic-lifetimes-8.c::
            Rename to...
            * testsuite/libgomp.oacc-c-c++-common/structured-dynamic-lifetimes-8.c:
            ... this.
    
    (cherry picked from commit af4c92573dc462a17a6c345756889d28054ed591)

commit a2a0f3ee6ff0a6adfd08b0789fe1b599786657a3
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Apr 13 00:17:29 2020 +0000

    Daily bump.

commit 557142474a348cd4338b284fe6a88b60013f44d6
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Apr 12 00:17:30 2020 +0000

    Daily bump.

commit d2fee90546d0f04595301af8f3786b8e1671814a
Author: Uros Bizjak <ubizjak@gmail.com>
Date:   Sat Apr 11 13:25:51 2020 +0200

    i386: Fix REDUC_SSE_SMINMAX_MODE mode conditions.
    
    V4SI, V8HI and V16QI modes of redux_<code>_scal_<mode> expander
    expand with SSE2 instructions (PSRLDQ and PCMPGTx) so use
    TARGET_SSE2 as relevant mode iterator codition.
    
            PR target/94494
            * config/i386/sse.md (REDUC_SSE_SMINMAX_MODE): Use TARGET_SSE2
            condition for V4SI, V8HI and V16QI modes.
    
    testsuite/ChangeLog:
    
            PR target/94494
            * gcc.target/i386/pr94494.c: New test.

commit 59eddd9769057ee094cdae09b15b257cc3db690f
Author: Uros Bizjak <ubizjak@gmail.com>
Date:   Sat Apr 11 13:22:52 2020 +0200

    i386: Fix REDUC_SSE_SMINMAX_MODE mode conditions.
    
    V4SI, V8HI and V16QI modes of redux_<code>_scal_<mode> expander
    expand with SSE2 instructions (PSRLDQ and PCMPGTx) so use
    TARGET_SSE2 as relevant mode iterator codition.
    
            PR target/94494
            * config/i386/sse.md (REDUC_SSE_SMINMAX_MODE): Use TARGET_SSE2
            condition for V4SI, V8HI and V16QI modes.
    
    testsuite/ChangeLog:
    
            PR target/94494
            * gcc.target/i386/pr94494.c: New test.

commit f41bd52147a32ca8931b5803aeae3c447384d1f0
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Apr 11 00:17:29 2020 +0000

    Daily bump.

commit 3c7a476c5ad3761cb5373f8c59a92e04525c5638
Author: Julian Brown <julian@codesourcery.com>
Date:   Fri Jan 17 13:18:18 2020 -0800

    Test cases for mixed structured/dynamic data lifetimes with OpenACC [PR92843]
    
            libgomp/
            PR libgomp/92843
            * testsuite/libgomp.oacc-c-c++-common/static-dynamic-lifetimes-1-lib.c:
            New file.
            * testsuite/libgomp.oacc-c-c++-common/static-dynamic-lifetimes-1.c:
            Likewise.
            * testsuite/libgomp.oacc-c-c++-common/static-dynamic-lifetimes-2-lib.c:
            Likewise.
            * testsuite/libgomp.oacc-c-c++-common/static-dynamic-lifetimes-2.c:
            Likewise.
            * testsuite/libgomp.oacc-c-c++-common/static-dynamic-lifetimes-3-lib.c:
            Likewise.
            * testsuite/libgomp.oacc-c-c++-common/static-dynamic-lifetimes-3.c:
            Likewise.
            * testsuite/libgomp.oacc-c-c++-common/static-dynamic-lifetimes-4-lib.c:
            Likewise.
            * testsuite/libgomp.oacc-c-c++-common/static-dynamic-lifetimes-4.c:
            Likewise.
            * testsuite/libgomp.oacc-c-c++-common/static-dynamic-lifetimes-5-lib.c:
            Likewise.
            * testsuite/libgomp.oacc-c-c++-common/static-dynamic-lifetimes-5.c:
            Likewise.
            * testsuite/libgomp.oacc-c-c++-common/static-dynamic-lifetimes-6-lib.c:
            Likewise.
            * testsuite/libgomp.oacc-c-c++-common/static-dynamic-lifetimes-6.c:
            Likewise.
            * testsuite/libgomp.oacc-c-c++-common/static-dynamic-lifetimes-7-lib.c:
            Likewise.
            * testsuite/libgomp.oacc-c-c++-common/static-dynamic-lifetimes-7.c:
            Likewise.
            * testsuite/libgomp.oacc-c-c++-common/static-dynamic-lifetimes-8-lib.c:
            Likewise.
            * testsuite/libgomp.oacc-c-c++-common/static-dynamic-lifetimes-8.c:
            Likewise.
    
    (cherry picked from commit be9862dd96945772ae0692bc95b37ec6dbcabda0)

commit 3e84068b30f954d3f044f51c1ee8fc040b62d635
Author: Claudiu Zissulescu <claziss@gmail.com>
Date:   Tue Mar 31 13:04:24 2020 +0300

    arc: Allow more ABIs in GLIBC_DYNAMIC_LINKER
    
    Enable big-endian suffixed dynamic linker per glibc multi-abi support.
    
    And to avoid a future churn and version pairingi hassles, also allow
    arc700 although glibc for ARC currently doesn't support it.
    
    gcc/
    xxxx-xx-xx  Vineet Gupta <vgupta@synopsys.com>
    
           * config/arc/linux.h: GLIBC_DYNAMIC_LINKER support BE/arc700

commit ffd2a2014d0f53a6d8696d9afbc1a202b70ab31e
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Apr 10 00:17:33 2020 +0000

    Daily bump.

commit 892c755eae2e2e45547395013695fdd819c297fa
Author: Michael Meissner <meissner@gcc.gnu.org>
Date:   Thu Apr 9 12:25:05 2020 -0500

    Backport PR target/93932 (variable vec_extract) to GCC 9
    
    2020-04-09  Michael Meissner  <meissner@linux.ibm.com>
    
            Back port from trunk
            2020-02-26  Michael Meissner  <meissner@linux.ibm.com>
    
            PR target/93932
            * config/rs6000/vsx.md (vsx_extract_<mode>_var, VSX_D iterator):
            Split the insn into two parts.  This insn only does variable
            extract from a register.
            (vsx_extract_<mode>_var_load, VSX_D iterator): New insn, do
            variable extract from memory.
            (vsx_extract_v4sf_var): Split the insn into two parts.  This insn
            only does variable extract from a register.
            (vsx_extract_v4sf_var_load): New insn, do variable extract from
            memory.
            (vsx_extract_<mode>_var, VSX_EXTRACT_I iterator): Split the insn
            into two parts.  This insn only does variable extract from a
            register.
            (vsx_extract_<mode>_var_load, VSX_EXTRACT_I iterator): New insn,
            do variable extract from memory.

commit f1a6a1e588e9bca5396d4dd165d55907ba95fbe6
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Apr 9 00:17:27 2020 +0000

    Daily bump.

commit 1a2a0af530cacca88bd65bf55d512aed03646f76
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Apr 8 00:17:30 2020 +0000

    Daily bump.

commit 9a385bd124dc0272f1ea028f4e2e8026d6ea989b
Author: Will Schmidt <will_schmidt@vnet.ibm.com>
Date:   Tue Apr 7 16:07:03 2020 -0500

    rs6000 pragma fix backport from mainline to gcc-9
    
    2020-04-07  Will Schmidt  <will_schmidt@vnet.ibm.com>
    
    Backport from mainline.
        2020-03-23  Will Schmidt  <will_schmidt@vnet.ibm.com>
    
        * config/rs6000/rs6000-call.c altivec_init_builtins(): Remove
        code to skip defining builtins based on builtin_mask.
    
        * gcc.target/powerpc/pragma_power6.c: New.
        * gcc.target/powerpc/pragma_power7.c: New.
        * gcc.target/powerpc/pragma_power8.c: New.
        * gcc.target/powerpc/pragma_power9.c: New.
        * gcc.target/powerpc/pragma_misc9.c: New.
        * gcc.target/powerpc/vsu/pragma_misc9.c: New.
        * gcc.target/powerpc/vsu/vec-all-nez-7.c: Update.
        * gcc.target/powerpc/vsu/vec-any-eqz-7.c: Update.

commit 14192f1ed48cb3982b1b3c794e0f313835d0cdcd
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Apr 7 14:39:24 2020 +0200

    i386: Fix V{64QI,32HI}mode constant permutations [PR94509]
    
    The following testcases are miscompiled, because expand_vec_perm_pshufb
    incorrectly thinks it can use vpshufb instruction for the permutations
    when it can't.
    The
              if (vmode == V32QImode)
                {
                  /* vpshufb only works intra lanes, it is not
                     possible to shuffle bytes in between the lanes.  */
                  for (i = 0; i < nelt; ++i)
                    if ((d->perm[i] ^ i) & (nelt / 2))
                      return false;
                }
    intra-lane check which is correct has been copied and adjusted for 64-byte
    modes into:
              if (vmode == V64QImode)
                {
                  /* vpshufb only works intra lanes, it is not
                     possible to shuffle bytes in between the lanes.  */
                  for (i = 0; i < nelt; ++i)
                    if ((d->perm[i] ^ i) & (nelt / 4))
                      return false;
                }
    which is not correct, because 64-byte modes have 4 lanes rather than just
    two and the above is only testing that the permutation grabs even lane elts
    from even lanes and odd lane elts from odd lanes, but not that they are
    from the same 256-bit half.
    
    The following patch fixes it by using 3 * nelt / 4 instead of nelt / 4,
    so we actually check the most significant 2 bits rather than just one.
    
    2020-04-07  Jakub Jelinek  <jakub@redhat.com>
    
            PR target/94509
            * config/i386/i386-expand.c (expand_vec_perm_pshufb): Fix the check
            for inter-lane permutation for 64-byte modes.
    
            * gcc.target/i386/avx512bw-pr94509-1.c: New test.
            * gcc.target/i386/avx512bw-pr94509-2.c: New test.

commit 0490cb0e6113783173f1b986211267fd03415346
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Apr 7 14:30:53 2020 +0200

    openmp: Fix parallel master error recovery [PR94512]
    
    We need to set OMP_PARALLEL_COMBINED only if the parsing of omp_master
    succeeded, because otherwise there is no nested master construct in the
    parallel.
    
    2020-04-07  Jakub Jelinek  <jakub@redhat.com>
    
            PR c++/94512
            * c-parser.c (c_parser_omp_parallel): Set OMP_PARALLEL_COMBINED
            if c_parser_omp_master succeeded.
    
            * parser.c (cp_parser_omp_parallel): Set OMP_PARALLEL_COMBINED
            if cp_parser_omp_master succeeded.
    
            * g++.dg/gomp/pr94512.C: New test.

commit 7f3ac38b3c765d49a46f65f1e5e9a812fb1da49c
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Apr 7 10:01:16 2020 +0200

    aarch64: Fix {ash[lr],lshr}<mode>3 expanders [PR94488]
    
    The following testcase ICEs on aarch64 apparently since the introduction of
    the aarch64 port.  The reason is that the {ashl,ashr,lshr}<mode>3 expanders
    completely unnecessarily FAIL; if operands[2] is something other than
    a CONST_INT or REG or MEM and the middle-end code can't cope with the
    pattern giving up in these cases.  All the expanders use general_operand
    predicate for the shift amount operand, but then have just a special case
    for CONST_INT (if in-bound, emit an immediate shift, otherwise force into
    REG), or MEM (force into REG), or REG (that is the case it handles).
    In the testcase, operands[2] is a lowpart SUBREG of a REG, which is valid
    general_operand.
    I don't see any reason what is magic about MEMs that it should be forced
    into REG and others like SUBREGs that it shouldn't, there isn't even a
    reason to check for !REG_P because force_reg will do nothing if the operand
    is already a REG, and otherwise can handle general_operand just fine.
    
    2020-04-07  Jakub Jelinek  <jakub@redhat.com>
    
            PR target/94488
            * config/aarch64/aarch64-simd.md (ashl<mode>3, lshr<mode>3,
            ashr<mode>3): Force operands[2] into reg whenever it is not CONST_INT.
            Assume it is a REG after that instead of testing it and doing FAIL
            otherwise.  Formatting fix.
    
            * gcc.c-torture/compile/pr94488.c: New test.

commit b5039b7259e64a92f5c077fe4d023556d6b12550
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Apr 7 21:01:40 2020 +0200

    debug: Improve debug info of c++14 deduced return type [PR94459]
    
    On the following testcase, in gdb ptype S<long>::m1 prints long as return
    type, but all the other methods show void instead.
    PR53756 added code to add_type_attribute if the return type is
    auto/decltype(auto), but we actually should look through references,
    pointers and qualifiers.
    Haven't included there DW_TAG_atomic_type, because I think at least ATM
    one can't use that in C++.  Not sure about DW_TAG_array_type or what else
    could be deduced.
    
    > http://eel.is/c++draft/dcl.spec.auto#3 says it has to appear as a
    > decl-specifier.
    >
    > http://eel.is/c++draft/temp.deduct.type#8 lists the forms where a template
    > argument can be deduced.
    >
    > Looks like you are missing arrays, pointers to members, and function return
    > types.
    
    2020-04-04  Hannes Domani  <ssbssa@yahoo.de>
                Jakub Jelinek  <jakub@redhat.com>
    
            PR debug/94459
            * dwarf2out.c (gen_subprogram_die): Look through references, pointers,
            arrays, pointer-to-members, function types and qualifiers when
            checking if in-class DIE had an 'auto' or 'decltype(auto)' return type
            to emit type again on definition.
    
            * g++.dg/debug/pr94459.C: New test.
    
    Co-Authored-By: Hannes Domani <ssbssa@yahoo.de>

commit d1371dbe12214895cda0b13bfc6ff0ed9cbce15d
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Sat Apr 4 00:35:41 2020 +0200

    openmp: Fix ICE on #pragma omp parallel master in template [PR94477]
    
    The following testcase ICEs, because for parallel combined with some
    other construct we initialize the omp_parallel_combined_clauses pointer
    and expect the construct combined with it to clear it after it no longer
    needs it, but OMP_MASTER didn't do that.
    
    2020-04-04  Jakub Jelinek  <jakub@redhat.com>
    
            PR c++/94477
            * pt.c (tsubst_expr) <case OMP_MASTER>: Clear
            omp_parallel_combined_clauses.
    
            * g++.dg/gomp/pr94477.C: New test.

commit dbff1829843180dc2a6c8ce5ce7883146b5cf083
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Fri Apr 3 19:44:42 2020 +0200

    i386: Fix vph{add,subs?}[wd] 256-bit AVX2 RTL patterns [PR94460]
    
    The following testcase is miscompiled, because the AVX2 patterns don't
    describe correctly what the insn does.  E.g. vphaddd with %ymm* operands
    (the second pattern) instruction as per:
    https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm256_hadd_epi32&expand=2941
    does { a0+a1, a2+a3, b0+b1, b2+b3, a4+a5, a6+a7, b4+b5, b6+b7 }
    but our RTL pattern did
         { a0+a1, a2+a3, a4+a5, a6+a7, b0+b1, b2+b3, b4+b5, b6+b7 }
    where the first and last 64 bits are the same and two middle 64 bits
    swapped.
    https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm256_hadd_epi16&expand=2939
    similarly, insn does:
         { a0+a1, a2+a3, a4+a5, a6+a7, b0+b1, b2+b3, b4+b5, b6+b7,
           a8+a9, a10+a11, a12+a13, a14+a15, b8+b9, b10+b11, b12+b13, b14+b15 }
    but RTL pattern did
         { a0+a1, a2+a3, a4+a5, a6+a7, a8+a9, a10+a11, a12+a13, a14+a15,
           b0+b1, b2+b3, b4+b5, b6+b7, b8+b9, b10+b11, b12+b13, b14+b15 }
    again, first and last 64 bits are the same and the two middle 64 bits
    swapped.
    
    2020-04-03  Jakub Jelinek  <jakub@redhat.com>
    
            PR target/94460
            * config/i386/sse.md (avx2_ph<plusminus_mnemonic>wv16hi3,
            avx2_ph<plusminus_mnemonic>dv8si3): Fix up RTL pattern to do
            second half of first lane from first lane of second operand and
            first half of second lane from second lane of first operand.
    
            * gcc.target/i386/avx2-pr94460.c: New test.

commit 4486a537f14bc3b05ac552c3cbe18e540e397ed7
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Apr 7 21:01:06 2020 +0200

    objsz: Don't call replace_uses_by on SSA_NAME_OCCURS_IN_ABNORMAL_PHI [PR94423]
    
    The following testcase ICEs because the objsz pass calls replace_uses_by
    on SSA_NAME_OCCURS_IN_ABNORMAL_PHI SSA_NAME.  The following patch instead
    of that calls replace_call_with_value, which will turn it into
      xyz_123(ab) = 234;
    
    2020-04-01  Jakub Jelinek  <jakub@redhat.com>
    
            PR middle-end/94423
            * tree-object-size.c (pass_object_sizes::execute): Don't call
            replace_uses_by for SSA_NAME_OCCURS_IN_ABNORMAL_PHI lhs, instead
            call replace_call_with_value.
    
            * gcc.dg/ubsan/pr94423.c: New test.

commit 8f99f9e6ccec167a5ba67dcc08e6c14948595b82
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Mar 31 11:06:43 2020 +0200

    fold-const: Fix division folding with vector operands [PR94412]
    
    The following testcase is miscompiled since 4.9, we treat unsigned
    vector types as if they were signed and "optimize" negations across it.
    
    2020-03-31  Marc Glisse  <marc.glisse@inria.fr>
                Jakub Jelinek  <jakub@redhat.com>
    
            PR middle-end/94412
            * fold-const.c (fold_binary_loc) <case TRUNC_DIV_EXPR>: Use
            ANY_INTEGRAL_TYPE_P instead of INTEGRAL_TYPE_P.
    
            * gcc.c-torture/execute/pr94412.c: New test.
    
    Co-authored-by: Marc Glisse <marc.glisse@inria.fr>

commit a6bf0e5fb11cc0e231ac016a1995caaa93fdc4a0
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Mon Mar 30 22:55:36 2020 +0200

    c++: Fix handling of internal fn calls in statement expressions [PR94385]
    
    The following testcase ICEs, because the FE when processing the statement
    expression changes the .VEC_CONVERT internal fn CALL_EXPR into .PHI call.
    That is because the internal fn call is recorded in the base.u.ifn
    field, which overlaps base.u.bits.lang_flag_1 which is used for
    STMT_IS_FULL_EXPR_P, so this essentially does ifn |= 2 on little-endian.
    STMT_IS_FULL_EXPR_P bit is used in:
    cp-gimplify.c-  if (STATEMENT_CODE_P (code))
    cp-gimplify.c-    {
    cp-gimplify.c-      saved_stmts_are_full_exprs_p = stmts_are_full_exprs_p ();
    cp-gimplify.c-      current_stmt_tree ()->stmts_are_full_exprs_p
    cp-gimplify.c:        = STMT_IS_FULL_EXPR_P (*expr_p);
    cp-gimplify.c-    }
    and
    pt.c-  if (STATEMENT_CODE_P (TREE_CODE (t)))
    pt.c:    current_stmt_tree ()->stmts_are_full_exprs_p = STMT_IS_FULL_EXPR_P (t);
    so besides being wrong on some other codes, it actually isn't beneficial at
    all to set it on anything else, so the following patch restricts it to
    trees with STATEMENT_CODE_P TREE_CODE.
    
    2020-03-30  Jakub Jelinek  <jakub@redhat.com>
    
            PR c++/94385
            * semantics.c (add_stmt): Only set STMT_IS_FULL_EXPR_P on trees with
            STATEMENT_CODE_P code.
    
            * c-c++-common/pr94385.c: New test.

commit 57e276f3e304ef92483763ee1028e5b3e1345e0f
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Apr 7 21:00:28 2020 +0200

    Fix vextract* masked patterns [PR93069]
    
    The AVX512F documentation clearly states that in instructions where the
    destination is a memory only merging-masking is possible, not zero-masking,
    and the assembler enforces that.
    
    The testcase in this patch fails to assemble because of
    Error: unsupported masking for `vextracti32x8'
    on
            vextracti32x8   $0x0, %zmm1, -64(%rsp){%k1}{z}
    For the vector extraction patterns, we apparently have 7 *_maskm patterns
    that only accept memory destinations and rtx_equal_p merge-masking source
    for it, 7 *<mask_name> corresponding patterns that allow memory destination
    only for the non-masked cases (through <store_mask_constraint>), then 2
    *<mask_name> patterns (lo ssehalf V16FI and lo ssehalf VI8F_256 ones) which
    do allow memory destination even for masked cases and are the cause of the
    testsuite failure, because we must not allow C constraint if the destination
    is m, and finally one pair of patterns (separate * and *_mask, hi ssehalf
    VI4F_256), which has another issue (for which I don't have a testcase
    though), where if it would match zero-masking with register destination,
    it wouldn't emit the needed {z} into assembly.
    The attached patch fixes those 3 issues only, perhaps more suitable for
    backporting.
    
    2020-03-30  Jakub Jelinek  <jakub@redhat.com>
    
            PR target/93069
            * config/i386/sse.md (vec_extract_lo_<mode><mask_name>): Use
            <store_mask_constraint> instead of m in output operand constraint.
            (vec_extract_hi_<mode><mask_name>): Use <mask_operand2> instead of
            %{%3%}.
    
            * gcc.target/i386/avx512vl-pr93069.c: New test.
            * gcc.dg/vect/pr93069.c: New test.

commit aa9c08ef97f4df1ebb1fc8d72f2e7f9f8c1045c2
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Sat Mar 28 10:21:52 2020 +0100

    reassoc: Fix -fcompare-debug bug in reassociate_bb [PR94329]
    
    The following testcase FAILs with -fcompare-debug, because reassociate_bb
    mishandles the case when the last stmt in a bb has zero uses.  In that case
    reassoc_remove_stmt (like gsi_remove) moves the iterator to the next stmt,
    i.e. gsi_end_p is true, which means the code sets the iterator back to
    gsi_last_bb.  The problem is that the for loop does gsi_prev on that before
    handling the next statement, which means the former penultimate stmt, now
    last one, is not processed by reassociate_bb.
    Now, with -g, if there is at least one debug stmt at the end of the bb,
    reassoc_remove_stmt moves the iterator to that following debug stmt and we
    just do gsi_prev and continue with the former penultimate non-debug stmt,
    now last non-debug stmt.
    
    The following patch fixes that by not doing the gsi_prev in this case; there
    are too many continue; cases, so I didn't want to copy over the gsi_prev to
    all of them, so this patch uses a bool for that instead.  The second
    gsi_end_p check isn't needed anymore, because when we don't do the
    undesirable gsi_prev after gsi = gsi_last_bb, the loop !gsi_end_p (gsi)
    condition will catch the removal of the very last stmt from a bb.
    
    2020-03-28  Jakub Jelinek  <jakub@redhat.com>
    
            PR tree-optimization/94329
            * tree-ssa-reassoc.c (reassociate_bb): When calling reassoc_remove_stmt
            on the last stmt in a bb, make sure gsi_prev isn't done immediately
            after gsi_last_bb.
    
            * gfortran.dg/pr94329.f90: New test.

commit 56407bab53a514ffcd6ac011965cebdc5eb3ef54
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Apr 7 20:59:37 2020 +0200

    varasm: Fix output_constructor where a RANGE_EXPR index needs to skip some elts [PR94303]
    
    The following testcase is miscompiled, because output_constructor doesn't
    output the initializer correctly.  The FE creates {[1...2] = 9} in this
    case, and we emit .long 9; long 9; .zero 8 instead of the expected
    .zero 8; .long 9; .long 9.  If the CONSTRUCTOR is {[1] = 9, [2] = 9},
    output_constructor_regular_field has code to notice that the current
    location (local->total_bytes) is smaller than the location we want to write
    to (1*sizeof(elt)) and will call assemble_zeros to skip those.  But
    RANGE_EXPRs are handled by a different function which didn't do this,
    so for RANGE_EXPRs we emitted them properly only if local->total_bytes
    was always equal to the location where the RANGE_EXPR needs to start.
    
    2020-03-25  Jakub Jelinek  <jakub@redhat.com>
    
            PR middle-end/94303
            * varasm.c (output_constructor_array_range): If local->index
            RANGE_EXPR doesn't start at the current location in the constructor,
            skip needed number of bytes using assemble_zeros or assert we don't
            go backwards.
    
            PR middle-end/94303
            * g++.dg/torture/pr94303.C: New test.

commit 8ea7970c4968517fb73f42bcca40d316adacf215
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Wed Mar 25 08:08:04 2020 +0100

    if-conv: Delete dead stmts backwards in ifcvt_local_dce [PR94283]
    
    > > This patch caused:
    > >
    > > gcc /home/marxin/Programming/gcc/gcc/testsuite/gcc.c-torture/compile/990625-2.c -O3 -g -fno-tree-dce -c
    > > during GIMPLE pass: ifcvt
    > > /home/marxin/Programming/gcc/gcc/testsuite/gcc.c-torture/compile/990625-2.c: In function ‘broken030599’:
    > > /home/marxin/Programming/gcc/gcc/testsuite/gcc.c-torture/compile/990625-2.c:2:1: internal compiler error: Segmentation fault
    >
    > Likely
    >
    >   /* Delete dead statements.  */
    >   gsi = gsi_start_bb (bb);
    >   while (!gsi_end_p (gsi))
    >     {
    >
    > needs to instead work back-to-front for debug stmt adjustment to work
    
    Indeed, that seems to work.
    
    2020-03-25  Richard Biener  <rguenther@suse.de>
                Jakub Jelinek  <jakub@redhat.com>
    
            PR debug/94283
            * tree-if-conv.c (ifcvt_local_dce): Delete dead statements backwards.
    
            * gcc.dg/pr94283.c: New test.
    
    Co-authored-by: Richard Biener <rguenther@suse.de>

commit 4dcfd4e56b0d22af12750372f3e0b49249b1d473
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Apr 7 20:57:37 2020 +0200

    if-conv: Fix -fcompare-debug bugs in ifcvt_local_dce [PR94283]
    
    The following testcase shows -fcompare-debug bugs in ifcvt_local_dce,
    where the decisions what statements are needed is based also on debug stmt
    operands, which is wrong.
    So, this patch makes sure to never add debug stmt to the worklist, or never
    add an assign to worklist just because it is used in a debug stmt in another
    bb.
    
    2020-03-24  Jakub Jelinek  <jakub@redhat.com>
    
            PR debug/94283
            * tree-if-conv.c (ifcvt_local_dce): For gimple debug stmts, just set
            GF_PLF_2, but don't add them to worklist.  Don't add an assigment to
            worklist or set GF_PLF_2 just because it is used in a debug stmt in
            another bb.  Formatting improvements.
    
            * gcc.target/i386/pr94283.c: New test.

commit 4ac9ab60f06020a24e851ebe3eeacc1b3bffa849
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Mar 24 09:33:17 2020 +0100

    cgraphunit: Avoid code generation differences based on -w/TREE_NO_WARNING [PR94277]
    
    The following testcase FAILs with -fcompare-debug, but not because -g vs.
    -g0 would make a difference, but because the second compilation is done with
    -w in order not to emit warnings twice and -w seems to affect the *.gkd dump
    content.
    This is because TREE_NO_WARNING flag, or warn_unused_function does affect
    not just whether a warning/pedwarn is printed, but also whether we set
    TREE_PUBLIC on such decls.
    The following patch makes sure we set it regardless of anything warning
    related (TREE_NO_WARNING or warn_unused_function).
    
    2020-03-24  Jakub Jelinek  <jakub@redhat.com>
    
            PR debug/94277
            * cgraphunit.c (check_global_declaration): For DECL_EXTERNAL and
            non-TREE_PUBLIC non-DECL_ARTIFICIAL FUNCTION_DECLs, set TREE_PUBLIC
            regardless of whether TREE_NO_WARNING is set on it or whether
            warn_unused_function is true or not.
    
            * gcc.dg/pr94277.c: New test.

commit f83c2d2991a762f729741a409a1ac7871733ee40
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Mon Mar 23 19:44:58 2020 +0100

    c: Fix up cfun->function_end_locus on invalid function bodies [PR94239]
    
    Unfortunately the patch broke
    +FAIL: gcc.dg/pr20245-1.c (internal compiler error)
    +FAIL: gcc.dg/pr20245-1.c (test for excess errors)
    +FAIL: gcc.dg/pr28419.c (internal compiler error)
    +FAIL: gcc.dg/pr28419.c (test for excess errors)
    on some targets (and under valgrind on the rest of them).
    
    Those functions don't have the opening { and so c_parser_compound_statement
    returned error_mark_node before initializing *endlocp.
    So, either we can initialize it in that case too:
    --- gcc/c/c-parser.c    2020-03-20 22:09:39.659411721 +0100
    +++ gcc/c/c-parser.c    2020-03-21 09:36:44.455705261 +0100
    @@ -5611,6 +5611,8 @@ c_parser_compound_statement (c_parser *p
             if we have just prepared to enter a function body.  */
           stmt = c_begin_compound_stmt (true);
           c_end_compound_stmt (brace_loc, stmt, true);
    +      if (endlocp)
    +       *endlocp = brace_loc;
           return error_mark_node;
         }
       stmt = c_begin_compound_stmt (true);
    or perhaps simpler initialize it to the function_start_locus at the
    beginning and have those functions without { have function_start_locus ==
    function_end_locus like the __GIMPLE functions (where propagating the
    closing } seemed too difficult).
    
    2020-03-23  Jakub Jelinek  <jakub@redhat.com>
    
            PR gcov-profile/94029
            PR c/94239
            * c-parser.c (c_parser_declaration_or_fndef): Initialize endloc to
            the function_start_locus location.  Don't do that afterwards for the
            __GIMPLE body parsing.

commit 827e5af19a214323c70ee5879dc8f14f4f44ad8d
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Mar 19 22:56:20 2020 +0100

    c: Fix up cfun->function_end_locus from the C FE [PR94029]
    
    On the following testcase we ICE because while
          DECL_STRUCT_FUNCTION (current_function_decl)->function_start_locus
            = c_parser_peek_token (parser)->location;
    and similarly DECL_SOURCE_LOCATION (fndecl) is set from some token's
    location, the end is set as:
      /* Store the end of the function, so that we get good line number
         info for the epilogue.  */
      cfun->function_end_locus = input_location;
    and the thing is that input_location is only very rarely set in the C FE
    (the primary spot that changes it is the cb_line_change/fe_file_change).
    Which means, e.g. for pretty much all C functions that are on a single line,
    function_start_locus column is > than function_end_locus column, and the
    testcase even has smaller line in function_end_locus because cb_line_change
    isn't performed while parsing multi-line arguments of a function-like macro.
    
    Attached are two possible fixes to achieve what the C++ FE does, in
    particular that cfun->function_end_locus is the locus of the closing } of
    the function.  The first one updates input_location when we see a closing }
    of a compound statement (though any, not just the function body) and thus
    input_location in the finish_function call is what we need.
    The second instead propagates the location_t from the parsing of the
    outermost compound statement (the function body) to finish_function.
    The second one is this version.
    
    2020-03-19  Jakub Jelinek  <jakub@redhat.com>
    
            PR gcov-profile/94029
            * c-tree.h (finish_function): Add location_t argument defaulted to
            input_location.
            * c-parser.c (c_parser_compound_statement): Add endlocp argument and
            set it to the locus of closing } if non-NULL.
            (c_parser_compound_statement_nostart): Return locus of closing }.
            (c_parser_parse_rtl_body): Likewise.
            (c_parser_declaration_or_fndef): Propagate locus of closing } to
            finish_function.
            * c-decl.c (finish_function): Add end_loc argument, use it instead of
            input_location to set function_end_locus.
    
            * gcc.misc-tests/gcov-pr94029.c: New test.

commit 484206967f958fc47827a71654fe52a98adc95cb
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Mar 19 12:22:47 2020 +0100

    c++: Fix up handling of captured vars in lambdas in OpenMP clauses [PR93931]
    
    Without the parser.c change we were ICEing on the testcase, because while the
    uses of the captured vars inside of the constructs were replaced with capture
    proxy decls, we didn't do that for decls in OpenMP clauses.
    
    With that fixed, we don't ICE anymore, but the testcase is miscompiled and FAILs
    at runtime.  This is because the capture proxy decls have DECL_VALUE_EXPR and
    during gimplification we were gimplifying those to their DECL_VALUE_EXPRs.
    That is fine for shared vars, but for privatized ones we must not do that.
    So that is what the cp-gimplify.c changes do.  Had to add a DECL_CONTEXT check
    before calling is_capture_proxy because some VAR_DECLs don't have DECL_CONTEXT
    set (yet) and is_capture_proxy relies on that being non-NULL always.
    
    2020-03-19  Jakub Jelinek  <jakub@redhat.com>
    
            PR c++/93931
            * parser.c (cp_parser_omp_var_list_no_open): Call process_outer_var_ref
            on outer_automatic_var_p decls.
            * cp-gimplify.c (cxx_omp_disregard_value_expr): Return true also for
            capture proxy decls.
    
            * testsuite/libgomp.c++/pr93931.C: New test.

commit 8db876e9c045c57d2dc5bd08a6e250f822efaad0
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Mar 19 10:24:16 2020 +0100

    phiopt: Avoid -fcompare-debug bug in phiopt [PR94211]
    
    Two years ago, I've added support for up to 2 simple preparation statements
    in value_replacement, but the
    -      && estimate_num_insns (assign, &eni_time_weights)
    +      && estimate_num_insns (bb_seq (middle_bb), &eni_time_weights)
    change, meant that we compute the cost of all those statements rather than
    just the single assign that has been the single supported non-debug
    statement in the bb before, doesn't do what I thought would do, gimple_seq
    is just gimple * and thus it can't be really overloaded depending on whether
    we pass a single gimple * or a whole sequence.  Which means in the last
    two years it doesn't count all the statements, but only the first one.
    With -g that happens to be a DEBUG_STMT, or it could be e.g. the first
    preparation statement which could be much cheaper than the actual assign.
    
    2020-03-19  Jakub Jelinek  <jakub@redhat.com>
    
            PR tree-optimization/94211
            * tree-ssa-phiopt.c (value_replacement): Use estimate_num_insns_seq
            instead of estimate_num_insns for bb_seq (middle_bb).  Rename
            emtpy_or_with_defined_p variable to empty_or_with_defined_p, adjust
            all uses.
    
            * gcc.dg/pr94211.c: New test.

commit 87ce34fa00cd6b87452d747235da40dfe5b6e00f
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Mar 17 22:32:34 2020 +0100

    c: Handle C_TYPE_INCOMPLETE_VARS even for ENUMERAL_TYPEs [PR94172]
    
    The following testcases ICE, because they contain extern variable
    declarations with incomplete enum types that is later completed and after
    that those variables are accessed.  The ICEs are because the vars then may have
    incorrect DECL_MODE etc., e.g. in the first case the var has SImode
    DECL_MODE (the guessed mode for the enum), but the enum then actually has
    DImode because its enumerators don't fit into unsigned int.
    
    The following patch fixes it by using C_TYPE_INCOMPLETE_VARS not just on
    incomplete struct/union types, but also incomplete enum types.
    TYPE_VFIELD can't be used as it is TYPE_MIN_VALUE on ENUMERAL_TYPE,
    thankfully TYPE_LANG_SLOT_1 has been used in the C FE only on
    FUNCTION_TYPEs.
    
    2020-03-17  Jakub Jelinek  <jakub@redhat.com>
    
            PR c/94172
            * c-tree.h (C_TYPE_INCOMPLETE_VARS): Define to TYPE_LANG_SLOT_1
            instead of TYPE_VFIELD, and support it on {RECORD,UNION,ENUMERAL}_TYPE.
            (TYPE_ACTUAL_ARG_TYPES): Check that it is only used on FUNCTION_TYPEs.
            * c-decl.c (pushdecl): Push C_TYPE_INCOMPLETE_VARS also to
            ENUMERAL_TYPEs.
            (finish_incomplete_vars): New function, moved from finish_struct.  Use
            relayout_decl instead of layout_decl.
            (finish_struct): Remove obsolete comment about C_TYPE_INCOMPLETE_VARS
            being TYPE_VFIELD.  Use finish_incomplete_vars.
            (finish_enum): Clear C_TYPE_INCOMPLETE_VARS.  Call
            finish_incomplete_vars.
            * c-typeck.c (c_build_qualified_type): Clear C_TYPE_INCOMPLETE_VARS
            also on ENUMERAL_TYPEs.
    
            * gcc.dg/pr94172-1.c: New test.
            * gcc.dg/pr94172-2.c: New test.

commit 980a7a0be5a114e285c49ab05ac70881e4f27fc3
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Mar 17 21:21:16 2020 +0100

    c++: Fix parsing of invalid enum specifiers [PR90995]
    
    The testcase shows some accepts-invalid (the ones without alignas) and
    ice-on-invalid-code (the ones with alignas) cases.
    If the enum doesn't have an underlying type and is not a definition,
    the caller retries to parse it as elaborated type specifier.
    E.g. for enum struct S s it will then pedwarn that elaborated type specifier
    shouldn't have the struct/class keywords.
    The problem is if the enum specifier is not followed by { when it has
    underlying type.  In that case we have already called
    cp_parser_parse_definitely to end the tentative parsing started at the
    beginning of cp_parser_enum_specifier.  But the
    cp_parser_error (parser, "expected %<;%> or %<{%>");
    doesn't emit any error because the whole function is called from yet another
    tentative parse and the caller starts parsing the elaborated type
    specifier where the cp_parser_enum_specifier stopped (i.e. after the
    underlying type token(s)).  The ultimate caller than commits the tentative
    parsing (and even if it wouldn't, it wouldn't know what kind of error
    to report).  I think after seeing enum {,struct,class} : type not being
    followed by { or ;, there is no reason not to report it right away, as it
    can't be valid C++, which is what the patch does.  Not sure if we shouldn't
    also return error_mark_node instead of NULL_TREE, so that the caller doesn't
    try to parse it as elaborated type specifier (the patch doesn't do that
    right now).
    
    Furthermore, while reading the code, I've noticed that
    parser->colon_corrects_to_scope_p is saved and set to false at the start
    of the function, but not restored back in some cases.  Don't have a testcase
    where this would be a problem, but it just seems wrong.  Either we can in
    the two spots replace return NULL_TREE; with { type = NULL_TREE; goto out; }
    or we could perhaps abuse warning_sentinel or create a special class with
    dtor to clean the flag up.
    
    And lastly, I've fixed some formatting issues in the function while reading
    it.
    
    2020-03-17  Jakub Jelinek  <jakub@redhat.com>
    
            PR c++/90995
            * parser.c (cp_parser_enum_specifier): Use temp_override for
            parser->colon_corrects_to_scope_p, replace goto out with return.
            If scoped enum or enum with underlying type is not followed by
            { or ;, call cp_parser_commit_to_tentative_parse before calling
            cp_parser_error and make sure to return error_mark_node instead of
            NULL_TREE.  Formatting fixes.
    
            * g++.dg/cpp0x/enum40.C: New test.

commit 470626394ab7779cb663258048da821a502a1e82
Author: Kyrylo Tkachov <kyrylo.tkachov@arm.com>
Date:   Tue Apr 7 18:10:02 2020 +0100

    [AArch64] PR target/94518: Fix memmodel index in aarch64_store_exclusive_pair
    
    2020-04-07  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>
    
            PR target/94518
            2019-09-23  Richard Sandiford  <richard.sandiford@arm.com>
    
            * config/aarch64/atomics.md (aarch64_store_exclusive_pair): Fix
            memmodel index.

commit e926d076f28a91f3ea30bd0bcfa1f25958fdb59e
Author: Iain Buclaw <ibuclaw@gdcproject.org>
Date:   Tue Apr 7 18:02:47 2020 +0200

    d: Fix ICE in add_symbol_to_partition_1, at lto/lto-partition.c:215
    
    This patch addresses two problems with TypeInfo initializer generation.
    
    1. D array fields pointing to compiler generated data are referencing
    public symbols with no unique prefix, which can lead to duplicate
    definition errors in some hard to reduce cases.  To avoid name clashes,
    all symbols that are generated for TypeInfo initializers now use the
    assembler name of the TypeInfo decl as a prefix.
    
    2. An ICE would occur during LTO pass because these same decls are
    considered to be part of the same comdat group as the TypeInfo decl that
    it's referred by, despite itself being neither marked public nor comdat.
    This resulted in decls being added to the LTRANS partition out of order,
    triggering an assert when add_symbol_to_partition_1 attempted to add
    them again.  To remedy, TREE_PUBLIC and DECL_COMDAT are now set on all
    generated symbols.
    
    gcc/d/ChangeLog:
    
            PR d/94240
            * typeinfo.cc (class TypeInfoVisitor): Replace type_ field with decl_.
            (TypeInfoVisitor::TypeInfoVisitor): Set decl_.
            (TypeInfoVisitor::result): Update.
            (TypeInfoVisitor::internal_reference): New function.
            (TypeInfoVisitor::layout_string): Use internal_reference.
            (TypeInfoVisitor::visit (TypeInfoTupleDeclaration *)): Likewise.
            (layout_typeinfo): Construct TypeInfoVisitor with typeinfo decl.
            (layout_classinfo): Likewise.

commit 1168240fbe41ee509795a67d5b9107f233d17df9
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Apr 7 08:27:49 2020 +0200

    i386: Fix emit_reduc_half on V{64Q,32H}Imode [PR94500]
    
    The following testcase is miscompiled in 8.x, because emit_reduc_half is
    prepared to handle for 512-bit modes only i equal to 512, 256, 128 and 64.
    V32HImode also needs i equal to 32 and V64QImode i equal to 32 and 16,
    but emit_reduc_half in that case performs a redundant permutation exactly
    like i == 32.  In 9+ the testcase works because Richard in r9-3393
    changed the reduc_* expanders so that they actually don't call
    ix86_expand_reduc on 512-bit modes, but only 128-bit ones.
    
    The patch fixes emit_reduc_half to handle also i of 32 and 16 similarly to
    how V32QImode/V16HImode are handled for AVX2.  I think it shouldn't hurt
    to fix the function even on the trunk and 9 branch even when nothing uses
    it ATM.
    
    2020-04-07  Jakub Jelinek  <jakub@redhat.com>
    
            PR target/94500
            * config/i386/i386.c (emit_reduc_half): For V{64QI,32HI}mode
            handle i < 64 using avx512bw_lshrv4ti3.  Formatting fixes.
    
            * gcc.target/i386/avx512bw-pr94500.c: New test.

commit af1c291f509d8411bf85f06a27008be213c17f9d
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Apr 7 00:17:30 2020 +0000

    Daily bump.

commit 83c9ff0291e88d5940ec0962f386b57705ede648
Author: Fritz Reese <foreese@gcc.gnu.org>
Date:   Mon Apr 6 16:14:29 2020 -0400

    Fix fortran/93686 -- ICE matching data statements with derived-type pointers.
    
    gcc/fortran/ChangeLog:
    
    2020-04-06  Fritz Reese  <foreese@gcc.gnu.org>
    
            Backport from master
            Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/93686
            * decl.c (gfc_match_data): Handle data matching for derived type
            pointers.
    
    gcc/testsuite/ChangeLog:
    
    2020-04-06  Fritz Reese  <foreese@gcc.gnu.org>
    
            Backport from master.
            Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/93686
            * gfortran.dg/pr93686_1.f90: New test.
            * gfortran.dg/pr93686_2.f90: Likewise.
            * gfortran.dg/pr93686_3.f90: Likewise.
            * gfortran.dg/pr93686_4.f90: Likewise.

commit 6db837a5288ee3ca5ec504fbd5a765817e556ac2
Author: Marek Polacek <polacek@redhat.com>
Date:   Sun Apr 5 20:31:56 2020 -0400

    c++: Fix ICE with lambda in operator function [PR93597]
    
    If we are going to use get_first_fn let's make sure we operate on
    is_overloaded_fn, as the rest of the codebase does, and if lookup finds
    any class-scope declaration, return early too.
    
            PR c++/93597 - ICE with lambda in operator function.
            * name-lookup.c (maybe_save_operator_binding): Check is_overloaded_fn.
    
            * g++.dg/cpp0x/lambda/lambda-93597.C: New test.

commit e76564a81fede5c4b799b3d28ce27630695f0b8a
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Apr 6 00:17:27 2020 +0000

    Daily bump.

commit 1aa6d76d00248dc4afa876173219f31bba7c9e52
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Apr 5 00:17:25 2020 +0000

    Daily bump.

commit ab525ec30f0a80e7a4b5e4d00010d83145b87e8c
Author: Jason Merrill <jason@redhat.com>
Date:   Sat Apr 4 11:45:41 2020 -0400

    c++: Mangling of dependent conversions [PR91377]
    
    We skip over other conversion codes when mangling expressions, we should do
    the same with IMPLICIT_CONV_EXPR.
    
    gcc/cp/ChangeLog
    2020-04-04  Jason Merrill  <jason@redhat.com>
    
            PR c++/91377
            * mangle.c (write_expression): Skip IMPLICIT_CONV_EXPR.

commit 5ed8c71b53a5ac93c68179770cb047227b587bcb
Author: Jason Merrill <jason@redhat.com>
Date:   Sat Apr 4 11:04:55 2020 -0400

    c++: Fix reuse of class constants [PR94453]
    
    The testcase hit an ICE trying to expand a TARGET_EXPR temporary cached from
    the other lambda-expression.  This patch fixes this in two ways:
    
    1) Avoid reusing a TARGET_EXPR from another function.
    2) Avoid ending up with a TARGET_EXPR at all; the use of 'p' had become
    <TARGET_EXPR<NON_LVALUE_EXPR<TARGET_EXPR ...>>>, which doesn't make any
    sense.
    
    gcc/cp/ChangeLog
    2020-04-04  Jason Merrill  <jason@redhat.com>
    
            PR c++/94453
            * constexpr.c (maybe_constant_value): Use break_out_target_exprs.
            * expr.c (mark_use) [VIEW_CONVERT_EXPR]: Don't wrap a TARGET_EXPR in
            NON_LVALUE_EXPR.

commit 46fabc24d31868066f7c302cd73c4f3351c90bde
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Apr 4 00:17:26 2020 +0000

    Daily bump.

commit 70ae61692245b5002f32454c8447655ad65a8535
Author: Jason Merrill <jason@redhat.com>
Date:   Thu Apr 2 23:40:46 2020 -0400

    c++: alias template and parameter packs (PR91966).
    
    In this testcase, when we do a pack expansion of count_better_mins<nums>,
    nums appears both in the definition of count_better_mins and as its template
    argument.  The intent is that we get a expansion over pairs of elements of
    the pack, i.e. less<2,2>, less<2,7>, less<7,2>, ....  But if we substitute
    into the definition of count_better_mins when parsing the template, we end
    up with sum<less<nums,nums>...>, which never gives us less<2,7>.  We could
    deal with this by somehow marking up the use of 'nums' as an argument for
    'num', but it's simpler to mark the alias as complex, so we need to
    instantiate it later with all its arguments rather than replace it early
    with its expansion.
    
    gcc/cp/ChangeLog
    2020-04-03  Jason Merrill  <jason@redhat.com>
    
            PR c++/91966
            * pt.c (complex_pack_expansion_r): New.
            (complex_alias_template_p): Use it.

commit a1bb16994caed4dacf8c9ee1a33b177df140e9dc
Author: Martin Jambor <mjambor@suse.cz>
Date:   Fri Apr 3 20:32:44 2020 +0200

    gcc-9 sra: Cap number of sub-access propagations with a param (PR 93435)
    
    This is non-trivial but rather straightforward backport of
    29f23ed79b60949fc60f6fdbbd931bd58090b241 from master.  See
    https://gcc.gnu.org/pipermail/gcc-patches/2020-March/542390.html for
    more information.
    
    2020-04-02  Martin Jambor  <mjambor@suse.cz>
    
            PR tree-optimization/93435
            * params.def (PARAM_SRA_MAX_PROPAGATIONS): New parameter.
            * tree-sra.c (propagation_budget): New variable.
            (budget_for_propagation_access): New function.
            (propagate_subaccesses_across_link): Use it.
            (propagate_all_subaccesses): Set up and destroy propagation_budget.
            * doc/invoke.texi (sra-max-propagations): New.
    
            testsuite/
            * gcc.dg/tree-ssa/pr93435.c: New test.

commit b20b7f7e88fd40a76f422838ed5ba64e33814d91
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Fri Apr 3 12:00:07 2020 +0100

    libstdc++: Fix std::to_address for debug iterators (PR 93960)
    
    It should be valid to use std::to_address on a past-the-end iterator,
    but the debug mode iterators do a check for dereferenceable in their
    operator->(). That check is generally useful, so rather than remove it
    this changes std::__to_address to identify a debug mode iterator and
    use base().operator->() to skip the check.
    
    Backport from mainline
    2020-04-03  Jonathan Wakely  <jwakely@redhat.com>
    
            PR libstdc++/93960
            * include/bits/ptr_traits.h (__to_address): Add special case for debug
            iterators, to avoid dereferenceable check.
            * testsuite/20_util/to_address/1_neg.cc: Adjust dg-error line number.
            * testsuite/20_util/to_address/debug.cc: New test.

commit 69df6742cb4e15fba5ee074629a78811e61f044d
Author: Martin Liska <mliska@suse.cz>
Date:   Fri Apr 3 12:33:41 2020 +0200

    Backport 55a7380213a5c16120d5c674fb42b38a3d796b57
    
            Backport from mainline
            2020-04-03  Martin Liska  <mliska@suse.cz>
    
            PR ipa/94445
            * ipa-icf-gimple.c (func_checker::compare_gimple_call):
              Compare type attributes for gimple_call_fntypes.

commit 7fe7c950c32213f35bd074dca6d4ed54fa11c8a6
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Apr 3 00:17:27 2020 +0000

    Daily bump.

commit 86f7d3333bd055daee625c11f9252214ce4f96ac
Author: Fritz Reese <foreese@gcc.gnu.org>
Date:   Thu Apr 2 13:50:11 2020 -0400

    Fix fortran/85982 ICE in resolve_component.
    
    2020-04-02  Fritz Reese  <foreese@gcc.gnu.org>
    
            Backport from master.
            2020-04-02  Fritz Reese  <foreese@gcc.gnu.org>
    
            PR fortran/85982
            * fortran/decl.c (match_attr_spec): Lump COMP_STRUCTURE/COMP_MAP into
            attribute checking used by TYPE.
    
    2020-04-02  Fritz Reese  <foreese@gcc.gnu.org>
    
            Backport from master.
            2020-04-02  Fritz Reese  <foreese@gcc.gnu.org>
    
            PR fortran/85982
            * gfortran.dg/dec_structure_28.f90: New test.

commit 4b0b6303dde0c32d936926de45b54cfe508fa677
Author: Richard Biener <rguenther@suse.de>
Date:   Thu Mar 12 14:18:35 2020 +0100

    tree-optimization/94103 avoid CSE of loads with padding
    
    VN currently replaces a load of a 16 byte entity 128 bits of precision
    (TImode) with the result of a load of a 16 byte entity with 80 bits of
    mode precision (XFmode).  That will go downhill since if the padding
    bits are not actually filled with memory contents those bits are
    missing.
    
    2020-03-12  Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/94103
            * tree-ssa-sccvn.c (visit_reference_op_load): Avoid type
            punning when the mode precision is not sufficient.
    
            * gcc.target/i386/pr94103.c: New testcase.

commit 4b1087f8dc7505997dc475b554b5b86a06c78d69
Author: Richard Biener <rguenther@suse.de>
Date:   Wed Mar 18 13:11:30 2020 +0100

    middle-end/94206 fix memset folding to avoid types with padding
    
    This makes sure that the store a memset is folded to uses a type
    covering all bits.
    
    2020-03-18   Richard Biener  <rguenther@suse.de>
    
            PR middle-end/94206
            * gimple-fold.c (gimple_fold_builtin_memset): Avoid using
            partial int modes or not mode-precision integer types for
            the store.
    
            * gcc.dg/torture/pr94206.c: New testcase.

commit be64fc4cab7facee309447302b6ee7616dfe60b4
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Apr 2 12:54:47 2020 +0200

    aarch64: Fix ICE due to aarch64_gen_compare_reg_maybe_ze [PR94435]
    
    The following testcase ICEs, because aarch64_gen_compare_reg_maybe_ze emits
    invalid RTL.
    For y_mode [QH]Imode it expects y to be of that mode (or CONST_INT that fits
    into that mode) and x being SImode; for non-CONST_INT y it zero extends y
    into SImode and compares that against x, for CONST_INT y it zero extends y
    into SImode.  The problem is that when the zero extended constant isn't
    usable directly, it forces it into a REG, but with y_mode mode, and then
    compares against y.  That is wrong, because it should force it into a SImode
    REG and compare that way.
    
    2020-04-02  Jakub Jelinek  <jakub@redhat.com>
    
            PR target/94435
            * config/aarch64/aarch64.c (aarch64_gen_compare_reg_maybe_ze): For
            y_mode E_[QH]Imode and y being a CONST_INT, change y_mode to SImode.
    
            * gcc.target/aarch64/pr94435.c: New test.

commit b6e546912555c9b9b27bdce516e98546f4cd3d25
Author: Mark Eggleston <markeggleston@gcc.gnu.org>
Date:   Thu Apr 2 08:42:41 2020 +0100

    fortran : ICE in gfc_resolve_findloc PR93498
    
    ICE occurs when findloc is used with character arguments of different
    kinds.  If the character kinds are different reject the code.
    
    Original patch provided by Steven G. Kargl  <kargl@gcc.gnu.org>.
    
    gcc/fortran/ChangeLog:
    
            Backport from master
            Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/93498
            * check.c (gfc_check_findloc):  If the kinds of the arguments
            differ goto label "incompat".
    
    gcc/testsuite/ChangeLog:
    
            Backport from master
            2020-04-02  Mark Eggleston <markeggleston@gcc.gnu.org>
    
            PR fortran/93498
            * gfortran.dg/pr93498_1.f90:  New test.
            * gfortran.dg/pr93498_2.f90:  New test.

commit 514bd32c5273b1b6c3438016faf96ffdd45639ca
Author: Mark Eggleston <markeggleston@gcc.gnu.org>
Date:   Thu Apr 2 08:26:34 2020 +0100

    fortran: ICE equivalence with an element of an array PR94030
    
    Deferred size arrays can not be used in equivalance statements.
    
    gcc/fortran/ChangeLog:
    
            Backport from master
            2020-04-02  Mark Eggleston <markeggleston@gcc.gnu.org>
    
            PR fortran/94030
            * resolve.c (resolve_equivalence): Correct formatting
            around the label "identical_types".  Instead of using
            gfc_resolve_array_spec use is_non_constants_shape_array
            to determine whether the array can be used in a in an
            equivalence statement.
    
    gcc/testsuite/ChangeLog:
    
            Backport from master
            2020-04-02  Mark Eggleston <markeggleston@gcc.gnu.org>
    
            PR fortran/94030
            * gfortran.dg/pr94030_1.f90
            * gfortran.dg/pr94030_2.f90

commit 0c509c6b5acf913a8869d0e8f3ff938c6aba49da
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Apr 2 00:17:24 2020 +0000

    Daily bump.

commit f0897a45216d8965e35e5c5538c0edb77cec016e
Author: Zackery Spytz <zspytz@gmail.com>
Date:   Wed Apr 1 18:06:16 2020 +0100

    doc: Fix a typo in the documentation of the copy attribute
    
    2020-04-01  Zackery Spytz  <zspytz@gmail.com>
    
    gcc/
            * doc/extend.texi: Fix a typo in the documentation of the
            copy function attribute.

commit 13f6d5ac48a7d55b41927849aeebc5832f8c63f0
Author: Kyrylo Tkachov <kyrylo.tkachov@arm.com>
Date:   Wed Apr 1 13:53:05 2020 +0100

    aarch64: Fix up aarch64_compare_and_swaphi pattern [PR94368]
    
    2020-04-01  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>
    
            Backport from mainline
            2020-03-31  Jakub Jelinek  <jakub@redhat.com>
    
            PR target/94368
            * config/aarch64/constraints.md (Uph): New constraint.
            * config/aarch64/atomics.md (cas_short_expected_imm): New mode attr.
            (@aarch64_compare_and_swap<mode>): Use it instead of n in operand 2's
            constraint.
    
            * gcc.dg/pr94368.c: New test.

commit c15ff4d0803ffd02fdb9147e82e8881f3620e848
Author: Kyrylo Tkachov <kyrylo.tkachov@arm.com>
Date:   Wed Apr 1 12:13:39 2020 +0100

    aarch64: Configure for sys/auxv.h in libgcc for lse-init.c
    
    2020-04-01  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>
    
            Backport from mainline
            2019-09-25  Richard Henderson  <richard.henderson@linaro.org>
    
            PR target/91833
            * config/aarch64/lse-init.c: Include auto-target.h.  Disable
            initialization if !HAVE_SYS_AUXV_H.
            * configure.ac (AC_CHECK_HEADERS): Add sys/auxv.h.
            * config.in, configure: Rebuild.

commit bb9156ede009cfb572ab98c64288de5b21a89c17
Author: Kyrylo Tkachov <kyrylo.tkachov@arm.com>
Date:   Wed Apr 1 12:11:58 2020 +0100

    aarch64: Fix store-exclusive in load-operate LSE helpers
    
    2020-04-01  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>
    
            Backport from mainline
            2019-09-25  Richard Henderson  <richard.henderson@linaro.org>
    
            PR target/91834
            * config/aarch64/lse.S (LDNM): Ensure STXR output does not
            overlap the inputs.

commit ea376dd471a3b006bc48945c1d9a29408ab17a04
Author: Kyrylo Tkachov <kyrylo.tkachov@arm.com>
Date:   Wed Apr 1 12:09:09 2020 +0100

    [AArch64] Fix shrinkwrapping interactions with atomics (PR92692)
    
    2020-04-01  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>
    
            Backport from mainline
            2020-01-17  Wilco Dijkstra  <wdijkstr@arm.com>
    
            PR target/92692
            * config/aarch64/atomics.md (aarch64_compare_and_swap<mode>)
            Use epilogue_completed rather than reload_completed.

commit 9cf2784a69e126283c33fdbcfbf5713106e87479
Author: Kyrylo Tkachov <kyrylo.tkachov@arm.com>
Date:   Wed Apr 1 12:00:14 2020 +0100

    aarch64: Implement -moutline-atomics
    
    2020-04-01  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>
    
            Backport from mainline
            2019-09-19  Richard Henderson  <richard.henderson@linaro.org>
    
            * config/aarch64/aarch64.opt (-moutline-atomics): New.
            * config/aarch64/aarch64.c (aarch64_atomic_ool_func): New.
            (aarch64_ool_cas_names, aarch64_ool_swp_names): New.
            (aarch64_ool_ldadd_names, aarch64_ool_ldset_names): New.
            (aarch64_ool_ldclr_names, aarch64_ool_ldeor_names): New.
            (aarch64_expand_compare_and_swap): Honor TARGET_OUTLINE_ATOMICS.
            * config/aarch64/atomics.md (atomic_exchange<ALLI>): Likewise.
            (atomic_<atomic_op><ALLI>): Likewise.
            (atomic_fetch_<atomic_op><ALLI>): Likewise.
            (atomic_<atomic_op>_fetch<ALLI>): Likewise.
            * doc/invoke.texi: Document -moutline-atomics.
    
            * gcc.target/aarch64/atomic-op-acq_rel.c: Use -mno-outline-atomics.
            * gcc.target/aarch64/atomic-comp-swap-release-acquire.c: Likewise.
            * gcc.target/aarch64/atomic-op-acquire.c: Likewise.
            * gcc.target/aarch64/atomic-op-char.c: Likewise.
            * gcc.target/aarch64/atomic-op-consume.c: Likewise.
            * gcc.target/aarch64/atomic-op-imm.c: Likewise.
            * gcc.target/aarch64/atomic-op-int.c: Likewise.
            * gcc.target/aarch64/atomic-op-long.c: Likewise.
            * gcc.target/aarch64/atomic-op-relaxed.c: Likewise.
            * gcc.target/aarch64/atomic-op-release.c: Likewise.
            * gcc.target/aarch64/atomic-op-seq_cst.c: Likewise.
            * gcc.target/aarch64/atomic-op-short.c: Likewise.
            * gcc.target/aarch64/atomic_cmp_exchange_zero_reg_1.c: Likewise.
            * gcc.target/aarch64/atomic_cmp_exchange_zero_strong_1.c: Likewise.
            * gcc.target/aarch64/sync-comp-swap.c: Likewise.
            * gcc.target/aarch64/sync-op-acquire.c: Likewise.
            * gcc.target/aarch64/sync-op-full.c: Likewise.

commit b36f6a808e5ce7484c1039458f2e3137934190b2
Author: Kyrylo Tkachov <kyrylo.tkachov@arm.com>
Date:   Wed Apr 1 11:56:24 2020 +0100

    aarch64: Add out-of-line functions for LSE atomics
    
    This is the libgcc part of the interface -- providing the functions.
    Rationale is provided at the top of libgcc/config/aarch64/lse.S.
    
    2020-04-01  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>
    
            Backport from mainline
            2019-09-19  Richard Henderson  <richard.henderson@linaro.org>
    
            * config/aarch64/lse-init.c: New file.
            * config/aarch64/lse.S: New file.
            * config/aarch64/t-lse: New file.
            * config.host: Add t-lse to all aarch64 tuples.

commit 43e46197c10daad6e0aee839c85266c246e78bb2
Author: Kyrylo Tkachov <kyrylo.tkachov@arm.com>
Date:   Wed Apr 1 11:54:14 2020 +0100

    aarch64: Tidy aarch64_split_compare_and_swap
    
    2020-04-01  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>
    
            Backport from mainline
            2019-09-19  Richard Henderson  <richard.henderson@linaro.org>
    
            * config/aarch64/aarch64 (aarch64_split_compare_and_swap): Disable
            strong_zero_p for aarch64_track_speculation; unify some code paths;
            use aarch64_gen_compare_reg instead of open-coding.

commit 53c1356515ac1357c341b594326967ac4677d891
Author: Kyrylo Tkachov <kyrylo.tkachov@arm.com>
Date:   Wed Apr 1 11:48:52 2020 +0100

    aarch64: Implement TImode compare-and-swap
    
    2020-04-01  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>
    
            Backport from mainline
            2019-09-19  Richard Henderson  <richard.henderson@linaro.org>
    
            * config/aarch64/aarch64.c (aarch64_gen_compare_reg): Add support
            for NE comparison of TImode values.
            (aarch64_emit_load_exclusive): Add support for TImode.
            (aarch64_emit_store_exclusive): Likewise.
            (aarch64_split_compare_and_swap): Disable strong_zero_p for TImode.
            * config/aarch64/atomics.md (@atomic_compare_and_swap<ALLI_TI>):
            Change iterator from ALLI to ALLI_TI.
            (@atomic_compare_and_swap<JUST_TI>): New.
            (@atomic_compare_and_swap<JUST_TI>_lse): New.
            (aarch64_load_exclusive_pair): New.
            (aarch64_store_exclusive_pair): New.
            * config/aarch64/iterators.md (JUST_TI): New.

commit ea7ffe1da05df28c8dd5c1f5292b31df69f1a9ef
Author: Kyrylo Tkachov <kyrylo.tkachov@arm.com>
Date:   Wed Apr 1 11:43:00 2020 +0100

    aarch64: Extend %R for integer registers
    
    2020-04-01  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>
    
            Backport from mainline
            2019-09-19  Richard Henderson  <richard.henderson@linaro.org>
    
            * config/aarch64/aarch64.c (aarch64_print_operand): Allow integer
            registers with %R.

commit 2594e9a069698d99ac5a012f3189288e19a5094b
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Apr 1 00:17:49 2020 +0000

    Daily bump.

commit 0e66150084aa217811a5c45fb15e98d7ed3e8839
Author: Jason Merrill <jason@redhat.com>
Date:   Mon Mar 30 16:09:43 2020 -0400

    c++: Fix comparison of fn() and ns::fn() [PR90711]
    
    The resolution of CWG issue 1321 clarified that when deciding whether two
    expressions involving template parameters are equivalent, two dependent
    function calls where the function is named with an unqualified-id are
    considered to be equivalent if the name is the same, even if unqualified
    lookup finds different sets of functions.  We were wrongly treating
    qualified-ids the same way, so that EXISTS and test::EXISTS were considered
    to be equivalent even though they are looking up the name in different
    scopes.  This also causes a mangling bug, but I don't think it's safe to fix
    that for GCC 10; this patch just fixes the comparison.
    
    gcc/cp/ChangeLog
    2020-03-30  Jason Merrill  <jason@redhat.com>
    
            PR c++/90711
            * tree.c (cp_tree_equal) [CALL_EXPR]: Compare KOENIG_LOOKUP_P.
            (called_fns_equal): Check DECL_CONTEXT.

commit 02a201f7158b4d2d2b937ff3b37640126ce936d2
Author: Carl Love <carll@us.ibm.com>
Date:   Tue Mar 31 11:41:26 2020 -0500

    rs6000: vec_rlnm fix to make builtin work according to ABI
    
            Backport from mainline:
              commit e97929e20b2f52e6cfc046c1302324d1b24d95e3
              Author: Carl Love <carll@us.ibm.com>
              Date:   Wed Mar 25 18:33:37 2020 -0500
    
            gcc/ChangeLog
    
            PR target/93819
                * gcc/config/rs6000/altivec.h:
                Fixed swapped arguments for vec_rlnm define.

commit 8ab40918a3b6b9093930193fe8900d738858e75f
Author: Carl Love <carll@us.ibm.com>
Date:   Tue Mar 31 11:30:00 2020 -0500

    rs6000: Add command line and builtin compatibility check
    
    2020-03-31  Carl Love  <cel@us.ibm.com>
    
            backport of mainline commit
    
            commit 68dd57808f7c0147acdb5ca72c88ff655afcb0ce
            Author: Carl Love <carll@us.ibm.com>
            Date:   Fri Mar 20 18:15:05 2020 -0500
    
            whith change log typo fixed.
    
            PR target/87583
            * gcc/config/rs6000/rs6000.c (rs6000_option_override_internal):
            Add check for TARGET_FPRND for Power 7 or newer.

commit bebb360779696d91a2e9ce0ec00da3a0f8cb7936
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Mar 31 00:17:33 2020 +0000

    Daily bump.

commit 79166bd28d0296a510cc65aa21cd6797eba51144
Author: Tobias Burnus <tobias@codesourcery.com>
Date:   Mon Mar 30 09:23:12 2020 +0200

    [Fortran] Fix result-variable handling of MODULE PROCEDURE (PR94348)
    
            Backport from mainline
            2020-03-28  Tobias Burnus  <tobias@codesourcery.com>
    
            PR fortran/94348
            * decl.c (gfc_match_submod_proc): Add result var to the
            proc's namespace.
    
            PR fortran/94348
            * gfortran.dg/module_procedure_3.f90: New.

commit 9251b78b9e8179ed7614415e2a8489046fee8a7f
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Mar 30 00:17:31 2020 +0000

    Daily bump.

commit 70fe4fc073ed98e278ede5943149b54f4abdb3fa
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Mar 29 00:17:27 2020 +0000

    Daily bump.

commit 26df22e3909127b60afb2f5a33f750c7b0fec48a
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Mar 28 00:17:31 2020 +0000

    Daily bump.

commit 070a0b6392d682f11ca79d22ae00bc822332cdcf
Author: Nathan Sidwell <nathan@acm.org>
Date:   Fri Mar 27 13:13:39 2020 -0700

    c++: Fix ICE popping local scope [pr84733]
    
            PR c++/84733
            * name-lookup.c (do_pushdecl): Look through cleanp levels.

commit 1a17c0e113ad125a666b33694b00ea528564bf7b
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Mar 27 00:17:36 2020 +0000

    Daily bump.

commit 9b9d9fd072846173413c67e83c60a475a40849ce
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Mar 26 00:17:37 2020 +0000

    Daily bump.

commit dff885cdc00bbdccb5bb6277e4711093e3bbad1e
Author: Mark Eggleston <markeggleston@gcc.gnu.org>
Date:   Wed Mar 25 13:43:23 2020 +0000

    fortran: ICE using undeclared symbol in array constructor PR93484
    
    Using undeclared symbol k in an expression in the following
    array constructor results in an ICE:
    
        print *, [real(x(k))]
    
    If the call to the intrinsic is not in a constructor a no IMPLICIT
    type error is reported and the ICE does not occur.
    
    Matching on an expression instead of an initialisation express an
    and not converting a MATCH_ERROR return value into MATCH_NO results
    in the no IMPLICIT error and no ICE.
    
    Note: Steven G. Kargl  <kargl@gcc.gnu.org> is the author of the
    changes except for the test cases.
    
    gcc/fortran/ChangeLog:
    
            Backport from master
            2020-03-25  Mark Eggleston <markeggleston@gcc.gnu.org>
    
            PR fortran/93484
            * match.c (gfc_match_type_spec): Replace gfc_match_init_expr with
            gfc_match_expr. Return m if m is MATCH_NO or MATCH_ERROR.
    
    gcc/testsuite
    
            Backport from master
            2020-03-25  Mark Eggleston <markeggleston@gcc.gnu.org>
    
            PR fortran/93484
            * gfortran.dg/pr93484_1.f90: New test.
            * gfortran.dg/pr93484_2.f90: New test.

commit 768779dd1165edf49e148bca425321093c7dc15b
Author: Kewen Lin <linkw@linux.ibm.com>
Date:   Fri Mar 13 05:51:21 2020 -0500

    [testsuite] Fix PR93935 to guard case under vect_hw_misalign
    
    This patch is to apply the same fix as r267528 to another similar case
    bb-slp-over-widen-2.c which requires misaligned vector access.
    
    gcc/testsuite/ChangeLog
    
    2020-03-25  Kewen Lin  <linkw@gcc.gnu.org>
    
        Backport from master
        2020-03-13  Kewen Lin  <linkw@gcc.gnu.org>
    
        PR testsuite/93935
        * gcc.dg/vect/bb-slp-over-widen-2.c: Expect basic block vectorized
        messages only on vect_hw_misalign targets.

commit 76f7f2f96518eb06d6eb7d0bef8a2195b619d15f
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Mar 25 00:17:25 2020 +0000

    Daily bump.

commit 366f69fdf42854f76b90ce81394e3685f2990988
Author: John David Anglin <danglin@gcc.gnu.org>
Date:   Tue Mar 24 17:07:23 2020 +0000

    Define __BIG_ENDIAN__
    
            2020-03-24  John David Anglin  <danglin@gcc.gnu.org>
    
            PR lto/94249
            * config/pa/pa.h (TARGET_CPU_CPP_BUILTINS): Define __BIG_ENDIAN__.

commit 8fa2081ca6288853f3b8ceecd7d57ddf5dba5e7a
Author: Tamar Christina <tamar.christina@arm.com>
Date:   Tue Mar 24 12:36:19 2020 +0000

    AArch64: Break apart paradoxical subregs for VSTRUCT writes (PR target/94052)
    
    This works around an ICE in reload where from expand we get the following RTL
    generated for VSTRUCT mode writes:
    
    (insn 446 354 445 2 (set (reg:CI 383)
     (subreg:CI (reg:V4SI 291) 0)) "small.i":146:22 3408 {*aarch64_movci}
     (nil))
    
    This sequence is trying to say two things:
    
    1) liveliness: It's trying to say that eventually the whole CI reg will be
                   written to. It does this by generating the paradoxical subreg.
    2) write data: It's trying to in the same instruction also write the V4SI mode
                   component at offset 0 in the CI reg.
    
    This patch fixes it by in the backend when we see such a paradoxical
    construction breaking it apart and issuing a clobber to correct the liveliness
    information and then emitting a normal subreg write for the component that the
    paradoxical subreg was trying to write to.
    
    Concretely we generate this:
    
    (insn 42 41 43 (clobber (reg/v:CI 122 [ diD.5226 ])) "small.i":121:23 -1
         (nil))
    
    (insn 43 42 44 (set (subreg:V4SI (reg/v:CI 122 [ diD.5226 ]) 0)
            (reg:V4SI 136)) "small.i":121:23 -1
         (nil))
    
    gcc/ChangeLog:
    
            PR target/94052
            * config/aarch64/aarch64-simd.md (mov<mode>): Remove paradoxical
            subregs of VSTRUCT modes.
    
    gcc/testsuite/ChangeLog:
    
            PR target/94052
            * g++.target/aarch64/pr94052.C: New test.

commit 95c969e58f7905b14d3f2889cf41595eb2c13cbb
Author: Bin Cheng <bin.cheng@linux.alibaba.com>
Date:   Tue Mar 24 17:40:21 2020 +0800

    backport PR94125: Update post order number for merged SCC.
    
    Function loop_distribution::break_alias_scc_partitions needs to compute
    SCC with runtime alias edges skipped.  As a result, partitions could be
    re-assigned larger post order number than SCC's precedent partition and
    distributed before the precedent one.  This fixes the issue by updating
    the merged partition to the minimal post order in SCC.
    
    Backport from mainline.
        PR tree-optimization/94125
        * tree-loop-distribution.c
        (loop_distribution::break_alias_scc_partitions): Update post order
        number for merged scc.
    
        * gcc.dg/tree-ssa/pr94125.c: New test.

commit 2e432a9783988191766db032a1d7e7ade88ed98e
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Mar 24 00:17:39 2020 +0000

    Daily bump.

commit c7bc3b656235604eae212515b8695c6cfdaa3675
Author: Joseph Myers <joseph@codesourcery.com>
Date:   Mon Mar 23 19:07:40 2020 +0000

    Remove wrongly committed file.

commit 5c7bd28d1cb85c43c5d0f6d9ece953881cf99373
Author: Will Schmidt <will_schmidt@vnet.ibm.com>
Date:   Mon Mar 23 14:04:20 2020 -0500

    backport PR90763: PowerPC vec_xl_len should take const argument.
    
        2020-03-23  Will Schmidt  <will_schmidt@vnet.ibm.com>
    
        Backport from mainline.
        2020-03-10  Will Schmidt  <will_schmidt@vnet.ibm.com>
    
        PR target/90763
        * config/rs6000/rs6000-c.c (altivec_resolve_overloaded_builtin):
        add clause to handle P9V_BUILTIN_VEC_LXVL with const arguments.
    
        * gcc.target/powerpc/pr90763.c: New.

commit 46de8b3eb1a537d75c85abfd9f85b7fb5f5b136c
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Mon Mar 23 17:10:05 2020 +0000

    Darwin: Fix i686 bootstrap when the assembler supports GOTOFF in data.
    
    When we use an assembler that supports " .long XX@GOTOFF", the current
    combination of configuration parameters and conditional compilation
    (when building an i686-darwin compiler with mdynamic-no-pic) assume that
    it's OK to put jump tables in the .const section.
    
    However, when we encounter a weak function with a jump table, this
    produces relocations that directly access the weak symbol section from
    the .const section - which is deemed illegal by the linker (since that
    would mean that the weak symbol could not be replaced).
    
    Arguably, this is a limitation (maybe even a bug) in the linker - but
    it seems that we'd have to change the ABI to fix it - since it would
    require some annotation (maybe just using a special section for the
    jump tables) to tell the linker that this specific circumstance is OK
    because the direct access to the weak symbol can only occur from that
    symbol itself.
    
    The fix is to force jump tables into the text section for all X86 Darwin
    versions (PIC code already had this change).
    
    gcc/ChangeLog:
    
    2020-03-23  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from master.
            2020-03-22  Iain Sandoe  <iain@sandoe.co.uk>
    
            * config/i386/darwin.h (JUMP_TABLES_IN_TEXT_SECTION): Remove
            references to Darwin.
            * config/i386/i386.h (JUMP_TABLES_IN_TEXT_SECTION): Define this
            unconditionally and comment on why.

commit a5ef37f868bf43f20ecb0b0a820ef7766c31e9f5
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Mar 23 00:17:27 2020 +0000

    Daily bump.

commit 938de7cbb1c7030eb1d9e1972f23b6ae0b913132
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Mar 22 12:52:15 2020 +0000

    Daily bump.

commit ecce469d89e8943a021f128eca4e423d72e30c78
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Mar 21 00:17:31 2020 +0000

    Daily bump.

commit bf061b9a5f77bfda10bd5a82eb6db2cc5a71d271
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Mar 20 00:17:30 2020 +0000

    Daily bump.

commit 337111a23499e597707f220662b2567e3f3bd6ea
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Thu Mar 19 15:33:02 2020 +0000

    doc: Note that some warnings depend on optimizations (PR 92757)
    
    Backport from mainline
    2020-01-13  Jonathan Wakely  <jwakely@redhat.com>
    
            PR driver/92757
            * doc/invoke.texi (Warning Options): Add caveat about some warnings
            depending on optimization settings.

commit d01cb80e0fbe23510a861faab9909b76837faf98
Author: Jiufu Guo <guojiufu@linux.ibm.com>
Date:   Tue Mar 10 13:51:57 2020 +0800

    rs6000: Check -+0 and NaN for smax/smin generation
    
    PR93709 mentioned regressions on maxlocval_4.f90 and minlocval_f.f90 which
    relates to max of '-inf' and 'nan'. This regression occur on P9 because
    P9 new instruction 'xsmaxcdp' is generated.
    And for C code `a < b ? b : a` is also generated as `xsmaxcdp` under -O2
    for P9. While this instruction behavior more like C/C++ semantic (a>b?a:b).
    In GCC9, the issue also occur as the new test case shows.
    
    This generates prevents 'xsmaxcdp' to be generated for those cases.
    'xsmincdp' also is handled in patch.
    
    gcc/
    2020-03-19  Jiufu Guo  <guojiufu@linux.ibm.com>
    
            PR target/93709
            * gcc/config/rs6000/rs6000.c (rs6000_emit_p9_fp_minmax): Check
            NAN and SIGNED_ZEROR for smax/smin.
    
    gcc/testsuite
    2020-03-19  Jiufu Guo  <guojiufu@linux.ibm.com>
    
            PR target/93709
            * gcc.target/powerpc/p9-minmax-3.c: New test.

commit 883465f79e71e401c15caff7c318ea8541fa8401
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Mar 19 00:17:31 2020 +0000

    Daily bump.

commit c78b41b23b360e21a43bb161c7381c71680da8f3
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Mar 18 00:17:30 2020 +0000

    Daily bump.

commit 65de83595faeccd83bc0fefbfb79768f8a3bb2b6
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Mar 17 10:42:35 2020 +0100

    expand: Don't depend on warning flags in code generation of strnlen [PR94189]
    
    The following testcase FAILs with -O2 -fcompare-debug, but the reason isn't
    that we'd emit different code based on -g or non-debug, but rather that
    we emit different code depending on whether -w is used or not (or e.g.
    -Wno-stringop-overflow or whether some other pass emitted some other warning
    already on the call).
    
    Code generation shouldn't depend on whether we emit a warning or not if at
    all possible.
    
    The following patch punts (i.e. doesn't optimize the strnlen call to a
    constant value) if we would emit the warning if it was enabled.
    In the PR there is an alternate patch which does optimize the strnlen call
    no matter if we emit the warning or not, though I think I prefer the version
    below, e.g. the strnlen call might be crossing field boundaries, which is in
    strict reading undefined, but I'd be afraid people do that in the real
    world programs.
    
    2020-03-17  Jakub Jelinek  <jakub@redhat.com>
    
            PR middle-end/94189
            * builtins.c (expand_builtin_strnlen): Do return NULL_RTX if we would
            emit a warning if it was enabled and don't depend on TREE_NO_WARNING
            for code-generation.
    
            * gcc.dg/pr94189.c: New test.

commit 378e830538afd4a02e41674cc9161fa59b5e09a9
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Mon Mar 16 09:03:59 2020 +0100

    tree-inline: Fix a -fcompare-debug issue in the inliner [PR94167]
    
    The following testcase fails with -fcompare-debug.  The problem is that
    bar is marked as address_taken only with -g and not without.
    I've tracked it down to insert_init_stmt calling gimple_regimplify_operands
    even on DEBUG_STMTs.  That function will just insert normal stmts before
    the DEBUG_STMT if the DEBUG_STMT operand isn't gimple val or invariant.
    While DCE will turn those statements into debug temporaries, it can cause
    differences in SSA_NAMEs and more importantly, the ipa references are
    generated from those before the DCE happens.
    On the testcase, the DEBUG_STMT value is (int)bar.
    
    We could generate DEBUG_STMTs with debug temporaries instead, but I fail to
    see the reason to do that, DEBUG_STMTs allow other expressions and all we
    want to ensure is that the expressions aren't too large (arbitrarily
    complex), but during inlining/function versioning I don't see why something
    would queue a DEBUG_STMT with arbitrarily complex expressions in there.
    
    2020-03-16  Jakub Jelinek  <jakub@redhat.com>
    
            PR debug/94167
            * tree-inline.c (insert_init_stmt): Don't gimple_regimplify_operands
            DEBUG_STMTs.
    
            * gcc.dg/pr94167.c: New test.

commit a8fc40fd551a60a97efbfe3fee08721accd80964
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Sun Mar 15 01:27:40 2020 +0100

    tree-nested: Fix handling of *reduction clauses with C array sections [PR93566]
    
    tree-nested.c didn't handle C array sections in {,task_,in_}reduction clauses.
    
    2020-03-14  Jakub Jelinek  <jakub@redhat.com>
    
            PR middle-end/93566
            * tree-nested.c (convert_nonlocal_omp_clauses,
            convert_local_omp_clauses): Handle {,in_,task_}reduction clauses
            with C/C++ array sections.
    
            * testsuite/libgomp.c/pr93566.c: New test.

commit c2f836c413b1e9ae45598338b4a2ecd33bd926fb
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Fri Mar 13 11:33:16 2020 +0100

    aarch64: Fix another bug in aarch64_add_offset_1 [PR94121]
    
    > I'm getting this ICE with -mabi=ilp32:
    >
    > during RTL pass: fwprop1
    > /opt/gcc/gcc-20200312/gcc/testsuite/gcc.dg/pr94121.c: In function 'bar':
    > /opt/gcc/gcc-20200312/gcc/testsuite/gcc.dg/pr94121.c:16:1: internal compiler error: in decompose, at rtl.h:2279
    
    That is a preexisting issue, caused by another bug in the same function.
    When mode is SImode and moffset is 0x80000000 (or anything else with the
    bit 31 set), we need to sign-extend it.
    
    2020-03-13  Jakub Jelinek  <jakub@redhat.com>
    
            PR target/94121
            * config/aarch64/aarch64.c (aarch64_add_offset_1): Use gen_int_mode
            instead of GEN_INT.

commit 3739894d0cfc88b6d84134b827f33b31d646d32a
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Mar 12 18:30:16 2020 +0100

    maintainer-scripts: Fix up gcc_release without -l, where mkdir was using umask 077 after migration
    
    2020-03-12  Jakub Jelinek  <jakub@redhat.com>
    
            * gcc_release (upload_files): Without -l, pass -m 755 to the mkdir
            command invoked through ssh.

commit 9a8af207d7d03149a438185a2a0c50eeeb96a402
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Mar 12 09:35:30 2020 +0100

    doc: Fix up ASM_OUTPUT_ALIGNED_DECL_LOCAL description
    
    When looking into PR94134, I've noticed bugs in the
    ASM_OUTPUT_ALIGNED_DECL_LOCAL documentation.  varasm.c has:
      #if defined ASM_OUTPUT_ALIGNED_DECL_LOCAL
        unsigned int align = symtab_node::get (decl)->definition_alignment ();
        ASM_OUTPUT_ALIGNED_DECL_LOCAL (asm_out_file, decl, name,
                                       size, align);
        return true;
      #elif defined ASM_OUTPUT_ALIGNED_LOCAL
        unsigned int align = symtab_node::get (decl)->definition_alignment ();
        ASM_OUTPUT_ALIGNED_LOCAL (asm_out_file, name, size, align);
        return true;
      #else
        ASM_OUTPUT_LOCAL (asm_out_file, name, size, rounded);
        return false;
      #endif
    and the ASM_OUTPUT_ALIGNED_LOCAL documentation properly mentions:
    Like @code{ASM_OUTPUT_LOCAL} and mentions the same macro in another place.
    The ASM_OUTPUT_ALIGNED_DECL_LOCAL description mentions non-existing macros
    ASM_OUTPUT_ALIGNED_DECL and ASM_OUTPUT_DECL instead of the right ones
    ASM_OUTPUT_ALIGNED_LOCAL and ASM_OUTPUT_LOCAL.
    
    2020-03-12  Jakub Jelinek  <jakub@redhat.com>
    
            * doc/tm.texi.in (ASM_OUTPUT_ALIGNED_DECL_LOCAL): Change
            ASM_OUTPUT_ALIGNED_DECL in description to ASM_OUTPUT_ALIGNED_LOCAL
            and ASM_OUTPUT_DECL to ASM_OUTPUT_LOCAL.
            * doc/tm.texi: Regenerated.

commit a545ffafa380fa958393e1dfbf7f5f8f129bc5cf
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Mar 12 09:34:00 2020 +0100

    tree-dse: Fix mem* head trimming if call has lhs [PR94130]
    
    As the testcase shows, if DSE decides to head trim {mem{set,cpy,move},strncpy}
    and the call has lhs, it is incorrect to leave the lhs as is, because it
    will then point to the adjusted address (base + head_trim) instead of the
    original base.
    The following patch fixes that by dropping the lhs of the call and assigning
    lhs the original base in a following statement.
    
    2020-03-12  Jakub Jelinek  <jakub@redhat.com>
    
            PR tree-optimization/94130
            * tree-ssa-dse.c: Include gimplify.h.
            (increment_start_addr): If stmt has lhs, drop the lhs from call and
            set it after the call to the original value of the first argument.
            Formatting fixes.
            (decrement_count): Formatting fix.
    
            * gcc.c-torture/execute/pr94130.c: New test.

commit f1125cf88ac0c97d819e4f81d556fbcd1161270e
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Wed Mar 11 18:35:13 2020 +0100

    pdp11: Fix handling of common (local and global) vars [PR94134]
    
    As mentioned in the PR, the generic code decides to put the a variable into
    lcomm_section, which is a NOSWITCH section and thus the generic code doesn't
    switch into a particular section before using
    ASM_OUTPUT{_ALIGNED{,_DECL}_}_LOCAL, on many targets that results just in
    .lcomm (or for non-local .comm) directives which don't need a switch to some
    section, other targets put switch_to_section (bss_section) at the start of
    that macro.
    pdp11 doesn't do that (and doesn't have bss_section), and so emits the
    lcomm/comm variables in whatever section is current (it has only .text/.data
    and for DEC assembler rodata).
    
    The following patch fixes that by putting it always into data section, and
    additionally avoids emitting an empty line in the assembly for the lcomm
    vars.
    
    2020-03-11  Jakub Jelinek  <jakub@redhat.com>
    
            PR target/94134
            * config/pdp11/pdp11.c (pdp11_asm_output_var): Call switch_to_section
            at the start to switch to data section.  Don't print extra newline if
            .globl directive has not been emitted.
    
            * gcc.c-torture/execute/pr94134.c: New test.

commit a644079a702a6228df2ffaace1d88a5f74e4bb9f
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Wed Mar 11 10:54:22 2020 +0100

    aarch64: Fix ICE in aarch64_add_offset_1 [PR94121]
    
    abs_hwi asserts that the argument is not HOST_WIDE_INT_MIN and as the
    (invalid) testcase shows, the function can be called with such an offset.
    The following patch is IMHO minimal fix, absu_hwi unlike abs_hwi allows even
    that value and will return (unsigned HOST_WIDE_INT) HOST_WIDE_INT_MIN
    in that case.  The function then uses moffset in two spots which wouldn't
    care if the value is (unsigned HOST_WIDE_INT) HOST_WIDE_INT_MIN or
    HOST_WIDE_INT_MIN and wouldn't accept it (!moffset and
    aarch64_uimm12_shift (moffset)), then in one spot where the signedness of
    moffset does matter and using unsigned is the right thing -
    moffset < 0x1000000 - and finally has code which will handle even this
    value right; the assembler doesn't really care for DImode immediates if
            mov     x1, -9223372036854775808
    or
            mov     x1, 9223372036854775808
    is used and similarly it doesn't matter if we add or sub it in DImode.
    
    2020-03-11  Jakub Jelinek  <jakub@redhat.com>
    
            PR target/94121
            * config/aarch64/aarch64.c (aarch64_add_offset_1): Use absu_hwi
            instead of abs_hwi, change moffset type to unsigned HOST_WIDE_INT.
    
            * gcc.dg/pr94121.c: New test.

commit 343c467ccdc24edb9acd7c60d54914d9656ab499
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Wed Mar 11 09:33:52 2020 +0100

    dfp: Fix decimal_to_binary [PR94111]
    
    As e.g. decimal_from_decnumber shows, the REAL_VALUE_TYPE representation
    contains a decimal128 embedded in ->sig only if it is rvc_normal, for
    other kinds like rvc_inf or rvc_nan, ->sig is ignored and everything is
    contained in the REAL_VALUE_TYPE flags (cl, sign, signalling and decimal).
    decimal_to_binary which is used when folding a decimal{32,64,128} constant
    to a binary floating point type ignores this and thus folds infinities and
    NaNs into +0.0.
    The following patch fixes that by only doing that for rvc_normal.
    Similarly to the binary to decimal folding, it goes through a string, in
    order to e.g. deal with canonical NaN mantissas, or binary float formats
    that don't support infinities and/or NaNs.
    
    2020-03-11  Jakub Jelinek  <jakub@redhat.com>
    
            PR middle-end/94111
            * dfp.c (decimal_to_binary): Only use decimal128ToString if from->cl
            is rvc_normal, otherwise use real_to_decimal to print the number to
            string.
    
            * gcc.dg/dfp/pr94111.c: New test.

commit 2fd27691f213f2e808626c4cd492b00c801a00fa
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Wed Mar 11 09:32:22 2020 +0100

    ldist: Further fixes for -ftrapv [PR94114]
    
    As the testcase shows, arithmetics that for -ftrapv would need multiple
    basic blocks can show up not just in nb_bytes expressions where we
    are calling rewrite_to_non_trapping_overflow for a while already,
    but also in the pointer expression to the start of the region.
    While the testcase covers just the first hunk and I've failed to create
    a testcase for the latter, it is at least in theory possible too, so I've
    adjusted that hunk too.
    
    2020-03-11  Jakub Jelinek  <jakub@redhat.com>
    
            PR tree-optimization/94114
            * tree-loop-distribution.c (generate_memset_builtin): Call
            rewrite_to_non_trapping_overflow even on mem.
            (generate_memcpy_builtin): Call rewrite_to_non_trapping_overflow even
            on dest and src.
    
            * gcc.dg/pr94114.c: New test.

commit e0d6777cda966b04fc47d544c09839c4fa94343c
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Mar 5 09:12:44 2020 +0100

    print-rtl: Fix printing of CONST_STRING in DEBUG_INSNs [PR93399]
    
    The following testcase fails to assemble, as CONST_STRING in the DEBUG_INSNs
    is printed as is, so if it contains \n and/or \r, we are in trouble:
            .loc 1 14 3
            # DEBUG haystack => [si]
            # DEBUG needle => "
    "
    In the gimple dumps we print those (STRING_CSTs) as
      # DEBUG haystack => D#1
      # DEBUG needle => "\n"
    so this patch uses what we use in tree printing for the CONST_STRINGs too.
    
    2020-03-05  Jakub Jelinek  <jakub@redhat.com>
    
            PR middle-end/93399
            * tree-pretty-print.h (pretty_print_string): Declare.
            * tree-pretty-print.c (pretty_print_string): Remove forward
            declaration, no longer static.  Change nbytes parameter type
            from unsigned to size_t.
            * print-rtl.c (print_value) <case CONST_STRING>: Use
            pretty_print_string and for shrink way too long strings.
    
            * gcc.dg/pr93399.c: New test.

commit d2a810ee83e2952bf351498cecf8f5db28860a24
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Wed Mar 4 12:59:04 2020 +0100

    inliner: Copy DECL_BY_REFERENCE in copy_decl_to_var [PR93888]
    
    In the following testcase we emit wrong debug info for the karg
    parameter in the DW_TAG_inlined_subroutine into main.
    The problem is that the karg PARM_DECL is DECL_BY_REFERENCE and thus
    in the IL has const K & type, but in the source just const K.
    When the function is inlined, we create a VAR_DECL for it, but don't
    set DECL_BY_REFERENCE, so when emitting DW_AT_location, we treat it like
    a const K & typed variable, but it has DW_AT_abstract_origin which has
    just the const K type and thus the debugger thinks the variable has
    const K type.
    
    Fixed by copying the DECL_BY_REFERENCE flag.  Not doing it in
    copy_decl_for_dup_finish, because copy_decl_no_change already copies
    that flag through copy_node and in copy_result_decl_to_var it is
    undesirable, as we handle DECL_BY_REFERENCE in that case instead
    by changing the type.
    
    2020-03-04  Jakub Jelinek  <jakub@redhat.com>
    
            PR debug/93888
            * tree-inline.c (copy_decl_to_var): Copy DECL_BY_REFERENCE flag.
    
            * g++.dg/guality/pr93888.C: New test.

commit 5de0dc84c75a43f78a03c7cdb7e7c443c641a7fa
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Wed Mar 4 09:01:59 2020 +0100

    tailcall: Fix up process_assignment [PR94001]
    
    When a function returns void or the return value is ignored, ass_var
    is NULL_TREE.  The tail recursion handling generally assumes DCE has been
    performed and so doesn't expect to encounter useless assignments after the
    call and expects them to be part of the return value adjustment that need
    to be changed into tail recursion additions/multiplications.
    process_assignment does some verification and has a way to tell the caller
    to try to move dead or whatever other stmts that don't participate in the
    return value modifications before it is returned.
    For binary rhs assignments it is just fine, neither op0 nor op1 will be
    NULL_TREE and thus if *ass_var is NULL_TREE, it will not match, but unary
    rhs is handled by only setting op0 to rhs1 and setting op1 to NULL_TREE.
    And at this point, NULL_TREE == NULL_TREE and thus we think e.g. the
      c_2 = -e_3(D);
    dead stmt is actually a return value modification, so we queue it as
    multiplication and then create a void type SSA_NAME accumulator for it
    and ICE shortly after.
    
    Fixed by making sure op1 == *ass_var comparison is done only if *ass_var.
    
    2020-03-04  Jakub Jelinek  <jakub@redhat.com>
    
            PR tree-optimization/94001
            * tree-tailcall.c (process_assignment): Before comparing op1 to
            *ass_var, verify *ass_var is non-NULL.
    
            * gcc.dg/pr94001.c: New test.

commit 05409a1edd80a96c26cead01d1b65dc9f25a22af
Author: Kewen Lin <linkw@linux.ibm.com>
Date:   Sun Mar 8 21:55:11 2020 -0500

    [testsuite] Fix PR94019 to check vector char when vect_hw_misalign
    
    As PR94019 shows, without misaligned vector access support but with
    realign load, the vectorized loop will end up with realign scheme.
    It generates mask (control vector) with return type vector signed
    char which breaks the not check.
    
    gcc/testsuite/ChangeLog
    
    2020-03-17  Kewen Lin  <linkw@gcc.gnu.org>
    
        Backport from master
        2020-03-09  Kewen Lin  <linkw@gcc.gnu.org>
    
        PR testsuite/94019
        * gcc.dg/vect/vect-over-widen-17.c: Don't expect vector char if it's
        without misaligned vector access support.

commit 62960ccdefe60f29897f4bae8ea6a2f3f385fc47
Author: Kewen Lin <linkw@linux.ibm.com>
Date:   Sun Mar 8 21:34:13 2020 -0500

    [testsuite] Fix PR94023 to guard case under vect_hw_misalign
    
    As PR94023 shows, the expected SLP requires misaligned vector access
    support.  This patch is to guard the check under the target condition
    vect_hw_misalign to ensure that.
    
    2020-03-17  Kewen Lin  <linkw@gcc.gnu.org>
    
        Backport from master
        2020-03-09  Kewen Lin  <linkw@gcc.gnu.org>
    
        PR testsuite/94023
        * gcc.dg/vect/slp-perm-12.c: Expect loop vectorized messages only on
        vect_hw_misalign targets.

commit 9a532a94e35008869dafc0e70301f1cff9700f20
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Mar 17 00:17:21 2020 +0000

    Daily bump.

commit 31b204ace293b81fc51f76bf9faf459ab1cd7c50
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Mon Mar 16 22:55:48 2020 +0000

    libstdc++: Add default constructor to net::service_already_exists (PR 94199)
    
    The service_already_exists exception type specified in the TS doesn't
    have any constructors defined. Since its base class isn't default
    constructible, that means has no usable constructors. This may be a
    defect in the TS.
    
    This patch fixes it by adding a default constructor, but making it
    private. The make_service function is declared as a friend to be able to
    call that private constructor.
    
    Backport from mainline
    2020-03-16  Jonathan Wakely  <jwakely@redhat.com>
    
            PR libstdc++/94199
            * include/experimental/executor (service_already_exists): Add default
            constructor. Declare make_service to be a friend.
            * testsuite/experimental/net/execution_context/make_service.cc: New
            test.

commit a81912b0740ee887796e1345936a198085926f28
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Mar 16 00:17:28 2020 +0000

    Daily bump.

commit c3747bca3849b1e06358db9cb2389d8089c49e3e
Author: Jason Merrill <jason@redhat.com>
Date:   Sat Mar 14 17:10:39 2020 -0400

    c++: Find parameter pack in typedef in lambda [92909].
    
    find_parameter_packs_r doesn't look through typedefs, which is normally
    correct, but that means we need to handle their declarations specially.
    
    gcc/cp/ChangeLog
    2020-03-14  Jason Merrill  <jason@redhat.com>
    
            PR c++/92909
            * pt.c (find_parameter_packs_r): [DECL_EXPR]: Walk
            DECL_ORIGINAL_TYPE of a typedef.

commit 2fa5f9e380b794053a0dd8a8cc63f8bfab370d22
Author: Jason Merrill <jason@redhat.com>
Date:   Sat Mar 14 17:10:39 2020 -0400

    c++: Fix ICE-after-error on partial spec [92068]
    
    Here the template arguments for the partial specialization are valid
    arguments for the template, but not for a partial specialization, because
    'd' can never be deduced to anything other than an empty pack.
    
    gcc/cp/ChangeLog
    2020-03-14  Jason Merrill  <jason@redhat.com>
    
            PR c++/92068
            * pt.c (process_partial_specialization): Error rather than crash on
            extra pack expansion.

commit cb05d702a17476fb658a59a6661d1f69394da786
Author: Jason Merrill <jason@redhat.com>
Date:   Sat Mar 14 17:10:39 2020 -0400

    c++: Fix CTAD with multiple-arg ctor template [93248].
    
    When cp_unevaluated_operand is set, tsubst_decl thinks that if it sees a
    PARM_DECL that isn't already in local_specializations, we're in a decltype
    in a trailing return type or some such, and so we only want a substitution
    for a single PARM_DECL.  In this case, we want the whole chain, so make sure
    cp_unevaluated_operand is cleared.
    
    gcc/cp/ChangeLog
    2020-03-14  Jason Merrill  <jason@redhat.com>
    
            PR c++/93248
            * pt.c (build_deduction_guide): Clear cp_unevaluated_operand for
            substituting DECL_ARGUMENTS.

commit 6c7e43f470285787cc9d0419976aab1e7b03415d
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Mar 15 00:17:26 2020 +0000

    Daily bump.

commit 0f66f1d80396e2592f9efb802d311c714233369f
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Mar 14 00:17:41 2020 +0000

    Daily bump.

commit ab768006bc54baa668205c1b2e65e64fb044d155
Author: Eric Botcazou <ebotcazou@gcc.gnu.org>
Date:   Fri Mar 13 18:03:41 2020 +0100

    Fix wrong year in ChangeLog.

commit db3584552871c8caccdc22e97ea1573da9458253
Author: Richard Biener <rguenther@suse.de>
Date:   Fri Mar 13 13:56:26 2020 +0100

    tree-optimization/94163 constrain alignment set by PRE
    
    This avoids HWI -> unsigned truncation to end up with zero alignment
    which set_ptr_info_alignment ICEs on.
    
    2020-03-13  Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/94163
            * tree-ssa-pre.c (create_expression_by_pieces): Check
            whether alignment would be zero.

commit 593e47a6134085e9b856c62f98f72acd4446ba7c
Author: Eric Botcazou <ebotcazou@gcc.gnu.org>
Date:   Fri Mar 13 09:58:44 2020 +0100

    Fix incorrect filling of delay slots in branchy code at -O2
    
    The issue is that relax_delay_slots can streamline the CFG in some cases,
    in particular remove BARRIERs, but removing BARRIERs changes the way the
    instructions are associated with (basic) blocks by the liveness analysis
    code in resource.c (find_basic_block) and thus can cause entries in the
    cache maintained by resource.c to become outdated, thus producing wrong
    answers downstream.
    
    The fix is to invalidate the cache entries affected by the removal of
    BARRIERs in relax_delay_slots, i.e. for the instructions down to the
    next BARRIER.
    
            PR rtl-optimization/94119
            * resource.h (clear_hashed_info_until_next_barrier): Declare.
            * resource.c (clear_hashed_info_until_next_barrier): New function.
            * reorg.c (add_to_delay_list): Fix formatting.
            (relax_delay_slots): Call clear_hashed_info_until_next_barrier on
            the next instruction after removing a BARRIER.

commit 0816fafce9b6e603cb4520f677064ae74ba15430
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Mar 13 00:17:19 2020 +0000

    Daily bump.

commit de8e3b71c8bec6dde60e6ee70c73d6895c67d782
Author: Bill Schmidt <wschmidt@linux.ibm.com>
Date:   Thu Mar 12 15:28:50 2020 -0500

    rs6000: Fix -mpower9-vector -mno-altivec ICE (PR87560)
    
    PR87560 reports an ICE when a test case is compiled with -mpower9-vector
    and -mno-altivec.  This patch terminates compilation with an error when
    this combination (and other unreasonable ones) are requested.
    
    Bootstrapped and tested on powerpc64le-unknown-linux-gnu with no
    regressions.  Reported error is now:
    
    f951: Error: '-mno-altivec' turns off '-mpower9-vector'
    
    2020-03-12  Bill Schmidt  <wschmidt@linux.ibm.com>
    
            Backport from master
            2020-03-02  Bill Schmidt  <wschmidt@linux.ibm.com>
    
            PR target/87560
            * rs6000-cpus.def (OTHER_ALTIVEC_MASKS): New #define.
            * rs6000.c (rs6000_disable_incompatible_switches): Add table entry
            for OPTION_MASK_ALTIVEC.

commit 7ef07b622d8c2fca35813bf50669dcd663fe5cf2
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Thu Mar 12 17:39:05 2020 +0000

    libstdc++: Handle type-changing path concatenations (PR 94063)
    
    The filesystem::path::operator+= and filesystem::path::concat functions
    operate directly on the native format of the path and so can cause a
    path to mutate to a completely different type.
    
    For Windows combining a filename "x" with a filename ":" produces a
    root-name "x:". Similarly, a Cygwin root-directory "/" combined with a
    root-directory and filename "/x" produces a root-name "//x".
    
    Before this patch the implemenation didn't support those kind of
    mutations, assuming that concatenating two filenames would always
    produce a filename and concatenating with a root-dir would still have a
    root-dir.
    
    This patch fixes it simply by checking for the problem cases and
    creating a new path by re-parsing the result of the string
    concatenation. This is slightly suboptimal because the argument has
    already been parsed if it's a path, but more importantly it doesn't
    reuse any excess capacity that the path object being modified might
    already have allocated.
    
    Backport from mainline
    2020-03-09  Jonathan Wakely  <jwakely@redhat.com>
    
            PR libstdc++/94063
            * src/c++17/fs_path.cc (path::operator+=(const path&)): Add kluge to
            handle concatenations that change the type of the first component.
            (path::operator+=(basic_string_view<value_type>)): Likewise.
            * testsuite/27_io/filesystem/path/concat/94063.cc: New test.

commit 95a82afc8a7aa8920b55c8db4e7f5fd8b28bf84f
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Thu Mar 12 17:39:05 2020 +0000

    libstdc++: Fix name of macro in #undef directive
    
    The macro that is defined is _GLIBCXX_NOT_FN_CALL_OP but the macro that
    was named in the #undef directive was _GLIBCXX_NOT_FN_CALL. This fixes
    the #undef.
    
    Backport from mainline
    2020-02-04  Jonathan Wakely  <jwakely@redhat.com>
    
            * include/std/functional (_GLIBCXX_NOT_FN_CALL_OP): Un-define after
            use.

commit 55925fe3a97c38eb770a9839916d61b219b90d00
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Thu Mar 12 17:39:05 2020 +0000

    libstdc++: Fix test failure due to -Wnonnull warnings
    
    This test fails in the Fedora RPM build (but not elsewhere, for unknown
    reasons). The warning is correct, we're passing a null pointer.
    
    Backport from mainline
    2020-03-12  Jonathan Wakely  <jwakely@redhat.com>
    
            * testsuite/tr1/8_c_compatibility/cstdlib/functions.cc: Do not pass
            a null pointer to functions with nonnull(1) attribute.

commit 2fa3247fef79ede9ec3638605ea137b0e4d76075
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Thu Mar 12 17:39:04 2020 +0000

    libstdc++: Fix FS-dependent filesystem tests
    
    These tests were failing on XFS because it doesn't support setting file
    timestamps past 2038, so the expected overflow when reading back a huge
    timestamp into a file_time_type didn't happen.
    
    Additionally, the std::filesystem::file_time_type::clock has an
    epoch that is out of range of 32-bit time_t so testing times around that
    epoch may also fail.
    
    This fixes the tests to give up gracefully if the filesystem doesn't
    support times that can't be represented in 32-bit time_t.
    
    Backport from mainline
    2020-02-28  Jonathan Wakely  <jwakely@redhat.com>
    
            * testsuite/27_io/filesystem/operations/last_write_time.cc: Fixes for
            filesystems that silently truncate timestamps.
            * testsuite/experimental/filesystem/operations/last_write_time.cc:
            Likewise.

commit 362c8772e7779d9e4730e2e51628ccaadce98bd0
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Thu Mar 12 17:39:04 2020 +0000

    libstdc++: Ensure root-dir converted to forward slash (PR93244)
    
    Backport from mainline
    2020-01-13  Jonathan Wakely  <jwakely@redhat.com>
    
            PR libstdc++/93244
            * include/bits/fs_path.h (path::generic_string<C,A>)
            [_GLIBCXX_FILESYSTEM_IS_WINDOWS]: Convert root-dir to forward-slash.
            * testsuite/27_io/filesystem/path/generic/generic_string.cc: Check
            root-dir is converted to forward slash in generic pathname.
            * testsuite/27_io/filesystem/path/generic/utf.cc: New test.
            * testsuite/27_io/filesystem/path/generic/wchar_t.cc: New test.

commit 08f00a213f8a1b99bbf3ad3c337dea249a288cf1
Author: Richard Earnshaw <rearnsha@arm.com>
Date:   Fri Mar 6 10:04:51 2020 +0000

    arm: correct constraints on movsi_compare0 [PR91913]
    
    The peephole that detects a mov of one register to another followed by
    a comparison of the original register against zero is only used in Arm
    state; but the instruction that matches this is generic to all 32-bit
    compilation states.  That instruction lacks support for SP which is
    permitted in Arm state, but has restrictions in Thumb2 code.
    
    This patch fixes the problem by allowing SP when in ARM state for all
    registers; in Thumb state it allows SP only as a source when the
    register really is copied to another target.
    
    gcc/ChangeLog:
            PR target/91913
            Backport from master
            * config/arm/arm.md (movsi_compare0): Allow SP as a source register
            in Thumb state and also as a destination in Arm state.  Add T16
            variants.
    
    gcc/testsuite/ChangeLog:
            2020-02-10  Jakub Jelinek  <jakub@redhat.com>
    
            PR target/91913
            Backport from master
            * gfortran.dg/pr91913.f90: New test.

commit 716cc43745fb11ea883684d55e62fe2c1694902b
Author: Martin Liska <mliska@suse.cz>
Date:   Thu Mar 12 13:36:17 2020 +0100

    Backport 314b91220a07bd63f13c58e37f1b5b9430a3702b
    
            Backport from mainline
            2020-03-09  Martin Liska  <mliska@suse.cz>
    
            PR target/93800
            * config/rs6000/rs6000.c (rs6000_option_override_internal):
            Remove set of str_align_loops and str_align_jumps as these
            should be set in previous 2 conditions in the function.
            Backport from mainline
            2020-03-09  Martin Liska  <mliska@suse.cz>
    
            PR target/93800
            * gcc.target/powerpc/pr93800.c: New test.

commit 9f26e5863a75744bbee1479792ecae084a3ceb20
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Mar 12 12:38:50 2020 +0100

    Bump BASE-VER to 9.3.1.
    
    2020-03-12  Jakub Jelinek  <jakub@redhat.com>
    
            * BASE-VER: Set to 9.3.1.

commit 4212a6a3e44f870412d9025eeb323fd4f50a61da
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Mar 12 11:08:05 2020 +0000

    Update ChangeLog and version files for release

commit f7589b1c8b7045ee4f5bdf033e05af3fa607c2f2
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Mar 12 00:17:18 2020 +0000

    Daily bump.

commit c9858be2e710de82f7131564121149ba6b1089a6
Author: Eric Botcazou <ebotcazou@gcc.gnu.org>
Date:   Wed Mar 11 10:47:34 2020 +0100

    Fix internal error on locally-defined subpools
    
    If the type is derived in the current compilation unit, and Allocate
    is not overridden on derivation (as is typically the case with
    Root_Storage_Pool_With_Subpools), the entity for Allocate of the
    derived type is an alias for System.Storage_Pools.Subpools.Allocate.
    
    The main assertion in gnat_to_gnu_entity fails in this case, since
    this is not a definition and Is_Public is false (since the entity
    is nested in the same compilation unit).
    
    2020-03-11  Richard Wai  <richard@annexi-strayline.com>
    
            * gcc-interface/decl.c (gnat_to_gnu_entity): Also test Is_Public on
            the Alias of the entitiy, if is present, in the main assertion.

commit 3b0babc396b0af5b6f13898c605f675755fd0d1a
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Mar 11 00:17:22 2020 +0000

    Daily bump.

commit 85c08558c66dd8e2000a4ad282ca03368028fce3
Author: Xionghu Luo <luoxhu@linux.ibm.com>
Date:   Mon Mar 9 20:25:20 2020 -0500

    Backport to gcc-9: PR92398: Fix testcase failure of pr72804.c
    
    Backport the patch to fix failures on P9 and P8BE, P7LE for PR94036.
    Tested pass on P9/P8/P7.
    (gcc-8 is not needed as the test doesn't exists.)
    
    P9LE generated instruction is not worse than P8LE.
    mtvsrdd;xxlnot;stxv vs. not;not;std;std.
    It can have longer latency, but latency via memory is not so critical,
    and this does save decode and other resources.  It's hard to choose
    which is best.  Update the test case to fix failures.
    
    gcc/testsuite/ChangeLog:
    
            2020-03-10  Luo Xiong Hu  <luoxhu@linux.ibm.com>
    
            backport from master.
            PR testsuite/94036
    
            2019-12-02  Luo Xiong Hu  <luoxhu@linux.ibm.com>
    
            PR testsuite/92398
            * gcc.target/powerpc/pr72804.c: Split the store function to...
            * gcc.target/powerpc/pr92398.h: ... this one.  New.
            * gcc.target/powerpc/pr92398.p9+.c: New.
            * gcc.target/powerpc/pr92398.p9-.c: New.
            * lib/target-supports.exp (check_effective_target_p8): New.
            (check_effective_target_p9+): New.

commit 5b1a849ee47a6cd155c86974f926701163c859cd
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Mar 10 00:17:26 2020 +0000

    Daily bump.

commit 7341a55741829054ebb4b6098479762fd569f26c
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Mar 9 00:18:12 2020 +0000

    Daily bump.

commit 3786be028859b2bbeb8c1e66b48776ad1111e6e2
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Mar 7 00:18:25 2020 +0000

    Daily bump.

commit 39bdebf3725d7681e5e9ba06e3862f8facef3572
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Fri Mar 6 12:52:51 2020 +0000

    libstdc++: Fix call to __glibcxx_rwlock_init (PR 94069)
    
    When the target doesn't define PTHREAD_RWLOCK_INITIALIZER we use a
    wrapper around pthread_wrlock_init, but the wrapper only takes one
    argument and we try to call it with two.
    
    This went unnnoticed on most targets because they do define the
    PTHREAD_RWLOCK_INITIALIZER macro, but it causes a bootstrap failure on
    darwin8.
    
    Backport from mainline
    2020-03-06  Jonathan Wakely  <jwakely@redhat.com>
    
            PR libstdc++/94069
            * include/std/shared_mutex [!PTHREAD_RWLOCK_INITIALIZER]
            (__shared_mutex_pthread::__shared_mutex_pthread()): Remove incorrect
            second argument to __glibcxx_rwlock_init.
            * testsuite/30_threads/shared_timed_mutex/94069.cc: New test.

commit c5edde44f5b17b4891f17a63517f355bbf89e7d3
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Mar 6 00:18:37 2020 +0000

    Daily bump.

commit e50627ff8cd54c3983614b34727323b333b9374d
Author: Jason Merrill <jason@redhat.com>
Date:   Thu Mar 5 13:45:38 2020 -0500

    c++: Avoid ICE on infinite recursion with concepts.
    
    This was simple enough to backport even though it's concepts.
    
    gcc/cp/ChangeLog
    2020-03-05  Jason Merrill  <jason@redhat.com>
    
            PR c++/88395
            PR c++/93551
            * constraint.cc (constraints_satisfied_p): Use push_tinst_level.

commit 07d52e63d999a0a10c7598c34c48365a357d3d5a
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Mar 5 19:44:42 2020 +0100

    i386: Fix some -O0 avx2intrin.h and xopintrin.h intrinsic macros [PR94046]
    
    As the testcases show, the macros we have for -O0 for intrinsics that require
    constant argument(s) should first cast the argument to the type the -O1+
    inline uses and afterwards to whatever type e.g. a builtin needs.
    The PR reported one which violated this, and I've grepped for all double-casts
    and grepped out from that meaningful casts where the __m{128,256,512}{,d,i}
    first cast is cast to same sized __v* type and has the same kind of element
    type (float, double, integral).  These 7 macros were using different casts,
    and I've double checked them against the inline function types.
    
    2020-03-05  Jakub Jelinek  <jakub@redhat.com>
    
            PR target/94046
            * config/i386/avx2intrin.h (_mm_mask_i32gather_ps): Fix first cast of
            SRC and MASK arguments to __m128 from __m128d.
            (_mm256_mask_i32gather_ps): Fix first cast of MASK argument to __m256
            from __m256d.
            (_mm_mask_i64gather_ps): Fix first cast of MASK argument to __m128
            from __m128d.
            * config/i386/xopintrin.h (_mm_permute2_pd): Fix first cast of C
            argument to __m128i from __m128d.
            (_mm256_permute2_pd): Fix first cast of C argument to __m256i from
            __m256d.
            (_mm_permute2_ps): Fix first cast of C argument to __m128i from __m128.
            (_mm256_permute2_ps): Fix first cast of C argument to __m256i from
            __m256.
    
            * g++.target/i386/pr94046-1.C: New test.
            * g++.target/i386/pr94046-2.C: New test.

commit 128418afd7ee1bad9185eb88a6e224c2faf90792
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Thu Mar 5 17:32:58 2020 +0000

    libstdc++: Fix some warnings in filesystem tests
    
    There's a -Wunused-but-set-variable warning in operations/all.cc which
    can be fixed with [[maybe_unused]].
    
    The statements in operations/copy.cc give -Wunused-value warnings. I
    think I meant to use |= rather than !=.
    
    And operations/file_size.cc gets -Wsign-compare warnings.
    
    Backport from mainline
    2020-03-05  Jonathan Wakely  <jwakely@redhat.com>
    
            * testsuite/27_io/filesystem/operations/all.cc: Mark unused variable.
            * testsuite/27_io/filesystem/operations/copy.cc: Fix typo.
            * testsuite/experimental/filesystem/operations/copy.cc: Likewise.
            * testsuite/27_io/filesystem/operations/file_size.cc: Use correct type
            for return value, and in comparison.
            * testsuite/experimental/filesystem/operations/file_size.cc: Likewise.

commit 9d0ad2d40ee86ad47913b06b7585d67bd216ce4f
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Thu Mar 5 16:53:20 2020 +0000

    PR libstdc++/91910 fix data race in Debug Mode destructors
    
    Fix data race when _Safe_iterator_base::_M_detach() runs concurrently with
    the _Safe_container_base destructor.
    
    Backport from mainline
    2019-09-27  Jonathan Wakely  <jwakely@redhat.com>
    
            PR libstdc++/91910
            * src/c++11/debug.cc (_Safe_iterator_base::_M_detach()): Load pointer
            atomically and lock the mutex before accessing the sequence.
            (_Safe_local_iterator_base::_M_detach()): Likewise.
            (_Safe_iterator_base::_M_reset()): Clear _M_sequence atomically.

commit 494166791ea6b669f17cf3fbb037000396018420
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Thu Mar 5 16:52:19 2020 +0000

    Add 'noexcept' to std::lerp
    
    Backport from mainline
    2019-06-17  Jonathan Wakely  <jwakely@redhat.com>
    
            * include/c_global/cmath (__lerp, lerp): Add noexcept (LWG 3201).

commit 65d75048c443c6b9e8495c4e6e62df1cbe827912
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Thu Mar 5 16:52:19 2020 +0000

    libstdc++: make negative count safe with std::for_each_n
    
    The Library Working Group have approved a change to std::for_each_n that
    requires it to handle negative N gracefully, which we were not doing for
    random access iterators.
    
    Backport from mainline
    2019-11-07  Jonathan Wakely  <jwakely@redhat.com>
    
            * include/bits/stl_algo.h (for_each_n): Handle negative count.
            * testsuite/25_algorithms/for_each/for_each_n_debug.cc: New test.

commit 08ed34284f4e6ac9a4e647d9caa82ee4b4de0fa3
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Thu Mar 5 16:52:19 2020 +0000

    libstdc++: Avoid using sizeof with function types (PR 93470)
    
    Backport from mainline
    2020-01-28  Jonathan Wakely  <jwakely@redhat.com>
    
            PR libstdc++/93470
            * include/bits/refwrap.h (reference_wrapper::operator()): Restrict
            static assertion to object types.

commit d37244b40d20a54a12ee207a73518ad0f4edd88f
Author: Richard Earnshaw <rearnsha@arm.com>
Date:   Thu Jul 18 13:56:52 2019 +0000

    arm: Fix incorrect modes with 'borrow' operations [PR90311]
    
    Looking through the arm backend I noticed that the modes used to pass
    comparison types into subtract-with-carry operations were being
    incorrectly set.  The result is that the compiler is not truly
    self-consistent.  To clean this up I've introduced a new predicate,
    arm_borrow_operation (borrowed from the AArch64 backend) which can
    match the comparison type with the required mode and then fixed all
    the patterns to use this.  The split patterns that were generating
    incorrect modes have all obviously been fixed as well.
    
    The basic rule for the use of a borrow is:
    - if the condition code was set by a 'subtract-like' operation (subs, cmp),
      then use CCmode and LTU.
    - if the condition code was by unsigned overflow of addition (adds), then
      use CC_Cmode and GEU.
    
    gcc:
            PR target/90311
            Backport from master
            * config/arm/predicates.md (arm_borrow_operation): New predicate.
            * config/arm/arm.c (subdi3_compare1): Use CCmode for the split.
            (arm_subdi3, subdi_di_zesidi, subdi_di_sesidi): Likewise.
            (subdi_zesidi_zesidi): Likewise.
            (negdi2_compare, negdi2_insn): Likewise.
            (negdi_extensidi): Likewise.
            (negdi_zero_extendsidi): Likewise.
            (arm_cmpdi_insn): Likewise.
            (subsi3_carryin): Use arm_borrow_operation.
            (subsi3_carryin_const): Likewise.
            (subsi3_carryin_const0): Likewise.
            (subsi3_carryin_compare): Likewise.
            (subsi3_carryin_compare_const): Likewise.
            (subsi3_carryin_compare_const0): Likewise.
            (subsi3_carryin_shift): Likewise.
            (rsbsi3_carryin_shift): Likewise.
            (negsi2_carryin_compare): Likewise.
    
    gcc/testsuite:
    2020-03-05  Jakub Jelinek  <jakub@redhat.com>
    
            Backport from master
            PR target/90311
            * gcc.c-torture/execute/pr90311.c: New test.

commit 8f34b644549649e8f9b8043b07679eeac2147ff5
Author: Uros Bizjak <ubizjak@gmail.com>
Date:   Thu Mar 5 17:53:03 2020 +0100

    testsuite: Compile asan_test.C with -Wno-alloc-size-larger-than
    
    asan_test.cc tries to allocate 0xf0000000 bytes for 32bit targets in
    a disabled DISABLED_DemoOOM test.  Since the testcase is compiled with
    -Werror, the compilation fails with:
    
    error: argument 1 value '4026531840' exceeds maximum object size 2147483647
    
    Compile with -Wno-alloc-size-larger-than to avoid compilation failure.
    
            * g++.dg/asan/asan_test.C (dg-options): Add
            -Wno-alloc-size-larger-than.

commit 9ca4280a921b0094c7ef131c5c8a63b451ab9a05
Author: Martin Sebor <msebor@redhat.com>
Date:   Thu Mar 5 09:37:25 2020 -0700

    Backport fix for PR c++/93753 from trunk.
    
    gcc/cp/ChangeLog:
            Backport from trunk.
            2020-02-21  Martin Sebor  <msebor@redhat.com>
    
            PR c++/93753
            * class.c (check_flexarrays): Tighten up a test for potential members
            of anonymous structs or unions.
    
    gcc/testsuite/ChangeLog:
    
            Backport from trunk.
            2020-02-21  Martin Sebor  <msebor@redhat.com>
    
            PR c++/93753
            * g++.dg/ext/flexary36.C: New test.

commit c47f6f69745cd41cb7cb00407bf1ff81b2a56124
Author: Jason Merrill <jason@redhat.com>
Date:   Thu Mar 5 10:22:25 2020 -0500

    c++: Fix SFINAE for invalid non-type tparm types.
    
    Just missing the usual SFINAE pattern here.  This was fixed for GCC 10 as a
    drive-by in r277902.
    
    gcc/cp/ChangeLog
    2020-03-05  Jason Merrill  <jason@redhat.com>
    
            PR c++/90338
            * pt.c (invalid_nontype_parm_type_p): Check complain for non-literal
            and mutable errors.

commit 7beafc829c5b122298093ba517023015611aeca8
Author: Paul Thomas <pault@gcc.gnu.org>
Date:   Thu Mar 5 11:01:59 2020 +0100

    Fix ICE in trans_associate_var
    
    2020-03-05  Paul Thomas  <pault@gcc.gnu.org>
    
            Backport from trunk
            PR fortran/92976
            * match.c (select_type_set_tmp): Variable 'selector' to replace
            select_type_stack->selector. If the selector array spec has
            explicit bounds, make the temporary's bounds deferred.
    
    2020-03-05  Paul Thomas  <pault@gcc.gnu.org>
    
            Backport from trunk
            PR fortran/92976
            * gfortran.dg/select_type_48.f90 : New test.

commit e19f06538c51fed54240a4e98277e62daa00d9b3
Author: Jason Merrill <jason@redhat.com>
Date:   Wed Mar 4 23:07:13 2020 -0500

    c++: Fix constexpr ICE from const mismatch [PR91607]
    
    gcc/cp/ChangeLog
    2020-03-04  Jason Merrill  <jason@redhat.com>
    
            PR c++/91607
            * constexpr.c (constexpr_call_hasher::equal): Use
            same_type_ignoring_top_level_qualifiers_p.

commit 1665d97d37559ea7403d5b3e0efd5c5ae416e1ae
Author: Martin Sebor <msebor@redhat.com>
Date:   Wed Mar 4 18:32:40 2020 -0700

    PR c++/90938 - Initializing array with {1} works, but not {0}
    
    gcc/cp/ChangeLog:
    
            PR c++/90938
            * tree.c (type_initializer_zero_p): Fail for structs initialized
            with non-structs.
    
    gcc/testsuite/ChangeLog:
    
            PR c++/90938
            * g++.dg/init/array55.C: New test.
            * g++.dg/init/array56.C: New test.
            * g++.dg/cpp2a/nontype-class33.C: New test.

commit 29bb27b7ef23e92151929f785dbad21c5d148bdc
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Mar 5 00:18:25 2020 +0000

    Daily bump.

commit 2b5d109ba3af320f65cb0707e8733eeea3c96262
Author: Marek Polacek <polacek@redhat.com>
Date:   Wed Mar 4 19:04:31 2020 -0500

    c++: Fix ICE in tsubst_copy with parenthesized expression [PR93299]
    
            PR c++/93299 - ICE in tsubst_copy with parenthesized expression.
            * pt.c (tsubst_copy): Handle a REF_PARENTHESIZED_P VIEW_CONVERT_EXPR.
    
            * g++.dg/cpp1y/paren5.C: New test.

commit d8b65123ea2e7f169c3e3972d3942d73f9b3333c
Author: Marek Polacek <polacek@redhat.com>
Date:   Wed Mar 4 19:02:22 2020 -0500

    sanopt: Avoid crash on anonymous parameter [PR93436]
    
                PR sanitizer/93436
                * sanopt.c (sanitize_rewrite_addressable_params): Avoid crash on
                null DECL_NAME.

commit b38d6242be6aeaf83cdf1f990ff3297a697e4488
Author: Marek Polacek <polacek@redhat.com>
Date:   Wed Mar 4 18:57:08 2020 -0500

    c++: Fix value-init crash in template [PR93676]
    
            PR c++/93676 - value-init crash in template.
            * init.c (build_new_1): Don't call build_vec_init in a template.
    
            * g++.dg/cpp0x/nsdmi-template19.C: New test.

commit 581825efc30ce79d86dfb0ebf378913fdec44adf
Author: Marek Polacek <polacek@redhat.com>
Date:   Wed Mar 4 18:49:37 2020 -0500

    c++: Fix mismatch in template argument deduction [PR90505]
    
    2020-03-03  Jason Merrill  <jason@redhat.com>
                Marek Polacek  <polacek@redhat.com>
    
            PR c++/90505 - mismatch in template argument deduction.
            * pt.c (tsubst): Don't reduce the template level of template
            parameters when tf_partial.
    
            * g++.dg/template/deduce4.C: New test.
            * g++.dg/template/deduce5.C: New test.
            * g++.dg/template/deduce6.C: New test.
            * g++.dg/template/deduce7.C: New test.

commit 9af9e004831f8efdfb68c2affea07b17fadd3279
Author: Jason Merrill <jason@redhat.com>
Date:   Wed Mar 4 17:30:58 2020 -0500

    c++: Fix [[no_unique_address]] and default mem-init [PR90432]
    
    output_constructor doesn't like two consecutive entries with fields at the
    same position; let's avoid adding the one for the empty field.
    
    gcc/cp/ChangeLog
    2020-03-04  Jason Merrill  <jason@redhat.com>
    
            PR c++/90432
            * init.c (perform_member_init): Don't do aggregate initialization of
            empty field.
            * constexpr.c (cx_check_missing_mem_inits): Don't enforce
            initialization of empty field.

commit 831d4a690053599d2d0aa9713642b8513fdf8f5b
Author: Jason Merrill <jason@redhat.com>
Date:   Wed Mar 4 17:30:58 2020 -0500

    c++: avoid ICE with __builtin_memset (PR90997).
    
    warn_for_memset calls fold_for_warn, which calls fold_non_dependent_expr, so
    also calling instantiate_non_dependent_expr here is undesirable.
    
    gcc/cp/ChangeLog
    2020-03-04  Jason Merrill  <jason@redhat.com>
    
            PR c++/90997
            * semantics.c (finish_call_expr): Don't call
            instantiate_non_dependent_expr before warn_for_memset.

commit bde2e6e59829f746f3b1191ca4bfedf3313ad6eb
Author: Will Schmidt <will_schmidt@vnet.ibm.com>
Date:   Wed Mar 4 10:34:33 2020 -0600

    Remove unnecessary XFAILs from existing testcase 20050603-3.c.
    
    The XFAILs in this testcase (20050603-3.c) are no longer necessary
    since the fix to PR68803 was committed with svn revision r242681.
    
    2020-03-04  Will Schmidt  <will_schmidt@vnet.ibm.com>
    
    testsuite
    
            * gcc.target/powerpc/20050603-3.c: Remove XFAILS.

commit f33d2797d4f4f71eb362e1b99d29b9bc01a22319
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Feb 27 09:38:12 2020 +0100

    maintainer-scripts: Speed up git clone in gcc_release
    
    When doing the 8.4-rc1, I've noticed (probably also because of the dying
    disk on sourceware) that git clone is extremely slow, and furthermore when
    all of us have some local snapshots, it is a waste of resources to download
    everything again.  Especially for the -f runs when we'll need to wait until
    git tag -s asks us for a gpg password interactively.
    
    The following patch adds an option through which one can point the script
    at a local gcc .git directory from which it can --dissociate --reference ...
    during cloning to speed it up.
    
    2020-02-27  Jakub Jelinek  <jakub@redhat.com>
    
            * gcc_release: Add support for -b local-git-repo argument.

commit 7b20c8645a5c65b85a25d57e2e99376457d7a417
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Mar 4 00:18:24 2020 +0000

    Daily bump.

commit 224ca3bfe8cf1c1a530dedde9e007a38d4d04f30
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Tue Mar 3 10:17:15 2020 +0000

    Darwin, libsanitizer: Update minimum supported system version.
    
    The imported sources from 'upstream' do not support Darwin10
    or earlier, so do not enable these by default.

commit e913d4f4771e04d4254bf6c0e720fec5e324a898
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Mar 3 10:42:34 2020 +0100

    explow: Fix ICE caused by plus_constant [PR94002]
    
    The following testcase ICEs in cross to riscv64-linux.  The problem is
    that we have a DImode integral constant (that doesn't fit into SImode),
    which is pushed into a constant pool and later access just the first half of
    it using a MEM.  When plus_constant is called on such a MEM, if the constant
    has mode, we verify the mode, but if it doesn't, we don't and ICE later on
    when we think the CONST_INT is a valid SImode constant.
    
    2020-03-03  Jakub Jelinek  <jakub@redhat.com>
    
            PR rtl-optimization/94002
            * explow.c (plus_constant): Punt if cst has VOIDmode and
            get_pool_mode is different from mode.
    
            * gcc.dg/pr94002.c: New test.

commit 010204594d97d7f20af4f49d3a65302e371b046f
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Mar 3 00:18:29 2020 +0000

    Daily bump.

commit 054aeaef276572c2ccbedbd7aa86046be338603c
Author: Jason Merrill <jason@redhat.com>
Date:   Mon Mar 2 14:42:47 2020 -0500

    c++: Fix ({ ... }) array mem-initializer.
    
    Here, we were going down the wrong path in perform_member_init because of
    the incorrect parens around the mem-initializer for the array.  And then
    cxx_eval_vec_init_1 didn't know what to do with a CONSTRUCTOR as the
    initializer.  For GCC 9, let's just fix the latter issue.
    
    gcc/cp/ChangeLog
    2020-03-02  Jason Merrill  <jason@redhat.com>
    
            PR c++/86917
            * constexpr.c (cxx_eval_vec_init_1): Handle CONSTRUCTOR.

commit b4e53e9b3c963b1c0fe9637618dec8042764f599
Author: Jason Merrill <jason@redhat.com>
Date:   Mon Mar 2 14:42:47 2020 -0500

    c++: Allow parm of empty class type in constexpr.
    
    Since copying a class object is defined in terms of the copy constructor,
    copying an empty class is OK even if it would otherwise not be usable in a
    constant expression.  Relatedly, using a parameter as an lvalue is no more
    problematic than a local variable, and calling a member function uses the
    object as an lvalue.
    
    gcc/cp/ChangeLog
    2020-03-02  Jason Merrill  <jason@redhat.com>
    
            PR c++/91953
            * constexpr.c (potential_constant_expression_1) [PARM_DECL]: Allow
            empty class type.
            [COMPONENT_REF]: A member function reference doesn't use the object
            as an rvalue.

commit f137a7c6b122e524294fb792bb97d5f3b0600c4f
Author: Jason Merrill <jason@redhat.com>
Date:   Mon Mar 2 14:42:47 2020 -0500

    c++: Fix cast to pointer to VLA.
    
    The C front-end fixed this issue in r257620 by adding a DECL_EXPR from
    grokdeclarator.  We don't have an easy way to do that in the C++ front-end,
    but it works fine to create and prepend a DECL_EXPR when we are genericizing
    the NOP_EXPR for the cast.
    
    The C patch wraps the DECL_EXPR in a BIND_EXPR, but that seems unnecessary
    in C++; this is just a hook to run gimplify_type_sizes, we aren't actually
    declaring anything that we need to worry about scoping for.
    
    gcc/cp/ChangeLog
    2020-03-02  Jason Merrill  <jason@redhat.com>
    
            PR c++/88256
            * cp-gimplify.c (predeclare_vla): New.
            (cp_genericize_r) [NOP_EXPR]: Call it.

commit 9d5df8e3221c5fe5c8aca0334655b075bd9ea556
Author: Jason Merrill <jason@redhat.com>
Date:   Mon Mar 2 14:42:47 2020 -0500

    checking: avoid verify_type_variant crash on incomplete type.
    
    Here, we end up calling gen_type_die_with_usage for a type that's in the
    middle of finish_struct_1, after we set TYPE_NEEDS_CONSTRUCTING on it but
    before we copy all the flags to the variants--and, significantly, before we
    set its TYPE_SIZE.  It seems reasonable to only look at
    TYPE_NEEDS_CONSTRUCTING on complete types, since we aren't going to try to
    create an object of an incomplete type any other way.
    
    gcc/ChangeLog
    2020-03-02  Jason Merrill  <jason@redhat.com>
    
            PR c++/92601
            * tree.c (verify_type_variant): Only verify TYPE_NEEDS_CONSTRUCTING
            of complete types.

commit e83a2d943a1affc8d945430b8feca290169fe3d7
Author: Jason Merrill <jason@redhat.com>
Date:   Mon Mar 2 14:42:47 2020 -0500

    c++: Fix return deduction of lambda in discarded stmt.
    
    A return statement in a discarded statement is not used for return type
    deduction, but we still want to do deduction for a return statement in a
    lambda in a discarded statement.
    
    gcc/cp/ChangeLog
    2020-03-02  Jason Merrill  <jason@redhat.com>
    
            PR c++/93442
            * parser.c (cp_parser_lambda_expression): Clear in_discarded_stmt.

commit 1ccbda907d1fd3a202ff2bd951828cc97abb1a8d
Author: Jason Merrill <jason@redhat.com>
Date:   Mon Mar 2 14:42:47 2020 -0500

    PR c++/90732 - ICE with VLA capture and generic lambda.
    
    We were failing to handle VLA capture in tsubst_lambda_expr; initially
    building a DECLTYPE_TYPE for the capture and then tsubsting it doesn't give
    the special VLA handling.  So with this patch we call add_capture again for
    VLAs.
    
    gcc/cp/ChangeLog
    2020-03-02  Jason Merrill  <jason@redhat.com>
    
            PR c++/90732 - ICE with VLA capture and generic lambda.
            * pt.c (tsubst_lambda_expr): Repeat add_capture for VLAs.

commit 166c024a1969ca9e77ed450fb65ce5c926a315dc
Author: Jason Merrill <jason@redhat.com>
Date:   Mon Mar 2 14:42:47 2020 -0500

    c++: Fix attributes with lambda and trailing return type.
    
    My fix for 60503 fixed handling of C++11 attributes following the
    lambda-declarator.  My patch for 89640 re-added support for GNU attributes,
    but attributes after the trailing return type were parsed as applying to the
    return type rather than to the function.  This patch adjusts parsing of a
    trailing-return-type to ignore GNU attributes at the end of the declaration
    so that they will be applied to the declaration as a whole.
    
    I also considered parsing the attributes between the closing paren and the
    trailing-return-type, and tried a variety of approaches to implementing
    that, but I think it's better to stick with the documented rule that "An
    attribute specifier list may appear immediately before the comma, '=' or
    semicolon terminating the declaration of an identifier...."  Anyone
    disagree?
    
    Meanwhile, C++ committee discussion about the lack of any way to apply
    attributes to a lambda op() seems to have concluded that they should go
    between the introducer and declarator, so I've implemented that as well.
    
    gcc/cp/ChangeLog
    2020-03-02  Jason Merrill  <jason@redhat.com>
    
            PR c++/90333
            PR c++/89640
            PR c++/60503
            * parser.c (cp_parser_type_specifier_seq): Don't parse attributes in
            a trailing return type.
            (cp_parser_lambda_declarator_opt): Parse C++11 attributes before
            parens.

commit cb54729240b30f187a143e5e84193f5bb5029a40
Author: H.J. Lu <hjl.tools@gmail.com>
Date:   Mon Mar 2 03:08:57 2020 -0800

    lto: Also copy .note.gnu.property section
    
    When generating the separate file with LTO debug sections, we should
    also copy .note.gnu.property section.
    
            PR lto/93966
            * simple-object.c (handle_lto_debug_sections): Also copy
            .note.gnu.property section.
    
    (cherry picked from commit 577350603a657590c4b54a4a966cb49497e2514c)

commit 6bf890660d9131c7f2333ee01bf598da3b73dbb1
Author: Peter Bergner <bergner@linux.ibm.com>
Date:   Mon Mar 2 09:42:43 2020 +0100

    Readd ChangeLog entries for
    
    r9-8308-g8fdde048c9e40b9ef4de14612326378d4831ac49^..r9-8311-ga0e22367235f5cd092f9d7800f17081ca4dc79e8
    
    plus add entries for their reversion.

commit eaaee438bf836c2c1ed3424ecbf85de3ed941e87
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Mar 2 00:18:23 2020 +0000

    Daily bump.

commit 4630b748e63c9ae8fcb19fa22ea6148e7cfac7e9
Author: H.J. Lu <hjl.tools@gmail.com>
Date:   Sun Mar 1 06:13:28 2020 -0800

    x32: Update baseline_symbols.txt
    
            * config/abi/post/x86_64-linux-gnu/x32/baseline_symbols.txt: Updated.
    
    (cherry picked from commit fed76afb95af5ec24c9681cacfae73532a104508)

commit c799cb1de9464edf294efb2c28f935d4accff180
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Mar 1 00:18:41 2020 +0000

    Daily bump.

commit d00fd3cfc0e1a0cbee15c70dc6e95912a3086785
Author: John David Anglin <danglin@gcc.gnu.org>
Date:   Sat Feb 29 22:37:28 2020 +0000

    Fix/skip various tests for hppa*-*-hpux*.
    
            2020-02-29  John David Anglin  <danglin@gcc.gnu.org>
    
            * gcc.dg/pr90756.c: Add -fno-common option on hppa*-*-hpux*.
            * gcc.dg/torture/20190327-1.c: Likewise.
            * gcc.dg/torture/pr90020.c: Skip on hppa*-*-hpux*.

commit a0e22367235f5cd092f9d7800f17081ca4dc79e8
Author: Peter Bergner <bergner@linux.ibm.com>
Date:   Sat Feb 29 16:30:48 2020 -0600

    Revert "Fix bad code of vector extract of PC-relative address with variable element #."
    
    This reverts commit 48558cdf49373ba508cf8d7fcaaafb383316f644.
    See PR93974.

commit c24e19618909bf8dd288aeb0422aa4cc358208de
Author: Peter Bergner <bergner@linux.ibm.com>
Date:   Sat Feb 29 16:30:32 2020 -0600

    Revert "Adjust how variable vector extraction is done."
    
    This reverts commit 428a4feef8594142e5324c0f5cfc8281e43bf75a.
    See PR93974.

commit b060b7424f404467ddb90f52112494943565ade1
Author: Peter Bergner <bergner@linux.ibm.com>
Date:   Sat Feb 29 16:30:07 2020 -0600

    Revert "rs6000: Fix infinite loop building ghostscript and icu [PR93658]"
    
    This reverts commit 066184a282b622ac6880150eb4e42fe57881b606.
    See PR93974.

commit 8fdde048c9e40b9ef4de14612326378d4831ac49
Author: Peter Bergner <bergner@linux.ibm.com>
Date:   Sat Feb 29 16:29:19 2020 -0600

    Revert "rs6000: Fix more testsuite fallout from rs6000_legitimate_address_p() fix. [PR93913]"
    
    This reverts commit 98529e6d7408e896cb74c327ae60b3ccea055d9c.
    See PR93974.

commit fa8a705d1f86ca9e576244eb9ae259ed63db4786
Author: John David Anglin <danglin@gcc.gnu.org>
Date:   Sat Feb 29 22:25:04 2020 +0000

    Fix libbacktrace build on hppa-hpux.
    
            2020-02-29  John David Anglin  <danglin@gcc.gnu.org>
    
            Backport from mainline
            2019-09-26  Ian Lance Taylor  <iant@golang.org>
    
            PR libbacktrace/91908
            * pecoff.c (backtrace_initialize): Explicitly cast unchecked
            __sync_bool_compare_and_swap to void.
            * xcoff.c (backtrace_initialize): Likewise.

commit c3fed15104ef3379d2664842dec1e4efdd6b7c6f
Author: John David Anglin <danglin@gcc.gnu.org>
Date:   Sat Feb 29 21:07:08 2020 +0000

    Skip charset.cc tests on *-*-hpux*.
    
            2020-02-29  John David Anglin  <danglin@gcc.gnu.org>
    
            * testsuite/17_intro/headers/c++1998/charset.cc: Skip on *-*-hpux*.
            * testsuite/17_intro/headers/c++2011/charset.cc: Likewise.
            * testsuite/17_intro/headers/c++2014/charset.cc: Likewise.
            * testsuite/17_intro/headers/c++2017/charset.cc: Likewise.
            * testsuite/17_intro/headers/c++2020/charset.cc: Likewise.

commit 11d93ca76c04f79e43b6e39ab8658b07c0475932
Author: John David Anglin <danglin@gcc.gnu.org>
Date:   Sat Feb 29 20:39:09 2020 +0000

    Disable gnat.dg/socket1.adb on hppa*-*-hpux*.
    
            2020-02-29  John David Anglin  <danglin@gcc.gnu.org>
    
            PR ada/91100
            * gnat.dg/socket1.adb: Disable on hppa*-*-hpux*.

commit d3a2867484c01e90e2b2ea02000016e8f1832683
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Feb 29 00:18:33 2020 +0000

    Daily bump.

commit 9179ae6a0df27e3d3830ee42f755dc7d76cb0423
Author: Martin Liska <mliska@suse.cz>
Date:   Fri Feb 28 18:52:55 2020 +0100

    Backport 08bf7bde9f2987b1c623d272cc71fc14a1622442
    
            Backport from mainline
            2020-02-28  Martin Liska  <mliska@suse.cz>
    
            PR other/93965
            * configure.ac: Improve detection of ld_date by requiring
            either two dashes or none.
            * configure: Regenerate.

commit 9d8aaf46f079e4ca081171a9f15baf22f7d3ca82
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Feb 28 00:19:11 2020 +0000

    Daily bump.

commit 98529e6d7408e896cb74c327ae60b3ccea055d9c
Author: Peter Bergner <bergner@linux.ibm.com>
Date:   Wed Feb 26 11:58:08 2020 -0600

    rs6000: Fix more testsuite fallout from rs6000_legitimate_address_p() fix. [PR93913]
    
            Backport from trunk
            2020-02-26  Peter Bergner  <bergner@linux.ibm.com>
    
            PR target/93913
            * gcc.target/powerpc/fold-vec-st-char.c (scan-assembler-times): Allow
            stxv and stxvx instructions as well.
            * gcc.target/powerpc/fold-vec-st-float.c: Likewise.
            * gcc.target/powerpc/fold-vec-st-int.c: Likewise.
            * gcc.target/powerpc/fold-vec-st-short.c: Likewise.

commit b51057817d9a1aee4f24372f8c97f81f372c0a21
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Feb 27 10:45:30 2020 +0100

    gimplify: Don't optimize register const vars to static [PR93949]
    
    The following testcase is rejected, while it was accepted in 3.4 and earlier
    (before tree-ssa merge).
    The problem is that we decide to promote the const variable to TREE_STATIC,
    but TREE_STATIC DECL_REGISTER VAR_DECLs may only be the global register vars
    and so assemble_variable/make_decl_rtl diagnoses it.
    
    Either we do what the following patch does, where we could consider
    register as a hint the user doesn't want such optimization, because if
    something is forced static, it is not "register" anymore and register static
    is not valid in C either, or we could clear DECL_REGISTER instead, but would
    still need to punt at least on DECL_HARD_REGISTER cases.
    
    2020-02-27  Jakub Jelinek  <jakub@redhat.com>
    
            PR c/93949
            * gimplify.c (gimplify_init_constructor): Don't promote readonly
            DECL_REGISTER variables to TREE_STATIC.
    
            * gcc.c-torture/compile/pr93949.c: New test.

commit a460bf38dc3582ce1f559cc84084ca27e429b34c
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Feb 27 11:21:52 2020 +0100

    sccvn: Punt on ref->size not multiple of 8 for memset (, 123, ) in 9.x [PR93945]
    
    And here is the corresponding 9.x change where we the patch just punts if
    ref->size is not whole bytes, like we already punt if offseti is not byte
    aligned.
    
    2020-02-27  Jakub Jelinek  <jakub@redhat.com>
    
            PR tree-optimization/93945
            * tree-ssa-sccvn.c (vn_reference_lookup_3): For memset with non-zero
            second operand, require ref->size to be a multiple of BITS_PER_UNIT.
    
            * gcc.c-torture/execute/pr93945.c: New test.

commit 526fadb010978c63dd06c0a85da3c4e1b5b1c63d
Author: Carl Love <carll@us.ibm.com>
Date:   Wed Feb 26 18:22:46 2020 -0600

    PPC64, fix documentation for __builtin_crypto_vpmsum* builtin functions.
    
    PR target/91276 - Doc typos in __builtin_crypto_vpmsum*
    
    gcc/ChangeLog:
    
    2020-02-26  Carl Love  <cel@us.ibm.com>
    
            PR target/91276
            * doc/extend.texi (PowerPC AltiVec Built-in Functions available on
            ISA 3.0): The builtin-function name __builtin_crypto_vpmsumb is only
            for the vector unsigned short arguments.  It is also listed as the
            name of the built-in for arguments vector unsigned short,
            vector unsigned int and vector unsigned long long built-ins.  The
            name of the builtins for these arguments should be:
            __builtin_crypto_vpmsumh, __builtin_crypto_vpmsumw and
            __builtin_crypto_vpmsumd respectively.

commit 24ed8ed3645807b70a600dc722d38a34f150c622
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Feb 27 00:18:33 2020 +0000

    Daily bump.

commit 096ba1951f5e67dfa4ed270753e29d652bc69fa9
Author: Joseph Myers <joseph@codesourcery.com>
Date:   Wed Feb 26 21:08:19 2020 +0000

    Revert "setup branch"
    
    This reverts commit 65e894738f629a388847f38687c9af2b05233526.
    
    Commit appears to have been made on the wrong branch, and breaks
    contrib/gcc_update because it checks in a file gcc/REVISION.

commit 65e894738f629a388847f38687c9af2b05233526
Author: Michael Meissner <meissner@gcc.gnu.org>
Date:   Wed Feb 26 15:56:56 2020 -0500

    setup branch

commit c890c9650f3c4b1be1f39eabb74b438c033a8c08
Author: Marek Polacek <polacek@redhat.com>
Date:   Fri Dec 20 23:30:04 2019 +0000

    PR c++/92745 - bogus error when initializing array of vectors.
    
    In r268428 I changed reshape_init_r in such a way that when it sees
    a nested { } in a CONSTRUCTOR with missing braces, it just returns
    the initializer:
    +     else if (COMPOUND_LITERAL_P (stripped_init)
    ...
    +         ++d->cur;
    +         gcc_assert (!BRACE_ENCLOSED_INITIALIZER_P (stripped_init));
    +         return init;
    
    But as this test shows, that's incorrect: if TYPE is an array, we need
    to proceed to reshape_init_array_1 which will iterate over the array
    initializers:
     6006   /* Loop until there are no more initializers.  */
     6007   for (index = 0;
     6008        d->cur != d->end && (!sized_array_p || index <= max_index_cst);
     6009        ++index)
     6010     {
    and update d.cur accordingly.  In other words, when reshape_init gets
    
    {{col[0][0], col[1][0], col[2][0], col[3][0]},
     {col[0][1], col[1][1], col[2][1], col[3][1]},
     {col[0][2], col[1][2], col[2][2], col[3][2]},
     {col[0][3], col[1][3], col[2][3], col[3][3]}}
    
    we recurse on the first element:
      {col[0][0], col[1][0], col[2][0], col[3][0]}
    and we can't just move d.cur to point to
      {col[0][1], col[1][1], col[2][1], col[3][1]}
    and return; we need to iterate, so that d.cur ends up being properly
    updated, and after all initializers have been seen, points to d.end.
    Currently we skip the loop, wherefore we hit this:
    
     6502   /* Make sure all the element of the constructor were used. Otherwise,
     6503      issue an error about exceeding initializers.  */
     6504   if (d.cur != d.end)
     6505     {
     6506       if (complain & tf_error)
     6507         error ("too many initializers for %qT", type);
     6508       return error_mark_node;
     6509     }
    
    gcc/cp/ChangeLog
    2019-12-19  Marek Polacek  <polacek@redhat.com>
    
            PR c++/92745 - bogus error when initializing array of vectors.
            * decl.c (reshape_init_r): For a nested compound literal, do
            call reshape_init_{class,array,vector}.
    
    gcc/testsuite/ChangeLog
    2019-12-19  Marek Polacek  <polacek@redhat.com>
                Jakub Jelinek  <jakub@redhat.com>
    
            PR c++/92745 - bogus error when initializing array of vectors.
            * g++.dg/cpp0x/initlist118.C: New test.
            * g++.dg/cpp0x/initlist118.C: Add -Wno-psabi -w to dg-options.

commit f2f70af7c52720a0905a455425de0d6ca4fb1dc4
Author: Jason Merrill <jason@redhat.com>
Date:   Wed Feb 26 13:03:23 2020 -0500

    cgraph: A COMDAT decl always has non-zero address.
    
    We should be able to assume that a template instantiation or other COMDAT
    has non-zero address even if MAKE_DECL_ONE_ONLY for the target sets
    DECL_WEAK and we haven't yet decided to emit a definition in this
    translation unit.
    
    gcc/ChangeLog
    2020-02-26  Jason Merrill  <jason@redhat.com>
    
            PR c++/92003
            * symtab.c (symtab_node::nonzero_address): A DECL_COMDAT decl has
            non-zero address even if weak and not yet defined.

commit c51ac41714469104ee6120db3eedfb0964290502
Author: Jason Merrill <jason@redhat.com>
Date:   Wed Feb 26 13:03:23 2020 -0500

    c++: Fix constexpr vs. omitted aggregate init.
    
    Value-initialization is importantly different from {}-initialization for
    this testcase, where the former calls the deleted S constructor and the
    latter initializes S happily.
    
    gcc/cp/ChangeLog
    2020-02-26  Jason Merrill  <jason@redhat.com>
    
            PR c++/90951
            * constexpr.c (cxx_eval_array_reference): {}-initialize missing
            elements instead of value-initializing them.

commit 1a8996b0a7b238180f4a10b19b1e90b33e5b2df0
Author: Jason Merrill <jason@redhat.com>
Date:   Wed Feb 26 13:03:23 2020 -0500

    c++: Fix decltype of empty pack expansion of parm.
    
    In unevaluated context, we only substitute a single PARM_DECL, not the
    entire chain, but the handling of an empty pack expansion was missing that
    check.
    
    gcc/cp/ChangeLog
    2020-02-26  Jason Merrill  <jason@redhat.com>
    
            PR c++/93140
            * pt.c (tsubst_decl) [PARM_DECL]: Check cp_unevaluated_operand in
            handling of TREE_CHAIN for empty pack.

commit b6678d67c4b7471c25130b6c60a9087e02f31179
Author: Jason Merrill <jason@redhat.com>
Date:   Wed Feb 26 13:03:23 2020 -0500

    c++: Preserve location in maybe_constant_value.
    
    If cxx_eval_outermost_constant_expr doesn't change the argument, we really
    shouldn't unshare it when we try to fold it again.
    
    gcc/cp/ChangeLog
    2020-02-26  Jason Merrill  <jason@redhat.com>
    
            PR c++/92852
            * constexpr.c (maybe_constant_value): Don't unshare if the cached
            value is the same as the argument.

commit a29236a23c03fe08998b81a0ef1f67e7ea185ba3
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Wed Feb 26 16:31:19 2020 +0000

    libstdc++: Fix undefined behaviour in random dist serialization (PR93205)
    
    The deserialization functions for random number distributions fail to
    check the stream state before using the extracted values. In some cases
    this leads to using indeterminate values to resize a vector, and then
    filling that vector with indeterminate values.
    
    No values that affect control flow should be used without checking that a
    good value was read from the stream.
    
    Additionally, where reasonable to do so, defer modifying any state in
    the distribution until all values have been successfully read, to avoid
    modifying some of the distribution's parameters and leaving others
    unchanged.
    
    Backport from mainline
    2020-01-09  Jonathan Wakely  <jwakely@redhat.com>
    
            PR libstdc++/93205
            * include/bits/random.h (operator>>): Check stream operation succeeds.
            * include/bits/random.tcc: (operator>>): Likewise.
            (__extract_params): New function to fill a vector from a stream.
            * testsuite/26_numerics/random/pr60037-neg.cc: Adjust dg-error line.

commit 7a7ef79651abd20b95d1f76479887d1ea008a62f
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Wed Feb 26 16:31:19 2020 +0000

    libstdc++: Fix description of std::ios::trunc (PR 92886)
    
    Backport from mainline
    2019-12-10  Jonathan Wakely  <jwakely@redhat.com>
    
            PR libstdc++/92886
            * include/bits/ios_base.h (std::ios_base::trunc): Fix comment.

commit 53280279777e8390f374af35fb58634048a45730
Author: Matheus Castanho <msc@linux.ibm.com>
Date:   Thu Feb 13 23:43:39 2020 +0000

    rs6000: fixinc: Skip machine_name fix for powerpc*-*-linux*
    
    Some system headers can be broken by the machine_name fix performed
    by GCC during the fixincludes step. According to the comment in
    fixincludes/fixinc.h:130 :
    
       On some platforms, machine_name doesn't work properly and
       breaks some of the header files.  Since everything works
       properly without it, just wipe the macro list to
       disable the fix.
    
    So we can just skip it to avoid trouble.
    
            Backport from trunk
            2020-02-13  Matheus Castanho  <msc@linux.ibm.com>
    
    fixincludes/
            * fixinc.in: Skip machine_name fix on powerpc*-*-linux*.

commit 08a70a65670ee801d4190ec122d42aa4a9a997a9
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Wed Feb 26 15:32:34 2020 +0000

    libstdc++: Replace glibc-specific check for clock_gettime (PR 93325)
    
    It's wrong to assume that clock_gettime is unavailable on any *-*-linux*
    target that doesn't have glibc 2.17 or later. Use a generic test instead
    of using __GLIBC_PREREQ. Only do that test when is_hosted=yes so that we
    don't get an error for cross targets without a working linker.
    
    This ensures that C library's clock_gettime will be used on non-glibc
    targets, instead of an incorrect syscall to SYS_clock_gettime.
    
    Backport from mainline
    2020-01-28  Jonathan Wakely  <jwakely@redhat.com>
    
            PR libstdc++/93325
            * acinclude.m4 (GLIBCXX_ENABLE_LIBSTDCXX_TIME): Use AC_SEARCH_LIBS for
            clock_gettime instead of explicit glibc version check.
            * configure: Regenerate.

commit 30cb4c78ea6563177c43f897e480d9993c38c0ed
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Wed Feb 26 15:04:53 2020 +0000

    libstdc++: Fix regressions in unique_ptr::swap (PR 93562)
    
    The requirements for this function are only that the deleter is
    swappable, but we incorrectly require that the element type is complete
    and that the deleter can be swapped using std::swap (which requires it
    to be move cosntructible and move assignable).
    
    The fix is to add __uniq_ptr_impl::swap which swaps the pointer and
    deleter individually, instead of using the generic std::swap on the
    tuple containing them.
    
            PR libstdc++/93562
            * include/bits/unique_ptr.h (__uniq_ptr_impl::swap): Define.
            (unique_ptr::swap, unique_ptr<T[], D>::swap): Call it.
            * testsuite/20_util/unique_ptr/modifiers/93562.cc: New test.

commit 1b522a79133037f04c8ffcdfbe6c885ccb3ddcd3
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Wed Feb 26 14:20:55 2020 +0000

    libstdc++: Fix freestanding build (PR 92376)
    
    In a freestanding library we don't install the <pstl/pstl_config.h>
    header, so don't try to include it unless it exists.
    
    Explicitly declare aligned alloc functions for freestanding, because
    <cstdlib> doesn't declare them.
    
    Backport from mainline
    2020-01-17  Jonathan Wakely  <jwakely@redhat.com>
    
            PR libstdc++/92376
            * include/bits/c++config: Only do PSTL config when the header is
            present, to fix freestanding.
            * libsupc++/new_opa.cc [!_GLIBCXX_HOSTED]: Declare allocation
            functions if they were detected by configure.

commit 84a5534ce2f8233e6fe9c957ec51a2328bfe60e3
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Wed Feb 26 14:00:07 2020 +0000

    PR libstdc++/78552 only construct std::locale for C locale once
    
    Backport from mainline
    2019-10-09  Jonathan Wakely  <jwakely@redhat.com>
    
            PR libstdc++/78552
            * src/c++98/locale_init.cc (locale::classic()): Do not construct a new
            locale object for every call.
            (locale::_S_initialize_once()): Construct C locale here.

commit 0ce89ea10d93a583854f02bc115e05cfd9d818e4
Author: Jiufu Guo <guojiufu@linux.ibm.com>
Date:   Mon Feb 17 10:48:39 2020 +0800

    rs6000: mark clobber for registers changed by untpyed_call
    
    As PR93047 said, __builtin_apply/__builtin_return does not work well with
    -frename-registers.  This is caused by return register(e.g. r3) is used to
    rename another register, before return register is stored to stack.
    This patch fix this issue by emitting clobber for those egisters which
    maybe changed by untyped call.
    
    gcc/
    2020-02-26  Jiufu Guo  <guojiufu@linux.ibm.com>
    
            PR target/93047
            * config/rs6000/rs6000.md (untyped_call): Add emit_clobber.
    
    gcc/testsuite
    2020-02-26  Jiufu Guo  <guojiufu@linux.ibm.com>
    
            PR target/93047
            * gcc.dg/torture/stackalign/builtin-return-2.c: New test case.

commit d0eff1793dc844c2a9532d8ef1a07ba137cfb4e6
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Wed Feb 26 09:33:48 2020 +0100

    store-merging: Fix coalesce_immediate_stores [PR93820]
    
    The following testcase is miscompiled in 8+.
    The problem is that check_no_overlap has a special case for INTEGER_CST
    marked stores (i.e. stores of constants), if both all currenly merged stores
    and the one under consideration for merging with them are marked that way,
    it anticipates that other INTEGER_CST marked stores that overlap with those
    and precede those (have smaller info->order) could be merged with those and
    doesn't punt for them.
    In PR86844 and PR87859 fixes I've then added quite large code that is
    performed after check_no_overlap and tries to find out if we need and can
    merge further INTEGER_CST marked stores, or need to punt.
    Unfortunately, that code is there only in the overlapping case code and
    the testcase below shows that we really need it even in the adjacent store
    case.  After sort_by_bitpos we have:
    bitpos  width   order   rhs_code
    96      32      3       INTEGER_CST
    128     32      1       INTEGER_CST
    128     128     2       INTEGER_CST
    192     32      0       MEM_REF
    Because of the missing PR86844/PR87859-ish code in the adjacent store
    case, we merge the adjacent (memory wise) stores 96/32/3 and 128/32/1,
    and then we consider the 128-bit store which is in program-order in between
    them, but in this case we punt, because the merging would extend the
    merged store region from bitpos 96 and 64-bits to bitpos 96 and 160-bits
    and that has an overlap with an incompatible store (the MEM_REF one).
    The problem is that we can't really punt this way, because the 128-bit
    store is in between those two we've merged already, so either we manage
    to merge even that one together with the others, or would need to avoid
    already merging the 96/32/3 and 128/32/1 stores together.
    Now, rather than copying around the PR86844/PR87859 code to the other spot,
    we can actually just use the overlapping code, merge_overlapping is really
    a superset of merge_into, so that is what the patch does.  If doing
    adjacent store merge for rhs_code other than INTEGER_CST, I believe the
    current code is already fine, check_no_overlap in that case doesn't make
    the exception and will punt if there is some earlier (smaller order)
    non-mergeable overlapping store.  There is just one case that could be
    problematic, if the merged_store has BIT_INSERT_EXPRs in them and the
    new store is a constant store (INTEGER_CST rhs_code), then check_no_overlap
    would do the exception and still would allow the special case.  But we
    really shouldn't have the special case in that case, so this patch also
    changes check_no_overlap to just have a bool whether we should have the
    special case or not.
    
    Note, as I said in the PR, for GCC11 we could consider performing some kind
    of cheap DSE during the store merging (perhaps guarded with flag_tree_dse).
    And another thing to consider is only consider as problematic non-mergeable
    stores that not only have order smaller than last_order as currently, but
    also have order larger than first_order, as in this testcase if we actually
    ignored (not merged with anything at all) the 192/32/0 store, because it is
    not in between the other stores we'd merge, it would be fine to merge the
    other 3 stores, though of course the testcase can be easily adjusted by
    putting the 192/32 store after the 128/32 store and then this patch would be
    still needed.  Though, I think I'd need more time thinking this over.
    
    2020-02-26  Jakub Jelinek  <jakub@redhat.com>
    
            PR tree-optimization/93820
            * gimple-ssa-store-merging.c (check_no_overlap): Change RHS_CODE
            argument to ALL_INTEGER_CST_P boolean.
            (imm_store_chain_info::try_coalesce_bswap): Adjust caller.
            (imm_store_chain_info::coalesce_immediate_stores): Likewise.  Handle
            adjacent INTEGER_CST store into merged_store->only_constants like
            overlapping one.
    
            * gcc.dg/pr93820.c: New test.

commit c6b81c451983f1b9a6e184f137819abf4978eddd
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Wed Feb 26 09:04:44 2020 +0100

    c++: Fix rejects-valid bug in cxx_eval_outermost_constant_expr [PR93905]
    
    Add testcase for a bug that has been just on the 8 branch.
    
    2020-02-26  Jakub Jelinek  <jakub@redhat.com>
    
            PR c++/93905
            * g++.dg/cpp0x/pr93905.C: New test.

commit 45d71b554b971bc8ccbae74ee10d2559ded242c3
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Feb 26 00:18:29 2020 +0000

    Daily bump.

commit 7edf9fa1c5f0e05c22e1d719658ed903fe2b44f4
Author: Christophe Lyon <christophe.lyon@linaro.org>
Date:   Wed Feb 19 20:55:23 2020 +0000

    ARM: Fix -mpure-code for v6m
    
    When running the testsuite with -fdisable-rtl-fwprop2 and -mpure-code
    for cortex-m0, I noticed that some testcases were failing because we
    still generate "ldr rX, .LCY", which is what we want to avoid with
    -mpure-code. This is latent since a recent improvement in fwprop
    (PR88833).
    
    In this patch I change the thumb1_movsi_insn pattern so that it emits
    the desired instruction sequence when arm_disable_literal_pool is set.
    
    To achieve that, I introduce a new required_for_purecode attribute to
    enable the corresponding alternative in thumb1_movsi_insn and take the
    actual instruction sequence length into account.
    
    gcc/ChangeLog:
    
    2020-02-25  Christophe Lyon  <christophe.lyon@linaro.org>
    
            Backport from mainline
            2020-02-25  Christophe Lyon  <christophe.lyon@linaro.org>
    
            * config/arm/arm.md (required_for_purecode): New attribute.
            (enabled): Handle required_for_purecode.
            * config/arm/thumb1.md (thumb1_movsi_insn): Add alternative to
            work with -mpure-code.

commit 9c5db942ca332494ef3d79d4a7d494d83cad8304
Author: Christophe Lyon <christophe.lyon@linaro.org>
Date:   Tue Dec 17 15:43:07 2019 +0000

    ARM: Add support for -mpure-code in thumb-1 (v6m)
    
    This patch extends support for -mpure-code to all thumb-1 processors,
    by removing the need for MOVT.
    
    Symbol addresses are built using upper8_15, upper0_7, lower8_15 and
    lower0_7 relocations, and constants are built using sequences of
    movs/adds and lsls instructions.
    
    The extension of the *thumb1_movhf pattern uses always the same size
    (6) although it can emit a shorter sequence when possible. This is
    similar to what *arm32_movhf already does.
    
    CASE_VECTOR_PC_RELATIVE is now false with -mpure-code, to avoid
    generating invalid assembly code with differences from symbols from
    two different sections (the difference cannot be computed by the
    assembler).
    
    Tests pr45701-[12].c needed a small adjustment to avoid matching
    upper8_15 when looking for the r8 register.
    
    Test no-literal-pool.c is augmented with __fp16, so it now uses
    -mfp16-format=ieee.
    
    Test thumb1-Os-mult.c generates an inline code sequence with
    -mpure-code and computes the multiplication by using a sequence of
    add/shift rather than using the multiply instruction, so we skip it in
    presence of -mpure-code.
    
    With -mcpu=cortex-m0, the pure-code/no-literal-pool.c fails because
    code like:
    static char *p = "Hello World";
    char *
    testchar ()
    {
      return p + 4;
    }
    
    generates 2 indirections (I removed non-essential directives/code)
              .section        .rodata
              .LC0:
              .ascii  "Hello World\000"
              .data
              p:
              .word   .LC0
              .section        .rodata
              .LC2:
              .word   p
              .section .text,"0x20000006",%progbits
              testchar:
              push    {r7, lr}
              add     r7, sp, #0
              movs    r3, #:upper8_15:#.LC2
              lsls    r3, #8
              adds    r3, #:upper0_7:#.LC2
              lsls    r3, #8
              adds    r3, #:lower8_15:#.LC2
              lsls    r3, #8
              adds    r3, #:lower0_7:#.LC2
              ldr     r3, [r3]
              ldr     r3, [r3]
              adds    r3, r3, #4
              movs    r0, r3
              mov     sp, r7
              @ sp needed
              pop     {r7, pc}
    
    By contrast, when using -mcpu=cortex-m4, the code looks like:
            .section        .rodata
            .LC0:
            .ascii  "Hello World\000"
            .data
            p:
            .word   .LC0
            testchar:
            push    {r7}
            add     r7, sp, #0
            movw    r3, #:lower16:p
            movt    r3, #:upper16:p
            ldr     r3, [r3]
            adds    r3, r3, #4
            mov     r0, r3
            mov     sp, r7
            pop     {r7}
            bx      lr
    
    I haven't found yet how to make code for cortex-m0 apply upper/lower
    relocations to "p" instead of .LC2. The current code looks functional,
    but could be improved.
    
    2020-02-25  Christophe Lyon  <christophe.lyon@linaro.org>
    
            Backport from mainline
            2019-10-18  Christophe Lyon  <christophe.lyon@linaro.org>
    
            gcc/
            * config/arm/arm-protos.h (thumb1_gen_const_int): Add new prototype.
            * config/arm/arm.c (arm_option_check_internal): Remove restriction
            on MOVT for -mpure-code.
            (thumb1_gen_const_int): New function.
            (thumb1_legitimate_address_p): Support -mpure-code.
            (thumb1_rtx_costs): Likewise.
            (thumb1_size_rtx_costs): Likewise.
            (arm_thumb1_mi_thunk): Likewise.
            * config/arm/arm.h (CASE_VECTOR_PC_RELATIVE): Likewise.
            * config/arm/thumb1.md (thumb1_movsi_symbol_ref): New.
            (*thumb1_movhf): Support -mpure-code.
    
            gcc/testsuite/
            * gcc.target/arm/pr45701-1.c: Adjust for -mpure-code.
            * gcc.target/arm/pr45701-2.c: Likewise.
            * gcc.target/arm/pure-code/no-literal-pool.c: Add tests for
            __fp16.
            * gcc.target/arm/pure-code/pure-code.exp: Remove thumb2 and movt
            conditions.
            * gcc.target/arm/thumb1-Os-mult.c: Skip if -mpure-code is used.

commit eeb31391b7f223e6ca8cbd4452b99b55f4afdb1c
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Feb 25 13:56:47 2020 +0100

    combine: Fix find_split_point handling of constant store into ZERO_EXTRACT [PR93908]
    
    git is miscompiled on s390x-linux with -O2 -march=zEC12 -mtune=z13.
    I've managed to reduce it into the following testcase.  The problem is that
    during combine we see the s->k = -1; bitfield store and change the SET_SRC
    from a pseudo into a constant:
    (set (zero_extract:DI (mem/j:HI (plus:DI (reg/v/f:DI 60 [ s ])
                    (const_int 10 [0xa])) [0 +0 S2 A16])
            (const_int 2 [0x2])
            (const_int 7 [0x7]))
        (const_int -1 [0xffffffffffffffff]))
    This on s390x with the above option isn't recognized as valid instruction,
    so find_split_point decides to handle it as IOR or IOR/AND.
    src is -1, mask is 3 and pos is 7.
    src != mask (this is also incorrect, we want to set all (both) bits in the
    bitfield), so we go for IOR/AND, but instead of trying
    mem = (mem & ~0x180) | ((-1 << 7) & 0x180)
    we actually try
    mem = (mem & ~0x180) | (-1 << 7)
    and that is further simplified into:
    mem = mem | (-1 << 7)
    aka
    mem = mem | 0xff80
    which doesn't set just the 2-bit bitfield, but also many other bitfields
    that shouldn't be touched.
    We really should do:
    mem = mem | 0x180
    instead.
    The problem is that we assume that no bits but those low len (2 here) will
    be set in the SET_SRC, but there is nothing that can prevent that, we just
    should ignore the other bits.
    
    The following patch fixes it by masking src with mask, this way already
    the src == mask test will DTRT, and as the code for or_mask uses
    gen_int_mode, if the most significant bit is set after shifting it left by
    pos, it will be properly sign-extended.
    
    2020-02-25  Jakub Jelinek  <jakub@redhat.com>
    
            PR rtl-optimization/93908
            * combine.c (find_split_point): For store into ZERO_EXTRACT, and src
            with mask.
    
            * gcc.c-torture/execute/pr93908.c: New test.

commit a6b74eaedf6199a5431504a77ecacb0f9efa53f9
Author: Eric Botcazou <ebotcazou@gcc.gnu.org>
Date:   Tue Feb 25 12:34:00 2020 +0100

    Fix link failure with debug info in LTO mode
    
    This fixes a regression whereby the program fails to link with debug
    info in LTO mode because of an undefined reference to a symbol coming
    from the object files containing the early debug info.
    
            * dwarf2out.c (dwarf2out_size_function): Run in early-DWARF mode.

commit 468664e1b784988ef22cc939c72e3e3d4a4c156e
Author: Roman Zhuykov <zhroma@ispras.ru>
Date:   Tue Feb 25 14:32:42 2020 +0300

    doc: backport proper description of --enable-checking behavior
    
    This patch rewords the whole description to fix minor issues:
     - documents 'gimple' and 'types' checks,
     - clarifies what happens when option is used without '=list',
     - fixes inaccurate wrong wording about release snapshots,
     - describes that release checks can only be disabled explicitly.
    
            Backport from master
            2020-02-24  Roman Zhuykov  <zhroma@ispras.ru>
    
            * doc/install.texi (--enable-checking): Properly document current
            behavior.
            (--enable-stage1-checking): Minor clarification about bootstrap.

commit 788483065b444e87972691b16fc8271cbeba4925
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Feb 25 00:18:29 2020 +0000

    Daily bump.

commit f9be6e10c96b75307878472567cb0712812a8ab7
Author: Richard Sandiford <richard.sandiford@arm.com>
Date:   Tue Feb 18 18:06:32 2020 +0000

    vect: Fix offset calculation for -ve strides [PR93767]
    
    This PR is a regression caused by r256644, which added support for alias
    checks involving variable strides.  One of the changes in that commit
    was to split the access size out of the segment length.  The PR shows
    that I hadn't done that correctly for the handling of negative strides
    in vect_compile_time_alias.  The old code was:
    
          const_length_a = (-wi::to_poly_wide (segment_length_a)).force_uhwi ();
          offset_a = (offset_a + vect_get_scalar_dr_size (a)) - const_length_a;
    
    where vect_get_scalar_dr_size (a) was cancelling out the subtraction
    of the access size inherent in "- const_length_a".  Taking the access
    size out of the segment length meant that the addition was no longer
    needed/correct.
    
    2020-02-24  Richard Sandiford  <richard.sandiford@arm.com>
    
    gcc/
            Backport from mainline
            2020-02-19  Richard Sandiford  <richard.sandiford@arm.com>
    
            PR tree-optimization/93767
            * tree-vect-data-refs.c (vect_compile_time_alias): Remove the
            access-size bias from the offset calculations for negative strides.
    
    gcc/testsuite/
            Backport from mainline
            2020-02-19  Richard Sandiford  <richard.sandiford@arm.com>
    
            PR tree-optimization/93767
            * gcc.dg/vect/pr93767.c: New test.

commit ba740092516cd759ac69e89d7f502a51d8bec19a
Author: Mark Eggleston <markeggleston@gcc.gnu.org>
Date:   Mon Feb 24 15:53:24 2020 +0000

    fortran: ICE using SHAPE with FINDLOC PR93835
    
            Backported from mainline
            2020-02-24  Mark Eggleston  <markeggleston@gcc.gnu.org>
    
            PR fortran/93835
            * simplify.c (simplify_findloc_nodim) : Fix whitespace issues.
            (gfc_simplify_shape) : Create and initialise one shape value
            for the result expression. Set shape value with the rank of
            the source array.
    
            PR fortran/93835
            * gfortran.dg/pr77351.f90 : Check for one error instead of two.
            * gfortran.dg/pr93835.f08 : New test.

commit 8389fcc4c1253fe11fd310284dcf31ac6c02a749
Author: Bernd Edlinger <bernd.edlinger@hotmail.de>
Date:   Mon Feb 17 17:40:07 2020 +0100

    Avoid collect2 calling signal unsafe functions and/or unlink with uninitialized memory
    
    2020-02-24  Bernd Edlinger  <bernd.edlinger@hotmail.de>
    
            * collect2.c (tool_cleanup): Avoid calling not signal-safe
            functions.
            (maybe_run_lto_and_relink): Avoid possible signal handler
            access to unintialzed memory (lto_o_files).

commit 066184a282b622ac6880150eb4e42fe57881b606
Author: Peter Bergner <bergner@linux.ibm.com>
Date:   Sun Feb 23 18:22:57 2020 -0600

    rs6000: Fix infinite loop building ghostscript and icu [PR93658]
    
    Fix rs6000_legitimate_address_p(), which erroneously marks a valid Altivec
    address as being invalid, which causes LRA's process_address()  to go into
    an infinite loop spilling the same address over and over again.
    Include Mike's earlier commits that fix bugs this patch exposes.
    
            Backport from master
            2020-02-20  Peter Bergner  <bergner@linux.ibm.com>
    
            PR target/93658
            * config/rs6000/rs6000.c (rs6000_legitimate_address_p): Handle VSX
            vector modes.
    
            * gcc.target/powerpc/pr93658.c: New test.

commit 428a4feef8594142e5324c0f5cfc8281e43bf75a
Author: Michael Meissner <meissner@gcc.gnu.org>
Date:   Sun Feb 23 18:17:12 2020 -0600

    Adjust how variable vector extraction is done.
    
            Backport from master
            2020-02-03  Michael Meissner  <meissner@linux.ibm.com>
    
            * config/rs6000/rs6000.c (get_vector_offset): New helper function
            to calculate the offset in memory from the start of a vector of a
            particular element.  Add code to keep the element number in
            bounds if the element number is variable.
            (rs6000_adjust_vec_address): Move calculation of offset of the
            vector element to get_vector_offset.
            (rs6000_split_vec_extract_var): Do not do the initial AND of
            element here, move the code to get_vector_offset.
    
    Fix PR 93568 (thinko)
    
            Backport from master
            2020-02-05  Michael Meissner  <meissner@linux.ibm.com>
    
            PR target/93568
            * config/rs6000/rs6000.c (get_vector_offset): Fix Q constraint assert
            to use MEM.

commit 48558cdf49373ba508cf8d7fcaaafb383316f644
Author: Michael Meissner <meissner@gcc.gnu.org>
Date:   Sun Feb 23 18:13:00 2020 -0600

    Fix bad code of vector extract of PC-relative address with variable element #.
    
            Backport from master
            2020-01-06  Michael Meissner  <meissner@linux.ibm.com>
    
            * config/rs6000/vsx.md (vsx_extract_<mode>_var, VSX_D iterator):
            Use 'Q' for doing vector extract from memory.
            (vsx_extract_v4sf_var): Use 'Q' for doing vector extract from
            memory.
            (vsx_extract_<mode>_var, VSX_EXTRACT_I iterator): Use 'Q' for
            doing vector extract from memory.
            (vsx_extract_<mode>_<VS_scalar>mode_var): Use 'Q' for doing vector
            extract from memory.

commit 9f2a74ab4369d3e7ab64aab9d7ef6a59b9dd20b9
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Feb 24 00:18:31 2020 +0000

    Daily bump.

commit 6900c1ec9a3463289003f7e92f05e1aeee125039
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Feb 23 00:18:39 2020 +0000

    Daily bump.

commit c080a6fb6f0cf402affc287fc600c189980cfb2d
Author: Thomas König <tkoenig@gcc.gnu.org>
Date:   Thu Feb 13 22:22:04 2020 +0100

    Use au->lock exclusively for locking in async I/O.
    
    2020-02-18  Thomas Koenig  <tkoenig@gcc.gnu.org>
    
            Backport from trunk
            PR fortran/93599
            * io/async.c (destroy_adv_cond): Do not destroy lock.
            (async_io): Make sure au->lock is locked for finishing of thread.
            Do not lock/unlock around signalling emptysignal. Unlock au->lock
            before return.
            (init_adv_cond): Do not initialize lock.
            (enqueue_transfer): Unlock after signal.
            (enqueue_done_id): Likewise.
            (enqueue_done): Likewise.
            (enqueue_close): Likewise.
            (enqueue_data_transfer): Likewise.
            (async_wait_id): Do not lock/unlock around signalling au->work.
            (async_wait): Unlock after signal.
            * io/async.h (SIGNAL): Add comment about needed au->lock.
            Remove locking/unlocking of advcond->lock.
            (WAIT_SIGNAL_MUTEX): Add comment. Remove locking/unlocking of
            advcond->lock.  Unlock mutex only at the end.  Loop on
            __ghread_cond_wait returning zero.
            (REVOKE_SIGNAL): Add comment. Remove locking/unlocking of
            advcond->lock.
            (struct adv_cond): Remove mutex from struct.

commit 3004aba7a0e041cafd2adf927e0b3a610b16e7c0
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Feb 22 00:18:28 2020 +0000

    Daily bump.

commit 4ccda0308ef19774c6cfd6b16c5e22829588809b
Author: John David Anglin <danglin@gcc.gnu.org>
Date:   Fri Feb 21 23:34:09 2020 +0000

    Fix handling of floating-point homogeneous aggregates.
    
            2020-02-21  John David Anglin  <danglin@gcc.gnu.org>
    
            * gcc/config/pa/pa.c (pa_function_value): Fix check for word and
            double-word size when handling aggregate return values.
            * gcc/config/pa/som.h (ASM_DECLARE_FUNCTION_NAME): Fix to indicate
            that homogeneous SFmode and DFmode aggregates are passed and returned
            in general registers.

commit 8b3c0979ea14517c5ec7149dd0bd5ca0e89d6e81
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Feb 21 00:18:50 2020 +0000

    Daily bump.

commit bd2537ed5d4cda1a896974f30bd62dfb68ae39b0
Author: Uros Bizjak <ubizjak@gmail.com>
Date:   Thu Feb 20 21:58:57 2020 +0100

    i386: Fix *vec_extractv2sf_1 and *vec_extractv2sf_1 shufps alternative [PR93828]
    
    shufps moves two of the four packed single-precision floating-point values
    from *destination* operand (first operand) into the low quadword of the
    destination operand.  Match source operand to the destination.
    
            PR target/93828
            * config/i386/mmx.md (*vec_extractv2sf_1): Match source operand
            to destination operand for shufps alternative.
            (*vec_extractv2si_1): Ditto.

commit f55bf4ddbfac3c7360cb00f3200b663c19baf504
Author: H.J. Lu <hjl.tools@gmail.com>
Date:   Thu Feb 20 03:05:27 2020 -0800

    i386: Skip ENDBR32 at the target function entry
    
    Skip ENDBR32 at the target function entry when initializing trampoline.
    
    Tested on Linux/x86-64 CET machine with and without -m32.
    
    gcc/
    
            Backport from master
            PR target/93656
            * config/i386/i386.c (ix86_trampoline_init): Skip ENDBR32 at
            the target function entry.
    
    gcc/testsuite/
    
            Backport from master
            PR target/93656
            * gcc.target/i386/pr93656.c: New test.
    
    (cherry picked from commit 1d69147af203d4dcd2270429f90c93f1a37ddfff)

commit 2ee6afc2b4583e4f41b4902d148e74a6b767f50b
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Feb 20 00:19:06 2020 +0000

    Daily bump.

commit 00244172f8e734dfb154ad91a8c7f347de23b06e
Author: Mark Eggleston <markeggleston@gcc.gnu.org>
Date:   Wed Feb 19 16:19:54 2020 +0000

    [fortran] xfail no longer necessary in typebound_call_22.f03
    
    PR91984 changes resulted in an expected failure. Backport of PR92113
    negated the need for the xfail.
    
    gcc/testsuite/ChangeLog
    
            * typebound_call_22.d03 : Remove xfail clause.

commit 44ea6508f1009086018d0db4347a14b9c4eec2c0
Author: Mark Eggleston <markeggleston@gcc.gnu.org>
Date:   Wed Feb 19 09:36:42 2020 +0000

    [Fortran] ICE assign character pointer to non target PR93714
    
    An ICE occurred if an attempt was made to assign a pointer to a
    character variable that has an length incorrectly specified using
    a real constant and does not have the target attribute.
    
            Backported from mainline
            2020-02-18  Mark Eggleston  <markeggleston@gcc.gnu.org>
    
            PR fortran/93714
            * expr.c (gfc_check_pointer_assign): Move check for
            matching character length to after checking the lvalue
            attributes for target or pointer.
    
            PR fortran/93714
            * gfortran.dg/char_pointer_assign_6.f90: Look for no target
            message instead of length mismatch.
            * gfortran.dg/pr93714_1.f90
            * gfortran.dg/pr93714_2.f90

commit fa463e6f4232a88104c8d11e6e2e5154785c86f4
Author: liuhongt <hongtao.liu@intel.com>
Date:   Wed Feb 19 10:11:32 2020 +0800

    Add -mavx512vbmi2 to i386-2.C and i386-3.C
    
    2020-02-18  Hongtao Liu  <hongtao.liu@intel.com>
    
    gcc/testsuite/
            * g++.dg/other/i386-2.C: Add -mavx512vbmi2.
            * g++.dg/other/i386-3.C: Ditto.

commit 9f2bbf581e734f434856705356f44d07cd06e07b
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Feb 19 00:18:36 2020 +0000

    Daily bump.

commit 2408b93a10c9c6cb210bc2a93d39ce6d56144ca3
Author: Richard Sandiford <richard.sandiford@arm.com>
Date:   Thu Dec 5 14:20:38 2019 +0000

    Check for bitwise identity when encoding VECTOR_CSTs [PR92768]
    
    This PR shows that we weren't checking for bitwise-identical values
    when trying to encode a VECTOR_CST, so -0.0 was treated the same as
    0.0 for -fno-signed-zeros.  The patch adds a new OEP flag to select
    that behaviour.
    
    2020-02-18  Richard Sandiford  <richard.sandiford@arm.com>
    
    gcc/
            Backport from mainline
            2019-12-05  Richard Sandiford  <richard.sandiford@arm.com>
    
            PR middle-end/92768
            * tree-core.h (OEP_BITWISE): New flag.
            * fold-const.c (operand_compare::operand_equal_p): Handle it.
            * tree-vector-builder.h (tree_vector_builder::equal_p): Pass it.
    
    gcc/testsuite/
            PR middle-end/92768
            * gcc.dg/pr92768.c: New test.

commit 52db14c1f700e14e5b1b6c7fc702c0a08cc3781c
Author: Richard Sandiford <richard.sandiford@arm.com>
Date:   Fri Aug 9 09:37:55 2019 +0000

    Reject tail calls that read from an escaped RESULT_DECL [PR90313]
    
    In this PR we have two return paths from a function "map".  The common
    code sets <result> to the value returned by one path, while the other
    path does:
    
       <retval> = map (&<retval>, ...);
    
    We treated this call as tail recursion, losing the copy semantics
    on the value returned by the recursive call.
    
    We'd correctly reject the same thing for variables:
    
       local = map (&local, ...);
    
    The problem is that RESULT_DECLs didn't get the same treatment.
    
    2020-02-18  Richard Sandiford  <richard.sandiford@arm.com>
    
    gcc/
            Backport from mainline
            2019-08-09  Richard Sandiford  <richard.sandiford@arm.com>
    
            PR middle-end/90313
            * tree-tailcall.c (find_tail_calls): Reject calls that might
            read from an escaped RESULT_DECL.
    
    gcc/testsuite/
            PR middle-end/90313
            * g++.dg/torture/pr90313.cc: New test.

commit 560139481239e37a1cc878fb90805fa5e94f623c
Author: Mark Eggleston <markeggleston@gcc.gnu.org>
Date:   Tue Feb 18 10:56:38 2020 +0000

    [fortran] ICE in gfc_validate_kind(): Got bad kind [PR93580]
    
    Caused by using invalid part_refs in kind specifications,
    e.g. %re or %im on non-complex expressions and %len on
    non character expressions.
    
    Check whether %re, %im and %len are valid when checking
    kind specification.
    
    The original patch from Steven G. Kargl  <kargl@gcc.gnu.org> only
    checked for %re and %im.
    
            Backported from mainline
            2020-02-18  Mark Eggleston <markeggleston@gcc.gnu.org>
    
            PR fortran/93580
            * primary.c (gfc_match_varspec): If the symbol following %
            is re or im and the primary expression type is not BT_COMPLEX
            issue an error. If the symbol is len and the primary
            expression type is not BT_CHARACTER is an error.
    
            PR fortran/93580
            * gfortran.dg/dg/pr93580.f90: New test.

commit e129cd5283c2e57fc2a86e6981b8e1556b13069c
Author: Richard Sandiford <richard.sandiford@arm.com>
Date:   Mon Jan 27 19:37:55 2020 +0000

    predcom: Fix invalid store-store commoning [PR93434]
    
    predcom has the following code to stop one rogue load from
    interfering with other store-load opportunities:
    
          /* If A is read and B write or vice versa and there is unsuitable
             dependence, instead of merging both components into a component
             that will certainly not pass suitable_component_p, just put the
             read into bad component, perhaps at least the write together with
             all the other data refs in it's component will be optimizable.  */
    
    But when store-store commoning was added later, this had the effect
    of ignoring loads that occur between two candidate stores.
    
    There is code further up to handle loads and stores with unknown
    dependences:
    
          /* Don't do store elimination if there is any unknown dependence for
             any store data reference.  */
          if ((DR_IS_WRITE (dra) || DR_IS_WRITE (drb))
              && (DDR_ARE_DEPENDENT (ddr) == chrec_dont_know
                  || DDR_NUM_DIST_VECTS (ddr) == 0))
            eliminate_store_p = false;
    
    But the store-load code above skips loads for *known* dependences
    if (a) the load has already been marked "bad" or (b) the data-ref
    machinery knows the dependence distance, but determine_offsets
    can't handle the combination.
    
    (a) happens to be the problem in the testcase, but a different
    sequence could have given (b) instead.  We have writes to individual
    fields of a structure and reads from the whole structure.  Since
    determine_offsets requires the types to be the same, it returns false
    for each such read/write combination.
    
    This patch records which components have had loads removed and
    prevents store-store commoning for them.  It's a bit too pessimistic,
    since there shouldn't be a problem if a "bad" load dominates all stores
    in a component.  But (a) we can't AFAIK use pcom_stmt_dominates_stmt_p
    here and (b) the handling for that case would probably need to be
    removed again if we handled more exotic cases in future.
    
    2020-02-18  Richard Sandiford  <richard.sandiford@arm.com>
    
    gcc/
            Backport from mainline
            2020-01-28  Richard Sandiford  <richard.sandiford@arm.com>
    
            PR tree-optimization/93434
            * tree-predcom.c (split_data_refs_to_components): Record which
            components have had aliasing loads removed.  Prevent store-store
            commoning for all such components.
    
    gcc/testsuite/
            PR tree-optimization/93434
            * gcc.c-torture/execute/pr93434.c: New test.

commit 84a465171761faeceb87037a606f7834dab18942
Author: Richard Sandiford <richard.sandiford@arm.com>
Date:   Fri Nov 29 13:04:56 2019 +0000

    Don't pass booleans as mask types to simd clones [PR92710]
    
    In this PR we assigned a vector mask type to the result of a comparison
    and then tried to pass that mask type to a simd clone, which expected
    a normal (non-mask) type instead.
    
    This patch simply punts on call arguments that have a mask type.
    A better fix would be to pattern-match the comparison to a COND_EXPR,
    like we would if the comparison was stored to memory, but doing that
    isn't gcc 9 or 10 material.
    
    Note that this doesn't affect x86_64-linux-gnu because the ABI promotes
    bool arguments to ints.
    
    2020-02-18  Richard Sandiford  <richard.sandiford@arm.com>
    
    gcc/
            Backport from mainline
            2019-11-29  Richard Sandiford  <richard.sandiford@arm.com>
    
            PR tree-optimization/92710
            * tree-vect-stmts.c (vectorizable_simd_clone_call): Reject
            vector mask arguments.
    
    gcc/testsuite/
            PR tree-optimization/92710
            * gcc.dg/vect/pr92710.c: New test.

commit 2d8ea3a0a6095a56b7c59c50b1068d602cde934a
Author: Richard Sandiford <richard.sandiford@arm.com>
Date:   Mon Nov 11 19:43:52 2019 +0000

    Fix SLP downward group access classification [PR92420]
    
    This PR was caused by the SLP handling in get_group_load_store_type
    returning VMAT_CONTIGUOUS rather than VMAT_CONTIGUOUS_REVERSE for
    downward groups.
    
    A more elaborate fix would be to try to combine the reverse permutation
    into SLP_TREE_LOAD_PERMUTATION for loads, but that's really a follow-on
    optimisation and not backport material.  It might also not necessarily
    be a win, if the target supports (say) reversing and odd/even swaps
    as independent permutes but doesn't recognise the combined form.
    
    2020-02-18  Richard Sandiford  <richard.sandiford@arm.com>
    
    gcc/
            Backport from mainline
            2019-11-11  Richard Sandiford  <richard.sandiford@arm.com>
    
            PR tree-optimization/92420
            * tree-vect-stmts.c (get_negative_load_store_type): Move further
            up file.
            (get_group_load_store_type): Use it for reversed SLP accesses.
    
    gcc/testsuite/
            PR tree-optimization/92420
            * gcc.dg/vect/pr92420.c: New test.

commit 65709f4b93c74101440ab16bf4bddf6e44672177
Author: Prathamesh Kulkarni <prathamesh.kulkarni@linaro.org>
Date:   Wed Aug 21 18:34:43 2019 +0000

    re PR target/90724 (ICE with __sync_bool_compare_and_swap with -march=armv8.2-a+sve)
    
    2020-02-18  Richard Sandiford  <richard.sandiford@arm.com>
    
    gcc/
            Backport from mainline
            2019-08-21  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>
    
            PR target/90724
            * config/aarch64/aarch64.c (aarch64_gen_compare_reg_maybe_ze): Force y
            in reg if it fails aarch64_plus_operand predicate.

commit e28336b595500bf717d70f31dbaed49266e5d866
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Feb 18 00:18:43 2020 +0000

    Daily bump.

commit 0692bc0ca7f47977ae6d3d8021f1552af2289c04
Author: liuhongt <hongtao.liu@intel.com>
Date:   Mon Feb 17 08:55:17 2020 +0800

    Add Changelog entries to relavent Changelog files for my last commit.

commit a63e65cd14ab40e0ce8985a3b3d34e3894cab458
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Feb 17 00:18:48 2020 +0000

    Daily bump.

commit bfa537a2ffb30c0d537bb74ade124ca07e9712fe
Author: Uros Bizjak <ubizjak@gmail.com>
Date:   Sun Feb 16 23:43:22 2020 +0100

    i386: Fix atan2l argument order [PR93743]
    
            PR target/93743
            * config/i386/i386.md (atan2xf3): Swap operands 1 and 2.
            (atan2<mode>3): Update operand order in the call to gen_atan2xf3.
    
    testsuite/ChangeLog:
    
            PR target/93743
            * gcc.target/i386/pr93743.c : New test.

commit 1e85e18ab76f61a3085c65ebf06e8ed72bf4ccd8
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Feb 16 00:18:33 2020 +0000

    Daily bump.

commit 498055331393d3c32fea5a6142c926b6a7700b8d
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Sat Feb 15 12:53:44 2020 +0100

    match.pd: Disallow side-effects in GENERIC for non-COND_EXPR to COND_EXPR simplifications [PR93744]
    
    As the following testcases show (the first one reported, last two
    found by code inspection), we need to disallow side-effects
    in simplifications that turn some unconditional expression into conditional
    one.  From my little understanding of genmatch.c, it is able to
    automatically disallow side effects if the same operand is used multiple
    times in the match pattern, maybe if it is used multiple times in the
    replacement pattern, and if it is used in conditional contexts in the match
    pattern, could it be taught to handle this case too?  If yes, perhaps
    just the first hunk could be usable for 8/9 backports (+ the testcases).
    
    2020-02-15  Jakub Jelinek  <jakub@redhat.com>
    
            PR tree-optimization/93744
            * match.pd (((m1 >/</>=/<= m2) * d -> (m1 >/</>=/<= m2) ? d : 0,
            A - ((A - B) & -(C cmp D)) -> (C cmp D) ? B : A,
            A + ((B - A) & -(C cmp D)) -> (C cmp D) ? B : A): For GENERIC, make
            sure @2 in the first and @1 in the other patterns has no side-effects.
    
            * gcc.c-torture/execute/pr93744-1.c: New test.
            * gcc.c-torture/execute/pr93744-2.c: New test.
            * gcc.c-torture/execute/pr93744-3.c: New test.

commit 2d625a6d4bb41a7510da3ed79e44f0615996fbc6
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Feb 15 00:19:32 2020 +0000

    Daily bump.

commit c1379a1c645684599b8902edcdf4a2b5f2648542
Author: Eric Botcazou <ebotcazou@gcc.gnu.org>
Date:   Fri Feb 14 19:21:02 2020 +0100

    Fix problematic TLS sequences for the Solaris linker
    
    This is an old thinko pertaining to the interaction between TLS
    sequences and delay slot filling: the compiler knows that it cannot
    put instructions with TLS relocations into delay slots with the
    original Sun TLS model, but it tests TARGET_SUN_TLS in this context,
    which depends only on the assembler.  So if the compiler is configured
    with the GNU assembler and the Solaris linker, then TARGET_GNU_TLS is
    set instead and the limitation is not enforced.
    
            PR target/93704
            * config/sparc/sparc.c (eligible_for_call_delay): Test HAVE_GNU_LD
            in conjunction with TARGET_GNU_TLS in early return.

commit f0a72494ea3747d1f66a0cda3e67a7611779030d
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Fri Feb 14 17:36:00 2020 +0100

    c++: Fix thinko in enum_min_precision [PR61414]
    
    When backporting the PR61414 fix to 8.4, I've noticed that the caching
    of prec is actually broken, as it would fail to actually store the computed
    precision into the hash_map's value and so next time we'd think the enum needs
    0 bits.
    
    2020-02-14  Jakub Jelinek  <jakub@redhat.com>
    
            PR c++/61414
            * class.c (enum_min_precision): Change prec type from int to int &.
    
            * g++.dg/cpp0x/enum39.C: New test.

commit 0f7b7aeb71d06fc85f49c323fbd4879d5a02f336
Author: Alexander Monakov <amonakov@ispras.ru>
Date:   Fri Feb 14 16:51:21 2020 +0300

    sel-sched: allow negative insn priority (PR 88879)
    
            PR rtl-optimization/88879
            * sel-sched.c (sel_target_adjust_priority): Remove assert.

commit b8c42b4d0a2595fb6806473f816b94cc1b222cb1
Author: Richard Biener <rguenther@suse.de>
Date:   Wed Feb 5 14:04:29 2020 +0100

    middle-end/90648 fend off builtin calls with not enough arguments from match
    
    This adds guards to genmatch generated code before accessing call
    expression or stmt arguments that might be out of bounds when
    the user provided bogus prototypes for what we consider builtins.
    
    2020-02-05  Richard Biener  <rguenther@suse.de>
    
            PR middle-end/90648
            * genmatch.c (dt_node::gen_kids_1): Emit number of argument
            checks before matching calls.
    
            * gcc.dg/pr90648.c: New testcase.

commit b00c3228041bfb450e3fec21fe424f5f322f23b3
Author: Richard Biener <rguenther@suse.de>
Date:   Wed Jan 22 12:38:12 2020 +0100

    tree-optimization/93381 fix integer offsetting in points-to analysis
    
    We were incorrectly assuming a merge operation is conservative enough
    for not explicitely handled operations but we also need to consider
    offsetting within fields when field-sensitive analysis applies.
    
    2020-01-22  Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/93381
            * tree-ssa-structalias.c (find_func_aliases): Assume offsetting
            throughout, handle all conversions the same.
    
            * gcc.dg/torture/pr93381.c: New testcase.

commit 03d2b1d79740c5b2d05bbf84af2dbaf2e1e80ebb
Author: Richard Biener <rguenther@suse.de>
Date:   Fri Feb 14 09:23:06 2020 +0100

    tree-optimization/93439 move clique bookkeeping to OMP expansion
    
    Autopar was doing clique bookkeeping too early when creating destination
    functions but then later introducing new cliques via versioning loops.
    The following moves the bookkeeping to the actual outlining process.
    
    2020-02-14  Richard Biener  <rguenther@suse.de>
    
            Backport from mainline
            2020-01-28  Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/93439
            * tree-parloops.c (create_loop_fn): Move clique bookkeeping...
            * tree-cfg.c (move_sese_region_to_fn): ... here.
            (verify_types_in_gimple_reference): Verify used cliques are
            tracked.
    
            * gfortran.dg/graphite/pr93439.f90: New testcase.

commit 3bcda566d6f485f6eccdc029d115f4246016ba05
Author: Richard Biener <rguenther@suse.de>
Date:   Fri Feb 14 09:19:40 2020 +0100

    middle-end/93054 deal with undefs in call gimplification
    
    2020-02-14  Richard Biener  <rguenther@suse.de>
    
            Backport from mainline
            2020-01-09  Richard Biener  <rguenther@suse.de>
    
            PR middle-end/93054
            * gimplify.c (gimplify_expr): Deal with NOP definitions.
    
            * gcc.dg/pr93054.c: New testcase.

commit 794bb8c2f5d328d9d4cfa55efd41cdd420ebb13a
Author: Richard Biener <rguenther@suse.de>
Date:   Fri Feb 14 09:17:57 2020 +0100

    debug/92763 keep DIEs that might be used in DW_TAG_inlined_subroutine
    
    We were pruning type-local subroutine DIEs if their context is unused
    despite us later needing those DIEs as abstract origins for inlines.
    The patch makes code already present for -fvar-tracking-assignments
    unconditional.
    
    2020-02-14  Richard Biener  <rguenther@suse.de>
    
            Backport from mainline
            2020-01-20  Richard Biener  <rguenther@suse.de>
    
            PR debug/92763
            * dwarf2out.c (prune_unused_types): Unconditionally mark
            called function DIEs.
    
            * g++.dg/debug/pr92763.C: New testcase.

commit 4230afc0f4f498cc3967bde173c84dde66519711
Author: Richard Biener <rguenther@suse.de>
Date:   Fri Feb 14 09:14:42 2020 +0100

    tree-optimization/92704 fix ifcvt ICE with loops without stores
    
    2020-02-14  Richard Biener  <rguenther@suse.de>
    
            Backport from mainline
            2019-11-29  Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/92704
            * tree-if-conv.c (combine_blocks): Deal with virtual PHIs
            in loops performing only loads.
    
            * gcc.dg/torture/pr92704.c: New testcase.

commit c6480e01fc53f0e9822ec1694239155756430952
Author: Richard Biener <rguenther@suse.de>
Date:   Fri Feb 14 09:10:48 2020 +0100

    middle-end/92674 delay purging EH edges when folding during inlining
    
    2020-02-14  Richard Biener  <rguenther@suse.de>
    
            Backport from mainline
            2019-11-27  Richard Biener  <rguenther@suse.de>
    
            PR middle-end/92674
            * tree-inline.c (expand_call_inline): Delay purging EH/abnormal
            edges and instead record blocks in bitmap.
            (gimple_expand_calls_inline): Adjust.
            (fold_marked_statements): Delay EH cleanup until all folding is
            done.
            (optimize_inline_calls): Do EH/abnormal cleanup for calls after
            inlining finished.

commit d7ab361df604fb66e1ba1e3fb45b4453cba803c4
Author: liuhongt <hongtao.liu@intel.com>
Date:   Fri Feb 14 16:32:49 2020 +0800

    Intrinsic macro of vpshr* and vpshl* lack a closing parenthesis which would cause failure in O0.
    
    2020-02-14 Hongtao Liu  <hongtao.liu@intel.com>
    
    gcc/
            PR target/93724
            * config/i386/avx512vbmi2intrin.h
            (_mm512_shrdi_epi16, _mm512_mask_shrdi_epi16,
            _mm512_maskz_shrdi_epi16, _mm512_shrdi_epi32,
            _mm512_mask_shrdi_epi32, _mm512_maskz_shrdi_epi32,
            _m512_shrdi_epi64, _m512_mask_shrdi_epi64,
            _m512_maskz_shrdi_epi64, _mm512_shldi_epi16,
            _mm512_mask_shldi_epi16, _mm512_maskz_shldi_epi16,
            _mm512_shldi_epi32, _mm512_mask_shldi_epi32,
            _mm512_maskz_shldi_epi32, _mm512_shldi_epi64,
            _mm512_mask_shldi_epi64, _mm512_maskz_shldi_epi64): Fix typo
            of lacking a closing parenthesis.
            * config/i386/avx512vbmi2vlintrin.h
            (_mm256_shrdi_epi16, _mm256_mask_shrdi_epi16,
            _mm256_maskz_shrdi_epi16, _mm256_shrdi_epi32,
            _mm256_mask_shrdi_epi32, _mm256_maskz_shrdi_epi32,
            _m256_shrdi_epi64, _m256_mask_shrdi_epi64,
            _m256_maskz_shrdi_epi64, _mm256_shldi_epi16,
            _mm256_mask_shldi_epi16, _mm256_maskz_shldi_epi16,
            _mm256_shldi_epi32, _mm256_mask_shldi_epi32,
            _mm256_maskz_shldi_epi32, _mm256_shldi_epi64,
            _mm256_mask_shldi_epi64, _mm256_maskz_shldi_epi64,
            _mm_shrdi_epi16, _mm_mask_shrdi_epi16,
            _mm_maskz_shrdi_epi16, _mm_shrdi_epi32,
            _mm_mask_shrdi_epi32, _mm_maskz_shrdi_epi32,
            _mm_shrdi_epi64, _mm_mask_shrdi_epi64,
            _m_maskz_shrdi_epi64, _mm_shldi_epi16,
            _mm_mask_shldi_epi16, _mm_maskz_shldi_epi16,
            _mm_shldi_epi32, _mm_mask_shldi_epi32,
            _mm_maskz_shldi_epi32, _mm_shldi_epi64,
            _mm_mask_shldi_epi64, _mm_maskz_shldi_epi64): Ditto.
    
    gcc/testsuite/
            * gcc.target/i386/avx512vbmi2-vpshld-1.c: New test.
            * gcc.target/i386/avx512vbmi2-vpshrd-1.c: Ditto.
            * gcc.target/i386/sse-12.c: Add -mavx512vbmi2.
            * gcc.target/i386/sse-13.c: Ditto.
            * gcc.target/i386/sse-14.c: Add -mavx512vbmi2 and tests.
            * gcc.target/i386/sse-22.c: Ditto.

commit 7866f9ebf1110132fb068714b4431c4cbb16c1d2
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Feb 14 00:18:35 2020 +0000

    Daily bump.

commit 7276dd4c7480dd952f0d4a9322ca04ca29f5126f
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Feb 13 21:00:09 2020 +0100

    c: Fix ICE with cast to VLA [93576]
    
    The following testcase ICEs, because the PR84305 changes try to evaluate
    the size earlier.  If size has side-effects, that is desirable, and the
    side-effects will actually be wrapped in a SAVE_EXPR.  The problem on this
    testcase is that there are no side-effects, and c_fully_fold doesn't fold
    those COMPOUND_EXPRs to constant, and while before gimplification we unshare
    trees found in the expressions, the unsharing doesn't involve TYPE_SIZE etc.
    of used types.  Gimplification is destructive though, so when we gimplify
    the two nested COMPOUND_EXPRs and then try to gimplify it the second time
    for the TYPE_SIZEs, we ICE.
    Now, we could use unshare_expr in what we push to *expr, SAVE_EXPRs and
    their operands in there aren't unshared, but I really don't see a point of
    evaluating expressions that don't have side-effects before, so instead
    this just pushes there expressions that do have side-effects.
    
    2020-02-13  Jakub Jelinek  <jakub@redhat.com>
    
            PR c/93576
            * c-decl.c (grokdeclarator): If this_size_varies, only push size into
            *expr if it has side effects.
    
            * gcc.dg/pr93576.c: New test.

commit 08cf145f991327d943d785066709f5f39d20bd85
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Feb 13 10:43:27 2020 +0100

    i386: Fix up _mm*_mask_popcnt_epi* [PR93696]
    
    As mentioned in the PR and as
    https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mask_popcnt_epi
    also documents, _mm*_popcnt_epi* intrinsics are consistent with all other
    unary AVX512* intrinsics regarding arguments, i.e. the
    _mm*_whatever has just single argument (called a in the docs, and __A in the
    GCC headers),
    _mm*_mask_whatever has 3 arguments (called src, k, a in the docs and
    _W, __U, __A in GCC headers) and
    _mm*_maskz_whatever 2 arguments (called k, a in the docs and __U, __A in GCC
    headers).  Unfortunately, whomever implemented the _mm*_popcnt_epi*
    intrinsics got it wrong for the _mm*_mask_popcnt_epi* ones, calling the
    args __A, __U, __B and not passing them in the canonical order to the
    builtins, making it API incompatible with ICC as well as clang (tested on
    godbolts clang 7/8/9/trunk and ICC 19.0.{0,1}, older clang/ICC don't
    understand those, so it isn't that it used to be broken even in other
    compilers and got changed afterwards).
    
    2020-02-13  Jakub Jelinek  <jakub@redhat.com>
    
            PR target/93696
            * config/i386/avx512bitalgintrin.h (_mm512_mask_popcnt_epi8,
            _mm512_mask_popcnt_epi16, _mm256_mask_popcnt_epi8,
            _mm256_mask_popcnt_epi16, _mm_mask_popcnt_epi8,
            _mm_mask_popcnt_epi16): Rename __B argument to __A and __A to __W,
            pass __A to the builtin followed by __W instead of __A followed by
            __B.
            * config/i386/avx512vpopcntdqintrin.h (_mm512_mask_popcnt_epi32,
            _mm512_mask_popcnt_epi64): Likewise.
            * config/i386/avx512vpopcntdqvlintrin.h (_mm_mask_popcnt_epi32,
            _mm256_mask_popcnt_epi32, _mm_mask_popcnt_epi64,
            _mm256_mask_popcnt_epi64): Likewise.
    
            * gcc.target/i386/pr93696-1.c: New test.
            * gcc.target/i386/pr93696-2.c: New test.
            * gcc.target/i386/avx512bitalg-vpopcntw-1.c (TEST): Fix argument order
            of _mm*_mask_popcnt_*.
            * gcc.target/i386/avx512vpopcntdq-vpopcntq-1.c (TEST): Likewise.
            * gcc.target/i386/avx512vpopcntdq-vpopcntd-1.c (TEST): Likewise.
            * gcc.target/i386/avx512bitalg-vpopcntb-1.c (TEST): Likewise.
            * gcc.target/i386/avx512bitalg-vpopcntb.c (foo): Likewise.
            * gcc.target/i386/avx512bitalg-vpopcntbvl.c (foo): Likewise.
            * gcc.target/i386/avx512vpopcntdq-vpopcntd.c (foo): Likewise.
            * gcc.target/i386/avx512bitalg-vpopcntwvl.c (foo): Likewise.
            * gcc.target/i386/avx512bitalg-vpopcntw.c (foo): Likewise.
            * gcc.target/i386/avx512vpopcntdq-vpopcntq.c (foo): Likewise.

commit 488a947b2ddd57a6f44a6aecc32862f8cbf4ec77
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Feb 13 08:17:07 2020 +0100

    i386: Fix k*shift* intrinsics [PR93673]
    
    As mentioned in the PR, the intrinsics allow counts from 0 to 255, but
    we actually reject values from 128 to 255.  That is because QImode
    CONST_INTs can be only -128 to 127.  Fixed by using const_0_to_255_operand
    and dropping the modes for the operands with those predicates
    (the IL actually contains the CONST_INT which has VOIDmode).
    
    2020-02-13  Jakub Jelinek  <jakub@redhat.com>
    
            PR target/93673
            * config/i386/sse.md (k<code><mode>): Drop mode from last operand and
            use const_0_to_255_operand predicate instead of immediate_operand.
            (avx512dq_fpclass<mode><mask_scalar_merge_name>,
            avx512dq_vmfpclass<mode><mask_scalar_merge_name>,
            vgf2p8affineinvqb_<mode><mask_name>,
            vgf2p8affineqb_<mode><mask_name>): Drop mode from
            const_0_to_255_operand predicated operands.
    
            * gcc.target/i386/avx512f-pr93673.c: New test.
            * gcc.target/i386/avx512dq-pr93673.c: New test.
            * gcc.target/i386/avx512bw-pr93673.c: New test.

commit 20ac13c895c5abe7a350de0b664abf190aa28a16
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Wed Feb 12 11:58:35 2020 +0100

    i386: Fix up vec_extract_lo* patterns [PR93670]
    
    The VEXTRACT* insns have way too many different CPUID feature flags (ATT
    syntax)
    vextractf128 $imm, %ymm, %xmm/mem               AVX
    vextracti128 $imm, %ymm, %xmm/mem               AVX2
    vextract{f,i}32x4 $imm, %ymm, %xmm/mem {k}{z}   AVX512VL+AVX512F
    vextract{f,i}32x4 $imm, %zmm, %xmm/mem {k}{z}   AVX512F
    vextract{f,i}64x2 $imm, %ymm, %xmm/mem {k}{z}   AVX512VL+AVX512DQ
    vextract{f,i}64x2 $imm, %zmm, %xmm/mem {k}{z}   AVX512DQ
    vextract{f,i}32x8 $imm, %zmm, %ymm/mem {k}{z}   AVX512DQ
    vextract{f,i}64x4 $imm, %zmm, %ymm/mem {k}{z}   AVX512F
    
    As the testcase shows and the patch too, we didn't get it right in all
    cases.
    
    The first hunk is about avx512vl_vextractf128v8s[if] incorrectly
    requiring TARGET_AVX512DQ.  The corresponding insn is the first
    vextract{f,i}32x4 above, so it requires VL+F, and the builtins have it
    correct (TARGET_AVX512VL implies TARGET_AVX512F):
    BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512vl_vextractf128v8sf, "__builtin_ia32_extractf32x4_256_mask", IX86_BUILTIN_EXTRACTF32X4_256, UNKNOWN, (int) V4SF_FTYPE_V8SF_INT_V4SF_UQI)
    BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512vl_vextractf128v8si, "__builtin_ia32_extracti32x4_256_mask", IX86_BUILTIN_EXTRACTI32X4_256, UNKNOWN, (int) V4SI_FTYPE_V8SI_INT_V4SI_UQI)
    We only need TARGET_AVX512DQ for avx512vl_vextractf128v4d[if].
    
    The second hunk is about vec_extract_lo_v16s[if]{,_mask}.  These are using
    the vextract{f,i}32x8 insns (AVX512DQ above), but we weren't requiring that,
    but instead incorrectly && 1 for non-masked and && (64 == 64 && TARGET_AVX512VL)
    for masked insns.  This is extraction from ZMM, so it doesn't need VL for
    anything.  The hunk actually only requires TARGET_AVX512DQ when the insn
    is masked, if it is not masked, when TARGET_AVX512DQ isn't available we can
    use vextract{f,i}64x4 instead which is available already in TARGET_AVX512F
    and does the same thing, extracts the low 256 bits from 512 bits vector
    (often we split it into just nothing, but there are some special cases like
    when using xmm16+ when we can't without AVX512VL).
    
    The last hunk is about vec_extract_lo_v8s[if]{,_mask}.  The non-_mask
    suffixed ones are ok already and just split into nothing (lowpart subreg).
    The masked ones were incorrectly requiring TARGET_AVX512VL and
    TARGET_AVX512DQ, when we only need TARGET_AVX512VL.
    
    2020-02-12  Jakub Jelinek  <jakub@redhat.com>
    
            PR target/93670
            * config/i386/sse.md (VI48F_256_DQ): New mode iterator.
            (avx512vl_vextractf128<mode>): Use it instead of VI48F_256.  Remove
            TARGET_AVX512DQ from condition.
            (vec_extract_lo_<mode><mask_name>): Use <mask_avx512dq_condition>
            instead of <mask_mode512bit_condition> in condition.  If
            TARGET_AVX512DQ is false, emit vextract*64x4 instead of
            vextract*32x8.
            (vec_extract_lo_<mode><mask_name>): Drop <mask_avx512dq_condition>
            from condition.
    
            * gcc.target/i386/avx512vl-pr93670.c: New test.

commit b7cbce7a174292adc7c9d6db81bba6922a591d69
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Mon Feb 10 22:44:40 2020 +0100

    i386: Fix -mavx -mno-mavx2 ICE with VEC_COND_EXPR [PR93637]
    
    As mentioned in the PR, for -mavx -mno-avx2 the backend does support
    vcondv4div4df and vcondv8siv8sf optabs (while generally 32-byte vectors
    aren't much supported in that case, it is performed using
    vandps/vandnps/vorps).  The problem is that after the last generic vector
    lowering (where the VEC_COND_EXPR still compares two V4DF vectors and
    has two V4DI last operands and V4DI result and so is considered ok) fre4
    folds the condition into constant, at which point the middle-end during
    expansion will try vcond_mask_optab and fall back to trying to expand it
    as the constant vector < 0 vcondv4div4di, but neither of them is supported
    for -mavx -mno-avx2 and thus we ICE.
    
    So, the options I see is either what the following patch does, also support
    vcond_mask_v4div4di and vcond_mask_v4siv4si already for TARGET_AVX, or
    require for vcondv4div4df and vcondv8siv8sf TARGET_AVX2 rather than current
    TARGET_AVX.
    
    2020-02-10  Jakub Jelinek  <jakub@redhat.com>
    
            PR target/93637
            * config/i386/sse.md (VI_256_AVX2): New mode iterator.
            (vcond_mask_<mode><sseintvecmodelower>): Use it instead of VI_256.
            Change condition from TARGET_AVX2 to TARGET_AVX.
    
            * gcc.target/i386/avx-pr93637.c: New test.

commit a91e5d88970c8d865a49f2a4ed4e17ee2c58b73f
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Sat Feb 8 10:59:40 2020 +0100

    i386: Make xmm16-xmm31 call used even in ms ABI [PR65782]
    
    On Tue, Feb 04, 2020 at 11:16:06AM +0100, Uros Bizjak wrote:
    > I guess that Comment #9 patch form the PR should be trivially correct,
    > but althouhg it looks obvious, I don't want to propose the patch since
    > I have no means of testing it.
    
    I don't have means of testing it either.
    https://docs.microsoft.com/en-us/cpp/build/x64-calling-convention?view=vs-2019
    is quite explicit that [xyz]mm16-31 are call clobbered and only xmm6-15 (low
    128-bits only) are call preserved.
    
    We are talking e.g. about
    /* { dg-options "-O2 -mabi=ms -mavx512vl" } */
    
    typedef double V __attribute__((vector_size (16)));
    void foo (void);
    V bar (void);
    void baz (V);
    void
    qux (void)
    {
      V c;
      {
        register V a __asm ("xmm18");
        V b = bar ();
        asm ("" : "=x" (a) : "0" (b));
        c = a;
      }
      foo ();
      {
        register V d __asm ("xmm18");
        V e;
        d = c;
        asm ("" : "=x" (e) : "0" (d));
        baz (e);
      }
    }
    where according to the MSDN doc gcc incorrectly holds the c value
    in xmm18 register across the foo call; if foo is compiled by some Microsoft
    compiler (or LLVM), then it could clobber %xmm18.
    If all xmm18 occurrences are changed to say xmm15, then it is valid to hold
    the 128-bit value across the foo call (though, surprisingly, LLVM saves it
    into stack anyway).
    
    The other parts are I guess mainly about SEH.  Consider e.g.
    void
    foo (void)
    {
      register double x __asm ("xmm14");
      register double y __asm ("xmm18");
      asm ("" : "=x" (x));
      asm ("" : "=v" (y));
      x += y;
      y += x;
      asm ("" : : "x" (x));
      asm ("" : : "v" (y));
    }
    looking at cross-compiler output, with -O2 -mavx512f this emits
            .file   "abcdeq.c"
            .text
            .align 16
            .globl  foo
            .def    foo;    .scl    2;      .type   32;     .endef
            .seh_proc       foo
    foo:
            subq    $40, %rsp
            .seh_stackalloc 40
            vmovaps %xmm14, (%rsp)
            .seh_savexmm    %xmm14, 0
            vmovaps %xmm18, 16(%rsp)
            .seh_savexmm    %xmm18, 16
            .seh_endprologue
            vaddsd  %xmm18, %xmm14, %xmm14
            vaddsd  %xmm18, %xmm14, %xmm18
            vmovaps (%rsp), %xmm14
            vmovaps 16(%rsp), %xmm18
            addq    $40, %rsp
            ret
            .seh_endproc
            .ident  "GCC: (GNU) 10.0.1 20200207 (experimental)"
    Does whatever assembler mingw64 uses even assemble this (I mean the
    .seh_savexmm %xmm16, 16 could be problematic)?
    I can find e.g.
    https://stackoverflow.com/questions/43152633/invalid-register-for-seh-savexmm-in-cygwin/43210527
    which then links to
    https://gcc.gnu.org/PR65782
    
    2020-02-08  Uroš Bizjak  <ubizjak@gmail.com>
                Jakub Jelinek  <jakub@redhat.com>
    
            PR target/65782
            * config/i386/i386.h (CALL_USED_REGISTERS): Make
            xmm16-xmm31 call-used even in 64-bit ms-abi.
    
            * gcc.target/i386/pr65782.c: New test.
    
    Co-authored-by: Uroš Bizjak <ubizjak@gmail.com>

commit 05fa0de35ec63db2c3aacd30cc34a7389b3c4e5d
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Feb 6 09:19:08 2020 +0100

    openmp: Fix handling of non-addressable shared scalars in parallel nested inside of target [PR93515]
    
    As the following testcase shows, we need to consider even target to be a construct
    that forces not to use copy in/out for shared on parallel inside of the target.
    E.g. for parallel nested inside another parallel or host teams, we already avoid
    copy in/out and we need to treat target the same.
    
    2020-02-06  Jakub Jelinek  <jakub@redhat.com>
    
            PR libgomp/93515
            * omp-low.c (use_pointer_for_field): For nested constructs, also
            look for map clauses on target construct.
            (scan_omp_1_stmt) <case GIMPLE_OMP_TARGET>: Bump temporarily
            taskreg_nesting_level.
    
            * testsuite/libgomp.c-c++-common/pr93515.c: New test.

commit d3266b1311723841ec553277f1fb6bfddef8809d
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Feb 6 09:15:13 2020 +0100

    openmp: Notice reduction decl in outer contexts after adding it to shared [PR93515]
    
    If we call omp_add_variable, following omp_notice_variable will already find it
    on that construct and not go through outer constructs, the following patch fixes that.
    Note, this still doesn't follow OpenMP 5.0 semantics on target combined with other
    constructs with reduction/lastprivate/linear clauses, will handle that for GCC11.
    
    2020-02-06  Jakub Jelinek  <jakub@redhat.com>
    
            PR libgomp/93515
            * gimplify.c (gimplify_scan_omp_clauses) <do_notice>: If adding
            shared clause, call omp_notice_variable on outer context if any.

commit 520b364da0b20dcb492229757190cc3f30322052
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Wed Feb 5 23:35:08 2020 +0100

    c++: Mark __builtin_convertvector operand as read [PR93557]
    
    In C++ we weren't calling mark_exp_read on the __builtin_convertvector first
    argument.  I guess it could misbehave even with lambda implicit captures.
    
    Fixed by calling decay_conversion on the argument, we use the argument as
    rvalue so we want the standard lvalue to rvalue conversions, but as the
    argument must be a vector type, e.g. integral promotions aren't really
    needed.
    
    2020-02-05  Jakub Jelinek  <jakub@redhat.com>
    
            PR c++/93557
            * semantics.c (cp_build_vec_convert): Call decay_conversion on arg
            prior to passing it to c_build_vec_convert.
    
            * c-c++-common/Wunused-var-17.c: New test.

commit d42f9eaa3e189d4228a4b3a63d02b83fed6385e7
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Wed Feb 5 11:32:37 2020 +0100

    openmp: Avoid ICEs with declare simd; declare simd inbranch [PR93555]
    
    The testcases ICE because when processing the declare simd inbranch,
    we don't create the i == 0 clone as it already exists, which means
    clone_info->nargs is not adjusted, but we then rely on it being adjusted
    when trying other clones.
    
    2020-02-05  Jakub Jelinek  <jakub@redhat.com>
    
            PR middle-end/93555
            * omp-simd-clone.c (expand_simd_clones): If simd_clone_mangle or
            simd_clone_create failed when i == 0, adjust clone->nargs by
            clone->inbranch.
    
            * c-c++-common/gomp/pr93555-1.c: New test.
            * c-c++-common/gomp/pr93555-2.c: New test.
            * gfortran.dg/gomp/pr93555.f90: New test.

commit 329475795c6eeaa2b122672091c9119b9d6c5564
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Jan 30 21:28:17 2020 +0100

    combine: Punt on out of range rotate counts [PR93505]
    
    What happens on this testcase is with the out of bounds rotate we get:
    Trying 13 -> 16:
       13: r129:SI=r132:DI#0<-<0x20
          REG_DEAD r132:DI
       16: r123:DI=r129:SI<0
          REG_DEAD r129:SI
    Successfully matched this instruction:
    (set (reg/v:DI 123 [ <retval> ])
        (const_int 0 [0]))
    during combine.  So, perhaps we could also change simplify-rtx.c to punt
    if it is out of bounds rather than trying to optimize anything.
    Or, but probably GCC11 material, if we decide that ROTATE/ROTATERT doesn't
    have out of bounds counts or introduce targetm.rotate_truncation_mask,
    we should truncate the argument instead of punting.
    Punting is better for backports though.
    
    2020-01-30  Jakub Jelinek  <jakub@redhat.com>
    
            PR middle-end/93505
            * combine.c (simplify_comparison) <case ROTATE>: Punt on out of range
            rotate counts.
    
            * gcc.c-torture/compile/pr93505.c: New test.

commit 4b124e3c9c35121969cc23d0aea4bcb2c406fd21
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Wed Jan 29 09:41:42 2020 +0100

    openmp: c++: Consider typeinfo decls to be predetermined shared [PR91118]
    
    If the typeinfo decls appear in OpenMP default(none) regions, as we no longer
    predetermine const with no mutable members, they are diagnosed as errors,
    but it isn't something the users can actually provide explicit sharing for in
    the clauses.
    
    2020-01-29  Jakub Jelinek  <jakub@redhat.com>
    
            PR c++/91118
            * cp-gimplify.c (cxx_omp_predetermined_sharing): Return
            OMP_CLAUSE_DEFAULT_SHARED for typeinfo decls.
    
            * g++.dg/gomp/pr91118-1.C: New test.
            * g++.dg/gomp/pr91118-2.C: New test.

commit 244f4b8c2823531a1e479a3773272af539dda258
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Wed Jan 29 09:39:16 2020 +0100

    openmp: Handle rest of EXEC_OACC_* in oacc_code_to_statement [PR93463]
    
    As the testcase shows, some EXEC_OACC_* codes weren't handled in
    oacc_code_to_statement.  Fixed thusly.
    
    2020-01-29  Jakub Jelinek  <jakub@redhat.com>
    
            PR fortran/93463
            * openmp.c (oacc_code_to_statement): Handle
            EXEC_OACC_{ROUTINE,UPDATE,WAIT,CACHE,{ENTER,EXIT}_DATA,DECLARE}.
    
            * gfortran.dg/goacc/pr93463.f90: New test.

commit 764e831291a2e510978ca7be0bffb55589a5a0b6
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Jan 28 08:46:23 2020 +0100

    i386: Fix ix86_fold_builtin shift folding [PR93418]
    
    The following testcase is miscompiled, because the variable shift left
    operand, { -1, -1, -1, -1 } is represented as a VECTOR_CST with
    VECTOR_CST_NPATTERNS 1 and VECTOR_CST_NELTS_PER_PATTERN 1, so when
    we call builder.new_unary_operation, builder.encoded_nelts () will be just 1
    and thus we encode the resulting vector as if all the elements were the
    same.
    For non-masked is_vshift, we could perhaps call builder.new_binary_operation
    (TREE_TYPE (args[0]), args[0], args[1], false), but then there are masked
    shifts, for non-is_vshift we could perhaps call it too but with args[2]
    instead of args[1], but there is no builder.new_ternary_operation.
    All this stuff is primarily for aarch64 anyway, on x86 we don't have any
    variable length vectors, and it is not a big deal to compute all elements
    and just let builder.finalize () find the most efficient VECTOR_CST
    representation of the vector.  So, instead of doing too much, this just
    keeps using new_unary_operation only if only one VECTOR_CST is involved
    (i.e. non-masked shift by constant) and for the rest just compute all elts.
    
    2020-01-28  Jakub Jelinek  <jakub@redhat.com>
    
            PR target/93418
            * config/i386/i386.c (ix86_fold_builtin) <do_shift>: If mask is not
            -1 or is_vshift is true, use new_vector with number of elts npatterns
            rather than new_unary_operation.
    
            * gcc.target/i386/avx2-pr93418.c: New test.

commit 3b2fbe3e723b20ea9089e5f45c55b79feb37085b
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Jan 23 20:08:22 2020 +0100

    postreload: Fix up postreload combine [PR93402]
    
    The following testcase is miscompiled, because the postreload pass changes:
    -(insn 14 13 23 2 (parallel [
    -            (set (reg:DI 1 dx [94])
    -                (plus:DI (reg:DI 1 dx [95])
    -                    (reg:DI 5 di [92])))
    -            (clobber (reg:CC 17 flags))
    -        ]) "pr93402.c":8:30 186 {*adddi_1}
    -     (expr_list:REG_EQUAL (plus:DI (reg:DI 5 di [92])
    -            (const_int 111111111111 [0x19debd01c7]))
    -        (nil)))
    -(insn 23 14 25 2 (set (reg:SI 0 ax)
    +(insn 23 13 25 2 (set (reg:SI 0 ax)
             (const_int 0 [0])) "pr93402.c":10:1 67 {*movsi_internal}
          (nil))
     (insn 25 23 26 2 (use (reg:SI 0 ax)) "pr93402.c":10:1 -1
          (nil))
    -(insn 26 25 35 2 (use (reg:DI 1 dx)) "pr93402.c":10:1 -1
    +(insn 26 25 35 2 (use (plus:DI (reg:DI 1 dx [95])
    +            (reg:DI 5 di [92]))) "pr93402.c":10:1 -1
          (nil))
    A USE insn is not a normal insn and verify_changes called from
    apply_change_group is happy about any changes into it.
    The following patch avoids this optimization if we were to change
    the USE operand (this routine only changes a reg into (plus reg reg2)).
    
    2020-01-23  Jakub Jelinek  <jakub@redhat.com>
    
            PR rtl-optimization/93402
            * postreload.c (reload_combine_recognize_pattern): Don't try to adjust
            USE insns.
    
            * gcc.c-torture/execute/pr93402.c: New test.

commit 889cc2d87b055eaf9405a0e8ac4197857b2c5546
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Feb 13 00:18:36 2020 +0000

    Daily bump.

commit 541431facd4b1fa22b14ad2e6bc7c033bb833fd4
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Feb 12 00:18:39 2020 +0000

    Daily bump.

commit f6e9ae4da8f040ab2ef2eb37d0fb4da6f823bf81
Author: Tamar Christina <tamar.christina@arm.com>
Date:   Tue Feb 11 10:50:12 2020 +0000

    middle-end: Fix logical shift truncation (PR rtl-optimization/91838) (gcc-9 backport)
    
    This fixes a fall-out from a patch I had submitted two years ago which started
    allowing simplify-rtx to fold logical right shifts by offsets a followed by b
    into >> (a + b).
    
    However this can generate inefficient code when the resulting shift count ends
    up being the same as the size of the shift mode.  This will create some
    undefined behavior on most platforms.
    
    This patch changes to code to truncate to 0 if the shift amount goes out of
    range.  Before my older patch this used to happen in combine when it saw the
    two shifts.  However since we combine them here combine never gets a chance to
    truncate them.
    
    The issue mostly affects GCC 8 and 9 since on 10 the back-end knows how to deal
    with this shift constant but it's better to do the right thing in simplify-rtx.
    
    Note that this doesn't take care of the Arithmetic shift where you could replace
    the constant with MODE_BITS (mode) - 1, but that's not a regression so punting it.
    
    gcc/ChangeLog:
    
            Backport from mainline
            2020-01-31  Tamar Christina  <tamar.christina@arm.com>
    
            PR rtl-optimization/91838
            * simplify-rtx.c (simplify_binary_operation_1): Update LSHIFTRT case
            to truncate if allowed or reject combination.
    
    gcc/testsuite/ChangeLog:
    
            Backport from mainline
            2020-01-31  Tamar Christina  <tamar.christina@arm.com>
                        Jakub Jelinek  <jakub@redhat.com>
    
            PR rtl-optimization/91838
            * g++.dg/opt/pr91838.C: New test.

commit 92483696301368d028bc4b570dbba53cdfdce609
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Feb 11 00:18:28 2020 +0000

    Daily bump.

commit 3fde3398341ba900ed2e1eaecf00799fda66686a
Author: H.J. Lu <hjl.tools@gmail.com>
Date:   Mon Feb 10 07:58:45 2020 -0800

    i386: Properly pop restore token in signal frame
    
    Linux CET kernel places a restore token on shadow stack for signal
    handler to enhance security.  The restore token is 8 byte and aligned
    to 8 bytes.  It is usually transparent to user programs since kernel
    will pop the restore token when signal handler returns.  But when an
    exception is thrown from a signal handler, now we need to pop the
    restore token from shadow stack.  For x86-64, we just need to treat
    the signal frame as normal frame.  For i386, we need to search for
    the restore token to check if the original shadow stack is 8 byte
    aligned.  If the original shadow stack is 8 byte aligned, we just
    need to pop 2 slots, one restore token, from shadow stack.  Otherwise,
    we need to pop 3 slots, one restore token + 4 byte padding, from
    shadow stack.
    
    This patch also includes 2 tests, one has a restore token with 4 byte
    padding and one without.
    
    Tested on Linux/x86-64 CET machine with and without -m32.
    
    libgcc/
    
            Backport from mainline
            PR libgcc/85334
            * config/i386/shadow-stack-unwind.h (_Unwind_Frames_Increment):
            New.
    
    gcc/testsuite/
    
            Backport from mainline
            PR libgcc/85334
            * g++.target/i386/pr85334-1.C: New test.
            * g++.target/i386/pr85334-2.C: Likewise.
    
    (cherry picked from commit bf6465d0461234ccd45ae34d5e2375a0bee0081d)

commit f1ee6f0fe443129448fc90c42aaafc869a9f636f
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Feb 10 00:18:34 2020 +0000

    Daily bump.

commit 060c5df73b28c2c09f0d160970c91bdabd3edd0d
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Feb 9 00:18:28 2020 +0000

    Daily bump.

commit 3f764f459a9c77f2af58f6878293e2b4bd1def78
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Feb 8 00:18:45 2020 +0000

    Daily bump.

commit 850c38f5f4158a157fa792ca0b20a5a17a3ff642
Author: H.J. Lu <hjl.tools@gmail.com>
Date:   Fri Feb 7 03:50:40 2020 -0800

    x86-64: Pass aggregates with only float/double in GPRs for MS_ABI
    
    MS_ABI requires passing aggregates with only float/double in integer
    registers as shown in the output from MSVC v19.10 at:
    
    https://godbolt.org/z/2NPygd
    
    This patch fixed:
    
    FAIL: libffi.bhaible/test-callback.c -W -Wall -Wno-psabi -DDGTEST=54 -Wno-unused-variable -Wno-unused-parameter -Wno-unused-but-set-variable -Wno-uninitialized -O0 -DABI_NUM=FFI_GNUW64 -DABI_ATTR=MSABI execution test
    FAIL: libffi.bhaible/test-callback.c -W -Wall -Wno-psabi -DDGTEST=54 -Wno-unused-variable -Wno-unused-parameter -Wno-unused-but-set-variable -Wno-uninitialized -O2 -DABI_NUM=FFI_GNUW64 -DABI_ATTR=MSABI execution test
    FAIL: libffi.bhaible/test-callback.c -W -Wall -Wno-psabi -DDGTEST=55 -Wno-unused-variable -Wno-unused-parameter -Wno-unused-but-set-variable -Wno-uninitialized -O0 -DABI_NUM=FFI_GNUW64 -DABI_ATTR=MSABI execution test
    FAIL: libffi.bhaible/test-callback.c -W -Wall -Wno-psabi -DDGTEST=55 -Wno-unused-variable -Wno-unused-parameter -Wno-unused-but-set-variable -Wno-uninitialized -O2 -DABI_NUM=FFI_GNUW64 -DABI_ATTR=MSABI execution test
    FAIL: libffi.bhaible/test-callback.c -W -Wall -Wno-psabi -DDGTEST=56 -Wno-unused-variable -Wno-unused-parameter -Wno-unused-but-set-variable -Wno-uninitialized -O0 -DABI_NUM=FFI_GNUW64 -DABI_ATTR=MSABI execution test
    FAIL: libffi.bhaible/test-callback.c -W -Wall -Wno-psabi -DDGTEST=56 -Wno-unused-variable -Wno-unused-parameter -Wno-unused-but-set-variable -Wno-uninitialized -O2 -DABI_NUM=FFI_GNUW64 -DABI_ATTR=MSABI execution test
    
    in libffi testsuite.
    
    gcc/
    
            Backport from mainline
            PR target/85667
            * config/i386/i386.c (function_arg_ms_64): Add a type argument.
            Don't return aggregates with only SFmode and DFmode in SSE
            register.
            (ix86_function_arg): Pass type to function_arg_ms_64.
    
    gcc/testsuite/
    
            Backport from mainline
            PR target/85667
            * gcc.target/i386/pr85667-10.c: New test.
            * gcc.target/i386/pr85667-7.c: Likewise.
            * gcc.target/i386/pr85667-8.c: Likewise.
            * gcc.target/i386/pr85667-9.c: Likewise.
    
    (cherry picked from commit ea5ca698dca15dc86b823661ac357a30b49dd0f6)

commit 13f225a4f236b8664afc25fa3df14f4d19712964
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Feb 7 00:18:37 2020 +0000

    Daily bump.

commit 763cec3a131cbb62dd34ff945973ff4166dbdc6b
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Feb 6 00:18:31 2020 +0000

    Daily bump.

commit 533d051f6d1016acdebf8fff6a5a6366f6e98b06
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Feb 5 00:18:32 2020 +0000

    Daily bump.

commit e0cd0469a2c8051d857d8538562d215ef8e8df2f
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Feb 4 00:18:45 2020 +0000

    Daily bump.

commit 41ef25ed059a187010c179c5ee304b2f5d66e141
Author: Tobias Burnus <tobias@codesourcery.com>
Date:   Mon Feb 3 12:14:58 2020 +0100

    [OpenMP] Add missing parameters to omp_lib documentation (PR fortran/93541)
    
            Backported from mainline
            2020-02-03  Tobias Burnus  <tobias@codesourcery.com>
    
            PR fortran/93541
            * intrinisic.texi (OpenMP Modules OMP_LIB and OMP_LIB_KINDS):
            Add undocumented parameters from omp_lib.f90.in.

commit e5446f2201d93fc9adc913ed320aa70437ff4235
Author: Tobias Burnus <tobias@codesourcery.com>
Date:   Mon Feb 3 12:09:46 2020 +0100

    [Fortran] Disable front-end optimization for OpenACC atomic (PR93462)
    
            Backported from mainline
            2020-01-31  Tobias Burnus  <tobias@codesourcery.com>
    
            PR fortran/93462
            * frontend-passes.c (gfc_code_walker): For EXEC_OACC_ATOMIC, set
            in_omp_atomic to true prevent front-end optimization.
    
            PR fortran/93462
            * gfortran.dg/goacc/atomic-1.f90: New.

commit 5c80a1bd426a4aeccff0da54ab80d93d7973590e
Author: Tobias Burnus <tobias@codesourcery.com>
Date:   Mon Feb 3 11:48:17 2020 +0100

    Fortran] PR93309 – permit repeated 'implicit none(external)'
    
            Backported from mainline
            2020-01-21  Tobias Burnus  <tobias@codesourcery.com>
    
            PR fortran/93309
            * interface.c (gfc_procedure_use): Also check parent namespace for
            'implict none (external)'.
            * symbol.c (gfc_get_namespace): Don't set has_implicit_none_export
            to parent namespace's setting.
    
            Backported from mainline
            2020-01-21  Tobias Burnus  <tobias@codesourcery.com>
    
            PR fortran/93309
            * gfortran.dg/external_implicit_none_2.f90: New.

commit 2210e437a3eecdf9c29cc37c30baf4cf5dc4b3c9
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Feb 3 00:18:50 2020 +0000

    Daily bump.

commit 40f23be6e93efb7e15721e9aab2b659f665caf06
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Feb 2 00:18:32 2020 +0000

    Daily bump.

commit bf4ee21e21be13928c5c492959183f7bb6560b1c
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Feb 1 00:18:28 2020 +0000

    Daily bump.

commit 6da4411d9501cb329d07266df11020085f991669
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Jan 31 00:18:49 2020 +0000

    Daily bump.

commit 6957d3e4eef1f4243eb23ff62aea06139ef4415a
Author: John David Anglin <danglin@gcc.gnu.org>
Date:   Thu Jan 30 07:29:35 2020 -0500

    Fix ICE in pa_elf_select_rtx_section.
    
            2020-01-30  John David Anglin  <danglin@gcc.gnu.org>
    
            * config/pa/pa.c (pa_elf_select_rtx_section): Place function pointers
            without a DECL in .data.rel.ro.local.

commit afb84a42ad867c117d0112fbb8edd863bdc0dafe
Author: Kito Cheng <kito.cheng@sifive.com>
Date:   Fri Jan 17 19:49:15 2020 +0800

    RISC-V: Disallow regrenme if the TO register never used before for interrupt functions
    
    gcc/ChangeLog
    
            PR target/93304
            * config/riscv/riscv-protos.h (riscv_hard_regno_rename_ok): New.
            * config/riscv/riscv.c (riscv_hard_regno_rename_ok): New.
            * config/riscv/riscv.h (HARD_REGNO_RENAME_OK): Defined.
    
    gcc/testsuite/ChangeLog
    
            PR target/93304
            * gcc.target/riscv/pr93304.c: New test.

commit 9d9679132e0e9b0108e78bf1bc8fdea6238649a3
Author: Jason Merrill <jason@redhat.com>
Date:   Wed Jan 29 17:16:12 2020 -0500

    c++: Drop alignas restriction for stack variables.
    
    Since expand_stack_vars and such know how to deal with variables aligned
    beyond MAX_SUPPORTED_STACK_ALIGNMENT, we shouldn't reject alignas of large
    alignments.  And if we don't do that, there's no point in having
    check_cxx_fundamental_alignment_constraints at all, since
    check_user_alignment already enforces MAX_OFILE_ALIGNMENT.
    
            PR c++/89357
            * c-attribs.c (check_cxx_fundamental_alignment_constraints): Remove.

commit c6613dd33ce5e84e64a3c9f384209a19a2968464
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Jan 30 00:18:31 2020 +0000

    Daily bump.

commit a1f8dca201ee08f526342ca9cdf022a9ea92e1b3
Author: Szabolcs Nagy <szabolcs.nagy@arm.com>
Date:   Wed Jan 15 12:23:40 2020 +0000

    [AArch64] PR92424: Fix -fpatchable-function-entry=N,M with BTI
    
    This is a workaround that emits a BTI after the function label if that
    is followed by a patch area. We try to remove the BTI that follows the
    patch area (this may fail e.g. if the first instruction is a PACIASP).
    
    So before this commit -fpatchable-function-entry=3,1 with bti generates
    
        .section __patchable_function_entries
        .8byte .LPFE
        .text
      .LPFE:
        nop
      foo:
        nop
        nop
        bti c // or paciasp
        ...
    
    and after this commit
    
        .section __patchable_function_entries
        .8byte .LPFE
        .text
      .LPFE:
        nop
      foo:
        bti c
        nop
        nop
        // may be paciasp
        ...
    
    and with -fpatchable-function-entry=1 (M=0) the code now is
    
      foo:
        bti c
        .section __patchable_function_entries
        .8byte .LPFE
        .text
      .LPFE:
        nop
        // may be paciasp
        ...
    
    There is a new bti insn in the middle of the patchable area users need
    to be aware of unless M=0 (patch area is after the new bti) or M=N
    (patch area is before the label, no new bti). Note: bti is not added to
    all functions consistently (it can be turned off per function using a
    target attribute or the compiler may detect that the function is never
    called indirectly), so if bti is inserted in the middle of a patch area
    then user code needs to deal with detecting it.
    
    Tested on aarch64-none-linux-gnu.
    
    gcc/ChangeLog:
    
            PR target/92424
            * config/aarch64/aarch64.c (aarch64_declare_function_name): Set
            cfun->machine->label_is_assembled.
            (aarch64_print_patchable_function_entry): New.
            (TARGET_ASM_PRINT_PATCHABLE_FUNCTION_ENTRY): Define.
            * config/aarch64/aarch64.h (struct machine_function): New field,
            label_is_assembled.
    
    gcc/testsuite/ChangeLog:
    
            PR target/92424
            * gcc.target/aarch64/pr92424-2.c: New test.
            * gcc.target/aarch64/pr92424-3.c: New test.

commit 50a42922d35343116d02c11f550b722105d4bdb7
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Jan 29 00:18:34 2020 +0000

    Daily bump.

commit 1c7061c7c352e086b64a60b91e5204f9757bfa97
Author: Jason Merrill <jason@redhat.com>
Date:   Tue Jan 28 12:26:10 2020 -0500

    c++: Allow template rvalue-ref conv to bind to lvalue ref.
    
    When I implemented the [over.match.ref] rule that a reference conversion
    function needs to match l/rvalue of the target reference type it changed our
    handling of this testcase.  It seems to me that our current behavior is what
    the standard says, but it doesn't seem desirable, and all the other
    compilers have our old behavior.  So let's limit the change to non-templates
    until there's some clarification from the committee.
    
            PR c++/90546
            * call.c (build_user_type_conversion_1): Allow a template conversion
            returning an rvalue reference to bind directly to an lvalue.

commit 9d4d55a52d44b11e7621a5b455f2a38a32b37367
Author: Jason Merrill <jason@redhat.com>
Date:   Mon Jan 27 17:55:14 2020 -0500

    c++: Function declared with typedef with eh-specification.
    
    We just need to handle the exception specification like other properties of
    a function typedef.
    
            PR c++/90731
            * decl.c (grokdeclarator): Propagate eh spec from typedef.

commit dcb23017b1a9f65a81dbbe0f2b1a42999f7b2ac7
Author: Jason Merrill <jason@redhat.com>
Date:   Sun Jan 26 22:19:47 2020 -0500

    c++: Fix array of char typedef in template (PR90966).
    
    Since Martin Sebor's patch for PR 71625 to change braced array initializers
    to STRING_CST in some cases, we need to be ready for STRING_CST with types
    that are changed by tsubst.  fold_convert doesn't know how to deal with
    STRING_CST, which is reasonable; we really shouldn't expect it to here.  So
    let's handle STRING_CST separately.
    
            PR c++/90966
            * pt.c (tsubst_copy) [STRING_CST]: Don't use fold_convert.

commit 7db777843ccba2596f3aa1817edc50156afe2fc3
Author: Jason Merrill <jason@redhat.com>
Date:   Fri Jan 24 18:20:56 2020 -0500

    c++: Fix ICE with lambda in member operator (PR93279)
    
    Here the problem was that we were remembering the lookup in template scope,
    and then trying to reuse that lookup in the instantiation without
    substituting into it at all.  The simplest solution is to not try to
    remember a lookup that finds a class-scope declaration, as in that case
    doing the normal lookup again at instantiation time will always find the
    right declarations.
    
            PR c++/93279 - ICE with lambda in member operator.
            * name-lookup.c (maybe_save_operator_binding): Don't remember
            class-scope bindings.

commit 83f65674e78d97d27537361de1a9d74067ff228d
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Jan 28 00:18:29 2020 +0000

    Daily bump.

commit 2ceb5aba64e587f8ce66bec3c9af1f2cf60effa0
Author: Nathan Sidwell <nathan@acm.org>
Date:   Mon Jan 27 05:49:43 2020 -0800

    c++: Bogus error using namespace alias [PR91826]
    
    My changes to is_nested_namespace broke is_ancestor's use where a namespace
    alias might be passed in.  This changes is_ancestor to look through the alias.
    
            PR c++/91826
            * name-lookup.c (is_ancestor): Allow CHILD to be a namespace alias.

commit a708cb25d9284e9234b6457f8260bfc79f09043e
Author: Wilco Dijkstra <wdijkstr@arm.com>
Date:   Fri Jan 17 13:17:21 2020 +0000

    [AArch64] Fix shrinkwrapping interactions with atomics (PR92692)
    
    The separate shrinkwrapping pass may insert stores in the middle
    of atomics loops which can cause issues on some implementations.
    Avoid this by delaying splitting atomics patterns until after
    prolog/epilog generation.
    
    gcc/
            PR target/92692
            * config/aarch64/aarch64.c (aarch64_split_compare_and_swap)
            Add assert to ensure prolog has been emitted.
            (aarch64_split_atomic_op): Likewise.
            * config/aarch64/atomics.md (aarch64_compare_and_swap<mode>)
            Use epilogue_completed rather than reload_completed.
            (aarch64_atomic_exchange<mode>): Likewise.
            (aarch64_atomic_<atomic_optab><mode>): Likewise.
            (atomic_nand<mode>): Likewise.
            (aarch64_atomic_fetch_<atomic_optab><mode>): Likewise.
            (atomic_fetch_nand<mode>): Likewise.
            (aarch64_atomic_<atomic_optab>_fetch<mode>): Likewise.
            (atomic_nand_fetch<mode>): Likewise.
    
    (cherry picked from commit e5e07b68187b9aa334519746c45b8cffc5eb7e5c)

commit 568968edb0cc9d9c54d6f143cd47a3a11e3f0ddf
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Jan 27 00:18:48 2020 +0000

    Daily bump.

commit bf15829bf6430fe1795df591142b1f156dfe6411
Author: Rainer Orth <ro@CeBiTec.Uni-Bielefeld.DE>
Date:   Sun Jan 26 21:39:07 2020 +0100

    testsuite: xfail gcc.target/i386/pr91298-?.c on Solaris/x86 with as
    
    The new gcc.target/i386/pr91298-?.c testcases FAIL on Solaris/x86 with the
    native assembler:
    
    FAIL: gcc.target/i386/pr91298-1.c (test for excess errors)
    
    Excess errors:
    Assembler: pr91298-1.c
            "/var/tmp//ccE6r3xb.s", line 5 : Syntax error
            Near line: "    .globl  $quux"
            "/var/tmp//ccE6r3xb.s", line 6 : Syntax error
            Near line: "    .type   $quux, @function"
            "/var/tmp//ccE6r3xb.s", line 7 : Syntax error
            Near line: "$quux:"
            "/var/tmp//ccE6r3xb.s", line 15 : Syntax error
            Near line: "    .size   $quux, .-$quux"
            "/var/tmp//ccE6r3xb.s", line 24 : Syntax error
            Near line: "    movl    $($a), %eax"
            "/var/tmp//ccE6r3xb.s", line 38 : Syntax error
            Near line: "    leal    ($a)(,%eax,4), %eax"
            "/var/tmp//ccE6r3xb.s", line 51 : Syntax error
            Near line: "    movl    ($a), %eax"
            "/var/tmp//ccE6r3xb.s", line 63 : Syntax error
            Near line: "    movl    ($a)+16, %eax"
            "/var/tmp//ccE6r3xb.s", line 97 : Syntax error
            Near line: "    movl    $($quux), %eax"
            "/var/tmp//ccE6r3xb.s", line 101 : Syntax error
            Near line: "    .globl  $a"
            "/var/tmp//ccE6r3xb.s", line 104 : Syntax error
            Near line: "    .type   $a, @object"
            "/var/tmp//ccE6r3xb.s", line 105 : Syntax error
            Near line: "    .size   $a, 72"
            "/var/tmp//ccE6r3xb.s", line 106 : Syntax error
            Near line: "$a:"
            "/var/tmp//ccE6r3xb.s", line 228 : Syntax error
            Near line: "    .long   ($a)"
    
    FAIL: gcc.target/i386/pr91298-2.c (test for excess errors)
    
    It only allows letters, digits, '_' and '.' in identifiers:
    https://docs.oracle.com/cd/E37838_01/html/E61064/eqbsx.html#XALRMeoqjw
    
    For lack of an effective-target keyword matching -fdollars-in-identifiers,
    this patch fixes this by xfailing them on *-*-solaris2.* && !gas.
    
    Tested on i386-pc-solaris2.11 with as and gas and x86_64-pc-linux-gnu.
    
            * gcc.target/i386/pr91298-1.c: xfail on Solaris/x86 with native
            assembler.
            * gcc.target/i386/pr91298-2.c: Likewise.

commit 393df7be49d948573c1d037b54d83a903d94f358
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Jan 26 00:18:21 2020 +0000

    Daily bump.

commit 7058d1744c663363b8de1e03a2ace8ecf3fa3144
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Jan 25 00:18:24 2020 +0000

    Daily bump.

commit a4b7cf5865823df4b4df1d840d692dfc83fd0672
Author: Jason Merrill <jason@redhat.com>
Date:   Thu Jan 23 15:45:36 2020 -0500

    c++: Unshare expressions from constexpr cache.
    
    Another place we need to unshare cached expressions.
    
            PR c++/92852 - ICE with generic lambda and reference var.
            * constexpr.c (maybe_constant_value): Likewise.

commit e2bcf65feea9590e6f260862b3c740b5e803f851
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Fri Jan 24 11:13:55 2020 +0000

    libstdc++: Simplify makefile rule for largefile-config.h (PR91947)
    
    The previous rule could leave an incomplete file if the build was
    interrupted, which would then not be remade if make was run again.
    
    This makes the rule more robust by writing to a temporary file and only
    moving it into place as the final step. It also simplifies the rule so
    that only the essential macro definitions are written to the file, not
    the explanatory comments and commented out #undef lines.
    
    Also, the macro for enabling LFS on Mac OS X 10.5 is now set
    unconditionally, which is a bug fix from upstream autoconf.
    
    Backport from mainline
    2020-01-23  Jonathan Wakely  <jwakely@redhat.com>
    
            PR libstdc++/91947
            * include/Makefile.am (${host_builddir}/largefile-config.h): Simplify
            rule.
            * include/Makefile.in: Regenerate.

commit 461c01b2d94bcbdc28b24a7399896125c23997b6
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Fri Jan 24 11:17:58 2020 +0000

    libstdc++: Fix recent documentation changes
    
    Backport from mainline
    2020-01-20  Jonathan Wakely  <jwakely@redhat.com>
    
            * doc/xml/faq.xml: Fix grammar.
            * doc/xml/manual/appendix_contributing.xml: Improve instructions.
            * doc/xml/manual/spine.xml: Update copyright years.
            * doc/html/*: Regenerate.

commit 5fbc17523478f74c074e943569c1e53b1dad768e
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Jan 24 00:18:13 2020 +0000

    Daily bump.

commit 6dd69b78671cf9da8028f38011b1c02a5c61d23c
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Jan 23 00:18:53 2020 +0000

    Daily bump.

commit f4a36c5017fae34b967ced011cd6e57a2bdac094
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Wed Jan 22 20:16:28 2020 +0100

    Cherry-pick 15 bugfixes from mainline
    
    r10-6140-gd80f0a8dc9c2e5886bb79bddee2674e1d3f9d105
    r10-6137-gc892d8f58f6fed46c343bdb6dd4d365f08f801b8
    r10-6136-g44a9d801a7080d39658754ad603536da6cff2cd0
    r10-6135-ga38979d9d7a4ab08336436052704028c56187618
    r10-6118-gbd0a3e244d94ad4a5e41f01ebf285f0861cb4a03
    r10-6104-g51e010b5f75c1fff06425a72702c1bf82a3ab053
    r10-6041-gc60a18f8056facdcf370ce0e5f51550c9df5b539
    r10-5954-gfbbc4c24fd7ba87e0c47cd965ae624afba6fa375
    r10-5897-g91df4397a1404df65de6de23426294c50ab88bd2
    r10-5829-ga0ab54de0ec3e0d48b2a681f7f78fe14bc4099eb
    r10-5723-g5a6e28b5bae7a236b35994d0f64fd902a574872c
    r10-5712-g4ea5d54b3c7175de045589f994fc94ed7e59d80d
    r10-5697-g2c8297996a7ab3496c5d2f798cdbe4cab749468e
    r10-5650-g7cd268ad6a6f71877744539d17ed53e752774bfa
    r10-5618-g6c7b84305a5e686644ee64bfd2d415f3f43fa85b

commit b6c79134021b328e8ab379d4d8c76f4e3c061b44
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Wed Jan 22 18:08:31 2020 +0100

    aarch64: Fix aarch64_expand_subvti constant handling [PR93335]
    
    The two patterns that call aarch64_expand_subvti ensure that {low,high}_in1
    is a register, while {low,high}_in2 can be a register or immediate.
    subdi3_compare1_imm uses the aarch64_plus_immediate predicate for its last
    two operands (the value and negated value), but aarch64_expand_subvti calls
    it whenever low_in2 is a CONST_INT, which leads to ICEs during vregs pass,
    as the emitted insn is not recognized as valid subdi3_compare1_imm.
    The following patch fixes that by only using subdi3_compare1_imm if it is ok
    to do so, and otherwise force the constant into register and use the
    non-immediate version - subdi3_compare1.
    Furthermore, previously the code was calling force_reg on high_in2 only if
    low_in2 is CONST_INT, on the (reasonable) assumption is that only if low_in2
    is a CONST_INT, high_in2 can be non-REG, but with the above changes even in
    the else we might have CONST_INT and force_reg doesn't do anything if the
    operand is already a REG, so this patch calls it unconditionally.
    
    2020-01-22  Jakub Jelinek  <jakub@redhat.com>
    
            PR target/93335
            * config/aarch64/aarch64.c (aarch64_expand_subvti): Only use
            gen_subdi3_compare1_imm if low_in2 satisfies aarch64_plus_immediate
            predicate, not whenever it is CONST_INT.  Otherwise, force_reg it.
            Call force_reg on high_in2 unconditionally.
    
            * gcc.c-torture/compile/pr93335.c: New test.

commit d1c29dc8a3b9c776919e7d1489d45060d2c24f2a
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Wed Jan 22 18:07:54 2020 +0100

    i386: Fix up -fdollars-in-identifiers with identifiers starting with $ in -masm=att [PR91298]
    
    In AT&T syntax leading $ is special, so if we have identifiers that start
    with dollar, we usually fail to assemble it (or assemble incorrectly).
    As mentioned in the PR, what works is wrapping the identifiers inside of
    parens, like:
            movl    $($a), %eax
            leaq    ($a)(,%rdi,4), %rax
            movl    ($a)(%rip), %eax
            movl    ($a)+16(%rip), %eax
            .globl  $a
            .type   $a, @object
            .size   $a, 72
    $a:
            .string "$a"
            .quad   ($a)
    (this is x86_64 -fno-pic -O2).  In some places ($a) is not accepted,
    like as .globl operand, in .type, .size, so the patch overrides
    ASM_OUTPUT_SYMBOL_REF rather than e.g. ASM_OUTPUT_LABELREF.
    I didn't want to duplicate what assemble_name is doing (following
    transparent aliases), so split assemble_name into two parts; just
    mere looking at the first character of a name before calling assemble_name
    wouldn't be good enough, a transparent alias could lead from a name
    not starting with $ to one starting with it and vice versa.
    
    2020-01-22  Jakub Jelinek  <jakub@redhat.com>
    
            PR target/91298
            * output.h (assemble_name_resolve): Declare.
            * varasm.c (assemble_name_resolve): New function.
            (assemble_name): Use it.
            * config/i386/i386.h (ASM_OUTPUT_SYMBOL_REF): Define.
    
            * gcc.target/i386/pr91298-1.c: New test.
            * gcc.target/i386/pr91298-2.c: New test.

commit 18cfaa4217fabce8df0f2aac5367bf4952a13f51
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Wed Jan 22 18:07:03 2020 +0100

    openmp: Fix up !$omp target parallel handling
    
    The PR93329 fix revealed we ICE on !$omp target parallel, this change fixes
    that.
    
    2020-01-22  Jakub Jelinek  <jakub@redhat.com>
    
            * parse.c (parse_omp_structured_block): Handle ST_OMP_TARGET_PARALLEL.
            * trans-openmp.c (gfc_trans_omp_target)
            <case EXEC_OMP_TARGET_PARALLEL>: Call pushlevel first.
    
            * gfortran.dg/gomp/target-parallel1.f90: New test.
            * gfortran.dg/goacc/pr93329.f90: Enable commented out target parallel
            test.

commit 39d602ba468c722077c9bdebaae16b8300c66028
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Wed Jan 22 18:05:49 2020 +0100

    openmp: Teach omp_code_to_statement about rest of OpenMP statements
    
    The omp_code_to_statement function added with the initial OpenACC support
    only handled small subset of the OpenMP statements, leading to ICE if
    any other OpenMP directive appeared inside of OpenACC directive.
    
    2020-01-22  Jakub Jelinek  <jakub@redhat.com>
    
            PR fortran/93329
            * openmp.c (omp_code_to_statement): Handle remaining EXEC_OMP_*
            cases.
    
            * gfortran.dg/goacc/pr93329.f90: New test.

commit 51faa475c91c5373b680889664d1d52a73a79776
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Wed Jan 22 17:55:23 2020 +0100

    riscv: Fix up riscv_rtx_costs for RTL checking (PR target/93333)
    
    As mentioned in the PR, during combine rtx_costs can be called sometimes
    even on RTL that has not been validated yet and so can contain even operands
    that aren't valid in any instruction.
    
    2020-01-21  Jakub Jelinek  <jakub@redhat.com>
    
            PR target/93333
            * config/riscv/riscv.c (riscv_rtx_costs) <case ZERO_EXTRACT>: Verify
            the last two operands are CONST_INT_P before using them as such.
    
            * gcc.c-torture/compile/pr93333.c: New test.

commit 1abe8d45b71fa42f5d1690920e9c9d0087168b83
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Wed Jan 22 17:54:32 2020 +0100

    powerpc: Fix ICE with fp conditional move (PR target/93073)
    
    The following testcase ICEs, because for TFmode the particular subtraction
    pattern (*subtf3) is not enabled with the given options.  Using
    expand_simple_binop instead of emitting the subtraction by hand just moves
    the ICE one insn later, NEG of ABS is not then recognized, etc., but
    ultimately the problem is that when rs6000_emit_cmove is called for floating
    point operand mode (and earlier condition ensures that in that case
    compare_mode is also floating point), the expander makes sure the
    operand mode is SFDF, but for the comparison mode nothing checks it, yet
    there is just one *fsel* pattern with 2 separate SFDF iterators.
    
    The following patch fixes it by giving up if compare_mode is not SFmode or
    DFmode.
    
    2020-01-21  Jakub Jelinek  <jakub@redhat.com>
    
            PR target/93073
            * config/rs6000/rs6000.c (rs6000_emit_cmove): If using fsel, punt for
            compare_mode other than SFmode or DFmode.
    
            * gcc.target/powerpc/pr93073.c: New test.

commit 514314b73109b3672ecb3c3c04f614bb7c7fef57
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Wed Jan 22 17:52:11 2020 +0100

    c++: Fix deprecated attribute handling on templates (PR c++/93228)
    
    As the following testcase shows, when deprecated attribute is on a template,
    we'd never print the message if any, because the attribute is not
    present on the TEMPLATE_DECL with which warn_deprecated_use is called,
    but on its DECL_TEMPLATE_RESULT or its type.
    
    2020-01-17  Jakub Jelinek  <jakub@redhat.com>
    
            PR c++/93228
            * parser.c (cp_parser_template_name): Look up deprecated attribute
            in DECL_TEMPLATE_RESULT or its type's attributes.
    
            * g++.dg/cpp1y/attr-deprecated-3.C: New test.

commit a5ce64f7d50e2f5e66ceeb88c7601bd04f3b94ea
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Wed Jan 22 17:51:14 2020 +0100

    i386: Fix wrong-code x86 issue with avx512{f,vl} fma PR93009
    
    As mentioned in the PR, the following testcase is miscompiled with avx512vl.
    The reason is that the fma *_bcst_1 define_insns have two alternatives:
    "=v,v" "0,v" "v,0" "m,m" and use the same
    vfmadd213* %3<avx512bcst>, %2, %0<sd_mask_op4>
    pattern.  If the first alternative is chosen, everything is ok, but if the
    second alternative is chosen, %2 and %0 are the same register, so instead
    of doing dest=dest*another+membcst we do dest=dest*dest+membcst.
    Now, to fix this, either we'd need separate:
      "vfmadd213<ssemodesuffix>\t{%3<avx512bcst>, %2, %0<sd_mask_op4>|%0<sd_mask_op4>, %2, %3<avx512bcst>}
       vfmadd213<ssemodesuffix>\t{%3<avx512bcst>, %1, %0<sd_mask_op4>|%0<sd_mask_op4>, %1, %3<avx512bcst>}"
    where for the second alternative, we'd just use %1 instead of %2, but
    what I think is actually cleaner is just use a single alternative and
    make the two multiplication operands commutative, which they really are.
    
    2020-01-15  Jakub Jelinek  <jakub@redhat.com>
    
            PR target/93009
            * config/i386/sse.md
            (*<sd_mask_codefor>fma_fmadd_<mode><sd_maskz_name>_bcst_1,
            *<sd_mask_codefor>fma_fmsub_<mode><sd_maskz_name>_bcst_1,
            *<sd_mask_codefor>fma_fnmadd_<mode><sd_maskz_name>_bcst_1,
            *<sd_mask_codefor>fma_fnmsub_<mode><sd_maskz_name>_bcst_1): Use
            just a single alternative instead of two, make operands 1 and 2
            commutative.
    
            * gcc.target/i386/avx512vl-pr93009.c: New test.

commit 13e141515f5f9f2386c4a894326929f03fb59076
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Wed Jan 22 17:50:14 2020 +0100

    re PR libgomp/93219 (unused return value in affinity-fmt.c)
    
            PR libgomp/93219
            * libgomp.h (gomp_print_string): Change return type from void to int.
            * affinity-fmt.c (gomp_print_string): Likewise.  Return true if
            not all characters have been written.

commit 5e94f77146e63f0b26ce2cc1cf8f42ac493d777a
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Wed Jan 22 17:49:38 2020 +0100

    re PR inline-asm/93202 ([RISCV] ICE when using inline asm 'h' operand modifier)
    
            PR inline-asm/93202
            * config/riscv/riscv.c (riscv_print_operand_reloc): Use
            output_operand_lossage instead of gcc_unreachable.
            * doc/md.texi (riscv f constraint): Fix typo.
    
            * gcc.target/riscv/pr93202.c: New test.

commit 75cdf669074fe6a49ea6a3582acf54d00acfa9ce
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Wed Jan 22 17:48:48 2020 +0100

    re PR rtl-optimization/93088 (Compile time hog on gcc/testsuite/gcc.target/i386/pr56348.c w/ -O3 -funroll-loops -fno-tree-dominator-opts -fno-tree-vrp)
    
            PR rtl-optimization/93088
            * loop-iv.c (find_single_def_src): Punt after looking through
            128 reg copies for regs with single definitions.  Move definitions
            to first uses.
    
            * gcc.target/i386/pr93088.c: New test.

commit 7bf1518f84d5e676dd5f4335783eaf7b742961a5
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Wed Jan 22 17:48:05 2020 +0100

    re PR ipa/93087 (Bogus `-Wsuggest-attribute=cold` on function already marked as `__attribute__((cold))`)
    
            PR ipa/93087
            * predict.c (compute_function_frequency): Don't call
            warn_function_cold on functions that already have cold attribute.
    
            * c-c++-common/cold-1.c: New test.

commit 26e1a1c66f2c651a3b1b5e5b5a00e4275df2ee51
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Wed Jan 22 17:42:45 2020 +0100

    re PR libgomp/93065 (libgomp: destructor missing to delete goacc_cleanup_key)
    
            PR libgomp/93065
            * oacc-init.c (goacc_runtime_deinitialize): New function.

commit dbc84c8b7f793616bb1f87c60c99f82a55aa423c
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Wed Jan 22 17:42:02 2020 +0100

    re PR c++/92438 (Function declaration parsed incorrectly with `-std=c++1z`)
    
            PR c++/92438
            * parser.c (cp_parser_constructor_declarator_p): If open paren
            is followed by RID_ATTRIBUTE, skip over the attribute tokens and
            try to parse type specifier.
    
            * g++.dg/ext/attrib61.C: New test.

commit beee53d59e32e7859b32b19bc7e222e3d04cc5f0
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Wed Jan 22 17:39:55 2020 +0100

    re PR c++/92992 (Side-effects dropped when decltype(nullptr) typed expression is passed to ellipsis)
    
            PR c++/92992
            * call.c (convert_arg_to_ellipsis): For decltype(nullptr) arguments
            that have side-effects use cp_build_compound_expr.
    
            * g++.dg/cpp0x/nullptr45.C: New test.

commit a11e92c4e7fd660b0f5ea2095439dc33738c69a5
Author: Joseph Myers <joseph@codesourcery.com>
Date:   Wed Jan 22 17:26:10 2020 +0000

    Fix ICE with cast of division by zero (PR c/93348).
    
    Bug 93348 reports an ICE on certain cases of casts of expressions that
    may appear only in unevaluated parts of integer constant expressions,
    arising from the generation of nested C_MAYBE_CONST_EXPRs.  This patch
    fixes it by adding a call to remove_c_maybe_const_expr in the
    integer-operands case, as is done in other similar cases.
    
    Bootstrapped with no regressions for x86_64-pc-linux-gnu.
    
            PR c/93348
    gcc/c:
            * c-typeck.c (build_c_cast): Call remove_c_maybe_const_expr on
            argument with integer operands.
    
    gcc/testsuite:
            * gcc.c-torture/compile/pr93348-1.c: New test.
    
    (cherry picked from commit ac68e287fc2e939ae6b45ba7ff04e493982b7f62)

commit 58735237fcd03db05852dfb64b345e7141441e4a
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Jan 22 00:18:31 2020 +0000

    Daily bump.

commit ae403e0d4e06656159387e6cacbe545f1c368eda
Author: Jerry DeLisle <jvdelisle@gcc.gnu.org>
Date:   Tue Jan 21 15:35:42 2020 -0800

    Bug 93234 - INQUIRE on pre-assigned files of ROUND and SIGN properties fails
    
    2020-01-21  Jerry DeLisle  <jvdelisle@gcc.gnu.org>
    
            Backport from mainline
            PR libfortran/93234
            * io/unit.c (set_internal_unit): Set round and sign flags
            correctly.
    
            * gfortran.dg/inquire_pre.f90: New test.

commit 3384aa7af4c4ce193f59d086f507812b88caf113
Author: Jason Merrill <jason@redhat.com>
Date:   Mon Jan 20 14:09:03 2020 -0500

    PR c++/91476 - anon-namespace reference temp clash between TUs.
    
            * call.c (make_temporary_var_for_ref_to_temp): Clear TREE_PUBLIC
            if DECL is in the anonymous namespace.

commit 00cae906a9cb57fb8c6b4861ef90374009823454
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Jan 21 00:18:28 2020 +0000

    Daily bump.

commit 9e9f9bf428f5f9a66caf7dd34e7c736e1eb2af8f
Author: Joseph Myers <joseph@codesourcery.com>
Date:   Mon Jan 20 18:57:25 2020 +0000

    Update GCC zh_TW.po.
    
            * zh_TW.po: Update.

commit 42066149461d7e6951d61c341954b0ed77c08d34
Author: Mark Eggleston <markeggleston@gcc.gnu.org>
Date:   Mon Jan 20 13:29:33 2020 +0000

    [PATCH] PR Fortran/93263 Correct test case
    
    Should've have checked for the existance of a non static integer
    using scan-tree-dump instead of scan-tree-dump-not. A cut and paste
    error.

commit 20e9d78543493f2f6aeef19af4cea54696247fc8
Author: Richard Biener <rguenther@suse.de>
Date:   Tue Jan 14 08:43:32 2020 +0100

    PR middle-end/93246 - missing alias subsets
    
    Starting with the introduction of TYPE_TYPELESS_STORAGE the situation
    of having a alias-set zero aggregate field became more common which
    prevents recording alias-sets of fields of said aggregate as subset
    of the outer aggregate.  component_uses_parent_alias_set_from in the
    past fended off some of the issues with that but the alias oracles
    use of the alias set of the base of an access path never appropriately
    handled it.
    
    The following makes it so that alias-sets of fields of alias-set zero
    aggregate fields are still recorded as subset of the container.
    
    2020-01-14  Richard Biener  <rguenther@suse.de>
    
            PR middle-end/93246
            * alias.c (record_component_aliases): Take superset to record
            into, recurse for alias-set zero fields.
            (record_component_aliases): New oveerload wrapping around the above.
    
            * g++.dg/torture/pr93246.C: New testcase.

commit ce91f0f189e0268f369b9b439ea61def03787334
Author: Martin Liska <mliska@suse.cz>
Date:   Mon Jan 20 12:11:20 2020 +0100

    Backport f48c6014133c8989702458f9082e34ba6dd326d4
    
            Backport from mainline
            2020-01-16  Martin Liska  <mliska@suse.cz>
    
            * lto-partition.c (lto_balanced_map): Remember
            best_noreorder_pos and then restore to it
            when we revert.

commit fd5b5c275dcfa6d1e9b2bdeb1eca55ef29a2b798
Author: Eric S. Raymond <esr@thyrsus.com>
Date:   Sun Jan 19 18:10:52 2020 -0800

    Clean up references to Subversion in documentation sources.
    
    Clean up references to SVN in in the GCC docs, redirecting to Git
    documentation as appropriate.
    
    Where references to "the source code repository" rather than a
    specific VCS make sense, I have used them. You might, after
    all, change VCSes again someday.
    
    I have not modified either generated HTML files nor maintainer scripts.
    These changes should be complete with repect to the documentation tree.
    
    2020-01-19  Eric S. Raymond <esr@thyrsus.com>
                Sandra Loosemore  <sandra@codesourcery.com>
    
            Partial backport from mainline:
    
            2020-01-19  Eric S. Raymond <esr@thyrsus.com>
    
            gcc/
            * doc/contribute.texi: Update for SVN -> Git transition.
            * doc/install.texi: Likewise.
    
            libstdc++-v3
            * doc/xml/faq.xml: Update for SVN -> Git transition.
            * doc/xml/manual/appendix_contributing.xml: Likewise.

commit cee5d51cef7ea4452d652e07b30551cfd01aa434
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Jan 20 00:18:27 2020 +0000

    Daily bump.

commit 99b63670926cec661a7ea6c0957ee99448138208
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Jan 19 00:18:27 2020 +0000

    Daily bump.

commit 41fd95e6dbd1980c1dd065da356f6557c16946c5
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Jan 18 00:18:36 2020 +0000

    Daily bump.

commit 3815f211649cd5c8a277348aa71c9c18bc5ed070
Author: Jason Merrill <jason@redhat.com>
Date:   Fri Jan 17 08:37:49 2020 -0500

    PR c++/92531 - ICE with noexcept(lambda).
    
    This was failing because uses_template_parms didn't recognize LAMBDA_EXPR as
    a kind of expression.  Instead of trying to enumerate all the different
    varieties of expression and then aborting if what's left isn't
    error_mark_node, let's handle error_mark_node and then assume anything else
    is an expression.
    
            * pt.c (uses_template_parms): Don't try to enumerate all the
            expression cases.

commit 5c7938eb3f1a116b1cf9a28090f2cc5e08814ce4
Author: Jason Merrill <jason@redhat.com>
Date:   Thu Jan 16 16:55:39 2020 -0500

    PR c++/93286 - ICE with __is_constructible and variadic template.
    
    Here we had been recursing in tsubst_copy_and_build if type2 was a TREE_LIST
    because that function knew how to deal with pack expansions, and tsubst
    didn't.  But tsubst_copy_and_build expects to be dealing with expressions,
    so we crash when trying to convert_from_reference a type.
    
            * pt.c (tsubst) [TREE_LIST]: Handle pack expansion.
            (tsubst_copy_and_build) [TRAIT_EXPR]: Always use tsubst for type2.

commit f158d9197de75187fa0db26b74bc5d16b5aae242
Author: Mark Eggleston <markeggleston@gcc.gnu.org>
Date:   Fri Jan 17 09:44:23 2020 +0000

    Fortran: PR93263 -fno-automatic and RECURSIVE
    
    The use of -fno-automatic should not affect the save attribute of a
    recursive procedure. The first test case checks unsaved variables
    and the second checks saved variables.

commit 26b2838fc9b3f78267eb2805e4f93f31d4649c63
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Jan 17 00:18:53 2020 +0000

    Daily bump.

commit 0bb3f83fdc4b03850a8fcb28f6e03288cbc1ece0
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Jan 16 00:18:44 2020 +0000

    Daily bump.

commit 7cc6b679a0d0e50c0e1671fefa815dc753554184
Author: Joseph Myers <joseph@codesourcery.com>
Date:   Wed Jan 15 20:52:45 2020 +0000

    Fix setting of DECL_CONTEXT in pushdecl (PR c/93072).
    
    Bug 93072 is a case where the C front end (a) wrongly interprets an
    inline declaration at block scope as indicating that DECL_CONTEXT
    should be set for an inline function and (b) this results in an ICE.
    This is a regression resulting from a previous fix of mine for other
    bugs involving such declarations being wrongly interpreted elsewhere
    as nested function declarations.  The fix is similar to the previous
    fix: use TREE_PUBLIC instead of DECL_EXTERNAL in another place as the
    relevant test to determine whether to set DECL_CONTEXT.  (When a
    variable reaches the code in question in pushdecl, the two are
    equivalent.)
    
    Bootstrapped with no regressions for x86_64-pc-linux-gnu.
    
            PR c/93072
    gcc/c:
            * c-decl.c (pushdecl): Use TREE_PUBLIC, not DECL_EXTERNAL, to
            determine whether to set DECL_CONTEXT.
    
    gcc/testsuite:
            * gcc.dg/inline-42.c, gcc.dg/inline-43.c: New tests.
    
    (cherry picked from commit e2346a33b05871fc065815d4cfd531dfa0195507)

commit 49e76760a298b735a07e4165d9b8c73946e32287
Author: Uros Bizjak <ubizjak@gmail.com>
Date:   Wed Jan 15 20:22:39 2020 +0100

    PR target/93254 - -msse generates sse2 instructions
    
            PR target/93254
            * config/i386/i386.md (*movsf_internal): Require SSE2 ISA for
            alternatives 9 and 10.  Do not require SSE2 ISA for alternatives
            14 and 15.

commit 14f4825e49cf923a1f8b12ca82c282675434ca4f
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Jan 15 00:18:42 2020 +0000

    Daily bump.

commit b849001991c41b68407e7b0bcabf88e4ef414fff
Author: Martin Jambor <mjambor@suse.cz>
Date:   Tue Jan 14 19:05:56 2020 +0100

    IPA: Avoid segfault in devirtualization_time_bonus (PR 93223)
    
    2020-01-14  Martin Jambor  <mjambor@suse.cz>
    
            PR ipa/93223
            * ipa-cp.c (devirtualization_time_bonus): Check whether isummary is
            NULL.
    
            testsuite/
            * g++.dg/ipa/pr93223.C: New test.

commit 3401a3b7ba834a7b3f34e062683cebd44c0434de
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Jan 14 00:18:50 2020 +0000

    Daily bump.

commit 2638a44bbe43089f9fc00251592895584314a4b2
Author: Joseph Myers <joseph@codesourcery.com>
Date:   Tue Jan 14 00:13:21 2020 +0000

    Fix handling of overflow in C casts in integer constant expressions (PR c/93241).
    
    Bug 93241 reports a case where certain C expressions involving casts,
    that would not be valid in an evaluated part of an integer constant
    expression (because of e.g. involving integer overflow), are wrongly
    rejected in an unevaluated part of an integer constant expression even
    though all the operands and operations are ones that are valid in that
    context.  This is a rejects-valid regression in GCC 4.5 and later
    relative to 4.4 (for some testcases; the one in the bug uses
    _Static_assert which isn't supported in those older releases).
    
    The rule in the C front end is that an expression with those
    properties (valid in an unevaluated part of an integer constant
    expression but not an evaluated part) must be represented either as an
    INTEGER_CST with TREE_OVERFLOW set or as a C_MAYBE_CONST_EXPR with
    C_MAYBE_CONST_EXPR_INT_OPERANDS set.  This patch fixes build_c_cast to
    check for that case and call note_integer_operands as needed.
    
    Bootstrapped with no regressions for x86_64-pc-linux-gnu.
    
            PR c/93241
    gcc/c:
            * c-typeck.c (build_c_cast): Check for expressions with integer
            operands that can occur in an unevaluated part of an integer
            constant expression and call note_integer_operands as needed.
    
    gcc/testsuite:
            * gcc.dg/c11-static-assert-10.c, gcc.dg/c99-const-expr-15.c: New
            tests.
    
    (cherry picked from commit 3d77686d2eddf76d3498169d0ca5653db45a8662)

commit 6cb662745d38e680a1a46fa04b108734cbc3df58
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Thu Jan 9 13:38:43 2020 +0000

    Build filesystem library with large file support
    
    Enable AC_SYS_LARGEFILE to set the macros needed for large file APIs to
    be used by default. We do not want to define those macros in the
    public headers that users include. The values of the macros are copied
    to a separate file that is only included by the filesystem sources
    during the build, and then the macros in <bits/c++config.h> are renamed
    so that they don't have any effect in user code including our headers.
    
    Also use larger type for result of filesystem::file_size to avoid
    truncation of large values on 32-bit systems (PR 91947).
    
    Backport from mainlne
    2019-10-04  Jonathan Wakely  <jwakely@redhat.com>
    
            PR libstdc++/81091
            PR libstdc++/91947
            * configure.ac: Use AC_SYS_LARGEFILE to enable 64-bit file APIs.
            * config.h.in: Regenerate:
            * configure: Regenerate:
            * include/Makefile.am (${host_builddir}/largefile-config.h): New
            target to generate config header for filesystem library.
            (${host_builddir}/c++config.h): Rename macros for large file support.
            * include/Makefile.in: Regenerate.
            * src/c++17/fs_dir.cc: Include new config header.
            * src/c++17/fs_ops.cc: Likewise.
            (filesystem::file_size): Use uintmax_t for size.
            * src/filesystem/dir.cc: Include new config header.
            * src/filesystem/ops.cc: Likewise.
            (experimental::filesystem::file_size): Use uintmax_t for size.

commit 5b6c608019153e3dbb03e3f5f7b7a1768727f987
Author: Joseph Myers <joseph@codesourcery.com>
Date:   Mon Jan 13 18:45:04 2020 +0000

    Fix libdecnumber handling of non-canonical BID significands (PR middle-end/91226).
    
    As reported in bug 91226, the libdecnumber code used on the host to
    interpret DFP values in the BID encoding fails, for _Decimal64 and
    _Decimal128, to check for the case where a significand is too large
    and so specified in IEEE 754 to be a non-canonical encoding of the
    zero significand.  This patch adds the required handling of that case,
    together with tests both using -O2 (testing this host code) and -O0
    (testing libgcc code, which already worked before the patch); the
    tests also cover _Decimal32, which already had the required check.
    
    In the _Decimal128 case, where the code previously completely ignored
    the case where the first four bits of the combination field are 1100,
    1101 or 1110, the logic for determining the correct quantum exponent
    in that case is also newly added by this patch, so tests are added for
    that as well (again, libgcc already handled it correctly when the
    conversion was done at runtime rather than at compile time).
    
    Bootstrapped with no regressions for x86_64-pc-linux-gnu.
    
            PR middle-end/91226
    libdecnumber:
            * bid/bid2dpd_dpd2bid.c (_bid_to_dpd64): Handle non-canonical
            significands.
            (_bid_to_dpd128): Likewise.  Check for case where combination
            field starts 1100, 1101 or 1110.
    
    gcc/testsuite:
            * gcc.dg/dfp/bid-non-canonical-d128-1.c,
            gcc.dg/dfp/bid-non-canonical-d128-2.c,
            gcc.dg/dfp/bid-non-canonical-d128-3.c,
            gcc.dg/dfp/bid-non-canonical-d128-4.c,
            gcc.dg/dfp/bid-non-canonical-d32-1.c,
            gcc.dg/dfp/bid-non-canonical-d32-2.c,
            gcc.dg/dfp/bid-non-canonical-d64-1.c,
            gcc.dg/dfp/bid-non-canonical-d64-2.c: New tests.
    
    (cherry picked from commit 0fad54f0a88160e81c3150b63c91fd9809665474)

commit c6f60a62b0b89a0f8c252970f3a4cf0bc2d220ce
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Mon Jan 13 16:25:01 2020 +0000

    libstdc++: Fix documentation claiming to refer to mainline
    
            * doc/xml/manual/status_cxx1998.xml: Replace incorrect statement
            about documenting mainline.
            * doc/xml/manual/status_cxx2011.xml: Likewise.
            * doc/xml/manual/status_cxx2014.xml: Likewise.
            * doc/xml/manual/status_cxx2017.xml: Likewise.
            * doc/xml/manual/status_cxx2020.xml: Likewise.
            * doc/xml/manual/status_cxxtr1.xml: Likewise.
            * doc/xml/manual/status_cxxtr24733.xml: Likewise.
            * doc/html/*: Regenerate.

commit 6abd781f44a53c8103dd13225114bd10b255083d
Author: Joseph Myers <joseph@codesourcery.com>
Date:   Mon Jan 13 15:58:45 2020 +0000

    Update gcc_release to mainline version.
    
    Will be needed for building subsequent releases on this branch from
    git.
    
            Backport:
    
            2020-01-13  Joseph Myers  <joseph@codesourcery.com>
    
            * gcc_release: Use git instead of SVN.
    
            2019-11-20  Janne Blomqvist  <jb@gcc.gnu.org>
    
            * gcc_release: Use https for gcc.gnu.org.

commit 45917f7d4dcb9eb3c0a60d56aaa585993f500240
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Jan 13 12:38:15 2020 +0000

    Daily bump.

commit 4b9ea6845f2629c6a8a9c597789ae6c14bc7ed7d
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Jan 11 00:16:10 2020 +0000

    Daily bump.
    
    From-SVN: r280154

commit b04e6eafd88706cbff32dfe192cd9e04df63c282
Author: Martin Jambor <mjambor@suse.cz>
Date:   Fri Jan 10 20:30:56 2020 +0100

    IPA-CP: Remove bogus static keyword (PR 92971)
    
    2020-01-10  Martin Jambor  <mjambor@suse.cz>
    
            Backport from mainline
            2019-12-17  Martin Jambor  <mjambor@suse.cz>
    
            PR ipa/92971
            * Ipa-cp.c (cgraph_edge_brings_all_agg_vals_for_node): Fix
              definition of values, release memory on exit.
    
            testsuite/
            * gcc.dg/ipa/ipcp-agg-12.c: New test.
    
    From-SVN: r280131

commit 2108fc2b90ae67e3c02268a84e8c6ce06dba7439
Author: Przemyslaw Wirkus <przemyslaw.wirkus@arm.com>
Date:   Fri Jan 10 16:50:15 2020 +0000

    backport: arm: Fix rmprofile multilibs when architecture includes +mp or +sec (PR target/93188)
    
    When only the rmprofile multilibs are built, compiling for armv7-a
    should select the generic v7 multilibs.  This used to work before +sec
    and +mp were added to the architecture options but it was broken by
    that update.  This patch fixes those variants and adds some tests to
    ensure that they remain fixed
    
    gcc/ChangeLog:
    2020-01-10  Przemyslaw Wirkus  <przemyslaw.wirkus@arm.com>
    
            Backport from trunk
            PR target/93188
            * config/arm/t-multilib (MULTILIB_MATCHES): Add rules to match
            armv7-a{+mp,+sec,+mp+sec} to appropriate armv7 multilib variants
            when only building rm-profile multilibs.
    
    gcc/testsuite/ChangeLog:
    2020-01-10  Przemyslaw Wirkus  <przemyslaw.wirkus@arm.com>
    
            Backport from trunk
            * gcc.target/arm/multilib.exp: Add new tests for rm-profile only.
    
    From-SVN: r280123

commit 0e7ba3faa51ca91f3332f52d32bf785f3c8e4e12
Author: Przemyslaw Wirkus <przemyslaw.wirkus@arm.com>
Date:   Fri Jan 10 16:46:42 2020 +0000

    backport: arm: fix v[78]-r multilibs when configured with --with-multlib-list=aprofile
    
    When gcc for Arm is configured with --with-multilib-list=aprofile a
    misplaced endif directive in the makefile was causing the arm->thumb
    mapping for multilibs to be omitted from the reuse rules.  This
    resulted in the default multilib being picked rather than the thumb2
    opimized version.
    
    2020-01-10  Przemyslaw Wirkus  <przemyslaw.wirkus@arm.com>
    
            Backport from trunk
            * config/arm/t-multilib: Use arm->thumb multilib reuse rules
            on a-profile.
    
    From-SVN: r280122

commit 9a8610a5f09ec44eb06cf7c4be67fd67c3b65f85
Author: Tobias Burnus <burnus@gcc.gnu.org>
Date:   Fri Jan 10 15:37:29 2020 +0100

    Fortran] PR84135 fix merging dimension into codimension array spec
    
            Backported from mainline
            2020-01-09  Tobias Burnus  <tobias@codesourcery.com>
    
            PR fortran/84135
            * array.c (gfc_set_array_spec): Fix shifting of codimensions
            when adding a dimension.
            * decl.c (merge_array_spec): Ditto. Fix using correct codimensions.
    
    
            Backported from mainline
            2020-01-09  Tobias Burnus  <tobias@codesourcery.com>
    
            PR fortran/84135
            * gfortran.dg/coarray/codimension_3.f90: New.
    
    From-SVN: r280110

commit be469640a18b322b411a9aa2de99308a7c95f52c
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Jan 10 00:16:10 2020 +0000

    Daily bump.
    
    From-SVN: r280095

commit 1ec66f8b7a6bb0a9785d1abc82ca981d8456e9a4
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Thu Jan 9 13:18:37 2020 +0000

    libstdc++: Define memory resource key functions non-inline (PR93208)
    
    This prevents the vtables and RTTI from being emitted in every object
    file that uses memory_resource and monotonic_buffer_resource.
    
    Objects compiled by GCC 9.1 or 9.2 will contain inline definitions of
    the destructors, vtable and RTTI, but this is harmless. The inline
    definitions have identical effects to the ones that are now defined in
    libstdc++.so so it doesn't matter if the inline ones are used instead of
    calling the symbols exported from the runtime library.
    
            PR libstdc++/93208
            * config/abi/pre/gnu.ver: Add new exports.
            * include/std/memory_resource (memory_resource::~memory_resource()):
            Do not define inline.
            (monotonic_buffer_resource::~monotonic_buffer_resource()): Likewise.
            * src/c++17/memory_resource.cc (memory_resource::~memory_resource()):
            Define.
            (monotonic_buffer_resource::~monotonic_buffer_resource()): Define.
            * testsuite/20_util/monotonic_buffer_resource/93208.cc: New test.
    
    From-SVN: r280045

commit 7fa5c31cac41b209c8ca50106b2f8e6b87a69adc
Author: Martin Liska <mliska@suse.cz>
Date:   Thu Jan 9 11:33:28 2020 +0100

    Backport r279306
    
    2020-01-09  Martin Liska  <mliska@suse.cz>
    
            Backport from mainline
            2019-12-12  Jan Hubicka  <hubicka@ucw.cz>
    
            * ipa-prop.c (read_ipcp_transformation_info): Fix undefined ordering
            of execution of function call parameters.
    
    From-SVN: r280037

commit 65d804ebcbf23b82ee462c27fd39573d04ccc66f
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Jan 9 00:16:12 2020 +0000

    Daily bump.
    
    From-SVN: r280023

commit 97173f7e2d95e65538fe946e3c64b0ccf4529239
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Wed Jan 8 21:48:23 2020 +0000

    libstdc++: Fix error handling in filesystem::remove_all (PR93201)
    
    When recursing into a directory, any errors that occur while removing a
    directory entry are ignored, because the subsequent increment of the
    directory iterator clears the error_code object.
    
    This fixes that bug by checking the result of each recursive operation
    before incrementing. This is a change in observable behaviour, because
    previously other directory entries would still be removed even if one
    (or more) couldn't be removed due to errors. Now the operation stops on
    the first error, which is what the code intended to do all along. The
    standard doesn't specify what happens in this case (because the order
    that the entries are processed is unspecified anyway).
    
            PR libstdc++/93201
            * src/c++17/fs_ops.cc (remove_all(const path&, error_code&)): Check
            result of recursive call before incrementing iterator.
            * src/filesystem/ops.cc (remove_all(const path&, error_code&)):
            Likewise.
            * testsuite/27_io/filesystem/operations/remove_all.cc: Check errors
            are reported correctly.
            * testsuite/experimental/filesystem/operations/remove_all.cc: Likewise.
    
    From-SVN: r280020

commit e3da34115b54ee6d47c7458a82dd5367b928ee29
Author: Georg-Johann Lay <avr@gjlay.de>
Date:   Wed Jan 8 09:46:07 2020 +0000

    backport: Add -nodevicespecs option for avr.
    
            Backport from 2020-01-08 trunk r279995.
    
            Add -nodevicespecs option for avr.
    
            PR target/93182
            * config/avr/avr.opt (-nodevicespecs): New driver option.
            * config/avr/driver-avr.c (avr_devicespecs_file): Only issue
            "-specs=device-specs/..." if that option is not set.
            * doc/invoke.texi (AVR Options) <-nodevicespecs>: Document.
    
    From-SVN: r279996

commit ae0b4a0a1c0ddda91b7d4ce5faba854a5332b2ed
Author: Ian Lance Taylor <ian@gcc.gnu.org>
Date:   Wed Jan 8 00:38:34 2020 +0000

    compiler: fix loopdepth tracking in array slicing expression in escape analysis
    
        In the gc compiler, for slicing an array, its AST has an implicit
        address operation node. There isn't such node in the gofrontend
        AST. During the escape analysis, we create a fake node to mimic
        the gc compiler's behavior. For the fake node, the loopdepth was
        not tracked correctly, causing miscompilation. Since this is an
        address operation, do the same thing as we do for the address
        operator.
    
        Fixes golang/go#36404.
    
        Reviewed-on: https://go-review.googlesource.com/c/gofrontend/+/213643
    
    From-SVN: r279985

commit ff95e3d4e8b5f122ad6306e49d511534077c8354
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Jan 8 00:16:15 2020 +0000

    Daily bump.
    
    From-SVN: r279982

commit 2db255c38d93b2ff60516d5dd3cf5e7001cd7ccd
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Tue Jan 7 21:37:36 2020 +0000

    [testsuite, Darwin] Fix failing darwin-version-1.c.
    
    Recent platform linkers will no longer accept linking for a target
    OS version less than 10.4. Recent SDKs no longer have the libgcc_s
    shims used for 10.4 and 10.5. So we need to adjust tests that expect
    these.
    
    2020-01-07  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2020-01-05  Iain Sandoe  <iain@sandoe.co.uk>
    
            * gcc.dg/darwin-version-1.c: Adjust test to use different
            options for Darwin4-9 and Darwin10+.
    
    From-SVN: r279975

commit f082e6f5e14ccdb805b91e2bb9f97b009dd0899f
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Jan 7 00:16:09 2020 +0000

    Daily bump.
    
    From-SVN: r279931

commit 163dbe3bd6b062ab4c9ade8a6bb3f2ecf22978f0
Author: John David Anglin <danglin@gcc.gnu.org>
Date:   Mon Jan 6 23:52:55 2020 +0000

    pa.md: Revert change to use ordered_comparison_operator instead of...
    
            * config/pa/pa.md: Revert change to use ordered_comparison_operator
            instead of cmpib_comparison_operator in cmpib patterns.
            * config/pa/predicates.md (cmpib_comparison_operator): Revert removal
            of cmpib_comparison_operator.  Revise comment.
    
    From-SVN: r279928

commit 0509102277e2c923a09bf68226c6222193fda710
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Jan 6 00:16:11 2020 +0000

    Daily bump.
    
    From-SVN: r279891

commit 2f2fd9105e744281314cc960debb6bc1fc18910f
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Jan 5 00:16:10 2020 +0000

    Daily bump.
    
    From-SVN: r279882

commit 21d48304f530e20f47cc26d84e47d5147a671816
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Jan 4 00:16:14 2020 +0000

    Daily bump.
    
    From-SVN: r279875

commit ca2ebbca46530396495e7696c99e020afdc9a5db
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Jan 3 00:16:28 2020 +0000

    Daily bump.
    
    From-SVN: r279851

commit 373a47c90394c72d65bcd273fe502f1d0c73b7b4
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Jan 2 18:36:50 2020 +0100

    re PR c/90677 (gcc-9.1.0 fails to build __gcc_diag__ souce: error: 'cgraph_node' is not defined as a type)
    
            PR c/90677
            * cp-objcp-common.c (identifier_global_tag): Return NULL_TREE if name
            has not been found, rather than error_mark_node.
    
            * c-c++-common/pr90677-2.c: New test.
    
    From-SVN: r279841

commit 9717b8313db53d9a7a8f5730522eb75226272ab6
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Jan 2 00:16:33 2020 +0000

    Daily bump.
    
    From-SVN: r279826

commit 76787ebbff2f85dd73bc1574b8c0b99511c416d0
Author: John David Anglin <danglin@gcc.gnu.org>
Date:   Wed Jan 1 23:00:58 2020 +0000

    re PR target/67834 (Local references inside comdat groups)
    
            PR target/67834
            * config/pa/pa.c (pa_elf_select_rtx_section): New.  Put references to
            COMDAT group function labels in .data.rel.ro.local section.
            * config/pa/pa32-linux.h (TARGET_ASM_SELECT_RTX_SECTION): Define.
    
    From-SVN: r279824

commit 8caf619332241e6bf7e26a411e47a93c4e89fb37
Author: John David Anglin <danglin@gcc.gnu.org>
Date:   Wed Jan 1 20:57:04 2020 +0000

    re PR target/93111 (FAIL: gfortran.fortran-torture/compile/pr32663.f,  -O3 -g   (internal compiler error))
    
            PR target/93111
            * config/pa/pa.md (scc): Use ordered_comparison_operator instead of
            comparison_operator in B and S integer comparisons.  Likewise, use
            ordered_comparison_operator instead of cmpib_comparison_operator in
            cmpib patterns.
            * config/pa/predicates.md (cmpib_comparison_operator): Remove.
    
    From-SVN: r279819

commit 220a86ec8659a8359456dede768782e15c3ffc81
Author: John David Anglin <danglin@gcc.gnu.org>
Date:   Wed Jan 1 17:01:46 2020 +0000

    backport: re PR libgomp/93066 (libgomp/target.c:525:46: error: expected expression before ')' token)
    
            Backport from mainline
            2019-12-30  John David Anglin  <danglin@gcc.gnu.org>
    
            PR libgomp/93066
            * inclhack.def (hpux_c99_inttypes3): Fix defines for INTPTR_MAX
            and UINTPTR_MAX, and missing define for SIZE_MAX.
            * fixincl.x: Regenerate.
            * tests/base/inttypes.h: Update for above fix.
    
    From-SVN: r279814

commit f7c28c368e649efa3483cd4873ce5286d4a69c46
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Jan 1 00:16:13 2020 +0000

    Daily bump.
    
    From-SVN: r279807

commit a220243a4079ebe04532572893a1a874764973b3
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Dec 31 00:16:32 2019 +0000

    Daily bump.
    
    From-SVN: r279800

commit ebdbb26ae54fb25257b6dd4c0c6a9a3e72c0b525
Author: Joseph Myers <joseph@codesourcery.com>
Date:   Mon Dec 30 22:08:59 2019 +0000

    * fi.po: Update.
    
    From-SVN: r279789

commit 819855f2df3e0d7b2d59086bb336d090e954126c
Author: Thomas Koenig <tkoenig@gcc.gnu.org>
Date:   Mon Dec 30 15:27:08 2019 +0000

    backport: re PR fortran/92961 (ICE in gfc_zero_size_array, at fortran/arith.c:1680)
    
    2019-12-30  Thomas Koenig  <tkoenig@gcc.gnu.org>
    
            Backport from trunk
        PR fortran/92961
        * fortran/ChangeLog: Added entry.
        * testsuite/ChangeLog: Added entry.
    
    From-SVN: r279769

commit 2f25907603e2a26ba3e5d76880d31ce25d1f0ae7
Author: Thomas Koenig <tkoenig@gcc.gnu.org>
Date:   Mon Dec 30 13:10:37 2019 +0000

    Catch division by zero errors in array sizes.
    
    2019-12-30  Thomas Koenig  <tkoenig@gcc.gnu.org>
    
            Backport from trunk
            PR fortran/92961
            * gfortran.h (gfc_seen_div0): Add declaration.
            * arith.h (gfc_seen_div0): Add definition.
            (eval_intrinsic): For integer division by zero, set gfc_seen_div0.
            * decl.c (variable_decl):  If resolution resp. simplification
            fails for array spec and a division of zero error has been
            seen, return MATCH_ERROR.
    
    2019-12-30  Thomas Koenig  <tkoenig@gcc.gnu.org>
    
            Backport from trunk
            PR fortran/92961
            * gfortran.dg/arith_divide_2.f90: New test.
    
    From-SVN: r279767

commit 2885d75b3283e6a8b96421f31b635b55e8cf4fbb
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Dec 30 00:16:09 2019 +0000

    Daily bump.
    
    From-SVN: r279760

commit 2d6a0f476ee0f5c4695c4868a2180e22b6ff4bbd
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Dec 29 00:16:33 2019 +0000

    Daily bump.
    
    From-SVN: r279750

commit db409b726458f895cf43d1ccb67b3b69faa9c5d0
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Dec 28 00:16:27 2019 +0000

    Daily bump.
    
    From-SVN: r279745

commit e774308387885c02bf74f22fecafd4835c8dbeff
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Dec 27 00:16:29 2019 +0000

    Daily bump.
    
    From-SVN: r279738

commit 0de6397130f5955f01d0c7e9a3dfafec377452d9
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Dec 26 00:16:32 2019 +0000

    Daily bump.
    
    From-SVN: r279734

commit 286b9428fed7536dba3406eeb06d5340a780bfe6
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Wed Dec 25 20:31:04 2019 +0000

    [Darwin, PPC] Use Darwin9 bundle header for Rosetta builds.
    
    On Darwin10 it's possible to make a 32b PPC build using the
    'Rosetta' emulator. However, these builds need to make use of
    Darwin9 crts (for exes, dylibs and bundles). This adds the
    change to cater for bundles.
    
    gcc/ChangeLog:
    
            Backport from mainline.
            2019-12-14 Iain Sandoe <iain@sandoe.co.uk>
    
            * config/darwin.h (DARWIN_EXTRA_SPECS): Add new
            bundle spec. (DARWIN_BUNDLE1_SPEC): New.
            (STARTFILE_SPEC): Use darwin bundle spec.
            * config/rs6000/darwin.h (DARWIN_BUNDLE1_SPEC): New.
            (DARWIN_DYLIB1_SPEC): Delete duplicate.
    
    From-SVN: r279732

commit 47e35d17d3662c6ac28b747861f59873e61df19e
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Dec 25 00:16:11 2019 +0000

    Daily bump.
    
    From-SVN: r279729

commit 39c83f55a63c16d0319ec606e1b7b8b8bd33ab24
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Dec 24 00:16:12 2019 +0000

    Daily bump.
    
    From-SVN: r279722

commit 3aa0d80870b09ea9959695ad5349fb715f7c88b3
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Dec 23 00:16:10 2019 +0000

    Daily bump.
    
    From-SVN: r279714

commit 2cbeb96ebcae6c3a590f98a05db426e7bd5c0cc4
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Dec 22 00:16:11 2019 +0000

    Daily bump.
    
    From-SVN: r279704

commit 9c7b124504f6045f19fce1a55bd4cd1e94022fdb
Author: Paul Thomas <pault@gcc.gnu.org>
Date:   Sat Dec 21 18:21:21 2019 +0000

    re PR fortran/92753 (ICE in gfc_trans_call, at fortran/trans-stmt.c:392)
    
    2019-12-21  Paul Thomas  <pault@gcc.gnu.org>
    
            PR fortran/92753
            * expr.c (find_inquiry_ref): Catch INQUIRY_LEN case, where the
            temporary expression has been converted to a constant and make
            the new expression accordingly. Correct the error in INQUIRY_RE
            and INQUIRY_IM cases. The original rather than the resolved
            expression was being used as the source in mpfr_set.
    
    2019-12-21  Paul Thomas  <pault@gcc.gnu.org>
    
            PR fortran/92753
            * gfortran.dg/inquiry_type_ref_5.f90 : New test.
    
    From-SVN: r279697

commit 39f5d29e78bf5681f68d6b2b562a3de34c6064ce
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Dec 21 00:16:12 2019 +0000

    Daily bump.
    
    From-SVN: r279689

commit a0d677eac5126149974467c868a7b65c9e0070b9
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Fri Dec 20 18:45:56 2019 +0100

    backport: re PR fortran/92977 (ICE in gfc_trans_omp_atomic, at fortran/trans-openmp.c:3526)
    
            Backported from mainline
            2019-12-19  Jakub Jelinek  <jakub@redhat.com>
    
            PR fortran/92977
            * frontend-passes.c (call_external_blas): Use || instead of |.
    
            PR fortran/92977
            * frontend-passes.c (in_omp_atomic): New variable.
            (cfe_expr_0, matmul_to_var_expr, matmul_temp_args,
            inline_matmul_assign, call_external_blas): Don't optimize in
            EXEC_OMP_ATOMIC.
            (optimize_namespace): Clear in_omp_atomic.
            (gfc_code_walker): Set in_omp_atomic for EXEC_OMP_ATOMIC, save/restore
            it around.
    
            * gfortran.dg/gomp/pr92977.f90: New test.
    
    From-SVN: r279676

commit 0d2440755ce5baf2f729e9a814bf1cf916de2c70
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Fri Dec 20 18:44:50 2019 +0100

    backport: re PR ipa/92357 (ICE in IPA pass fnsummary in openmp offload)
    
            Backported from mainline
            2019-12-14  Jakub Jelinek  <jakub@redhat.com>
    
            PR ipa/92357
            * ipa-fnsummary.c (ipa_fn_summary_write): Use
            lto_symtab_encoder_iterator with lsei_start_function_in_partition and
            lsei_next_function_in_partition instead of walking all cgraph nodes
            in encoder.
    
    From-SVN: r279675

commit 6a6bf672cde4340d6acfec5b1c8b797d43219922
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Fri Dec 20 18:44:16 2019 +0100

    backport: re PR tree-optimization/92930 (GCC incorrectly optimizes away __builtin_apply() calls)
    
            Backported from mainline
            2019-12-14  Jakub Jelinek  <jakub@redhat.com>
    
            PR tree-optimization/92930
            * ipa-pure-const.c (special_builtin_state): Don't handle
            BUILT_IN_APPLY.
    
            * gcc.dg/tree-ssa/pr92930.c: New test.
    
    From-SVN: r279674

commit 0cd946615627fb120c6ea601891a04759f9b0d78
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Fri Dec 20 18:43:23 2019 +0100

    backport: re PR target/92904 (varargs for __int128 is placed at an unaligned location and uses movdqa for the load)
    
            Backported from mainline
            2019-12-12  Jakub Jelinek  <jakub@redhat.com>
    
            PR target/92904
            * config/i386/i386.c (ix86_gimplify_va_arg): If need_intregs and
            not need_temp, decrease alignment of the read because the GPR save
            area only guarantees 8-byte alignment.
    
            * gcc.c-torture/execute/pr92904.c: New test.
    
    From-SVN: r279673

commit a4606f7f03a59c56130177c77258b18c78e435b6
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Fri Dec 20 18:42:22 2019 +0100

    backport: re PR fortran/92899 ([OpenMP] ICE in gfc_trans_omp_atomic, at fortran/trans-openmp.c:3769)
    
            Backported from mainline
            2019-12-11  Jakub Jelinek  <jakub@redhat.com>
    
            PR fortran/92899
            * trans-openmp.c (gfc_trans_omp_atomic): For GFC_OMP_ATOMIC_SWAP,
            do look through conversion on expr2 if any.
    
            * testsuite/libgomp.fortran/atomic1.f90: New test.
    
    From-SVN: r279672

commit 86a5b74ed42dd1328f891e53bbe274108cbd1a76
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Fri Dec 20 18:41:17 2019 +0100

    backport: re PR target/92723 (ICE in expand_shift_1, at expmed.c:2635)
    
            Backported from mainline
            2019-12-11  Jakub Jelinek  <jakub@redhat.com>
    
            PR target/92723
            * tree-vect-patterns.c (vect_recog_rotate_pattern): If dt is not
            vect_internal_def, use oprnd1 as is, without trying to cast it.
            Formatting fix.
    
            * gcc.dg/vect/pr92723.c: New test.
    
    From-SVN: r279671

commit e8b31b238934483cc865dcd1c610bd0b29048cd3
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Fri Dec 20 18:37:45 2019 +0100

    backport: PR c++/92831 - CWG 1299, not extending temporary lifetime for ?:
    
            Backported from mainline
            2019-12-06  Jakub Jelinek  <jakub@redhat.com>
    
            PR c++/92831 - CWG 1299, not extending temporary lifetime for ?:
            * cp-tree.h (extend_ref_init_temps): Add a new argument with NULL
            default arg.
            * call.c (set_up_extended_ref_temp): Add COND_GUARD argument, pass it
            down to extend_ref_init_temps.  Before pushing cleanup, if COND_GUARD
            is non-NULL, create a bool temporary if needed, initialize to false
            and guard the cleanup with the temporary being true.
            (extend_ref_init_temps_1): Add COND_GUARD argument, pass it down
            to recursive calls and set_up_extended_ref_temp.  Handle COND_EXPR.
            (extend_ref_init_temps): Add COND_GUARD argument, pass it down to
            recursive calls and to extend_ref_init_temps_1.
    
            * g++.dg/cpp0x/temp-extend2.C: New test.
    
    From-SVN: r279669

commit bbd83540e017094a2d28af7bed278595833017a4
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Fri Dec 20 18:36:48 2019 +0100

    backport: re PR fortran/92775 (Incorrect expression in DW_AT_byte_stride on an array)
    
            Backported from mainline
            2019-12-06  Jakub Jelinek  <jakub@redhat.com>
    
            PR fortran/92775
            * trans.h (struct lang_type, struct lang_decl): Remove span member.
            (GFC_DECL_SPAN, GFC_TYPE_ARRAY_SPAN): Remove macros.
            * trans-array.h (gfc_get_descriptor_offsets_for_info): Add another
            argument.
            * trans-array.c (gfc_get_descriptor_offsets_for_info): Add SPAN_OFF
            argument and initialize *SPAN_OFF to the offset of span field.
            * trans-types.c (gfc_get_array_descr_info): Adjust
            gfc_get_descriptor_offsets_for_info caller.  Compute elem_size
            as base->span instead of TYPE_SIZE_UNIT (etype) constant.
    
    From-SVN: r279668

commit ec2894778c53b4906ded413277c5ef19fe7865ae
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Fri Dec 20 18:36:08 2019 +0100

    backport: re PR fortran/92781 (ICE in convert_nonlocal_reference_op, at tree-nested.c:1065)
    
            Backported from mainline
            2019-12-05  Jakub Jelinek  <jakub@redhat.com>
    
            PR fortran/92781
            * trans-decl.c (gfc_get_symbol_decl): If sym->backend_decl is
            current_function_decl, add length to current rather than parent
            function and expect DECL_CONTEXT (length) to be current_function_decl.
    
            * gfortran.dg/pr92781.f90: New test.
    
    From-SVN: r279667

commit 4833bc152286a2f5d803a05a79b835e6df049f69
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Fri Dec 20 18:35:18 2019 +0100

    re PR fortran/92756 (ICE in lower_omp, at omp-low.c:12988)
    
            PR fortran/92756
            * omp-low.c (check_omp_nesting_restrictions): If lang_GNU_Fortran,
            diagnose teams not closely nested inside of target.
    
            Backported from mainline
            2019-12-04  Jakub Jelinek  <jakub@redhat.com>
    
            PR fortran/92756
            * gfortran.dg/gomp/teams1.f90: New test.
    
    From-SVN: r279666

commit d4a646993d1fdc6b660c9f403b83fa2ae385c613
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Fri Dec 20 18:34:14 2019 +0100

    backport: re PR c++/92732 (Bit-field of scoped enumeration type cannot be initialized)
    
            Backported from mainline
            2019-12-03  Jakub Jelinek  <jakub@redhat.com>
    
            PR c++/92732
            * typeck2.c (digest_nsdmi_init): For bitfields, use
            DECL_BIT_FIELD_TYPE instead of TREE_TYPE.
    
            * g++.dg/cpp2a/bitfield3.C: Don't expect narrowing conversion
            warnings.
            * g++.dg/cpp2a/bitfield4.C: New test.
    
    From-SVN: r279665

commit ae1b211b581dd1f39476e726394d52d9685bc561
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Fri Dec 20 18:33:13 2019 +0100

    backport: re PR c++/92695 (P1064R0 - virtual constexpr fails if object taken from array)
    
            Backported from mainline
            2019-12-03  Jakub Jelinek  <jakub@redhat.com>
    
            PR c++/92695
            * constexpr.c (cxx_bind_parameters_in_call): For virtual calls,
            adjust the first argument to point to the derived object rather
            than its base.
    
            * g++.dg/cpp2a/constexpr-virtual14.C: New test.
    
    From-SVN: r279664

commit d9c7be4ce3b0590ee1c143e29635c084e2704c62
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Fri Dec 20 18:32:23 2019 +0100

    backport: re PR c++/92695 (P1064R0 - virtual constexpr fails if object taken from array)
    
            Backported from mainline
            2019-12-02  Jakub Jelinek  <jakub@redhat.com>
    
            PR c++/92695
            * constexpr.c (cxx_eval_constant_expression) <case OBJ_TYPE_REF>: Use
            STRIP_NOPS before checking for ADDR_EXPR.
    
            * g++.dg/cpp2a/constexpr-virtual15.C: New test.
    
    From-SVN: r279663

commit 87b153d0c67c677fbf997e3fa81b793ff99aadd7
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Fri Dec 20 18:30:38 2019 +0100

    backport: re PR c++/60228 (ICE using lambda in #pragma omp declare reduction)
    
            Backported from mainline
            2019-11-29  Jakub Jelinek  <jakub@redhat.com>
    
            PR c++/60228
            * parser.c (cp_parser_omp_declare_reduction_exprs): If
            processing_template_decl, wrap the combiner or initializer
            into EXPR_STMT.
            * decl.c (start_preparsed_function): Don't start a lambda scope
            for DECL_OMP_DECLARE_REDUCTION_P functions.
            (finish_function): Don't finish a lambda scope for
            DECL_OMP_DECLARE_REDUCTION_P functions, nor cp_fold_function
            them nor cp_genericize them.
            * mangle.c (decl_mangling_context): Look through
            DECL_OMP_DECLARE_REDUCTION_P functions.
            * semantics.c (expand_or_defer_fn_1): For DECL_OMP_DECLARE_REDUCTION_P
            functions, use tentative linkage, don't keep their bodies with
            -fkeep-inline-functions and return false at the end.
    
            * g++.dg/gomp/openmp-simd-2.C: Don't expect bodies for
            DECL_OMP_DECLARE_REDUCTION_P functions.
    
            * testsuite/libgomp.c++/udr-20.C: New test.
            * testsuite/libgomp.c++/udr-21.C: New test.
    
    From-SVN: r279662

commit e3edafbca9f3553ff95f3e083d9e5b67ff141ba3
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Fri Dec 20 18:26:28 2019 +0100

    backport: re PR c++/92695 (P1064R0 - virtual constexpr fails if object taken from array)
    
            Backported from mainline
            2019-11-28  Jakub Jelinek  <jakub@redhat.com>
    
            PR c++/92695
            * decl2.c (mark_used): Don't call note_vague_linkage_fn for pure
            virtual functions, even if they are declared inline.
    
            * g++.dg/warn/inline3.C: New test.
    
    From-SVN: r279661

commit 70d8957fdc81ba73f016bfe6cd0c21ea79c35b7f
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Fri Dec 20 18:25:39 2019 +0100

    backport: re PR fortran/91944 (ICE in gfc_conv_array_initializer, at fortran/trans-array.c:6156)
    
            Backported from mainline
            2019-11-27  Jakub Jelinek  <jakub@redhat.com>
    
            PR fortran/91944
            * simplify.c (gfc_simplify_spread): Check gfc_init_expr_flag instead
            of gfc_current_ns->sym_root->n.sym->attr.flavor == FL_PARAMETER.
    
            * gfortran.dg/spread_size_limit_2.f90: New test.
    
    From-SVN: r279660

commit f62d72ac7042d088fc173166568a13b907ec9c64
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Fri Dec 20 18:24:30 2019 +0100

    backport: re PR c++/92524 (ICE in short program with constexpr and std::array)
    
            Backported from mainline
            2019-11-27  Jakub Jelinek  <jakub@redhat.com>
    
            PR c++/92524
            * tree.c (replace_placeholders_r): Don't walk constructor elts with
            RANGE_EXPR indexes.
    
            * g++.dg/cpp0x/pr92524.C: New test.
    
    From-SVN: r279659

commit 92059b60e67b614a590261c13a32239549f29c61
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Fri Dec 20 18:23:34 2019 +0100

    backport: re PR debug/92664 (Wrong .debug_line section information when compiling stdin input with -g3)
    
            Backported from mainline
            2019-11-27  Jakub Jelinek  <jakub@redhat.com>
    
            PR debug/92664
            * dwarf2out.c (lookup_filename): Use "<stdin>" instead of "".
    
    From-SVN: r279658

commit 04b2ff5f756ff2da65afbf1101ac4bb1a698e9a6
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Fri Dec 20 18:01:08 2019 +0100

    backport: re PR c++/92648 (Handling of unknown attributes)
    
            Backported from mainline
            2019-11-26  Jakub Jelinek  <jakub@redhat.com>
    
            PR c++/92648
            * parser.c (cp_parser_std_attribute): For unknown attributes,
            skip balanced token seq instead of trying to parse
            attribute-argument-clause as expression list.
    
            * g++.dg/cpp0x/gen-attrs-71.C: New test.
    
    From-SVN: r279655

commit cfd17534ab92fdf93bdb35d2f4023ff375d81d46
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Fri Dec 20 18:00:02 2019 +0100

    backport: re PR c++/61414 (enum class bitfield size-checking needs a separate warning flag controlling it)
    
            Backported from mainline
            2019-11-26  Jakub Jelinek  <jakub@redhat.com>
    
            PR c++/61414
            * c-attribs.c (handle_mode_attribute): Add mode attribute to
            ENUMERAL_TYPEs.
    
            * class.c (enum_to_min_precision): New hash_map.
            (enum_min_precision): New function.
            (check_bitfield_decl): Use it.
    
            * g++.dg/cpp0x/enum23.C: Remove xfail.
            * g++.dg/cpp0x/enum28.C: New test.
    
    From-SVN: r279654

commit 75003cdd23c310ec385344e8040d490e8dd6d2be
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Fri Dec 20 17:58:35 2019 +0100

    backport: re PR sanitizer/92154 (new glibc breaks arm bootstrap due to libsanitizer)
    
            Backported from mainline
            2019-11-26  Jakub Jelinek  <jakub@redhat.com>
    
            PR sanitizer/92154
            * sanitizer_common/sanitizer_platform_limits_posix.h: Cherry-pick
            llvm-project revision 947f9692440836dcb8d88b74b69dd379d85974ce.
            * sanitizer_common/sanitizer_platform_limits_posix.cc: Likewise.
    
    From-SVN: r279653

commit 3981df84e90b99dc720a76967666b09b193057e8
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Fri Dec 20 17:58:07 2019 +0100

    backport: re PR tree-optimization/92644 (ICE in wide_int_to_tree_1, at tree.c:1530)
    
            Backported from mainline
            2019-11-26  Jakub Jelinek  <jakub@redhat.com>
    
            PR tree-optimization/92644
            * tree-ssa-phiopt.c (minmax_replacement): Add INTEGRAL_TYPE_P check
            next to INTEGER_CST checks.
    
            * g++.dg/opt/pr92644.C: New test.
    
    From-SVN: r279652

commit 03830a6fbdf11b26e035bae3305d0e41128b814c
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Fri Dec 20 17:57:21 2019 +0100

    backport: re PR inline-asm/92615 (ICE in extract_insn)
    
            Backported from mainline
            2019-11-23  Jakub Jelinek  <jakub@redhat.com>
    
            PR target/92615
            * config/i386/i386.c (ix86_md_asm_adjust): If dest_mode is
            GET_MODE (dest), is not QImode, using ZERO_EXTEND and dest is not
            register_operand, force x into register before storing it into dest.
            Formatting fix.
    
            * gcc.target/i386/pr92615.c: New test.
    
    From-SVN: r279651

commit 275bc23e71bc5e8f04d909a75071d0937b2fa5ba
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Fri Dec 20 17:56:30 2019 +0100

    backport: re PR c/90677 (gcc-9.1.0 fails to build __gcc_diag__ souce: error: 'cgraph_node' is not defined as a type)
    
            Backported from mainline
            2019-11-22  Jakub Jelinek  <jakub@redhat.com>
    
            PR c/90677
            * c-common.h (identifier_global_tag): Declare.
            * c-format.c (get_pointer_to_named_type): Renamed to ...
            (get_named_type): ... this.  Use identifier_global_tag instead of
            identifier_global_value, handle the return value being a TYPE_P.
            (init_dynamic_diag_info): Adjust get_pointer_to_named_type callers
            to call get_named_type instead.  Formatting fixes.
    
            * c-decl.c (identifier_global_tag): Define.
    
            * cp-objcp-common.c (identifier_global_tag): Define.
    
            * c-c++-common/pr90677.c: New test.
    
    From-SVN: r279650

commit 26f920e0d315b4b1b5c1cf506d0250e40b64551b
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Fri Dec 20 17:55:06 2019 +0100

    backport: re PR c++/90842 (ICE in poplevel, at cp/decl.c:585)
    
            Backported from mainline
            2019-11-21  Jakub Jelinek  <jakub@redhat.com>
                        Jason Merrill  <jason@redhat.com>
    
            PR c++/90842
            * parser.c (cp_parser_decl_specifier_seq): For concept or typedef
            break early if CP_PARSER_FLAGS_ONLY_MUTABLE_OR_CONSTEXPR.
            For type specifiers, set CP_PARSER_FLAGS_NO_TYPE_DEFINITIONS
            if CP_PARSER_FLAGS_ONLY_MUTABLE_OR_CONSTEXPR is set.
    
            * g++.dg/cpp1y/lambda-generic-90842.C: New test.
    
    From-SVN: r279649

commit 79fd3ecf191350926a66b669e4746783d1a9cc06
Author: Roman Zhuykov <zhroma@ispras.ru>
Date:   Fri Dec 20 15:50:44 2019 +0000

    Backport: rename tests to reference the correct PR
    
    2019-12-20  Roman Zhuykov  <zhroma@ispras.ru>
    
            * gcc.dg/pr92951-1.c: Rename to ...
            * gcc.dg/pr92591-1.c: ... this.
            * gcc.dg/pr92951-2.c: Rename to ...
            * gcc.dg/pr92591-2.c: ... this.
    
    From-SVN: r279646

commit 944838ac15df56068c5925ed8f369d28bc6cab0f
Author: Roman Zhuykov <zhroma@ispras.ru>
Date:   Fri Dec 20 15:05:12 2019 +0000

    modulo-sched: backport PR92591 fix from mainline
    
    2019-12-20  Roman Zhuykov  <zhroma@ispras.ru>
    
    modulo-sched: fix branch rescheduling issue (PR92591)
    
            PR rtl-optimization/92591
            * modulo-sched.c (ps_add_node_check_conflicts): Improve checking
            for history > 0 case.
            * params.def (sms-dfa-history): Limit to 16.
    
    gcc/testsuite:
    
            PR rtl-optimization/92591
            * gcc.dg/pr92951-1.c: New test.
            * gcc.dg/pr92951-2.c: New test.
    
    From-SVN: r279642

commit d4ba80d1530c3f1b0772a493bdbcedd22a3899f6
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Dec 20 00:16:23 2019 +0000

    Daily bump.
    
    From-SVN: r279618

commit 30e2de8922033b65fc4873bb3efc88646a7ba92b
Author: Georg-Johann Lay <avr@gjlay.de>
Date:   Thu Dec 19 08:59:28 2019 +0000

    backport: re PR target/92545 (avr: support ATmega devices from the 0-series)
    
            Backport support for some AVR devices from avrxmega3 family
            from SVN trunk r279309, r278387, r278389, r278478.
            PR target/92545
            * config/avr/avr-arch.h (avr_mcu_t) <flash_pm_offset>: New field.
            * config/avr/avr-devices.c (avr_mcu_types): Adjust initializers.
            * config/avr/avr-mcus.def (AVR_MCU): Add respective field.
            * config/avr/gen-avr-mmcu-specs.c (print_mcu)
            <*cpp, *cpp_mcu, *cpp_avrlibc, *link_pm_base_address>: Emit code
            for spec definitions.
            * config/avr/gen-avr-mmcu-texi.c: Rewrite.
            * doc/avr-mmcu.texi: Regenerate.
    
    From-SVN: r279564

commit 97027f6148f022809366f27e17c2bb906ddf629f
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Dec 19 00:16:10 2019 +0000

    Daily bump.
    
    From-SVN: r279559

commit bcac6a53060ae2041bab5307ea9fc854fcf75166
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Dec 18 00:16:24 2019 +0000

    Daily bump.
    
    From-SVN: r279482

commit 37950cdce00aedf10dfbf3e6498bf783209aa17d
Author: Andreas Krebbel <krebbel@linux.ibm.com>
Date:   Tue Dec 17 08:37:26 2019 +0000

    Fix PR92950: Wrong code emitted for movv1qi
    
    The backend emits 16 bit memory loads for single element character
    vector.  As a result the character will not be right justified in the
    GPR.
    
    gcc/ChangeLog:
    
    2019-12-17  Andreas Krebbel  <krebbel@linux.ibm.com>
    
            Backport from mainline
            2019-12-16  Andreas Krebbel  <krebbel@linux.ibm.com>
    
            PR target/92950
            * config/s390/vector.md ("mov<mode>" for V_8): Replace lh, lhy,
            and lhrl with llc.
    
    gcc/testsuite/ChangeLog:
    
    2019-12-17  Andreas Krebbel  <krebbel@linux.ibm.com>
    
            Backport from mainline
            2019-12-16  Andreas Krebbel  <krebbel@linux.ibm.com>
    
            PR target/92950
            * gcc.target/s390/vector/pr92950.c: New test.
    
    From-SVN: r279453

commit fb22722dc3b0085c288347f49b500029e9298ad2
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Dec 17 00:16:08 2019 +0000

    Daily bump.
    
    From-SVN: r279449

commit 5368e50a4ce803f757e2afa3de105d7d41642f4b
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Dec 16 00:16:16 2019 +0000

    Daily bump.
    
    From-SVN: r279407

commit 378c73e9eaa4d4cd8c40e65fd57831c8ff891a94
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Dec 15 00:16:08 2019 +0000

    Daily bump.
    
    From-SVN: r279401

commit 71e6ff2c908d5347960b1e72f0eff85e4130d792
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Dec 14 00:16:34 2019 +0000

    Daily bump.
    
    From-SVN: r279390

commit 0852213266480d43a8a9bf4b71d2397f8cec439d
Author: Jason Merrill <jason@redhat.com>
Date:   Fri Dec 13 00:10:11 2019 -0500

    PR c++/57082 - new X{} and private destructor.
    
    build_new_1 already passes tf_no_cleanup to build_value_init, but in this
    testcase we end up calling build_value_init by way of
    build_special_member_call, so we need to pass it to that function as well.
    
            * init.c (build_new_1): Also pass tf_no_cleanup to
            build_special_member_call.
    
    From-SVN: r279335

commit 20de63acca451d7097530cf02cbb8e016e1beda9
Author: Jason Merrill <jason@redhat.com>
Date:   Fri Dec 13 00:10:06 2019 -0500

    PR c++/92859 - ADL and bit-field.
    
    We also need unlowered_expr_type when considering associated types for ADL.
    
            * name-lookup.c: Use unlowered_expr_type.
    
    From-SVN: r279334

commit d69f32911ef5f1ecdb587c4c3f30488b09c0d26c
Author: Jason Merrill <jason@redhat.com>
Date:   Fri Dec 13 00:10:02 2019 -0500

    PR c++/92446 - deduction of class NTTP.
    
    Another place we need to look through the VIEW_CONVERT_EXPR we add to make a
    use of a class NTTP have const type.
    
            * pt.c (deducible_expression): Look through VIEW_CONVERT_EXPR.
    
    From-SVN: r279333

commit 549ab4bd5460080dfc331224e0372c38dcaaefce
Author: Jason Merrill <jason@redhat.com>
Date:   Fri Dec 13 00:09:57 2019 -0500

    PR c++/92150 - partial specialization with class NTTP.
    
    Here unify was getting confused by the VIEW_CONVERT_EXPR we add in
    finish_id_expression_1 to make class NTTP const when they're used in an
    expression.
    
    Tested x86_64-pc-linux-gnu, applying to trunk.
    
            * pt.c (unify): Handle VIEW_CONVERT_EXPR.
    
    From-SVN: r279332

commit 2d61a97d28a3409064191283e3b2ac1b48b6a206
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Dec 13 00:16:09 2019 +0000

    Daily bump.
    
    From-SVN: r279329

commit 70e28f6c4a42efc2ef1f5c0aef474aab0ab8c790
Author: Harald Anlauf <anlauf@gmx.de>
Date:   Thu Dec 12 20:46:03 2019 +0000

    backport: re PR fortran/92898 (ICE in gfc_check_is_contiguous, at fortran/check.c:7157)
    
    2019-12-12  Harald Anlauf  <anlauf@gmx.de>
    
            Backport from mainline
            PR fortran/92898
            * check.c (gfc_check_is_contiguous): Simplify check to handle
            arbitrary NULL() argument.
    
            PR fortran/92898
            * gfortran.dg/pr92898.f90: New test.
    
    From-SVN: r279315

commit 555e4a053951a0ae24835a266e71819336d7f637
Author: Claudiu Zissulescu <claziss@gcc.gnu.org>
Date:   Thu Dec 12 10:31:56 2019 +0100

    [ARC] Enable using DCMPF for hard float comparisons (backports)
    
    From-SVN: r279275

commit a747ba6c3625b7be85a36cc866f01df2d0362ecb
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Dec 12 00:16:17 2019 +0000

    Daily bump.
    
    From-SVN: r279269

commit 4ee5bc8d5272c3c8a42912b84b4d1e0887225bd4
Author: Steven G. Kargl <kargl@gcc.gnu.org>
Date:   Wed Dec 11 20:18:17 2019 +0000

    re PR fortran/92897 ([Coarray] ICE in gfc_set_array_spec, at fortran/array.c:864)
    
    2019-12-11 Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/92897
            * array.c (gfc_set_array_spec):  Remove invalid assert() triggered
            by invalid Fortran code.
    
    2019-12-11 Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/92897
            * gfortran.dg/pr92897.f90: New test.
    
    From-SVN: r279249

commit d2174a855423fdb401a89399fa22ece1ebd19c7d
Author: Thomas Schwinge <thomas@codesourcery.com>
Date:   Wed Dec 11 17:51:31 2019 +0100

    [OpenACC, libgomp] Initialize 'dynamic_refcount' whenever we initialize 'refcount'
    
    Cases missed in r261813 "Update OpenACC data clause semantics to the 2.5
    behavior".
    
            libgomp/
            * target.c (gomp_load_image_to_device, omp_target_associate_ptr):
            Initialize 'dynamic_refcount' whenever we initialize 'refcount'.
    
    Backport trunk r279230.
    
    Co-Authored-By: Julian Brown <julian@codesourcery.com>
    
    From-SVN: r279238

commit 0a0a04b446d01c0b12937ef7b32cf52632aacefd
Author: Jonathan Wakely <redi@gcc.gnu.org>
Date:   Wed Dec 11 13:46:02 2019 +0000

    libstdc++: Fix whitepace in changelog
    
    From-SVN: r279224

commit 5765ed7aaa5486c6e8eefc569247f58eda355474
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Wed Dec 11 13:45:56 2019 +0000

    PR libstdc++/91786 fix compilation error with Clang
    
    Backport from mainline
    2019-11-25  Jonathan Wakely  <jwakely@redhat.com>
    
            PR libstdc++/91786
            * include/bits/fs_path.h (filesystem_error): Move definition before
            the use in u8path.
    
    From-SVN: r279223

commit a317399178db7f43eae4d18238d20a073bd08c7e
Author: Tobias Burnus <tobias@codesourcery.com>
Date:   Wed Dec 11 13:36:02 2019 +0000

    libgomp – spelling fixes, incl. omp_lib.h.in
    
            Backported from mainline
            2019-12-11  Tobias Burnus  <tobias@codesourcery.com>
    
            * omp_lib.h.in: Fix spelling of function declaration
            omp_get_cancell(l)ation.
    
    From-SVN: r279221

commit 2f2585ed25883d415bf451743a8d22aa17d64e9c
Author: Thomas Rodgers <trodgers@redhat.com>
Date:   Wed Dec 11 03:38:53 2019 +0000

    Restore enable_if lost during original import of pstl
    
            * include/pstl/glue_numeric_defs.h: Restore enable_if lost during original
            import of pstl.
            * include/pstl/glue_numeric_impl.h: Likewise.
    
    From-SVN: r279213

commit 8a0fd542b7e82cd1f3fc796dcd3c5f0b7aab4c0f
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Dec 11 00:16:15 2019 +0000

    Daily bump.
    
    From-SVN: r279209

commit fdfcc35d8a2d6ba5475d52ba9b50e471572433bc
Author: Kewen Lin <linkw@gcc.gnu.org>
Date:   Tue Dec 10 12:54:21 2019 +0000

    [PATCH] Fix PR91790 by considering different first_stmt_info for realign
    
    As PR91790 exposed, when we have one slp node whose first_stmt_info_for_drptr
    is different from first_stmt_info, it's possible that the first_stmt DR isn't
    initialized yet before stmt SLP_TREE_SCALAR_STMTS[0] of slp node. So we
    shouldn't use first_stmt_info for vect_setup_realignment, instead we can use
    the one based on first_stmt_info_for_drptr DR with additional adjustment by
    bumping the distance from first_stmt DR.
    
    2019-12-10  Kewen Lin  <linkw@gcc.gnu.org>
    
      Backport from mainline
      2019-11-27  Kewen Lin  <linkw@gcc.gnu.org>
    
      PR tree-optimization/91790
      * gcc/tree-vect-stmts.c (vectorizable_load): Use the adjusted DR for
      vect_setup_realignment when first_stmt_info is different from
      first_stmt_info_for_drptr.
    
    From-SVN: r279166

commit 92df45de275093df3490b2fdd3124be614e79d2a
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Dec 10 00:16:08 2019 +0000

    Daily bump.
    
    From-SVN: r279149

commit 534803818676bdd02bae28795184584f8ddfe5d5
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Mon Dec 9 16:43:52 2019 +0000

    tree.c (build_array_type_1): Add SET_CANONICAL parameter and compute TYPE_CANONICAL from the element type...
    
            * tree.c (build_array_type_1): Add SET_CANONICAL parameter and compute
            TYPE_CANONICAL from the element type only if it is true.  Remove a few
            obsolete lines and adjust recursive call.
            (fld_process_array_type): Adjust call to build_array_type_1.
            (build_array_type): Likewise.
            (build_nonshared_array_type): Likewise.
    
    From-SVN: r279134

commit 591185df09cf2393f23ccba0ab7f1388dbcdcd8e
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Mon Dec 9 11:16:29 2019 +0000

    libstdc++: fix buffer overflow in path::operator+= (PR92853)
    
    When concatenating a path ending in a root-directory onto another path,
    we added an empty filename to the end of the path twice, but only
    reserved space for one. That meant the second write went past the end of
    the allocated buffer.
    
            PR libstdc++/92853
            * src/c++17/fs_path.cc (filesystem::path::operator+=(const path&)):
            Do not process a trailing directory separator twice.
            * testsuite/27_io/filesystem/path/concat/92853.cc: New test.
            * testsuite/27_io/filesystem/path/concat/path.cc: Test more cases.
            * testsuite/27_io/filesystem/path/concat/strings.cc: Test more cases.
    
    From-SVN: r279115

commit 56588b1de5d37ad8791a23b7bf49296c91c822fe
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Dec 9 00:16:09 2019 +0000

    Daily bump.
    
    From-SVN: r279103

commit 282d6eaca4a0b9754361d5a34a366098eac670a0
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Dec 8 00:16:17 2019 +0000

    Daily bump.
    
    From-SVN: r279083

commit 76740e6586ee50cf0acf8fffbdfae5a3d941f5ad
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Dec 7 00:16:15 2019 +0000

    Daily bump.
    
    From-SVN: r279071

commit 2ffdbc52b6b3793b9e98d37f033e502aecf918bf
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Dec 6 00:16:39 2019 +0000

    Daily bump.
    
    From-SVN: r279027

commit e0d96e9bdb9b1121bd6fc1a17709561385bbe8c9
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Dec 5 00:16:33 2019 +0000

    Daily bump.
    
    From-SVN: r278979

commit 10ab67a6bb2cb8e37016231e7186796434b39d06
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Dec 4 00:16:36 2019 +0000

    Daily bump.
    
    From-SVN: r278953

commit 0684d6378811b9597c40afada389588813832586
Author: Sandra Loosemore <sandra@codesourcery.com>
Date:   Mon Dec 2 21:44:41 2019 -0500

    Fix bugs relating to flexibly-sized objects in nios2 backend.
    
    2019-12-02  Sandra Loosemore  <sandra@codesourcery.com>
    
            Fix bugs relating to flexibly-sized objects in nios2 backend.
    
            PR target/92499
    
            gcc/c/
            * c-decl.c (flexible_array_type_p): Move to common code.
    
            gcc/
            * config/nios2/nios2.c (nios2_in_small_data_p): Do not consider
            objects of flexible types to be small if they have internal linkage
            or are declared extern.
            * config/nios2/nios2.h (ASM_OUTPUT_ALIGNED_LOCAL): Replace with...
            (ASM_OUTPUT_ALIGNED_DECL_LOCAL): ...this.  Use targetm.in_small_data_p
            instead of the size of the object initializer.
            * tree.c (flexible_array_type_p): Move from C front end, and
            generalize to handle fields in non-C structures.
            * tree.h (flexible_array_type_p): Declare.
    
            gcc/testsuite/
            * gcc.target/nios2/pr92499-1.c: New.
            * gcc.target/nios2/pr92499-2.c: New.
            * gcc.target/nios2/pr92499-3.c: New.
    
    From-SVN: r278919

commit 518db23288a17bafa7aa0be70f5bd4273807774e
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Dec 3 00:16:08 2019 +0000

    Daily bump.
    
    From-SVN: r278914

commit 417111c75419862a0ffd13844aa3a4606f3fbf57
Author: Li Jia He <helijia@linux.ibm.com>
Date:   Mon Dec 2 06:23:56 2019 +0000

    [rs6000]Fix PR92098 by backporting vec_cmp and vcond_mask supports to gcc-9-branch
    
    As PR92132 added vec_cmp_* and vcond_mask_* supports on trunk.  This is a
    partial backport of vec_{cmp,cmpu}<mode><mode> interface and related expand
    to gcc-9-branch to fix PR92098.
    
    gcc/ChangeLog
    
    2019-12-02  Li Jia He  <helijia@linux.ibm.com>
    
            Partial backport from mainline
            PR target/92098
            2019-11-08  Kewen Lin  <linkw@gcc.gnu.org>
    
            PR target/92132
            * config/rs6000/predicates.md
            (signed_or_equality_comparison_operator): New predicate.
            (unsigned_or_equality_comparison_operator): Likewise.
            * config/rs6000/rs6000.md (one_cmpl<mode>2): Remove expand.
            (one_cmpl<mode>3_internal): Rename to one_cmpl<mode>2.
            * config/rs6000/vector.md
            (vcond_mask_<mode><mode> for VEC_I and VEC_I): New expand.
            (vec_cmp<mode><mode> for VEC_I and VEC_I): Likewise.
            (vec_cmpu<mode><mode> for VEC_I and VEC_I): Likewise.
    
    gcc/testsuite/ChangeLog
    
    2019-12-02  Li Jia He  <helijia@linux.ibm.com>
    
            Partial backport from trunk
            PR target/92098
            2019-11-08  Kewen Lin  <linkw@gcc.gnu.org>
    
            PR target/92132
            * gcc.target/powerpc/pr92132-fp-1.c: New test.
            * gcc.target/powerpc/pr92132-fp-2.c: New test.
    
    From-SVN: r278892

commit 036ffad65d161ca49b7c363feb69477db3c9a9dd
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Dec 2 00:16:09 2019 +0000

    Daily bump.
    
    From-SVN: r278888

commit 49947e9ee5c900bb6959edbb6610c7ffca03bb40
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Dec 1 00:16:21 2019 +0000

    Daily bump.
    
    From-SVN: r278882

commit a78fb9e7141b8e4970209080d92a488dab964216
Author: Thomas Koenig <tkoenig@gcc.gnu.org>
Date:   Sat Nov 30 15:08:32 2019 +0000

    backport: re PR fortran/91783 (ICE in gfc_dep_resolver, at fortran/dependency.c:2111)
    
    Backport from trunk as an insurance policy.
    
    2019-11-30  Thomas Koenig  <tkoenig@gcc.gnu.org>
    
        PR fortran/91783
        * gfortran.dg/dependency_56.f90: New test. Backport from trunk on
        the off-chance that somebody backports something that will break
        this test case.
    
    From-SVN: r278874

commit 9f2cd8b16f43d3188804b0b168bb4133a248d748
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Nov 30 00:16:16 2019 +0000

    Daily bump.
    
    From-SVN: r278867

commit a9e150ae95e9d5585552baf6c3fa0b5192808300
Author: Harald Anlauf <anlauf@gmx.de>
Date:   Fri Nov 29 20:56:11 2019 +0000

    backport: re PR fortran/92629 (internal compiler error: in convert_mpz_to_unsigned, at fortran/simplify.c:173)
    
    2019-11-29  Harald Anlauf  <anlauf@gmx.de>
    
            Backport from mainline
            PR fortran/92629
            * simplify.c (convert_mpz_to_unsigned): Skip assert for argument
            range when -fno-range-check is specified.
    
            PR fortran/92629
            * gfortran.dg/pr92629.f90: New testcase.
    
    From-SVN: r278862

commit 8ec615ce210162fe8509edc0ba418109e632bba5
Author: Tobias Burnus <tobias@codesourcery.com>
Date:   Fri Nov 29 12:27:34 2019 +0000

    Fix testcase - was missing -fopenacc
    
            Backport from mainline
            2019-11-29 Tobias Burnus  <tobias@codesourcery.com>
    
            PR ipa/84963
            * gfortran.dg/goacc/pr84963.f90: Use dg-additional-options not
            dg-options as otherwise -fopenacc is not used.
    
    From-SVN: r278838

commit d6ffddab11ca2ff7ab0defc27a21d61e900e4b02
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Fri Nov 29 09:07:53 2019 +0000

    re PR ada/92489 (internal error on Invalid_Value Attribute attribute)
    
            PR ada/92489
            Backport from mainline
            2019-07-01  Ed Schonberg  <schonberg@adacore.com>
    
            * exp_attr.adb (Expand_Attribute_Reference, case Invalid_Value):
            Resolve result of call to Get_Simple_Init_Val, which may be a
            conversion of a literal.
    
    From-SVN: r278830

commit 3da8ae40a08c569e1590aef2e6dde8fb816ef323
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Nov 29 00:16:08 2019 +0000

    Daily bump.
    
    From-SVN: r278824

commit cef5d743cd8d551295155ff0b61c7c8100f9a631
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Nov 28 00:16:09 2019 +0000

    Daily bump.
    
    From-SVN: r278792

commit de819c7eb26504f7752b89db089985c83ac5774c
Author: Richard Biener <rguenther@suse.de>
Date:   Wed Nov 27 12:09:36 2019 +0000

    backport: re PR tree-optimization/92222 (ice in useless_type_conversion_p, at gimple-expr.c:86)
    
    2019-11-27  Richard Biener  <rguenther@suse.de>
    
            Backport from mainline
            2019-10-25  Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/92222
            * tree-vect-slp.c (_slp_oprnd_info::first_pattern): Remove.
            (_slp_oprnd_info::second_pattern): Likewise.
            (_slp_oprnd_info::any_pattern): New.
            (vect_create_oprnd_info): Adjust.
            (vect_get_and_check_slp_defs): Compute whether any stmt is
            in a pattern.
            (vect_build_slp_tree_2): Avoid building up a node from scalars
            if any of the operand defs, not just the first, is in a pattern.
    
            * gcc.dg/torture/pr92222.c: New testcase.
    
    From-SVN: r278763

commit d91c3fdb69f9af65e14be04b33ac80bfbec66ace
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Nov 27 00:16:15 2019 +0000

    Daily bump.
    
    From-SVN: r278750

commit 5b1a33584cf912cba70494df079bef7f92bbc442
Author: Jerry DeLisle <jvdelisle@gcc.gnu.org>
Date:   Tue Nov 26 22:56:24 2019 +0000

    backport: re PR libfortran/92100 (Formatted stream IO irreproducible read with binary data in file)
    
    2019-11-26  Jerry DeLisle  <jvdelisle@gcc.ngu.org>
    
            Backport from mainline
            PR fortran/92100
            io/transfer.c (data_transfer_init_worker): Use fbuf_reset
            instead of fbuf_flush before the seek. Note that fbuf_reset
            calls fbuf_flush and adjusts fbuf pointers.
    
            gfortran.dg/streamio_18.f90: New test.
    
    From-SVN: r278740

commit 1d6045e177405344367b847547fc6cfc17f147c8
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Nov 26 00:16:11 2019 +0000

    Daily bump.
    
    From-SVN: r278715

commit f61f7b69491548dd438b3dcc895a3a528f560bfd
Author: Thomas Koenig <tkoenig@gcc.gnu.org>
Date:   Mon Nov 25 20:04:28 2019 +0000

    Fix EOF handling for arrays.
    
    2019-11-25  Thomas Koenig  <tkoenig@gcc.gnu.org>
            Harald Anlauf <anlauf@gmx.de>
    
            Backport from trunk
            PR fortran/92569
            * io/transfer.c (transfer_array_inner):  If position is
            at AFTER_ENDFILE in current unit, return from data loop.
    
    2019-11-25  Thomas Koenig  <tkoenig@gcc.gnu.org>
            Harald Anlauf <anlauf@gmx.de>
    
            Backport from trunk
            PR fortran/92569
            * gfortran.dg/eof_6.f90: New test.
    
    
    Co-Authored-By: Harald Anlauf <anlauf@gmx.de>
    
    From-SVN: r278702

commit f87738fca613800f068ea09888144a588a31146d
Author: Tobias Burnus <tobias@codesourcery.com>
Date:   Mon Nov 25 15:33:32 2019 +0100

    Fortran] PR 92050 - fix ICE with -fcheck=all
    
            Backport from mainline
            2019-10-11  Tobias Burnus  <tobias@codesourcery.com>
    
            PR fortran/92050
            * trans-expr.c (gfc_conv_procedure_call): Handle code generated
            by -fcheck=all.
    
            PR fortran/92050
            * gfortran.dg/pr92050.f90: New.
    
    From-SVN: r278689

commit 353ba0cdeaba633d8e83b73de4e90c5d594ac88d
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Mon Nov 25 10:52:33 2019 +0000

    re PR ada/92362 (double elaboration of expression in Address aspect)
    
            PR ada/92362
            * gcc-interface/trans.c (gnat_to_gnu) <N_Attribute_Definition_Clause>:
            Use a temporary instead of clobbering the result with a freeze node.
    
    From-SVN: r278676

commit 09020f7a38f1038226963e2e1a7d4264a91929a8
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Mon Nov 25 10:30:41 2019 +0000

    re PR ada/92575 (couple of suspicious assignments in expect.c)
    
            PR ada/92575
            * expect.c (__gnat_expect_poll [VMS, HPUX]): Fix typo.
    
    From-SVN: r278672

commit acb917ea849a110d1394a4f6e96066981ebce1c4
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Nov 25 00:16:15 2019 +0000

    Daily bump.
    
    From-SVN: r278662

commit f5b57bbf7f6513b6b70b4615d86b4e085aa07d7a
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Nov 24 00:16:09 2019 +0000

    Daily bump.
    
    From-SVN: r278652

commit 6b082a863dcd2d25c51032d834c353be1f745940
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Nov 23 00:16:16 2019 +0000

    Daily bump.
    
    From-SVN: r278637

commit a84ffd9675c5090c47057fe85635fe030ddbf64f
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Fri Nov 22 12:36:18 2019 +0000

    PR libstdc++/92267 fix ABI change in deque iterators
    
    Defaulting the copy constructor on its first declaration made it change
    from user-provided (and non-trivial) to implicitly-defined (and
    trivial). This caused an ABI incompatibility between GCC 8 and GCC 9,
    where functions taking a deque iterator disagree on the argument passing
    convention.
    
    Backport from mainline
    2019-10-29  Jonathan Wakely  <jwakely@redhat.com>
    
            PR libstdc++/92267
            * include/bits/stl_deque.h (_Deque_iterator(const _Deque_iterator&)):
            Do not define as defaulted.
            * testsuite/23_containers/deque/types/92267.cc: New test.
    
    From-SVN: r278614

commit efe923e672accbca5aea092923c25fa09c71c0f0
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Nov 22 00:16:34 2019 +0000

    Daily bump.
    
    From-SVN: r278606

commit ca124a1deec777b8173b362d8e4b2245e0765ba9
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Nov 21 14:53:57 2019 +0100

    re PR tree-optimization/91355 (optimized code does not call destructor while unwinding after exception)
    
            PR tree-optimization/91355
            * tree-ssa-sink.c (select_best_block): Use >= rather than >
            for early_bb scaled count with best_bb count comparison.
    
            * g++.dg/torture/pr91355.C: New test.
    
    From-SVN: r278551

commit 0351a08f178a69b8722ee8e1b0c5895a34a5f12a
Author: Richard Biener <rguenther@suse.de>
Date:   Thu Nov 21 09:18:06 2019 +0000

    revert: re PR tree-optimization/91790 (ICE: verify_ssa failed (error: definition in block 2 follows the use))
    
    2019-11-21  Richard Biener  <rguenther@suse.de>
    
            Revert
            2019-09-17  Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/91790
            * tree-vect-stmts.c (vectorizable_load): For BB vectorization
            use the correct DR for setting up realignment.
    
    From-SVN: r278545

commit 17192e31d08e9682e794f22a52aaef6afffdf4bb
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Nov 21 00:16:27 2019 +0000

    Daily bump.
    
    From-SVN: r278536

commit 8ea83ef1ef1b6f8bcaa8f9d8c673513f78548e47
Author: Peter Bergner <bergner@linux.ibm.com>
Date:   Wed Nov 20 20:42:41 2019 +0000

    Backport fix for PR92090.
    
    gcc/
            Backport from mainline
            2019-11-07  Peter Bergner <bergner@linux.ibm.com>
    
            PR other/92090
            * config/rs6000/predicates.md (input_operand): Allow MODE_PARTIAL_INT
            modes for integer constants.
    
    gcc/testsuite/
            Backport from mainline
            2019-11-13  David Edelsohn  <dje.gcc@gmail.com>
    
            * gcc.target/powerpc/pr92090.c: Limit -mbig to powerpc64le-*-*.
            * gcc.target/powerpc/pr92090-2.c: Likewise.
    
            2019-11-07  Peter Bergner <bergner@linux.ibm.com>
    
            PR other/92090
            * gcc.target/powerpc/pr92090-2.c: New test.
    
            2019-11-07  Peter Bergner <bergner@linux.ibm.com>
    
            PR other/92090
            * gcc.target/powerpc/pr92090.c: New test.
    
    From-SVN: r278527

commit 40f600848fc66584246172f474d026afd1a3ff8d
Author: Michael Matz <matz@suse.de>
Date:   Wed Nov 20 16:51:10 2019 +0000

    re PR middle-end/90796 (GCC: O2 vs O3 output differs on simple test)
    
    Fix PR90796
    
           PR middle-end/90796
           * gimple-loop-jam.c (any_access_function_variant_p): New function.
           (adjust_unroll_factor): Use it to constrain safety, new parameter.
           (tree_loop_unroll_and_jam): Adjust call and profitable unroll factor.
    
    testsuite/
           Backport from mainline
           PR middle-end/90796
           * gcc.dg/unroll-and-jam.c: Disable loop-invariant motion and adjust.
    
           PR middle-end/90796
           * gcc.dg/unroll-and-jam.c: Add three invalid and one valid case.
    
    From-SVN: r278512

commit 999904b2b29e781613b996b4af46ea7b2b6a8432
Author: Joseph Myers <joseph@codesourcery.com>
Date:   Wed Nov 20 16:43:14 2019 +0000

    Document -Wc11-c2x-compat.
    
    My patch that added initial C2X support and associated command-line
    options missed documenting -Wc11-c2x-compat although the other options
    were properly documented.  This patch adds the missing documentation.
    
    Tested with "make info" and "make pdf".
    
            * doc/invoke.texi (-Wc11-c2x-compat): Document.
    
    From-SVN: r278511

commit 38527cf595424cb3ec8422902c127ea000d6e867
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Wed Nov 20 10:55:56 2019 +0100

    re PR c++/90767 (jumbled error message with this and const)
    
            PR c++/90767
            * call.c (complain_about_no_candidates_for_method_call): If
            conv->from is not a type, pass to complain_about_bad_argument
            lvalue_type of conv->from.
    
            * g++.dg/diagnostic/pr90767-1.C: New test.
            * g++.dg/diagnostic/pr90767-2.C: New test.
    
    From-SVN: r278492

commit 369a103aa96e1e5f907a8321dc4cbf4bec901417
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Wed Nov 20 10:55:01 2019 +0100

    re PR middle-end/90840 (ICE in simplify_subreg, at simplify-rtx.c:6441)
    
            PR middle-end/90840
            * expmed.c (store_bit_field_1): Handle the case where op0 is not a MEM
            and has a mode that doesn't have corresponding integral type.
    
            * gcc.c-torture/compile/pr90840.c: New test.
    
    From-SVN: r278491

commit a52713cbf0d5e8f6735798b6163634fe182b3a67
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Wed Nov 20 10:54:02 2019 +0100

    re PR target/90867 (Multiplication or typecast of integer and double always zero when...)
    
            PR target/90867
            * config/i386/i386.c (ix86_valid_target_attribute_tree): Don't
            clear opts->x_ix86_isa_flags{,2} here...
            (ix86_valid_target_attribute_inner_p): ... but here when seeing
            arch=.  Also clear opts->x_ix86_isa_flags{,2}_explicit.
    
            * gcc.target/i386/pr90867.c: New test.
    
    From-SVN: r278490

commit 4251fa113d8a3ca3d20ffb2c6556ea3b573d04df
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Wed Nov 20 10:53:15 2019 +0100

    re PR c/90898 (ICE in insert_clobber_before_stack_restore, at tree-ssa-ccp.c:2112)
    
            PR c/90898
            * tree-ssa-ccp.c (insert_clobber_before_stack_restore): Remove
            assertion.
            (insert_clobbers_for_var): Fix a typo in function comment.
    
            * gcc.dg/pr90898.c: New test.
    
    From-SVN: r278489

commit 9269f9603aec4df204e584a507ddbd8936f3b061
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Wed Nov 20 10:52:27 2019 +0100

    backport: re PR c++/92504 (ICE on gcc-9 -fopenmp: internal compiler error: tree check: expected tree that contains 'decl common' structure, have 'baselink' in get_inner_reference, at expr.c:7238)
    
            Backported from mainline
            2019-11-19  Jakub Jelinek  <jakub@redhat.com>
    
            PR c++/92504
            * semantics.c (handle_omp_for_class_iterator): Don't call
            cp_fully_fold on cond.
    
            * g++.dg/gomp/pr92504.C: New test.
    
    From-SVN: r278488

commit e962b8f36433da0a3ef7352ae30d8f4a143405be
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Nov 20 00:16:14 2019 +0000

    Daily bump.
    
    From-SVN: r278473

commit a7b2d1b348e18522081160fec43304d3202b3f2c
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Nov 19 10:26:23 2019 +0100

    re PR middle-end/91450 (__builtin_mul_overflow(A,B,R) wrong code if product < 0, *R is unsigned, and !(A&B))
    
            PR middle-end/91450
            * internal-fn.c (expand_mul_overflow): For s1 * s2 -> ur, if one
            operand is negative and one non-negative, compare the non-negative
            one against 0 rather than comparing s1 & s2 against 0.  Otherwise,
            don't compare (s1 & s2) == 0, but compare separately both s1 == 0
            and s2 == 0, unless one of them is known to be negative.  Remove
            tem2 variable, use tem where tem2 has been used before.
    
            * gcc.c-torture/execute/pr91450-1.c: New test.
            * gcc.c-torture/execute/pr91450-2.c: New test.
    
    From-SVN: r278438

commit 6c7d93c58a827d34cb618221ae4a7b4e87ad22bd
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Tue Nov 19 09:12:36 2019 +0000

    * doc/invoke.texi (-gno-internal-reset-location-views): Fix typo.
    
    From-SVN: r278435

commit 07151e4af3657a8ba8d258ee04c7a34de152cc03
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Nov 19 00:16:20 2019 +0000

    Daily bump.
    
    From-SVN: r278426

commit 02955765b7f2d1106466275cdb9a90c12583e1cb
Author: Segher Boessenkool <segher@kernel.crashing.org>
Date:   Mon Nov 18 20:29:03 2019 +0100

    backport: rs6000.md (rs6000_set_fpscr_drn): Use ULL on big hexadecimal literal.
    
            Backport from trunk
            2019-11-12  Segher Boessenkool  <segher@kernel.crashing.org>
    
            * config/rs6000/rs6000.md (rs6000_set_fpscr_drn): Use ULL on big
            hexadecimal literal.
    
    From-SVN: r278420

commit f79b23b5576f9a35eb65861a7db89847ee2d2c7a
Author: Tamar Christina <tamar.christina@arm.com>
Date:   Mon Nov 18 15:29:40 2019 +0000

    AArch64: Correct HWCAP for fp16fml
    
            Backport from mainline
            2019-09-24  Stamatis Markianos-Wright  <stam.markianos-wright@arm.com>
    
            * config/aarch64/aarch64-option-extensions.def (fp16fml):
            Update hwcap string for fp16fml.
    
    From-SVN: r278412

commit 3beea0c0cb7736cdbc73a1e34b59ca3d71ba80d8
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Nov 18 00:16:09 2019 +0000

    Daily bump.
    
    From-SVN: r278381

commit dbbbe55ecd47aefef617c658a08e8b2528af6c36
Author: John David Anglin <danglin@gcc.gnu.org>
Date:   Sun Nov 17 23:15:29 2019 +0000

    linux-atomic.c (__kernel_cmpxchg): Change argument 1 to volatile void *.
    
            * config/pa/linux-atomic.c (__kernel_cmpxchg): Change argument 1 to
            volatile void *.  Remove trap check.
            (__kernel_cmpxchg2): Likewise.
            (FETCH_AND_OP_2): Adjust operand types.
            (OP_AND_FETCH_2): Likewise.
            (FETCH_AND_OP_WORD): Likewise.
            (OP_AND_FETCH_WORD): Likewise.
            (COMPARE_AND_SWAP_2): Likewise.
            (__sync_val_compare_and_swap_4): Likewise.
            (__sync_bool_compare_and_swap_4): Likewise.
            (SYNC_LOCK_TEST_AND_SET_2): Likewise.
            (__sync_lock_test_and_set_4): Likewise.
            (SYNC_LOCK_RELEASE_1): Likewise.  Use __kernel_cmpxchg2 for release.
            (__sync_lock_release_4): Adjust operand types.  Use __kernel_cmpxchg
            for release.
            (__sync_lock_release_8): Remove.
    
    From-SVN: r278378

commit 8d6905de014de1710e17c7b7fc6eedea781e80d7
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Nov 17 00:16:09 2019 +0000

    Daily bump.
    
    From-SVN: r278368

commit 74c27c3c33f2eea249d5e799757910a5d5ba0235
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Nov 16 00:16:10 2019 +0000

    Daily bump.
    
    From-SVN: r278327

commit 50a969f1713d9a8f4706df7d0e786122c1e0f594
Author: Ilya Leoshkevich <iii@linux.ibm.com>
Date:   Fri Nov 15 12:55:05 2019 +0000

    Free dominance info at the beginning of pass_jump_after_combine
    
    try_forward_edges does not update dominance info, and merge_blocks
    relies on it being up-to-date.  In PR92430 stale dominance info makes
    merge_blocks produce a loop in the dominator tree, which in turn makes
    delete_basic_block loop forever.
    
    Fix by freeing dominance info at the beginning of cleanup_cfg.
    
    Also, since the whole point of this pass is to perform jump threading
    (other cleanups are not valuable at this point), skip it completely when
    flag_thread_jumps is not set.
    
    gcc/ChangeLog:
    
    2019-11-15  Ilya Leoshkevich  <iii@linux.ibm.com>
    
            Backport from mainline
            PR rtl-optimization/92430
            * cfgcleanup.c (pass_jump_after_combine::gate): New function.
            (pass_jump_after_combine::execute): Free
            dominance info at the beginning.
    
    gcc/testsuite/ChangeLog:
    
    2019-11-15  Ilya Leoshkevich  <iii@linux.ibm.com>
    
            Backport from mainline
            PR rtl-optimization/92430
            * gcc.dg/pr92430.c: New test (from Arseny Solokha).
    
    From-SVN: r278291

commit bb2d60189cf0cc2d8e875cdad243ef3dd6965cb1
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Nov 15 00:16:08 2019 +0000

    Daily bump.
    
    From-SVN: r278271

commit fc2d906f47de521bc97e1d2dcdd65474c3c54f52
Author: Claudiu Zissulescu <claziss@gmail.com>
Date:   Thu Nov 14 09:58:19 2019 +0000

    [ARC] Backport from mainline r278056,r278057
    
    From-SVN: r278215

commit 48cb09679f1cd043f3d593199fa6295a30eebdbf
Author: Martin Liska <mliska@suse.cz>
Date:   Thu Nov 14 10:45:37 2019 +0100

    Backport r278210
    
    2019-11-14  Martin Liska  <mliska@suse.cz>
    
            Backport from mainline
            2019-11-14  Martin Liska  <mliska@suse.cz>
    
            PR target/92389
            * config/i386/i386.h: Add PTA_AVX512VPOPCNTDQ to
            PTA_ICELAKE_CLIENT which is later interited by
            PTA_ICELAKE_SERVER and PTA_TIGERLAKE.
    
    From-SVN: r278214

commit 8afd44a899985f2454d1fea38d7a2518d1c0863e
Author: Tobias Burnus <tobias@codesourcery.com>
Date:   Thu Nov 14 08:02:42 2019 +0000

    Fix gfortran.dg/ISO_Fortran_binding_17.c using rel. #include
    
            PR fortran/92470
            PR fortran/92500
            * gfortran.dg/ISO_Fortran_binding_17.c: Include
            ISO_Fortran_binding.h with relative path.
    
    From-SVN: r278201

commit 39ef2bb26b0d4eb36b3cdf211c3432909c230134
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Nov 14 00:16:22 2019 +0000

    Daily bump.
    
    From-SVN: r278188

commit b8449384f332b58a2d2f1e268afbfb25e8584339
Author: Dragan Mladjenovic <dmladjenovic@wavecomp.com>
Date:   Wed Nov 13 19:20:15 2019 +0000

    Sanitize the constant argument for rotr<mode>3
    
    This was dormant for quite some time, but it started happening for me
    on gcc.c-torture/compile/pr65153.c sometime after r276645 for -mabi=32 linux runs.
    
    The pattern accepts any SMALL_OPERAND constant value while it asserts during the final
    that the value is in the mode size range. I this case it happens that combine_and_move_insns
    during ira makes a pattern with negative "shift count" which fails at final stage.
    
    This simple fix just truncates the constant operand to mode size the same as shift patterns.
    
    gcc/ChangeLog:
    
    2019-11-13  Dragan Mladjenovic  <dmladjenovic@wavecomp.com>
    
            Backport from mainline
            * config/mips/mips.md (rotr<mode>3): Sanitize the constant argument
            instead of asserting its value.
    
    From-SVN: r278154

commit c078a83217e7b599fc8254ff5c1699111dfa858e
Author: Tobias Burnus <burnus@gcc.gnu.org>
Date:   Wed Nov 13 16:06:47 2019 +0100

    PR fortran/92470 Fixes for CFI_address
    
            Backport from mainline
    
            libgfortran/
            2019-11-13  Tobias Burnus  <tobias@codesourcery.com>
    
            PR fortran/92470
            * runtime/ISO_Fortran_binding.c (CFI_establish): Set lower_bound to 0
            also for CFI_attribute_other.
    
            2019-11-12  Tobias Burnus  <tobias@codesourcery.com>
    
            PR fortran/92470
            * runtime/ISO_Fortran_binding.c (CFI_address): Handle non-zero
            lower_bound; update error message.
            (CFI_allocate): Fix comment typo.
            (CFI_establish): Fix identation, fix typos, don't check values of 'dv'
            argument.
    
            gcc/testsuite/
            2019-11-13  Tobias Burnus  <tobias@codesourcery.com>
    
            PR fortran/92470
            * gfortran.dg/ISO_Fortran_binding_1.c (establish_c): Add assert for
            lower_bound == 0.
    
            2019-11-12  Tobias Burnus  <tobias@codesourcery.com>
    
            PR fortran/92470
            * gfortran.dg/ISO_Fortran_binding_17.c: New.
            * gfortran.dg/ISO_Fortran_binding_17.f90: New.
            * gfortran.dg/ISO_Fortran_binding_1.c (elemental_mult_c, allocate_c,
            section_c, select_part_c): Update for CFI_{address} changes;
            add asserts.
    
    From-SVN: r278143

commit 46a6d3cad7d0e7397cc5d17990602fe0f37e69cc
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Wed Nov 13 11:59:20 2019 +0000

    c-ada-spec.c (get_underlying_decl): Do not look through typedefs.
    
            * c-ada-spec.c (get_underlying_decl): Do not look through typedefs.
            (dump_forward_type): Do not generate a declaration for function types.
            (dump_nested_type) <ARRAY_TYPE>: Do not generate a nested declaration
            of the component type if it is declared in another file.
    
    From-SVN: r278130

commit fb3bf22d2cd774f6b40e945497e79f70def29e14
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Nov 13 00:16:21 2019 +0000

    Daily bump.
    
    From-SVN: r278110

commit 93265a71b6388ed6f1e93e7461b024c8fe58f0df
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Nov 12 00:16:50 2019 +0000

    Daily bump.
    
    From-SVN: r278073

commit 949b1f43b4acc3ba527879a01acbcee67d7c3481
Author: Richard Biener <rguenther@suse.de>
Date:   Mon Nov 11 16:07:54 2019 +0000

    backport: re PR tree-optimization/90930 (Excessive memory consumption)
    
    2019-11-11  Richard Biener  <rguenther@suse.de>
    
            Backport from mainline
            2019-06-25  Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/90930
            * tree-ssa-reassoc.c (reassociate_bb): Only rewrite expression
            into parallel form in the last pass instance.
    
            * gcc.dg/tree-ssa/reassoc-24.c: Adjust.
            * gcc.dg/tree-ssa/reassoc-25.c: Likewise.
    
    From-SVN: r278059

commit d10e434168fb2efbed240d73597fdd0a10a4e0f0
Author: H.J. Lu <hjl.tools@gmail.com>
Date:   Mon Nov 11 00:39:10 2019 -0800

    [PR87833] x86: Put -fPIC and -shared the last to create offload image
    
    On x86, since -fPIC and -shared should be used to create offload image,
    we put them the last to properly create offload image.
    
    2019-11-11  H.J. Lu  <hjl.tools@gmail.com>
    
            PR target/87833
            * config/i386/intelmic-mkoffload.c (prepare_target_image): Put
            -fPIC and -shared the last to create offload image.
    
    Backport from trunk r278041.
    
    From-SVN: r278042

commit c14d05e62f8931ec63d7e8974372d4f84b4039e9
Author: Thomas Schwinge <thomas@codesourcery.com>
Date:   Mon Nov 11 09:19:23 2019 +0100

    Assert 'offset2' instead of 'offset' in 'gcc/gimplify.c:gimplify_scan_omp_clauses'
    
    ... to fix a long-time typo/copy'n'past-o.
    
            gcc/
            * gimplify.c (gimplify_scan_omp_clauses): Assert 'offset2' instead
            of 'offset'.
    
    Backport from trunk r278038.
    
    From-SVN: r278039

commit 548fe28fbe884ac2ddf965f82a0fdbcb07b79934
Author: Thomas Schwinge <thomas@codesourcery.com>
Date:   Mon Nov 11 09:06:25 2019 +0100

    [build] Properly track GCC language configure fragments
    
    The 'gcc/configure' script sources all 'gcc/*/config-lang.in' files, but fails
    to emit such dependency information into the build machinery.  That means,
    currently, when something gets changed in a 'gcc/*/config-lang.in' file, this
    is not noticed, and doesn't propagate through the build machinery.
    
    Handling of configure fragments is modelled in the same way as it already
    exists for Makefile fragments.
    
            gcc/
            * Makefile.in (LANG_CONFIGUREFRAGS): Define.
            (config.status): Use/depend on it.
            * configure.ac (all_lang_configurefrags): Track, 'AC_SUBST'.
            * configure: Regenerate.
    
    Backport from trunk r278035.
    
    From-SVN: r278036

commit 758914048dfb468027a9d75796135802f1b87728
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Nov 11 00:16:13 2019 +0000

    Daily bump.
    
    From-SVN: r278031

commit df6a2bb4573711543c08c6c4e71c5e04a861a57b
Author: Thomas Koenig <tkoenig@gcc.gnu.org>
Date:   Sun Nov 10 11:19:13 2019 +0000

    Put vtab into RO section, same for __def_init if it contains an initializer.
    
    2019-11-10  Thomas Koenig  <tkoenig@gcc.gnu.org>
    
            Backport from trunk
            PR fortran/92113
            * trans-decl.c (gfc_get_symbol_decl): If __def_init actually
            contains a value, put it into  the read-only section.
    
    From-SVN: r278015

commit 8f2283291e9bdd578dc35cf4f3258b386319f86a
Author: Thomas Koenig <tkoenig@gcc.gnu.org>
Date:   Sun Nov 10 09:34:42 2019 +0000

    Commit symbol for external BLAS routine when translating MATMUL to *GEMM.
    
    2019-11-10  Thomas Koenig  <tkoenig@gcc.gnu.org>
    
            Backport from trunk
            PR fortran/92321
            * frontend-passes.c (call_external_blas): Commit symbol for
            external BLAS routine.
    
    2019-11-10  Thomas Koenig  <tkoenig@gcc.gnu.org>
    
            Backport from trunk
            PR fortran/92321
            * gfortran.dg/matmul_blas_2.f90: New test.
    
    From-SVN: r278014

commit 49d1c20b3c0bab235412de195ac939f5a8cbb44e
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Nov 10 00:16:18 2019 +0000

    Daily bump.
    
    From-SVN: r278012

commit 83c8f96b3239c4af4dfeca9ba91ac4dfbfdaddf5
Author: John David Anglin <danglin@gcc.gnu.org>
Date:   Sat Nov 9 14:19:36 2019 +0000

    backport: pa.md (memory_barrier): Revise to use ldcw barriers.
    
            Backport from mainline
            2019-11-07  John David Anglin  <danglin@gcc.gnu.org>
    
            * config/pa/pa.md (memory_barrier): Revise to use ldcw barriers.
            Enhance comment.
            (memory_barrier_coherent, memory_barrier_64, memory_barrier_32): New
            insn patterns using ldcw instruction.
            (memory_barrier): Remove insn pattern using sync instruction.
            * config/pa/pa.opt (coherent-ldcw): New option.
            (ordered): New option.
    
    From-SVN: r278001

commit 46b26ef82ab81ae88c0fdf69d5acbe45d50dfa3b
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Nov 9 00:16:15 2019 +0000

    Daily bump.
    
    From-SVN: r277998

commit 4d304b7d1b206ccbb83b23c94d895a1aa238bab7
Author: Marek Polacek <polacek@redhat.com>
Date:   Fri Nov 8 21:52:39 2019 +0000

    PR c++/90998 - ICE with copy elision in init by ctor and -Wconversion.
    
            * call.c (joust): Don't attempt to warn if ->second_conv is null.
    
            * g++.dg/cpp0x/overload-conv-4.C: New test.
    
    From-SVN: r277992

commit 05b77d39e26070e41b5edbf0f3ea821dfe3314f1
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Fri Nov 8 20:02:24 2019 +0100

    re PR middle-end/92384 (Empty class instances have different equal testing result among GCC versions)
    
            PR c++/92384
            * function.c (assign_parm_setup_block, assign_parm_setup_stack): Don't
            copy TYPE_EMPTY_P arguments from data->entry_parm to data->stack_parm
            slot.
            (assign_parms): For TREE_ADDRESSABLE parms with TYPE_EMPTY_P type
            force creation of a unique data.stack_parm slot.
    
            * g++.dg/torture/pr92384.C: New test.
    
    From-SVN: r277989

commit 1f3b59d4c6e375cb9941aa47258bb393dc38ea3a
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Fri Nov 8 20:00:02 2019 +0100

    backport: re PR c++/92343 ([[likely]]/[[unlikely]] prevent method from being a constant expression)
    
            Backported from mainline
            2019-11-05  Jakub Jelinek  <jakub@redhat.com>
    
            PR c++/92343
            * constexpr.c (potential_constant_expression_1): Return true rather
            than false for PREDICT_EXPR.
    
            * g++.dg/cpp2a/attr-likely6.C: New test.
    
    From-SVN: r277988

commit 299a554aa4ae968f2a1baa12dbaafece1f3e6b31
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Fri Nov 8 19:59:14 2019 +0100

    backport: re PR preprocessor/92296 (internal compiler error: Segmentation fault  #pragma push_macro("__LINE__"))
    
            Backported from mainline
            2019-10-31  Jakub Jelinek  <jakub@redhat.com>
    
            PR preprocessor/92296
            * internal.h (struct def_pragma_macro): Add is_builtin bitfield.
            (_cpp_restore_special_builtin): Declare.
            * init.c (_cpp_restore_special_builtin): New function.
            * directives.c (do_pragma_push_macro): For NT_BUILTIN_MACRO
            set is_builtin and don't try to grab definition.
            (cpp_pop_definition): Use _cpp_restore_special_builtin to restore
            builtin macros.
    
            * c-c++-common/cpp/pr92296-1.c: New test.
            * c-c++-common/cpp/pr92296-2.c: New test.
    
    From-SVN: r277987

commit 66339b297149824c44265b3655aed34cc9ba6ed2
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Fri Nov 8 19:58:14 2019 +0100

    backport: re PR middle-end/92231 (ICE in gimple_fold_stmt_to_constant_1)
    
            Backported from mainline
            2019-10-31  Jakub Jelinek  <jakub@redhat.com>
    
            PR middle-end/92231
            * tree.h (fndecl_built_in_p): Use fndecl_built_in_p instead of
            DECL_BUILT_IN in comment.  Remove redundant ()s around return
            argument.
            * tree.c (free_lang_data_in_decl): Check if var is FUNCTION_DECL
            before calling fndecl_built_in_p.
            * gimple-fold.c (gimple_fold_stmt_to_constant_1): Check if
            TREE_OPERAND (fn, 0) is a FUNCTION_DECL before calling
            fndecl_built_in_p on it.
    
            * lto-lang.c (handle_const_attribute): Don't call fndecl_built_in_p
            on *node that is not FUNCTION_DECL.
    
            * gcc.c-torture/compile/pr92231.c: New test.
    
    From-SVN: r277986

commit 8af68eba76106d3a5db4490a2510cadf566a8d41
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Fri Nov 8 19:56:42 2019 +0100

    backport: re PR c++/90947 (Simple lookup table of array of strings is miscompiled)
    
            Backported from mainline
            2019-10-31  Jakub Jelinek  <jakub@redhat.com>
    
            PR c++/90947
            * tree.h (type_initializer_zero_p): Remove.
            * tree.c (type_initializer_zero_p): Remove.
    
            * cp-tree.h (type_initializer_zero_p): Declare.
            * decl.c (reshape_init_array_1): Formatting fix.
            * tree.c (type_initializer_zero_p): New function.  Moved from
            ../tree.c, use next_initializable_field, formatting fix.  Return
            false for TYPE_NON_AGGREGATE_CLASS types.
    
    From-SVN: r277985

commit 357a65e1ce91c160e756c2c6a8f8edae3091d6ae
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Fri Nov 8 19:54:39 2019 +0100

    backport: install.texi (--enable-offload-targets): Fix up a typo in the example, use actual names of supported offload targets.
    
            Backported from mainline
            2019-10-29  Jakub Jelinek  <jakub@redhat.com>
    
            * doc/install.texi (--enable-offload-targets): Fix up a typo in the
            example, use actual names of supported offload targets.
    
    From-SVN: r277984

commit 3030fe1ca879ebf0181a8e2888d85c28f24438f4
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Fri Nov 8 19:54:15 2019 +0100

    backport: locales.c (iso_3166): Add missing comma after "United-States".
    
            Backported from mainline
            2019-10-27  Jakub Jelinek  <jakub@redhat.com>
    
            * locales.c (iso_3166): Add missing comma after "United-States".
    
    From-SVN: r277983

commit 6bf274fc77bec150a300b7a439b3a90a4507b502
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Fri Nov 8 19:53:46 2019 +0100

    backport: re PR tree-optimization/85887 (Missing DW_TAG_lexical_block PC range)
    
            Backported from mainline
            2019-10-22  Jakub Jelinek  <jakub@redhat.com>
    
            PR tree-optimization/85887
            * decl.c (expand_static_init): Drop ECF_LEAF from __cxa_guard_acquire
            and __cxa_guard_release.
    
    From-SVN: r277982

commit ce9568e9e9cf6094be30e748821421e703754ffc
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Fri Nov 8 19:53:18 2019 +0100

    backport: re PR sanitizer/92154 (new glibc breaks arm bootstrap due to libsanitizer)
    
            Backported from mainline
            2019-10-22  Tamar Christina  <tamar.christina@arm.com>
    
            PR sanitizer/92154
            * sanitizer_common/sanitizer_platform_limits_posix.cc:
            Cherry-pick compiler-rt revision r375220.
    
    From-SVN: r277981

commit 9d4f74f3c3ae9ebf305495177ae96b2173cfabcc
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Fri Nov 8 19:52:44 2019 +0100

    backport: re PR c++/92015 (internal compiler error: in cxx_eval_array_reference, at cp/constexpr.c:2568)
    
            Backported from mainline
            2019-10-21  Jakub Jelinek  <jakub@redhat.com>
    
            PR c++/92015
            * constexpr.c (cxx_eval_component_reference, cxx_eval_bit_field_ref):
            Use STRIP_ANY_LOCATION_WRAPPER on CONSTRUCTOR elts.
    
            * g++.dg/cpp0x/constexpr-92015.C: New test.
    
    From-SVN: r277980

commit 92b5b8384954ff9c52c1c76d185e09276aeea49b
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Fri Nov 8 12:45:45 2019 +0000

    overflow-1.c: Add -fno-pie to the options.
    
            * gcc.target/sparc/overflow-1.c: Add -fno-pie to the options.
            * gcc.target/sparc/overflow-2.c: Likewise.
    
    From-SVN: r277970

commit 6bf2990842388101897b6f465524cbc295ee8cf9
Author: Eric Botcazou <ebotcazou@gcc.gnu.org>
Date:   Fri Nov 8 12:33:48 2019 +0000

    re PR target/92095 (internal error with -O1 -mcpu=niagara2 -fPIE)
    
            PR target/92095
            * config/sparc/sparc-protos.h (output_load_pcrel_sym): Declare.
            * config/sparc/sparc.c (sparc_cannot_force_const_mem): Revert latest
            change.
            (got_helper_needed): New static variable.
            (output_load_pcrel_sym): New function.
            (get_pc_thunk_name): Remove after inlining...
            (load_got_register): ...here.  Rework the initialization of the GOT
            register and of the GOT helper.
            (save_local_or_in_reg_p): Test the REGNO of the GOT register.
            (sparc_file_end): Test got_helper_needed to decide whether the GOT
            helper must be emitted.  Use output_asm_insn instead of fprintf.
            (sparc_init_pic_reg): In PIC mode, always initialize the PIC register
            if optimization is enabled.
            * config/sparc/sparc.md (load_pcrel_sym<P:mode>): Emit the assembly
            by calling output_load_pcrel_sym.
    
    From-SVN: r277967

commit 19bb3f77acdb64ad7dfac19688f240fa2a973575
Author: Tobias Burnus <tobias@codesourcery.com>
Date:   Fri Nov 8 10:25:40 2019 +0100

    Fortran] PR91253 fix continuation-line handling with -pre_include
    
            Backport from mainline
            2019-11-08  Tobias Burnus  <tobias@codesourcery.com
    
            PR fortran/91253
            * scanner.c (skip_fixed_comments): Move comment
            lines to next if block.
            (gfc_next_char_literal): Fix continue_line setting.
            (get_file): Remove bogus ATTRIBUTE_UNUSED.
    
    From-SVN: r277957

commit f2b3f3219694bb6cbea9ef66cdb7ff2b7b7f4ff3
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Nov 8 00:16:13 2019 +0000

    Daily bump.
    
    From-SVN: r277939

commit 1d464cadc9621f946853e07049a464323f2a2a68
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Nov 7 00:16:16 2019 +0000

    Daily bump.
    
    From-SVN: r277898

commit f06b51b0e29f14b3752daa90a899d99c15205813
Author: Ilya Leoshkevich <iii@linux.ibm.com>
Date:   Wed Nov 6 10:10:04 2019 +0000

    S/390: Fix failing RTL check in s390_canonicalize_comparison
    
    The new sigfpe-eh.c fails with
    
        internal compiler error: RTL check: expected elt 0 type 'e' or 'u', have 'w' (rtx const_int)
    
    This is most likely due to a typo: XEXP (*op1, 0) was used, when
    XEXP (*op0, 1) was intended.  This did not cause any user-visible
    problems, because reversed_comparison_code_parts ignores the
    respective argument, and the release compiler is built without RTL
    checks.
    
    gcc/ChangeLog:
    
    2019-11-06  Ilya Leoshkevich  <iii@linux.ibm.com>
    
            * config/s390/s390.c (s390_canonicalize_comparison): Use XEXP
            (*op0, 1) instead of XEXP (*op1, 0).
    
    gcc/testsuite/ChangeLog:
    
    2019-11-06  Ilya Leoshkevich  <iii@linux.ibm.com>
    
            * gcc.target/s390/sigfpe-eh.c: New test.
    
    From-SVN: r277874

commit 814e123e96cc453b1e5eaf82d6de550c59d71651
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Nov 6 00:16:14 2019 +0000

    Daily bump.
    
    From-SVN: r277869

commit 12baeae36dad3c50bdd28bdc3eceb9726948df2e
Author: Segher Boessenkool <segher@kernel.crashing.org>
Date:   Tue Nov 5 18:34:23 2019 +0100

    backport "rs6000: Implement [u]avg<mode>3_ceil"
    
            * config/rs6000/altivec.md (altivec_vavgu<VI_char>): Rename to...
            (uavg<mode>3_ceil): ... This.
            (altivec_vavgs<VI_char>): Rename to...
            (avg<mode>3_ceil): ... This.
            * config/rs6000/rs6000-builtin.def (VAVGUB, VAVGSB, VAVGUH, VAVGSH,
            VAVGUW, VAVGSW): Adjust.
    
    From-SVN: r277857

commit 738aa869a1bc7628b8bd882dedc6967052c4d234
Author: Segher Boessenkool <segher@kernel.crashing.org>
Date:   Tue Nov 5 18:17:03 2019 +0100

    backport for PR91289
    
            Backport from trunk
            2019-10-26  Segher Boessenkool  <segher@kernel.crashing.org>
    
            PR target/91289
            * config/rs6000/rs6000.c (rs6000_emit_allocate_stack): Don't add an
            immediate to r0; use r11 instead.  Save and restore r11 to r0 around
            this.
    
    From-SVN: r277855

commit 53fe1c6da33e296e8287e8deadeaeb4e7f880586
Author: Andreas Krebbel <krebbel@linux.ibm.com>
Date:   Tue Nov 5 15:27:59 2019 +0000

    IBM Z: gen-vect-26/28: Vectorizing without peeling is ok for Z
    
    These tests check if loop peeling has been applied to avoid
    having to vectorize unaligned loops.  On Z we do not have any
    alignment requirements for vectorization so we also don't need want
    the loop peeling here.
    
    2019-11-05  Andreas Krebbel  <krebbel@linux.ibm.com>
    
            Backport from mainline
            2019-11-05  Andreas Krebbel  <krebbel@linux.ibm.com>
    
            * gcc.dg/tree-ssa/gen-vect-26.c: Disable loop peeling check for
            IBM Z.
            * gcc.dg/tree-ssa/gen-vect-28.c: Likewise.
    
    From-SVN: r277844

commit 7c182499255f6b87f58ba19cec8c98ef975948aa
Author: Andreas Krebbel <krebbel@linux.ibm.com>
Date:   Tue Nov 5 15:26:19 2019 +0000

    IBM Z: gen-vect-11/32: Set min-vect-loop-bound param back to default
    
    In the Z backend we still set min-vect-loop-bound to 2 to work around
    corner cases where awkward epilogue code gets generated in the
    vectorizer.  This has a particular bad impact when vectorizing loops
    with a low iteration count.  Due to this we do not vectorize the loop
    in gen-vect-11/32 - what actually is a pity.
    
    The patch sets min-vect-loop-bound back to the default value of 0 in
    order to enable vectorization.
    
    2019-11-05  Andreas Krebbel  <krebbel@linux.ibm.com>
    
            Backport from mainline
            2019-11-05  Andreas Krebbel  <krebbel@linux.ibm.com>
    
            * gcc.dg/tree-ssa/gen-vect-11.c: Add --param min-vect-loop-bound=0
            for IBM Z.
            * gcc.dg/tree-ssa/gen-vect-11.c: Likewise.
    
    From-SVN: r277843

commit 21deaf29442d58ce65a9e29c1cb21beaebdb4d61
Author: Andreas Krebbel <krebbel@linux.ibm.com>
Date:   Tue Nov 5 15:25:26 2019 +0000

    IBM Z: Fix testsuite useable_hw check
    
    This fixes various issues with the useable_hw check in s390.exp.  The
    check is supposed to verify whether a testcase can be run on the
    current hardware.
    
    - the test never returned true for -m31 because vzero is not available
      in ESA mode and -m31 defaults to -mesa
    - the missing v0 clobber on the vzero instruction made the check fail
      if the stack pointer got saved in f0
    - the lcbb instruction used for checking whether we are on a z13
      also requires vx.  Replace it with an instruction from the generic
      instruction set extensions.
    - no support for z14 and z15 so far
    
    gcc/testsuite/ChangeLog:
    
    2019-11-05  Andreas Krebbel  <krebbel@linux.ibm.com>
    
            Backport from mainline
            2019-11-05  Andreas Krebbel  <krebbel@linux.ibm.com>
    
            * gcc.target/s390/s390.exp
            (check_effective_target_s390_useable_hw): Add inline asm for z14
            and z15. Replace instruction for z13 with lochiz. Add register
            clobbers. Check also for __zarch__ when doing the __VX__ test.
    
    From-SVN: r277842

commit 05a649bbef409c1461ca1e17d6a23b9e290bac3e
Author: Andreas Krebbel <krebbel@linux.ibm.com>
Date:   Tue Nov 5 15:24:43 2019 +0000

    IBM Z: Use tree_fits_uhwi_p in vector_alignment hook
    
    This fixes an ICE in gcc.dg/attr-vector_size.c testcase.
    
    gcc/ChangeLog:
    
    2019-11-05  Andreas Krebbel  <krebbel@linux.ibm.com>
    
            Backport from mainline
            2019-11-05  Andreas Krebbel  <krebbel@linux.ibm.com>
    
            * config/s390/s390.c (s390_vector_alignment): Check if the value
            fits into uhwi before using it.
    
    From-SVN: r277841

commit 42b414a54bc0e718352b53bfcb6584229f57a4b6
Author: Tobias Burnus <tobias@codesourcery.com>
Date:   Tue Nov 5 14:28:07 2019 +0000

    PR 92208 + PR 92277 – GCC 9 follow-up fix
    
            PR fortran/92208
            Backport from mainline
            2019-10-31  Tobias Burnus  <tobias@codesourcery.com>
    
            PR fortran/92277
            * trans-expr.c (gfc_conv_gfc_desc_to_cfi_desc): Fix DECL_ARTIFICIAL
            checking.
    
    From-SVN: r277840

commit 67bad4507fa7b17aac305bf8f4a32834f60803b7
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Nov 5 00:16:25 2019 +0000

    Daily bump.
    
    From-SVN: r277809

commit 8f97367f1bd59bbd8c18cb837a2e686755074a45
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Mon Nov 4 23:06:21 2019 +0000

    [objective-c/c++, testsuite] Fix stubify tests for -fnext-runtime.
    
    Fixed to work for x86 as well as powerpc (use the final assembler output
    instead of the jump rtl which varies between X86 and PPC).  Amended the
    options to reflect this change.
    
    gcc/testsuite/
    
            Backport from mainline.
            2019-06-20  Iain Sandoe  <iain@sandoe.co.uk>
    
            * obj-c++.dg/stubify-1.mm: Adjust options and scan-asm checks.
            * obj-c++.dg/stubify-2.mm: Likewise.
            * objc.dg/stubify-1.m: Likewise.
            * objc.dg/stubify-2.m: Likewise.
    
    From-SVN: r277800

commit f52b17ba5d04136268b61685b45cd68eb0cf709c
Author: Tobias Burnus <tobias@codesourcery.com>
Date:   Mon Nov 4 15:07:19 2019 +0000

    Fortran] PR 92208 don't use function-result dummy variable as actual argument
    
            gcc/fortran/
            Backported from mainline
            2019-10-30  Tobias Burnus  <tobias@codesourcery.com>
    
            PR fortran/92208
            * trans-array.c (gfc_conv_array_parameter): Only copy
            string-length backend_decl if expression is not a function.
    
            gcc/testsuite/
            Backported from mainline
            2019-10-30  Tobias Burnus  <tobias@codesourcery.com>
    
            PR fortran/92208
            * gfortran.dg/pr92208.f90: New.
    
    From-SVN: r277783

commit 525c4e8d3ae4e49657d1253f448fb9f2293558f8
Author: Tobias Burnus <tobias@codesourcery.com>
Date:   Mon Nov 4 14:14:43 2019 +0000

    Backport Fortran BIND(C) fixes
    
            gcc/fortran/
            Backport from mainline
            2019-10-31  Tobias Burnus  <tobias@codesourcery.com>
    
            PR fortran/92284.
            * trans-expr.c (gfc_conv_gfc_desc_to_cfi_desc): Free CFI descriptor
            at the end; partial revised revert of Rev. 277502.
    
    
            gcc/testsuite/
            Backport from mainline
            2019-10-31  Jakub Jelinek  <jakub@redhat.com>
    
            PR fortran/92284
            * gfortran.dg/bind_c_array_params_3_aux.c: Include
            ../../../libgfortran/ISO_Fortran_binding.h rather than
            ISO_Fortran_binding.h.
    
            2019-10-31  Tobias Burnus  <tobias@codesourcery.com>
    
            PR fortran/92284
            * gfortran.dg/bind-c-intent-out.f90: Update expected dump;
            extend comment.
            * gfortran.dg/bind_c_array_params_3.f90: New.
            * gfortran.dg/bind_c_array_params_3_aux.c: New.
    
            2019-10-31  Tobias Burnus  <tobias@codesourcery.com>
    
            PR fortran/92277
            * fortran.dg/pr92277.f90: New.
    
    From-SVN: r277781

commit 3e40a2cfaabe3a7ad4a1a444d4353e5916ac4b89
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Nov 4 00:16:13 2019 +0000

    Daily bump.
    
    From-SVN: r277763

commit 259019616ff3ea20902ef4d6d2fa0041fb37c6fa
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Nov 3 00:16:12 2019 +0000

    Daily bump.
    
    From-SVN: r277748

commit 8f6a67a361d921053dab778e2d3691d3053a7e89
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Nov 2 00:16:19 2019 +0000

    Daily bump.
    
    From-SVN: r277739

commit 4ce50f89f3a474a898cf1257044a80b077b6eded
Author: John David Anglin <danglin@gcc.gnu.org>
Date:   Fri Nov 1 23:35:06 2019 +0000

    backport: pa.c (pa_output_call): Remove 64-bit sibcall sequence.
    
            Backport from mainline
            2019-10-03  John David Anglin  <danglin@gcc.gnu.org>
    
            * config/pa/pa.c (pa_output_call): Remove 64-bit sibcall sequence.
            (pa_attr_length_call): Adjust length for 64-bit plabel sequence.
    
    From-SVN: r277736

commit e16cf252626395ec52e19d192fbd7a00ba238772
Author: John David Anglin <danglin@gcc.gnu.org>
Date:   Fri Nov 1 23:24:54 2019 +0000

    backport: pa.h (MAX_PCREL17F_OFFSET): Adjust.
    
            Backport from mainline
            2019-10-03  John David Anglin  <danglin@gcc.gnu.org>
    
            * config/pa/pa.h (MAX_PCREL17F_OFFSET): Adjust.
    
    From-SVN: r277731

commit 1afcbbe102a058e33c1f752e47b4a0b382a9112e
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Nov 1 00:16:12 2019 +0000

    Daily bump.
    
    From-SVN: r277702

commit 9e21e650da2898f430f6a91e96d8811b6fe48654
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Oct 31 00:16:20 2019 +0000

    Daily bump.
    
    From-SVN: r277652

commit 155de58689f0011c68f492115ca45ef6be8207a8
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Wed Oct 30 20:54:16 2019 +0000

    [testsuite] Make the Wnonnull test independent of system headers.
    
    This backports two patches that fix failure of Wnonnull test on some targets.
    
    277280 To avoid the result of this test depending on the implementation of
    the system 'string.h', provide prototypes for the two functions used
    in the test.  This generalises the fix from 277202.
    
    277202 was the initial fix for Wnonnull on Darwin.
    
    gcc/testsuite/
    
    2019-10-30  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-10-22  Iain Sandoe  <iain@sandoe.co.uk>
    
            * gcc.dg/Wnonnull.c: Provide prototypes for strlen and memcpy.
            Use __SIZE_TYPE__ instead of size_t.
    
            Backport from mainline.
            2019-10-19  Iain Sandoe  <iain@sandoe.co.uk>
    
            * gcc.dg/Wnonnull.c: Add attributed function declarations for
            memcpy and strlen for Darwin.
    
    From-SVN: r277647

commit 2aebeccbeb315271d6f363629159721c336d46dc
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Wed Oct 30 20:48:44 2019 +0000

    [Darwin, machopic] Back out part of PR71767 fix.
    
    This is part of making our codegen match what the system tools produce.
    
    We applied a conservative, but fairly large, hammer to fix 71767.
    However, ideally, we want minimise the number of symbols visible to
    ld64 and to match the cases emitted by clang (since that's what ld64
    is expecting). Now we've improved the handling of indirections, we
    can make the indirection symbols local when they are in the regular
    non-lazy symbol pointers section. We will continue to make any
    indirections in the data section visible (since right now we have no
    way to track if a given symbol follows a weak global).
    This change makes no difference to handling of labels for constants
    (to be revised in a future patch).
    
    There's a mechanical change to a number of tests (allowing 'l' or 'L'
    as the indirection symbol prefix).
    
    gcc/
    
    2019-10-30  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline
            2019-10-13  Iain Sandoe  <iain@sandoe.co.uk>
    
            * config/darwin.c (machopic_indirection_name): Rework the
            function to emit linker-visible symbols only for indirections
            in the data section.  Clean up the code and update comments.
    
    gcc/testsuite/
    
    2019-10-30  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-10-13  Iain Sandoe  <iain@sandoe.co.uk>
    
            * gcc.target/i386/indirect-thunk-1.c: Allow 'l' or 'L' in
            indirection label prefix, for Darwin.
            * gcc.target/i386/indirect-thunk-2.c: Likewise.
            * gcc.target/i386/indirect-thunk-3.c: Likewise.
            * gcc.target/i386/indirect-thunk-4.c: Likewise.
            * gcc.target/i386/indirect-thunk-attr-1.c: Likewise.
            * gcc.target/i386/indirect-thunk-attr-2.c: Likewise.
            * gcc.target/i386/indirect-thunk-attr-3.c: Likewise.
            * gcc.target/i386/indirect-thunk-attr-4.c: Likewise.
            * gcc.target/i386/indirect-thunk-attr-5.c: Likewise.
            * gcc.target/i386/indirect-thunk-attr-6.c: Likewise.
            * gcc.target/i386/indirect-thunk-extern-1.c: Likewise.
            * gcc.target/i386/indirect-thunk-extern-2.c: Likewise.
            * gcc.target/i386/indirect-thunk-extern-3.c: Likewise.
            * gcc.target/i386/indirect-thunk-extern-4.c: Likewise.
            * gcc.target/i386/indirect-thunk-inline-1.c: Likewise.
            * gcc.target/i386/indirect-thunk-inline-2.c: Likewise.
            * gcc.target/i386/indirect-thunk-inline-3.c: Likewise.
            * gcc.target/i386/indirect-thunk-inline-4.c: Likewise.
            * gcc.target/i386/pr32219-2.c: Likewise.
            * gcc.target/i386/pr32219-3.c: Likewise.
            * gcc.target/i386/pr32219-4.c: Likewise.
            * gcc.target/i386/pr32219-7.c: Likewise.
            * gcc.target/i386/pr32219-8.c: Likewise.
            * gcc.target/i386/ret-thunk-14.c: Likewise.
            * gcc.target/i386/ret-thunk-15.c: Likewise.
            * gcc.target/i386/ret-thunk-9.c: Likewise.
    
    From-SVN: r277646

commit 0811bd225540cbcca568f6da1bb89407fcad7005
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Wed Oct 30 20:42:56 2019 +0000

    [Darwin] Fix Objective-C NeXT ABI version check diagnostics.
    
    This fixes build errors when used with newer GCC and corrects a mistake
    in the checking of ABI versions.
    
    276768 We were missing a check for the case that user's ABI was > 2 and the
    codegen was for 64 bit.
    
    276635 Fix some format-related build warnings.
    
    This fixes two error messages to avoid punctuation and contracted
    negations.
    
    2019-10-30  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline
            2019-10-09  Iain Sandoe  <iain@sandoe.co.uk>
    
            * config/darwin.c (darwin_override_options): Make the check for
            Objective-C ABI version more specific for 64bit code.
    
            Backport from mainline
            2019-10-06  Iain Sandoe  <iain@sandoe.co.uk>
    
            * config/darwin.c (darwin_override_options): Adjust objective-c
            ABI version error messages to avoid punctuation and contracted
            negations.
    
    From-SVN: r277645

commit bad511268259f92e226153073988fe27c73178e8
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Wed Oct 30 20:38:47 2019 +0000

    [Darwin] Some TLC for older Darwin versions.
    
    This is part 3 of build fixes for older Darwin versions (and will also
    fix testsuite complaints about linkage with objects that are built for
    an newer OS version than is being built, when used with a modern linker).
    
    The library handling and some of the options for creating the crts for
    the older PPC Darwin versions had bit-rotted somewhat. This adjusts the
    build criteria for the crts to avoid newer ld64 versions warnings about
    mismatches in build and object versions.
    
    Added to some of the comments that it is documented why the specs are as
    they are.
    
    gcc/
    
    2019-10-30  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline
            2019-07-03  Iain Sandoe  <iain@sandoe.co.uk>
    
            * config/darwin.h (REAL_LIBGCC_SPEC): Adjust for earlier Darwin.
            (STARTFILE_SPEC): Split crt3 into a separate spec.
            (DARWIN_EXTRA_SPECS): Add crt2 and crt3 spec.
            (DARWIN_CRT2_SPEC): New.
            (DARWIN_CRT3_SPEC): New.
            (MIN_LD64_OMIT_STUBS): Revise to 62.1.
            * config/rs6000/darwin.h (DARWIN_CRT2_SPEC): Revise conditions.
            (DARWIN_CRT3_SPEC): New.
    
    libgcc/
    
    2019-10-30  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-07-03  Iain Sandoe  <iain@sandoe.co.uk>
    
            * config.host (powerpc-*-darwin*,powerpc64-*-darwin*): Revise crt
            list.
            * config/rs6000/t-darwin: Build crt3_2 for older systems.  Revise
            mmacosx-version-min for crts to run across all system versions.
            * config/rs6000/t-darwin64 (LIB2ADD): Remove.
            * config/t-darwin: Revise mmacosx-version-min for crts to run across
            system versions >= 10.4.
    
    From-SVN: r277644

commit 77908128e4846fce2e230a2c26b50e941d8bfa4f
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Wed Oct 30 20:25:33 2019 +0000

    [Darwin, PPC] Move the out of line register save/restore to an endfile.
    
    Part 2 of fixes to build and link conditions for older Darwin versions.
    
    We have been including these endfiles in libgcc, which means that we have to
    append -lgcc even when using shared libgcc.  In preparation for revision of
    libgcc split this into an endfile.  Build the new version.
    
    2019-10-30  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-06-25  Iain Sandoe  <iain@sandoe.co.uk>
    
            * config.host: Add libef_ppc.a to the extra files for powerpc-darwin.
            * config/rs6000/t-darwin: (PPC_ENDFILE_SRC, PPC_ENDFILE_OBJS): New.
            Build objects for the out of line save/restore register functions
            so that they can be used for any supported Darwin version.
            * config/t-darwin: Default the build Darwin version to Darwin8
            (MacOS 10.4).
    
    From-SVN: r277642

commit df5e162b4bb27b5c8605a9527d27f034397aac38
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Wed Oct 30 20:12:17 2019 +0000

    [Darwin, PPC] Move the out of line register save/restore to an endfile.
    
    Part 1 of fixes to build and link conditions for older Darwin versions.
    
    We have been including these endfiles in libgcc, which means that we have to
    append -lgcc even when using shared libgcc.  In preparation for revision of
    libgcc split this into an endfile.
    
    2019-10-30  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline
            2019-06-27  Iain Sandoe  <iain@sandoe.co.uk>
    
            * config/rs6000/darwin.h (ENDFILE_SPEC): Correct whitespace in the
            spec.
    
            Backport from mainline
            2019-06-25  Iain Sandoe  <iain@sandoe.co.uk>
    
            * config/rs6000/darwin.h (ENDFILE_SPEC): New.
    
    From-SVN: r277641

commit 3e57fa74b1ee2505da2e37fce2660e02e88d4c3d
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Wed Oct 30 20:05:32 2019 +0000

    [Darwin] The need for FDE symbols is dependent on linker used, not OS rev.
    
    For very old toolchains, the compiler generated extra symbols that mark the
    start of each FDE.  We no longer need this (since xcode 3 era) - so, for
    compatibility with newer linkers, omit this when it is not required.
    
    Since we have detection of the linker version, we can use that directly to
    determine if support is needed.
    
    2019-10-30  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline
            2019-06-18  Iain Sandoe  <iain@sandoe.co.uk>
    
            * config/darwin.c (darwin_emit_unwind_label): New default to false.
            (darwin_override_options): Set darwin_emit_unwind_label as needed.
    
    From-SVN: r277640

commit 728b08c0fc3c819bfd8d765e1ade1ab3009fb092
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Wed Oct 30 19:56:41 2019 +0000

    [Darwin] Use of symbol stubs should depend on the linker in use.
    
    This is a combination of two patches that prevents a bootstrap fail when
    a modern assembler/linker pair are used that don't support the JBSR reloc
    (but don't require it for long calls).
    
    272356 The need for picsym stubs is dependent on linker used, not OS rev.
    
    For very old toolchains, the compiler generated pic symbol stubs that
    provide the necessary indirections. We no longer need this (since xcode
    3 era) and it's more efficient for the linker to make one stub when it
    knows a symbol is needed that for us to emit them speculatively in every
    object.
    
    Our current codegen is making the assumption that a specific OS version
    uses a specific linker version - and therefore the presence of support
    could be based on the target OS rev. Of course, that's way too simplistic
    (most likely bogus for cross-toolchains) and we want to make things explict.
    
    Since we have detection of the linker version, we can use that directly
    (A config test for support for stub-less linking might also be feasible
    but much more involved).
    
    Finally, should the user wish to generate code that caters for export to
    use in an environment with an older toolchain, the generation of stubs
    can be forced from the command line.
    
    In addition to the points above, branch islanding and a long branch opt
    for PowerPC Darwin has become conflated with the emission of these stubs
    (which is confusing, and will be rectified in a following patch).
    
    274397 There is no need to distinguish PIC/non-PIC symbol stubs.
    
    So we can use a single flag for both.
    
    2019-10-30  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline
            2019-08-13 Iain Sandoe <iain@sandoe.co.uk>
    
            * config/darwin.c (machopic_indirect_call_target): Rename symbol stub
            flag.
            (darwin_override_options): Likewise.
            * config/darwin.h: Likewise.
            * config/darwin.opt: Likewise.
            * config/i386/i386.c (output_pic_addr_const): Likewise.
            * config/rs6000/darwin.h: Likewise.
            * config/rs6000/rs6000.c (rs6000_call_darwin_1): Likewise.
            * config/i386/darwin.h (TARGET_MACHO_PICSYM_STUBS): Rename to ...
            ... this TARGET_MACHO_SYMBOL_STUBS.
            (FUNCTION_PROFILER):Likewise.
            * config/i386/i386.h: Likewise.
    
            Backport from mainline
            2019-06-16  Iain Sandoe  <iain@sandoe.co.uk>
    
            * config/darwin.c (machopic_indirect_call_target): Use renamed
            darwin_picsymbol_stubs to decide on output.
            (darwin_override_options): Handle darwin_picsymbol_stubs.
            * config/darwin.h (MIN_LD64_OMIT_STUBS): New.
            (LD64_VERSION): Revise default.
            * config/darwin.opt: (mpic-symbol-stubs): New option.
            (darwin_picsymbol_stubs): New variable.
            * config/i386/darwin.h (TARGET_MACHO_BRANCH_ISLANDS):
            rename to TARGET_MACHO_PICSYM_STUBS.
            * config/i386/i386.c (output_pic_addr_const): Likewise.
            * config/i386/i386.h Likewise.
            * config/rs6000/darwin.h: Likewise.
            * config/rs6000/rs6000.c (rs6000_call_darwin_1): Use renamed
            darwin_picsymbol_stubs.
    
    From-SVN: r277638

commit 77b90e2fecdb518816d0dffacb8167978ed27973
Author: Dragan Mladjenovic <dmladjenovic@wavecomp.com>
Date:   Wed Oct 30 15:12:05 2019 +0000

    Backport fix for PR89245
    
    gcc/ChangeLog:
    
    2019-10-30  Dragan Mladjenovic  <dmladjenovic@wavecomp.com>
    
            Backport from mainline
            2019-07-09  Dragan Mladjenovic  <dmladjenovic@wavecomp.com>
    
            * cfgcleanup.c (old_insns_match_p): Check if used hard regs set is equal
            for both call instructions.
    
    gcc/testsuite/ChangeLog:
    
    2019-10-30  Dragan Mladjenovic  <dmladjenovic@wavecomp.com>
    
            Backport from mainline
            2019-07-09  Dragan Mladjenovic  <dmladjenovic@wavecomp.com>
    
            * gcc.target/mips/cfgcleanup-jalr1.c: New test.
            * gcc.target/mips/cfgcleanup-jalr2.c: New test.
            * gcc.target/mips/cfgcleanup-jalr3.c: New test.
    
    From-SVN: r277625

commit 9ac60f77d2f96cadacd8787de5cd5381e0252239
Author: Thomas Schwinge <thomas@codesourcery.com>
Date:   Wed Oct 30 12:51:15 2019 +0100

    [LIBPHOBOS] Fix multi-lib RUNTESTFLAGS handling
    
    Testing libphobos fails for multi-lib configs:
    
    $ make check-target-libphobos RUNTESTFLAGS="--target_board=unix\{-m32,\}"
    
    fails for every 32bit execution, because the host libgcc_s.so is used which
    is not the correct version:
    
    spawn [open ...]
    ./test_aa.exe: /lib/i386-linux-gnu/libgcc_s.so.1: version `GCC_7.0.0' not found (required by ./test_aa.exe)
    FAIL: libphobos.aa/test_aa.d execution test
    
    This can be fixed by adding a few lines from libstdc++/testsuite/lib/libstdc++.exp
    to libphobos/testsuite/lib/libphobos.exp
    
    Backport trunk r275332:
    
            libphobos/
            2019-09-03  Bernd Edlinger  <bernd.edlinger@hotmail.de>
    
            * testsuite/lib/libphobos.exp (libphobos_init): Add multi-lib libgcc
            dirs to the ld_library_path var.
    
    From-SVN: r277611

commit e445df93aeaf5cf18efc23e6d1fb053bfea715c3
Author: Thomas Schwinge <thomas@codesourcery.com>
Date:   Wed Oct 30 11:50:58 2019 +0100

    Avoid '-Wmaybe-uninitialized' diagnostic in 'gcc/dwarf2out.c'
    
    With '--enable-checking=yes,extra,rtl':
    
        In file included from [...]/source-gcc/gcc/coretypes.h:433,
                         from [...]/source-gcc/gcc/dwarf2out.c:60:
        [...]/source-gcc/gcc/machmode.h: In function 'dw_loc_descr_node* mem_loc_descriptor(rtx, machine_mode, machine_mode, var_init_status)':
        [...]/source-gcc/gcc/machmode.h:520:42: error: 'int_mode' may be used uninitialized in this function [-Werror=maybe-uninitialized]
          520 |    ? mode_size_inline (mode) : mode_size[mode]);
              |                                          ^~~~
        [...]/source-gcc/gcc/dwarf2out.c:15464:19: note: 'int_mode' was declared here
        15464 |   scalar_int_mode int_mode, inner_mode, op1_mode;
              |                   ^~~~~~~~
        cc1plus: all warnings being treated as errors
        make[3]: *** [dwarf2out.o] Error 1
    
    Backport trunk r270903.
    
    2019-05-06  Richard Biener  <rguenther@suse.de>
    
            * dwarf2out.c (mem_loc_descriptor): Initialize int_mode.
    
    From-SVN: r277608

commit f26b1e14a6c3aa8ed26a0d4dec4bc0663035967e
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Oct 30 00:16:56 2019 +0000

    Daily bump.
    
    From-SVN: r277598

commit 9149decc3e9778aefe287f3b64e085989d60e98b
Author: Jakub Jelinek <jakub@gcc.gnu.org>
Date:   Tue Oct 29 22:09:21 2019 +0100

    re PR c++/92201 (ICE: ‘verify_gimple’ failed with -std=c++2a)
    
            PR c++/92201
            * cp-gimplify.c (cp_gimplify_expr): If gimplify_to_rvalue changes the
            function pointer type, re-add cast to the original one.
    
            * g++.dg/other/pr92201.C: New test.
    
    From-SVN: r277594

commit 9c872d33137d101cd8d5da1d304bf53b5905e8ec
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Oct 29 00:16:47 2019 +0000

    Daily bump.
    
    From-SVN: r277549

commit 160f1001bb33e7d30adfbdaf935990391c1c28c8
Author: Paul Thomas <pault@gcc.gnu.org>
Date:   Mon Oct 28 18:28:48 2019 +0000

    re PR fortran/91926 (assumed rank optional)
    
    2019-10-28  Paul Thomas  <pault@gcc.gnu.org>
    
            Backport from trunk
            PR fortran/91926
            * trans-expr.c (gfc_conv_gfc_desc_to_cfi_desc): Correct the
            assignment of the attribute field to account correctly for an
            assumed shape dummy. Assign separately to the gfc and cfi
            descriptors since the atribute can be different. Add branch to
            correctly handle missing optional dummies.
    
    2019-10-28  Paul Thomas  <pault@gcc.gnu.org>
    
            Backport from trunk
            PR fortran/91926
            * gfortran.dg/ISO_Fortran_binding_13.f90 : New test.
            * gfortran.dg/ISO_Fortran_binding_13.c : Additional source.
            * gfortran.dg/ISO_Fortran_binding_14.f90 : New test.
    
    From-SVN: r277531

commit 0dee971833b33b5e3ced2f49388e758fcd93026f
Author: Jiufu Guo <guojiufu@linux.ibm.com>
Date:   Mon Oct 28 14:23:26 2019 +0000

    backport: re PR target/70010 (powerpc: -flto forgets 'no-vsx' function attributes)
    
            Backport from mainline
    
            PR target/70010
            * gcc.target/powerpc/pr70010.c: Add -Wno-psabi.
            * gcc.target/powerpc/pr70010-1.c: Require LTO.
            * gcc.target/powerpc/pr70010-2.c: Require LTO.
    
    From-SVN: r277521

commit 37b50a8a3674d2e7fe80057715a7807159466b19
Author: Uros Bizjak <ubizjak@gmail.com>
Date:   Mon Oct 28 15:16:50 2019 +0100

    re PR target/92225 (ice in gen_smaxv2di3, at config/i386/sse.md:12225)
    
            PR target/92225
            * config/i386/sse.md (REDUC_SSE_SMINMAX_MODE): Use TARGET_SSE4_2
            condition for V2DImode.
    
    testsuite/ChangeLog:
    
            PR target/92225
            * gcc.target/i386/pr92225.c: New test.
    
    From-SVN: r277520

commit 5a71e1eb81c6bcff535f316b315cd59e8aed7b41
Author: Ilya Leoshkevich <iii@linux.ibm.com>
Date:   Mon Oct 28 13:09:54 2019 +0000

    Move jump threading before reload
    
    r266734 has introduced a new instance of jump threading pass in order to
    take advantage of opportunities that combine opens up.  It was perceived
    back then that it was beneficial to delay it after reload, since that
    might produce even more such opportunities.
    
    Unfortunately jump threading interferes with hot/cold partitioning.  In
    the code from PR92007, it converts the following
    
      +-------------------------- 2/HOT ------------------------+
      |                                                         |
      v                                                         v
    3/HOT --> 5/HOT --> 8/HOT --> 11/COLD --> 6/HOT --EH--> 16/HOT
                |                               ^
                |                               |
                +-------------------------------+
    
    into the following:
    
      +---------------------- 2/HOT ------------------+
      |                                               |
      v                                               v
    3/HOT --> 8/HOT --> 11/COLD --> 6/COLD --EH--> 16/HOT
    
    This makes hot bb 6 dominated by cold bb 11, and because of this
    fixup_partitions makes bb 6 cold as well, which in turn makes EH edge
    6->16 a crossing one.  Not only can't we have crossing EH edges, we are
    also not allowed to introduce new crossing edges after reload in
    general, since it might require extra registers on some targets.
    
    Therefore, move the jump threading pass between combine and hot/cold
    partitioning.  Building SPEC 2006 and SPEC 2017 with the old and the new
    code indicates that:
    
    * When doing jump threading right after reload, 3889 edges are threaded.
    * When doing jump threading right after combine, 3918 edges are
      threaded.
    
    This means this change will not introduce performance regressions.
    
    gcc/ChangeLog:
    
    2019-10-28  Ilya Leoshkevich  <iii@linux.ibm.com>
    
            Backport from mainline
            PR rtl-optimization/92007
            * cfgcleanup.c (thread_jump): Add an assertion that we don't
            call it after reload if hot/cold partitioning has been done.
            (class pass_postreload_jump): Rename to
            pass_jump_after_combine.
            (make_pass_postreload_jump): Rename to
            make_pass_jump_after_combine.
            * passes.def(pass_postreload_jump): Move before reload, rename
            to pass_jump_after_combine.
            * tree-pass.h (make_pass_postreload_jump): Rename to
            make_pass_jump_after_combine.
    
    gcc/testsuite/ChangeLog:
    
    2019-10-28  Ilya Leoshkevich  <iii@linux.ibm.com>
    
            Backport from mainline
            PR rtl-optimization/92007
            * g++.dg/opt/pr92007.C: New test (from Arseny Solokha).
    
    From-SVN: r277515

commit 53663374619753dd84055edd74ba00cb76d5635e
Author: John David Anglin <danglin@gcc.gnu.org>
Date:   Mon Oct 28 11:40:08 2019 +0000

    baseline_symbols.txt: Update.
    
            * config/abi/post/hppa-linux-gnu/baseline_symbols.txt: Update.
    
    From-SVN: r277511

commit f72e4f06ed994e4a8c2bb351ac8c6b3d74127c52
Author: Peter Bergner <bergner@linux.ibm.com>
Date:   Mon Oct 28 09:46:15 2019 +0000

    [rs6000] PR70010, avoid no-vsx function to be inlined to vsx function
    
    In PR70010, a function is marked with target(no-vsx) to disable VSX code
    generation.  To avoid VSX code generation, this function should not be
    inlined into VSX function.  To fix the bug, in the current logic when
    checking whether the caller's ISA flags supports the callee's ISA flags, we
    just need to add a test that enforces that the caller's ISA flags match
    exactly the callee's flags, for those flags that were explicitly set in the
    callee.  If caller without target attribute then using options from command
    line.
    
    Jiufu
    BR
    
    
    gcc/
    2019-10-16  Peter Bergner <bergner@linux.ibm.com>
                Jiufu Guo  <guojiufu@linux.ibm.com>
    
            PR target/70010
            * config/rs6000/rs6000.c (rs6000_can_inline_p): Prohibit inlining if
            the callee explicitly disables some isa_flags the caller is using.
    
    gcc.testsuite/
    2019-10-16  Peter Bergner <bergner@linux.ibm.com>
                Jiufu Guo  <guojiufu@linux.ibm.com>
    
            PR target/70010
            * gcc.target/powerpc/pr70010.c: New test.
            * gcc.target/powerpc/pr70010-1.c: New test.
            * gcc.target/powerpc/pr70010-2.c: New test.
            * gcc.target/powerpc/pr70010-3.c: New test.
            * gcc.target/powerpc/pr70010-4.c: New test.
    
    
    
    Co-Authored-By: Jiufu Guo <guojiufu@linux.ibm.com>
    
    From-SVN: r277506

commit 25eaaa61818336795f39dc93ae9a1173cf571f02
Author: Tobias Burnus <tobias@codesourcery.com>
Date:   Mon Oct 28 09:36:27 2019 +0000

    Fortran] PR91863 - fix call to bind(C) with array descriptor
    
            Backport from mainline
            2019-10-28  Tobias Burnus  <tobias@codesourcery.com>
    
            PR fortran/91863
            * trans-expr.c (gfc_conv_gfc_desc_to_cfi_desc): Don't free data
            memory as that's done on the Fortran side.
            (gfc_conv_procedure_call): Handle void* pointers from
            gfc_conv_gfc_desc_to_cfi_desc.
    
            Backport from mainline
            2019-10-28  Tobias Burnus  <tobias@codesourcery.com>
    
            PR fortran/91863
            * gfortran.dg/bind-c-intent-out.f90: New.
    
    From-SVN: r277505

commit 3c99746820d5ac0300a167097537174bd714a75b
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Oct 28 00:16:57 2019 +0000

    Daily bump.
    
    From-SVN: r277498

commit 44d4b916436ccc47e98c61c74f9191176e043768
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Sun Oct 27 21:25:57 2019 +0000

    [Darwin, PPC] Fix PR 65342.
    
    The current Darwin load/store lo_sum patterns have neither predicate nor
    constraint. This means that most parts of the backend, which rely on
    recog() to validate the rtx, can produce invalid combinations/selections.
    
    For 32bit cases this isn't a problem since we can load/store to unaligned
    addresses using D-mode insns.
    
    Conversely, for 64bit instructions that use DS mode, this can manifest as
    assemble errors (for an assembler that checks the LO14 relocations), or as
    crashes caused by wrong offsets (or worse, wrong content for the two LSBs).
    
    What we want to check for Y on Darwin is:
    - that the alignment of the Symbols' target is sufficient for DS mode
    - that the offset is suitable for DS mode.
    (while looking through the Mach-O PIC unspecs).
    
    So, the patch removes the Darwin-specific lo_sum patterns (we begin using
    the movdi_internal64 patterns). We also we need to extend the handling of the
    mem_operand_gpr constraint to allow looking through Mach-O PIC UNSPECs in
    the lo_sum cases.
    
    2019-10-27  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline
            2019-10-17  Iain Sandoe  <iain@sandoe.co.uk>
    
            PR target/65342
            * config/rs6000/darwin.md (movdi_low, movsi_low_st): Delete.
            (movdi_low_st): Delete.
            * config/rs6000/rs6000.c
            (darwin_rs6000_legitimate_lo_sum_const_p): New.
            (mem_operand_gpr): Validate Mach-O LO_SUM cases separately.
            * config/rs6000/rs6000.md (movsi_low): Delete.
    
    From-SVN: r277495

commit 87b32c6f409bda6ac11ab857607a6afe68d33f1e
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Sun Oct 27 21:21:49 2019 +0000

    [Darwin, machopic] Fix for 67183
    
    When we're using the LLVM-based assembler (the default on modern Darwin)
    the ordering of stubs and non-lazy symbol pointers is important.
    
    Interleaving the output (current GCC behaviour) leads to crashes which
    prevents us from building code with symbol stubs.
    
    To resolve this, we order the output of stubs and symbol indirections:
    
    1. Any indirections in the data section
    2. Symbol stubs.
    3. Non-lazy symbol pointers.
    
    At present, we still emit LTO sections after these.
    
    2019-10-27  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline
            2019-10-12  Iain Sandoe  <iain@sandoe.co.uk>
    
            PR target/67183
            * config/darwin.c (machopic_indirection): New field to flag
            non-lazy-symbol-pointers in the data section.
            (machopic_indirection_name): Compute if an indirection should
            appear in the data section.
            (machopic_output_data_section_indirection): New callback split
            from machopic_output_indirection.
            (machopic_output_stub_indirection): Likewise.
            (machopic_output_indirection): Retain the code for non-lazy
            symbol pointers in their regular section.
            (machopic_finish): Use the new callbacks to order the indirection
            output.
    
    From-SVN: r277494

commit 5f3b4ef9d55eb9e40db219f94eebcd846ca6b73c
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Sun Oct 27 21:17:33 2019 +0000

    [Darwin, machopic] Preparatory patches.
    
    This is a combined set of 5 patches that allows us to fix
    PR 65342 and 67183.
    
    276924 Make machopic_finish() static.
    
    276767 Set a SYMBOL flag for indirections.
    
    We are able to treat these specially where needed in legitimate address
    tests (specifically, they are guaranteed to be pointer-aligned).
    
    276708 Compute and cache indirection rules.
    
    This caches a check for the requirement to indirect a symbol in the Darwin
    ABI, and uses it where needed.  We also ensure that we place the indirection
    pointers into the non-lazy symbol pointers section.  Other placements have
    occurred with various platform toolchains - but these seem to have been
    unintentional so we match current platform toolchains.
    
    276675 Consider visibility in indirections.
    
    For weak, hidden vars the indirection should just be as normal, that
    is that the indirections for such symbols should appear in the non-lazy
    symbol pointers table, not in the .data section.
    
    276674 Initial tidy of Mach-O symbol handling.
    
    We want to improve the detection and caching of symbol-properties
    so that (a) we can make the compiler's output match the platform
    norms (b) we can improve efficiency by checking flags instead of
    inspecting strings. (c) The fix for PR71767 was a largish hammer
    and we want to reduce the number of symbols that are made linker-
    visible.
    
    This first patch is largely typographical changes with no functional
    difference intended:
    
    - Tries to ensure that there's no overlap between the symbols used in
    the Mach-O case and those declared in the i386 or rs6000 port trees.
    
     - Some improvement to comments.
    
    - Makes the naming of the symbol flags consistent with other uses.
    
     - Provides a predicate macro for each use.
    
    2019-10-27  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline
            2019-10-12  Iain Sandoe  <iain@sandoe.co.uk>
    
            * config/darwin-protos.h (machopic_finish): Delete.
            * config/darwin.c (machopic_finish): Make static.
    
            Backport from mainline
            2019-10-09  Iain Sandoe  <iain@sandoe.co.uk>
    
            * config/darwin.c (machopic_indirect_data_reference): Set flag to
            indicate that the new symbol is an indirection.
            (machopic_indirect_call_target): Likewise.
            * config/darwin.h (MACHO_SYMBOL_FLAG_INDIRECTION): New.
            (MACHO_SYMBOL_INDIRECTION_P): New.
            (MACHO_SYMBOL_FLAG_STATIC): Adjust bit number.
    
            Backport from mainline
            2019-10-08  Iain Sandoe  <iain@sandoe.co.uk>
    
            * config/darwin.c (machopic_indirect_data_reference): Check for
            required indirections before making direct access to defined
            values.
            (machopic_output_indirection): Place the indirected pointes for
            required indirections into the non-lazy symbol pointers section.
            (darwin_encode_section_info):
            * config/darwin.h (MACHO_SYMBOL_FLAG_MUST_INDIRECT): New.
            (MACHO_SYMBOL_MUST_INDIRECT_P): New.
    
            Backport from mainline
            2019-10-07  Iain Sandoe  <iain@sandoe.co.uk>
    
            * config/darwin.c (machopic_output_indirection): Don't put
            hidden symbol indirections into the .data section, use the
            non-lazy symbol pointers section as normal.
            (darwin_encode_section_info): Record if a symbol is hidden.
            * config/darwin.h (MACHO_SYMBOL_FLAG_HIDDEN_VIS): New.
            (MACHO_SYMBOL_HIDDEN_VIS_P): New.
    
            Backport from mainline
            2019-10-07  Iain Sandoe  <iain@sandoe.co.uk>
    
            * config/darwin.c (machopic_symbol_defined_p): Use symbol flag
            predicates instead of accessing bits directly.
            (machopic_indirect_call_target): Likewise.
            (machopic_output_indirection): Likewise.
            (darwin_encode_section_info): Improve description.  Use renamed
            symbol flags.  Use predicate macros for variables and functions.
            * config/darwin.h:
            Rename MACHO_SYMBOL_VARIABLE to MACHO_SYMBOL_FLAG_VARIABLE.
            Rename MACHO_SYMBOL_DEFINED to MACHO_SYMBOL_FLAG_DEFINED.
            Rename MACHO_SYMBOL_STATIC to MACHO_SYMBOL_FLAG_STATIC.
            (MACHO_SYMBOL_VARIABLE_P): New.
            (MACHO_SYMBOL_DEFINED_P):New.
            (MACHO_SYMBOL_STATIC_P): New.
            * config/i386/darwin.h (MACHO_SYMBOL_FLAG_VARIABLE): Delete.
            (SYMBOL_FLAG_SUBT_DEP): New.
            * config/rs6000/darwin.h (SYMBOL_FLAG_SUBT_DEP): New.
    
    From-SVN: r277493

commit 8e17092569bc27d49490577e18636ad9a7e25514
Author: Paul Thomas <pault@gcc.gnu.org>
Date:   Sun Oct 27 18:28:52 2019 +0000

    backport: re PR fortran/86248 (LEN_TRIM in specification expression causes link failure)
    
    2019-10-27  Paul Thomas  <pault@gcc.gnu.org>
    
            Backport from mainline
            PR fortran/86248
            * resolve.c (flag_fn_result_spec): Correct a typo before the
            function declaration.
            * trans-decl.c (gfc_sym_identifier): Boost the length of 'name'
            to allow for all variants. Simplify the code by using a pointer
            to the symbol's proc_name and taking the return out of each of
            the conditional branches. Allow symbols with fn_result_spec set
            that do not come from a procedure namespace and have a module
            name to go through the non-fn_result_spec branch.
    
    2019-10-27  Paul Thomas  <pault@gcc.gnu.org>
    
            Backport from mainline
            PR fortran/86248
            * gfortran.dg/char_result_19.f90 : New test.
            * gfortran.dg/char_result_mod_19.f90 : Module for the new test.
    
    From-SVN: r277490

commit e29929cc5ab5cfd21da8de63762e434cce71f8ed
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Oct 27 00:16:42 2019 +0000

    Daily bump.
    
    From-SVN: r277479

commit a90af601e706fe6ef36e42a73ca33bf69258a2a7
Author: Ville Voutilainen <ville.voutilainen@gmail.com>
Date:   Sat Oct 26 20:32:24 2019 +0300

    re PR c++/85254 (boost::is_final does not work for template types)
    
    PR c++/85254
    
    Backport from mainline
    2019-06-01  Ville Voutilainen  <ville.voutilainen@gmail.com>
    
            PR c++/85254
            * class.c (fixup_type_variants): Handle CLASSTYPE_FINAL.
    
    From-SVN: r277474

commit a6c9210f76f9f36606654c434b3119c9fed0c407
Author: Jan Hubicka <hubicka@ucw.cz>
Date:   Sat Oct 26 18:57:16 2019 +0200

    Avoid gimple body modifications while streaming.
    
            Backport from mainline
            2019-10-11  Jan Hubicka  <hubicka@ucw.cz>
            * gimple-streamer-out.c (output_gimple_stmt): Add explicit function
            parameter.
            * lto-streamer-out.c: Include tree-dfa.h.
            (output_cfg): Do not use cfun.
            (lto_prepare_function_for_streaming): New.
            (output_function): Do not push cfun; do not initialize loop optimizer.
            * lto-streamer.h (lto_prepare_function_for_streaming): Declare.
            * passes.c (ipa_write_summaries): Use it.
            (ipa_write_optimization_summaries): Do not modify bodies.
            * tree-dfa.c (renumber_gimple_stmt_uids): Add function parameter.
            * tree.dfa.h (renumber_gimple_stmt_uids): Update prototype.
            * tree-ssa-dse.c (pass_dse::execute): Update use of
            renumber_gimple_stmt_uids.
            * tree-ssa-math-opts.c (pass_optimize_widening_mul::execute): Likewise.
    
            2019-10-12  Jan Hubicka  <hubicka@ucw.cz>
            * lto-streamer-out.c (collect_block_tree_leafs): Renumber statements
            so non-virutal are before virutals.
            (output_function): Avoid body modifications.
    
    From-SVN: r277473

commit 4f8ee9b60e0470ff49790085ffa7031b666e975b
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Oct 26 00:16:59 2019 +0000

    Daily bump.
    
    From-SVN: r277467

commit f36defc3f327015af9a074bd6adc008a6bee69d6
Author: Ian Lance Taylor <ian@gcc.gnu.org>
Date:   Fri Oct 25 19:10:34 2019 +0000

    compiler: don't inline integer expressions with named types
    
    This works around the problem on GCC 9 branch.  The problem is fixed
    in a better way on trunk; see https://golang.org/issue/34577.
    
    Fixes https://golang.org/issue/35154
    
    From-SVN: r277461

commit 9dace56f5f451ad61bf2431553205f6b41e84477
Author: Richard Earnshaw <rearnsha@arm.com>
Date:   Fri Oct 25 14:34:44 2019 +0000

    [arm][PR88167] Fix __builtin_return_address returns invalid address
    
    This patch fixes a problem with the thumb1 prologue code where the link
    register could be unconditionally used as a scratch register even if the
    return value was still live at the end of the prologue.
    
    Additionally, the patch improves the code generated when we are not
    using many low call-saved registers to make use of any unused call
    clobbered registers to help with the saving of high registers that
    cannot be pushed directly (quite rare in normal code as the register
    allocator correctly prefers low registers).
    
    2019-05-08  Mihail Ionescu  <mihail.ionescu@arm.com>
                Richard Earnshaw  <rearnsha@arm.com>
    
    gcc:
    
            PR target/88167
            * config/arm/arm.c (thumb1_prologue_unused_call_clobbered_lo_regs): New
            function.
            (thumb1_epilogue_unused_call_clobbered_lo_regs): New function.
            (thumb1_compute_save_core_reg_mask): Don't force a spare work
            register if both the epilogue and prologue can use call-clobbered
            regs.
            (thumb1_unexpanded_epilogue): Use
            thumb1_epilogue_unused_call_clobbered_lo_regs.  Reverse the logic for
            picking temporaries for restoring high regs to match that of the
            prologue where possible.
            (thumb1_expand_prologue): Add any usable call-clobbered low registers to
            the list of work registers.  Detect if the return address is still live
            at the end of the prologue and avoid using it for a work register if so.
            If the return address is not live, add LR to the list of pushable regs
            after the first pass.
    
    gcc/testsuite:
    
            PR target/88167
            * gcc.target/arm/pr88167-1.c: New test.
            * gcc.target/arm/pr88167-2.c: New test.
    
    From-SVN: r277452

commit 3a3087860f9f97e5a589ef2d0a6a38dd586557b6
Author: Jan Hubicka <hubicka@ucw.cz>
Date:   Fri Oct 25 14:02:39 2019 +0200

    free summary vectors.
    
            Backport from mainline
            2019-10-24  Jan Hubicka  <hubicka@ucw.cz>
            * symbols-summary.h (fast_function_summary<T *, V>::release,
            fast_call_summary<T *, V>::release): Free m_vector.
    
    From-SVN: r277445

commit e8c432208c4a326e902f6e3a5cb76ddbd141563f
Author: Jan Hubicka <hubicka@ucw.cz>
Date:   Fri Oct 25 13:17:38 2019 +0200

    Backport ggc_trim
            Backport from mainline
    
            2019-10-18  Jakub Jelinek  <jakub@redhat.com>
            PR middle-end/92153
            * ggc-page.c (release_pages): Read g->alloc_size before free rather
            than after it.
    
            2019-10-11  Jan Hubicka  <hubicka@ucw.cz>
    
            * ggc-page.c (release_pages): Output statistics when !quiet_flag.
            (ggc_collect): Dump later to not interfere with release_page dump.
            (ggc_trim): New function.
            * ggc-none.c (ggc_trim): New.
            * ggc.h (ggc_trim): Declare.
    
            * lto-partition.c (add_symbol_to_partition_1): Update.
            (undo_parittion): Update.
    
    From-SVN: r277443

commit 6ae933c76118aee415b3e93da817b9579789a564
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Oct 25 00:16:58 2019 +0000

    Daily bump.
    
    From-SVN: r277432

commit 6fd00cdf1cedbf38d415e564957feee85f8ba39f
Author: Marek Polacek <polacek@redhat.com>
Date:   Thu Oct 24 17:23:27 2019 +0000

    * decl.c (reshape_init_r): Add missing space.
    
    From-SVN: r277420

commit 08cdccdb1cbc8bc6d7594ff14d0eff7531440290
Author: Mihail Ionescu <mihail.ionescu@arm.com>
Date:   Thu Oct 24 16:55:18 2019 +0000

    [arm] Backport -- Fix multilibs for Armv7-R
    
    gcc/ChangeLog:
    2019-10-24  Mihail Ionescu  <mihail.ionescu@arm.com>
    
            Backport from mainline
            2019-10-18  Andre Vieira  <andre.simoesdiasvieira@arm.com>
    
            * config/arm/t-multilib: Add new multilib variants and new
            mappings.
    
    gcc/testsuite/ChangeLog:
    2019-10-24  Mihail Ionescu  <mihail.ionescu@arm.com>
    
            Backport from mainline
            2019-10-18  Andre Vieira  <andre.simoesdiasvieira@arm.com>
    
            * gcc.target/arm/multilib.exp: Add extra tests.
    
    From-SVN: r277417

commit dac3f1132b182a52e9138b26ed2a551c911300d4
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Thu Oct 24 14:53:28 2019 +0000

    [Darwin, PPC] Check for out of range asm values.
    
    There are some cases in which the value for the max skip to a p2align
    directive can be negative. The older assembler (and GAS) just ignores
    these cases but newer tools produce an error. To preserve behaviour,
    we avoid emitting out of range values.
    
    gcc/ChangeLog:
    
    2019-10-24  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline
            2019-10-23  Iain Sandoe  <iain@sandoe.co.uk>
    
            * config/rs6000/darwin.h (ASM_OUTPUT_MAX_SKIP_ALIGN): Guard
            against out of range max skip or log values.
    
    From-SVN: r277405

commit 14fe05d883b4272fe326a665ad589df7ac800e72
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Thu Oct 24 13:55:27 2019 +0100

    PR libstdc++/90682 allow set_terminate(0) and set_unexpected(0)
    
    Make these functions restore the default handlers when passed a null
    pointer. This is consistent with std::pmr::set_default_resource(0), and
    also matches the current behaviour of libc++.
    
    In order to avoid duplicating the preprocessor condition from
    eh_term_handler.cc more that into a new eh_term_handler.h header and
    define a macro that can be used in both eh_term_handler.cc and
    eh_terminate.cc.
    
    Backport from mainline
    2019-05-31  Jonathan Wakely  <jwakely@redhat.com>
    
            PR libstdc++/90682
            * libsupc++/eh_term_handler.cc: Include eh_term_handler.h to get
            definition of _GLIBCXX_DEFAULT_TERM_HANDLER.
            * libsupc++/eh_term_handler.h: New header defining
            _GLIBCXX_DEFAULT_TERM_HANDLER.
            * libsupc++/eh_terminate.cc: Include eh_term_handler.h.
            (set_terminate): Restore default handler when argument is null.
            (set_unexpected): Likewise.
            * testsuite/18_support/set_terminate.cc: New test.
            * testsuite/18_support/set_unexpected.cc: New test.
    
    From-SVN: r277393

commit e970705b48e151c5cdd63dea956c585333eea308
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Thu Oct 24 13:55:21 2019 +0100

    PR libstdc++/61761 fix std::proj for targets without C99 cproj
    
    The current generic implementation of __complex_proj used when cproj is
    not available calculates the wrong projection, giving a different result
    than given by C99's cproj.
    
    When C99 cproj is not available but isinf and copysign are, use those to
    give correct results for float, double and long double. Otherwise, and
    for other specializations of std::complex, just use a generic version
    that returns its argument, and so doesn't support infinities.
    
    We might want to consider adding additional overloads of __complex_proj
    to support extended types such as _Float64x, _Float128 etc.
    
    Backport from mainline
    2019-05-01  Jonathan Wakely  <jwakely@redhat.com>
    
            PR libstdc++/61761
            * include/std/complex (__complex_proj): Return parameter unchanged.
            [_GLIBCXX_USE_C99_COMPLEX] (__complex_proj): Change overloads for
            floating-point types to take std::complex arguments.
            [_GLIBCXX_USE_C99_MATH_TR1] (__complex_proj): Add overloads for
            floating-point types.
            * testsuite/26_numerics/complex/proj.cc: New test.
    
    From-SVN: r277392

commit 1b120c61b6528199d5505c9f840f711224ecf0e7
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Thu Oct 24 13:55:14 2019 +0100

    Fix more failing tests for C++98 mode
    
    Backport from mainline
    2019-06-06  Jonathan Wakely  <jwakely@redhat.com>
    
            * testsuite/23_containers/deque/requirements/dr438/assign_neg.cc: Add
            dg-prune-output for different C++98 diagnostic.
            * testsuite/23_containers/deque/requirements/dr438/constructor_1_neg.cc:
            Likewise.
            * testsuite/23_containers/deque/requirements/dr438/constructor_2_neg.cc:
            Likewise.
            * testsuite/23_containers/deque/requirements/dr438/insert_neg.cc:
            Likewise.
            * testsuite/23_containers/list/requirements/dr438/assign_neg.cc:
            Likewise.
            * testsuite/23_containers/list/requirements/dr438/constructor_1_neg.cc:
            Likewise.
            * testsuite/23_containers/list/requirements/dr438/constructor_2_neg.cc:
            Likewise.
            * testsuite/23_containers/list/requirements/dr438/insert_neg.cc:
            Likewise.
            * testsuite/23_containers/vector/requirements/dr438/assign_neg.cc:
            Likewise.
            * testsuite/23_containers/vector/requirements/dr438/
            constructor_1_neg.cc: Likewise.
            * testsuite/23_containers/vector/requirements/dr438/
            constructor_2_neg.cc: Likewise.
            * testsuite/23_containers/vector/requirements/dr438/insert_neg.cc:
            Likewise.
            * testsuite/libstdc++-prettyprinters/compat.cc: Do not run for C++98.
    
    From-SVN: r277391

commit 4f03a8f01111b26343f9be4e5304337e5cb28936
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Thu Oct 24 13:55:08 2019 +0100

    Fix tests that fail with -std=gnu++98 or -std=gnu++11
    
    Backport from mainline
    2019-06-06  Jonathan Wakely  <jwakely@redhat.com>
    
            * testsuite/20_util/is_nothrow_invocable/value.cc: Test converting to
            void.
            * testsuite/experimental/names.cc: Do not run for C++98 mode. Do not
            include Library Fundamentals or Networking headers in C++11 mode.
            * testsuite/ext/char8_t/atomic-1.cc: Do not run for C++98 mode.
    
    From-SVN: r277390

commit 7e6c09c180a667ce00e14895f988ea0d50fcb756
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Thu Oct 24 13:55:03 2019 +0100

    Fix indentation in testsuite utility header
    
    Backport from mainline
    2019-05-14  Jonathan Wakely  <jwakely@redhat.com>
    
            * testsuite/util/testsuite_allocator.h (memory_resource)
            (default_resource_mgr): Fix indentation.
    
    From-SVN: r277389

commit f061d690d8e15512540127dd43eb6f0bcf37cbb3
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Thu Oct 24 13:54:58 2019 +0100

    PR libstdc++/89164 enforce constraints for uninitialized algos
    
    The memmove optimizations for std::uninitialized_copy/fill/_n will
    compile even if the type is not copy constructible, because std::copy
    doesn't require copy construction to work. But the uninitialized
    algorithms do require it.
    
    This adds explicit static assertions to ensure we don't allow ill-formed
    initializations.
    
    Backport from mainline
    2019-08-30  Jonathan Wakely  <jwakely@redhat.com>
    
            PR libstdc++/89164
            * include/bits/stl_algobase.h (__copy_move): Give descriptive names
            to template parameters.
            * include/bits/stl_uninitialized.h (uninitialized_copy)
            (uninitialized_fill, uninitialized_fill_n): Add static assertions to
            diagnose invalid uses.
            * testsuite/20_util/specialized_algorithms/uninitialized_copy/1.cc:
            Adjust expected error.
            * testsuite/20_util/specialized_algorithms/uninitialized_copy/89164.cc:
            New test.
            * testsuite/20_util/specialized_algorithms/uninitialized_copy_n/
            89164.cc: New test.
            * testsuite/20_util/specialized_algorithms/uninitialized_fill/89164.cc:
            New test.
            * testsuite/20_util/specialized_algorithms/uninitialized_fill_n/
            89164.cc: New test.
            * testsuite/23_containers/vector/cons/89164.cc: New test.
            * testsuite/23_containers/vector/cons/89164_c++17.cc: New test.
    
    From-SVN: r277388

commit 8fa40f2cc3616f39a94ff58d95c4c4421fd39e2a
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Thu Oct 24 13:54:50 2019 +0100

    Do not declare std::uses_allocator before C++11
    
    Backport from mainline
    2019-10-22  Jonathan Wakely  <jwakely@redhat.com>
    
            * include/bits/memoryfwd.h (uses_allocator): Do not declare for C++98.
            * testsuite/17_intro/names.cc: Check uses_allocator in C++98.
    
    From-SVN: r277387

commit f37b9e32f7498e0f8bb287aae19cfc3e8efd4cab
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Thu Oct 24 13:54:44 2019 +0100

    PR libstdc++/92143 adjust for OS X aligned_alloc behaviour
    
    OS X 10.15 adds aligned_alloc but it has the same restriction as the AIX
    version, namely that alignments smaller than sizeof(void*) are not
    supported.
    
    Backport from mainline
    2019-10-18  Jonathan Wakely  <jwakely@redhat.com>
    
            PR libstdc++/92143
            * libsupc++/new_opa.cc (operator new) [__APPLE__]: Increase alignment
            to at least sizeof(void*).
    
    From-SVN: r277386

commit 20bce52d369282fb3ac90901b5d58733953a8217
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Thu Oct 24 13:54:40 2019 +0100

    Fix more tests that fail in C++2a mode
    
    Backport from mainline
    2019-06-06  Jonathan Wakely  <jwakely@redhat.com>
    
            * testsuite/23_containers/unordered_map/requirements/debug_container.cc:
            Do not test allocator rebinding extension for C++2a.
            * testsuite/23_containers/unordered_set/allocator/ext_ptr.cc: Change
            dg-do directive for C++17 and C++2a.
    
    From-SVN: r277385

commit b2f56dd541c36c60a076769c2eabfa997c2970d8
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Thu Oct 24 13:54:35 2019 +0100

    Fix testsuite bugs
    
    One of the static assertions in 20_util/function_objects/invoke/1.cc was
    wrong, but didn't fail because by default it was compiled with
    -std=gnu++14 which didn't use that static assertion. Split out the C++17
    parts to a new file that always runs with -std=gnu++17, so those checks
    are always done. Also backport some extra tests from an earlier commit
    on trunk (r271173).
    
    The 23_containers/unordered_set/allocator/ext_ptr.cc test is supposed to
    be a run-time test but was unintentionally compile-only.
    
    Backport from mainline
    2019-05-23  Jonathan Wakely  <jwakely@redhat.com>
    
            * testsuite/20_util/function_objects/invoke/1.cc: Add more tests.
            Move C++17-specific tests to ...
            * testsuite/20_util/function_objects/invoke/3.cc: New test.
            * testsuite/23_containers/unordered_set/allocator/ext_ptr.cc: Change
            "compile" test to "run".
    
    From-SVN: r277384

commit 5634905ded67366b176669424505ed338ad141e8
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Thu Oct 24 13:54:30 2019 +0100

    Add makefile target to update HTML files in source tree
    
    Also remove the creation of the html/ext sub-directory, which has been
    unused since revision r245258.
    
    Backport from mainline
    2019-10-08  Jonathan Wakely  <jwakely@redhat.com>
    
            * doc/Makefile.am (doc-html-docbook-regenerate): New target.
            (${docbook_outdir}/html): Do not create unused 'html/ext' directory.
            * doc/Makefile.in: Regenerate.
            * doc/xml/manual/documentation_hacking.xml: Document new target.
            * doc/html/*: Regenerate.
    
    From-SVN: r277383

commit f54588f6208b88a1ff15b81802492234c7dbd802
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Thu Oct 24 13:54:23 2019 +0100

    Update URL for CUJ article in libstdc++ docs
    
            * doc/xml/manual/allocator.xml: Use archived copy of CUJ article.
    
    From-SVN: r277382

commit 05c4872b3b099d8151732b7aeade3e1ae7c9d491
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Thu Oct 24 13:54:18 2019 +0100

    Update URL for Hoard in libstdc++ docs
    
    Backport from mainline
    2019-05-31  Gerald Pfeifer  <gerald@pfeifer.com>
    
            * doc/xml/manual/allocator.xml: Move hoard.org back to http.
    
    From-SVN: r277381

commit b53e76509f94cce90ce50b5d02f5ed99d3581f3c
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Thu Oct 24 13:54:13 2019 +0100

    PR libstdc++/91456 make INVOKE<R> work with uncopyable prvalues
    
    In C++17 a function can return a prvalue of a type that cannot be moved
    or copied. The current implementation of std::is_invocable_r uses
    std::is_convertible to test the conversion to R required by INVOKE<R>.
    That fails for non-copyable prvalues, because std::is_convertible is
    defined in terms of std::declval which uses std::add_rvalue_reference.
    In C++17 conversion from R to R involves no copies and so is not the
    same as conversion from R&& to R.
    
    This commit changes std::is_invocable_r to check the conversion without
    using std::is_convertible.
    
    std::function also contains a similar check using std::is_convertible,
    which can be fixed by simply reusing std::is_invocable_r (but because
    std::is_invocable_r is not defined for C++11 it uses the underlying
    std::__is_invocable_impl trait directly).
    
    Backport from mainline
    2019-08-15  Jonathan Wakely  <jwakely@redhat.com>
    
            PR libstdc++/91456
            * include/bits/std_function.h (__check_func_return_type): Remove.
            (function::_Callable): Use std::__is_invocable_impl instead of
            __check_func_return_type.
            * include/std/type_traits (__is_invocable_impl): Add another defaulted
            template parameter. Define a separate partial specialization for
            INVOKE and INVOKE<void>. For INVOKE<R> replace is_convertible check
            with a check that models delayed temporary materialization.
            * testsuite/20_util/function/91456.cc: New test.
            * testsuite/20_util/is_invocable/91456.cc: New test.
    
    From-SVN: r277380

commit a8b705aa4344f839ef3628ecf045818c2c28763c
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Thu Oct 24 13:54:09 2019 +0100

    Include netinet/in.h in include/experimental/internet
    
    Backport from mainline
    2019-09-30  Andreas Tobler  <andreast@gcc.gnu.org>
    
            * include/experimental/internet: Include netinet/in.h if we have
            _GLIBCXX_HAVE_NETINET_IN_H defined.
    
    From-SVN: r277379

commit 38cb5876a2875703453d06d3eca5d976cd1414c0
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Thu Oct 24 13:54:05 2019 +0100

    Fix array index error in address_v6 comparisons
    
    Backport from mainline
    2019-09-26  Jonathan Wakely  <jwakely@redhat.com>
    
            * include/experimental/internet (operator==, operator<): Fix loop
            condition to avoid reading past the end of the array.
    
    From-SVN: r277378

commit 2cd084d8645a6aa4a4c736532665d79a17cc98d3
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Thu Oct 24 13:54:00 2019 +0100

    P1651R0 bind_front should not unwrap reference_wrapper
    
    Backport from mainline
    2019-08-06  Jonathan Wakely  <jwakely@redhat.com>
    
            P1651R0 bind_front should not unwrap reference_wrapper
            * include/std/functional (bind_front): Don't unwrap reference_wrapper.
            * include/std/version (__cpp_lib_bind_front): Update value.
            * testsuite/20_util/function_objects/bind_front/1.cc: Fix test for
            feature test macro.
            * testsuite/20_util/function_objects/bind_front/2.cc: New test.
    
    From-SVN: r277377

commit de5a2a192393292ec30ee686fae2ac14fa982159
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Thu Oct 24 13:53:55 2019 +0100

    PR libstdc++/92059 fix several bugs in tr2::dynamic_bitset
    
    Backport from mainline
    2019-10-11  Jonathan Wakely  <jwakely@redhat.com>
    
            PR libstdc++/92059
            * include/tr2/dynamic_bitset (__dynamic_bitset_base): Define all
            special member functions as defaulted. Add noexcept to most members.
            (__dynamic_bitset_base(size_t, unsigned long long, const _Alloc&)):
            Mask off unwanted bits in the __val parameter. Avoid undefined left
            shifts.
            (__dynamic_bitset_base::_M_assign): Remove.
            (__dynamic_bitset_base::_M_do_reset): Use std::fill.
            (__dynamic_bitset_base::_M_are_all_aux): Avoid integer promotion when
            block_type has lower rank than int.
            (dynamic_bitset): Add noexcept to most members. Use injected-class-name
            in return types and parameter types.
            (dynamic_bitset::_M_Nb): Add default member initializer.
            (dynamic_bitset(), dynamic_bitset(const dynamic_bitset&)): Define as
            defaulted.
            (dynamic_bitset(dynamic_bitset&&)): Clear source object after move.
            (dynamic_bitset::operator=(const dynamic_bitset&)): Define as
            defaulted.
            (dynamic_bitset::operator=(dynamic_bitset&&)): Add noexcept-specifier.
            Define without using swap, to propagate allocator correctly.
            (dynamic_bitset(const char*, const _Alloc&)): Use strlen.
            (dynamic_bitset::_M_do_sanitize, dynamic_bitset::_M_do_fill): Use
            casts to avoid unwanted integer promotions.
            (dynamic_bitset::_M_copy_from_ptr): Rearrange template parameters and
            add default template arguments and default argument to simplify usage.
            (dynamic_bitset::_M_copy_from_string): Adjust call to _M_copy_from_ptr.
            (operator==(const dynamic_bitset&, const dynamic_bitset&))
            (operator<(const dynamic_bitset&, const dynamic_bitset&)): Use _M_Nb.
            * include/tr2/dynamic_bitset.tcc (dynamic_bitset::_M_copy_from_ptr):
            Adjust template parameters to match declaration.
            * testsuite/tr2/dynamic_bitset/cmp.cc: New test.
            * testsuite/tr2/dynamic_bitset/cons.cc: New test.
            * testsuite/tr2/dynamic_bitset/copy.cc: New test.
            * testsuite/tr2/dynamic_bitset/move.cc: New test.
            * testsuite/tr2/dynamic_bitset/pr92059.cc: New test.
    
    From-SVN: r277376

commit cb59b91d347c8b3be2b383a5d18b201aafdc6b8d
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Oct 24 00:16:13 2019 +0000

    Daily bump.
    
    From-SVN: r277361

commit f81de8afe72704f5149dd074710e69e7151ebdb2
Author: Peter Bergner <bergner@linux.ibm.com>
Date:   Wed Oct 23 21:34:42 2019 +0000

    backport: config.gcc: Move -L usage from LINK_OS_EXTRA_SPEC32 and LINK_OS_EXTRA_SPEC64 to...
    
            Backport from mainline
            2019-10-08  Tulio Magno Quites Machado Filho  <tuliom@linux.ibm.com>
    
            * config.gcc: Move -L usage from LINK_OS_EXTRA_SPEC32 and
            LINK_OS_EXTRA_SPEC64 to MD_STARTFILE_PREFIX and
            MD_STARTFILE_PREFIX_1 when using --with-advance-toolchain.
    
    From-SVN: r277353

commit 5bd08e79df8852135a474250e9ebbc139e9d8e1d
Author: Martin Liska <mliska@suse.cz>
Date:   Wed Oct 23 14:16:28 2019 +0200

    Backport r276178
    
    2019-10-23  Martin Liska  <mliska@suse.cz>
    
            Backport from mainline
            2019-09-27  Jakub Jelinek  <jakub@redhat.com>
    
            PR tree-optimization/91885
            * gcc.dg/pr91885.c (__int64_t): Change from long to long long.
            (__uint64_t): Change from unsigned long to unsigned long long.
    
    From-SVN: r277318

commit aee63014ab30f98eda779303ed10a7e962326856
Author: Martin Liska <mliska@suse.cz>
Date:   Wed Oct 23 14:12:57 2019 +0200

    Backport r276141
    
    2019-10-23  Martin Liska  <mliska@suse.cz>
    
            Backport from mainline
            2019-09-26  Martin Liska  <mliska@suse.cz>
    
            PR tree-optimization/91885
            * tree-vectorizer.c (try_vectorize_loop_1):
            Add TODO_update_ssa_only_virtuals similarly to what slp
            pass does.
    2019-10-23  Martin Liska  <mliska@suse.cz>
    
            Backport from mainline
            2019-09-26  Martin Liska  <mliska@suse.cz>
    
            PR tree-optimization/91885
            * gcc.dg/pr91885.c: New test.
    
    From-SVN: r277317

commit dd54e5730635e9878d18ae57ee769d86f21ecb39
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Wed Oct 23 11:37:28 2019 +0000

    re PR tree-optimization/92131 (incorrect assumption that (ao >= 0) is always false)
    
            PR tree-optimization/92131
            * tree-vrp.c (extract_range_from_plus_minus_expr): If the resulting
            range would be symbolic, drop to varying for any explicit overflow
            in the constant part or if neither range is a singleton.
    
    From-SVN: r277315

commit 0ce10ed63cd6c293e5f00d976061eec5ff7a5724
Author: Richard Biener <rguenther@suse.de>
Date:   Wed Oct 23 10:32:06 2019 +0000

    backport: re PR debug/91887 (-fdebug-types-section ICE building chromium)
    
    2019-10-23  Richard Biener  <rguenther@suse.de>
    
            Backport from mainline
            2019-10-17  Richard Biener  <rguenther@suse.de>
    
            PR debug/91887
            * dwarf2out.c (gen_formal_parameter_die): Also try to match
            context_die against a DW_TAG_GNU_formal_parameter_pack parent.
    
            * g++.dg/debug/dwarf2/pr91887.C: New testcase.
    
    From-SVN: r277312

commit 3cc49cb587c61d1b54a9419c51dc31597e015e66
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Oct 23 00:16:20 2019 +0000

    Daily bump.
    
    From-SVN: r277305

commit d5cfbd6e825ae100a1549d79a91cdfdc0156195a
Author: Steven G. Kargl <kargl@gcc.gnu.org>
Date:   Tue Oct 22 18:38:30 2019 +0000

    re PR fortran/92174 (runtime error: index 15 out of bounds for type 'gfc_expr *[15])
    
    2019-10-22  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/92174
            * decl.c (attr_decl1): Move check for F2018:C822 from here ...
            * array.c (gfc_set_array_spec): ... to here.
    
    From-SVN: r277298

commit 7aec4a8d7d4895e99d48bf93d8656efbcb61ff5c
Author: Marek Polacek <polacek@redhat.com>
Date:   Tue Oct 22 15:46:47 2019 +0000

    PR c++/92062 - ODR-use ignored for static member of class template.
    
            * pt.c (has_value_dependent_address): Strip location wrappers.
    
            * g++.dg/cpp0x/constexpr-odr1.C: New test.
            * g++.dg/cpp0x/constexpr-odr2.C: New test.
    
    From-SVN: r277295

commit d986a59558608834f3259da4bc5f64a868f89774
Author: Marek Polacek <polacek@redhat.com>
Date:   Tue Oct 22 15:21:34 2019 +0000

    PR c++/92106 - ICE with structured bindings and -Wreturn-local-addr.
    
            * typeck.c (maybe_warn_about_returning_address_of_local): Avoid
            recursing on null initializer and return false instead.
    
    From-SVN: r277294

commit 2d39687a2920d1788a6a5ab0b6e7d55eb4975156
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Oct 22 00:16:14 2019 +0000

    Daily bump.
    
    From-SVN: r277275

commit 71ff84826d66b8b3553ea234138db096de8c1eee
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Mon Oct 21 13:49:18 2019 +0200

    backport: re PR tree-optimization/92056 (ice in expr_object_size, at tree-object-si ze.c:675 with -O3)
    
            Backported from mainline
            2019-10-17  Jakub Jelinek  <jakub@redhat.com>
    
            PR tree-optimization/92056
            * tree-object-size.c (cond_expr_object_size): Return early if then_
            processing resulted in unknown size.
    
            * gcc.c-torture/compile/pr92056.c: New test.
    
    From-SVN: r277259

commit b86880388b981bd9fbcc7903784e93496f9540dd
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Mon Oct 21 13:48:34 2019 +0200

    backport: re PR fortran/87752 (ICE in omp_add_variable, at gimplify.c:6776)
    
            Backported from mainline
            2019-10-17  Jakub Jelinek  <jakub@redhat.com>
    
            PR fortran/87752
            * gfortran.dg/gomp/pr87752.f90: New test.
    
    From-SVN: r277258

commit 12f707007c418e075331a56be1960c5fdcf44ad1
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Mon Oct 21 13:48:00 2019 +0200

    backport: re PR tree-optimization/91734 (gcc skip an if statement  with "-O1 -ffast-math")
    
            Backported from mainline
            2019-10-05  Jakub Jelinek  <jakub@redhat.com>
    
            PR tree-optimization/91734
            * generic-match-head.c: Include fold-const-call.h.
            * match.pd (sqrt(x) cmp c): Check the boundary value and
            in case inexact computation of c*c affects comparison of the boundary,
            turn LT_EXPR into LE_EXPR, GE_EXPR into GT_EXPR, LE_EXPR into LT_EXPR
            or GT_EXPR into GE_EXPR.  Punt for sqrt comparisons against NaN and
            for -frounding-math.  For c2, try the next smaller or larger floating
            point constant depending on comparison code and if it has the same
            sqrt as c2, use it instead of c2.
    
            * gcc.dg/pr91734.c: New test.
    
    From-SVN: r277257

commit ff470de3cee8db42b0708a6aeb39733c5416aa8d
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Mon Oct 21 13:47:09 2019 +0200

    backport: re PR c++/91974 (function not sequenced before function argument)
    
            Backported from mainline
            2019-10-04  Jakub Jelinek  <jakub@redhat.com>
    
            PR c++/91974
            * cp-gimplify.c (cp_gimplify_expr) <case CALL_EXPR>: For
            -fstrong-eval-order ensure CALL_EXPR_FN side-effects are evaluated
            before any arguments.  Additionally, ensure CALL_EXPR_FN that isn't
            invariant nor OBJ_TYPE_REF nor SSA_NAME is forced into a temporary.
    
            * g++.dg/cpp1z/eval-order5.C: New test.
    
    From-SVN: r277256

commit 2990eccb24c10780fc930884d899521b43bf62b4
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Mon Oct 21 13:46:21 2019 +0200

    backport: re PR c++/91925 (-fpack-struct causes a decltype with template to ICE)
    
            Backported from mainline
            2019-10-01  Jakub Jelinek  <jakub@redhat.com>
    
            PR c++/91925
            * c-warn.c (check_alignment_of_packed_member): Ignore FIELD_DECLs
            with NULL DECL_FIELD_OFFSET.
    
            * g++.dg/conversion/packed2.C: New test.
    
    From-SVN: r277255

commit b4476ac6ccbc97db0c138b866e9fd04e6f6af9ae
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Mon Oct 21 13:45:27 2019 +0200

    backport: re PR bootstrap/90543 (Build failure on MINGW for gcc-9.1.0)
    
            Backported from mainline
            2019-09-29  Jakub Jelinek  <jakub@redhat.com>
    
            PR bootstrap/90543
            * optc-save-gen.awk: Fix up printing string option differences.
    
    From-SVN: r277254

commit 2ef0748daa2b4c33f1dd6b3a4ce92a00d9da7a43
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Mon Oct 21 13:44:53 2019 +0200

    backport: re PR c++/88203 (assert does not compile with OpenMP's pragma omp parallel for default(none))
    
            Backported from mainline
            2019-09-27  Jakub Jelinek  <jakub@redhat.com>
    
            PR c++/88203
            * c-common.h (c_omp_predefined_variable): Declare.
            * c-omp.c (c_omp_predefined_variable): New function.
            (c_omp_predetermined_sharing): Return OMP_CLAUSE_DEFAULT_SHARED
            for predefined variables.
    
            * c-parser.c (c_parser_predefined_identifier): New function.
            (c_parser_postfix_expression): Use it.
            (c_parser_omp_variable_list): Parse predefined identifiers.
            * c-typeck.c (c_finish_omp_clauses): Allow predefined variables
            in shared and firstprivate clauses, even when they are predetermined
            shared.
    
            * parser.c (cp_parser_omp_var_list_no_open): Parse predefined
            variables.
            * semantics.c (finish_omp_clauses): Allow predefined variables in
            shared and firstprivate clauses, even when they are predetermined
            shared.
            * cp-gimplify.c (cxx_omp_predetermined_sharing_1): Return
            OMP_CLAUSE_DEFAULT_SHARED for predefined variables.
    
            * c-c++-common/gomp/pr88203-1.c: New test.
            * c-c++-common/gomp/pr88203-2.c: New test.
            * c-c++-common/gomp/pr88203-3.c: New test.
    
    From-SVN: r277253

commit 5737654316be25066704e570aff136bda662c137
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Mon Oct 21 13:43:16 2019 +0200

    backport: re PR middle-end/91920 (ggc 9.2.0 failing openmp compile on ppc64le)
    
            Backported from mainline
            2019-09-27  Jakub Jelinek  <jakub@redhat.com>
    
            PR middle-end/91920
            * gimplify.c (omp_default_clause): Predetermine DECL_IN_CONSTANT_POOL
            variables as shared.
    
            * c-c++-common/gomp/pr91920.c: New test.
    
    From-SVN: r277252

commit 3f1c4be2b6abfe250dcc6bcee2c0730c04ae95aa
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Mon Oct 21 13:42:37 2019 +0200

    backport: re PR rtl-optimization/89435 (wrong code with -O1 -march=armv4 -fno-forward-propagate with __builtin_sub_overflow())
    
            Backported from mainline
            2019-09-11  Jakub Jelinek  <jakub@redhat.com>
    
            PR rtl-optimization/89435
            PR rtl-optimization/89795
            PR rtl-optimization/91720
            * gcc.dg/pr89435.c: New test.
            * gcc.dg/pr89795.c: New test.
            * gcc.dg/pr91720.c: New test.
    
    From-SVN: r277251

commit 75a07394b1386542d2d9a0e08e6dfbc8782579fc
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Mon Oct 21 13:41:40 2019 +0200

    backport: re PR tree-optimization/91723 (builtin fma is not optimized or vectorized as *+)
    
            Backported from mainline
            2019-09-11  Jakub Jelinek  <jakub@redhat.com>
    
            PR tree-optimization/91723
            * tree-vect-stmts.c (vectorizable_call): Use types_compatible_p check
            instead of pointer equality when checking if argument vectypes are
            the same.
    
            * gcc.dg/vect/vect-fma-3.c: New test.
    
    From-SVN: r277250

commit 31759d6e52682886d8d3af5ec4fe40106e31097d
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Mon Oct 21 13:40:48 2019 +0200

    backport: re PR tree-optimization/91665 (ICE in build_vector_from_val, at tree.c:1904)
    
            Backported from mainline
            2019-09-07  Jakub Jelinek  <jakub@redhat.com>
    
            PR tree-optimization/91665
            * tree-vect-loop.c (vectorizable_reduction): Punt if base has type
            incompatible with the type of PHI result.
    
            * gcc.dg/vect/pr91665.c: New test.
    
    From-SVN: r277249

commit 3ddfd778d51184d07830c20a51ec4dea43b89a5d
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Mon Oct 21 13:39:53 2019 +0200

    backport: re PR middle-end/91001 (internal compiler error: in extract_insn, at recog.c:2310)
    
            Backported from mainline
            2019-09-06  Jakub Jelinek  <jakub@redhat.com>
    
            * function.c (assign_parm_find_data_types): Use RECORD_OR_UNION_TYPE_P
            before testing TYPE_TRANSPARENT_AGGR.
            * calls.c (initialize_argument_information, load_register_parameters):
            Likewise.
    
            2019-09-05  Jakub Jelinek  <jakub@redhat.com>
    
            PR middle-end/91001
            PR middle-end/91105
            PR middle-end/91106
            * calls.c (load_register_parameters): For TYPE_TRANSPARENT_AGGR
            types, use type of their first field instead of type of
            args[i].tree_value.
    
            * gcc.c-torture/compile/pr91001.c: New test.
    
    From-SVN: r277248

commit 93405bb7d4f812ae61ed88c3c1a08e1928ad727e
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Mon Oct 21 13:39:04 2019 +0200

    backport: re PR tree-optimization/91632 (Probably wrong code since r275026)
    
            Backported from mainline
            2019-09-02  Jakub Jelinek  <jakub@redhat.com>
    
            PR tree-optimization/91632
            * gcc.c-torture/execute/pr91632.c: New test.
    
    From-SVN: r277247

commit 4ae11c8ecb1c9969c49a320fbe69c2f6219540b0
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Mon Oct 21 13:38:37 2019 +0200

    backport: re PR middle-end/91623 (-msse4.1 -O3 segfault in /usr/lib/gcc/x86_64-pc-linux-gnu/8.3.0/include/smmintrin.h:270:10)
    
            Backported from mainline
            2019-09-01  Jakub Jelinek  <jakub@redhat.com>
    
            PR middle-end/91623
            * optabs.c (expand_vec_cond_expr): If op0 is a VECTOR_CST and only
            EQ_EXPR/NE_EXPR is supported, verify that op0 only contains
            zeros or negative elements and use NE_EXPR instead of LT_EXPR against
            zero vector.
    
            * gcc.target/i386/pr91623.c: New test.
    
    From-SVN: r277246

commit d8681a0f44e5d58a3cff3bddb870c1795bac28ec
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Mon Oct 21 13:37:41 2019 +0200

    backport: re PR lto/91572 (lto1: error: type variant has different ‘TREE_TYPE’ since r269862)
    
            Backported from mainline
            2019-09-01  Jakub Jelinek  <jakub@redhat.com>
    
            PR lto/91572
            * tree.c (find_decls_types_in_node): Also walk TREE_PURPOSE of
            GIMPLE_ASM TREE_LIST operands.
    
            * g++.dg/lto/pr91572_0.C: New test.
    
    From-SVN: r277245

commit 56131f53b9b712d79344824ecd6a8b83d1c808a2
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Mon Oct 21 13:36:36 2019 +0200

    backport: re PR go/91617 (Many go test case failures after r275026)
    
            Backported from mainline
            2019-09-02  Jakub Jelinek  <jakub@redhat.com>
    
            PR go/91617
            * fold-const.c (range_check_type): For enumeral and boolean
            type, pass 1 to type_for_size langhook instead of
            TYPE_UNSIGNED (etype).  Return unsigned_type_for result whenever
            etype isn't TYPE_UNSIGNED INTEGER_TYPE.
            (build_range_check): Don't call unsigned_type_for for pointer types.
            * match.pd (X / C1 op C2): Don't call unsigned_type_for on
            range_check_type result.
    
            2019-08-29  Jakub Jelinek  <jakub@redhat.com>
    
            PR tree-optimization/91351
            * tree-cfg.c (generate_range_test): Use range_check_type instead of
            unsigned_type_for.
            * tree-cfgcleanup.c (convert_single_case_switch): Punt if
            range_check_type returns NULL.
            * tree-switch-conversion.c (switch_conversion::build_one_array):
            Use range_check_type instead of unsigned_type_for, don't perform
            linear opt if it returns NULL.
            (bit_test_cluster::find_bit_tests): Formatting fix.
            (bit_test_cluster::emit): Use range_check_type instead of
            unsigned_type_for.
            (switch_decision_tree::try_switch_expansion): Punt if range_check_type
            returns NULL.
    
            * g++.dg/opt/pr91351.C: New test.
    
    From-SVN: r277244

commit e79fcceb96103962d628d3065603fa27c52bbf75
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Mon Oct 21 13:35:09 2019 +0200

    backport: re PR c/91401 (schedule + dist_schedule clauses rejected on distribute parallel for)
    
            Backported from mainline
            2019-08-09  Jakub Jelinek  <jakub@redhat.com>
    
            PR c/91401
            * c-parser.c (c_parser_omp_clause_dist_schedule): Fix up typos in the
            check_no_duplicate_clause call.  Comment it out, instead emit a
            warning for duplicate dist_schedule clauses.
    
            * parser.c (cp_parser_omp_clause_dist_schedule): Comment out the
            check_no_duplicate_clause call, instead emit a warning for duplicate
            dist_schedule clauses.
    
            * c-c++-common/gomp/pr91401-1.c: New test.
            * c-c++-common/gomp/pr91401-2.c: New test.
    
    From-SVN: r277243

commit 68a88d9a648e9340163587d26622b8d780cd7d57
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Mon Oct 21 13:34:04 2019 +0200

    backport: quadmath.h (M_Eq, [...]): Use two more decimal places.
    
            Backported from mainline
            2019-08-02  Jakub Jelinek  <jakub@redhat.com>
    
            * quadmath.h (M_Eq, M_LOG2Eq, M_LOG10Eq, M_LN2q, M_LN10q, M_PIq,
            M_PI_2q, M_PI_4q, M_1_PIq, M_2_PIq, M_2_SQRTPIq, M_SQRT2q,
            M_SQRT1_2q): Use two more decimal places.
    
    From-SVN: r277242

commit b1a1f2b34c7e32a3505a40fe22d58ea5d33fb439
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Oct 21 00:16:13 2019 +0000

    Daily bump.
    
    From-SVN: r277220

commit d0175ab0afa0fb79703c170a88232248b1cdbdec
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Oct 20 00:16:24 2019 +0000

    Daily bump.
    
    From-SVN: r277208

commit 4f8bfc8eeff308c70750ef02087dedc7cdb1112a
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Oct 19 00:18:12 2019 +0000

    Daily bump.
    
    From-SVN: r277198

commit 11aa1d02287077b5d6d01db0b19d3433c14e4129
Author: Steven G. Kargl <kargl@gcc.gnu.org>
Date:   Fri Oct 18 17:59:32 2019 +0000

    re PR fortran/69455 ([F08] Assembler error(s) when using intrinsic modules in two BLOCK)
    
    2019-10-18  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/69455
            * trans-decl.c (generate_local_decl): Avoid misconstructed
            intrinsic modules in a BLOCK construct.
    
    2019-10-18  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/69455
            * gfortran.dg/pr69455_1.f90: New test.
            * gfortran.dg/pr69455_2.f90: Ditto.
    
    From-SVN: r277160

commit 412f7637d16c6e791e2787fd667ff4a8dcafcadb
Author: Tobias Burnus <tobias@codesourcery.com>
Date:   Fri Oct 18 12:38:26 2019 +0000

    Fortran] PR91586 Fix ICE on invalid code with CLASS
    
            gcc/fortran/
            Backport from mainline
            2019-10-18  Tobias Burnus  <tobias@codesourcery.com>
    
            PR fortran/91586
            * class.c (gfc_find_derived_vtab): Return NULL
            instead of deref'ing NULL pointer.
    
            gcc/testsuite/
            Backport from mainline
            2019-10-18  Tobias Burnus  <tobias@codesourcery.com>
    
            PR fortran/91586
            * gfortran.dg/class_71.f90: New.
    
    From-SVN: r277154

commit 3c6c71fcdafd1cd8cb0c51d4dc54e6e3782c2f14
Author: Georg-Johann Lay <avr@gjlay.de>
Date:   Fri Oct 18 09:10:20 2019 +0000

    backport: re PR target/86040 ([avr]: RAMPZ is not always cleared after loading __flashN data)
    
            Backport from 2019-10-18 trunk r277143.
            PR target/86040
            * config/avr/avr.c (avr_out_lpm): Do not shortcut-return.
    
    From-SVN: r277147

commit 473237d3ca7120e2c0fdfe63115320ccb2418800
Author: Georg-Johann Lay <gjl@gcc.gnu.org>
Date:   Fri Oct 18 09:06:40 2019 +0000

    avr-mmcu.texi: Re-generate because config/avr/avr-devices.c was changed in r269487.
    
            * doc/avr-mmcu.texi: Re-generate because config/avr/avr-devices.c
            was changed in r269487.
    
    From-SVN: r277146

commit 5b236c5474161ec727697a4d64cf9d786697a9b4
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Fri Oct 18 08:42:41 2019 +0000

    [Darwin] Amend section for constants with relocations.
    
    Darwin's linker doesn't like text section relocations (they require special
    enabling).  The Fortran FE, at least, seems to generate cases where the
    initialiser for a pointer constant can need a relocation.  We can handle
    this by special-casing SECCAT_RODATA when the relocation is present by
    placing the constant in the .const_data section.
    
    gcc/
    
    2019-10-18  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline
            2019-10-05  Iain Sandoe  <iain@sandoe.co.uk>
    
            PR target/59888
            * config/darwin.c (darwin_rodata_section): Add relocation flag,
            choose const_data section for constants with relocations.
            (machopic_select_section): Pass relocation flag to
            darwin_rodata_section ().
    
    From-SVN: r277145

commit 18ab02dc31387549aaeb672ad8c553c93f8ae6d5
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Fri Oct 18 07:54:12 2019 +0000

    [Darwin] Update machopic_legitimize_pic_address.
    
    Some changes were missed here in the transition to LRA. The Darwin
    archs are all using LRA now, testing for reload is not correct.
    
    2019-10-18  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline
            2019-09-21  Iain Sandoe  <iain@sandoe.co.uk>
    
            * config/darwin.c (machopic_legitimize_pic_address): Check
            for lra, rather than reload.
    
    From-SVN: r277144

commit 2de95dfec04a049e63d0b6cec7d20737f80c60a4
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Oct 18 00:16:18 2019 +0000

    Daily bump.
    
    From-SVN: r277139

commit f1c20217340477b476c4f20775f53da47e42be95
Author: John David Anglin <danglin@gcc.gnu.org>
Date:   Thu Oct 17 22:44:24 2019 +0000

    pa.c (pa_output_indirect_call): Fix typos in last change.
    
            * config/pa/pa.c (pa_output_indirect_call): Fix typos in last change.
    
    From-SVN: r277136

commit aef382794410731004a3e76620f9b85022295f30
Author: Richard Earnshaw <rearnsha@arm.com>
Date:   Thu Oct 17 16:45:46 2019 +0000

    [arm]  PR target/89400 fix thumb1 unaligned access expansion
    
    Armv6 has support for unaligned accesses to memory.  However, the
    thumb1 code patterns were trying to use the 32-bit code constraints.
    One failure mode from this was that the patterns are designed to be
    compatible with conditional execution and this was then causing an
    assert in the compiler.
    
    The unaligned_loadhis pattern is only used for expanding extv, which
    in turn is only enabled for systems supporting thumb2.  Given that
    there is no simple expansion for a thumb1 sign-extending load (the
    instruction has no immediate offset form and requires two registers in
    the address) it seems simpler to just disable this for thumb1.
    
    Fixed thusly:
    
            Backport from trunk:
            2019-05-03  Richard Earnshaw  <rearnsha@arm.com>
    
            PR target/89400
            * config/arm/arm.md (unaligned_loadsi): Add variant for thumb1.
            Restrict 'all' variant to 32-bit configurations.
            (unaligned_loadhiu): Likewise.
            (unaligned_storehi): Likewise.
            (unaligned_storesi): Likewise.
            (unaligned_loadhis): Disable when compiling for thumb1.
    
    From-SVN: r277123

commit 07136dbc062b9a6f0cb8719ea0de1048d00a80bc
Author: Steven G. Kargl <kargl@gcc.gnu.org>
Date:   Thu Oct 17 16:30:25 2019 +0000

    re PR fortran/83113 (Bogus "duplicate allocatable attribute" error for submodule character function)
    
    2019-10-17  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/83113
            PR fortran/89943
            decl.c (gfc_match_function_decl): Ignore duplicate BIND(C) for function
            declaration in submodule.  Implement at check for F2018 C1550.
            (gfc_match_entry): Use temporary for locus, which allows removal of
            one gfc_error_now().
            (gfc_match_subroutine): Ignore duplicate BIND(C) for subroutine
            declaration in submodule.  Implement at check for F2018 C1550.
    
    2019-10-17  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/83113
            PR fortran/89943
            * gfortran.dg/pr89943_1.f90: New test.
            * gfortran.dg/pr89943_2.f90: Ditto.
            * gfortran.dg/pr89943_3.f90: Ditto.
            * gfortran.dg/pr89943_4.f90: Ditto.
    
    From-SVN: r277122

commit 949e5c7be1f35cb1ef86d65d7da6d62cbc7914be
Author: Bill Schmidt <wschmidt@linux.ibm.com>
Date:   Thu Oct 17 15:32:40 2019 +0000

    backport: re PR testsuite/92093 (New test case gcc.target/powerpc/pr91275.c from r276410 fails on BE)
    
    2019-10-17  Bill Schmidt  <wschmidt@linux.ibm.com>
    
            Backport from mainline
            2019-10-15  Bill Schmidt  <wschmidt@linux.ibm.com>
    
            PR target/92093
            * gcc.target/powerpc/pr91275.c: Fix type and endian issues.
    
    From-SVN: r277117

commit 1d0b59fa1f2691a56b7958d1ab7b637f3bdd5eaf
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Oct 17 00:16:13 2019 +0000

    Daily bump.
    
    From-SVN: r277087

commit 4513e4dd3c3256f47af83ba05260f6317cef2d28
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Wed Oct 16 19:22:17 2019 +0000

    [Darwin] Pick up SDKROOT as the sysroot fallback.
    
    For compatibility with xcrun and the behaviour of the clang driver, make use
    of the setting of the SDKROOT environment variable when it is available.
    This applies to both finding headers and libraries (i.e. it is also passed to
    ld64).
    
    Priority:
    1. User's command-line specified --sysroot= or -isysroot.
    2. The SDKROOT variable when set, and validated.
    3. Any sysroot provided by --with-sysroot= configuration parameter.
    
    SDKROOT is checked thus:
    1. Presence.
    2. That it starts with / (i.e. 'absolute').
    3. That it is not / only (since that's the default).
    4. That it is readable by the process executing the driver.
    
    This is pretty much the same rule set as used by the clang driver.
    
    NOTE: (3) might turn out to be overly restrictive in the case that we
    have configured with --with-sysroot= and then we want to run on a system
    with an installation of the headers/libraries in /. We can revisit this
    if that turns out to be an important use-case.
    
    So one can do:
    
    xcrun --sdk macosx /path/to/gcc ....
    
    and that provides the SDK path as the sysroot to GCC as expected.
    
    CAVEAT: An unfortunate effect of the fact that gcc (and g++) are
    executables in the Xcode installation, which are found ahead of any such
    named in the /usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin:/Library/TeX/texbin:/usr/local/tools/gcc-2016/bin:
    
    PATH=/path/to/gcc/install:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin:/Library/TeX/texbin:/usr/local/tools/gcc-2016/bin
    xcrun --sdk macosx gcc ....
    
    does *not* work, instead that executes the clang from the xcode/commmand
    line tools installation.
    
    PATH=/path/to/gcc/install:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin:/Library/TeX/texbin:/usr/local/tools/gcc-2016/bin
    xcrun --sdk macosx x64_64-apple-darwinXX-gcc ...
    
    does work as expected, however.
    
    2019-10-16  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline
            2019-10-03  Iain Sandoe  <iain@sandoe.co.uk>
    
            PR target/87243
            * config/darwin-driver.c (maybe_get_sysroot_from_sdkroot): New.
            (darwin_driver_init): Use the sysroot provided by SDKROOT when that
            is available and the user has not set one on the command line.
    
    From-SVN: r277079

commit 3fb05f2ad3356f88a947f45d7485c769ab484817
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Wed Oct 16 19:12:33 2019 +0000

    [Darwin, specs] Backport fixes for driver handling of PIE options.
    
    pie, no-pie and rdynamic are driver options, we can process them in the
    relevant place and drop them once dealt with. There's no need to generate
    a new header to process the no_compact_unwind which is applied on the
    basis of the target system.
    
    Support for the -pie, -no_pie and -no_compact_unwind options should ideally
    be checked at configure time, however the status quo is to assert that linkers
    capable of targeting the relevant systems support these options (i.e. we trust
    that the user doesn't attempt to configure inappropriately).
    
    TODO: check the availability of the linker opts in configure rather than
    trusting to the user.
    
    This will fix the fail of pie-7.c, which is a result of failing to handle the
    no-pie driver option.
    
    2019-10-16  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline
            2019-07-03  Iain Sandoe  <iain@sandoe.co.uk>
    
            * config/darwin.h (DRIVER_SELF_SPECS): Remove the linker cases.
            (RDYNAMIC): Rename to, DARWIN_RDYNAMIC.
            (DARWIN_PIE_SPEC, DARWIN_NOPIE_SPEC): Adjust to remove the Xlinker
            clauses.
            (LINK_COMMAND_SPEC_A): Add DARWIN_RDYNAMIC, DARWIN_PIE_SPEC and
            DARWIN_NOPIE_SPEC.
    
            Backport from mainline
            2019-06-19  Iain Sandoe  <iain@sandoe.co.uk>
    
            * config/darwin.h (DRIVER_SELF_SPECS): Add RDYNAMIC, DARWIN_PIE_SPEC
            and DARWIN_NOPIE_SPEC.
            (RDYNAMIC): New, modified from DARWIN_EXPORT_DYNAMIC.
            (DARWIN_PIE_SPEC): Collate from darwin.h and darwin9.h.
            (DARWIN_NOPIE_SPEC): Collate from darwin10.h.
            (DARWIN_NOCOMPACT_UNWIND): New from darwin10.h
            (DARWIN_EXPORT_DYNAMIC): Delete.
            * config/darwin10.h (LINK_GCC_C_SEQUENCE_SPEC): Move no_compact_unwind
            and pie options processing to  darwin.h.
            * config/darwin9.h (DARWIN_PIE_SPEC): Move pie processing to darwin.h
    
    From-SVN: r277078

commit c7f4da9f30b89c324a824d4433f0499583d50b32
Author: Richard Biener <rguenther@suse.de>
Date:   Wed Oct 16 09:25:34 2019 +0000

    Backport PRs 91606, 91772, 91790, 91812, 91968
    
    2019-10-16  Richard Biener  <rguenther@suse.de>
    
            Backport from mainline
            2019-10-04  Richard Biener  <rguenther@suse.de>
    
            PR lto/91968
            * tree.c (find_decls_types_r): Do not remove LABEL_DECLs from
            BLOCK_VARS.
    
            2019-10-02  Richard Biener  <rguenther@suse.de>
    
            PR c++/91606
            * decl.c (build_ptrmemfunc_type): Mark pointer-to-member
            fat pointer structure members as DECL_NONADDRESSABLE_P.
    
            * g++.dg/torture/pr91606.C: New testcase.
    
            2019-09-19  Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/91812
            * tree-ssa-phiprop.c (propagate_with_phi): Do not replace
            volatile loads.
    
            * gcc.dg/torture/pr91812.c: New testcase.
    
            2019-09-17  Richard Biener  <rguenther@suse.de>
    
            PR debug/91772
            * dwarf2out.c (dwarf2out_late_global_decl): If early dwarf
            was missing generate locations only once.
    
            2019-09-17  Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/91790
            * tree-vect-stmts.c (vectorizable_load): For BB vectorization
            use the correct DR for setting up realignment.
    
    From-SVN: r277055

commit 80f606b1f3593b1b20d4348b327cb8b69e7d8f99
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Oct 16 00:16:11 2019 +0000

    Daily bump.
    
    From-SVN: r277032

commit 68397a8ff9dfb7026e70512ab67219552335974e
Author: John David Anglin <danglin@gcc.gnu.org>
Date:   Tue Oct 15 22:20:12 2019 +0000

    fptr.c (_dl_read_access_allowed): Change argument to unsigned int.
    
            * config/pa/fptr.c (_dl_read_access_allowed): Change argument to
            unsigned int.  Adjust callers.
            (__canonicalize_funcptr_for_compare): Change plabel type to volatile
            unsigned int *.  Load relocation offset before function pointer.
            Add barrier to ensure ordering.
    
    From-SVN: r277016

commit cecc781c19a2554710c76c85323ad85a5480c69f
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Oct 15 00:16:13 2019 +0000

    Daily bump.
    
    From-SVN: r276981

commit e504cd9a4f4aeb98793795cf1c8b0d677da6290f
Author: Will Schmidt <will_schmidt@vnet.ibm.com>
Date:   Mon Oct 14 18:11:47 2019 +0000

    backport: rs6000-builtin.def: (LVSL...
    
    Backport from trunk
    [gcc]
    
    2019-09-26  Will Schmidt <will_schmidt@vnet.ibm.com>
            * config/rs6000/rs6000-builtin.def: (LVSL, LVSR, LVEBX, LVEHX,
            LVEWX, LVXL, LVXL_V2DF, LVXL_V2DI, LVXL_V4SF, LVXL_V4SI, LVXL_V8HI,
            LVXL_V16QI, LVX, LVX_V1TI, LVX_V2DF, LVX_V2DI, LVX_V4SF, LVX_V4SI,
            LVX_V8HI, LVX_V16QI, LVLX, LVLXL, LVRX, LVRXL, LXSDX, LXVD2X_V1TI,
            LXVD2X_V2DF, LXVD2X_V2DI, LXVDSX, LXVW4X_V4SF, LXVW4X_V4SI,
            LXVW4X_V8HI, LXVW4X_V16QI, LD_ELEMREV_V1TI, LD_ELEMREV_V2DF,
            LD_ELEMREV_V2DI, LD_ELEMREV_V4SF, LD_ELEMREV_V4SI, LD_ELEMREV_V8HI,
            LD_ELEMREV_V16QI): Use the PURE attribute.
    
    [testsuite]
    
    2019-09-26  Will Schmidt <will_schmidt@vnet.ibm.com>
            * gcc.target/powerpc/pure-builtin-redundant-load.c:  New.
    
    From-SVN: r276966

commit 711cd9cea2707ba53945a2cc2f31df45cbecef1e
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Oct 14 00:16:12 2019 +0000

    Daily bump.
    
    From-SVN: r276946

commit 9fe3fc5d562f45ebdbee64856e1df1c167dc2f05
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Oct 13 00:16:40 2019 +0000

    Daily bump.
    
    From-SVN: r276932

commit 6f3b5c4d459412da52fb65db5d551bcc73fe8cd0
Author: John David Anglin <danglin@gcc.gnu.org>
Date:   Sat Oct 12 20:39:41 2019 +0000

    pa.c (pa_output_call): Load descriptor address to register %r22.
    
            * config/pa/pa.c (pa_output_call): Load descriptor address to register
            %r22.  Load function address before global pointer.
            (pa_attr_length_indirect_call): Adjust length of inline versions of
            $$dyncall.
            (pa_output_indirect_call): Remove fast inline version of $$dyncall
            before normal cases.  Update inline $$dyncall sequences to preserve
            function descriptor address in register %r22.
            (TRAMPOLINE_CODE_SIZE): Adjust.
            (pa_asm_trampoline_template): Revise 32-bit trampoline.  Don't assume
            register %r22 contains trampoline address.
            (pa_trampoline_init): Adjust offsets.
            (pa_trampoline_adjust_address): Likewise.
            * config/pa/pa.h (TRAMPOLINE_SIZE): Adjust 32-bit size.
    
    From-SVN: r276929

commit f0e39057b68bc7dfd3cc2f9791ebb42b06338f66
Author: John David Anglin <danglin@gcc.gnu.org>
Date:   Sat Oct 12 19:44:29 2019 +0000

    lib2funcs.S (__gcc_plt_call): Load branch target to %r21.
    
            * config/pa/lib2funcs.S (__gcc_plt_call): Load branch target to %r21.
            Load PIC register after branch target.  Fix white space.
            * config/pa/milli64.S ($$dyncall): Separate LINUX and non LINUX
            implementations.  Load PIC register after branch target.  Don't
            clobber function pointer when it points to function descriptor.
            Use nullification instead of branch in LINUX implementation.
    
    From-SVN: r276927

commit 72c1a8216d2f1706fad8206043104a6bb27396f4
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Sat Oct 12 14:49:21 2019 +0000

    re PR ada/91995 (gnat miscompilation and bootstrap failure on m68k-linux)
    
            PR ada/91995
            * sem_ch8.adb (Chain_Use_Clause): Remove second argument in calls
            to Defining_Entity.
            * sem_elab.adb (Find_Unit_Entity): Likewise.  Deal with N_Subunit
            here in lieu of in Defining_Entity.
            * sem_spark.adb (Check_Callable_Body): Likewise.
            (Check_Package_Body): Likewise.
            * sem_util.ads (Defining_Entity): Remove 2nd and 3th parameters.
            * sem_util.adb (Defining_Entity): Remove 2nd and 3th parameters,
            and adjust accordingly.  Deal with N_Compilation_Unit.
    
    From-SVN: r276917

commit 47c5cac3e640099d063f5f57260ea57d372c80cd
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Oct 12 00:16:13 2019 +0000

    Daily bump.
    
    From-SVN: r276911

commit a0368cad1d5e7a69035b4b5117167116c3259af4
Author: Steven G. Kargl <kargl@gcc.gnu.org>
Date:   Fri Oct 11 20:19:28 2019 +0000

    re PR fortran/91715 (ICE in resolve_fntype, at fortran/resolve.c:16884)
    
    2019-10-11  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/91715
            * decl.c (gfc_match_prefix): If matching a type-spec returns an error,
            it's an error so re-act correctly.
    
    2019-10-11  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/91715
            * gfortran.dg/function_kinds_5.f90: Prune run-on error.
            * gfortran.dg/pr85543.f90: Ditto.
            * gfortran.dg/pr91715.f90: New test.
    
    From-SVN: r276905

commit 2a5edf217057ad2d2d89bfde1a7d4c5f19f8faf8
Author: Steven G. Kargl <kargl@gcc.gnu.org>
Date:   Fri Oct 11 20:06:15 2019 +0000

    re PR fortran/91649 (ICE in gfc_resolve_findloc, at fortran/iresolve.c:1827)
    
    2019-10-11  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/91649
            check.c (gfc_check_findloc): Additional checking for valid arguments
    
    2019-10-11  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/91649
            * gfortran.dg/pr91649.f90: New test.
    
    From-SVN: r276904

commit 10532b8acc8acab9138013010120aa296942ad78
Author: Joseph Myers <joseph@codesourcery.com>
Date:   Fri Oct 11 18:24:22 2019 +0100

    * fi.po: Update.
    
    From-SVN: r276895

commit 4c675f6df459adc215114391742d0aefea70b51e
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Fri Oct 11 08:57:37 2019 +0000

    decl.c (annotate_value): Really test the sign of the value when deciding to build a NEGATE_EXPR.
    
            * gcc-interface/decl.c (annotate_value) <INTEGER_CST>: Really test the
            sign of the value when deciding to build a NEGATE_EXPR.
            <PLUS_EXPR>: Remove redundant line.
            <BIT_AND_EXPR>: Do the negation here.
    
    From-SVN: r276867

commit cb16c175bb9832f6f1136585a4b37a979a508dd9
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Oct 11 00:16:38 2019 +0000

    Daily bump.
    
    From-SVN: r276857

commit 7c2031db034b6e7ad2d144166b4aa99356bcf39c
Author: Steven G. Kargl <kargl@gcc.gnu.org>
Date:   Thu Oct 10 21:56:08 2019 +0000

    re PR fortran/91801 (ICE in gfc_simplify_reshape, at fortran/simplify.c:6733)
    
    2019-10-10  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/91801
            * simplify.c (gfc_simplify_reshape): Convert a gcc_assert into a
            gfc_error as a user can easily hit the condition.
    
    2019-10-10  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/91801
            * gfortran.dg/pr91801.f90: New test.
    
    From-SVN: r276853

commit 082b25fb77f6f1fdb104c5f2d62ae5ef7ff1bb98
Author: Uros Bizjak <ubizjak@gmail.com>
Date:   Thu Oct 10 19:45:40 2019 +0200

    re PR target/92022 (ICE in alpha_handle_trap_shadows, at config/alpha/alpha.c:8847)
    
            PR target/92022
            * config/alpha/alpha.c (alpha_handle_trap_shadows): Skip DEBUG_INSN.
    
    testsuite/ChangeLog:
    
            PR target/92022
            * g++.dg/pr92022.C: New test.
    
    From-SVN: r276844

commit 26c8923aab1935ee09997acf10c8aba57a7a2a6c
Author: Oleg Endo <olegendo@gcc.gnu.org>
Date:   Thu Oct 10 15:24:05 2019 +0000

    backport: re PR target/88630 (Incorrect float negating together with convertion to int on ST-40)
    
    gcc/
            Backport from mainline
            2019-10-10  Oleg Endo  <olegendo@gcc.gnu.org>
    
            PR target/88630
            * config/sh/sh.h (TARGET_FPU_SH4_300): New macro.
            * config/sh/sh.c (sh_option_override): Enable fsca and fsrra insns
            also for TARGET_FPU_SH4_300.
            (sh_emit_mode_set): Check for TARGET_FPU_SH4_300 instead of
            TARGET_SH4_300.
            * config/sh/sh.md (toggle_pr): Add TARGET_FPU_SH4_300 condition.
            (negsf2): Expand to either negsf2_fpscr or negsf2_no_fpscr.
            (*negsf2_i): Split into ...
            (negsf2_fpscr, negsf2_no_fpscr): ... these new patterns.
            (abssf2): Expand to either abssf2_fpsc or abssf2_no_fpsc.
            (**abssf2_i): Split into ...
            (abssf2_fpscr, abssf2_no_fpscr): ... these new patterns.
            (negdf2): Expand to either negdf2_fpscr or negdf2_no_fpscr.
            (*negdf2_i): Split into ...
            (negdf2_fpscr, negdf2_no_fpscr): ... these new patterns.
            (absdf2): Expand to either absdf2_fpscr or absdf2_no_fpsc.
            (**abssf2_i): Split into ...
            (absdf2_fpscr, absdf2_no_fpscr): ... these new patterns.
    
    From-SVN: r276825

commit ac017398dc68ab68f5981bf1839717554ddd20eb
Author: Andreas Krebbel <krebbel@linux.ibm.com>
Date:   Thu Oct 10 09:09:42 2019 +0000

    S/390: Add support for z15 as CPU name.
    
    So far z15 was identified as arch13. After the machine has been
    announced we can now add the real name.
    
    gcc/ChangeLog:
    
    2019-10-10  Andreas Krebbel  <krebbel@linux.ibm.com>
    
            Backport from mainline
            2019-10-10  Andreas Krebbel  <krebbel@linux.ibm.com>
    
            * common/config/s390/s390-common.c (PF_ARCH13): Rename to...
            (PF_Z15): ... this.
            * config.gcc: Add z15 as option for --with-arch and --with-tune
            configure switches.
            * config/s390/s390-c.c (s390_resolve_overloaded_builtin): Add
            error reporting for unsupported builtins.
            * config/s390/s390-opts.h (enum processor_type): Rename
            PROCESSOR_8561_ARCH13 to PROCESSOR_8561_Z15.
            * config/s390/8561.md: Rename arch13 to z15 throughout the file.
            * config/s390/driver-native.c (s390_host_detect_local_cpu):
            Likewise.
            * config/s390/s390-builtins.def: Likewise.
            * config/s390/s390.c (processor_table): Add z15 as option and keep arch13 as alternative.
            (s390_expand_builtin): Add missing check for unsupported builtins.
            (s390_canonicalize_comparison): Rename TARGET_ARCH13 to TARGET_Z15.
            (s390_rtx_costs): Likewise.
            (s390_get_sched_attrmask): Rename arch13 to z15.
            (s390_get_unit_mask): Likewise.
            (s390_is_fpd): Likewise.
            (s390_is_fxd): Likewise.
            * config/s390/s390.h (enum processor_flags): Likewise.
            * config/s390/s390.md: Likewise.
            * config/s390/vector.md: Likewise.
            * config/s390/vx-builtins.md: Likewise.
            * config/s390/s390.opt: Add z15 to processor_type value.
    
    From-SVN: r276793

commit e730a1dcafaa5307825418e329f3dd4f68dd1d4c
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Oct 10 00:16:15 2019 +0000

    Daily bump.
    
    From-SVN: r276785

commit 1cc19198e67ebb038cf21926f882098bb9415d21
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Oct 9 00:16:18 2019 +0000

    Daily bump.
    
    From-SVN: r276749

commit b3416a9a6256daa997cb59fe0b17fefe5e712a2f
Author: Marek Polacek <polacek@redhat.com>
Date:   Tue Oct 8 13:38:35 2019 +0000

    PR c++/91740 - ICE with constexpr call and ?: in ARRAY_REF.
    
            * pt.c (build_non_dependent_expr): Call build_non_dependent_expr for
            the first operand.
    
    From-SVN: r276699

commit cec06322ce0a94f5716c4c310e360656cd9f5131
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Oct 8 00:16:12 2019 +0000

    Daily bump.
    
    From-SVN: r276684

commit c5b2ab5b80ccfc4995609f7bbd8da15525cae0d5
Author: Thomas Koenig <tkoenig@gcc.gnu.org>
Date:   Mon Oct 7 20:10:22 2019 +0000

    backport: re PR fortran/84487 (Large rodate section increase in 465.tonto with r254427)
    
    2019-10-07  Thomas Koenig <tkoenig@gcc.gnu.org>
    
            Backport from trunk
            PR fortran/84487
            * trans-decl.c (gfc_get_symbol_decl): For __def_init, set
            DECL_ARTIFICAL and do not set TREE_READONLY.
    
    2019-10-07  Thomas Koenig <tkoenig@gcc.gnu.org>
    
            Backport from trunk
            PR fortran/84487
            * gfortran.dg/typebound_call_22.f03: xfail.
    
    From-SVN: r276672

commit eb9379e2ce69582a6771a435e68b50be4469a6fb
Author: Bill Schmidt <wschmidt@linux.ibm.com>
Date:   Mon Oct 7 18:23:20 2019 +0000

    backport: re PR target/91275 (__builtin_crypto_vpmsumd gives different results -O[123] vs -O0)
    
    [gcc]
    
    2019-10-07  Bill Schmidt  <wschmidt@linux.ibm.com>
    
            Backport from mainline
            2019-10-01  Bill Schmidt  <wschmidt@linux.ibm.com>
    
            PR target/91275
            * config/rs6000/rs6000-p8swap.c (rtx_is_swappable_p): Don't swap
            vpmsumd.
    
    [gcc/testsuite]
    
    2019-10-07  Bill Schmidt  <wschmidt@linux.ibm.com>
    
            Backport from mainline
            2019-10-01  Bill Schmidt  <wschmdit@linux.ibm.com>
    
            PR target/91275
            * gcc.target/powerpc/pr91275.c: New.
    
    From-SVN: r276667

commit 5d584583e25c1b268e587680185e8928fab0d4ed
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Oct 7 00:16:21 2019 +0000

    Daily bump.
    
    From-SVN: r276643

commit 82f6a2872fb3d4516f12d5e4208623f3aa4e0136
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Oct 6 00:16:33 2019 +0000

    Daily bump.
    
    From-SVN: r276633

commit af7096d694a3a0790512ae9cfd6b48f0b382da6b
Author: Steven G. Kargl <kargl@gcc.gnu.org>
Date:   Sat Oct 5 15:42:25 2019 +0000

    re PR fortran/47054 (Compilation error when cray pointers are declared in both host and internal subroutines)
    
    2019-10-05  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/47054
            * decl.c (variable_decl): Do not search parent namespace for symbol.
    
    2019-10-05  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/47054
            * gfortran.dg/pr47054_1.f90: New test
            * gfortran.dg/pr47054_2.f90: Ditto.
    
    From-SVN: r276628

commit 40d2b0af815e368d648152b5c9c59c4a54a38fae
Author: Andrea Corallo <andrea.corallo@arm.com>
Date:   Sat Oct 5 09:02:25 2019 +0000

    Backport fix for PR jit/91928
    
    gcc/ChangeLog
    
    2019-10-05  Andrea Corallo  <andrea.corallo@arm.com>
    
            Backport from mainline
            2019-10-03  Andrea Corallo  <andrea.corallo@arm.com>
            * gcc/ipa-cp.c (ipa_cp_c_finalize): Release ipcp_transformation_sum
            when finished.
            * ipa-prop.c (ipcp_free_transformation_sum): New function.
            * ipa-prop.h (ipcp_free_transformation_sum): Add declaration.
    
    From-SVN: r276625

commit aaeb2de7821b43332af853832d5dcf757dd9e5b6
Author: Steven G. Kargl <kargl@gcc.gnu.org>
Date:   Sat Oct 5 04:05:05 2019 +0000

    re PR fortran/91942 (ICE in match_vtag, at fortran/io.c:1485)
    
    2019-10-04  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/91942
            * io.c (match_vtag): Check for non-NULL result->symtree.
            (match_out_tag): Check for invalid constant due to inquiry parameter.
            (match_filepos): Instead of a syntax error, go to cleanup to get better
            error messages.
    
    2019-10-04  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/91942
            * gfortran.dg/pr91587.f90: Update dg-error regex.
            * gfortran.dg/pr91942.f90: New test.
    
    From-SVN: r276620

commit 4e58c9a2c75ca2b5466b9e6eb87d86b148553ba4
Author: Steven G. Kargl <kargl@gcc.gnu.org>
Date:   Sat Oct 5 03:55:05 2019 +0000

    re PR fortran/91785 (ICE in check_assumed_size_reference, at fortran/resolve.c:1601)
    
    2019-10-04  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/91785
            * primary.c (gfc_match_varspec): Ensure an inquiry parameter has
            it locus set.
    
    2019-10-04  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/91785
            * gfortran.dg/pr91785.f90: New test.
    
    From-SVN: r276619

commit 6c59051d8480c59f81d600011f5d38247f068165
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Oct 5 00:16:16 2019 +0000

    Daily bump.
    
    From-SVN: r276617

commit aeee85cef5173e4e6068087f25213c2012ed495d
Author: Dragan Mladjenovic <dmladjenovic@wavecomp.com>
Date:   Fri Oct 4 11:10:01 2019 +0000

    Backport fix for PR target/91769
    
    gcc/ChangeLog:
    
    2019-10-04  Dragan Mladjenovic <dmladjenovic@wavecomp.com>
    
            Backport from mainline
            2019-10-03  Dragan Mladjenovic  <dmladjenovic@wavecomp.com>
    
                    PR target/91769
                    * config/mips/mips.c (mips_split_move): Use reg_overlap_mentioned_p
                    instead of REGNO equality check on addr.reg.
    
    gcc/testsuite/ChangeLog:
    
    2019-10-04  Dragan Mladjenovic <dmladjenovic@wavecomp.com>
    
            Backport from mainline
            2019-10-03  Dragan Mladjenovic  <dmladjenovic@wavecomp.com>
    
                    PR target/91769
                    * gcc.target/mips/pr91769.c: New test.
    
    From-SVN: r276570

commit b753d85d205b4e24f0ce11160ebee1e8da98782e
Author: Dragan Mladjenovic <draganm@gcc.gnu.org>
Date:   Fri Oct 4 10:57:48 2019 +0000

    Backprot fix for uninitialised use in mips_split_move
    
    Fixes PR target/91474 and PR target/91702.
    
    2019-10-04  Dragan Mladjenovic  <dmladjenovic@wavecomp.com>
    
            Backport from mainline
            2019-07-07  Richard Sandiford  <richard.sandiford@arm.com>
    
            gcc/
                    * config/mips/mips.c (mips_split_move): Zero-initialize addr
                    and check whether addr.reg is nonnull before using it.
    
    From-SVN: r276569

commit 3d583f47b7eca6b64dd221a3a89f07593e299e27
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Oct 4 00:16:23 2019 +0000

    Daily bump.
    
    From-SVN: r276559

commit 251de2cc07cb6dd0217cf23527e82daceeae152a
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Oct 3 00:16:15 2019 +0000

    Daily bump.
    
    From-SVN: r276501

commit 091421018c0d22c4319830d2dbc2fd778d1cc778
Author: Bernd Edlinger <bernd.edlinger@hotmail.de>
Date:   Wed Oct 2 13:22:37 2019 +0000

    backport: re PR fortran/91716 (ICE in output_constant, at varasm.c:5026)
    
    2019-10-02  Bernd Edlinger  <bernd.edlinger@hotmail.de>
    
            Backport from mainline
    
            2019-09-13  Bernd Edlinger  <bernd.edlinger@hotmail.de>
    
            PR fortran/91716
            * trans-array.c (gfc_conv_array_initializer): Always assign the
            array type of the field to the string constant.
    
            PR fortran/91716
            * gfortran.dg/pr91716.f90: New test.
    
    From-SVN: r276458

commit 69e83e50177e65d3193eb002752d3e1711cd03bb
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Oct 2 00:16:15 2019 +0000

    Daily bump.
    
    From-SVN: r276437

commit a68dbdc9d923ab5849ed1ffca2762d6df7bb793b
Author: Steven G. Kargl <kargl@gcc.gnu.org>
Date:   Tue Oct 1 19:21:05 2019 +0000

    [multiple changes]
    
    2019-10-01  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/91864
            * gcc/fortran/io.c (match_io_element): An inquiry parameter cannot be
            read into.
            * gcc/fortran/match.c (gfc_match_allocate): An inquiry parameter
            can be neither an allocate-object nor stat variable.
            (gfc_match_deallocate): An inquiry parameter cannot be deallocated.
    
    2019-10-01 Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/91864
            * gcc/testsuite/gfortran.dg/pr91864.f90
    
    From-SVN: r276425

commit 2d280a1cfd06547ae057f277a40f532074bc4f9f
Author: Steven G. Kargl <kargl@gcc.gnu.org>
Date:   Tue Oct 1 18:58:01 2019 +0000

    backport: re PR fortran/91802 (ICE in mio_name_expr_t, at fortran/module.c:2141)
    
    2019-10-01  Steven G. Kargl  <kargl@gcc.ngu.org>
    
            Backport of r276254+276265
            PR fortran/91802
            * decl.c (attr_decl1): Check if rank+corank > 15.
    
    2019-10-01  Steven G. Kargl  <kargl@gcc.ngu.org>
    
            PR fortran/91802
            * gfortran.dg/pr91802.f90: New test.
    
    From-SVN: r276423

commit f934bfb41660862d196413e7fb7b69264be20c38
Author: Steven G. Kargl <kargl@gcc.gnu.org>
Date:   Tue Oct 1 18:37:53 2019 +0000

    re PR fortran/91714 (Accepts type statement without delimiter in free form)
    
    2019-10-01  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/91714
            * decl.c (gfc_match_decl_type_spec):  Issue errors for a few
            mangled types.
    
    2019-10-01  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/91714
            * gfortran.dg/dec_type_print_3.f90: Update dg-error regex.
            * gfortran.dg/pr91714.f90: New test.
    
    From-SVN: r276421

commit 7c4b35823f78c3c37afb42d79da55a70f0635e14
Author: Steven G. Kargl <kargl@gcc.gnu.org>
Date:   Tue Oct 1 18:16:36 2019 +0000

    re PR fortran/91641 (ICE in gfc_conv_is_contiguous_expr, at fortran/trans-intrinsic.c:2857)
    
    2019-10-01  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/91641
            * check.c (gfc_check_is_contiguous): null() cannot be an actual
            argument to is_contiguous().
    
    2019-10-01  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/91641
            * gfortran.dg/pr91641.f90: New test.
    
    From-SVN: r276419

commit 101400d33c4e584b427a879387936ee14b6f9f64
Author: Oleg Endo <olegendo@gcc.gnu.org>
Date:   Tue Oct 1 14:58:10 2019 +0000

    backport: re PR c++/88562 (Incorrect pointer incrementing on SH4)
    
    gcc/
    2019-10-01  Oleg Endo  <olegendo@gcc.gnu.org>
    
            Backport from mainline
    
            2019-10-01  Oleg Endo  <olegendo@gcc.gnu.org>
    
            PR target/88562
            * config/sh/sh.c (sh_extending_set_of_reg::use_as_extended_reg): Use
            sh_check_add_incdec_notes to preserve REG_INC notes when replacing
            a memory access insn.
    
    From-SVN: r276412

commit 1144493ff5604d53c6494258d1a62684738c0a0e
Author: Kyrylo Tkachov <kyrylo.tkachov@arm.com>
Date:   Tue Oct 1 10:33:40 2019 +0000

    [AArch64] Don't split 64-bit constant stores to volatile location
    
    2019-10-01  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>
    
            Backport from mainline
            2019-09-24  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>
    
            * config/aarch64/aarch64.md (mov<mode>): Don't call
            aarch64_split_dimode_const_store on volatile MEM.
    
            * gcc.target/aarch64/nosplit-di-const-volatile_1.c: New test.
    
    From-SVN: r276398

commit 8ab88e8eb694198abe10f8a2b941e94fec965931
Author: Kyrylo Tkachov <kyrylo.tkachov@arm.com>
Date:   Tue Oct 1 10:28:40 2019 +0000

    driver: Also prune joined switches with negation
    
    2019-10-01  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>
    
            Backport from mainline
            2019-09-26  Matt Turner  <mattst88@gmail.com>
    
            PR driver/69471
            * config/aarch64/aarch64.opt (march=): Add Negative(march=).
            (mtune=): Add Negative(mtune=).
            (mcpu=): Add Negative(mcpu=).
            * config/arm/arm.opt: Likewise.
    
    From-SVN: r276397

commit 7f8b9d0134e69c4c80afe52c83ea13e26e7907ee
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Oct 1 00:16:12 2019 +0000

    Daily bump.
    
    From-SVN: r276385

commit 6cffaf61bac3a874dbe5785fc0ae1043490df9d7
Author: Joseph Myers <joseph@codesourcery.com>
Date:   Mon Sep 30 22:54:07 2019 +0100

    * es.po: Update.
    
    From-SVN: r276381

commit 1bbc9c1280694b7749cd61b74611096157968c17
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Sep 30 00:16:43 2019 +0000

    Daily bump.
    
    From-SVN: r276275

commit c627c7511bf5b8e17a189aed6d3d722de502b3e3
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Sep 29 00:16:27 2019 +0000

    Daily bump.
    
    From-SVN: r276263

commit cc205a58e9385373729ebf91718dffef5097982c
Author: Marek Polacek <polacek@redhat.com>
Date:   Sat Sep 28 11:50:11 2019 +0000

    PR c++/91923 - failure-to-SFINAE with class type NTTP in C++17.
    
            * pt.c (invalid_nontype_parm_type_p): Only emit errors when
            tf_error.
    
            * g++.dg/cpp0x/nontype5.C: New test.
    
    From-SVN: r276250

commit 534d9c823c17f7a6c21169512ed89009bc222fc8
Author: Oleg Endo <olegendo@gcc.gnu.org>
Date:   Sat Sep 28 08:55:03 2019 +0000

    backport: re PR target/86805 (sh port needs updating for CVE-2017-5753)
    
    gcc/
    2019-09-28  Oleg Endo  <olegendo@gcc.gnu.org>
    
            Backport from mainline
            2019-09-28  Oleg Endo  <olegendo@gcc.gnu.org>
    
            PR target/86805
            * config/sh/sh.c (TARGET_HAVE_SPECULATION_SAFE_VALUE): Define.
    
    From-SVN: r276245

commit 7f3471d204808a03dcece94bf71b5365ca78784d
Author: Oleg Endo <olegendo@gcc.gnu.org>
Date:   Sat Sep 28 08:37:23 2019 +0000

    backport: re PR target/80672 (gcc/config/sh/sh.c:716: prefer compare to find.)
    
    gcc/
    2019-09-28  Oleg Endo  <olegendo@gcc.gnu.org>
    
            Backport from mainline
            2019-09-28  Oleg Endo  <olegendo@gcc.gnu.org>
    
            PR target/80672
            * config/sh/sh.c (parse_validate_atomic_model_option): Use
            std::string::compare instead of std::string::find.
    
    From-SVN: r276241

commit 014663c56c059855b0042feef5a33139e74d7d1a
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Sep 28 00:16:20 2019 +0000

    Daily bump.
    
    From-SVN: r276226

commit b15817b5e4789acf371ae6c63633bc1f57df1287
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Sep 27 00:16:16 2019 +0000

    Daily bump.
    
    From-SVN: r276171

commit 0b80f7e7c2df04fc14fe524ae715a2b9c1fa4ea1
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Sep 26 00:16:20 2019 +0000

    Daily bump.
    
    From-SVN: r276138

commit 28e0d7f15c5aa1fabd0b4b23d88d88263363cce9
Author: Kyrylo Tkachov <kyrylo.tkachov@arm.com>
Date:   Wed Sep 25 13:48:29 2019 +0000

    [arm] Fix use of CRC32 intrinsics with Armv8-a and hard-float
    
            Backport from mainline
            2019-08-22  Kyrylo Tkachov <kyrylo.tkachov@arm.com>
    
            * config/arm/arm_acle.h: Use arch=armv8-a+crc+simd pragma for CRC32
            intrinsics if __ARM_FP.
            Use __ARM_FEATURE_CRC32 ifdef guard.
    
            * gcc.target/arm/acle/crc_hf_1.c: New test.
    
    From-SVN: r276126

commit 4905c07ab01155577fcc85644c53530cccc659ce
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Sep 25 00:16:38 2019 +0000

    Daily bump.
    
    From-SVN: r276110

commit 5a49193de498e1a101e15368872023e1c7ce507d
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Sep 24 00:16:32 2019 +0000

    Daily bump.
    
    From-SVN: r276088

commit 792844ba98829ce553a73c8f9f971e21717f9990
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Mon Sep 23 08:08:45 2019 +0000

    trans.c (Attribute_to_gnu): Test Can_Use_Internal_Rep on the underlying type of the node.
    
            * gcc-interface/trans.c (Attribute_to_gnu): Test Can_Use_Internal_Rep
            on the underlying type of the node.
            (Call_to_gnu): Likewise with the type of the prefix.
    
    From-SVN: r276042

commit 2e1e7ad18e121663082525a872f0d6fb32db4535
Author: Max Filippov <jcmvbkbc@gmail.com>
Date:   Mon Sep 23 07:47:14 2019 +0000

    xtensa: backport fix for PR target/90922
    
    Stack pointer adjustment code in prologue missed a case of no
    callee-saved registers and a stack frame size bigger than 128 bytes.
    Handle that case.
    
    This fixes the following gcc tests with call0 ABI:
      gcc.c-torture/execute/stdarg-2.c
      gcc.dg/torture/pr55882.c
      gcc.dg/torture/pr57569.c
    
    gcc/
    2019-09-23  Max Filippov  <jcmvbkbc@gmail.com>
    
            Backport from mainline
            2019-06-18  Max Filippov  <jcmvbkbc@gmail.com>
    
            * config/xtensa/xtensa.c (xtensa_expand_prologue): Add stack
            pointer adjustment for the case of no callee-saved registers and
            stack frame bigger than 128 bytes.
    
    From-SVN: r276037

commit 721fce03953eb29c5e719fbfea53dbd12d02b016
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Sep 23 00:16:20 2019 +0000

    Daily bump.
    
    From-SVN: r276034

commit a387a60d13249c31e1365be32cc353c2c201118e
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Sun Sep 22 19:36:09 2019 +0000

    [Darwin, opts processing] Fix missing RejectNegative etc.
    
    This adds RejectNegative in a number of places it was needed,
    reorders the opts into two groups (one general and one driver-only).
    We also add a minimal description to each opt, and note some that
    are now obsolete. The only functional change is to permit
    -mtarget-linker= as an alias of -mtarget-linker.
    
    This fixes the Darwin part of PR89327
    
    2019-09-22  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline
            2019-06-16  Iain Sandoe  <iain@sandoe.co.uk>
    
            * config/darwin.opt (prebind, noprebind, seglinkedit,
            noseglinkedit): Add RejectNegative.
    
            Backport from mainline
            2019-06-14  Iain Sandoe  <iain@sandoe.co.uk>
    
            * config/darwin.opt: Add RejectNegative where needed, reorder
            and add minimal functional descriptions.
    
    From-SVN: r276031

commit e51a41e50679ab18b3a4a84d6cd19e1f772f36ee
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Sep 22 00:16:12 2019 +0000

    Daily bump.
    
    From-SVN: r276025

commit 698624cd2537076b9fa982bbef91f2b4f4d648de
Author: Paul Thomas <pault@gcc.gnu.org>
Date:   Sat Sep 21 08:35:17 2019 +0000

    backport: re PR fortran/91588 (ICE in check_inquiry, at fortran/expr.c:2673)
    
    2019-09-21  Paul Thomas  <pault@gcc.gnu.org>
    
            Backport from mainline
            PR fortran/91588
            * expr.c (check_inquiry): Remove extended component refs by
            using symbol pointers. If a function argument is an associate
            variable with a constant target, copy the target expression in
            place of the argument expression. Check that the charlen is not
            NULL before using the string length.
    
    2019-09-21  Paul Thomas  <pault@gcc.gnu.org>
    
            Backport from mainline
            PR fortran/91588
            * gfortran.dg/associate_49.f90 : New test.
    
    From-SVN: r276016

commit bb5c6ac3057d8c7de61f1d5a2a29731a98f4d52c
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Sep 21 00:16:13 2019 +0000

    Daily bump.
    
    From-SVN: r276014

commit 38500848707e20b52657b85b0ed12bc8b0ad733f
Author: John David Anglin <danglin@gcc.gnu.org>
Date:   Fri Sep 20 21:53:40 2019 +0000

    pa.c (pa_trampoline_init): Remove spurious extended character.
    
            * config/pa/pa.c (pa_trampoline_init): Remove spurious extended
            character.
    
    From-SVN: r276008

commit 84a05cb50fef7ab93a21f774211ea42a0b5e719c
Author: Andreas Krebbel <krebbel@linux.ibm.com>
Date:   Fri Sep 20 12:18:26 2019 +0000

    re PR rtl-optimization/88751 (Performance regression reload vs lra)
    
    Fix PR88751
    
    This patch implements a small improvement for the heuristic in lra
    which decides when it has to activate the simpler register allocation
    algorithm.
    
    gcc/ChangeLog:
    
    2019-09-20  Andreas Krebbel  <krebbel@linux.ibm.com>
    
            Backport from mainline
            2019-06-06  Andreas Krebbel  <krebbel@linux.ibm.com>
    
            PR rtl-optimization/88751
            * ira.c (ira): Use the number of the actually referenced registers
            when calculating the threshold.
    
    From-SVN: r276000

commit a2eb0d21717c12c9dea1cf3c84dcf7557f60795f
Author: Kito Cheng <kito.cheng@sifive.com>
Date:   Fri Sep 20 10:41:51 2019 +0000

    RISC-V: Fix more splitters accidentally calling gen_reg_rtx.
    
            PR target/91683
            * config/riscv/riscv-protos.h (riscv_split_symbol): New bool parameter.
            (riscv_move_integer): Likewise.
            * config/riscv/riscv.c (riscv_split_integer): Pass FALSE for new
            riscv_move_integer arg.
            (riscv_legitimize_move): Likewise.
            (riscv_force_temporary): New parameter in_splitter.  Don't call
            force_reg if true.
            (riscv_unspec_offset_high): Pass FALSE for new riscv_force_temporary
            arg.
            (riscv_add_offset): Likewise.
            (riscv_split_symbol): New parameter in_splitter.  Pass to
            riscv_force_temporary.
            (riscv_legitimize_address): Pass FALSE for new riscv_split_symbol
            arg.
            (riscv_move_integer): New parameter in_splitter.  New local
            can_create_psuedo.  Don't call riscv_split_integer or force_reg when
            in_splitter TRUE.
            (riscv_legitimize_const_move): Pass FALSE for new riscv_move_integer,
            riscv_split_symbol, and riscv_force_temporary args.
            * config/riscv/riscv.md (low<mode>+1): Pass TRUE for new
            riscv_move_integer arg.
            (low<mode>+2): Pass TRUE for new riscv_split_symbol arg.
    
    From-SVN: r275997

commit 905277d746c3bf3ef5756f2b42312e3c5f2c00da
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Fri Sep 20 09:45:26 2019 +0000

    re PR target/91269 (unaligned floating-point register with -mcpu=niagara4 -fcall-used-g6)
    
            PR target/91269
            * config/sparc/sparc.h (HARD_REGNO_CALLER_SAVE_MODE): Define.
    
    From-SVN: r275995

commit 3394b7520f99f6170fcb3dab4b4ee3c0d001fd56
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Sep 20 00:16:11 2019 +0000

    Daily bump.
    
    From-SVN: r275985

commit d1a7e5b09abd4848947f2ce90c5cf441bc8f857b
Author: Steven G. Kargl <kargl@gcc.gnu.org>
Date:   Thu Sep 19 17:54:53 2019 +0000

    re PR fortran/91727 (ICE in conformable_arrays, at fortran/resolve.c:7490)
    
    2019-09-19  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/91727
            * resolve.c (conformable_arrays):  If array-spec is NULL, then
            allocate-object is a scalar.  a conformability check only occurs
            for an array source-expr.
    
    2019-09-19  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/91727
            * gfortran.dg/pr91727.f90: New test.
    
    From-SVN: r275973

commit 51d0da2fde593089c218031a0d78c0036d0d4633
Author: Kito Cheng <kito.cheng@sifive.com>
Date:   Thu Sep 19 06:38:23 2019 +0000

    RISC-V: Fix bad insn splits with paradoxical subregs.
    
    Shifting by more than the size of a SUBREG_REG doesn't work, so we either
    need to disable splits if an input is paradoxical, or else we need to
    generate a clean temporary for intermediate results.
    
    Jakub wrote the first version of this patch, so gets primary credit for it.
    
            gcc/
            PR target/91635
            * config/riscv/riscv.md (zero_extendsidi2, zero_extendhi<GPR:mode>2,
            extend<SHORT:mode><SUPERQI:mode>2): Don't split if
            paradoxical_subreg_p (operands[0]).
            (*lshrsi3_zero_extend_3+1, *lshrsi3_zero_extend_3+2): Add clobber and
            use as intermediate value.
    
            gcc/testsuite/
            PR target/91635
            * gcc.c-torture/execute/pr91635.c: New test.
            * gcc.target/riscv/shift-shift-4.c: New test.
            * gcc.target/riscv/shift-shift-5.c: New test.
    
    From-SVN: r275929

commit c2be2c0414020870164154f57cf0b9691bac0f73
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Sep 19 00:16:12 2019 +0000

    Daily bump.
    
    From-SVN: r275923

commit 066ef19d5d9393b27498dc3a1417f60ddaf1b86b
Author: Thomas Koenig <tkoenig@gcc.gnu.org>
Date:   Wed Sep 18 17:32:08 2019 +0000

    backport: re PR fortran/91550 (ICE in do_subscript, at fortran/frontend-passes.c:2652)
    
    2019-09-18  Thomas Koenig  <tkoenig@gcc.gnu.org>
    
        Backport from trunk
        PR fortran/91550
        * frontend-passes.c (do_subscript): If step equals
        zero, a previuos error has been reported; do nothing
        in this case.
        * resolve.c (gfc_resolve_iterator): Move error checking
        after type conversion.
    
    2019-09-18  Thomas Koenig  <tkoenig@gcc.gnu.org>
    
        Backport from trunk
        PR fortran/91550
        * gfortran.dg/do_subscript_6.f90: New test.
    
    From-SVN: r275891

commit f15b8c082c2d29c0b42600e41abb0ad4bbbf45c9
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Sep 18 00:16:12 2019 +0000

    Daily bump.
    
    From-SVN: r275832

commit d9d6e1add5793cc6d9d5844a00cb4c0331474613
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Sep 17 00:16:34 2019 +0000

    Daily bump.
    
    From-SVN: r275762

commit 7fd2af6d970ecfefef20e253a12b1f9e6a4722b0
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Sep 16 00:16:23 2019 +0000

    Daily bump.
    
    From-SVN: r275740

commit 121cc969e61954f1b8b40d8a9caa279b289f3710
Author: Thomas Koenig <tkoenig@gcc.gnu.org>
Date:   Sun Sep 15 19:48:41 2019 +0000

    backport: re PR fortran/91557 (Bogus warning about unused dummy argument _formal_*)
    
    2019-09-15  Thomas Koenig  <tkoenig@gcc.gnu.org>
    
        Backport from trunk
        PR fortran/91557
        * trans-decl.c (generate_local_decl): Do not warn if the symbol
        is artificial.
        * trans-types.c (get_formal_from_actual_arglist): Set artificial
        attribute on dummy arguments.
    
    2019-09-15  Thomas Koenig  <tkoenig@gcc.gnu.org>
    
        Backport from trunk
        PR fortran/91557
        * gfortran.dg/warn_unused_dummy_argument_5.f90: New test.
    
    From-SVN: r275733

commit 9b710883735144dd6dc7939074f4667366f9f301
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Sep 15 00:16:19 2019 +0000

    Daily bump.
    
    From-SVN: r275722

commit f97453cb2025279a0cd26d8c05c94a3dc437d702
Author: Steven G. Kargl <kargl@gcc.gnu.org>
Date:   Sat Sep 14 17:05:17 2019 +0000

    re PR fortran/91553 (ICE in gfc_real2complex, at fortran/arith.c:2208)
    
    2019-09-14  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/91553
            * simplify.c (gfc_convert_constant):  During conversion check if the
            constant is enclosed in parenthesis, and simplify expression.
    
    2019-09-14  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/91553
            * gfortran.dg/pr91553.f90: New test.
    
    From-SVN: r275716

commit bae31807f512f87dafc7f9e20c990ee454e32ff6
Author: Steven G. Kargl <kargl@gcc.gnu.org>
Date:   Sat Sep 14 16:39:41 2019 +0000

    re PR fortran/91566 (ICE in gfc_constructor_copy, at fortran/constructor.c:103)
    
    2019-09-14  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/91566
            * simplify.c (gfc_simplify_merge): Need to simplify expression
            after insertation of parenthesis.
    
    2019-09-14  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/91566
            * gfortran.dg/pr91566.f90: New test.
    
    From-SVN: r275715

commit ef31f2b7e0dade6f98f87cfa979edcdf010a501c
Author: Steven G. Kargl <kargl@gcc.gnu.org>
Date:   Sat Sep 14 16:21:33 2019 +0000

    re PR fortran/91642 (ICE: Bad IO basetype (transfer_expr, at fortran/trans-io.c:2507))
    
    2019-09-14  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/91642
            * io.c (gfc_match_inquire): null() cannot be in an iolength inquire
            list.
    
    2019-09-14  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/91642
            * gfortran.dg/pr91642.f90: New test.
    
    From-SVN: r275714

commit 3493ca0d9536804518a242fcc72bda09eb59bbca
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Sep 14 00:16:13 2019 +0000

    Daily bump.
    
    From-SVN: r275708

commit 6217eac02b2a7121be9799664503c6d8565c9bd5
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Sep 13 00:16:15 2019 +0000

    Daily bump.
    
    From-SVN: r275694

commit 506bcbef00a872f844aad894d6ea991d6dba771a
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Thu Sep 12 11:51:58 2019 +0100

    PR libstdc++/91748 fix std::for_each_n for random access iterators
    
            PR libstdc++/91748
            * include/bits/stl_algo.h (for_each_n): Fix random access iterator
            case.
            * testsuite/25_algorithms/for_each/for_each_n.cc: Test with random
            access iterators.
    
    From-SVN: r275684

commit ce583e0ad68b4d5f214dd5b1a7923c128bf5ed9d
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Sep 12 00:16:15 2019 +0000

    Daily bump.
    
    From-SVN: r275679

commit 14c154f9534b17d548a79dc3b13c0680ac2c4d96
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Wed Sep 11 12:40:23 2019 +0100

    Fix Xmethod for shared_ptr::use_count()
    
    This was reported in https://bugzilla.redhat.com/show_bug.cgi?id=1749578
    
            * python/libstdcxx/v6/xmethods.py (SharedPtrUseCountWorker.__call__):
            Fix syntax error.
    
    From-SVN: r275645

commit dd8c82e856540d363c41f8451d3ca07feb25d9f6
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Wed Sep 11 10:42:31 2019 +0000

    re PR rtl-optimization/89795 (wrong code with -O2 -fno-dce -fno-forward-propagate -fno-sched-pressure)
    
            PR rtl-optimization/89795
            * rtlanal.c (nonzero_bits1) <SUBREG>: Do not propagate results from
            inner REGs to paradoxical SUBREGs if WORD_REGISTER_OPERATIONS is set.
    
    From-SVN: r275636

commit 5334438e67b7fab761754cb41d2f371a60b2c113
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Sep 11 00:16:34 2019 +0000

    Daily bump.
    
    From-SVN: r275621

commit b66c82990a6293ec0f51d86b7de7fec17a2fd30a
Author: Marek Polacek <polacek@redhat.com>
Date:   Tue Sep 10 22:39:46 2019 +0000

    PR c++/91705 - constexpr evaluation rejects ++/-- on floats.
    
            * constexpr.c (cxx_eval_increment_expression): Call fold_simple on
            the offset.
    
            * g++.dg/cpp1y/constexpr-incr2.C: New test.
    
    From-SVN: r275615

commit 25130d4dfd25a70672f265b51ebe945d8eb4d398
Author: Ian Lance Taylor <ian@gcc.gnu.org>
Date:   Tue Sep 10 20:32:42 2019 +0000

    re PR go/91621 (libgo/mksysinfo.sh: please avoid test ==)
    
            PR go/91621
        mksysinfo: change test == to test =
    
        Fixes https://gcc.gnu.org/PR91621
    
        Reviewed-on: https://go-review.googlesource.com/c/gofrontend/+/194569
    
    From-SVN: r275609

commit da85ce4c0d01458c51ae279bbb44536080dfe0fa
Author: Ian Lance Taylor <ian@gcc.gnu.org>
Date:   Tue Sep 10 20:26:11 2019 +0000

    go/internal/gccgoimporter: support embedded field in pointer loop
    
        Backport of https://golang.org/cl/194440.  Original description:
    
            If an embedded field refers to a type via a pointer, the parser needs
            to know the name of the embedded field. It is possible that the
            pointer type is not yet resolved. This CL fixes the parser to handle
            that case by setting the pointer element type to the unresolved named
            type while the pointer is being resolved.
    
        Updates golang/go#34182
    
        Reviewed-on: https://go-review.googlesource.com/c/gofrontend/+/194562
    
    From-SVN: r275607

commit c0bc2fa412cf5a90f33709610f26ede5cde49912
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Sep 10 00:16:19 2019 +0000

    Daily bump.
    
    From-SVN: r275554

commit cf33425f64d1756c247a9a01b33e33c48b93eeb8
Author: Edward Smith-Rowland <3dw4rd@verizon.net>
Date:   Mon Sep 9 17:17:48 2019 +0000

    Update docs for p858 - Constexpr iterator changes available since 9.1.
    
    2019-09-09  Edward Smith-Rowland  <3dw4rd@verizon.net>
    
            Update docs for p858 - Constexpr iterator changes available since 9.1.
            * doc/xml/manual/status_cxx2020.xml: Update p0858r0 status.
    
    From-SVN: r275523

commit 3100d074f3cf81f1a0715b7972555ab1ce63475c
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Mon Sep 9 12:52:00 2019 +0200

    re PR target/87853 (_mm_cmpgt_epi8 broken with -funsigned-char)
    
            PR target/87853
            * config/i386/emmintrin.h (_mm_cmpeq_epi8): Use casts to __v16qi
            instead of __v16qs.
    
            * gcc.target/i386/pr87853.c: New test.
    
    From-SVN: r275510

commit a3d5f4e20904079a5060987b4441cdef874ef019
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Mon Sep 9 12:51:04 2019 +0200

    re PR target/91704 ([X86] Codegen for _mm256_cmpgt_epi8 is affected by -funsigned-char)
    
            PR target/91704
            * config/i386/avxintrin.h (__v32qs): New typedef.
            * config/i386/avx2intrin.h (_mm256_cmpgt_epi8): Use casts to __v32qs
            instead of __v32qi.
    
            * gcc.target/i386/pr91704.c: New test.
    
    From-SVN: r275509

commit 33ccf76972c1c72def56bab6131daf9332589509
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Sep 9 00:17:04 2019 +0000

    Daily bump.
    
    From-SVN: r275500

commit e205cd874890e81151320f7a5260b99938f92a5f
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Sep 8 00:16:30 2019 +0000

    Daily bump.
    
    From-SVN: r275492

commit f23797e3829e329608498909839940706af7673e
Author: Paul Thomas <pault@gcc.gnu.org>
Date:   Sat Sep 7 14:41:25 2019 +0000

    re PR fortran/91589 (ICE in gfc_conv_component_ref, at fortran/trans-expr.c:2447)
    
    2019-09-07  Paul Thomas  <pault@gcc.gnu.org>
    
            PR fortran/91589
            * primary.c (gfc_match_varspec): Return MATCH_NO on an apparent
            component ref, when the primary type is intrinsic.
    
    2019-09-07  Paul Thomas  <pault@gcc.gnu.org>
    
            PR fortran/91589
            * gfortran.dg/pr91589.f90 : New test.
    
    From-SVN: r275487

commit df9679c70fae9228ce781de21bdcdf2fbd32b250
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Sep 7 00:16:37 2019 +0000

    Daily bump.
    
    From-SVN: r275481

commit aab620b97c80c2e6bce48dd31267674a583f4729
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Sep 6 00:16:33 2019 +0000

    Daily bump.
    
    From-SVN: r275448

commit 4d077d4469f5f5ffc7a8f2d1d96bb700b05a1d48
Author: Harald Anlauf <anlauf@gmx.de>
Date:   Thu Sep 5 21:02:44 2019 +0000

    backport: re PR fortran/91496 (!GCC$ directives error if mistyped or unknown)
    
    2019-09-05  Harald Anlauf  <anlauf@gmx.de>
    
            Backport from mainline
            PR fortran/91496
            * gfortran.h: Extend struct gfc_iterator for loop annotations.
            * array.c (gfc_copy_iterator): Copy loop annotations by IVDEP,
            VECTOR, and NOVECTOR pragmas.
            * decl.c (gfc_match_gcc_ivdep, gfc_match_gcc_vector)
            (gfc_match_gcc_novector): New matcher functions handling IVDEP,
            VECTOR, and NOVECTOR pragmas.
            * match.h: Declare prototypes of matcher functions handling IVDEP,
            VECTOR, and NOVECTOR pragmas.
            * parse.c (decode_gcc_attribute, parse_do_block)
            (parse_executable): Decode IVDEP, VECTOR, and NOVECTOR pragmas;
            emit warning for unrecognized pragmas instead of error.
            * trans-stmt.c (gfc_trans_simple_do, gfc_trans_do): Add code to
            emit annotations for IVDEP, VECTOR, and NOVECTOR pragmas.
            * gfortran.texi: Document IVDEP, VECTOR, and NOVECTOR pragmas.
    
            PR fortran/91496
            * parse.c (parse_executable): Improve error messages for
            improperly placed pragmas not preceeding a loop.
    
            PR fortran/91496
            * gfortran.dg/pr91496.f90: New testcase.
    
            PR fortran/91496
            * gfortran.dg/directive_unroll_5.f90: Adjust error message.
    
    From-SVN: r275445

commit b3ec4913dbbd15a61925980e6f2dd94f6b766a08
Author: Steven G. Kargl <kargl@gcc.gnu.org>
Date:   Thu Sep 5 18:37:13 2019 +0000

    re PR fortran/91660 (Missing error on invalid type declaration)
    
    2019-09-05  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/91660
            * decl.c (gfc_match_decl_type_spec): Improve and restore error
            message for malformed types-spec.
    
    2019-09-05  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/91660
            * gfortran.dg/pdt_4.f03: Fix invalid code.
            * gfortran.dg/pr91660_1.f90: New test.
            * gfortran.dg/pr91660_2.f90: Ditto.
    
    From-SVN: r275427

commit 5fd85b2bd98fa8047c7960049080bd4598ac4f7d
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Sep 5 00:16:22 2019 +0000

    Daily bump.
    
    From-SVN: r275394

commit 7204c71263a54cb905def0cb50f6ea76c411184a
Author: Wilco Dijkstra <wdijkstr@arm.com>
Date:   Wed Sep 4 12:42:22 2019 +0000

    [AArch64] Fix PR81800
    
    PR81800 is about the lrint inline giving spurious FE_INEXACT exceptions.
    The previous change for PR81800 didn't fix this: when lrint is disabled
    in the backend, the midend will simply use llrint.  This actually makes
    things worse since llrint now also ignores FE_INVALID exceptions!
    The fix is to disable lrint/llrint on double if the size of a long is
    smaller (ie. ilp32).
    
        gcc/
            PR target/81800
            * gcc/config/aarch64/aarch64.md (lrint): Disable lrint pattern if GPF
            operand is larger than a long int.
    
        testsuite/
            PR target/81800
            * gcc.target/aarch64/no-inline-lrint_3.c: New test.
    
    From-SVN: r275373

commit aa90fd568cc1db2c2c78e2f0248a9360787ff3f8
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Sep 4 00:16:28 2019 +0000

    Daily bump.
    
    From-SVN: r275361

commit 925e219e72f3ba5d5e4dfedf5c68bdb72320a03f
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Sep 3 18:55:31 2019 +0200

    re PR tree-optimization/91597 (GCC miscompiles a branch depending on a pointer tag)
    
            PR tree-optimization/91597
            * tree-vrp.c (extract_range_from_binary_expr): Remove unsafe
            BIT_AND_EXPR optimization for pointers, even if both operand
            ranges don't include NULL, the result can be NULL.
    
            * gcc.c-torture/execute/pr91597.c: New test.
    
    From-SVN: r275345

commit 4ff5893eae0e7d06fe925e84ddd3004a15e72923
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Sep 3 00:16:35 2019 +0000

    Daily bump.
    
    From-SVN: r275327

commit a1a973824613756fb97e86aae237fcaef9e176c3
Author: Steven G. Kargl <kargl@gcc.gnu.org>
Date:   Mon Sep 2 17:16:05 2019 +0000

    re PR fortran/91552 (ICE with valid array constructor)
    
    2019-09-02  Steven G. Kargl  <kargl@gc.gnu.org>
    
            PR fortran/91552
            * array.c (walk_array_constructor): New function.
            (gfc_match_array_constructor): Use it.
    
    2019-09-02  Steven G. Kargl  <kargl@gc.gnu.org>
    
            PR fortran/91552
            * gfortran.dg/pr91552.f90: New test.
    
    From-SVN: r275323

commit 7a62100980cb575a9de4c66f714718ecc3140012
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Mon Sep 2 12:10:03 2019 +0100

    Update libstdc++ docs for library version bumps
    
            * doc/xml/manual/abi.xml: Document 9.x library versions.
            * doc/html/*: Regenerate.
    
    From-SVN: r275310

commit 1448cf4c4eec86e4ae4cdc22f062afc12cb46ca1
Author: Martin Liska <mliska@suse.cz>
Date:   Mon Sep 2 10:58:39 2019 +0200

    Backport r275292
    
    2019-09-02  Martin Liska  <mliska@suse.cz>
    
            Backport from mainline
            2019-09-02  Martin Liska  <mliska@suse.cz>
    
            PR c++/91155
            * c-common.c (fname_as_string): Use cxx_printable_name for
            __PRETTY_FUNCTION__ same as was used before r265711.
    2019-09-02  Martin Liska  <mliska@suse.cz>
    
            Backport from mainline
            2019-09-02  Martin Liska  <mliska@suse.cz>
    
            PR c++/91155
            * g++.dg/torture/pr91155.C: New test.
    
    From-SVN: r275302

commit 8a1e1c00c95b1bf51f1d85414dfcd29e70b022ba
Author: Martin Liska <mliska@suse.cz>
Date:   Mon Sep 2 10:58:17 2019 +0200

    Backport r275291
    
    2019-09-02  Martin Liska  <mliska@suse.cz>
    
            Backport from mainline
            2019-09-02  Martin Liska  <mliska@suse.cz>
    
            PR gcov-profile/91601
            * gcov.c (path_contains_zero_cycle_arc): Rename to ...
            (path_contains_zero_or_negative_cycle_arc): ... this and handle
            also negative edges.
            (circuit): Handle also negative edges as they can happen
            in some situations.
    
    From-SVN: r275301

commit 6e690485d5a81a889f5c4eac3cac3cefc218e833
Author: Rainer Orth <ro@CeBiTec.Uni-Bielefeld.DE>
Date:   Mon Sep 2 08:40:41 2019 +0000

    Update Solaris baselines for GCC 9.3
    
            * config/abi/post/i386-solaris2.10/baseline_symbols.txt: Regenerate.
            * config/abi/post/i386-solaris2.10/amd64/baseline_symbols.txt: Likewise.
            * config/abi/post/i386-solaris2.11/baseline_symbols.txt: Likewise.
            * config/abi/post/i386-solaris2.11/amd64/baseline_symbols.txt: Likewise.
            * config/abi/post/sparc-solaris2.10/baseline_symbols.txt: Likewise.
            * config/abi/post/sparc-solaris2.10/sparcv9/baseline_symbols.txt:
            Likewise.
            * config/abi/post/sparc-solaris2.11/baseline_symbols.txt: Likewise.
            * config/abi/post/sparc-solaris2.11/sparcv9/baseline_symbols.txt:
            Likewise.
    
    From-SVN: r275300

commit f8bbd3810b239873c97b4a39eae96fb574bd0db9
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Sep 2 00:16:33 2019 +0000

    Daily bump.
    
    From-SVN: r275289

commit 06de36ba95a9239f7411d3aa40fade675254fa05
Author: Marek Polacek <polacek@redhat.com>
Date:   Sun Sep 1 22:59:10 2019 +0000

    PR c++/91129 - wrong error with binary op in template argument.
    
            * typeck.c (warn_for_null_address): Use fold_for_warn instead of
            fold_non_dependent_expr.
            (cp_build_binary_op): Likewise.
    
            * g++.dg/cpp1y/nontype1.C: New test.
    
    From-SVN: r275286

commit 2c57172ec93bef6ac442ee2072533ea734d1f31a
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Sun Sep 1 12:57:56 2019 +0000

    re PR target/91472 (gmp testsuite segfaults with gcc-8 and gcc-9, works fine with gcc-7)
    
            PR target/91472
            * config/sparc/sparc.c (sparc_cannot_force_const_mem): Return true
            during LRA/reload in PIC mode if the PIC register hasn't been used yet.
            (sparc_pic_register_p): Test reload_in_progress for consistency's sake.
    
    From-SVN: r275272

commit ab4b40c38d64308c09b3986b803e6149a22afe47
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Sep 1 00:16:43 2019 +0000

    Daily bump.
    
    From-SVN: r275263

commit 607535aae74ba74db0a5090ac2b2db21005c0d2b
Author: Joseph Myers <joseph@codesourcery.com>
Date:   Sat Aug 31 22:49:46 2019 +0100

    * es.po: Update.
    
    From-SVN: r275259

commit 4574bbc072bc7d8393a07858f86ec83f1eb6676a
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Sat Aug 31 19:12:10 2019 +0000

    [c-family] Backport fix for PCH / PR61250.
    
    When we are parsing a source file, the very first token might
    be a PRAGMA_GCC_PCH_PREPROCESS. This indicates that we are going
    read in a PCH file (named as the value of the pragma). If we don't
    see this pragma, then we know that it's OK to release any resources
    that the host might have set aside for the PCH file.
    
    There is a thinko in the current implementation, in that the decision
    to release resources is happening unconditionally right after the first
    token is extracted but before it's been checked or acted upon.
    
    This leads to the pch bug on Darwin, because we actually do release
    resources - which are subsequently (reasonably) assumed to be available
    when reading a PCH file. We then get random crashes or hangs depending
    on the interaction between unmmap and malloc.
    
    The bug is present everywhere but doesn't show on (say) Linux, since
    the release of PCH resources is a NOP there.
    
    This effects all the c-family front ends, because they all use
    c_lex_with_flags () to implement this.
    
    The solution is to check for the PRAGMA_GCC_PCH_PREPROCESS and only call
    c_common_no_more_pch () when that is not the first token.
    
    A secondary effect of the collection is that the name of the PCH file
    can be collected during the ggc_pch_read() reset of state. Therefore
    we should issue any diagnostic that might name the file before the
    collections are triggered.
    
    gcc/
    
    2019-08-31  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline
            2019-08-23  Iain Sandoe  <iain@sandoe.co.uk>
    
            PR pch/61250
            * ggc-page.c (ggc_pch_read): Read the ggc_pch_ondisk structure
            and issue any diagnostics needed before collecting the pre-PCH
            state.
    
    gcc/c-family/
    
    2019-08-31  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline
            2019-08-23  Iain Sandoe  <iain@sandoe.co.uk>
    
            PR pch/61250
            * c-lex.c (c_lex_with_flags):  Don't call
            c_common_no_more_pch () from here.
    
    gcc/c/
    
    2019-08-31  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-08-23  Iain Sandoe  <iain@sandoe.co.uk>
    
            PR pch/61250
            * c-parser.c (c_parse_file): Call c_common_no_more_pch ()
            after determining that the first token is not
            PRAGMA_GCC_PCH_PREPROCESS.
    
    gcc/cp/
    
    2019-08-31  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backported from mainline
            2019-08-23  Iain Sandoe  <iain@sandoe.co.uk>
    
            PR pch/61250
            * parser.c (cp_parser_initial_pragma): Call c_common_no_more_pch ()
            after determining that the first token is not
            PRAGMA_GCC_PCH_PREPROCESS.
    
    From-SVN: r275246

commit 1fef602810b7d0c904ade3009f144e20149d16d0
Author: Steven G. Kargl <kargl@gcc.gnu.org>
Date:   Sat Aug 31 03:27:45 2019 +0000

    re PR fortran/91587 (ICE in gfc_resolve_filepos, at fortran/io.c:2913)
    
    2019-08-30  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/91587
            * io.c (match_filepos): MATCH_ERROR should branch to a syntax error.
    
    2019-08-30  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/91587
            * gfortran.dg/pr91587.f90: New test.
    
    From-SVN: r275241

commit e8a8414cc358b7deb6fad39d5c5b47b6d831cb70
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Aug 31 00:16:47 2019 +0000

    Daily bump.
    
    From-SVN: r275234

commit cd3f639472e31858c39f508cde3a401c0b9de919
Author: Steven G. Kargl <kargl@gcc.gnu.org>
Date:   Fri Aug 30 23:30:35 2019 +0000

    re PR fortran/91565 (ICE in gfc_simplify_reshape, at fortran/simplify.c:6707 etc.)
    
    2019-08-30  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/91565
            * simplify.c (gfc_simplify_reshape): Add additional checks of the
            ORDER dummy argument.
    
    2019-08-30  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/91565
            * gfortran.dg/pr91565.f90: New test.
    
    From-SVN: r275230

commit 2d0f1081ec117bd02e96abba8a7c8c76596dfb5c
Author: Steven G. Kargl <kargl@gcc.gnu.org>
Date:   Fri Aug 30 23:19:30 2019 +0000

    re PR fortran/91564 (ICE in gimplify_expr, at gimplify.c:14147)
    
    2019-08-30  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/91564
            * check.c (gfc_check_kill_sub): Additional checks on status dummy
            argument.
    
    2019-08-30  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/91564
            * gfortran.dg/pr91564.f90: New test.
    
    From-SVN: r275229

commit a70b6d06275af96d44bd8a9e50508ddc64ad353d
Author: Steven G. Kargl <kargl@gcc.gnu.org>
Date:   Fri Aug 30 23:02:37 2019 +0000

    re PR fortran/91551 (ICE in sort_actual, at fortran/intrinsic.c:4193)
    
    2019-08-30  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/91551
            * intrinsic.c (sort_actual): ALLOCATED has one argument. Check for
            no argument case.
    
    2019-08-30  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/91551
            * gfortran.dg/allocated_3.f90
    
    From-SVN: r275228

commit 5233accf7784e1defdf1d0f7fe45732f9999d471
Author: Segher Boessenkool <segher@gcc.gnu.org>
Date:   Fri Aug 30 15:53:11 2019 +0200

    backport: re PR target/91481 (POWER9 "DARN" RNG intrinsic produces repeated output (CVE-2019-15847))
    
            Backport from trunk
            2019-08-23  Segher Boessenkool  <segher@kernel.crashing.org>
    
    gcc/testsuite/
            PR target/91481
            * gcc.target/powerpc/darn-3.c: New testcase.
    
    From-SVN: r275176

commit dc2b6f50dde5cfca855b68ca6149109bb338e23b
Author: Segher Boessenkool <segher@kernel.crashing.org>
Date:   Fri Aug 30 15:51:26 2019 +0200

    backport: re PR target/91481 (POWER9 "DARN" RNG intrinsic produces repeated output (CVE-2019-15847))
    
            Backport from trunk
            2019-08-22  Segher Boessenkool  <segher@kernel.crashing.org>
    
            PR target/91481
            * config/rs6000/rs6000.md (unspec): Delete UNSPEC_DARN, UNSPEC_DARN_32,
            and UNSPEC_DARN_RAW.
            (unspecv): New enumerator values UNSPECV_DARN, UNSPECV_DARN_32, and
            UNSPECV_DARN_RAW.
            (darn_32): Use an unspec_volatile, and UNSPECV_DARN_32.
            (darn_raw): Use an unspec_volatile, and UNSPECV_DARN_RAW.
            (darn): Use an unspec_volatile, and UNSPECV_DARN.
    
    From-SVN: r275175

commit 414c00b7fddd060915817c593ddb80648d116d34
Author: Segher Boessenkool <segher@kernel.crashing.org>
Date:   Fri Aug 30 15:48:48 2019 +0200

    backport: altivec.md (unspec): Delete UNSPEC_DARN...
    
            Backport from trunk
            2019-08-22  Segher Boessenkool  <segher@kernel.crashing.org>
    
            * config/rs6000/altivec.md (unspec): Delete UNSPEC_DARN, UNSPEC_DARN_32,
            UNSPEC_DARN_RAW, UNSPEC_CMPRB, UNSPEC_CMPRB2, UNSPEC_CMPEQB; move to...
            * config/rs6000/rs6000.md (unspec): ... here.
            * config/rs6000/altivec.md (darn_32, darn_raw, darn, cmprb,
            *cmprb_internal, setb_signed, setb_unsigned, cmprb2, *cmprb2_internal,
            cmpeqb, *cmpeqb_internal): Delete, move to...
            * config/rs6000/rs6000.md (darn_32, darn_raw, darn, cmprb,
            *cmprb_internal, setb_signed, setb_unsigned, cmprb2, *cmprb2_internal,
            cmpeqb, *cmpeqb_internal): ... here.
    
    From-SVN: r275170

commit 8b06ee3c2d6ce90319edb51a5e80fa6d4106d892
Author: Richard Biener <rguenther@suse.de>
Date:   Fri Aug 30 13:14:59 2019 +0000

    backport: re PR tree-optimization/90278 (ICE: verify_gimple failed (error: statement marked for throw, but doesn't))
    
    2019-08-30  Richard Biener  <rguenther@suse.de>
    
            Backport from mainline
            2019-04-29  Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/90278
            * tree-ssa-forwprop.c (pass_forwprop::execute): Transfer/clean
            EH on comparison simplification.
    
            * gcc.dg/torture/pr90278.c: New testcase.
    
    From-SVN: r275167

commit c272916856f3f0e96324d56b17a3811484be374e
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Aug 30 00:16:20 2019 +0000

    Daily bump.
    
    From-SVN: r275058

commit 7532a97151ca6e5b66dae43953e5f2d4ef68d9b9
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Thu Aug 29 14:22:13 2019 +0100

    PR libstdc++/91067 add more missing exports for directory iterators
    
            PR libstdc++/91067
            * acinclude.m4 (libtool_VERSION): Bump to 6:28:0.
            * configure: Regenerate.
            * config/abi/pre/gnu.ver (GLIBCXX_3.4.28): Add new version. Export
            missing symbols.
            * testsuite/27_io/filesystem/iterators/91067.cc: Test move
            constructors.
            * testsuite/util/testsuite_abi.cc: Add new symbol version.
    
    From-SVN: r275033

commit 0549ad5e341f0f17d5789f1996754273041fbb89
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Aug 29 12:27:38 2019 +0200

    baseline_symbols.txt: Update.
    
            * config/abi/post/aarch64-linux-gnu/baseline_symbols.txt: Update.
            * config/abi/post/s390x-linux-gnu/baseline_symbols.txt: Update.
    
    From-SVN: r275029

commit b72ee9d7f7e3eaaa4b697504ab8d3b6ff62a3c2f
Author: Richard Biener <rguenther@suse.de>
Date:   Thu Aug 29 08:12:57 2019 +0000

    re PR tree-optimization/91568 (internal compiler error: in vect_schedule_slp_instance, at tree-vect-slp.c:3922)
    
    2019-08-29  Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/91568
            * tree-vectorizer.h (_slp_tree::max_nunits): Add.
            (vect_update_max_nunits): Add overload for poly_uint64.
            * tree-vect-slp.c (vect_create_new_slp_node): Initialize it.
            (vect_build_slp_tree): Record max_nunits into the subtree
            and merge it upwards.
            (vect_print_slp_tree): Print max_nunits.
    
            * gfortran.dg/pr91568.f: New testcase.
    
    From-SVN: r275024

commit 5b1fda991ed8a6f20595980d607e00dbc5b6e6bb
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Aug 29 00:16:20 2019 +0000

    Daily bump.
    
    From-SVN: r275020

commit db2230347d25d804d025c1d39c5025e2fa601f3a
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Wed Aug 28 23:16:33 2019 +0100

    Update ABI baselines for x86 and powerpc GNU targets
    
            * config/abi/post/i386-linux-gnu/baseline_symbols.txt: Update.
            * config/abi/post/i486-linux-gnu/baseline_symbols.txt: Update.
            * config/abi/post/powerpc-linux-gnu/baseline_symbols.txt: Update.
            * config/abi/post/powerpc64-linux-gnu/32/baseline_symbols.txt: Update.
            * config/abi/post/powerpc64-linux-gnu/baseline_symbols.txt: Update.
            * config/abi/post/x86_64-linux-gnu/32/baseline_symbols.txt: Update.
            * config/abi/post/x86_64-linux-gnu/baseline_symbols.txt: Update.
    
    From-SVN: r275014

commit 44538cdf8050bd4b94ce1c23994ddfc84035ba27
Author: Joseph Myers <joseph@codesourcery.com>
Date:   Wed Aug 28 22:41:01 2019 +0100

    * es.po: Update.
    
    From-SVN: r275013

commit b824853ea607c0f5ea900b4df90295052592dc3e
Author: Richard Biener <rguenther@suse.de>
Date:   Wed Aug 28 12:12:20 2019 +0000

    backport: re PR tree-optimization/90637 (ICE in vect_loop_versioning, at tree-vect-loop-manip.c:3055)
    
    2019-08-28  Richard Biener  <rguenther@suse.de>
    
            Backport from mainline
            2019-05-27  Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/90637
            * tree-ssa-sink.c (statement_sink_location): Honor the
            computed sink location for single-uses.
    
            * gcc.dg/gomp/pr90637.c: New testcase.
    
    From-SVN: r274989

commit cf6ebf8218ce3b4b72f21c0ea9de3534fc931739
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Aug 28 00:16:18 2019 +0000

    Daily bump.
    
    From-SVN: r274979

commit 3a8eed0fbffa3e4da25f5e9ce2b7fcf4051dfb6d
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Aug 27 00:16:29 2019 +0000

    Daily bump.
    
    From-SVN: r274943

commit d7131bd5b8989a187505611e2c80fe6b28c5401c
Author: Xiong Hu Luo <luoxhu@linux.ibm.com>
Date:   Mon Aug 26 08:53:27 2019 +0000

    backport: Enable math functions linking with static library for LTO
    
    Backport r274411 from trunk to gcc-9-branch
    
    Backport r274411 of "Enable math functions linking with static library
    for LTO" from mainline to gcc-9-branch.
    
    Bootstrapped/Regression-tested on Linux POWER8 LE.
    
    gcc/ChangeLog
    2019-08-26  Xiong Hu Luo  <luoxhu@linux.ibm.com>
    
            Backport r274411 from trunk to gcc-9-branch.
            2019-08-14  Xiong Hu Luo  <luoxhu@linux.ibm.com>
    
            PR lto/91287
            * builtins.c (builtin_with_linkage_p): New function.
            * builtins.h (builtin_with_linkage_p): New function.
            * symtab.c (write_symbol): Remove redundant assert.
            * lto-streamer-out.c (symtab_node::output_to_lto_symbol_table_p):
            Remove FIXME and use builtin_with_linkage_p.
    
    From-SVN: r274921

commit 8da62abae6a4aa0a1d34d07282f1badd3cae92c3
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Aug 26 00:16:35 2019 +0000

    Daily bump.
    
    From-SVN: r274918

commit 3072e76439194562a1590ad14d4a44373cbf3f2b
Author: Uros Bizjak <ubizjak@gmail.com>
Date:   Sun Aug 25 20:21:04 2019 +0200

    re PR target/91533 (abs pattern generates MMX instructions but fails to call EMMS)
    
            PR target/91533
            Backport from mainline
            2019-06-30  Uroš Bizjak  <ubizjak@gmail.com>
    
            * config/i386/sse.md (ssse3_abs<mode>2): Rename from abs<mode>2.
            * config/i386/i386-builtin.def (__builtin_ia32_pabsb):
            Use CODE_FOR_ssse3_absv8qi2.
            (__builtin_ia32_pabsw): Use CODE_FOR_ssse3_absv4hi2.
            (__builtin_ia32_pabsd): Use CODE_FOR_ssse3_absv2si2.
    
    From-SVN: r274910

commit 67e15d5ac215d9ce5b0b01d7e5ed96fee9f90c53
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Aug 25 00:16:46 2019 +0000

    Daily bump.
    
    From-SVN: r274906

commit 551528f7ceeb778d12c8f4e6457e74144b7ed666
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Aug 24 00:16:33 2019 +0000

    Daily bump.
    
    From-SVN: r274897

commit 736257f74fa51f582832482fd8654f2cef8da891
Author: Marek Polacek <polacek@redhat.com>
Date:   Fri Aug 23 23:26:17 2019 +0000

    PR c++/91521 - wrong error with operator->.
    
            * decl.c (grokdeclarator): Return error_mark_node for an invalid
            trailing return type.
    
            * g++.dg/parse/operator8.C: New test.
    
    From-SVN: r274892

commit ce42d48212674d274b56846c257af58f9f838c33
Author: Joseph Myers <joseph@codesourcery.com>
Date:   Fri Aug 23 22:05:50 2019 +0100

    Fix libstdc++ lstat missing return type for Windows target.
    
    Building for i686-mingw32 target (with some local changes) produced an
    error
    
    error: ISO C++ forbids declaration of 'lstat' with no type [-fpermissive]
    
    in libstdc++-v3/src/filesystem/ops-common.h.  This patch adds the
    missing return type.  OK to commit (trunk and GCC 9 branch)?
    
    Note 1: I haven't run the testsuite with this patch, but it fixes the
    build failure I see (in sources with other local changes).
    
    Note 2: I don't know why this hasn't produced build failures for other
    people, but the missing return type looks wrong in any case even if
    other local changes are for some reason needed for it to produce an
    error.
    
            * src/filesystem/ops-common.h [_GLIBCXX_FILESYSTEM_IS_WINDOWS]
            (std::filesystem::__gnu_posix::lstat): Add return type.
    
    From-SVN: r274886

commit fb0c8fb6bcfe8a654b1355236ebba76a38f69873
Author: Joseph Myers <joseph@codesourcery.com>
Date:   Fri Aug 23 20:48:22 2019 +0100

    * zh_CN.po: Update.
    
    From-SVN: r274869

commit e5bd4faa8bbe50e66105e1a14d38f3e884de74ef
Author: Mihailo Stojanovic <mistojanovic@wavecomp.com>
Date:   Fri Aug 23 19:09:07 2019 +0000

    mips.md (mips_get_fcsr, [...]): Use SI machine mode for unspec_volatile operand.
    
            * config/mips/mips.md (mips_get_fcsr, *mips_get_fcsr): Use SI
            machine mode for unspec_volatile operand.
    
            * gcc.target/mips/get-fcsr-3.c: New test.
    
    From-SVN: r274864

commit ecd06a4cc09069a2bf8a0f7701b28fcb839f8732
Author: Martin Liska <mliska@suse.cz>
Date:   Fri Aug 23 13:42:19 2019 +0200

    Backport r274504
    
    2019-08-23  Martin Liska  <mliska@suse.cz>
    
            PR ipa/91508
            Backport from mainline
            2019-08-15  Martin Liska  <mliska@suse.cz>
    
            PR ipa/91438
            * cgraph.c (cgraph_node::remove): When setting
            n->origin = NULL for all nested functions, reset
            also next_nested.
    
    From-SVN: r274853

commit 009fed7825868ac3796771050d6953c2b45767e1
Author: Martin Liska <mliska@suse.cz>
Date:   Fri Aug 23 13:41:32 2019 +0200

    Backport r274503
    
    2019-08-23  Martin Liska  <mliska@suse.cz>
    
            Backport from mainline
            2019-08-15  Martin Liska  <mliska@suse.cz>
    
            * cgraph.c (cgraph_node::verify_node): Verify origin, nested
            and next_nested.
    
    From-SVN: r274852

commit 55581ff1a263529c1a1586795ebd1b0e08d9fd03
Author: Martin Liska <mliska@suse.cz>
Date:   Fri Aug 23 13:41:16 2019 +0200

    Backport r274502
    
    2019-08-23  Martin Liska  <mliska@suse.cz>
    
            Backport from mainline
            2019-08-15  Martin Liska  <mliska@suse.cz>
    
            PR ipa/91404
            * passes.c (order): Remove.
            (uid_hash_t): Likewise).
            (remove_cgraph_node_from_order): Remove from set
            of pointers (cgraph_node *).
            (insert_cgraph_node_to_order): New.
            (duplicate_cgraph_node_to_order): New.
            (do_per_function_toporder): Register all 3 cgraph hooks.
            Skip removed_nodes now as we know about all of them.
    
    From-SVN: r274851

commit 4dc192c8febd7397b5c65ed0da49505baa0a9833
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Aug 23 00:16:50 2019 +0000

    Daily bump.
    
    From-SVN: r274842

commit f961bcc9f7945c319f1f198592d63f7f73be267b
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Aug 22 00:16:13 2019 +0000

    Daily bump.
    
    From-SVN: r274815

commit f8d9f32e0cbd01418d8b957ed409cfa443172f5b
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Wed Aug 21 19:18:14 2019 +0000

    [Darwin, fixincludes] Backport fix for PR83531
    
    There is no reasonable chance that the SDKs in question will be re-
    issued, so the only viable solution is a fixincludes.
    
    2019-08-21  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-08-18  C.G. Dogan <gcc+cgdogan.00@gmail.com>
                        Iain Sandoe  <iain@sandoe.co.uk>
    
            PR target/83531
            * inclhack.def (darwin_api_availability): New; strip leading
            underscores from API_XXXX defines.
            * fixincl.x: Regenerate.
            * tests/base/os/availability.h: New file.
    
    From-SVN: r274807

commit 0a8b0a4c6f385536c7afe674df0fda9fe8406a29
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Wed Aug 21 18:45:45 2019 +0000

    [Darwin, PPC] Fix fail of cpp/assert4.c
    
    This test needs the cpu and machine asserts to be implemented
    which hadn't been done for PPC Darwin.
    
    2019-08-21  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline
            2019-08-18  Iain Sandoe  <iain@sandoe.co.uk>
    
            * config/rs6000/darwin.h (TARGET_OS_CPP_BUILTINS): Add asserts
            for cpu and machine.  Factor 64/32b builtins.
    
    From-SVN: r274806

commit da5c5f7a007c8c92c44a5644c4f2d840dbc38f64
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Aug 21 00:16:12 2019 +0000

    Daily bump.
    
    From-SVN: r274762

commit fc628a1a08eaec2cf5594e3ec679f49e70a9e51e
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Tue Aug 20 22:40:37 2019 +0100

    Fix markdown in Doxygen comments for std::reduce
    
            * include/std/numeric (reduce): Fix Doxygen markup.
    
    From-SVN: r274759

commit 14cbcae81a30ce09c3e45a34c68a8bb9c97090b2
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Tue Aug 20 22:03:11 2019 +0100

    Implement new serial algorithms from Parallelism TS (P0024R2)
    
    These new (non-parallel) algorithms were added to C++17 along with the
    parallel algorithms, but were missing from libstdc++.
    
    Backported for PR libstdc++/91495, replacing the use of
    std::__size_to_integer which is not present on the branch.
    
    Backport from mainline
    2019-06-19  Jonathan Wakely  <jwakely@redhat.com>
    
            * include/std/numeric (reduce(Iter, Iter, T, BinOp)): Fix value
            category used in invocable check.
            (reduce(Iter, Iter, T)): Pass initial value as rvalue.
            * testsuite/26_numerics/reduce/2.cc: New test.
    
    Backport from mainline
    2019-06-18  Jonathan Wakely  <jwakely@redhat.com>
    
            * include/bits/algorithmfwd.h: Change title of doc group.
            * include/bits/stl_algo.h (for_each_n): Add new C++17 algorithm from
            P0024R2.
            * include/bits/stl_numeric.h: Define doc group and add algos to it.
            * include/std/numeric (__is_random_access_iter): New internal trait.
            (reduce, transform_reduce, exclusive_scan, inclusive_scan)
            (transform_exclusive_scan, transform_inclusive_scan): Likewise.
            * testsuite/25_algorithms/for_each/for_each_n.cc: New test.
            * testsuite/26_numerics/exclusive_scan/1.cc: New test.
            * testsuite/26_numerics/inclusive_scan/1.cc: New test.
            * testsuite/26_numerics/reduce/1.cc: New test.
            * testsuite/26_numerics/transform_exclusive_scan/1.cc: New test.
            * testsuite/26_numerics/transform_inclusive_scan/1.cc: New test.
            * testsuite/26_numerics/transform_reduce/1.cc: New test.
            * testsuite/util/testsuite_iterators.h (test_container::size()): New
            member function.
    
    From-SVN: r274754

commit feb2e3cccf4d2337279996f76fe7d209129d98aa
Author: Uros Bizjak <ubizjak@gmail.com>
Date:   Tue Aug 20 22:13:16 2019 +0200

    baseline_symbols.txt: Update.
    
            * config/abi/post/alpha-linux-gnu/baseline_symbols.txt: Update.
    
    From-SVN: r274753

commit 70a8c9b950d28e00975d2022aa5936fdf16c9c49
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Tue Aug 20 09:13:29 2019 +0000

    re PR rtl-optimization/91347 (hppa: wrong code generated with tail call optimisation)
    
            PR rtl-optimization/91347
            * dse.c (scan_insn): Call add_wild_read for non-const/memset tail calls
            before reload if HARD_FRAME_POINTER_IS_ARG_POINTER.
    
    From-SVN: r274709

commit 5ed3bb68608be2e0aa1e7c1de1e2178776e8b6ec
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Aug 20 00:16:18 2019 +0000

    Daily bump.
    
    From-SVN: r274688

commit 88cf851d26ff0edcd7da031f0be28d4bd2866136
Author: Richard Earnshaw <rearnsha@arm.com>
Date:   Mon Aug 19 16:11:30 2019 +0000

    [aarch64] PR target/91386 Use copy_rtx to avoid modifying original insns in peep2 pattern
    
    PR target/91386 is a situation where a peephole2 pattern substitution
    is discarded late because the selected instructions contain
    frame-related notes that we cannot redistribute (because the pattern
    has more than one insn in the output).  Unfortunately, the original
    insns were being modified during the generation, so after the undo we
    are left with corrupt RTL.
    
    We avoid this by ensuring that the modifications are always made on a
    copy, so that the original insns are never changed.
    
            Backport from mainline
            2019-09-09  Richard Earnshaw  <rearnsha@arm.com>
    
            PR target/91386
            * config/aarch64/aarch64.c (aarch64_gen_adjusted_ldpstp): Use copy_rtx
            to preserve the contents of the original insns.
    
    From-SVN: r274675

commit ea75b9638e4b5ada98efec4d7a7237b40c3a6205
Author: Steven G. Kargl <kargl@gcc.gnu.org>
Date:   Mon Aug 19 03:21:46 2019 +0000

    re PR fortran/91485 (Erroneous conflict between variable x and operator(.x.))
    
    2019-08-18  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/91485
            module.c (gfc_match_use): User defined operator cannot conflict with
            a rename symbol.
    
    2019-08-18  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/91485
            * gfortran.dg/pr91485.f90: New test.
    
    From-SVN: r274632

commit 54bb1ff66b650775fa8cf6b68838c3de439532ed
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Aug 19 00:16:14 2019 +0000

    Daily bump.
    
    From-SVN: r274628

commit f4acd2b46a17afe31d8d069b8f5afacfc9bde870
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Sun Aug 18 19:11:29 2019 +0000

    Darwin, libsanitizer - remove reference to __cxa_rethrow_primary_exception.
    
    For some Darwin versions the absence of the rethrow_primary_exception
    symbol causes almost all sanitizer tests to fail.
    The symbol is not present in libstdc++ and, therefore is is correct to
    remove the reference to it for all platforms.  We do this by adding a
    new guard "ASAN_HAS_CXA_RETHROW_PRIMARY_EXCEPTION".
    
    For the backported version, to avoid bumping the library version, this
    is only applied for Darwin (because of the way that symbol interposing
    works on Darwin, this does not alter the exported symbols list).
    
    libsanitizer/
    
    2019-08-18  Iain Sandoe  <iain@sandoe.co.uk>
    
    
            Backport from mainline
            2019-06-18  Iain Sandoe  <iain@sandoe.co.uk>
    
            PR libsanitizer/87880
            * asan/asan_interceptors.h:
            (ASAN_INTERCEPT___CXA_RETHROW_PRIMARY_EXCEPTION): New.
            * asan/Makefile.am (DEFS): Add (for Darwin only)
            ASAN_HAS_CXA_RETHROW_PRIMARY_EXCEPTION, defined to 0.
            * asan/Makefile.in: Regenerated.
    
    From-SVN: r274625

commit 26c9027d4cf5764c545f77af6b7686d7a11daaa0
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Aug 18 00:16:16 2019 +0000

    Daily bump.
    
    From-SVN: r274617

commit e7840406b9bbe41d9e2fec7f4fc4ffdd26de4497
Author: Steven G. Kargl <kargl@gcc.gnu.org>
Date:   Sat Aug 17 18:16:51 2019 +0000

    re PR fortran/91471 (f951: internal compiler error: gfc_variable_attr(): Bad array reference)
    
    2019-08-17  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/91471
            * primary.c (gfc_variable_attr): Remove a gfc_internal_error(),
            which cannot be reached by conforming Fortran code, but seems to
            be reachable from nonconforming Fortran code.  Treat the AR_UNKNOWN
            case as a no-op.
    
    2019-08-17  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/91471
            * gfortran.dg/pr91471.f90: New test.
    
    From-SVN: r274612

commit 69112d45bb700805f0ef6b507db8ed8babb78740
Author: Steven G. Kargl <kargl@gcc.gnu.org>
Date:   Sat Aug 17 18:14:26 2019 +0000

    re PR fortran/78739 (ICE in gfc_get_symbol_decl, at fortran/trans-decl.c:1477)
    
    2019-08-17  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/78739
            * match.c (gfc_match_st_function):  When matching a statement function,
            need to check if the statement function name shadows the function
            name.
    
    2019-08-17  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/78739
            * fortran.dg/pr78739.f90: New test.
    
    From-SVN: r274611

commit a5d319be20d09caa8342957e942c7bcfe6f3f20e
Author: Steven G. Kargl <kargl@gcc.gnu.org>
Date:   Sat Aug 17 18:11:58 2019 +0000

    re PR fortran/78719 ([F03] ICE in gfc_get_symbol_decl, at fortran/trans-decl.c:1438)
    
    2019-08-17  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/78719
            * decl.c (get_proc_name): Check for a CLASS entity when trying to
            add attributes to an entity that already has an explicit interface.
    
    2019-08-17  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/78719
            * gfortran.dg/pr78719_1.f90: New test.
            * gfortran.dg/pr78719_2.f90: Ditto.
            * gfortran.dg/pr78719_3.f90: Ditto.
    
    From-SVN: r274610

commit 58dbb372c025522f85d91bc9726487c846ed96e5
Author: Steven G. Kargl <kargl@gcc.gnu.org>
Date:   Sat Aug 17 18:08:21 2019 +0000

    re PR fortran/82992 (ICE in create_int_parameter_array, at fortran/module.c:6586)
    
    2019-08-17  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/82992
            * module.c (gfc_match_use):  When renaming a module entity, search
            current namespace for conflicting symbol.
    
    2019-08-17  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/82992
            * gfortran.dg/pr71649.f90: Adjust error messages.
            * gfortran.dg/use_15.f90: Ditto.
            * gfortran.dg/use_rename_8.f90: Ditto.
    
    From-SVN: r274609

commit 8194d5ae964cf6e359eb0a2eb330d189357debd3
Author: Jason Merrill <jason@redhat.com>
Date:   Fri Aug 16 21:34:00 2019 -0400

    PR c++/90393 - ICE with throw in ?:
    
    I fixed the DR 1560 implementation properly for GCC 10, but for GCC 9 feel
    that it's better not to change the meaning of well-formed code.  Reverting
    the incomplete implementation fixes the ICEs.
    
            * call.c (build_conditional_expr_1): Revert changes from
            PR c++/64372 and c++/86205.
    
    From-SVN: r274597

commit ac9ea80f7cd50ff02af81c054ced351d1add3be6
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Aug 17 00:16:13 2019 +0000

    Daily bump.
    
    From-SVN: r274594

commit 3be44517400c31c50b8c8dbb1f9c6a24c53bca1a
Author: Bernd Edlinger <bernd.edlinger@hotmail.de>
Date:   Fri Aug 16 16:37:04 2019 +0000

    backport: re PR tree-optimization/91109 ([arm] gcc.c-torture/execute/20040709-1.c fails since r273135)
    
    2019-08-16  Bernd Edlinger  <bernd.edlinger@hotmail.de>
    
            Backport from mainline
            2019-08-16  Bernd Edlinger  <bernd.edlinger@hotmail.de>
    
            PR tree-optimization/91109
            * lra-int.h (lra_need_for_scratch_reg_p): Declare.
            * lra.c (lra): Use lra_need_for_scratch_reg_p.
            * lra-spills.c (lra_need_for_scratch_reg_p): New function.
    
    From-SVN: r274578

commit caf4834ef8212f6db9f4b4e713ba84774e1eebd0
Author: Bernd Edlinger <bernd.edlinger@hotmail.de>
Date:   Fri Aug 16 16:31:13 2019 +0000

    backport: re PR tree-optimization/91109 ([arm] gcc.c-torture/execute/20040709-1.c fails since r273135)
    
    2019-08-16  Bernd Edlinger  <bernd.edlinger@hotmail.de>
    
            Backport from mainline
            2019-08-07  Bernd Edlinger  <bernd.edlinger@hotmail.de>
    
            PR tree-optimization/91109
            * lra-remat.c (update_scratch_ops): Remove assignment of the
            hard register.
    
    From-SVN: r274577

commit 78c13f46b3ea2f9a0ee17556d3ddc221ce9988e2
Author: Uros Bizjak <ubizjak@gmail.com>
Date:   Fri Aug 16 14:03:09 2019 +0200

    test_summary: Do not escape "=".
    
            * test_summary: Do not escape "=".
    
    From-SVN: r274566

commit cc93dc0dc5a20cff62eafaf4ed2e5d76dea571be
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Aug 16 00:16:13 2019 +0000

    Daily bump.
    
    From-SVN: r274554

commit 05409825873923c7a8164980032bc312f176b1a0
Author: Steve Ellcey <sellcey@marvell.com>
Date:   Thu Aug 15 20:41:47 2019 +0000

    backport: omp-simd-clone.c (simd_clone_adjust_return_type): Remove call to build_distinct_type_copy.
    
    2019-08-15  Steve Ellcey  <sellcey@marvell.com>
    
            Backport from mainline
            2019-08-02  Steve Ellcey  <sellcey@marvell.com>
    
            * omp-simd-clone.c (simd_clone_adjust_return_type): Remove call to
            build_distinct_type_copy.
            (simd_clone_adjust_argument_types): Ditto.
            (simd_clone_adjust): Call build_distinct_type_copy here.
            (expand_simd_clones): Ditto.
    
    From-SVN: r274548

commit 3bc5b51175fa77f115bd61a83602b6b76977cf18
Author: Marek Polacek <polacek@redhat.com>
Date:   Thu Aug 15 18:35:07 2019 +0000

    PR c++/90884 - stray note with -Wctor-dtor-privacy.
    
            * class.c (maybe_warn_about_overly_private_class): Guard the call to
            inform.
    
    From-SVN: r274547

commit 8f236cea1dd0d7f4cd57e530e181619420d42fbb
Author: Marek Polacek <polacek@redhat.com>
Date:   Thu Aug 15 18:33:43 2019 +0000

    PR c++/90473 - wrong code with nullptr in default argument.
    
            * call.c (null_ptr_cst_p): Update quote from the standard.
            * decl.c (check_default_argument): Don't return nullptr when the arg
            has side-effects.
    
            * g++.dg/cpp0x/nullptr42.C: New test.
    
    From-SVN: r274546

commit 9be0b095c9e1864a476d41faf84ad1d314f0ac47
Author: Marek Polacek <polacek@redhat.com>
Date:   Thu Aug 15 18:32:33 2019 +0000

    PR c++/87519 - bogus warning with -Wsign-conversion.
    
            * typeck.c (cp_build_binary_op): Use same_type_p instead of comparing
            the types directly.
    
            * g++.dg/warn/Wsign-conversion-5.C: New test.
    
    From-SVN: r274545

commit 857f2fe622228bbf85ba56ac1853c01eb0eb6136
Author: Marek Polacek <mpolacek@gcc.gnu.org>
Date:   Thu Aug 15 18:31:16 2019 +0000

    PR c++/81429 - wrong parsing of constructor with C++11 attribute.
    
            * parser.c (cp_parser_constructor_declarator_p): Handle the scenario
            when a parameter declaration begins with [[attribute]].
    
            * g++.dg/cpp0x/gen-attrs-68.C: New test.
            * g++.dg/cpp0x/gen-attrs-69.C: New test.
    
    From-SVN: r274544

commit bb4446179d67c89e1e13af5aa7038617af4b3b73
Author: Richard Biener <rguenther@suse.de>
Date:   Thu Aug 15 12:02:47 2019 +0000

    backport: [multiple changes]
    
    2019-08-15  Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/91445
            * gcc.dg/torture/pr91445.c: New testcase.
    
            Backport from mainline
            2019-07-05  Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/91091
            * tree-ssa-alias.h (get_continuation_for_phi): Add tbaa_p parameter.
            (walk_non_aliased_vuses): Likewise.
            * tree-ssa-alias.c (maybe_skip_until): Pass down tbaa_p.
            (get_continuation_for_phi): New tbaa_p parameter and pass
            it down.
            (walk_non_aliased_vuses): Likewise.
            * tree-ssa-pre.c (translate_vuse_through_block): Likewise.
            * tree-ssa-scopedtables.c (avail_exprs_stack::lookup_avail_expr):
            Likewise.
            * tree-ssa-sccvn.c (struct vn_walk_cb_data): Add tbaa_p flag.
            (vn_reference_lookup_3): Handle and pass down tbaa_p flag.
            (vn_reference_lookup_pieces): Adjust.
            (vn_reference_lookup): Remove alias-set altering, instead pass
            down false as tbaa_p.
    
            * gcc.dg/tree-ssa/pr91091-2.c: New testcase.
    
            2019-07-04  Richard Biener  <rguenther@suse.de>
    
            * tree-ssa-sccvn.h (vn_reference_lookup): Add last_vuse_ptr
            argument.
            * tree-ssa-sccvn.c (last_vuse_ptr, vn_walk_kind): Move
            globals into...
            (struct vn_walk_cb_data): New callback data struct.
            (vn_reference_lookup_2): Adjust.
            (vn_reference_lookup_3): Likewise.
            (vn_reference_lookup_pieces): Likewise.
            (vn_reference_lookup): Likewise, get last_vuse_ptr argument.
            (visit_reference_op_load): Adjust.
    
    From-SVN: r274532

commit 6ee515d50545ad0aee5f4626d96b3a318ba41c93
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Aug 15 00:16:22 2019 +0000

    Daily bump.
    
    From-SVN: r274500

commit 1a095ab0a97169cc0a1bac562041e04c11afa14b
Author: Martin Sebor <msebor@redhat.com>
Date:   Wed Aug 14 20:36:46 2019 +0000

    backport: re PR c++/90947 (Simple lookup table of array of strings is miscompiled)
    
            Backport from mainline
    
            2019-08-01  Martin Sebor  <msebor@redhat.com>
    
            PR c++/90947
            * tree.c (type_initializer_zero_p): Define.
            * tree.h (type_initializer_zero_p): New function.
    
            2019-08-05  Martin Sebor  <msebor@redhat.com>
    
            * doc/extend.texi (Common Variable Attributes): Document alias
            attribute.
    
            2019-08-01  Martin Sebor  <msebor@redhat.com>
    
            PR c++/90947
            * decl.c (reshape_init_array_1): Avoid truncating initializer
            lists containing string literals.
    
            2019-08-14  Martin Sebor  <msebor@redhat.com>
    
            PR tree-optimization/91294
            * gcc.dg/strlenopt-44.c: Adjust tested result.
            * gcc.dg/strlenopt-70.c: Avoid exercising unimplemnted optimization.
            * gcc.dg/strlenopt-73.c: New test.
            * gcc.dg/strlenopt-74.c: New test.
            * gcc.dg/strlenopt-75.c: New test.
            * gcc.dg/strlenopt-76.c: New test.
            * gcc.dg/strlenopt-77.c: New test.
    
    From-SVN: r274494

commit 10e3d230ddb1cf6311ece9d90d84b9d24843e718
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Wed Aug 14 21:10:00 2019 +0100

    PR c++/91436 fix C++ dialect for std::make_unique fix-it hint
    
    The std::make_unique function wasn't added until C++14, and neither was
    the std::complex_literals namespace.
    
    gcc/cp:
    
            PR c++/91436
            * name-lookup.c (get_std_name_hint): Fix min_dialect field for
            complex_literals and make_unique entries.
    
    gcc/testsuite:
    
            PR c++/91436
            * g++.dg/lookup/missing-std-include-5.C: Limit test to C++14 and up.
            * g++.dg/lookup/missing-std-include-6.C: Don't check make_unique in
            test that runs for C++11.
            * g++.dg/lookup/missing-std-include-8.C: Check make_unique here.
    
    From-SVN: r274493

commit d5c39366b69c199df0a689212304ddbafbcf3d27
Author: Steven G. Kargl <kargl@gcc.gnu.org>
Date:   Wed Aug 14 04:38:29 2019 +0000

    re PR fortran/87991 (ICE in gfc_constructor_append_expr, at fortran/constructor.c:135)
    
    2019-08-13  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/87991
            * resolve.c (check_data_variable): data-stmt-object with pointer
            attribute requires a data-stmt-value with the target attribute.
    
    2019-08-13  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/87991
            * gfortran.dg/pr87991.f90: New test.
    
    From-SVN: r274413

commit b43c457d46303e9d5b03373c8342623462abac5a
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Aug 14 00:16:15 2019 +0000

    Daily bump.
    
    From-SVN: r274409

commit 088f5f1596e795c19a31cbaeeb8a294b1e076fc6
Author: Thomas Koenig <tkoenig@gcc.gnu.org>
Date:   Tue Aug 13 22:25:32 2019 +0000

    backport: re PR fortran/90563 (Out of bounds error when compiling with -Wextra)
    
    2013-08-13  Thomas Koenig  <tkoenig@gcc.gnu.org>
    
            Backport from trunk
            PR fortran/90563
            * frontend-passes.c (insert_index): Suppress errors while
            simplifying the resulting expression.
    
    2013-08-13  Thomas Koenig  <tkoenig@gcc.gnu.org>
    
            Backport from trunk
            PR fortran/90563
            * gfortran.dg/do_subsript_5.f90: New test.
    
    From-SVN: r274405

commit b332d1d05477828f59dc80b1ee757d02685d4235
Author: Steven G. Kargl <kargl@gcc.gnu.org>
Date:   Tue Aug 13 20:38:01 2019 +0000

    re PR fortran/88072 (gfortran crashes with an internal compiler error)
    
    2019-08-13  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/88072
            * misc.c (gfc_typename): Do not point to something that ought not to
            be pointed at.
    
    2019-08-13  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/88072
            * gfortran.dg/pr88072.f90: New test.
            * gfortran.dg/unlimited_polymorphic_28.f90: Fix error message.
    
    From-SVN: r274401

commit 1e43632dbdcafa057a24672f2af77c71d3a58479
Author: Thomas Koenig <tkoenig@gcc.gnu.org>
Date:   Tue Aug 13 20:01:43 2019 +0000

    backport: re PR fortran/90561 (ICE in gimplify_var_or_parm_decl, at gimplify.c:2747)
    
    2019-08-13  Thomas Koenig  <tkoenig@gcc.gnu.org>
    
            Backport from trunk
            PR fortran/90561
            * trans.h (gfc_evaluate_now_function_scope): New function.
            * trans.c (gfc_evaluate_now_function_scope): New function.
            * trans-expr.c (gfc_trans_assignment): Use it.
    
    2019-08-13  Thomas Koenig  <tkoenig@gcc.gnu.org>
    
            Backport from trunk
            PR fortran/90561
            * gfortran.dg/deferred_character_34.f90: New test.
    
    From-SVN: r274398

commit 46af5b2e56f7fcf90be041318016346f7d8a2da4
Author: Steven G. Kargl <kargl@gcc.gnu.org>
Date:   Tue Aug 13 18:49:00 2019 +0000

    re PR fortran/89647 (Host associated procedure unable to be used as binding target)
    
    2019-08-13  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/89647
            resolve.c (resolve_typebound_procedure): Allow host associated
            procedure to be a binding target.  While here, wrap long line.
    
    2019-08-13  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/89647
            * gfortran.dg/pr89647.f90: New test.
    
    From-SVN: r274395

commit 6a2ca0d431615c9452cccbb13e0069763bce4c7d
Author: Steven G. Kargl <kargl@gcc.gnu.org>
Date:   Tue Aug 13 18:27:05 2019 +0000

    re PR fortran/87993 (ICE in gfc_constructor_first, at fortran/constructor.c:234)
    
    2019-08-13  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/87993
            * expr.c (gfc_simplify_expr): Simplifcation of an array with a kind
            type inquiry suffix yields a constant expression.
    
    2019-08-13  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/87993
            * gfortran.dg/pr87993.f90: New test.
    
    From-SVN: r274390

commit 06b6df92d435b2580b140fdcaca290fccd3c4662
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Tue Aug 13 14:14:45 2019 +0100

    PR libstdc++/90361 add missing macro definition
    
    The src/c++17/string-inst.cc file needs to override the default string
    ABI so that it still contains the expected symbols even when the library
    is configured with --with-default-libstdcxx-abi=gcc4-compatible.
    
    Backport from mainline
    2019-08-12  Jonathan Wakely  <jwakely@redhat.com>
    
            PR libstdc++/90361
            * src/c++17/string-inst.cc: Use _GLIBCXX_USE_CXX11_ABI=1 by default.
    
    From-SVN: r274379

commit 17adf232a0445577ec0b14b0ca890edaee8abb7a
Author: Thomas Koenig <tkoenig@gcc.gnu.org>
Date:   Tue Aug 13 10:05:44 2019 +0000

    backport: re PR fortran/91424 (Extend warnings about DO loops)
    
    2019-08-13  Thomas Koenig  <tkoenig@gcc.gnu.org>
    
            Backport from trunk
            PR fortran/91424
            * frontend-passes.c (do_subscript): Do not warn for an
            expression a second time.  Do not warn about a zero-trip loop.
            (doloop_warn): Also look at contained namespaces.
    
    2019-08-13  Thomas Koenig  <tkoenig@gcc.gnu.org>
    
            Backport from trunk
            PR fortran/91424
            * gfortran.dg/do_subscript_3.f90: New test.
            * gfortran.dg/do_subscript_4.f90: New test.
            * gfortran.dg/pr70754.f90: Use indices that to not overflow.
    
    2019-08-13  Thomas Koenig  <tkoenig@gcc.gnu.org>
    
            Backport from trunk
            PR fortran/91422
            * testsuite/libgomp.oacc-fortran/routine-7.f90: Correct array
            dimension.
    
    From-SVN: r274369

commit 4c98406c521e824127b4e6bfce29ef0ead4de06a
Author: Janne Blomqvist <jb@gcc.gnu.org>
Date:   Tue Aug 13 12:02:25 2019 +0300

    PR fortran/91414 Correctly fill master_state from os_seed.
    
    From-SVN: r274364

commit 2a3c1bfcdd425d7acc6e7989e6cd6faf4c2ccb6d
Author: Janne Blomqvist <jb@gcc.gnu.org>
Date:   Tue Aug 13 11:42:43 2019 +0300

    PR fortran/91414 Improve initialization of PRNG
    
    As part of PR 91414 an improved PRNG was contributed to trunk. This is
    a partial backport of some related changes to the PRNG. Namely when
    seeding the PRNG, it needs only 8 bytes of randomness from the OS, and
    uses a simple splitmix64 PRNG to fill in the rest of the state,
    instead of getting all the state from the OS. This can be useful for
    operating systems that can run out of entropy.
    
    libgfortran/ChangeLog:
    
    2019-08-13  Janne Blomqvist  <jb@gcc.gnu.org>
    
            Partial backport from trunk
            PR fortran/91414
            * intrinsics/random.c (lcg_parkmiller): Replace with splitmix64.
            (splitmix64): New function.
            (getosrandom): Fix return value, simplify.
            (init_rand_state): Use getosrandom only to get 8 bytes, splitmix64
            to fill rest of state.
    
    From-SVN: r274362

commit 097cc23be32286ced7e1f9a114088de9a7dc5991
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Aug 13 00:16:12 2019 +0000

    Daily bump.
    
    From-SVN: r274326

commit a77715d9406f6d4e5681f9407d7d0b1dcce3b8ed
Author: Steven G. Kargl <kargl@gcc.gnu.org>
Date:   Mon Aug 12 20:09:00 2019 +0000

    re PR fortran/91359 (logical function X returns .TRUE. - Warning:  spaghetti code)
    
    2019-08-12  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/91359
            * trans-decl.c (gfc_generate_return): Ensure something is returned
            from a function.
    
    2019-08-12  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/91359
            * gfortran.dg/pr91359_1.f: New test.
            * gfortran.dg/pr91359_2.f: Ditto.
    
    From-SVN: r274319

commit 5c97aa19754eaf3a9f1b0afc1d0e5b6782af20d1
Author: Steven G. Kargl <kargl@gcc.gnu.org>
Date:   Mon Aug 12 19:48:37 2019 +0000

    re PR fortran/42546 (ALLOCATED statement typo in the docs and for scalar variables)
    
    2019-08-01  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/42546
            * check.c(gfc_check_allocated): Add comment pointing to ...
            * intrinsic.c(sort_actual): ... the checking done here.
    
    2019-08-01  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/42546
            * gfortran.dg/allocated_1.f90: New test.
            * gfortran.dg/allocated_2.f90: Ditto.
    
    From-SVN: r274318

commit 6e21f7d2cc16e7189e78fbe85c1617d1240268e1
Author: Tom Honermann <tom@honermann.net>
Date:   Mon Aug 12 17:46:37 2019 +0000

    PR c++/88095, CTAD for literal operator templates per P0732
    
    This patch fixes PR c++/88095: class nontype template parameter UDL string
    literals doesn't accepts deduction placeholder
    
    It also addresses a latent issue; literal operator templates with template
    parameter packs of literal class type were previously accepted.  The patch
    corrects this and adds a test (udlit-class-nttp-neg.C).
    
    This fix is needed for one of the char8_t remediation approaches documented
    in P1423, and may be helpful for existing code bases impacted by the char8_t
    changes adopted via P0482 for C++20.
    
    gcc/cp/ChangeLog:
    
    2019-08-02  Tom Honermann  <tom@honermann.net>
    
            * parser.c (cp_parser_template_declaration_after_parameters): Enable
            class template argument deduction for non-type template parameters
            in literal operator templates.
    
    gcc/testsuite/ChangeLog:
    
    2019-08-02  Tom Honermann  <tom@honermann.net>
    
            PR c++/88095
            * g++.dg/cpp2a/udlit-class-nttp-ctad.C: New test.
            * g++.dg/cpp2a/udlit-class-nttp-ctad-neg.C: New test.
            * g++.dg/cpp2a/udlit-class-nttp-ctad-neg2.C: New test.
            * g++.dg/cpp2a/udlit-class-nttp.C: New test.
            * g++.dg/cpp2a/udlit-class-nttp-neg.C: New test.
            * g++.dg/cpp2a/udlit-class-nttp-neg2.C: New test.
    
    From-SVN: r274317

commit 0b8c26032610d97d92a4d14a9ebb693fec0f75b8
Author: Jason Merrill <jason@redhat.com>
Date:   Mon Aug 12 13:46:32 2019 -0400

    PR c++/91378 - ICE with noexcept and auto return type.
    
    Here, since the call to g is not type-dependent, we call mark_used on it to
    determine its return type.  This also wants to instantiate the
    noexcept-expression.  But since nothing in maybe_instantiate_noexcept was
    calling push_to_top_level, we substituted b.i with processing_template_decl
    set, so we left it unresolved for later access checking.  As a result, the
    type of C::g<int> remained instantiation-dependent, leading to an ICE in
    type_dependent_expression_p on the assert that the type of a function
    template with no dependent template arguments must be non-dependent.
    
            * pt.c (maybe_instantiate_noexcept): push_to_top_level.
    
    From-SVN: r274316

commit 3f92498c3fc9ba765183dbe404b477ba6b41ee7f
Author: Jason Merrill <jason@redhat.com>
Date:   Mon Aug 12 13:46:25 2019 -0400

    PR c++/90538 - multiple expansions of capture packs
    
    Previously, with init-capture the type of the closure field was a
    DECLTYPE_TYPE of the initializer.  But since each time we tsubst a lambda we
    get a different lambda, that meant that if the initializer is a lambda, we'd
    end up with different closure types in the field and initializer after
    substitution (PR 87322).  We dealt with this by remembering the lambda
    instantiation within each pack expansion element, using
    local_specialization_stack to separate the elements.  But that broke this
    testcase, because it lost lambda capture proxies that also use
    local_specializations.
    
    So, this patch removes the local_specializations changes from that patch and
    fixes 87322 differently, by giving init-capture fields 'auto' type and doing
    deduction later.  There's a bit of a kludge to get the right number of
    fields by pretending that 'auto...' uses the parameter packs from the
    initializer, but it does the trick.
    
            * cp-tree.h (DECLTYPE_FOR_INIT_CAPTURE): Remove.
            * lambda.c (add_capture): Copy parameter packs from init.
            (lambda_capture_field_type): Always use auto for init-capture.
            * pt.c (uses_parameter_packs): Return tree.
            (tsubst) [DECLTYPE_TYPE]: Remove init-capture handling.
            (gen_elem_of_pack_expansion_instantiation): Don't push
            local_specialization_stack.
            (prepend_one_capture): New.
            (tsubst_lambda_expr): Use it.  Don't touch local_specializations.
            (do_auto_deduction): Avoid redundant error.
    
    From-SVN: r274315

commit 56067ed5759ad098d52570a8c6e27063838ebef6
Author: Richard Biener <rguenther@suse.de>
Date:   Mon Aug 12 12:59:08 2019 +0000

    backport: [multiple changes]
    
    2019-08-12  Richard Biener  <rguenther@suse.de>
    
            Backport from mainline
            2019-08-12  Richard Biener  <rguenther@suse.de>
    
            PR lto/91375
            * tree.c (free_lang_data_in_type): Do not free TYPE_BINFO dependent on
            flag_devirtualize.
    
            2019-08-12  Richard Biener  <rguenther@suse.de>
    
            PR driver/91130
            * lto-wrapper.c (get_options_from_collect_gcc_options): Remove
            lang_mask option, always use CL_DRIVER.
            (find_and_merge_options): Adjust.
            (run_gcc): Likewise.
    
            2019-08-07  Richard Earnshaw  <rearnsha@arm.com>
    
            PR driver/91130
            * lto-wrapper.c (find_and_merge_options): Use CL_DRIVER when
            processing COLLECT_GCC_OPTIONS.
            (run_gcc): Likewise.
    
    From-SVN: r274311

commit a8e4a6e0ca56d5066bb199b342019f51918ca0dd
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Mon Aug 12 10:40:24 2019 +0200

    * BASE-VER: Set to 9.2.1.
    
    From-SVN: r274276

commit a0c06cc27d2146b7d86758ffa236516c6143d62c
Author: Jakub Jelinek <jakub@gcc.gnu.org>
Date:   Mon Aug 12 09:38:49 2019 +0200

    Update ChangeLog and version files for release
    
    From-SVN: r274274

commit 3244e42a52040d8a16435e11611e8a2b2a86b2c1
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Aug 12 00:16:21 2019 +0000

    Daily bump.
    
    From-SVN: r274271

commit 64ec603fe7fe851264d657e52e3832f5f1303853
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Aug 11 00:16:21 2019 +0000

    Daily bump.
    
    From-SVN: r274260

commit 175890a9831cd2b477f860230c41a4314afdbc54
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Aug 10 00:16:19 2019 +0000

    Daily bump.
    
    From-SVN: r274247

commit 8c6e179a702eeb0ecf6e87fe8e8b266dd61008ea
Author: Joseph Myers <joseph@codesourcery.com>
Date:   Fri Aug 9 23:02:27 2019 +0100

    * zh_TW.po: Update.
    
    From-SVN: r274244

commit 4f3bacbcfb07671d501b356b6b442813432f3c5e
Author: Joseph Myers <joseph@codesourcery.com>
Date:   Fri Aug 9 23:00:57 2019 +0100

    * uk.po: Update.
    
    From-SVN: r274242

commit dbe254e5097e70cdbfa3fe3f074d38b12a88897e
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Aug 9 00:16:13 2019 +0000

    Daily bump.
    
    From-SVN: r274223

commit d51ec706e8fca349a50d2d20e5efb84787d1a9f4
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Aug 8 00:16:25 2019 +0000

    Daily bump.
    
    From-SVN: r274204

commit bd6a87ed214a2cc099a63d17e705028cb4709941
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Aug 7 00:16:23 2019 +0000

    Daily bump.
    
    From-SVN: r274154

commit 7df42f137ee44895f9c7c6662ef7d847393cce9c
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Aug 6 00:16:18 2019 +0000

    Daily bump.
    
    From-SVN: r274133

commit 0ae5ccfd0bc903b60b7008775eee8b847cfa4be6
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Mon Aug 5 08:12:23 2019 +0000

    Ada, Darwin, PPC, backport fix for stack check probes.
    
    On PPC, Darwin uses the same code as other parts of the port.
    
    2019-08-05  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-07-02  Iain Sandoe  <iain@sandoe.co.uk>
    
            * libgnat/system-darwin-ppc.ads: Set Stack_Check_Probes True for
            PPC Darwin.
    
    From-SVN: r274111

commit fd2db2c38b8d5d0b6df16a493b00eaf4546dfc1d
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Mon Aug 5 08:09:34 2019 +0000

    Ada, backport push -shared-libgcc where needed.
    
    Gnatlink has code that checks for duplicate '-shared-libgcc’ switches (but not
    duplicate ‘static-libgcc’) and also pushes ’static-libgcc' onto the link line for
    targets that default to static linking, provided '-shared-libgcc' is not present.
    
    For targets that should use a shared libgcc we need the same process to be
    applied (in inverse), in the event that they do not default to providing the
    shared flag implicitly.
    
    So this adds the complementary set of tests for the shared case and pushes
    the shared flag as needed. As a minor tidy-up there’s no need push duplicates
    of the libgcc switch onto the link line when one has already been seen (given by
    the user).
    
    The patch does not alter any of the platform defaults for static/shared libgcc,
    but it ensures that the intent of the link is explicit.
    
    2019-08-05  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-06-30  Iain Sandoe  <iain@sandoe.co.uk>
    
            * gnatlink.adb (Link_Step): Remove duplicate -static-libgcc switches.
            Push -shared-libgcc explicitly, when it is the target default (unless
            overidden by the static flag).
            When the user has put an instance of shared/static-libgcc do not push
            a duplicate of this.
    
    From-SVN: r274110

commit 41e094840be3fc6dc92875aa41c25f8077a1f8e3
Author: Kito Cheng <kito.cheng@sifive.com>
Date:   Mon Aug 5 07:54:31 2019 +0000

    RISC-V: Promote type correctly for libcalls
    
     - argument and return value for libcall won't promote at
       default_promote_function_mode_always_promote, however we expect it
       should sign-extend as normal function.
    
     - Witout this patch, this test case will fail at -march=rv64i -mabi=lp64.
    
     - The implementation of riscv_promote_function_mode is borrowed from MIPS.
    
    gcc/ChangeLog
    
            Backport from mainline
            2019-08-05  Kito Cheng  <kito.cheng@sifive.com>
    
            * config/riscv/riscv.c (riscv_promote_function_mode): New.
            (TARGET_PROMOTE_FUNCTION_MODE): Use riscv_promote_function_mode.
    
    gcc/testsuite/ChangeLog
    
            Backport from mainline
            2019-08-05  Kito Cheng  <kito.cheng@sifive.com>
    
            * gcc.target/riscv/promote-type-for-libcall.c: New.
    
    From-SVN: r274108

commit 2aeeb52fc4890c878d15202d98195a0155fc8105
Author: Alan Modra <amodra@gmail.com>
Date:   Mon Aug 5 11:23:31 2019 +0930

    PR91349, powerpc64*-*-freebsd* defines _GNU_SOURCE
    
    rev 266496 (git ab6b1bb456) undefined some macros in rs6000/freebsd.h
    but missed doing the same in rs6000/freebsd64.h.
    
            PR target/91349
            * config/rs6000/freebsd64.h (CPLUSPLUS_CPP_SPEC),
            (LINK_GCC_C_SEQUENCE_SPEC): Undef.
    
    From-SVN: r274106

commit a520fd91c40d1e6e6ee6eac3475cf610f16184d0
Author: Jerry DeLisle <jvdelisle@gcc.gnu.org>
Date:   Mon Aug 5 00:47:41 2019 +0000

    backport: re PR fortran/87233 (Constraint C1279 still followed after f2008 standard revision (?))
    
    2019-08-04  Jerry DeLisle  <jvdelisle@gcc.gnu.org>
    
            Backport from trunk
            PR fortran/87233
            * expr.c (check_restricted): Relax constraint C1279 which was
            removed from F2008 and above.
    
            * gfortran.dg/initialization_14.f90: Modify to now pass by
            removing two dg-error commands. Added comments.
            * gfortran.dg/initialization_30.f90: New test that includes the
            two tests removed above with the 'dg-options -std=f95'.
    
    From-SVN: r274104

commit b80e6fe7ba8892c59dcba17ba2da66c8a5b6dcbf
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Aug 5 00:16:19 2019 +0000

    Daily bump.
    
    From-SVN: r274102

commit 691a9e8841b8f25c13477bbee1a4f22a5603add3
Author: Segher Boessenkool <segher@kernel.crashing.org>
Date:   Sun Aug 4 21:23:59 2019 +0200

    backport: rs6000.c (rs6000_dbx_register_number): Return the correct numbers for TFHAR, TFIAR, TEXASR.
    
            Backport from trunk
            2019-05-02  Segher Boessenkool  <segher@kernel.crashing.org>
    
            * config/rs6000/rs6000.c (rs6000_dbx_register_number): Return the
            correct numbers for TFHAR, TFIAR, TEXASR.
    
    From-SVN: r274097

commit c63d7838df2b557ea28f6c5ef40db2bce8638237
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Sun Aug 4 13:34:19 2019 +0000

    Objective-C, NeXT, backport workaround for PR90709
    
    Since we cannot parse the current NeXT headers, because of PR90709 and its
    dependents, we have a large amount of testsuite noise for Darwin platforms.
    In order to restore the usefulness of the testsuite, we are going add headers
    without the modern syntax elements that trigger the bug, and use these for
    test runs on newer Darwin.
    
    The headers are imported from GNUStep, with some local modifications to make
    sure that __BLOCKS__ is honoured as a gate for Apple-style blocks closures.
    
    CF-CFString.h, F-NS*.h are proxy headers that use the installed CoreFoundation
    or Foundation headers on systems <= Darwin12 and the GNUStep headers for newer.
    
    Use the CF-CFString.h, F-NS*.h proxy headers where needed in the objective-c
    testsuite. Make minor adjustments to tests as required, providing that those
    do not alter the test intent.
    
    2019-08-04  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-06-15  Iain Sandoe  <iain@sandoe.co.uk>
    
            PR objc/90709
            * obj-c++.dg/proto-lossage-7.mm: Use proxy headers.
            * obj-c++.dg/strings/const-cfstring-2.mm: Likewise.
            * obj-c++.dg/strings/const-cfstring-5.mm: Likewise
            * obj-c++.dg/strings/const-str-12.mm: Likewise.
            * obj-c++.dg/syntax-error-1.mm: Likewise.
            * obj-c++.dg/torture/strings/const-cfstring-1.mm: Likewise.
            * obj-c++.dg/torture/strings/const-str-10.mm: Likewise.
            * obj-c++.dg/torture/strings/const-str-11.mm: Likewise.
            * obj-c++.dg/torture/strings/const-str-9.mm: Likewise.
            * obj-c++.dg/cxx-ivars-3.mm: Skip on later Darwin, where the 10.4 API
            in no longer supported, also on m64 where there's no meaning to it.
            * obj-c++.dg/isa-field-1.mm: Suppress unwanted warning, add comment why.
            * obj-c++.dg/objc-gc-3.mm: Skip for Darwin > 16, the API use is an error
            there.
            * obj-c++.dg/qual-types-1.mm: Prune a spurious l64 warning.
            * obj-c++.dg/stubify-1.mm: Tidy up after better compiler warnings.
            * obj-c++.dg/stubify-2.mm: Likewise.
            * obj-c++.dg/try-catch-1.mm: Likewise.
            * obj-c++.dg/try-catch-3.mm: Likewise.
    
            Backport from mainline.
            2019-06-15  Iain Sandoe  <iain@sandoe.co.uk>
    
            PR objc/90709
            * objc.dg/encode-7-next-64bit.m: Use proxy headers.
            * objc.dg/image-info.m: Likewise.
            * objc.dg/method-6.m: Likewise.
            * objc.dg/no-extra-load.m: Likewise.
            * objc.dg/objc-foreach-4.m: Likewise.
            * objc.dg/objc-foreach-5.m: Likewise.
            * objc.dg/proto-lossage-7.m: Likewise.
            * objc.dg/strings/const-cfstring-2.m: Likewise.
            * objc.dg/strings/const-cfstring-5.m: Likewise.
            * objc.dg/strings/const-str-12b.m: Likewise.
            * objc.dg/symtab-1.m: Likewise.
            * objc.dg/torture/strings/const-cfstring-1.m: Likewise.
            * objc.dg/torture/strings/const-str-10.m: Likewise.
            * objc.dg/torture/strings/const-str-11.m: Likewise.
            * objc.dg/torture/strings/const-str-9.m: Likewise.
            * objc.dg/zero-link-1.m: Likewise.
            * objc.dg/zero-link-2.m: Likewise.
            * objc.dg/zero-link-3.m: Likewise.
            * objc.dg/isa-field-1.m: Suppress unwanted warning, add comment why.
            * objc.dg/headers.m: XFAIL for Darwin14-19.
            * objc.dg/objc-gc-4.m: Skip for Darwin > 16, the API use is an error
            there.
    
            Backport from mainline.
            2019-06-15  Iain Sandoe  <iain@sandoe.co.uk>
    
            PR objc/90709
            * objc-obj-c++-shared/CF-CFString.h: New.
            * objc-obj-c++-shared/F-NSArray.h: New.
            * objc-obj-c++-shared/F-NSAutoreleasePool.h: New.
            * objc-obj-c++-shared/F-NSObject.h: New.
            * objc-obj-c++-shared/F-NSString.h: New.
            * objc-obj-c++-shared/F-NSValue.h: New.
            * objc-obj-c++-shared/GNUStep/CoreFoundation/CFArray.h: New.
            * objc-obj-c++-shared/GNUStep/CoreFoundation/CFAvailability.h: New.
            * objc-obj-c++-shared/GNUStep/CoreFoundation/CFBase.h: New.
            * objc-obj-c++-shared/GNUStep/CoreFoundation/CFCharacterSet.h: New.
            * objc-obj-c++-shared/GNUStep/CoreFoundation/CFData.h: New.
            * objc-obj-c++-shared/GNUStep/CoreFoundation/CFDictionary.h: New.
            * objc-obj-c++-shared/GNUStep/CoreFoundation/CFLocale.h: New.
            * objc-obj-c++-shared/GNUStep/CoreFoundation/CFString.h: New.
            * objc-obj-c++-shared/GNUStep/Foundation/NSArray.h: New.
            * objc-obj-c++-shared/GNUStep/Foundation/NSAutoreleasePool.h: New.
            * objc-obj-c++-shared/GNUStep/Foundation/NSDate.h: New.
            * objc-obj-c++-shared/GNUStep/Foundation/NSEnumerator.h: New.
            * objc-obj-c++-shared/GNUStep/Foundation/NSGeometry.h: New.
            * objc-obj-c++-shared/GNUStep/Foundation/NSObjCRuntime.h: New.
            * objc-obj-c++-shared/GNUStep/Foundation/NSObject.h: New.
            * objc-obj-c++-shared/GNUStep/Foundation/NSRange.h: New.
            * objc-obj-c++-shared/GNUStep/Foundation/NSString.h: New.
            * objc-obj-c++-shared/GNUStep/Foundation/NSValue.h: New.
            * objc-obj-c++-shared/GNUStep/Foundation/NSZone.h: New.
            * objc-obj-c++-shared/GNUStep/GNUstepBase/GNUstep.h: New.
            * objc-obj-c++-shared/GNUStep/GNUstepBase/GSBlocks.h: New.
            * objc-obj-c++-shared/GNUStep/GNUstepBase/GSConfig.h: New.
            * objc-obj-c++-shared/GNUStep/GNUstepBase/GSObjCRuntime.h: New.
            * objc-obj-c++-shared/GNUStep/GNUstepBase/GSVersionMacros.h: New.
            * objc-obj-c++-shared/GNUStep/GNUstepBase/NSArray+GNUstepBase.h: New.
            * objc-obj-c++-shared/GNUStep/GNUstepBase/NSMutableString+GNUstepBase.h:
            New.
            * objc-obj-c++-shared/GNUStep/GNUstepBase/NSNumber+GNUstepBase.h: New.
            * objc-obj-c++-shared/GNUStep/GNUstepBase/NSObject+GNUstepBase.h: New.
            * objc-obj-c++-shared/GNUStep/GNUstepBase/NSString+GNUstepBase.h: New.
    
    From-SVN: r274095

commit 38a52f746465440a1f2d58e64c315672d83a5809
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Sun Aug 4 13:17:15 2019 +0000

    Darwin, PPC, testsuite, backport fix for bmi2-bzhi64-1a.c
    
    This test is failing with older cpus because the included header needs both
    altivec and vsx to be enabled to succeed in compiling. Without this (if these
    are not defaults for the cpu) there are errors like:
    
    In file included from ... x86intrin.h:41,
    from ... bmi2-bzhi64-1a.c:6:
    ... xmmintrin.h: In function '_mm_loadu_ps':
    ... xmmintrin.h:122:11:
    error: incompatible types when returning type 'int' but '__m128' {aka '__vector(4) float'} was expected
    <snip>
    ... xmmintrin.h: In function '_mm_cvtps_pi32':
    ... xmmintrin.h:996:3:
    error: use of 'long long' in AltiVec types is invalid without '-mvsx'
    <snip>
    
    Fixed by adding -maltivec -mvsx to the options
    
    2019-08-04  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-07-27  Iain Sandoe  <iain@sandoe.co.uk>
    
            * gcc.target/powerpc/bmi2-bzhi64-1a.c: Add options to enable altivec
            and vsx.
    
    From-SVN: r274093

commit 937e3317aa84072dc1f5b6e99b8c257f8533976d
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Sun Aug 4 13:12:26 2019 +0000

    Darwin, testsuite, backport fix for 91087.
    
    The testcase is failing to instrument part of the source because of a bug
    in the ordering of static DTORs. It seems unlikely that this is generically
    fixable in the toolchain (and given that it's likely to be a dynamic loader
    change would not be expected to be applied retrospectively to OS versions
    that are out of support). To avoid the testsuite noise, xfail the count lines
    that don't match (we can adjust the xfails as/when the upstream bug is fixed).
    
    dejagnu xfails do not seem to work when embedded in a line like:
    ~Test (void) { .... /* count(1) { xfail ... } */ }
    the closing brace seems to confuse the parser. The solution is to exapnd the
    text onto three lines.
    
    2019-08-04  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-07-25  Iain Sandoe  <iain@sandoe.co.uk>
    
            PR gcov-profile/91087
            * g++.dg/gcov/pr16855.C: Xfail the count lines for the DTORs and the
            "final" line for the failure summaries.  Adjust source layout so that
            dejagnu xfail expressions work.
    
    From-SVN: r274092

commit 7137a9c7cf3f6d75a1ed2b5c001f857d059601ce
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Sun Aug 4 13:10:00 2019 +0000

    Darwin, PPC, testsuite - backport fix for stabs-attrib-vect-darwin.
    
    This test requires stabs support in the assembler so require it.
    
    2019-08-04  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-07-13  Iain Sandoe  <iain@sandoe.co.uk>
    
            * gcc.target/powerpc/stabs-attrib-vect-darwin.c: Require stabs
            support.
    
    From-SVN: r274091

commit 9d97d364d66ce3f198b0ec0d8eedc9140b5945a6
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Sun Aug 4 13:06:11 2019 +0000

    Darwin, testsuite, backport removal of unused test.
    
    During GCC-9, the codegen for unreachable switch case statements changed
    such that the (undefined) behaviour of reaching such statements is directed
    to one of the existing switch cases. This means that the testcase which
    deals with the old behaviour can no longer work (and there is nothing to test
    with it). The [Darwin-specific] test is now redundant and can be removed.
    
    2019-08-04  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-07-12  Iain Sandoe  <iain@sandoe.co.uk>
    
            * gcc.dg/pr57438-2.c: Remove.
    
    From-SVN: r274090

commit 312258b69f4570b5059413f7a780f85ef000a680
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Sun Aug 4 12:59:22 2019 +0000

    Darwin, PPC, testsuite - backport fix for safe-indirect-jump* fails.
    
    The -mno-speculate-indirect-jumps functionality is not implemented for
    Darwin.
    
    2019-08-04  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-06-24  Iain Sandoe  <iain@sandoe.co.uk>
    
            * gcc.target/powerpc/safe-indirect-jump-1.c: Skip for Darwin.
            * gcc.target/powerpc/safe-indirect-jump-7.c: Likewise.
    
    From-SVN: r274088

commit 2165bc2dc97300a13f3b21a2b607e449a04630c6
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Sun Aug 4 12:55:56 2019 +0000

    Darwin, PPC, testsuite - backport fix for powerpc/spec-barr-1.c
    
    We just needed to adjust the regex to accept Darwin's register names.
    
    2019-08-04  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-06-24  Iain Sandoe  <iain@sandoe.co.uk>
    
            * gcc.target/powerpc/spec-barr-1.c: Adjust scan assembler regex
            to recognise Darwin's register names.
    
    From-SVN: r274087

commit 653561962e93276854ffd85f866cc97045d1ba9f
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Sun Aug 4 12:52:31 2019 +0000

    Darwin, testsuite - backport fix for cpp/isysroot-1.c.
    
    For the test to succeed there needs to be some header that is to be found in
    the 'expected' place i.e. <sysroot>/usr/include/. It's important that it is
    not the name of a header for which fixincludes have been applied, since such
    headers will be found in the gcc include-fixed dir and, in general, reference
    additional headers. The dummy sysroot will prevent the additional headers
    from being found, resulting in a failed test. The fix is to use a header name
    that isn't expected to be present in a real sysroot.
    
    2019-08-04  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-06-24  Iain Sandoe  <iain@sandoe.co.uk>
    
            * gcc.dg/cpp/isysroot-1.c: Use <example.h> as the test header.
            * gcc.dg/cpp/usr/include/stdio.h: Rename...
            * gcc.dg/cpp/usr/include/example.h: ... to this.
    
    From-SVN: r274086

commit 504ea2ade6a68262a2c82ebb48bd22dcf93cb3fc
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Sun Aug 4 12:49:12 2019 +0000

    Darwin, PPC< testsuite - backport fix for powerpc/builtins-2.c
    
    This cannot pass for current Darwin, since it requires VSX and we
    don't have any hardware supporting that. Add a dg-requires clause
    for this.
    
    2019-08-04  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-06-23  Iain Sandoe  <iain@sandoe.co.uk>
    
            * gcc.target/powerpc/builtins-2.c: Require VSX hardware support.
    
    From-SVN: r274085

commit 5406f55fb572be7d3468242b708b1c8603f4c788
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Sun Aug 4 12:46:00 2019 +0000

    Darwin, PPC, testsuite, backport fix for pr80125.
    
    Darwin (unlike most of the members of the PowerPC port family)
    defaults to signed chars, so the test was failing to compile with
    a "mismatched parameters" error.
    
    2019-08-04  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-06-23  Iain Sandoe  <iain@sandoe.co.uk>
    
            * gcc.target/powerpc/pr80125.c (foo): Use an unsigned char
            vector explicitly for the vec_perm.
    
    From-SVN: r274084

commit 83a52fd08c74a7de626a3ebed301726af226a7d7
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Sun Aug 4 12:40:43 2019 +0000

    Darwin, PPC, testsuite - backport fix for builtins-1.
    
    This needs to account for Darwin's __USER_LABEL_PREFIX__.
    
    2019-08-04  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-06-23  Iain Sandoe  <iain@sandoe.co.uk>
    
            * gcc.target/powerpc/builtins-1.c: Account for Darwin's use of
            __USER_LABEL_PREFIX__.
    
    From-SVN: r274083

commit 04f5aea46f3d2a6910732934230160bcf9aac77e
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Sun Aug 4 12:37:28 2019 +0000

    Darwin, PPC, testsuite, backport fix for pr71785.
    
    Firstly, we adjust the test conditions to use non-PIC code for Darwin.
    Secondly, we have to account for out-of-line GPR restores which gives
    a false positive on one of the scan-assembler-not. Lastly, we make the
    test a bit more specific for Darwin - that it looks for absence of
    branches to local labels.
    
    2019-08-04  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-06-23  Iain Sandoe  <iain@sandoe.co.uk>
    
            * gcc.target/powerpc/pr71785.c: For Darwin, make test non-PIC,
            expect the out-of-line GPR restore, and test specifically for
            absence of branches to local labels.
    
    From-SVN: r274082

commit 049c6c4ff86a407da9d3f2de7039343374ed606a
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Sun Aug 4 12:29:53 2019 +0000

    Darwin, PPC, testsuite, require DFP for two tests using it.
    
    The two tests use decimal floating point, add the relevant dg-requires
    so that they are unsupported on platforms without DFP.
    
    2019-08-04  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-06-22  Iain Sandoe  <iain@sandoe.co.uk>
    
            * gcc.target/powerpc/pr64205.c: Require effective target dfp.
            * gcc.target/powerpc/pr79909.c: Likewise.
    
    From-SVN: r274081

commit ebe1b3d02aad075233ca4ce735d6ecedc0d657d8
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Sun Aug 4 12:22:55 2019 +0000

    Darwin, ppc, testsuite, backport fix for darwin-bool-1.
    
    This test is failing because of a pedantic warning that is unrelated to the
    purpose of the test. Fixed by suppressing that warning
    
    2019-08-04  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-06-22  Iain Sandoe  <iain@sandoe.co.uk>
    
            * gcc.target/powerpc/darwin-bool-1.c: Suppress the pedantic
            warning about _Bool.
    
    From-SVN: r274080

commit 8d4735c76cbc2511b73ebe280effa3fbe74a4835
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Sun Aug 4 12:16:10 2019 +0000

    Darwin, testsuite, backport fix for pr71694.
    
    This test fails for Darwin m32 because it's scanning for absence
    of an instruction that's validly used in PIC code.  Fixed, in this
    case, by using non-PIC codegen.
    
    2019-08-04  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-06-13  Iain Sandoe  <iain@sandoe.co.uk>
    
            * g++.dg/pr71694.C: Use non-PIC codegen for Darwin m32.
    
    From-SVN: r274079

commit f58ad7a2eb30758a17842f67f6e91fe35c941f3e
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Sun Aug 4 12:12:30 2019 +0000

    Darwin, testsuite, backport fix for darwin-minversion-1,2.
    
    Newer OS versions (10.14+) do not provide some of the CRTs that are used
    for older ones (e.g. 10.5), and thus link tests that specify targeting
    such a revision fail. We retain the testing of the correct defined OS
    version number but switch to compile-only testing for these two tests.
    
    2019-08-04  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-06-13  Iain Sandoe  <iain@sandoe.co.uk>
    
            * gcc.dg/darwin-minversion-1.c: Use compile rather than link/run.
            * gcc.dg/darwin-minversion-2.c: Likewise.
    
    From-SVN: r274078

commit a8fed9438452183445c3fc8a28f8304a112d4835
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Sun Aug 4 12:08:41 2019 +0000

    Darwin, testsuite, require alias support in a test using it.
    
    2019-08-04  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-06-13  Iain Sandoe  <iain@sandoe.co.uk>
    
            * gcc.dg/pr90760.c: Require alias support.
    
    From-SVN: r274077

commit 2a4741c3158154d41f5ca9095ca6fac2ce58fd96
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Sun Aug 4 12:04:06 2019 +0000

    Darwin, testsuite, backport fix for PR65364
    
    This test currently fails on Darwin, because the port inlines fn2 for
    both PIC (and non-pic for m32).  Fixed by adjusting the target condition.
    
    2019-08-04  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-06-11  Iain Sandoe  <iain@sandoe.co.uk>
    
            PR testsuite/65364
            * gcc.dg/uninit-19.c (fn1): Adjust target condition for Darwin.
            (fn2): Likewise.
    
    From-SVN: r274076

commit 819373006498303887d89bb5670f0c18c8d5c85b
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Sun Aug 4 12:00:42 2019 +0000

    Darwin, testsuite, backport fix for test using aliases.
    
    2019-08-04  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-06-10  Iain Sandoe  <iain@sandoe.co.uk>
    
            * gcc.dg/attr-copy-6.c: Require alias support.
    
    From-SVN: r274075

commit 2ee9abad37098fbc0e4b15ccee0c257d7907f106
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Sun Aug 4 11:57:41 2019 +0000

    Darwin, testsuite, backport fix for cpp0x/alignas4.C
    
    Darwin produces aligned zerofill directives for the objects represented.
    We can scan for these using lp64 and ilp32 to catch operation on both
    X86 and PowerPC ports (the test is for the alignment which is the trailing
    value in the zerofill directive, as a power of two).
    
    2019-08-04  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-06-06  Iain Sandoe  <iain@sandoe.co.uk>
    
            * g++.dg/cpp0x/alignas4.C: Amend test to check for zerofill syntax
            on Darwin.
    
    From-SVN: r274074

commit 928b22fbcb72b991f45c409dc572d0c870c786dc
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Sun Aug 4 11:54:13 2019 +0000

    Darwin, X86, backport test adjusts for PR90698.
    
    We don't have support for -mcmodel={medium, large, kernel} so don't
    expect tests for those things to work.
    
    For now mark them as xfail where possible and skip where that isn't.
    These changes will be logged onto the PR and therefore can be backed
    out when the facility is implemented.
    
    2019-08-04  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-06-01  Iain Sandoe  <iain@sandoe.co.uk>
    
            PR target/90698
            * gcc.target/i386/pr49866.c: XFAIL for Darwin.
            * gcc.target/i386/pr63538.c: Likewise.
            * gcc.target/i386/pr61599-1.c: Skip for Darwin.
    
    From-SVN: r274073

commit f0d4ff52fc8290665469bc1e157da322089355da
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Sun Aug 4 11:46:44 2019 +0000

    Darwin, testsuite, require alias in a test where it's used.
    
    2019-08-04  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-05-31  Iain Sandoe  <iain@sandoe.co.uk>
    
            * g++.dg/cpp0x/pr84497.C: Require alias support.
    
    From-SVN: r274072

commit 5a9638e9fa3d2b5044836c20b8a8aaa7f35eeced
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Sun Aug 4 11:43:19 2019 +0000

    Darwin, X86, backport testsuite fixes for align syntax.
    
    Darwin has a .align taking a power of 2 by default, so that some
    tests expecting a byte count are failing.
    
    2019-08-04  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-05-31  Iain Sandoe  <iain@sandoe.co.uk>
    
            * gcc.target/i386/falign-functions-3.c: Adjust align syntax
            and label for Darwin.
            * gcc.target/i386/attr-aligned-2.c: Adjust align syntax for
            Darwin.
    
    From-SVN: r274071

commit e3ed4177afdf482a45c6ed8bb4dc22133cf8390e
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Sun Aug 4 11:40:24 2019 +0000

    Darwin, x86, backport TLS test fixes.
    
    Require native TLS for two tests that use it.
    
    2019-08-04  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-05-30  Iain Sandoe  <iain@sandoe.co.uk>
    
            * gcc.target/i386/pr86257.c: Require native TLS support.
            * gcc.target/i386/stack-prot-sym.c: Likewise.
    
    From-SVN: r274070

commit 5a66a005c8d8fedc3567a0187b1a7bdf7b202809
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Sun Aug 4 11:32:48 2019 +0000

    Darwin, x86, testsuite - backport for for pr22076 fail.
    
    Darwin has a .align taking a power of 2 by default, so that some
    tests expecting a byte count are failing, fixed thus.
    
    2019-08-04  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-05-27  Iain Sandoe  <iain@sandoe.co.uk>
    
            * gcc.target/i386/pr22076.c: Adjust options to
            match codegen expected by the scan-asms.
    
    From-SVN: r274069

commit c9d3b186297809b1c97c871d5742993ef3150fb2
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Sun Aug 4 11:01:41 2019 +0000

    Darwin, X86, backport fixes for three PIE tests.
    
    Darwin requires PIC code in order to support PIE, amend the test scan-asms
    to match this.
    
    2019-08-04  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-05-26  Iain Sandoe  <iain@sandoe.co.uk>
    
            * gcc.target/i386/pr39013-1.c: Adjust scan-asms for PIE to
            account for PIC code on Darwin.
            * gcc.target/i386/pr39013-2.c: Likewise.
            * gcc.target/i386/pr64317.c: Likewise.
    
    From-SVN: r274068

commit 68c80719add0d2a86a417e91902727e9465c1a6e
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Sun Aug 4 10:53:48 2019 +0000

    Darwin, X86, backport test fix for pr59874-3.
    
    This test fails on Darwin because the port has a different
    spelling for popcnt.
    
    2019-08-04  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-05-25  Iain Sandoe  <iain@sandoe.co.uk>
    
            * gcc.target/i386/pr59874-3.c: Use the spelling of popcnt
            expected for Darwin.
    
    From-SVN: r274067

commit a4b691a706c93a6d939618722c50228c37dc5f94
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Sun Aug 4 10:47:16 2019 +0000

    Darwin, x86, backport testsuite fix.
    
    Require alias support in a test using aliases.
    
    2019-08-04  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-05-25  Iain Sandoe  <iain@sandoe.co.uk>
    
            * gcc.target/i386/pr82659-3.c: Require alias support.
    
    From-SVN: r274066

commit 26913944c837688fd98b1a00631f15dde516fe76
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Sun Aug 4 10:40:16 2019 +0000

    Darwin, X86, testsuite, backport matching fixes.
    
    Some of the i386.exp tests fail on Darwin (and at least one passes
    incorrectly on Linux) because their scan-asm match strings are too
    general.  In some cases the strings also match instances in the .file
    and size directives or in comment output.  This patch makes the match
    strings more specific.
    
    2019-08-04  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-05-24  Iain Sandoe  <iain@sandoe.co.uk>
    
            * gcc.target/i386/pconfig-1.c: Scan for the string in the generated
            code, not in comments or miscellaneous directives.
            * gcc.target/i386/pr18041-1.c: Likewise.
            * gcc.target/i386/pr18041-2.c: Likewise.
            * gcc.target/i386/wbinvd-1.c: Likewise.
            * gcc.target/i386/wbnoinvd-1.c: Likewise.
            * gcc.target/i386/pr66819-3.c: Specifically, check that there is no
            call to "bar".
            * gcc.target/i386/pr66819-4.c: Likewise.
            * gcc.target/i386/pr82662.c
            * gcc.target/i386/ptwrite2.c: Make the checks look for the specific
            destination register, don't try the m32 test on m64 targets.
    
    From-SVN: r274065

commit 93d7687e693c2be4a475dc37d0c2eaa0c5b765de
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Sun Aug 4 10:33:57 2019 +0000

    Darwin, X86, testsuite backport USER_LABEL_PREFIX fixes.
    
    more tests that failed on Darwin because of missing
    __USER_LABEL_PREFIX__ matching.
    
    2019-08-04  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-05-24  Iain Sandoe  <iain@sandoe.co.uk>
    
            * gcc.target/i386/pr67985-2.c: Adjust label checks for
            Darwin.
            * gcc.target/i386/pr77881.c: Likewise.
    
    From-SVN: r274064

commit 11487843a971087aa383f63b627646202ec5406a
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Sun Aug 4 10:29:37 2019 +0000

    Darwin, X86, backport test fixes.
    
    Skip three tests that cannot pass on Darwin.
    
    2019-08-04  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-05-24  Iain Sandoe  <iain@sandoe.co.uk>
    
            * gcc.target/i386/falign-functions-2.c: Skip for Darwin.
            * gcc.target/i386/pr70738-7.c: Likewise.
            * gcc.target/i386/pr24414.c: Likewise.
    
    From-SVN: r274063

commit 17cef097cc169299366d39618efb39d3ce38d858
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Sun Aug 4 10:24:34 2019 +0000

    Darwin, X86, backport fixes for 64895.
    
    Although this is marked as rtl-optimisation, the Darwin
    issue is that the testcase XPASS there since the codegen
    is different.
    
    2019-08-04  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-05-23  Iain Sandoe  <iain@sandoe.co.uk>
    
            PR rtl-optimisation/64895
            * gcc.target/i386/fuse-caller-save-rec.c: Remove XFAILs.
            * gcc.target/i386/fuse-caller-save.c: Likewise.
            * gcc.target/i386/fuse-caller-save-xmm.c: Adjust tests for
            PIC cases, remove XFAILs.
    
    From-SVN: r274062

commit 43e803cbcf58e1de2d31bf3e5e699777538adcb0
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Sun Aug 4 10:11:53 2019 +0000

    Darwin, testsuite, backport for for 27221.
    
    This can't pass on 32b power Darwin, since the ABI conflicts.
    
    2019-08-04  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-05-22  Iain Sandoe  <iain@sandoe.co.uk>
    
            PR testsuite/27221
            * g++.dg/ext/alignof2.C: XFAIL for 32bit Darwin.
    
    From-SVN: r274061

commit 27eb6799718407070649d2784d40a04b57e7210f
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Sun Aug 4 10:06:33 2019 +0000

    Darwin, X86, backport testsuite fix for 67958.
    
    2019-08-04  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-05-21  Iain Sandoe  <iain@sandoe.co.uk>
    
            PR testsuite/67958
            * gcc.target/i386/pr32219-1.c: Adjust scan-asms for Darwin, comment
            the differences.
            * gcc.target/i386/pr32219-2.c: Likewise.
            * gcc.target/i386/pr32219-3.c: Likewise.
            * gcc.target/i386/pr32219-4.c: Likewise.
            * gcc.target/i386/pr32219-5.c: Likewise.
            * gcc.target/i386/pr32219-6.c: Likewise.
            * gcc.target/i386/pr32219-7.c: Likewise.
            * gcc.target/i386/pr32219-8.c: Likewise.
    
    From-SVN: r274060

commit e986cbf43dd863ffe4bde05d435aeaf4eaaa2a6a
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Sun Aug 4 09:59:21 2019 +0000

    Darwin, testsuite, backport fix for PR83891
    
    2019-08-04  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-05-21  Iain Sandoe  <iain@sandoe.co.uk>
    
            PR target/63891
            * gcc.dg/darwin-weakimport-3.c: Adjust options and explain
            the reasons.
    
    From-SVN: r274059

commit 305e10b977e2c7456cedcccfdb09bfccbc6c7910
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Sun Aug 4 09:53:37 2019 +0000

    Darwin, X86, backport fix for PR58321.
    
    2019-08-04  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-05-20  Iain Sandoe  <iain@sandoe.co.uk>
    
            PR testsuite/58321
            * gcc.target/i386/memcpy-strategy-3.c: Adjust count for Darwin and
            add a comment as to the reason for the difference.
            * gcc.target/i386/memset-strategy-1.c: Likewise.
    
    From-SVN: r274058

commit 6f2b8b5a5c74cd64ff8fa15d743b81a287e44c8a
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Sun Aug 4 09:49:27 2019 +0000

    Darwin, ppc, backport fixes to exclude Darwin from VSX, power8 & 9.
    
    This fixes a large number of test fails when we build PPC Darwin
    with an LLVM-based assembler (that recognises the insns).
    
    The patch augments the tests for feature support for VSX,
    power8 and power9 to exclude Darwin even if the assembler can
    handle the instructions.
    
    2019-08-04  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-05-15  Iain Sandoe  <iain@sandoe.co.uk>
    
            * lib/target-supports.exp
            (check_effective_target_powerpc_p8vector_ok): No support for Darwin.
            (check_effective_target_powerpc_p9vector_ok): Likewise.
            (check_effective_target_powerpc_float128_sw_ok): Likewise.
            (check_effective_target_powerpc_float128_hw_ok): Likewise.
            (check_effective_target_powerpc_vsx_ok): Likewise.
            * gcc.target/powerpc/bfp/bfp.exp: Don't try to run this for Darwin.
            * gcc.target/powerpc/dfp/dfp.exp: Likewise.
    
    From-SVN: r274057

commit 92e0a5ca822d0e31167d37ddab7461baabbfac75
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Sun Aug 4 09:39:02 2019 +0000

    Darwin, ppc, backport testsuite fix for pr87600.
    
    This test fails because it was expecting __powerpc__ to be
    defined, where Darwin defines __POWERPC__.
    
    2019-08-04  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-05-15  Iain Sandoe  <iain@sandoe.co.uk>
            * gcc.dg/pr87600.h: Add __POWERPC__ as an alternate test
            for PowerPC platforms.
    
    From-SVN: r274056

commit 656e41a545b0fcd476b657d4eac3a74c7729c471
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Aug 4 00:16:12 2019 +0000

    Daily bump.
    
    From-SVN: r274053

commit 8750956c7d424b5e9daca770d49e1feeeb57584d
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Sat Aug 3 20:21:44 2019 +0000

    Objective-C, backport fix for recognition of instancetype.
    
    This addresses a number of test fails that occur for the
    NeXT runtime.
    
    gcc/objc/
    2019-08-03  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-05-18  Iain Sandoe  <iain@sandoe.co.uk>
    
            * objc/objc-act.h (OCTI_INSTANCE_TYPE, OCTI_INSTANCETYPE_NAME): New.
            (objc_global_trees): Add instance type and name.
            (INSTANCE_TYPEDEF_NAME): New.
            * objc/objc-act.c (synth_module_prologue): Build decls for
            objc_instancetype_type and objc_instancetype_name.
    
    gcc/testsuite/
    2019-08-03  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-05-18  Iain Sandoe  <iain@sandoe.co.uk>
    
            * objc.dg/instancetype-0.m: New.
    
    From-SVN: r274050

commit 72f36fffb4c262a656b679c68920aa6ff719c729
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Sat Aug 3 20:16:22 2019 +0000

    Darwin, backport fix for PR87030
    
    273746 , 273749, 273768 [Darwin] Fix PR87030 and tidy config fragments.
    
    This is about 32/64b host and multilib support across the range of Darwin
    systems.
    
    Prior to Darwin8 (OS X 10.4), the toolchains support only PowerPC and only 32b.
    
    On Darwin8 it is possible to target a 64b multilib, but with support limited
    to a few of the main libraries on the system (not a recommended configuration).
    
    From Darwin9 to Darwin17 (OSX 10.5 to 10.13) it is possible to have either
    32 or 64b hosted toolchains, with support for a 64 or 32b multilib respectively.
    
    On Darwin9 the kernel is 32b, but with support for 64b executables, so it's
    conventional to build a 32b host toolchain supporting a 64b multilib. However
    this is not enforced (merely a convention).
    
    There is also some platform hardware supporting Darwin10/11 which is only 32b
    and for which the same situation applies. However, from Darwin10 to Darwin17,
    the majority of platform hardware supports a 64b kernel and it's conventional
    to build a 64b host toolchain with support for a 32b multilib.
    
    On/from Darwin18 (OS X 10.14), the development headers (in the SDK) no longer
    expose the interfaces for the 32b multilib support (although sufficient runtime
    support remains installed that the testsuite can be run for a 32b multilib).
    
    The PR is raised against this latter situation since the absence of exposed
    interfaces causes a 'default' bootstrap fail regardless of the availability of
    the runtimes. Given the number of permutations, I felt it warranted a general
    solution, especially since the current scheme of target headers and t-make
    fragments has become somewhat messy.
    
    The changes here enforce the single 32b PowerPC multilib for Darwin < 8 and the
    single X86 64b multilib for Darwin >= 18. This means that there is no longer
    any need to configure Darwin18+ '--disable-multilib', but also that if you want
    to use the ability to continue to test the compiler's 32b multilib there, you
    need to make a configuration targeting an earlier OS version (and using the
    SDK from that).
    
    2019-08-03  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline
            2019-07-24  Iain Sandoe  <iain@sandoe.co.uk>
    
            PR bootstrap/87030
            * config/i386/darwin.h (REAL_LIBGCC_SPEC): Revert change from r273749.
    
            PR bootstrap/87030
            * config/i386/darwin.h (REAL_LIBGCC_SPEC): Move from here...
            * config/i386/darwin32-biarch.h .. to here.
            * config/i386/darwin64-biarch.h: Adjust comments.
            * config/rs6000/darwin32-biarch.h: Likewise.
            * config/rs6000/darwin64-biarch.h: Likewise.
            * config.gcc: Missed commit from r273746
            (*-*-darwin*): Don't include CPU t-darwin here.
            (i[34567]86-*-darwin*): Adjust to use biarch files. Produce
            an error message if i686-darwin configuration is attempted for
            Darwin >= 18.
    
            Backport from mainline
            2019-07-23  Iain Sandoe  <iain@sandoe.co.uk>
    
            PR bootstrap/87030
            * config.gcc (*-*-darwin*): Don't include CPU t-darwin here.
            (i[34567]86-*-darwin*): Adjust to use biarch files. Produce
            an error message if i686-darwin configuration is attempted for
            Darwin >= 18.
            (x86_64-*-darwin*): Switch to single multilib for Darwin >= 18.
            (powerpc-*-darwin*): Use biarch files where needed.
            (powerpc64-*-darwin*): Likewise.
            * config/i386/darwin.h (REAL_LIBGCC_SPEC): Move to new biarch file.
            (DARWIN_ARCH_SPEC, DARWIN_SUBARCH_SPEC): Revise for default single
            arch case.
            * config/i386/darwin32-biarch.h: New.
            * config/i386/darwin64.h: Rename.
            * gcc/config/i386/darwin64-biarch.h: To this.
            * config/i386/t-darwin: Rename.
            * gcc/config/i386/t-darwin32-biarch: To this.
            * config/i386/t-darwin64: Rename.
            * gcc/config/i386/t-darwin64-biarch: To this.
            * config/rs6000/darwin32-biarch.h: New.
            * config/rs6000/darwin64.h: Rename.
            * config/rs6000/darwin64-biarch.h: To this.
            (DARWIN_ARCH_SPEC, DARWIN_SUBARCH_SPEC): Revise for default single
            arch case.
            * config/rs6000/t-darwin8: Rename.
            * config/rs6000/t-darwin32-biarch: To this.
            * config/rs6000/t-darwin64 Rename.
            * config/rs6000/t-darwin64-biarch: To this.
    
    From-SVN: r274049

commit bd9a0dce18bb248c09dba44dc842c90f0f251993
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Sat Aug 3 20:05:21 2019 +0000

    Darwin, backport codegen fix.
    
    Darwin only supports "static" code in the kernel and
    kernel extensions.  This check tries to prevent the case
    that cascaded PIC/PIE options on the command line cause
    non-pic to be selected.
    
    2019-08-03  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline
            2019-07-07  Iain Sandoe  <iain@sandoe.co.uk>
    
            * config/darwin.c (darwin_override_options): Make a final check on PIC
            options.
    
    From-SVN: r274048

commit 8e28d02d020748ac4fb46473d9000286f2975034
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Sat Aug 3 19:58:33 2019 +0000

    Darwin, backport kext codegen fix.
    
    It's not correct for all current Darwin versions to jam
    symbol stubs on for kexts.
    
    2019-08-03  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline
            2019-07-07  Iain Sandoe  <iain@sandoe.co.uk>
    
            * config/darwin.c (darwin_override_options): Don't jam symbol stubs
            on for kernel code.
    
    From-SVN: r274047

commit b2ba0fd304f496d757dbf1e55c0722f38d951be4
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Sat Aug 3 19:53:51 2019 +0000

    Darwin, ppc, Fix test fails that depend on installed headers.
    
    Several port tests use headers that Darwin has not been
    installing.  This removes the override on the header install
    thus making Darwin's set match the reset of the port.
    
    2019-08-03  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline
            2019-06-28  Iain Sandoe  <iain@sandoe.co.uk>
    
            * config.gcc (powerpc-*-darwin*, powerpc64-*-darwin*): Remove
            override on extra_headers.
    
    From-SVN: r274046

commit a6e4cd610626cca5fe3868a893ceeee4e005d6fa
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Sat Aug 3 19:49:43 2019 +0000

    Darwin, ppc, backport fix for codegen in kexts.
    
    This honours the users choice of float ABI in kexts.
    
    2019-08-03  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline
            2019-06-27  Iain Sandoe  <iain@sandoe.co.uk>
    
            * config/rs6000/rs6000.c (darwin_rs6000_override_options): Honour
            user-specified float mode choice for kernel mode code.
    
    From-SVN: r274045

commit 9964a11fd3baedc0eedf6948fd39a1e0db7537f8
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Sat Aug 3 19:44:13 2019 +0000

    Darwin, ppc, backport wrong code fix.
    
    We should never have been using longcalls by default in
    64b code.
    
    2019-08-03  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline
            2019-06-27  Iain Sandoe  <iain@sandoe.co.uk>
    
            * config/rs6000/rs6000.c (darwin_rs6000_override_options): Do not
            use longcall for 64b code.
    
    From-SVN: r274044

commit 9535e8591c6b945d5f7fe988a3d0cf0f0c60d316
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Sat Aug 3 19:36:37 2019 +0000

    Darwin, ppc, backport build fix for unwinder.
    
    When libgcc is built on Darwin, it is usually built for the earliest potential
    target (Darwin8, 10.4). Build for that revision default to assuming that the
    processor might be G3 (without vector ops) and there is an outlined function
    used for save/restore that checks whether the processor is G3 or G4+ at run-
    time. However, the unwinder itself needs to be built with the assumption of
    vector usage so that the relevant outlined functions are called.
    
    2019-08-03  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-06-06  Iain Sandoe  <iain@sandoe.co.uk>
    
            * config/rs6000/t-darwin: Ensure that the unwinder is built with
            altivec enabled.
    
    From-SVN: r274043

commit 95c96b8a251b5f8c2db513e16ab4e1400a17badf
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Sat Aug 3 19:32:18 2019 +0000

    Darwin, ppc, backport test fixes.
    
    Several tests expect support for the GCC target pragma.
    Act on this for compatibility with the port.
    
    2019-08-03  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline
            2019-06-23  Iain Sandoe  <iain@sandoe.co.uk>
    
            * config/rs6000/darwin.h: Handle GCC target pragma.
    
    From-SVN: r274042

commit 3e12a883166d6e70d568a499baac61b09478099c
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Sat Aug 3 19:25:05 2019 +0000

    Darwin, ppc, backport test fixes.
    
    Some tests expect upper case versions of the ppc/ppc64
    macros, so bring Darwin into line with other port
    members.
    
    2019-08-03  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline
            2019-06-23  Iain Sandoe  <iain@sandoe.co.uk>
    
            * config/rs6000/darwin.h: (__PPC__, __PPC64__): New.
    
    From-SVN: r274041

commit 7146dba1ff6e5f4a9710bc5f7d66a999038c3b60
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Sat Aug 3 19:21:08 2019 +0000

    Darwin, fixincludes - backport fixes Darwin9/10 math.h issues.
    
    Darwin has had long long functions for some considerable time and these are
    exposed in Darwin8 and Darwin11+ headers. However, for some reason it was
    elected to hide them behind __STRICT_ANSI__ and __STDC_VERSION__ on Darwin9
    and Darwin10. This is a problem for G++/libstdc++ that expects the functions
    to be available for strict ansi (-std=c++14, for example) and without
    defining __STDC_VERSION__. The fix here follows the pattern used in
    Darwin11+ headers where the functions may be explicitly hidden by defining
    __DARWIN_NO_LONG_LONG.
    
    This fixes the tr1 testsuite fails seen on Darwin9 and 10.
    
    2019-08-03  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-06-21  Iain Sandoe  <iain@sandoe.co.uk>
    
            * inclhack.def: Replace the complex test using __STRICT_ANSI__ and
            __STDC_VERSION__ with a test using __DARWIN_NO_LONG_LONG.
            Ensure that the top level math.h uses <> to wrap included headers
            rather than "".
            * fixincl.x: Regenerated.
            * tests/base/architecture/ppc/math.h: Update test to include the
            __DARWIN_NO_LONG_LONG case.
    
    From-SVN: r274040

commit 5d2930ea7a7b104868eddd592453330b6847ad23
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Sat Aug 3 19:11:05 2019 +0000

    Darwin, fixincludes - backport build fixes.
    
    There are two issues with the Darwin14 (SDK) headers in which unguarded
    advanced syntax elements causes any code including these headers to fail.
    
    2019-08-03  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-06-21  Iain Sandoe  <iain@sandoe.co.uk>
    
            * inclhack.def: Guard __has_attribute and __has_extension in
            os/base.h.
            Guard Apple blocks syntax in dispatch/object.h.
            * fixincl.x: Regenerate.
            * tests/base/dispatch/object.h: New file.
            * tests/base/os/base.h: New file.
    
    From-SVN: r274039

commit ad27bccddd39046daebd0a4124cc64be42656e62
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Aug 3 00:16:19 2019 +0000

    Daily bump.
    
    From-SVN: r274036

commit 6952bd117784373d77512b32aadb0273744f8df6
Author: Martin Sebor <msebor@redhat.com>
Date:   Fri Aug 2 17:05:34 2019 +0000

    backport: PR c/90737 - [8/9/10 Regression] inconsistent address of a local converted to intptr_t between callee and caller
    
    Backport from mainline
    
    PR c/90737 - [8/9/10 Regression] inconsistent address of a local converted to intptr_t between callee and caller
    
    gcc/c/ChangeLog:
    
            PR c/90737
            * c-typeck.c (c_finish_return): Only consider functions returning
            pointers as candidates for -Wreturn-local-addr.
    
    gcc/cp/ChangeLog:
    
            PR c/90737
            * typeck.c (maybe_warn_about_returning_address_of_local): Only
            consider functions returning pointers as candidates for
            -Wreturn-local-addr.
    
    gcc/testsuite/ChangeLog:
    
            PR c/90737
            * c-c++-common/Wreturn-local-addr.c: New test.
            * g++.dg/warn/Wreturn-local-addr-6.C: New test.
    
    From-SVN: r274022

commit 6575dd24084b1dcc246a130d66aa4015f1349c19
Author: Martin Sebor <msebor@redhat.com>
Date:   Fri Aug 2 16:57:19 2019 +0000

    backport: PR tree-optimization/90989 - incorrrect strlen result after second strcpy
    
    Backport from mainline
    
    PR tree-optimization/90989 - incorrrect strlen result after second strcpy
            into the same destination
    
    gcc/ChangeLog:
    
            PR tree-optimization/90989
            * tree-ssa-strlen.c (handle_char_store): Constrain a single character
            optimization to just single character stores.
    
    gcc/testsuite/ChangeLog:
    
            PR tree-optimization/90989
            * gcc.dg/strlenopt-26.c: Exit with test result status.
            * gcc.dg/strlenopt-67.c: New test.
    
    From-SVN: r274021

commit bcb176f838449d45a2b60a0764a7cffe1b1cb1f7
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Fri Aug 2 14:54:57 2019 +0000

    darwin, backport driver fixes.
    
    272260,r272479 - Darwin, Driver - Improve processing of macosx-version-min=
    
    For PR target/63810 some improvements were made in the parsing of
    the version string at the point it's used to define the built-in
    __ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__. This is fine, but the
    specs processing also uses the version, and specs version-compare
    doesn't like leading zeros on components. This means that while we
    succeed in processing -mmacosx-version-min=010.00002.000099 on compile
    lines, it fails for any other line that uses the value as part of a spec
    (in particular, link lines fail).
    
    To fix this, we need to apply a bit of clean-up to the version that's
    presented to the driver, and push that back into the command line opts.
    
    The value can come from four places:
    1. User-entered on the command line
    2. User-entered as MACOSX_DEPLOYMENT_TARGET= environment var.
    3. Absent those two
    3a For self-hosting systems, look-up from the kernel
    3b For cross-compilers, as a default supplied at configure time.
    
    We apply the clean-up to all 4 (although it shouldn't really be needed
    for the cases under 3).
    
    We also supply a test-case that adapts to the target-version of the
    system, so that the link requirements are met by the SDK in use (if you
    try to link i686-darwin9 on an x86-64-darwin18 SDK, it will fail).
    
    gcc/
    
    2019-08-02  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline
            2019-06-19  Iain Sandoe  <iain@sandoe.co.uk>
    
            * config/darwin-driver.c (darwin_driver_init): Fix off-by-one errors
            in computing the number of options to be moved.
    
            Backport from mainline
            2019-06-13  Iain Sandoe  <iain@sandoe.co.uk>
    
            * config/darwin-driver.c (validate_macosx_version_min): New.
            (darwin_default_min_version): Cleanup and validate supplied version.
            (darwin_driver_init): Likewise and push cleaned version into opts.
    
    gcc/testsuite/
    
    2019-08-02  Iain Sandoe  <iain@sandoe.co.uk>
    
            2019-06-13  Iain Sandoe  <iain@sandoe.co.uk>
    
            * gcc.dg/darwin-minversion-link.c: New test.
    
    From-SVN: r274017

commit 926c0c8fb83869c3874cd6dc101287895461de7f
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Fri Aug 2 14:44:23 2019 +0000

    darwin, x86, backport fix for missing .p2align.
    
    This fixes a number of testcases that expect use of
    .p2align, which was omitted from the darwin X86 port
    (but is available in all assemblers used with that).
    
    2019-08-02  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline
            2019-05-31  Iain Sandoe  <iain@sandoe.co.uk>
    
            * config/i386/darwin.h (ASM_OUTPUT_MAX_SKIP_ALIGN): New.
    
    From-SVN: r274016

commit 679c6492d161a82df63f42b8d74729397e83721a
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Fri Aug 2 14:34:02 2019 +0000

    darwin, objc, backport fix for objc header paths
    
    Don't try to prepend a sysroot for the gnu-objc headers, which
    are compiler-relative.
    
    Darwin is able to use two runtimes for objective-c; the
    default is its native "NeXT" runtime, but also it can build
    code using the "gnu-runtime". In order to do this, we have to
    be able to find the gnu-runtime headers (which are installed
    into the compiler's tree).
    
    The process to do this is erroneously prepending the sysroot
    to this when a sysroot is in force. The gnu-runtime headers have
    never been installed in a Darwin (macOS) SDK so we must make
    sure that they are found local to the compiler.
    
    gcc/
    
    2019-08-02  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline
            2019-05-18  Iain Sandoe  <iain@sandoe.co.uk>
    
            * config/darwin-c.c (darwin_register_objc_includes): Do not
            prepend the sysroot when building gnu-runtime header search
            paths.
    
    From-SVN: r274015

commit 22105fb28b02692c492cdac6c71ebe5317be38b7
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Fri Aug 2 14:25:04 2019 +0000

    darwin, backport fix for objc section switches.
    
    gcc/
    
    2019-08-02  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline
            2019-05-18  Iain Sandoe  <iain@sandoe.co.uk>
    
            * config/darwin.c (darwin_file_end): Use switch_to_section ()
            instead of direct output of the asm.
    
    From-SVN: r274014

commit b5fbe4b03b3e1b9eb694df87daee19618e2d86b7
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Fri Aug 2 14:19:42 2019 +0000

    Darwin, ppc, backport build fix.
    
    libgcc/
    
    2019-08-02  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-05-12  Iain Sandoe  <iain@sandoe.co.uk>
    
            * config/rs6000/darwin-vecsave.S: Set .machine appropriately.
    
    From-SVN: r274013

commit 361be3ccb9097f4e7c5978c435ccaeddd958e466
Author: Marek Polacek <polacek@redhat.com>
Date:   Fri Aug 2 13:29:05 2019 +0000

    PR c++/91230 - wrong error with __PRETTY_FUNCTION__ and generic lambda.
    
            * pt.c (value_dependent_expression_p): Consider __PRETTY_FUNCTION__
            inside a template function value-dependent.
    
            * g++.dg/cpp1y/lambda-generic-pretty1.C: New test.
    
    From-SVN: r274010

commit baefa04d7699b934fe05414ed6ec80d2107fe97d
Author: Richard Biener <rguenther@suse.de>
Date:   Fri Aug 2 12:07:33 2019 +0000

    backport: re PR tree-optimization/91280 (ICE in get_constraint_for_component_ref, at tree-ssa-structalias.c:3259 since r260354)
    
    2019-08-02  Richard Biener  <rguenther@suse.de>
    
            Backport from mainline
            2019-07-31  Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/91280
            * tree-ssa-structalias.c (get_constraint_for_component_ref):
            Decompose MEM_REF manually for offset handling.
    
            * g++.dg/torture/pr91280.C: New testcase.
    
            2019-07-31  Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/91293
            * tree-vect-slp.c (vect_build_slp_tree_2): Do not swap operands
            of reduction stmts.
    
            * gcc.dg/vect/pr91293-1.c: New testcase.
            * gcc.dg/vect/pr91293-2.c: Likewise.
            * gcc.dg/vect/pr91293-3.c: Likewise.
    
    From-SVN: r274007

commit 9d72c9e1bc15949b5309562263c3b50adaac5fc8
Author: Richard Biener <rguenther@suse.de>
Date:   Fri Aug 2 08:40:34 2019 +0000

    backport: [multiple changes]
    
    2019-08-02  Richard Biener  <rguenther@suse.de>
    
            Backport from mainline
            2019-07-31  Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/91178
            * tree-ssa-sccvn.c (vn_reference_maybe_forwprop_address):
            Use tail-recursion.
    
            * gcc.dg/torture/pr91178-2.c: New testcase.
    
            2019-07-17  Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/91178
            * tree-ssa.c (release_defs_bitset): Iterate from higher to
            lower SSA names to avoid quadratic behavior in the common case.
            * tree-data-ref.c (split_constant_offset): Add limit argument
            and pass it down.  Initialize it from PARAM_SSA_NAME_DEF_CHAIN_LIMIT.
            (split_constant_offset_1): Add limit argument and use it to
            limit SSA def walking.  Optimize the common plus/minus case.
    
            * gcc.dg/torture/pr91178.c: New testcase.
    
            2019-07-12  Martin Sebor  <msebor@redhat.com>
    
            * doc/invoke.texi (ssa-name-def-chain-limit): Document new --param.
            * params.def (PARAM_SSA_NAME_DEF_CHAIN_LIMIT): Add new --param.
            * tree-vrp.c (vrp_prop::check_mem_ref): Use
            PARAM_SSA_NAME_DEF_CHAIN_LIMIT.
    
            * gcc.dg/Warray-bounds-43.c: New test.
    
    From-SVN: r274000

commit a2e06b0d9943b171673088cd41a703f2f115eef1
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Aug 2 00:16:11 2019 +0000

    Daily bump.
    
    From-SVN: r273992

commit 361e71bf2dd50e6fcc20ea6e676d316d78916c5b
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Aug 1 08:31:54 2019 +0200

    backport: re PR c/91192 (non-deterministic ICE on invalid)
    
            Backported from mainline
            2019-07-31  Jakub Jelinek  <jakub@redhat.com>
    
            PR c/91192
            * c-parser.c (c_parser_sizeof_expression): Call set_c_expr_source_range
            even if finish is UNKNOWN_LOCATION, just use start as finish in that
            case.
    
    From-SVN: r273967

commit 4d2186971e4466d3f03347b34535dda8015f72f5
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Aug 1 08:31:20 2019 +0200

    backport: re PR middle-end/91301 (ICE in omp_add_variable on random access iterator distribute parallel for private (iterator))
    
            Backported from mainline
            2019-07-31  Jakub Jelinek  <jakub@redhat.com>
    
            PR middle-end/91301
            * gimplify.c (gimplify_omp_for): If for class iterator on
            distribute parallel for there is no data sharing clause
            on inner_for_stmt, look for private clause on combined
            parallel too and if found, move it to inner_for_stmt.
    
            * testsuite/libgomp.c++/for-27.C: New test.
    
    From-SVN: r273966

commit 82565b4ed759845665ea2a93b206f4afc21027c6
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Aug 1 08:30:26 2019 +0200

    backport: re PR middle-end/91216 (OpenMP ICE starting with r265930)
    
            Backported from mainline
            2019-07-30  Jakub Jelinek  <jakub@redhat.com>
    
            PR middle-end/91216
            * omp-low.c (global_nonaddressable_vars): New variable.
            (use_pointer_for_field): For global decls, if they are non-addressable,
            remember it in the global_nonaddressable_vars bitmap, if they are
            addressable and in the global_nonaddressable_vars bitmap, ignore their
            TREE_ADDRESSABLE bit.
            (omp_copy_decl_2): Clear TREE_ADDRESSABLE also on private copies of
            vars in global_nonaddressable_vars bitmap.
            (execute_lower_omp): Free global_nonaddressable_vars bitmap.
    
            * gcc.dg/gomp/pr91216.c: New test.
    
    From-SVN: r273965

commit 1c0ee8716da2267a45ff65f13a0619740f4daa12
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Aug 1 08:29:22 2019 +0200

    backport: re PR target/91150 (wrong code with -O -mavx512vbmi due to wrong writemask)
    
            Backported from mainline
            2019-07-30  Jakub Jelinek  <jakub@redhat.com>
    
            PR target/91150
            * config/i386/i386.c (expand_vec_perm_blend): Change mask type
            from unsigned to unsigned HOST_WIDE_INT.  For E_V64QImode cast
            comparison to unsigned HOST_WIDE_INT before shifting it left.
    
            * gcc.target/i386/avx512bw-pr91150.c: New test.
    
    From-SVN: r273964

commit c327c178f03622ab8d1e06a092c10fcdc7d128b1
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Aug 1 08:28:19 2019 +0200

    backport: re PR tree-optimization/91157 (ICE: verify_gimple failed (error: position plus size exceeds size of referenced object in 'bit_field_ref'))
    
            Backported from mainline
            2019-07-17  Jakub Jelinek  <jakub@redhat.com>
    
            PR tree-optimization/91157
            * tree-vect-generic.c (expand_vector_comparison): Handle lhs being
            a vector boolean with scalar mode.
            (expand_vector_condition): Handle first operand being a vector boolean
            with scalar mode.
            (expand_vector_operations_1): For comparisons, don't bail out early
            if the return type is vector boolean with scalar mode, but comparison
            operand type is not.
    
            * gcc.target/i386/avx512f-pr91157.c: New test.
            * gcc.target/i386/avx512bw-pr91157.c: New test.
    
    From-SVN: r273963

commit d35a5e72590d4bdda59382519d3dc76b5b188e7a
Author: Alan Modra <amodra@gmail.com>
Date:   Thu Aug 1 15:27:12 2019 +0930

    [RS6000] PR91135, __linux__ not defined with -mcall-aixdesc on 9.x and ppc64
    
    This patch makes the obvious fix for PR91135, and deletes extraneous
    copies of GNU_USER_TARGET_D_OS_VERSIONS that appear in rs6000/linux.h
    and rs6000/linux64.h.  Since all configurations using either of these
    files also include linux.h there is no need to duplicate the macro.
    
            PR target/91135
            * config/rs6000/linux.h (GNU_USER_TARGET_D_OS_VERSIONS): Don't
            define.
            * config/rs6000/linux64.h (TARGET_OS_CPP_BUILTINS): Invoke
            GNU_USER_TARGET_OS_CPP_BUILTINS for aixdesc abi.
            (GNU_USER_TARGET_D_OS_VERSIONS): Don't define.
    
    From-SVN: r273962

commit 9e361dc6c1cfce20d260e5a9378b0ac37c8cdef5
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Aug 1 00:16:14 2019 +0000

    Daily bump.
    
    From-SVN: r273959

commit b9d801662eda455184dbf01d5007f27bae1fd2b9
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Wed Jul 31 20:56:19 2019 +0100

    Use standard <float.h> macros in test
    
    The <float.h> changes to define these for C++ have been backported, so
    the test can use them now.
    
            * testsuite/26_numerics/midpoint/floating.cc: Use standard macros
            instead of GCC-specific ones.
    
    From-SVN: r273950

commit 20ac9d2b38132d612b21ad1a454e7171c6b14d52
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Wed Jul 31 20:56:16 2019 +0100

    Define C11 macros such as FLT_DECIMAL_DIG for C++17
    
    Backport from mainline
    2019-06-24  Jonathan Wakely  <jwakely@redhat.com>
    
            * ginclude/float.h (FLT_DECIMAL_DIG, DBL_DECIMAL_DIG, LDBL_DECIMAL_DIG)
            (FLT_HAS_SUBNORM, DBL_HAS_SUBNORM, LDBL_HAS_SUBNORM, FLT_TRUE_MIN)
            (DBL_TRUE_MIN, LDBL_TRUE_MIN): Also define for C++17.
    
    Backport from mainline
    2019-06-24  Jonathan Wakely  <jwakely@redhat.com>
    
            * testsuite/18_support/headers/cfloat/values_c++17.cc: New test.
    
    From-SVN: r273949

commit 061151b45bcd00de6d0225c5ec0a59606b524d25
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Wed Jul 31 20:56:12 2019 +0100

    Qualify call to prevent ADL
    
    Backport from mainline
    2019-07-31  Jonathan Wakely  <jwakely@redhat.com>
    
            * include/std/memory (make_obj_using_allocator): Qualify call to
            uses_allocator_construction_args.
    
    From-SVN: r273948

commit 0793403db3ea73eaa407df21672dc703b9cb77dc
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Wed Jul 31 20:56:08 2019 +0100

    PR libstdc++/91308 fix constraints on unique_ptr assignment
    
    Backport from mainline
    2019-07-31  Jonathan Wakely  <jwakely@redhat.com>
    
            PR libstdc++/91308
            * include/bits/unique_ptr.h (unique_ptr::__safe_conversion_up): Remove
            constraints on deleter that should only apply to the constructor.
            (unique_ptr<T[], D>::__safe_conversion_up): Likewise.
            (unique_ptr<T[], D>::unique_ptr(unique_ptr<U, D>&&)): Restore
            constraints on deleter here.
            * testsuite/20_util/unique_ptr/assign/91308.cc: New test.
    
    From-SVN: r273947

commit 9acd8777c4a7cbf14b405fd3e83992a319ef20ab
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Wed Jul 31 20:56:04 2019 +0100

    PR libstdc++/51333 Define recursive_init_error constructor non-inline
    
    The recursive_init_error class is defined in a header, with an inline
    constructor, but the definition of the vtable and destructor are not
    exported from the shared library. With -fkeep-inline-functions the
    constructor gets emitted in user code, and requires the (non-exported)
    vtable. This fails to link.
    
    As far as I can tell, the recursive_init_error class definition was
    moved into <cxxabi.h> so it could be documented with Doxygen, not for
    any technical reason. But now it's there (and documented), somebody
    could be relying on it, by catching that type and possibly performing
    derived-to-base conversions to the std::exception base class. So the
    conservative fix is to leave the class definition in the header but make
    the constructor non-inline. This still allows the type to be caught and
    still defines its base class.
    
    Backport from mainline
    2019-07-29  Jonathan Wakely  <jwakely@redhat.com>
    
            PR libstdc++/51333
            * libsupc++/cxxabi.h (__gnu_cxx::recursive_init_error): Do not define
            constructor inline.
            * libsupc++/guard_error.cc (__gnu_cxx::recursive_init_error): Define
            constructor.
            * testsuite/18_support/51333.cc: New test.
    
    From-SVN: r273946

commit 8153c366de6a37108197fb9e66d96cf01b52f74f
Author: Richard Biener <rguenther@suse.de>
Date:   Wed Jul 31 15:40:36 2019 +0000

    Backport PRs 91126, 91131, 91145, 91162, 91200
    
    2019-07-31  Richard Biener  <rguenther@suse.de>
    
            Backport from mainline
            2019-07-19  Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/91200
            * tree-ssa-phiopt.c (cond_store_replacement): Check we have
            no PHI nodes in middle-bb.
    
            * gcc.dg/torture/pr91200.c: New testcase.
    
            2019-07-15  Richard Biener  <rguenther@suse.de>
    
            PR middle-end/91162
            * tree-cfg.c (move_block_to_fn): When releasing a virtual PHI
            node make sure to replace all uses with something valid.
    
            * gcc.dg/autopar/pr91162.c: New testcase.
    
            2019-07-12  Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/91145
            * tree-vect-slp.c (vect_build_slp_tree_2): Fix reduction
            chain check.
    
            * gcc.dg/torture/pr91145.c: New testcase.
    
            2019-07-11  Richard Biener  <rguenther@suse.de>
    
            PR middle-end/91131
            * gimplify.c (gimplify_compound_literal_expr): Force a temporary
            when the object is volatile and we have not cleared it even though
            there are no nonzero elements.
    
            * gcc.target/i386/pr91131.c: New testcase.
    
            2019-07-10  Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/91126
            * tree-ssa-sccvn.c (n_walk_cb_data::push_partial_def): Adjust
            native encoding offset for BYTES_BIG_ENDIAN.
            (vn_reference_lookup_3): Likewise.
    
            * gcc.dg/torture/pr91126.c: New testcase.
    
    From-SVN: r273939

commit a49eae070c6e9b54eadbd57c988822330c745cb8
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Jul 31 00:16:19 2019 +0000

    Daily bump.
    
    From-SVN: r273919

commit de61fb689a08922a51dd953b37687d78436efff0
Author: Steven G. Kargl <kargl@gcc.gnu.org>
Date:   Tue Jul 30 21:38:48 2019 +0000

    re PR fortran/91296 (ICE when passing complex number %re/%im as a procedure argument with -Waliasing.)
    
    2019-07-30  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/91296
            * interface.c (compare_actual_expr): When checking for aliasing, add
            a case to handle REF_INQUIRY (e.g., foo(x%re, x%im) do not alias).
    
    2019-07-30  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/91296
            * gfortran.dg/pr91296.f90: New test.
    
    From-SVN: r273916

commit 402b831544c18769f3b12de512a0a8dc2a395171
Author: Thomas Koenig <tkoenig@gcc.gnu.org>
Date:   Tue Jul 30 19:11:03 2019 +0000

    backport: re PR fortran/90786 (ICE on procedure pointer assignment to function with class pointer result)
    
    2019-07-29  Thomas Koenig  <tkoenig@gcc.gnu.org>
            Paul Thomas <pault@gcc.gnu.org>
    
            Backport from trunk
            PR fortran/90786
            PR fortran/90813
            * trans-expr.c (pointer_assignment_is_proc_pointer) Remove as
            it is very simple and only called from one place.
            (gfc_trans_pointer_assignment): Rename non_proc_pointer_assign
            as non_proc_ptr_assign. Assign to it directly, rather than call
            to above, deleted function and use gfc_expr_attr instead of
            only checking the reference chain.
            * dump-parse-tree.c (show_global_symbol): New function.
            (gfc_dump_global_symbols): New function.
            * gfortran.h (gfc_traverse_gsymbol): Add prototype.
            (gfc_dump_global_symbols): Likewise.
            * invoke.texi: Document -fdump-fortran-global.
            * lang.opt: Add -fdump-fortran-global.
            * parse.c (gfc_parse_file): Handle flag_dump_fortran_global.
            * symbol.c (gfc_traverse_gsymbol): New function.
            * trans-decl.c (sym_identifier): New function.
            (mangled_identifier): New function, doing most of the work
            of gfc_sym_mangled_identifier.
            (gfc_sym_mangled_identifier): Use mangled_identifier.  Add mangled
            identifier to global symbol table.
            (get_proc_pointer_decl): Use backend decl from global identifier
            if present.
    
    2019-07-29  Thomas Koenig  <tkoenig@gcc.gnu.org>
            Paul Thomas <pault@gcc.gnu.org>
    
            Backport from trunk
            PR fortran/90786
            PR fortran/90813
            * gfortran.dg/proc_ptr_51.f90: New test.
    
    
    Co-Authored-By: Paul Thomas <pault@gcc.gnu.org>
    
    From-SVN: r273913

commit ea7e4625c4aed62d1555b3811632d54f295b0c23
Author: Jan Hubicka <jh@suse.cz>
Date:   Tue Jul 30 11:28:13 2019 +0200

    backport: i386-common.c: Use PROCESSOR_ZNVER2 scheduler for znver2.
    
    
            Backport from mainline
            2019-07-23  Jan Hubicka  <hubicka@ucw.cz>
    
            * i386-common.c: Use PROCESSOR_ZNVER2 scheduler for znver2.
            * config/i386/znver1.md: Enable patterns for znver2 and add store
            variants which use extra AGU unit.
    
    From-SVN: r273904

commit c2db11bbb9bac5b81552bdeb13f7008fceff35c2
Author: Jan Hubicka <jh@suse.cz>
Date:   Tue Jul 30 10:10:22 2019 +0200

    backport: i386.c (ix86_option_override_internal): Default PARAM_AVOID_FMA_MAX_BITS to 256 for znver2.
    
    
            Backport from mainline
            2019-07-23  Jan Hubicka  <hubicka@ucw.cz>
    
            * config/i386/i386.c (ix86_option_override_internal): Default
            PARAM_AVOID_FMA_MAX_BITS to 256 for znver2.
            * config/i386/x86-tune.def (X86_TUNE_AVOID_256FMA_CHAINS): Set
            for ZNVER2.
    
    From-SVN: r273901

commit 53e62cf48e3c6dac63c19e290595cc9b43a60641
Author: Jan Hubicka <jh@suse.cz>
Date:   Tue Jul 30 10:03:43 2019 +0200

    backport: x86-tune-costs.h (znver2_memcpy): Update.
    
            Backport from mainline
            2019-07-23  Jan Hubicka  <hubicka@ucw.cz>
    
            * config/i386/x86-tune-costs.h (znver2_memcpy): Update.
            (znver2_costs): Update 256 bit SSE costs and multiplication.
    
    From-SVN: r273900

commit dfbc2b3667d509a0d8287085d917f6c43386e5c3
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Jul 30 00:16:12 2019 +0000

    Daily bump.
    
    From-SVN: r273895

commit 79badaf403eeeb520140283c5cf064952065dc22
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Jul 29 00:16:16 2019 +0000

    Daily bump.
    
    From-SVN: r273863

commit 33d2e3003820f79856c1bfbb3a2ff98399851ef9
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Jul 28 00:16:55 2019 +0000

    Daily bump.
    
    From-SVN: r273849

commit 9d54b28366d41e3bd9312c2bcffcdcca6515c498
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Jul 27 00:16:28 2019 +0000

    Daily bump.
    
    From-SVN: r273842

commit 996a7c88b45baf6083ed490be985551c5647cfbf
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Fri Jul 26 14:37:00 2019 +0100

    Define __cpp_lib_endian feature test macro
    
    This macro was added as part of moving std::endian from <type_traits> to
    <bit>.
    
    Backport from mainline
    2019-07-26  Jonathan Wakely  <jwakely@redhat.com>
    
            * include/std/bit (__cpp_lib_endian): Define.
            * include/std/version (__cpp_lib_endian): Define.
            * testsuite/26_numerics/endian/2.cc: New.
            * testsuite/26_numerics/endian/3.cc: New.
            * testsuite/26_numerics/endian/4.cc: New.
    
    From-SVN: r273838

commit cdcfcb733bfd2b8bfdfdd189d8117102ec1d2fd1
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Fri Jul 26 14:36:56 2019 +0100

    Relocate std::endian from <type_traits> to <bit>
    
    This change to an early C++2a feature was just approved (P1612R1).
    
    Backport from mainline
    2019-07-25  Jonathan Wakely  <jwakely@redhat.com>
    
            * include/std/bit (endian): Move definition here as per P1612R1.
            * include/std/type_traits (endian): Remove definition from here.
            * testsuite/20_util/endian/1.cc: Rename to ...
            * testsuite/26_numerics/endian/1.cc: ... here. Adjust header.
    
    From-SVN: r273837

commit 90889960ba8d168b4f35cb91d459c849cb88da60
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Fri Jul 26 14:36:52 2019 +0100

    Adjust std::rotl, std::rotr etc to match final P0553R4 proposal
    
    This proposal has now been accepted for C++20, with a few changes. This
    patch adjusts std::rotl and std::rotr to match the final specification
    and declares the additions for C++2a mode even when __STRICT_ANSI__ is
    defined.
    
    Backport from mainline
    2019-07-22  Jonathan Wakely  <jwakely@redhat.com>
    
            * include/std/bit (__rotl, __rotr): Change second parameter from
            unsigned int to int and handle negative values.
            (rotl, rotr): Remove check for __STRICT_ANSI__. Change second
            parameter from unsigned int to int. Add nodiscard attribute.
            * testsuite/26_numerics/bit/bitops.rot/rotl.cc: Rename to ...
            * testsuite/26_numerics/bit/bit.rotate/rotl.cc: Here. Test negative
            shifts.
            * testsuite/26_numerics/bit/bitops.rot/rotr.cc: Rename to ...
            * testsuite/26_numerics/bit/bit.rotate/rotr.cc: Here. Test negative
            shifts.
    
    From-SVN: r273836

commit e72c873ac05d1705a741ddb41a3470166dd6d965
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Fri Jul 26 14:36:47 2019 +0100

    Change std::ceil2 to be undefined if the result can't be represented
    
    Backport from mainline
    2019-07-22  Jonathan Wakely  <jwakely@redhat.com>
    
            * include/std/bit (__ceil2): Make unrepresentable results undefined,
            as per P1355R2. Add debug assertion. Perform one left shift, not two,
            so that out of range values cause undefined behaviour. Ensure that
            shift will still be undefined if left operand is promoted.
            * testsuite/26_numerics/bit/bit.pow.two/ceil2.cc: Replace checks for
            unrepresentable values with checks that they are not core constant
            expressions.
            * testsuite/26_numerics/bit/bit.pow.two/ceil2_neg.cc: New test.
    
    From-SVN: r273835

commit 4f3334246c2a84e53ad3ffdad221f7975c40da2e
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Fri Jul 26 14:36:44 2019 +0100

    Remove std::byte overloads from <bit>
    
    The additional overloads for std::byte in <bit> were reviewed by LEWG
    and considered undesirable, so this patch removes them.
    
    Backport from mainline (partial)
    2019-06-26  Jonathan Wakely  <jwakely@redhat.com>
    
            * include/std/bit (rotl(byte, unsigned), rotr(byte, unsigned))
            (countl_zero(byte), countl_one(byte), countr_zero(byte))
            (countr_one(byte), popcount(byte), ispow2(byte), ceil2(byte))
            (floor2(byte), log2p1(byte)): Remove.
            * testsuite/26_numerics/bit/bit.pow.two/ceil2.cc: Remove test for
            std::byte overload.
            * testsuite/26_numerics/bit/bit.pow.two/floor2.cc: Likewise.
            * testsuite/26_numerics/bit/bit.pow.two/ispow2.cc: Likewise.
            * testsuite/26_numerics/bit/bit.pow.two/log2p1.cc: Likewise.
            * testsuite/26_numerics/bit/bitops.count/countl_one.cc: Likewise.
            * testsuite/26_numerics/bit/bitops.count/countl_zero.cc: Likewise.
            * testsuite/26_numerics/bit/bitops.count/countr_one.cc: Likewise.
            * testsuite/26_numerics/bit/bitops.count/countr_zero.cc: Likewise.
            * testsuite/26_numerics/bit/bitops.count/popcount.cc: Likewise.
            * testsuite/26_numerics/bit/bitops.rot/rotl.cc: Likewise.
            * testsuite/26_numerics/bit/bitops.rot/rotr.cc: Likewise.
    
    From-SVN: r273834

commit 2f1b34f9ffcbb94ac0ca60c79dabc5c20fc6fc11
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Fri Jul 26 14:36:39 2019 +0100

    Add parens around constraint in <memory>.
    
    C++20 concepts require parens around atomic constraints that are not
    primary-expressions.
    
    Backport from mainline
    2019-07-16  Jason Merrill  <jason@redhat.com>
    
            * include/std/memory (uses_allocator_construction_args): Add parens
            around constraint.
    
    From-SVN: r273833

commit 02a1cdae588a16c5793b22cb5d34df0db3c855a5
Author: Jonathan Wakely <redi@gcc.gnu.org>
Date:   Fri Jul 26 14:36:36 2019 +0100

    Fix preprocessor checks for Clang builtins
    
    Clang seems to define built-ins that start with "__builtin_" as
    non-keywords, which means that we need to use __has_builtin to detect
    them, not __is_identifier. The built-ins that don't start with
    "__builtin_" are keywords, and can only be detected using
    __is_identifier and not by __has_builtin.
    
    Backport from mainline
    2019-07-02  Jonathan Wakely  <jwakely@redhat.com>
    
            * include/bits/c++config (_GLIBCXX_HAVE_BUILTIN_LAUNDER)
            (_GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED): Use __has_builtin
            instead of __is_identifier to detect Clang support.
    
    From-SVN: r273832

commit 8852f119e4cd4812163c0ee1e9d19471a3b1145e
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Fri Jul 26 14:36:33 2019 +0100

    Add missing feature test macro to C++17 status table
    
    Backport from mainline
    2019-05-23  Jonathan Wakely  <jwakely@redhat.com>
    
            * doc/xml/manual/status_cxx2017.xml: Add feature test macro for
            P0040R3.
            * doc/html/*: Regenerate.
    
    From-SVN: r273831

commit 7353cd424865b12102f6df95f931e41da1785366
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Fri Jul 26 14:36:29 2019 +0100

    Fix outdated reference to C++17 draft in the docs
    
    Backport from mainline
    2019-06-20  Jonathan Wakely  <jwakely@redhat.com>
    
            * doc/xml/manual/status_cxx2017.xml: Fix outdated reference to
            C++17 working draft.
    
    From-SVN: r273830

commit 7b9f874f9ad400b3420a4cd3e029a5d86932641f
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Fri Jul 26 14:36:25 2019 +0100

    Fix std::midpoint for denormal values
    
    Backport from mainline
    2019-06-25  Jonathan Wakely  <jwakely@redhat.com>
    
            * include/std/numeric (midpoint(T, T)): Avoid std::abs in constexpr
            function.
    
    Backport from mainline
    2019-06-24  Jonathan Wakely  <jwakely@redhat.com>
    
            * include/std/numeric (midpoint(T, T)): Change implementation for
            floating-point types to avoid incorrect rounding of denormals.
            * testsuite/26_numerics/midpoint/floating.cc: Add check for correct
            rounding with denormals.
            * testsuite/26_numerics/gcd/gcd_neg.cc: Adjust dg-error line numbers.
            * testsuite/26_numerics/lcm/lcm_neg.cc: Likewise.
    
    From-SVN: r273829

commit 29978f368d251a8fcfd263950fd4241673c3443f
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Jul 26 00:16:21 2019 +0000

    Daily bump.
    
    From-SVN: r273822

commit daa31aea3049ebff072ecced5dcfe6d158539973
Author: Richard Biener <rguenther@suse.de>
Date:   Thu Jul 25 10:46:54 2019 +0000

    re PR plugins/90924 (lto-plugin/lto-plugin.c heap memory corruption due to insufficient sanitization.)
    
    2019-07-25  Richard Biener  <rguenther@suse.de>
    
            PR lto/90924
            Backport from mainline
            2019-07-12  Ren Kimura  <rkx1209dev@gmail.com>
    
            * simple-object-elf.c (simple_object_elf_match): Check zero value
            shstrndx.
    
    From-SVN: r273793

commit e58ac8a6a27535bcca7e183419eb88a88106a326
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Jul 25 00:16:21 2019 +0000

    Daily bump.
    
    From-SVN: r273781

commit cb181d837e03338f91c3447a5fe12d0cac0b4b89
Author: Bin Cheng <amker@gcc.gnu.org>
Date:   Wed Jul 24 01:32:59 2019 +0000

    Fixup ChangeLog entry for revision 273754.
    
    From-SVN: r273755

commit 568b00c67147a32db59bf6d7fca453f41c99f005
Author: Bin Cheng <bin.cheng@linux.alibaba.com>
Date:   Wed Jul 24 01:28:33 2019 +0000

    backport: re PR tree-optimization/91137 (Wrong code with -O3)
    
            Backport from mainline
            2019-07-18  Bin Cheng  <bin.linux@linux.alibaba.com>
    
            PR tree-optimization/91137
            * tree-ssa-loop-ivopts.c (struct ivopts_data): New field.
            (tree_ssa_iv_optimize_init, alloc_iv, tree_ssa_iv_optimize_finalize):
            Init, use and fini the above new field.
            (determine_base_object_1): New function.
            (determine_base_object): Reimplement using walk_tree.
    
    gcc/testsuite
            2019-07-18  Bin Cheng  <bin.linux@linux.alibaba.com>
    
            PR tree-optimization/91137
            * gcc.c-torture/execute/pr91137.c: New test.
    
    From-SVN: r273754

commit 025df40e592d9949ee1689825f3e29e917392962
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Jul 24 00:16:20 2019 +0000

    Daily bump.
    
    From-SVN: r273752

commit 01e83a10874735bcf65fc01671b40f70342074d5
Author: Matthew Beliveau <mbelivea@redhat.com>
Date:   Tue Jul 23 15:56:22 2019 +0000

    re PR rtl-optimization/91173 (ICE: in int_mode_for_mode, at stor-layout.c:403)
    
    PR rtl-optimization/91173
    
            Backported from mainline
            2019-07-16  Jeff Law  <law@redhat.com>
    
            PR rtl-optimization/91173
            * tree-ssa-address.c (addr_for_mem_ref): If the base is an
            SSA_NAME with a constant value, fold its value into the offset
            and clear the base before calling gen_addr_rtx.
            * g++.dg/pr91173.C: New test.
    
    From-SVN: r273741

commit d312963104c2d49a95be9d627a1f107405d34747
Author: Richard Biener <rguenther@suse.de>
Date:   Tue Jul 23 11:17:37 2019 +0000

    re PR debug/91231 (ICE in dwarf2out_inline_entry, at dwarf2out.c:27642)
    
    2019-07-23  Richard Biener  <rguenther@suse.de>
    
            PR debug/91231
            * lto-streamer-in.c (input_function): Drop inline-entry markers
            that ended up with an unknown location block.
    
    From-SVN: r273734

commit 38a8ddce9b0594d430674bd8e31849bd30d73ad8
Author: Thomas Koenig <tkoenig@gcc.gnu.org>
Date:   Tue Jul 23 08:57:45 2019 +0000

    backport: re PR libfortran/91030 (Poor performance of I/O -fconvert=big-endian)
    
    2019-07-23  Thomas König  <tkoenig@gcc.gnu.org>
    
            Backport from trunk
            PR libfortran/91030
            * gfortran.texi (GFORTRAN_FORMATTED_BUFFER_SIZE): Document.
            (GFORTRAN_UNFORMATTED_BUFFER_SIZE): Likewise.
    
    2019-07-23  Thomas König  <tkoenig@gcc.gnu.org>
    
            Backport from trunk
            PR libfortran/91030
            * io/unix.c (BUFFER_SIZE): Delete.
            (BUFFER_FORMATTED_SIZE_DEFAULT): New variable.
            (BUFFER_UNFORMATTED_SIZE_DEFAULT): New variable.
            (unix_stream): Add buffer_size.
            (buf_read): Use s->buffer_size instead of BUFFER_SIZE.
            (buf_write): Likewise.
            (buf_init): Add argument unformatted.  Handle block sizes
            for unformatted vs. formatted, using defaults if provided.
            (fd_to_stream): Add argument unformatted in call to buf_init.
            * libgfortran.h (options_t): Add buffer_size_formatted and
            buffer_size_unformatted.
            * runtime/environ.c (variable_table): Add
            GFORTRAN_UNFORMATTED_BUFFER_SIZE and
            GFORTRAN_FORMATTED_BUFFER_SIZE.
    
    From-SVN: r273727

commit d63bda34335234f0e84ed82484183d65ca28e46c
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Jul 23 00:16:25 2019 +0000

    Daily bump.
    
    From-SVN: r273711

commit a0cee637a09763befdf1e8ae67871afc7cf84434
Author: Paul A. Clarke <pc@us.ibm.com>
Date:   Mon Jul 22 16:32:37 2019 +0000

    [rs6000] Add _mm_blend_epi16 and _mm_blendv_epi8
    
    Add compatibility implementations of _mm_blend_epi16 and _mm_blendv_epi8
    intrinsics.
    
    Respective test cases are copied almost verbatim (minor changes to
    the dejagnu head lines) from i386.
    
    2019-07-22  Paul A. Clarke  <pc@us.ibm.com>
    
    [gcc]
    
            * config/rs6000/smmintrin.h (_mm_blend_epi16): New.
            (_mm_blendv_epi8): New.
    
    [gcc/testsuite]
    
            * gcc.target/powerpc/sse4_1-check.h: New.
            * gcc.target/powerpc/sse4_1-pblendvb.c: New.
            * gcc.target/powerpc/sse4_1-pblendw.c: New.
            * gcc.target/powerpc/sse4_1-pblendw-2.c: New.
    
    From-SVN: r273704

commit 883e30c4d966d5a3209547f4ab5d49adefe976db
Author: Martin Liska <mliska@suse.cz>
Date:   Mon Jul 22 11:37:18 2019 +0200

    Backport r273660
    
    2019-07-22  Martin Liska  <mliska@suse.cz>
    
            Backport from mainline
            2019-07-22  Martin Liska  <mliska@suse.cz>
    
            PR driver/91172
            * opts-common.c (decode_cmdline_option): Decode
            argument of -Werror and check it for a wrong language.
            * opts-global.c (complain_wrong_lang): Remove such case.
    2019-07-22  Martin Liska  <mliska@suse.cz>
    
            Backport from mainline
            2019-07-22  Martin Liska  <mliska@suse.cz>
    
            PR driver/91172
            * gcc.dg/pr91172.c: New test.
    
    From-SVN: r273664

commit b956e05c5786cbd7eb4f7f5e0398573096de98bf
Author: Claudiu Zissulescu <claziss@synopsys.com>
Date:   Mon Jul 22 09:21:24 2019 +0200

    [ARC] Backport ix emitting TLS symbols.
    
    From-SVN: r273658

commit 79643baffec370b919572934a790c57e1587d3f4
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Jul 22 00:16:19 2019 +0000

    Daily bump.
    
    From-SVN: r273655

commit 8a7e07abf95693b265cbd4d2e6edc7e6793218c9
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Jul 21 00:16:12 2019 +0000

    Daily bump.
    
    From-SVN: r273639

commit 56544a47e0a36563ff12cbe3fb21ba9f36414fe6
Author: Richard Sandiford <richard.sandiford@arm.com>
Date:   Sat Jul 20 18:50:20 2019 +0000

    Fix -Wreturn-type for static naked functions in C
    
    This patch extends the fix for PR53633 to include static functions,
    which were giving a bogus -Wreturn-type warning for C but not for C++.
    
    2019-07-20  Richard Sandiford  <richard.sandiford@arm.com>
    
    gcc/c/
            Backport from mainline
            2019-07-18  Richard Sandiford  <richard.sandiford@arm.com>
    
            PR c/53633
            * c-decl.c (finish_function): Check targetm.warn_func_return
            before issuing a -Wreturn-type warning.
    
    gcc/testsuite/
            Backport from mainline
            2019-07-18  Richard Sandiford  <richard.sandiford@arm.com>
    
            * c-c++-common/pr53633-2.c: New test.
    
    From-SVN: r273635

commit 76eeeaa4bb9122eb42e32d605cbb6d6e101217ff
Author: Richard Sandiford <richard.sandiford@arm.com>
Date:   Sat Jul 20 18:49:59 2019 +0000

    Fix folding of vector EQ/NE
    
    For vector1 != vector2, we returned false if any elements were equal,
    rather than if all elements were equal.
    
    2019-07-20  Richard Sandiford  <richard.sandiford@arm.com>
    
    gcc/
            Backport from mainline
            2019-07-10  Richard Sandiford  <richard.sandiford@arm.com>
    
            * fold-const.c (fold_relational_const): Fix folding of
            vector-to-scalar NE_EXPRs.
            (test_vector_folding): Add more tests.
    
    From-SVN: r273634

commit 9166fb6fa3088d6ee7ba38fe4091127006260a93
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Jul 20 00:16:11 2019 +0000

    Daily bump.
    
    From-SVN: r273614

commit a0385e9b466aa8d9ba79578b466316630540ee9b
Author: Jason Merrill <jason@redhat.com>
Date:   Fri Jul 19 04:53:07 2019 -0400

    PR c++/90098 - partial specialization and class non-type parms.
    
    A non-type template parameter of class type used in an expression has
    const-qualified type; the pt.c hunks deal with this difference from the
    unqualified type of the parameter declaration.  WAhen we use such a
    parameter as an argument to another template, we don't want to confuse
    things by copying it, we should pass it straight through.  And we might as
    well skip copying other classes in constant evaluation context in a
    template, too; we'll get the copy semantics at instantiation time.
    
            PR c++/90099
            PR c++/90101
            * call.c (build_converted_constant_expr_internal): Don't copy.
            * pt.c (process_partial_specialization): Allow VIEW_CONVERT_EXPR
            around class non-type parameter.
            (unify) [TEMPLATE_PARM_INDEX]: Ignore cv-quals.
            (invalid_nontype_parm_type_p): Check for dependent class type.
    
    From-SVN: r273597

commit 760811e5f54e5052059f4697648c5a13008108c4
Author: Jason Merrill <jason@redhat.com>
Date:   Fri Jul 19 04:52:58 2019 -0400

    PR c++/85552 - wrong instantiation of dtor for DMI.
    
            * typeck2.c (digest_nsdmi_init): Set tf_no_cleanup for direct-init.
    
    From-SVN: r273596

commit 7a3f46d59e7832c22040dfa17b416c2b130263b4
Author: Nina Dinka Ranns <dinka.ranns@gmail.com>
Date:   Fri Jul 19 08:52:50 2019 +0000

    PR c++/63149 - wrong auto deduction from braced-init-list
    
    2019-06-04  Nina Dinka Ranns  <dinka.ranns@gmail.com>
    
        gcc/cp/
        * pt.c (listify_autos): Use non cv qualified auto_node in
        std::initializer_list<auto>.
    
        testsuite/
        * g++.dg/cpp0x/initlist-deduce2.C: New test.
    
    From-SVN: r273595

commit 19aeedf7af4305455517b87c69681d060f999034
Author: Jason Merrill <jason@redhat.com>
Date:   Fri Jul 19 04:52:41 2019 -0400

    PR c++/82081 - tail call optimization breaks noexcept
    
    If a noexcept function calls a function that might throw, doing the tail
    call optimization means that an exception thrown in the called function
    will propagate out, breaking the noexcept specification.  So we need to
    prevent the optimization in that case.
    
            * tree-tailcall.c (find_tail_calls): Don't turn a call from a
            nothrow function to a might-throw function into a tail call.
    
    From-SVN: r273594

commit 17c4ac32fba03067f86859c23f825ca10dd3e7cd
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Jul 19 00:16:22 2019 +0000

    Daily bump.
    
    From-SVN: r273589

commit 7632aabc097da72a92009cf82f0b0a3271776871
Author: Kito Cheng <kito.cheng@sifive.com>
Date:   Thu Jul 18 07:00:32 2019 +0000

    RISC-V: Fix splitter for 32-bit AND on 64-bit target.
    
    Fixes github.com/riscv/riscv-gcc issue #161.  We were accidentally using
    BITS_PER_WORD to compute shift counts when we should have been using the
    bitsize of the operand modes.  This was wrong when we had an SImode shift
    and a 64-bit target.
    
            Andrew Waterman  <andrew@sifive.com>
            gcc/
            * config/riscv/riscv.md (lshrsi3_zero_extend_3+1): Use operands[1]
            bitsize instead of BITS_PER_WORD.
            gcc/testsuite/
            * gcc.target/riscv/shift-shift-2.c: Add one more test.
    
    gcc/ChangeLog:
    2019-07-18  Kito Cheng  <kito.cheng@sifive.com>
    
            Backport from mainline
            2019-07-08  Andrew Waterman  <andrew@sifive.com>
                        Jim Wilson  <jimw@sifive.com>
    
            * config/riscv/riscv.md (lshrsi3_zero_extend_3+1): Use operands[1]
            bitsize instead of BITS_PER_WORD.
            gcc/testsuite/
    
    gcc/testsuite/ChangeLog:
    2019-07-18  Kito Cheng  <kito.cheng@sifive.com>
    
            Backport from mainline
            2019-07-08  Jim Wilson  <jimw@sifive.com>
    
            * gcc.target/riscv/shift-shift-2.c: Add one more test.
    
    From-SVN: r273566

commit 85a09b8dcb088a14d8d958fd5d9f20b1e0f2cb70
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Jul 18 00:16:33 2019 +0000

    Daily bump.
    
    From-SVN: r273561

commit cccbb4c6b0b037a5118394b3c4b1454d97378a9d
Author: John David Anglin <danglin@gcc.gnu.org>
Date:   Thu Jul 18 00:10:27 2019 +0000

    pa.c (pa_som_asm_init_sections): Don't force all constant data into data section when generating PIC code.
    
            * config/pa/pa.c (pa_som_asm_init_sections): Don't force all constant
            data into data section when generating PIC code.
            (pa_select_section): Use pa_reloc_rw_mask() to qualify relocs.
            (pa_reloc_rw_mask): Return 3 when generating PIC code and when
            generating code for SOM targets earlier than HP-UX 11.  Otherwise,
            return 2 for SOM and 0 for other targets.
    
    From-SVN: r273558

commit 9051978364195dacc127b6a4c00076d7dd1c19d3
Author: Andreas Krebbel <krebbel@linux.ibm.com>
Date:   Wed Jul 17 07:32:30 2019 +0000

    S/390: Fix vector shift count operand
    
    We currently use subst definitions to handle the different variants of shift
    count operands. Unfortunately, in the vector shift pattern the shift count
    operand is used directly. Without it being adjusted for the 'subst' variants the
    displacement value is omitted resulting in a wrong shift count being applied.
    
    This patch needs to be applied to older branches as well.
    
    gcc/ChangeLog:
    
    2019-07-17  Andreas Krebbel  <krebbel@linux.ibm.com>
    
            Backport from mainline
            2019-07-01  Andreas Krebbel  <krebbel@linux.ibm.com>
    
            * config/s390/vector.md: Fix shift count operand printing.
    
    gcc/testsuite/ChangeLog:
    
    2019-07-17  Andreas Krebbel  <krebbel@linux.ibm.com>
    
            Backport from mainline
            2019-07-01  Andreas Krebbel  <krebbel@linux.ibm.com>
    
            * gcc.target/s390/vector/vec-shift-2.c: New test.
    
    From-SVN: r273546

commit 486e0826b4162b7fbe517d43ef0599e2d8062071
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Jul 17 00:16:17 2019 +0000

    Daily bump.
    
    From-SVN: r273540

commit 93750effc52353765394bff949a34f81f16a4673
Author: Wilco Dijkstra <wdijkstr@arm.com>
Date:   Tue Jul 16 16:17:39 2019 +0000

    Fix alignment option parser (PR90684)
    
    Fix the alignment option parser to always allow up to 4 alignments.
    Now -falign-functions=16:8:8:8 no longer reports an error.
    
        gcc/
            PR driver/90684
            * gcc/opts.c (parse_and_check_align_values): Allow 4 alignment values.
    
    From-SVN: r273533

commit 69f10e1a2ce11c9c2f3b0424db44e7bff3eb338a
Author: Wilco Dijkstra <wdijkstr@arm.com>
Date:   Tue Jul 16 12:12:01 2019 +0000

    Add missing testcase for PR89190
    
        testsuite/
            PR target/89190
            * gcc.target/arm/pr89190.c: New test.
    
    From-SVN: r273525

commit f32b78d0bdb4c9b0fc7453244f441284fb96bc95
Author: Martin Liska <mliska@suse.cz>
Date:   Tue Jul 16 12:21:57 2019 +0200

    Do not use -Werror in a test that has -frepo warning (PR testsuite/91175).
    
    2019-07-16  Martin Liska  <mliska@suse.cz>
    
            PR testsuite/91175
            * g++.old-deja/g++.pt/instantiate4.C: Do not use -Werror.
    
    From-SVN: r273521

commit eecf5f680a3c50880f5c9631f563b0c94b0c8cdb
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Jul 16 00:16:44 2019 +0000

    Daily bump.
    
    From-SVN: r273504

commit 1afd0973738e2141ec5ae3103b00ad0e72225c29
Author: Martin Liska <mliska@suse.cz>
Date:   Mon Jul 15 06:11:43 2019 +0200

    Deprecate -frepo on gcc-9 branch (PR c++/91125).
    
    2019-07-15  Martin Liska  <mliska@suse.cz>
    
            PR c++/91125
            * c-opts.c (c_common_handle_option): Warn the -frepo
            will be removed in the future.
    2019-07-15  Martin Liska  <mliska@suse.cz>
    
            PR c++/91125
            * g++.dg/parse/repo1.C: Add scan for the new warning.
            * g++.dg/rtti/repo1.C: Likewise.
            * g++.dg/template/repo1.C: Likewise.
            * g++.dg/template/repo10.C: Likewise.
            * g++.dg/template/repo11.C: Likewise.
            * g++.dg/template/repo2.C: Likewise.
            * g++.dg/template/repo3.C: Likewise.
            * g++.dg/template/repo4.C: Likewise.
            * g++.dg/template/repo5.C: Likewise.
            * g++.dg/template/repo6.C: Likewise.
            * g++.dg/template/repo7.C: Likewise.
            * g++.dg/template/repo8.C: Likewise.
            * g++.dg/template/repo9.C: Likewise.
            * g++.old-deja/g++.pt/instantiate4.C: Likewise.
            * g++.old-deja/g++.pt/instantiate6.C: Likewise.
            * g++.old-deja/g++.pt/repo1.C: Likewise.
            * g++.old-deja/g++.pt/repo2.C: Likewise.
            * g++.old-deja/g++.pt/repo3.C: Likewise.
            * g++.old-deja/g++.pt/repo4.C: Likewise.
    
    From-SVN: r273489

commit 152c9293dc192c5f72183e49c984ad1e7d012502
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Jul 15 00:16:14 2019 +0000

    Daily bump.
    
    From-SVN: r273487

commit 02b466f44c72aa6a79786b24b1d12c7a4caa90a0
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Sun Jul 14 10:29:38 2019 +0200

    backport: re PR c/91149 (GCC 9 and later incorrectly rejects OpenMP task reduction-modifier on target parallel combined construct)
    
            Backported from mainline
            2019-07-13  Jakub Jelinek  <jakub@redhat.com>
    
            PR c/91149
            * c-omp.c (c_omp_split_clauses): Fix a pasto in
            OMP_CLAUSE_REDUCTION_TASK handling.
    
            * c-c++-common/gomp/reduction-task-3.c: New test.
    
    From-SVN: r273478

commit 803fcf21f4499235d7c61a019e967d3563f669e1
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Sun Jul 14 10:28:06 2019 +0200

    backport: re PR middle-end/78884 ([7/8] ICE when gimplifying VLA in OpenMP SIMD region)
    
            Backported from mainline
            2019-07-04  Jakub Jelinek  <jakub@redhat.com>
    
            PR middle-end/78884
            * gimplify.c (struct gimplify_omp_ctx): Add add_safelen1 member.
            (gimplify_bind_expr): If seeing TREE_ADDRESSABLE VLA inside of simd
            loop body, set ctx->add_safelen1 instead of making it GOVD_PRIVATE.
            (gimplify_adjust_omp_clauses): Add safelen (1) clause if
            ctx->add_safelen1 is set.
    
            * gcc.dg/gomp/pr78884.c: New test.
    
    From-SVN: r273477

commit 223d142ccbd44eb8b731222e6bcad26104dbfd3a
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Sun Jul 14 10:27:12 2019 +0200

    backport: re PR rtl-optimization/90756 (g++ ICE in convert_move, at expr.c:218 on i686 and s390x)
    
            Backported from mainline
            2019-07-04  Jakub Jelinek  <jakub@redhat.com>
    
            PR rtl-optimization/90756
            * explow.c (promote_ssa_mode): Always use TYPE_MODE, don't bypass it
            for VECTOR_TYPE_P.
    
            * gcc.dg/pr90756.c: New test.
    
    From-SVN: r273476

commit 7592365493bc462fa2c2113d4b64aade9d94ce83
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Jul 14 00:16:14 2019 +0000

    Daily bump.
    
    From-SVN: r273473

commit 8e6fdcaabe2f5560f1fc15f88c88b84be2650111
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Jul 13 00:16:20 2019 +0000

    Daily bump.
    
    From-SVN: r273462

commit da6e9b0c2306541b9740873e320370fe815b6cd7
Author: Wilco Dijkstra <wdijkstr@arm.com>
Date:   Fri Jul 12 17:00:40 2019 +0000

    Turn off ipa-ra in builtins test (PR91059)
    
    The gcc.c-torture/execute/builtins/lib directory contains a reimplementation
    of many C library string functions, which causes non-trivial register allocation
    bugs with LTO and static linked libraries.  To fix this long-standing test issue,
    turn off ipa-ra which avoids the register corruption across calls.  All builtin
    torture tests now pass on aarch64-none-elf.  Committed as obvious.
    See PR78529 for more details.
    
        testsuite/
            PR testsuite/78529
            * gcc.c-torture/execute/builtins/builtins.exp: Add -fno-ipa-ra.
    
    From-SVN: r273452

commit 9f2cfe108f75de49a331ba27f01d509e2c8c1c70
Author: Richard Biener <rguenther@suse.de>
Date:   Fri Jul 12 14:42:14 2019 +0000

    Backport PRs 90369, 90900, 90914, 90972, 90982, 91004, 91062, 91063
    
    2019-07-12  Richard Biener  <rguenther@suse.de>
    
            Backport from mainline
            2019-07-04  Jakub Jelinek  <jakub@redhat.com>
    
            PR tree-optimization/91063
            * tree-vect-stmts.c (vect_init_vector): Call gsi_remove to remove
            stmt from stmts sequence before calling vect_init_vector_1.
            Formatting fix.
    
            * gcc.dg/gomp/pr91063.c: New test.
    
            2019-07-04  Richard Biener  <rguenther@suse.de>
    
            PR ipa/91062
            * tree-pass.h (execute_all_ipa_transforms): Add a flag
            parameter whether to disable GC collection.
            * passes.c (execute_one_ipa_transform_pass): Likewise, and
            honor it.
            (execute_all_ipa_transforms): Likewise and pass it down.
            * cgraph.c (cgraph_node::get_body): Do not invoke garbage
            collection from applying IPA transforms.
            * cgraphunit.c (cgraph_node::expand): Allow garbage collection
            from applying IPA transforms.
    
            2019-06-27  Richard Biener  <rguenther@suse.de>
    
            PR testsuite/91004
            * g++.dg/torture/pr34850.C: Fix overly reduced testcase.
    
            2019-06-26  Richard Biener  <rguenther@suse.de>
    
            PR ipa/90982
            * tree-inline.c (remap_ssa_name): Copy SSA range info.
    
            * g++.dg/torture/pr90982.C: New testcase.
    
            2019-06-24  Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/90972
            * tree-vect-stmts.c (vect_init_vector): Handle CONSTANT_CLASS_P
            in common code, dealing with STRING_CST properly.
    
            * gcc.dg/torture/pr90972.c: New testcase.
    
            2019-06-21  Richard Biener  <rguenther@suse.de>
    
            PR debug/90914
            * dwarf2out.c (prune_unused_types_walk): Always consider
            function-local extern declarations as used.
    
            * g++.dg/debug/pr90914.C: New testcase.
    
            2019-06-18  Richard Biener  <rguenther@suse.de>
    
            PR debug/90900
            * cfgexpand.c (expand_debug_expr): Treat NOTE_P DECL_RTL
            as if optimized away.
    
            * gcc.dg/gomp/pr90900.c: New testcase.
    
            2019-05-07  Richard Biener  <rguenther@suse.de>
    
            PR lto/90369
            * lto-wrapper.c (debug_objcopy): Use the original filename
            including archive offset for the filename used for -save-temps.
    
    From-SVN: r273446

commit 72bc772092214304564b8430a4658d0593c48ac0
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Fri Jul 12 10:16:11 2019 +0000

    re PR rtl-optimization/91136 (incorrect move of instruction to delay slot causes application crash in exception handling)
    
            PR rtl-optimization/91136
            * df-core.c (ACCESSING REFS): Fix typos in comment.
            * resource.c (mark_target_live_reg): Add artificial defs that occur at
            the beginning of the block to the initial set of live registers.
    
    From-SVN: r273437

commit 7c0493dd82560855b3378d2949b6fe3fc3a8f2a2
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Jul 12 00:16:13 2019 +0000

    Daily bump.
    
    From-SVN: r273428

commit b0293479e53940538927ff582479ee2675a61390
Author: Uros Bizjak <ubizjak@gmail.com>
Date:   Thu Jul 11 22:52:25 2019 +0200

    backport: pr81563.c (dg-final): Check that no registers are restored from %esp.
    
            Backported from mainline
            2019-06-18  Uroš Bizjak  <ubizjak@gmail.com>
    
            * gcc.target/i386/pr81563.c (dg-final): Check that no
            registers are restored from %esp.
    
    From-SVN: r273423

commit 5ee0f4e7d96463f709c5302c36a8072ed8d65949
Author: Uros Bizjak <ubizjak@gmail.com>
Date:   Thu Jul 11 22:49:13 2019 +0200

    backport: sse.md (*andnot<mode>3_bcst): Fix VI/VI48_AVX512VL typo.
    
            Backported from mainline
            2019-07-06  Richard Sandiford  <richard.sandiford@arm.com>
    
            * config/i386/sse.md (*andnot<mode>3_bcst): Fix VI/VI48_AVX512VL typo.
    
    From-SVN: r273422

commit 54f3719d6df972cf000272d49655df15a175e4b0
Author: Segher Boessenkool <segher@kernel.crashing.org>
Date:   Thu Jul 11 20:42:20 2019 +0200

    rs6000: Handle Modula-2 in the traceback table
    
    This patch recognises Modula-2 as language for the traceback table,
    fixing the problem shown in
    https://gcc.gnu.org/ml/gcc-patches/2019-07/msg00848.html .
    
            * config/rs6000/rs6000.c (rs6000_output_function_epilogue): Handle
            Modula-2.
    
    From-SVN: r273412

commit 9c657ecabdb7be27820bb0bc3330945e56420e94
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Jul 11 00:16:12 2019 +0000

    Daily bump.
    
    From-SVN: r273374

commit 77135e59cffaa1ed0a97de9f4cc0b7dd2b61f5af
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Jul 10 00:16:16 2019 +0000

    Daily bump.
    
    From-SVN: r273320

commit c91c43f82396706836ec8c97c310da64d9f7dce2
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Jul 9 00:16:14 2019 +0000

    Daily bump.
    
    From-SVN: r273259

commit 21c034217cfb8b723ab8f4b7252677df2cd391a6
Author: Richard Biener <rguenther@suse.de>
Date:   Mon Jul 8 11:48:48 2019 +0000

    re PR tree-optimization/91108 (Fails to pun through unions)
    
    2019-07-08  Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/91108
            * tree-ssa-sccvn.c: Include builtins.h.
            (vn_reference_lookup_3): Use only alignment constraints to
            verify same-valued store disambiguation.
    
            * gcc.dg/tree-ssa/pr91091-1.c: New testcase.
            * gcc.dg/tree-ssa/ssa-fre-78.c: Likewise.
    
    From-SVN: r273233

commit d542f941ca60f173bf4496f1aba36189d31b79c0
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Jul 8 00:16:19 2019 +0000

    Daily bump.
    
    From-SVN: r273189

commit e3b4dd51006d2700aed0b91996f71e73df5fe621
Author: Paul Thomas <pault@gcc.gnu.org>
Date:   Sun Jul 7 14:32:53 2019 +0000

    re PR fortran/91077 (Wrong indexing when using a pointer)
    
    2019-07-07  Paul Thomas  <pault@gcc.gnu.org>
    
            PR fortran/91077
            * trans-array.c (gfc_conv_scalarized_array_ref) Delete code
            that gave symbol backend decl for subref arrays and deferred
            length variables.
    
    2019-07-07  Paul Thomas  <pault@gcc.gnu.org>
    
            PR fortran/91077
            * gfortran.dg/pointer_array_11.f90 : New test.
    
    From-SVN: r273177

commit c2019cdb0b91dc5d7f1c2435c6ec6adfdb490f0b
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Jul 7 00:16:18 2019 +0000

    Daily bump.
    
    From-SVN: r273172

commit abc1c0ee6f19d9d339ccd680e6931400120a0596
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Jul 6 00:16:31 2019 +0000

    Daily bump.
    
    From-SVN: r273153

commit 183b10be037bff80b406b49ae44e1befb45fb69e
Author: Szabolcs Nagy <szabolcs.nagy@arm.com>
Date:   Fri Jul 5 15:06:11 2019 +0000

    aarch64: emit .variant_pcs for aarch64_vector_pcs symbol references
    
    Backport r271869
    Backport r271913
    Backport r272414
    
    A dynamic linker with lazy binding support may need to handle vector PCS
    function symbols specially, so an ELF symbol table marking was
    introduced for such symbols.
    
    Function symbol references and definitions that follow the vector PCS
    are marked in the generated assembly with .variant_pcs and then the
    STO_AARCH64_VARIANT_PCS st_other flag is set on the symbol in the object
    file.  The marking is propagated to the dynamic symbol table by the
    static linker so a dynamic linker can handle such symbols specially.
    
    For this to work, the assembler, the static linker and the dynamic
    linker has to be updated on a system.  Old assembler does not support
    the new .variant_pcs directive, so a toolchain with old binutils won't
    be able to compile code that references vector PCS symbols.
    
    gcc/ChangeLog:
    
            * config/aarch64/aarch64-protos.h (aarch64_asm_output_alias): Declare.
            (aarch64_asm_output_external): Declare.
            * config/aarch64/aarch64.c (aarch64_asm_output_variant_pcs): New.
            (aarch64_declare_function_name): Call aarch64_asm_output_variant_pcs.
            (aarch64_asm_output_alias): New.
            (aarch64_asm_output_external): New.
            * config/aarch64/aarch64.h (ASM_OUTPUT_DEF_FROM_DECLS): Define.
            (ASM_OUTPUT_EXTERNAL): Define.
    
    gcc/testsuite/ChangeLog:
    
            * gcc.target/aarch64/pcs_attribute-2.c: New test.
            * gcc.target/aarch64/torture/simd-abi-4.c: Check .variant_pcs support.
            * lib/target-supports.exp (check_effective_target_aarch64_variant_pcs):
            New.
    
    gcc/ChangeLog:
    
            * config/aarch64/aarch64-protos.h (aarch64_asm_output_external): Remove
            const.
            * config/aarch64/aarch64.c (aarch64_asm_output_external): Call
            default_elf_asm_output_external.
    
    gcc/testsuite/ChangeLog:
    
            * gcc.target/aarch64/pcs_attribute-2.c: Remove ifunc usage.
            * gcc.target/aarch64/pcs_attribute-3.c: New test.
    
    From-SVN: r273140

commit c960b2a24643dfa5e35324ce811cbadc2f4179f5
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Jul 5 00:16:19 2019 +0000

    Daily bump.
    
    From-SVN: r273099

commit 678cb3594903cd4ae99a70c7b071f38b7c5f8e4e
Author: James Clarke <jrtc27@debian.org>
Date:   Thu Jul 4 13:36:08 2019 +0000

    s-osinte__kfreebsd-gnu.ads (clockid_t): Make type definition public.
    
    2019-07-04  James Clarke <jrtc27@debian.org>
    
            * libgnarl/s-osinte__kfreebsd-gnu.ads (clockid_t): Make type
            definition public.
            (CLOCK_REALTIME): Make value public.
    
    From-SVN: r273081

commit b098c7983c12e17ba872d2241173c186a3c6f4e9
Author: Martin Liska <mliska@suse.cz>
Date:   Thu Jul 4 11:03:56 2019 +0200

    Backport r272993
    
    2019-07-04  Martin Liska  <mliska@suse.cz>
    
            Backport from mainline
            2019-07-03  Martin Liska  <mliska@suse.cz>
    
            PR tree-optimization/90892
            * builtins.c (inline_expand_builtin_string_cmp): Handle '\0'
            in string constants.
    2019-07-04  Martin Liska  <mliska@suse.cz>
    
            Backport from mainline
            2019-07-03  Martin Liska  <mliska@suse.cz>
    
            PR tree-optimization/90892
            * gcc.dg/pr90892.c: New test.
    
    From-SVN: r273074

commit f62121b1cae10375be19ffd7c9386364cd3756f4
Author: Martin Liska <mliska@suse.cz>
Date:   Thu Jul 4 11:03:40 2019 +0200

    Backport r272992
    
    2019-07-04  Martin Liska  <mliska@suse.cz>
    
            Backport from mainline
            2019-07-03  Martin Liska  <mliska@suse.cz>
    
            PR middle-end/90899
            * multiple_target.c (create_dispatcher_calls): Add to comdat
            group only if set for ifunc.
    2019-07-04  Martin Liska  <mliska@suse.cz>
    
            Backport from mainline
            2019-07-03  Martin Liska  <mliska@suse.cz>
    
            PR middle-end/90899
            * gcc.target/i386/pr90899.c: New test.
    
    From-SVN: r273073

commit 0fadad4fb844ea61dd2cb0e6370abe857774f570
Author: Chenghua Xu <paul.hua.gm@gmail.com>
Date:   Thu Jul 4 02:39:58 2019 +0000

    [MIPS][Testsuite] Specify msa-fmadd.c abis.
    
    Backport from mainline for fix msa-fmadd.c.
    gcc/testsuite/
    
            * gcc.target/mips/mips-fmadd.c: Rename to ...
            * gcc.target/mips/mips-fmadd-o32.c: ... Here; add abi=32.
            * gcc.target/mips/mips-fmadd-n64.c: New.
    
    From-SVN: r273035

commit beaa6403a1ffa5d3ffda11bbc034f073e1a4ae7a
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Jul 4 00:16:17 2019 +0000

    Daily bump.
    
    From-SVN: r273030

commit 7eaccf3e29a2d2571f9f6fdf884e4732b8fd3baa
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Wed Jul 3 22:09:13 2019 +0100

    PR libstdc++/91067 fix missing exports for filesystem iterators
    
    The copy assignment operator for recursive_directory_iterator was not
    exported despite being needed. The __shared_ptr default constructors are
    not needed when compiling with GCC but Clang requires them for -O1.
    
            PR libstdc++/91067
            * acinclude.m4 (libtool_VERSION): Bump to 6:27:0.
            * configure: Regenerate.
            * config/abi/pre/gnu.ver (GLIBCXX_3.4.27): Add new version. Export
            missing symbols.
            * testsuite/27_io/filesystem/iterators/91067.cc: New test.
            * testsuite/util/testsuite_abi.cc: Add new symbol version.
    
    From-SVN: r273025

commit a3c822eb81afc9dae1f5900f0a0012f24c7b914d
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Wed Jul 3 22:09:08 2019 +0100

    Fix preprocessor checks for Clang builtins
    
    Clang seems to define built-ins that start with "__builtin_" as
    non-keywords, which means that we need to use __has_builtin to detect
    them, not __is_identifier. The built-ins that don't start with
    "__builtin_" are keywords, and can only be detected using
    __is_identifier and not by __has_builtin.
    
    Backport from mainline
    2019-07-02  Jonathan Wakely  <jwakely@redhat.com>
    
            * include/bits/c++config (_GLIBCXX_HAVE_BUILTIN_LAUNDER)
            (_GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED): Use __has_builtin
            instead of __is_identifier to detect Clang support.
    
    From-SVN: r273024

commit 669c0e314c38ca3da31ce7f716fa9061611240e8
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Wed Jul 3 12:01:30 2019 +0000

    dwarf2out.c (add_scalar_info): Add back refererence to existing DIE if it has the DW_AT_data_member_location...
    
            * dwarf2out.c (add_scalar_info): Add back refererence to existing DIE
            if it has the DW_AT_data_member_location attribute.
    
    From-SVN: r273003

commit 5196f31fbb8db4504b111444e65a4da59ddab4f1
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Jul 3 00:16:12 2019 +0000

    Daily bump.
    
    From-SVN: r272952

commit 43806b822b83b25d57fa603c48bb5a1f5741442f
Author: Andrew Stubbs <ams@codesourcery.com>
Date:   Tue Jul 2 13:57:56 2019 +0000

    Fix regrename ICE.
    
    2019-07-02  Andrew Stubbs  <ams@codesourcery.com>
    
            Backport from mainline:
            gcc/
            2019-07-02  Andrew Stubbs  <ams@codesourcery.com>
    
            * config/gcn/gcn.md (movdi_symbol_save_scc): Convert to define_insn
            with inlined save and restore.
    
    From-SVN: r272938

commit 1e8aa132091239672d24baa01e571a06cf4d4c66
Author: Marek Polacek <polacek@redhat.com>
Date:   Tue Jul 2 00:23:41 2019 +0000

    PR c++/90490 - fix decltype issues in noexcept-specifier.
    
            * except.c (build_noexcept_spec): Call
            instantiate_non_dependent_expr_sfinae before
            build_converted_constant_expr instead of calling
            instantiate_non_dependent_expr after it.  Add
            processing_template_decl_sentinel.
    
            * g++.dg/cpp0x/noexcept43.C: New test.
            * g++.dg/cpp0x/noexcept44.C: New test.
    
    From-SVN: r272918

commit 7b966ac81e09c04a33fdc496f8313204c530fe7d
Author: Marek Polacek <polacek@redhat.com>
Date:   Tue Jul 2 00:22:37 2019 +0000

    PR c++/60223 - ICE with T{} in non-deduced context.
    
            * pt.c (unify): Allow COMPOUND_LITERAL_P in a non-deduced context.
    
            * g++.dg/cpp0x/nondeduced1.C: New test.
            * g++.dg/cpp0x/nondeduced2.C: New test.
            * g++.dg/cpp0x/nondeduced3.C: New test.
            * g++.dg/cpp0x/nondeduced4.C: New test.
    
    From-SVN: r272917

commit e2a5555a1eb3758aace7d40a9990f32967380495
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Jul 2 00:16:18 2019 +0000

    Daily bump.
    
    From-SVN: r272915

commit 9c715fa9052855c53065c6d06211060294ee0977
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Mon Jul 1 16:27:06 2019 +0000

    re PR middle-end/64242 (Longjmp expansion incorrect)
    
            PR middle-end/64242
            * config/sparc/sparc.md (nonlocal_goto): Restore frame pointer last.
            Add frame clobber and schedule blockage.
    
    From-SVN: r272890

commit afbaf207281a0d51752177f53b2552672bdc0808
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Jul 1 00:16:14 2019 +0000

    Daily bump.
    
    From-SVN: r272838

commit 07cee7b26df0a06ac8b0152033cf8b229da2c20e
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Jun 30 00:16:22 2019 +0000

    Daily bump.
    
    From-SVN: r272830

commit 4d3ffbe20448d5cd0aecea62fe9520b0cba3ad02
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Sat Jun 29 09:05:43 2019 +0000

    decl.c (gnat_to_gnu_entity): Beep up comment on SAVED...
    
            * gcc-interface/decl.c (gnat_to_gnu_entity): Beep up comment on SAVED,
            and tweak comment on the assertion about the scopes of Itypes.  Do not
            skip the regular processing for Itypes that are E_Record_Subtype with
            a Cloned_Subtype.  Get the Cloned_Subtype for every E_Record_Subtype
            if the type is dummy and hasn't got its own freeze node.
            <E_Record_Subtype>: Save again the DECL of the Cloned_Subtype, if any.
            <E_Access_Subtype>: Save again the DECL of the equivalent type.
            (Gigi_Equivalent_Type) <E_Access_Subtype>: New case.
    
    From-SVN: r272823

commit 2fb065a1731c20e067e2a0b3873af0250138744f
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Sat Jun 29 07:38:08 2019 +0000

    trans.c (mark_visited_r): Set TYPE_SIZES_GIMPLIFIED on the main variant of a type, if any.
    
            * gcc-interface/trans.c (mark_visited_r): Set TYPE_SIZES_GIMPLIFIED on
            the main variant of a type, if any.
    
    From-SVN: r272816

commit ec90f3516117d1145ed994c0c25e8d21c54181b6
Author: Eric Botcazou <ebotcazou@gcc.gnu.org>
Date:   Sat Jun 29 07:30:57 2019 +0000

    decl.c (set_nonaliased_component_on_array_type): Add missing guard for the presence of TYPE_CANONICAL.
    
            * gcc-interface/decl.c (set_nonaliased_component_on_array_type): Add
            missing guard for the presence of TYPE_CANONICAL.
            (set_reverse_storage_order_on_array_type): Likewise.
    
    From-SVN: r272812

commit 5540f7f151e04b82b28b998054dcfa9382e974b7
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Jun 29 00:16:13 2019 +0000

    Daily bump.
    
    From-SVN: r272807

commit 0a4024807aacfeac22da3ec21620ece3a029bfbc
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Sat Jun 29 00:57:16 2019 +0200

    backport: re PR c++/91024 (-Wimplicit-fallthrough is confused by likely/unlikely attributes)
    
            Backported from mainline
            2019-06-27  Jakub Jelinek  <jakub@redhat.com>
    
            PR c++/91024
            * gimplify.c (collect_fallthrough_labels): Ignore GIMPLE_PREDICT
            statements.
    
            * g++.dg/warn/Wimplicit-fallthrough-4.C: New test.
    
    From-SVN: r272804

commit 11e313784f6f8f6a924ce00557734d7fba43cd32
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Sat Jun 29 00:56:27 2019 +0200

    backport: re PR target/90991 (_mm_loadu_ps instrinsic translates to vmovaps in combination with _mm512_insertf32x4)
    
            Backported from mainline
            2019-06-26  Jakub Jelinek  <jakub@redhat.com>
    
            PR target/90991
            * config/i386/sse.md
            (*<extract_type>_vinsert<shuffletype><extract_suf>_0): Use vmovupd,
            vmovups, vmovdqu, vmovdqu32 or vmovdqu64 instead of the aligned
            insns if operands[2] is misaligned_operand.
    
            * gcc.target/i386/avx512dq-pr90991-1.c: New test.
    
    From-SVN: r272803

commit f57330c00bdc0e10b92a1af29cd60ce77ab4f32f
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Sat Jun 29 00:55:29 2019 +0200

    backport: re PR sanitizer/90954 (ICE: combining undefined behavior sanitizer with openmp)
    
            Backported from mainline
            2019-06-25  Jakub Jelinek  <jakub@redhat.com>
    
            PR sanitizer/90954
            * c-omp.c (c_finish_omp_atomic): Allow tree_invariant_p in addition
            to SAVE_EXPR in first operand of a COMPOUND_EXPR.
    
            * c-c++-common/gomp/pr90954.c: New test.
    
    From-SVN: r272802

commit fe8665498dc76eb6a5dd42f4e58e76436afb7bf6
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Sat Jun 29 00:11:03 2019 +0200

    backport: re PR c++/90950 (OpenMP clause handling rejecting references to incomplete types in templates)
    
            Backported from mainline
            2019-06-21  Jakub Jelinek  <jakub@redhat.com>
    
            PR c++/90950
            * semantics.c (finish_omp_clauses): Don't reject references to
            incomplete types if processing_template_decl.
    
            * g++.dg/gomp/lastprivate-1.C: New test.
    
    From-SVN: r272801

commit 03b70afb515142cac65c579de7bec81906f79992
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Sat Jun 29 00:10:04 2019 +0200

    backport: re PR c/90760 (ICE on attributes section and alias in set_section, at symtab.c:1573)
    
            Backported from mainline
            2019-06-12  Jakub Jelinek  <jakub@redhat.com>
    
            PR c/90760
            * symtab.c (symtab_node::set_section): Allow being called on aliases
            as long as they aren't analyzed yet.
    
            * gcc.dg/pr90760.c: New test.
    
    From-SVN: r272800

commit a7c7481a07ec5fc8d35063da34ff82d0451f229f
Author: Jeff Law <law@redhat.com>
Date:   Fri Jun 28 14:21:05 2019 -0600

    re PR tree-optimization/90949 (null pointer check removed)
    
            PR tree-optimization/90949
            * tree-ssa-copy.c (fini_copy_prop): Use reset_flow_sensitive_info.
            * tree-ssanames.c (reset_flow_sensitive_info): Reset non-null state.
    
            * gcc.c-torture/execute/pr90949.c: New test.
    
    From-SVN: r272793

commit edbbdf0b8c4a919e9d597b47c04f76e79e0bf83d
Author: Andrew Stubbs <ams@codesourcery.com>
Date:   Fri Jun 28 16:37:14 2019 +0000

    Fix trampoline execution failures on GCN5.
    
    2019-06-28  Andrew Stubbs  <ams@codesourcery.com>
    
            Backport from mainline:
            2019-05-22  Andrew Stubbs  <ams@codesourcery.com>
    
            * config/gcn/gcn.c (gcn_trampoline_init): Call "sorry" on GCN5.
    
    From-SVN: r272788

commit 13d140ccd618adda3aef74257dcaa67d250fb9aa
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Jun 28 00:16:12 2019 +0000

    Daily bump.
    
    From-SVN: r272773

commit 0e7ffed96cfdde1f9c37fb9305785b507141047b
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Thu Jun 27 12:31:02 2019 +0100

    PR libstdc++/85494 use rand_s in std::random_device
    
    This is a minimal fix for the use of a deterministic RNG on mingw-w64,
    simply using rand_s unconditionally. The rest of the r271740 changes on
    trunk are not included. That means that RDSEED and RDRAND are not
    available for mingw-w64 and the token passed to the constructor is
    ignored completely.
    
            PR libstdc++/85494 use rand_s in std::random_device
            * config/os/mingw32-w64/os_defines.h (_GLIBCXX_USE_CRT_RAND_S): Define.
            * src/c++11/cow-string-inst.cc (random_device::_M_init_pretr1)
            [_GLIBCXX_USE_CRT_RAND_S]: Do nothing if rand_s will be used.
            * src/c++11/random.cc [_GLIBCXX_USE_CRT_RAND_S] (__winxp_rand_s):
            Define new function.
            (random_device::_M_init_pretr1) [_GLIBCXX_USE_CRT_RAND_S]: Do nothing
            if rand_s will be used.
            (random_device::_M_getval_pretr1) [_GLIBCXX_USE_CRT_RAND_S]: Use
            __winxp_rand_s().
            * testsuite/26_numerics/random/random_device/85494.cc: New test.
    
    From-SVN: r272748

commit c8a25b30c691e9207cc1a0c23c38b8e8e8c4fd36
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Thu Jun 27 11:06:09 2019 +0100

    PR libstdc++/91012 fixfilesystem_error::what() string
    
    When I refactored the filesystem_error code I changed it to only use the
    constructor parameter in the what() string, instead of the string
    returned by system_error::what(). That meant it no longer included the
    description of the error_code that system_error adds. This restores the
    previous behaivour, as encouraged by the standard ("Implementations
    should include the system_error::what() string and the pathnames of
    path1 and path2 in the native format in the returned string").
    
            PR libstdc++/91012
            * src/c++17/fs_path.cc (filesystem_error::_Impl): Use a string_view
            for the what_arg parameters.
            (filesystem_error::filesystem_error): Pass system_error::what() to
            the _Impl constructor.
            * testsuite/27_io/filesystem/filesystem_error/cons.cc: Ensure that
            filesystem_error::what() contains system_error::what().
    
    From-SVN: r272741

commit e34f32d792fc22aaa3bc1a2ffaaef059d78f0339
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Jun 27 00:16:19 2019 +0000

    Daily bump.
    
    From-SVN: r272722

commit 7867b61fa3f4deefc4bd0295045dc213de55fa78
Author: Martin Jambor <mjambor@suse.cz>
Date:   Wed Jun 26 14:04:08 2019 +0200

    [PR 90939] Remove outdated assert in ipcp_bits_lattice::meet_with
    
    2019-06-26  Martin Jambor  <mjambor@suse.cz>
    
            PR ipa/90939
            * ipa-cp.c (ipcp_bits_lattice::meet_with): Remove assert.
    
            testsuite/
            * g++.dg/lto/pr90939_[01].C: New test.
    
    From-SVN: r272689

commit 1215a76ab5a53c2feea4f4d5c0e1cad157107648
Author: Rainer Orth <ro@CeBiTec.Uni-Bielefeld.DE>
Date:   Wed Jun 26 10:49:15 2019 +0000

    Fix sanitizer_common/sanitizer_posix_libcdep.cc compilation on Solaris 11.5
    
            * sanitizer_common/sanitizer_posix_libcdep.cc: Cherry-pick
            compiler-rt revision 363778.
    
    From-SVN: r272686

commit d1bb76b1f9e04961e2d938edb8c4b7afb6af3122
Author: Rainer Orth <ro@CeBiTec.Uni-Bielefeld.DE>
Date:   Wed Jun 26 09:15:46 2019 +0000

    Remove support for alternative Solaris 11.4 ld -V output
    
            Backport from mainline
            2019-06-17  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>
    
            * configure.ac (ld_vers) <*-*-solaris2*>: Remove support for
            alternative Solaris 11.4 format.
            * configure: Regenerate.
    
    From-SVN: r272676

commit 707d4310d112df0a55d0d524f9499ce22a2bc616
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Jun 26 00:16:19 2019 +0000

    Daily bump.
    
    From-SVN: r272664

commit fcb73d173bd6e57aeb87b973b93f278779341c54
Author: Claudiu Zissulescu <claziss@synopsys.com>
Date:   Tue Jun 25 13:02:21 2019 +0200

    [ARC] Backport fix PR89838
    
    gcc/
    xxxx-xx-xx  Claudiu Zissulescu  <claziss@synopsys.com>
    
            * config/arc/arc.c (arc_symbol_binds_local_p): New function.
            (arc_legitimize_pic_address): Simplify and cleanup the function.
            (SYMBOLIC_CONST): Remove.
            (prepare_pic_move): Likewise.
            (prepare_move_operands): Handle complex mov cases here.
            (arc_legitimize_address_0): Remove call to
            arc_legitimize_pic_address.
            (arc_legitimize_address): Remove call to
            arc_legitimize_tls_address.
            * config/arc/arc.md (movqi_insn): Allow Cm3 match.
            (movhi_insn): Likewise.
    
    /gcc/testsuite
    xxxx-xx-xx  Claudiu Zissulescu  <claziss@synopsys.com
    
    From-SVN: r272645

commit 47fd1a83477b235fbf07355d8298d55eee209b8d
Author: Andrew Stubbs <ams@codesourcery.com>
Date:   Tue Jun 25 09:47:15 2019 +0000

    GCN: Wait for exit value to write before exiting.
    
    2019-06-25  Andrew Stubbs  <ams@codesourcery.com>
    
            Backport from mainline
            2019-05-24  Andrew Stubbs  <ams@codesourcery.com>
    
            gcc/
            * config/gcn/gcn-run.c (main): Set a non-zero return value if the
            kernel does not exit cleanly.
            * config/gcn/gcn.md (gcn_return): Insert s_waitcnt before s_dcache_wb.
    
    From-SVN: r272642

commit 8abc773747e05f0cd63c6df47476cf901e35ca2f
Author: Andrew Stubbs <ams@codesourcery.com>
Date:   Tue Jun 25 09:47:09 2019 +0000

    Fix 64-bit addition in prologue.
    
    2019-06-25  Andrew Stubbs  <ams@codesourcery.com>
    
            Backport from mainline
            2019-05-24  Andrew Stubbs  <ams@codesourcery.com>
    
            gcc/
            * config/gcn/gcn.c (gcn_expand_prologue): Use gen_addsi3_scalar_carry
            for lo-part.
    
    From-SVN: r272641

commit 4e4024c1f12011d9d7262576f30f8b8562f746d6
Author: Richard Biener <rguenther@suse.de>
Date:   Tue Jun 25 07:30:44 2019 +0000

    re PR tree-optimization/90930 (Excessive memory consumption)
    
    2019-06-21  Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/90930
            * tree-ssa-reassoc.c (rewrite_expr_tree_parallel): Set visited
            flag on new stmts to avoid re-processing them.
    
    From-SVN: r272636

commit 322deb2391a47cfaae83a06e103a3f0cebab4e09
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Jun 25 00:16:13 2019 +0000

    Daily bump.
    
    From-SVN: r272631

commit 69490dcd9e8ef5fecff61ea51f45753e11853642
Author: Richard Biener <rguenther@suse.de>
Date:   Mon Jun 24 17:19:36 2019 +0000

    re PR tree-optimization/90930 (Excessive memory consumption)
    
    2019-06-24  Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/90930
            PR tree-optimization/90316
            * tree-ssa-alias.c (walk_non_aliased_vuses): Add missing
            decrement of limit.
    
    From-SVN: r272622

commit b25e2648b4f1d0563d2091a184aafeae566fd08a
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Jun 24 00:16:13 2019 +0000

    Daily bump.
    
    From-SVN: r272612

commit 4c3fb1973b824249c97e8b014e2b17a5fac1dd83
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Jun 23 00:16:11 2019 +0000

    Daily bump.
    
    From-SVN: r272598

commit 60f3d34d039177f8c1edbc739f0142a7a4f900c1
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Jun 22 00:16:13 2019 +0000

    Daily bump.
    
    From-SVN: r272582

commit f21857aed5c536e684626eb07df07838776e21ff
Author: Thomas Koenig <tkoenig@gcc.gnu.org>
Date:   Fri Jun 21 19:28:54 2019 +0000

    backport: re PR fortran/90937 (ICE: in gfc_get_symbol_decl, at fortran/trans-decl.c:1538)
    
    2019-06-21  Thomas Koenig  <tkoenig@gcc.gnu.org>
    
            Backport from trunk
            PR fortran/90937
            * trans-types.c (get_formal_from_actual_arglist): Get symbol from
            current namespace so it will be freed later.  If symbol is of type
            character, get an empty character length.
    
    2019-06-21  Thomas Koenig  <tkoenig@gcc.gnu.org>
    
            Backport from trunk
            PR fortran/90937
            * gfortran.dg/external_procedure_4.f90: New test.
    
    From-SVN: r272564

commit 2c1623a91136277af282415ecd8e83da959eb4bc
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Fri Jun 21 18:37:07 2019 +0100

    PR libstdc++/90920 restore previous checks for empty ranges
    
    The change in r263433 broke the contract of the __rotate functions, by no
    longer accepting empty ranges. That means that callers which inlined the
    old version of std::rotate (without checks) that end up linking to a new
    definition of std::__rotate (also without checks) could perform a divide
    by zero and crash.
    
    This restores the old contract of the __rotate overloads.
    
    Backport from mainline
    2019-06-19  Jonathan Wakely  <jwakely@redhat.com>
    
            PR libstdc++/90920 partially revert r263433
            * include/bits/stl_algo.h (__rotate): Restore checks for empty ranges.
            (rotate): Remove checks.
            * testsuite/25_algorithms/rotate/90920.cc: New test.
    
    From-SVN: r272558

commit ab7b24942d2903c73744108d38803d4950d3fb47
Author: Steven G. Kargl <kargl@gcc.gnu.org>
Date:   Fri Jun 21 00:54:28 2019 +0000

    backport: re PR fortran/90290 (-std=f2008 should reject non-constant stop and error stop codes)
    
    2019-06-20  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            Backport from mainline
            PR fortran/90290
            * match.c (gfc_match_stopcode): Check F2008 condition on stop code.
    
    2019-06-20  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            Backport from mainline
            PR fortran/90290
            * gfortran.dg/pr90290.f90: New test.
    
    From-SVN: r272541

commit 2c5e6cf9cec1ac6fca5765edcffc5b544826e76b
Author: Steven G. Kargl <kargl@gcc.gnu.org>
Date:   Fri Jun 21 00:38:13 2019 +0000

    backport: re PR fortran/90002 (ICE: free_expr0(): Bad expr type)
    
    2019-06-20  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            Backport from mainline
            PR fortran/90002
            * array.c (gfc_free_array_spec): When freeing an array-spec, avoid
            an ICE for assumed-shape coarrays
    
    2019-06-20  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            Backport from mainline
            PR fortran/90002
            * gfortran.dg/pr90002.f90: New test.
    
    From-SVN: r272540

commit da03f4f5e823b6cd1f7fd99042879ebff51dd70e
Author: Steven G. Kargl <kargl@gcc.gnu.org>
Date:   Fri Jun 21 00:24:53 2019 +0000

    backport: re PR fortran/89344 (uncaught programmer error:  polymorphic variable is INTENT(IN) but assigned to without error)
    
    2019-06-20  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            Backport from mainline
            PR fortran/89344
            * expr.c (gfc_check_vardef_context): Check for INTENT(IN) variable
            in SELECT TYPE construct.
    
    2019-06-20  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            Backport from mainline
            PR fortran/89344
            * gfortran.dg/pr89344.f90: New test.
    
    From-SVN: r272539

commit c1088e3e934a1b223cceb5969e799f900c24cf58
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Jun 21 00:16:16 2019 +0000

    Daily bump.
    
    From-SVN: r272537

commit 255aa8255836f85868a2c042162bf13d36e01004
Author: Steven G. Kargl <kargl@gcc.gnu.org>
Date:   Fri Jun 21 00:12:37 2019 +0000

    backport: re PR fortran/87907 (ICE in resolve_contained_fntype, at fortran/resolve.c:587)
    
    2019-06-20  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            Backport from mainline
            PR fortran/87907
            * resolve.c (resolve_contained_fntype): Do not dereference a NULL
            pointer.
    
    2019-06-20  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            Backport from mainline
            PR fortran/87907
            * gfortran.dg/pr87907.f90: New testcase.
    
    From-SVN: r272534

commit b17d5298f5a2a3378712baca7e80e9df3e9e8a36
Author: Steven G. Kargl <kargl@gcc.gnu.org>
Date:   Fri Jun 21 00:01:23 2019 +0000

    backport: re PR fortran/86587 (Derived-type with attributes BIND(C) and PRIVATE raises an error but standard accepts it)
    
    2019-06-20  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            Backport from mainline
            PR fortran/86587
            * symbol.c (verify_bind_c_derived_type): Remove erroneous error
            checking for BIND(C) and PRIVATE attributes.
    
    2019-06-20  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            Backport from mainline
            PR fortran/86587
            * gfortran.dg/pr86587.f90: New test.
    
    From-SVN: r272533

commit 57cdb4a67058a4d1ce1ed97c56dc5f6381706974
Author: Steven G. Kargl <kargl@gcc.gnu.org>
Date:   Thu Jun 20 23:50:54 2019 +0000

    backport: re PR fortran/77632 ([F08] Pointer initialisation does not quite work with arrays)
    
    2019-06-20  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            Backport from mainline
            PR fortran/77632
            * /decl.c (variable_decl): Mark a variable that is a target in pointer
            initialization when in PROGRAM, MODULE, or SUBMODULE scope with an
            implicit save.
    
    2019-06-20  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            Backport from mainline
            PR fortran/77632
            * gfortran.dg/pr77632_1.f90: New test.
    
    From-SVN: r272532

commit ccaf5f7bea4b0a34048119b071d9e6540cc8e683
Author: Steven G. Kargl <kargl@gcc.gnu.org>
Date:   Thu Jun 20 23:39:29 2019 +0000

    backport: re PR fortran/69499 ([F03] ICE-on-invalid on combining select type with wrong statement)
    
    2019-06-20  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            Backport from mainline
            PR fortran/69499
            * match.c (gfc_match_select_type):  SELECT TYPE is an executable
            statement, and cannot appear in MODULE or SUBMODULE scope.
    
    2019-06-20  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            Backport from mainline
            PR fortran/69499
            * gfortran.dg/pr69499.f90: New test.
            * gfortran.dg/module_error_1.f90: Update dg-error string.
    
    From-SVN: r272531

commit 3beb78027244b69fe18219d84a658220fa478194
Author: Steven G. Kargl <kargl@gcc.gnu.org>
Date:   Thu Jun 20 23:27:13 2019 +0000

    backport: re PR fortran/69398 ([OOP] ICE on class with duplicate dimension attribute specified)
    
    2019-06-20  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            Backport from mainline
            PR fortran/69398
            * decl.c (attr_decl): Check for duplicate DIMENSION attribute for a
            CLASS entity.
    
    2019-06-20  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            Backport from mainline
            PR fortran/69398
            * gfortran.dg/pr69398.f90: New test.
    
    From-SVN: r272530

commit 8cb98c28f2c59ace1ed0c4a654cecd76ca1403fc
Author: Steven G. Kargl <kargl@gcc.gnu.org>
Date:   Thu Jun 20 23:15:32 2019 +0000

    backport: re PR fortran/68544 (ICE trying to pass derived type constructor as a function)
    
    2019-06-20  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            Backport from mainline
            PR fortran/68544
            * resolve.c (is_dt_name): New function to compare symbol name against
            list of derived types.
            (resolve_actual_arglist): Use it to find wrong code.
    
    2019-06-20  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            Backport from mainline
            PR fortran/68544
            * gfortran.dg/pr68544.f90: New test.
            * gfortran.dg/pr85687.f90: Modify test for new error message.
    
    From-SVN: r272529

commit 72fbe222d48b1872a9d46aa6f677c28f375eb8ce
Author: Steven G. Kargl <kargl@gcc.gnu.org>
Date:   Thu Jun 20 22:58:56 2019 +0000

    backport: arith.c (arith_power): Rework overflow of an integer to an integer exponent.
    
    2019-06-20  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            Backport from mainline
            * arith.c (arith_power): Rework overflow of an integer to an integer
            exponent.
    
    2019-06-20  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            Backport from mainline
            * gfortran.dg/integer_exponentiation_4.f90: Update test.
            * gfortran.dg/integer_exponentiation_5.F90: Ditto.
            * gfortran.dg/no_range_check_1.f90: Ditto.
    
    From-SVN: r272528

commit 837ecfe737402897ee01fd4f9e1844f54b023d86
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Jun 20 00:16:11 2019 +0000

    Daily bump.
    
    From-SVN: r272494

commit 462bde07deb963d028bb4dc4bd88c87ab6a8a7b5
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Jun 19 00:16:35 2019 +0000

    Daily bump.
    
    From-SVN: r272463

commit 2182b5528ed415dcfe257bca40d95572bf7a8cce
Author: Harald Anlauf <anlauf@gmx.de>
Date:   Tue Jun 18 20:21:47 2019 +0000

    backport: re PR fortran/90577 (FAIL: gfortran.dg/lrshift_1.f90 with -O(2|3) and -flto)
    
    2019-06-18  Harald Anlauf  <anlauf@gmx.de>
    
            Backport from mainline
            2019-06-14  Harald Anlauf  <anlauf@gmx.de>
    
            PR fortran/90577
            PR fortran/90578
            * trans-intrinsic.c (gfc_conv_intrinsic_shift): Properly
            distinguish logical/arithmetic shifts.
            * intrinsic.texi: Update documentation for SHIFTR/SHIFTL/SHIFTA
            (Fortran 2008) and LSHIFT/RSHIFT (GNU extensions).
    
            PR fortran/90577
            PR fortran/90578
            * gfortran.dg/lrshift_1.f90: Adjust testcase.
            * gfortran.dg/shiftalr_3.f90: New testcase.
    
    From-SVN: r272437

commit a87f6259927031fe4c2dc795a145516a396de314
Author: Arnaud Charlet <charlet@adacore.com>
Date:   Tue Jun 18 11:44:58 2019 +0000

    re PR ada/80590 (non-bootstrap build failure of Ada runtime)
    
    PR ada/80590
    
            * sem_ch5.adb (Analyze_Loop_Statement): Avoid exception propagation
            during normal processing.
    
    From-SVN: r272416

commit 37bf6eb739b257d3390e440454e42ef5600edd81
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Jun 18 00:16:17 2019 +0000

    Daily bump.
    
    From-SVN: r272403

commit 4649f72c137d1ee7dec34b6ef53b8f8e7744fb9d
Author: Jeff Law <law@redhat.com>
Date:   Mon Jun 17 11:27:30 2019 -0600

    mips.c (mips_expand_builtin_insn): Swap the 1st and 3rd operands of the fmadd/fmsub/maddv builtin.
    
            * config/mips/mips.c (mips_expand_builtin_insn): Swap the 1st
            and 3rd operands of the fmadd/fmsub/maddv builtin.
    
            * gcc.target/mips/msa-fmadd.c: New.
    
    From-SVN: r272392

commit 91756c4abc175772bbfe2e0a1929dbbf6eaac3e3
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Mon Jun 17 16:03:46 2019 +0100

    PR libstdc++/90281 Fix string conversions for filesystem::path
    
    Fix several bugs in the encoding conversions for filesystem::path that
    prevent conversion of Unicode characters outside the Basic Multilingual
    Plane, and prevent returning basic_string specializations with
    alternative allocator types.
    
    The std::codecvt_utf8 class template is not suitable for UTF-16
    conversions because it uses UCS-2 instead. For conversions between UTF-8
    and UTF-16 either std::codecvt<C, char, mbstate> or
    codecvt_utf8_utf16<C> must be used.
    
    The __str_codecvt_in and __str_codecvt_out utilities do not
    return false on a partial conversion (e.g. for invalid or incomplete
    Unicode input). Add new helpers that treat partial conversions as
    errors, and use them for all filesystem::path conversions.
    
            PR libstdc++/90281 Fix string conversions for filesystem::path
            * include/bits/fs_path.h (u8path) [_GLIBCXX_FILESYSTEM_IS_WINDOWS]:
            Use codecvt_utf8_utf16 instead of codecvt_utf8. Use
            __str_codecvt_in_all to fail for partial conversions and throw on
            error.
            [!_GLIBCXX_FILESYSTEM_IS_WINDOWS && _GLIBCXX_USE_CHAR8_T]
            (path::_Cvt<char8_t>): Add explicit specialization.
            [_GLIBCXX_FILESYSTEM_IS_WINDOWS] (path::_Cvt::_S_wconvert): Remove
            overloads.
            [_GLIBCXX_FILESYSTEM_IS_WINDOWS] (path::_Cvt::_S_convert): Use
            if-constexpr instead of dispatching to _S_wconvert. Use codecvt
            instead of codecvt_utf8. Use __str_codecvt_in_all and
            __str_codecvt_out_all.
            [!_GLIBCXX_FILESYSTEM_IS_WINDOWS] (path::_Cvt::_S_convert): Use
            codecvt instead of codecvt_utf8. Use __str_codecvt_out_all.
            (path::_S_str_convert) [_GLIBCXX_FILESYSTEM_IS_WINDOWS]: Use
            codecvt_utf8_utf16 instead of codecvt_utf8. Construct return values
            with allocator. Use __str_codecvt_out_all. Fallthrough to POSIX code
            after converting to UTF-8.
            (path::_S_str_convert): Use codecvt instead of codecvt_utf8. Use
            __str_codecvt_in_all.
            (path::string): Fix initialization of string types with different
            allocators.
            (path::u8string) [_GLIBCXX_FILESYSTEM_IS_WINDOWS]: Use
            codecvt_utf8_utf16 instead of codecvt_utf8. Use __str_codecvt_out_all.
            * include/bits/locale_conv.h (__do_str_codecvt): Reorder static and
            runtime conditions.
            (__str_codecvt_out_all, __str_codecvt_in_all): New functions that
            return false for partial conversions.
            * include/experimental/bits/fs_path.h (u8path):
            [_GLIBCXX_FILESYSTEM_IS_WINDOWS]: Implement correctly for mingw.
            [_GLIBCXX_FILESYSTEM_IS_WINDOWS] (path::_Cvt::_S_wconvert): Add
            missing handling for char8_t. Use codecvt and codecvt_utf8_utf16
            instead of codecvt_utf8. Use __str_codecvt_in_all and
            __str_codecvt_out_all.
            [!_GLIBCXX_FILESYSTEM_IS_WINDOWS] (path::_Cvt::_S_convert): Use
            codecvt instead of codecvt_utf8. Use __str_codecvt_out_all.
            (path::string) [_GLIBCXX_FILESYSTEM_IS_WINDOWS]: Use
            codecvt_utf8_utf16 instead of codecvt_utf8. Construct return values
            with allocator. Use __str_codecvt_out_all and __str_codecvt_in_all.
            (path::string) [!_GLIBCXX_FILESYSTEM_IS_WINDOWS]: Use
            __str_codecvt_in_all.
            (path::u8string) [_GLIBCXX_FILESYSTEM_IS_WINDOWS]: Use
            codecvt_utf8_utf16 instead of codecvt_utf8. Use __str_codecvt_out_all.
            * src/c++17/fs_path.cc (path::_S_convert_loc): Use
            __str_codecvt_in_all.
            * src/filesystem/path.cc (path::_S_convert_loc): Likewise.
            * testsuite/27_io/filesystem/path/construct/90281.cc: New test.
            * testsuite/27_io/filesystem/path/factory/u8path.cc: New test.
            * testsuite/27_io/filesystem/path/native/string.cc: Test with empty
            strings and with Unicode characters outside the basic multilingual
            plane.
            * testsuite/27_io/filesystem/path/native/alloc.cc: New test.
            * testsuite/experimental/filesystem/path/construct/90281.cc: New test.
            * testsuite/experimental/filesystem/path/factory/u8path.cc: New test.
            * testsuite/experimental/filesystem/path/native/alloc.cc: New test.
            * testsuite/experimental/filesystem/path/native/string.cc: Test with
            empty strings and with Unicode characters outside the basic
            multilingual plane.
    
    From-SVN: r272389

commit ab4fb49500429ff2f0222c8bbd2d78f99e53087a
Author: Arnaud Charlet <charlet@adacore.com>
Date:   Mon Jun 17 07:35:02 2019 +0000

    re PR ada/80590 (non-bootstrap build failure of Ada runtime)
    
    PR ada/80590
    
            * exp_ch9.adb (Expand_N_Delay_Relative_Statement): Swap the two
            conditions to avoid a unnecessary exception propagation in the default
            case.
    
    From-SVN: r272374

commit efca85c1c573697f3077a56aacf68d68c88d8f50
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Jun 17 00:16:20 2019 +0000

    Daily bump.
    
    From-SVN: r272369

commit 28d9dbf10fbfdb1cd4143ceb4765d712f47dc4d8
Author: John David Anglin <danglin@gcc.gnu.org>
Date:   Sun Jun 16 21:44:08 2019 +0000

    re PR middle-end/64242 (Longjmp expansion incorrect)
    
            PR middle-end/64242
            * config/pa/pa.md (nonlocal_goto): Restore frame pointer last.  Add
            frame clobbers and schedule block.
            (builtin_longjmp): Likewise.
    
    From-SVN: r272362

commit 114d9136c958dcfd8426abe48ecf9fcf98af7811
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Jun 16 00:16:12 2019 +0000

    Daily bump.
    
    From-SVN: r272336

commit 8f6602c6ca8f2b4d5f6c7b060f2ae27fa5a0610e
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Jun 15 00:16:13 2019 +0000

    Daily bump.
    
    From-SVN: r272317

commit 661fbea42f3614792f76c3f996d38e64d7e035d4
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Fri Jun 14 19:11:30 2019 +0100

    Reduce code instantiated by filesystem::path::_S_convert_loc
    
    Jakub noted in https://gcc.gnu.org/ml/libstdc++/2019-04/msg00140.html
    that an unwanted std::wstring::_M_replace_dispatch symbol has started to
    be exported from the Fedora shared library. This symbol is triggered by
    the instantiation of std::wstring::assign(const char*, const char*) from
    std::__str_codecvt_in which is called from path::_S_convert_loc. The
    branch that triggers that instantiation can't actually happen in that
    case, because codecvt facets will only return noconv when the input and
    output types are the same. Guarding the assign call with an if-constexpr
    check that the types are the same avoids instantiating template
    specializations that will never actually be needed.
    
    Backport from mainline
    2019-04-26  Jonathan Wakely  <jwakely@redhat.com>
    
            * config/abi/pre/gnu.ver (GLIBCXX_3.4): Replace wildcard that matches
            wstring::_M_replace_dispatch with more specific patterns.
            * include/bits/fs_path.h (path::_S_convert_loc<_InputIterator>):
            Create const std::string to avoid redundant call to _S_convert_loc
            with non-const pointers.
            * include/bits/locale_conv.h (__do_str_codecvt): Use if-constexpr to
            avoid unnecessary basic_string::assign instantiations.
    
    From-SVN: r272306

commit 16af62ebdbf7aa31b53a21d51a12cbc0a6a30402
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Fri Jun 14 19:11:26 2019 +0100

    Remove redundant step in experimental::filesystem::path construction
    
    Backport from mainline
    2019-04-26  Jonathan Wakely  <jwakely@redhat.com>
    
            * include/experimental/bits/fs_path.h
            (path::_S_convert_loc<_InputIterator>): Create const std::string to
            avoid redundant call to _S_convert_loc with non-const pointers.
    
    From-SVN: r272305

commit e49b75413aaad8680cb4a14b0e242ffc1f2f0deb
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Fri Jun 14 19:11:22 2019 +0100

    PR libstdc++/88881 fix filesystem::symlink_status for Windows
    
    The fix for PR 88881 only added a workaround to filesystem::status, but
    filesystem::symlink_status is also affected by the _wstat bug and needs
    the same workaround.
    
    The recent change to optimize path::parent_path() means that the
    workaround can be simplified to just use parent_path().
    
    Backport from mainline
    2019-05-29  Jonathan Wakely  <jwakely@redhat.com>
    
            PR libstdc++/88881
            * src/c++17/fs_ops.cc [_GLIBCXX_FILESYSTEM_IS_WINDOWS]
            (status(const path&, error_code&)): Use parent_path() to remove
            trailing slash.
            (symlink_status(const path&, error_code&)): Duplicate workaround for
            bug in _wstat for paths with trailing slash.
            * testsuite/27_io/filesystem/operations/remove_all.cc: Check path
            with trailing slash.
            * testsuite/27_io/filesystem/operations/status.cc: Likewise.
            * testsuite/27_io/filesystem/operations/symlink_status.cc: Likewise.
    
    From-SVN: r272304

commit 873557820764285a4b8da2d86333c26913449740
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Fri Jun 14 19:11:17 2019 +0100

    Optimize filesystem::path::parent_path()
    
    Parsing a complete string is more efficient than appending each
    component one-by-one.
    
    Backport from mainline
    2019-05-29  Jonathan Wakely  <jwakely@redhat.com>
    
            * src/c++17/fs_path.cc (path::parent_path()): Create whole path at
            once instead of building it iteratively.
    
    From-SVN: r272303

commit 16eb07fd34e08a0dcef125470ad860e9021f8155
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Fri Jun 14 19:11:13 2019 +0100

    Fix incorrect DR numbers in libstdc++ manual
    
    Backport from mainline
    2019-05-07  Jonathan Wakely  <jwakely@redhat.com>
    
            * doc/xml/manual/intro.xml: Fix DR 2537 and DR 2566 confusion.
    
    From-SVN: r272302

commit 3061315a40b4bfa9a8683fbf71f433601a856d14
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Fri Jun 14 19:11:09 2019 +0100

    Add __cpp_lib_bind_front macro to <version> header
    
    Backport from mainline
    2019-06-14  Jonathan Wakely  <jwakely@redhat.com>
    
            * include/std/version (__cpp_lib_bind_front): Add missing macro.
    
    From-SVN: r272301

commit 45df071ace69b06fbb8dd047a001e16f63338320
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Fri Jun 14 19:11:02 2019 +0100

    Fix incorrect __cpp_lib_parallel_algorithm macro definitions
    
    Backport from mainline
    2019-06-12  Jonathan Wakely  <jwakely@redhat.com>
    
            * include/std/algorithm (__cpp_lib_parallel_algorithm): Fix value.
            * include/std/memory (__cpp_lib_parallel_algorithm): Likewise.
            * include/std/numeric (__cpp_lib_parallel_algorithm): Likewise.
            * testsuite/25_algorithms/pstl/feature_test.cc: New test.
    
    From-SVN: r272300

commit aaadd96e7134175ac6a19236d94c63cbe6e1363a
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Fri Jun 14 19:10:57 2019 +0100

    PR libstdc++/90770 fix missing src/debug/Makefile
    
    Backport from mainline
    2019-06-07  Jonathan Wakely  <jwakely@redhat.com>
    
            PR libstdc++/90770
            * src/Makefile.am (stamp-debug): Also test for missing makefile.
            * src/Makefile.in: Regenerate.
    
    From-SVN: r272299

commit 11441586ef812e0cdcd535e19f9953ba30ccbf4a
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Fri Jun 14 19:10:52 2019 +0100

    PR libstdc++/90252 Check TBB version and ability to link with -ltbb
    
    Backport from mainline
    2019-05-21  Jonathan Wakely  <jwakely@redhat.com>
    
            PR libstdc++/90252
            * testsuite/lib/libstdc++.exp (check_effective_target_tbb-backend):
            Use "additional_flags" to pass -ltbb to v3_target_compile command.
            Use check_v3_target_prop_cached to cache the result of the test.
    
    Backport from mainline
    2019-05-20  Thomas Rodgers  <trodgers@redhat.com>
    
            PR libstdc++/90252
            * testsuite/lib/libstdc++.exp (check_effective_target_tbb-backend):
            Changed v3_target_compile check from preprocess to executable.
            Added "-ltbb" to v3_target_compile flags.
    
    Backport from mainline
    2019-05-20  Thomas Rodgers  <trodgers@redhat.com>
    
            * testsuite/lib/libstdc++.exp (check_effective_target_tbb-backend):
            Add check for Thread Building Blocks 2018 or later.
    
    From-SVN: r272298

commit 01980fa6780b14908d7327e6cc4333fc6b42a021
Author: Jonathan Wakely <redi@gcc.gnu.org>
Date:   Fri Jun 14 16:40:24 2019 +0100

    Use tabs to indent in ChangeLog
    
    From-SVN: r272293

commit cb771a7783c486572ccfe79b49044db92d979056
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Fri Jun 14 16:39:51 2019 +0100

    Fix names of _Lock_policy constants in libstdc++ manual
    
    Backport from mainline
    2019-05-21  Jonathan Wakely  <jwakely@redhat.com>
    
            * doc/xml/manual/shared_ptr.xml: Fix names of lock policy constants.
    
    From-SVN: r272292

commit 60a0e54adf24bcbdf2c44376be6f7f0ff7a59c91
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Jun 14 00:16:13 2019 +0000

    Daily bump.
    
    From-SVN: r272279

commit bc447852db978e3caaa94b290058b1424087d553
Author: Marek Polacek <polacek@redhat.com>
Date:   Thu Jun 13 00:56:54 2019 +0000

    PR c++/90825 - endless recursion when evaluating sizeof.
    
            PR c++/90832 - endless recursion when evaluating sizeof.
            * constexpr.c (cxx_eval_constant_expression): Don't recurse on the
            result of fold_sizeof_expr if is returns a SIZEOF_EXPR.
            * typeck.c (cxx_sizeof_expr): Only return a SIZEOF_EXPR if the operand
            is instantiation-dependent.
    
            * g++.dg/cpp0x/constexpr-sizeof2.C: New test.
            * g++.dg/cpp0x/constexpr-sizeof3.C: New test.
    
    From-SVN: r272229

commit 68fcb6c48c0d9162cdecf156ebe39a55f4ac8bfd
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Jun 13 00:16:12 2019 +0000

    Daily bump.
    
    From-SVN: r272227

commit cac965a90839a00be784adb67471a7aaadab3ff9
Author: Marek Polacek <polacek@redhat.com>
Date:   Wed Jun 12 21:12:00 2019 +0000

    PR c++/90736 - bogus error with alignof.
    
            * constexpr.c (adjust_temp_type): Use cv_unqualified type.
    
            * g++.dg/cpp0x/alignof5.C: New test.
    
    From-SVN: r272219

commit 0a643240ef7585b2517f377ccbfc18b9dfa9de25
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Jun 12 00:16:11 2019 +0000

    Daily bump.
    
    From-SVN: r272176

commit 37227150d2cce355321ebceeaca8e38dcf1de137
Author: Thomas Koenig <tkoenig@gcc.gnu.org>
Date:   Tue Jun 11 22:04:10 2019 +0000

    backport: re PR fortran/90744 (Bogus length for character temporaries passed to external procedures since r268992)
    
    2019-06-11  Thomas Koenig  <tkoenig@gcc.gnu.org>
            Tomáš Trnka  <trnka@scm.com>
    
            Backport from trunk
            PR fortran/90744
            * trans-types.c (get_formal_from_actual_arglist): Unset typespec
            flags which make no sense for procedures without explicit
            interface.
    
    2019-06-11  Thomas Koenig  <tkoenig@gcc.gnu.org>
            Tomáš Trnka  <trnka@scm.com>
    
            Backport from trunk
            PR fortran/90744
            * gfortran.dg/deferred_character_33.f90: New test.
            * gfortran.dg/deferred_character_33a.f90: New test.
    
    
    Co-Authored-By: Tomáš Trnka <trnka@scm.com>
    
    From-SVN: r272173

commit bb0e2d2799a9be0ef447df2abd788a40fdde6d3a
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Jun 11 18:43:09 2019 +0200

    re PR target/90811 ([nvptx] ptxas error on OpenMP offloaded code)
    
            PR target/90811
            * config/nvptx/nvptx.c (nvptx_output_softstack_switch): Use and.b%d
            instead of and.u%d.
    
            * testsuite/libgomp.c/pr90811.c: New test.
    
    From-SVN: r272162

commit dfb5c204a76ab7154b3f9b998f3a3e662960f64d
Author: Edward Smith-Rowland <3dw4rd@verizon.net>
Date:   Tue Jun 11 16:36:21 2019 +0000

    Fix ConstexprIterator requirements tests - No constexpr algorithms!
    
    2019-06-11  Edward Smith-Rowland  <3dw4rd@verizon.net>
    
            Fix ConstexprIterator requirements tests - No constexpr algorithms!
            * testsuite/21_strings/basic_string_view/requirements/constexpr_iter.cc:
            Replace copy with hand-rolled loop.
            * testsuite/23_containers/array/requirements/constexpr_iter.cc:
            Ditto.
    
    From-SVN: r272160

commit a80c35cf561873c3822331a209e34ff96b354605
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Jun 11 15:08:47 2019 +0200

    re PR c++/90810 (Different intrinsics behavior on G++ 7.4 and G++ 8.3)
    
            PR c++/90810
            * init.c (constant_value_1): Handle VECTOR_CST DECL_INITIAL for
            !DECL_INITIALIZED_BY_CONSTANT_EXPRESSION_P decls like CONSTRUCTOR.
    
            * g++.dg/ext/vector37.C: New test.
    
    From-SVN: r272154

commit 9086af45312a85d99ef6c175f011bf2ffe4ded6f
Author: Richard Biener <rguenther@suse.de>
Date:   Tue Jun 11 08:31:09 2019 +0000

    toir.cc (pop_label): Only queue labels in a vector.
    
    2019-06-11  Richard Biener  <rguenthe@suse.de>
    
            d/90778
            * toir.cc (pop_label): Only queue labels in a vector.
            (cmp_labels): Label decl comparator.
            (pop_binding_level): Pop labels in DECL_UID order to avoid
            debug info differences.
    
    From-SVN: r272147

commit b18225a6a8dc37413dcd0003d9f91797a4e54cfc
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Jun 11 00:16:13 2019 +0000

    Daily bump.
    
    From-SVN: r272140

commit a671e8cb8cfc339f8a6d47f6e9ac789eafb49287
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Jun 10 00:16:18 2019 +0000

    Daily bump.
    
    From-SVN: r272101

commit 2f5b1cf10ac3b77f41ac2b179bb5f2d2385ff1bb
Author: Edward Smith-Rowland <emsr@gcc.gnu.org>
Date:   Sun Jun 9 21:43:55 2019 +0000

    Test for C++20 p0858 - ConstexprIterator requirements.
    
    2019-06-09  Edward Smith-Rowland  <3dw4rd@verizon.net>
    
            Test for C++20 p0858 - ConstexprIterator requirements.
            * testsuite/21_strings/basic_string_view/requirements/constexpr_iter.cc:
            New test.
            * testsuite/23_containers/array/requirements/constexpr_iter.cc:
            New test.
    
    From-SVN: r272097

commit c50403680a3086b22effbbca9a94c8e1d2141d15
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Jun 9 00:16:15 2019 +0000

    Daily bump.
    
    From-SVN: r272088

commit 0f04bb981de10a56306c6d5dce02e8a4097439ba
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Jun 8 00:16:15 2019 +0000

    Daily bump.
    
    From-SVN: r272066

commit d101a3765ae7162cfd107b74b275d63e52143d89
Author: John David Anglin <danglin@gcc.gnu.org>
Date:   Fri Jun 7 23:22:15 2019 +0000

    scanasm.exp (dg-function-on-line): Add pattern for hppa*-*-linux*.
    
            * lib/scanasm.exp (dg-function-on-line): Add pattern for hppa*-*-linux*.
    
    From-SVN: r272062

commit 610ce528d794d89d6afb5ff8929694f091ade00e
Author: John David Anglin <danglin@gcc.gnu.org>
Date:   Fri Jun 7 23:20:44 2019 +0000

    re PR target/90751 (-fpatchtable-function-entry  broken on hppa-linux-gnu-gcc/hppa64-linux-gnu-gcc)
    
            PR target/90751
            * config/pa/pa-linux.h (ASM_DECLARE_FUNCTION_NAME): Update comment.
            Call pa_output_function_label.
            (TARGET_ASM_FUNCTION_PROLOGUE): define.
            * config/pa/pa-protos.h (pa_output_function_label): Declare.
            * config/pa/pa.c (pa_output_function_prologue): Add ATTRIBUTE_UNUSED
            to declaration.
            (pa_linux_output_function_prologue): Declare.
            (TARGET_ASM_FUNCTION_PROLOGUE): Delete define.
            (pa_output_function_label): New.
            (pa_output_function_prologue): Revise to use pa_output_function_label.
            (pa_linux_output_function_prologue): New.
            * config/pa/pa.h (TARGET_ASM_FUNCTION_PROLOGUE): Define.
    
    From-SVN: r272061

commit a24e8db469b7ced2a5001dd7e7efb7edfe9f1d98
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Jun 7 00:16:15 2019 +0000

    Daily bump.
    
    From-SVN: r272026

commit ee78955ad971ebdf1db8bd7376f3d203638d0f53
Author: Joseph Myers <joseph@codesourcery.com>
Date:   Fri Jun 7 00:15:26 2019 +0100

    * sv.po: Update.
    
    From-SVN: r272020

commit 6ea3780cabf07978f19aab01ed11d105bf3fdcb4
Author: Richard Biener <rguenther@suse.de>
Date:   Thu Jun 6 11:06:45 2019 +0000

    Backport PRs 90328, 90402, 90450, 90474
    
    2019-06-06  Richard Biener  <rguenther@suse.de>
    
            Backport from mainline
            2019-05-22  Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/90450
            * tree-ssa-loop-im.c (struct im_mem_ref): Add ref_decomposed.
            (mem_ref_hasher::equal): Check it.
            (mem_ref_alloc): Initialize it.
            (gather_mem_refs_stmt): Set it.
    
            2019-05-15  Richard Biener  <rguenther@suse.de>
    
            PR c/90474
            * c-common.c (c_common_mark_addressable_vec): Also mark
            a COMPOUND_LITERAL_EXPR_DECL addressable similar to
            c_mark_addressable.
    
            2019-05-13  Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/90402
            * tree-if-conv.c (tree_if_conversion): Value number only
            the loop body by making the latch an exit of the region
            as well.
            * tree-ssa-sccvn.c (process_bb): Add flag whether to skip
            processing PHIs.
            (do_rpo_vn): Deal with multiple edges into the entry block
            that are not backedges inside the region by skipping PHIs
            of the entry block.
    
            * gcc.dg/torture/pr90402-1.c: New testcase.
    
            2019-05-06  Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/90328
            * tree-data-ref.h (dr_may_alias_p): Pass in the actual loop nest.
            * tree-data-ref.c (dr_may_alias_p): Check whether the clique
            is valid in the loop nest before using it.
            (initialize_data_dependence_relation): Adjust.
            * graphite-scop-detection.c (build_alias_set): Pass the SCOP enclosing
            loop as loop-nest to dr_may_alias_p.
    
            * gcc.dg/torture/pr90328.c: New testcase.
    
    From-SVN: r271995

commit 178bc110092a32b3411b5b1b03dc58ff2a8cb2ac
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Jun 6 00:16:14 2019 +0000

    Daily bump.
    
    From-SVN: r271981

commit 00acb8f17e46140a8c8f9aa9b4c2ea0224f00369
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Wed Jun 5 14:21:37 2019 +0000

    fold-const.c (extract_muldiv_1): Do not distribute a multiplication by a power-of-two value.
    
            * fold-const.c (extract_muldiv_1) <PLUS_EXPR>: Do not distribute a
            multiplication by a power-of-two value.
            (fold_plusminus_mult_expr): Use pow2p_hwi to spot a power-of-two value
            and turn the modulo operation into a masking operation.
    
    From-SVN: r271964

commit 2cb7bee247bc6ae4fd1541f2848d76998acc2c58
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Wed Jun 5 14:22:22 2019 +0200

    re PR debug/90733 (ICE in simplify_subreg, at simplify-rtx.c:6440)
    
            PR debug/90733
            * var-tracking.c (vt_expand_loc_callback): Don't create raw subregs
            with VOIDmode inner operands.
    
            * gcc.dg/pr90733.c: New test.
    
    From-SVN: r271960

commit 804b831eab29730059cf8221f9c802c35722e2f0
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Wed Jun 5 14:21:27 2019 +0200

    backport: re PR c++/90598 (Return type of explicit destructor call wrong)
    
            Backported from mainline
            2019-05-29  Jakub Jelinek  <jakub@redhat.com>
    
            PR c++/90598
            * tree.c (lvalue_kind): Return clk_none for expressions with
            with VOID_TYPE_P.
    
            * g++.dg/cpp0x/pr90598.C: New test.
    
            2019-05-02  Jonathan Wakely  <jwakely@redhat.com>
    
            * testsuite/experimental/propagate_const/requirements2.cc: Adjust
            dg-error.
    
    From-SVN: r271959

commit 371a0cba5e1c7f4f1b9e0ab74948af21662d0057
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Wed Jun 5 14:19:00 2019 +0200

    backport: re PR libgomp/90641 (libgomp.c-c++-common/lastprivate-conditional-1.c etc FAIL)
    
            Backported from mainline
            2019-05-27  Jakub Jelinek  <jakub@redhat.com>
    
            PR libgomp/90641
            * work.c (gomp_init_work_share): Instead of aligning final ordered
            value to multiples of long long alignment, align to that the
            first part (ordered team ids) and if inline_ordered_team_ids
            is not on a long long alignment boundary within the structure,
            use __alignof__ (long long) - 1 pad size always.
            * loop.c (GOMP_loop_start): Fix *mem computation if
            inline_ordered_team_ids is not aligned on long long alignment boundary
            within the structure.
            * loop-ull.c (GOMP_loop_ull_start): Likewise.
            * sections.c (GOMP_sections2_start): Likewise.
    
    From-SVN: r271958

commit aaaa6abfeb4076124f1078542f2acc973a34fdee
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Wed Jun 5 14:18:23 2019 +0200

    backport: re PR libgomp/90585 (libgomp hsa plugin ftbfs in the x32 multilib variant)
    
            Backported from mainline
            2019-05-24  Jakub Jelinek  <jakub@redhat.com>
    
            PR libgomp/90585
            * plugin/plugin-hsa.c (print_kernel_dispatch, run_kernel): Use PRIu64
            macro instead of "lu".
            (release_kernel_dispatch): Likewise.  Cast shadow->debug to uintptr_t
            before casting to void *.
    
    From-SVN: r271957

commit 1afda327dfa94af928c599f5330669f52e473af4
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Wed Jun 5 08:27:37 2019 +0000

    backport documentation for target supports (mfentry availability).
    
    This was missed with the backport of the mfentry changes for
    Darwin, and documents the target-supports addition only. (NFC).
    
    Corrected ChangeLog
    
    gcc/
    
    2019-06-05  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-05-23  Iain Sandoe  <iain@sandoe.co.uk>
            * doc/sourcebuild.texi: Document mfentry target support.
    
    From-SVN: r271951

commit e8281ff16dacfa74e185cdd91dca1147334118db
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Jun 5 00:16:16 2019 +0000

    Daily bump.
    
    From-SVN: r271943

commit 78f67f622ef614f1e70de06c9415c11fdaaa0367
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Jun 4 00:16:13 2019 +0000

    Daily bump.
    
    From-SVN: r271898

commit f390c64fac55814e139e4a546c23a0fd44856d5d
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Mon Jun 3 23:31:45 2019 +0100

    PR libstdc++/90700 Fix constructor constraint for std::tuple
    
            * include/std/tuple
            (tuple(allocator_arg_t, const A&, const tuple<UTypes...>&)): Fix
            value category of template argument to _TC::_NonNestedTuple.
            * testsuite/20_util/tuple/cons/90700.cc: New test.
    
    From-SVN: r271887

commit b88c76903ad90caf43f51ebf4998e5f08a3bd77f
Author: Joseph Myers <joseph@codesourcery.com>
Date:   Mon Jun 3 23:22:06 2019 +0100

    * sv.po: Update.
    
    From-SVN: r271886

commit d9122e26d04ebdb48f9fa75ab8a52a690812f0a8
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Mon Jun 3 15:05:50 2019 +0100

    PR libstdc++/90686 update C++2a library status docs
    
            PR libstdc++/90686
            * doc/xml/manual/status_cxx2014.xml: Document what's missing from
            <experimental/memory_resource>.
            * doc/xml/manual/status_cxx2020.xml: Document status of P0777R1,
            P0339R6, P0340R3, P1164R1 and P1357R1.
            * doc/html/*: Regenerate.
    
    From-SVN: r271872

commit 2a4405e3ba37ce0f0c8c479235ecbd87649f93fa
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Mon Jun 3 15:05:46 2019 +0100

    Implement missing piece of P0777R1 for std::make_from_tuple
    
            * include/std/tuple (make_from_tuple): Use remove_reference_t instead
            of decay_t (P0777R1).
    
    From-SVN: r271871

commit 72481bc92624dc5623b55fae8f6d9d8520c01b3f
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Jun 3 00:16:14 2019 +0000

    Daily bump.
    
    From-SVN: r271851

commit d642d046fed47fe1c5991f800a4bf57b9e857542
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Jun 2 00:16:18 2019 +0000

    Daily bump.
    
    From-SVN: r271842

commit d7778634e86f713a0a324bfa658c94393716bbad
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Jun 1 00:16:13 2019 +0000

    Daily bump.
    
    From-SVN: r271831

commit 1ed080148c8571a6009e0d2f31cae044197d7169
Author: Joseph Myers <joseph@codesourcery.com>
Date:   Fri May 31 01:32:01 2019 +0100

    * fi.po, sv.po: Update.
    
    From-SVN: r271797

commit 446db06fc36fd64845ce26a18dc8c988e2164b3d
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri May 31 00:16:12 2019 +0000

    Daily bump.
    
    From-SVN: r271794

commit 2fda457ca1d0b3b7982eb2d720e36f2cbed7e7a8
Author: Marek Polacek <polacek@redhat.com>
Date:   Thu May 30 12:19:40 2019 +0000

    * lang.opt (ftail-call-workaround): Fix a typo.
    
    From-SVN: r271778

commit 284da72604a05eb08437fd3c4911800a5b37a606
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Thu May 30 11:34:44 2019 +0100

    Backport libstdc++ documentation updates from mainline
    
            * doc/xml/manual/status_cxx2017.xml: Fix typo in documentation of
            implementation-defined support for [fs.conform.9945].
            * doc/xml/manual/status_cxx2020.xml: Add feature-test macro for
            P0811R3. Change status of P1353R0.
            * doc/html/*: Regenerate.
    
    From-SVN: r271775

commit 396d2098ee17b6abc571914f4c52681e33fbb50c
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu May 30 11:34:26 2019 +0200

    tree-predcom.c (is_inv_store_elimination_chain): Fix a typo - lenght to length.
    
            * tree-predcom.c (is_inv_store_elimination_chain): Fix a typo - lenght
            to length.
    
            * lang.opt (ftail-call-workaround=): Fix a typo - lenghts to lengths.
    
    From-SVN: r271771

commit f5f9cea6677c1ad234230066787c4f64b60d7f4f
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Thu May 30 08:06:38 2019 +0000

    Darwin, x86 - backport fix for mfentry test fails.
    
    This will fix the cases by UNSUPPORTING for any target that cannot
    support mfentry (including Linux -fpic -m32).
    
    gcc/
    
    2019-05-30  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-05-23  Iain Sandoe  <iain@sandoe.co.uk>
    
            * config/i386/darwin.h: Reject -mfentry*.
            * doc/sourcebuild.texi: Document mfentry target support.
    
    gcc/testsuite/
    
    2019-05-30  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-05-23  Iain Sandoe  <iain@sandoe.co.uk>
    
           * lib/target-supports.exp (check_effective_target_mfentry): New.
           * gcc.target/i386/fentry-override.c: Require effective target mfentry.
           * gcc.target/i386/fentry.c: Likewise
           * gcc.target/i386/fentryname1.c: Likewise
           * gcc.target/i386/fentryname2.c: Likewise
           * gcc.target/i386/fentryname3.c: Likewise
           * gcc.target/i386/nop-mcount.c: Likewise
           * gcc.target/i386/pr82699-2.c: Likewise
           * gcc.target/i386/pr82699-4.c: Likewise
           * gcc.target/i386/pr82699-5.c: Likewise
           * gcc.target/i386/pr82699-6.c: Likewise
           * gcc.target/i386/returninst1.c: Likewise
           * gcc.target/i386/returninst2.c: Likewise
           * gcc.target/i386/returninst3.c : Likewise
    
    From-SVN: r271767

commit 6fbba0c7ce093dac744a30f7cd549e122009c135
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Thu May 30 08:00:45 2019 +0000

    Darwin, backport fix for PR82920 part3 (other CET test fixes).
    
    gcc/testsuite/
    
    2019-05-30  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-05-15  Iain Sandoe  <iain@sandoe.co.uk>
    
            PR target/82920
            * g++.dg/cet-notrack-1.C: Adjust scan assembler for Darwin.
            * gcc.target/i386/cet-notrack-5a.c: Likewise.
            * gcc.target/i386/cet-notrack-5b.c: Likewise.
            * gcc.target/i386/cet-notrack-6b.c: Likewise.
            * gcc.target/i386/cet-notrack-icf-1.c: Likewise.
            * gcc.target/i386/cet-notrack-icf-2.c: Likewise.
            * gcc.target/i386/cet-notrack-icf-3.c: Likewise.
            * gcc.target/i386/cet-notrack-icf-4.c: Likewise.
            * gcc.target/i386/cet-sjlj-3.c: Likewise.
            * gcc.target/i386/cet-sjlj-5.c: Likewise.
    
    From-SVN: r271766

commit 914ded4e816178372eca1a8ca5b5abe01c399aba
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Thu May 30 07:56:10 2019 +0000

    Darwin, backport fix for PR82920 part2 (mx32 is not supported)
    
    gcc/
    
    2019-05-30  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-05-12  Iain Sandoe  <iain@sandoe.co.uk>
    
            PR target/82920
            * config/i386/darwin.h (CC1_SPEC): Report -mx32 as an error for
            Darwin.
    
    gcc/testsuite/
    
    2019-05-30  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-05-14  Iain Sandoe  <iain@sandoe.co.uk>
    
            PR target/82920
            * gcc.target/i386/cet-sjlj-6b.c: Require effective target x32.
            * gcc.target/i386/pr52146.c: Likewise.
            * gcc.target/i386/pr52698.c: Likewise.
            * gcc.target/i386/pr52857-1.c: Likewise.
            * gcc.target/i386/pr52857-2.c: Likewise.
            * gcc.target/i386/pr52876.c: Likewise.
            * gcc.target/i386/pr53698.c: Likewise.
            * gcc.target/i386/pr54157.c: Likewise.
            * gcc.target/i386/pr55049-1.c: Likewise.
            * gcc.target/i386/pr55093.c: Likewise.
            * gcc.target/i386/pr55116-1.c: Likewise.
            * gcc.target/i386/pr55116-2.c: Likewise.
            * gcc.target/i386/pr55597.c: Likewise.
            * gcc.target/i386/pr59929.c: Likewise.
            * gcc.target/i386/pr66470.c: Likewise.
    
    From-SVN: r271765

commit 9b86c15f6258c55ce7ddb53b9d9eb820d97e5332
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Thu May 30 07:51:32 2019 +0000

    Darwin, backport fix for pr82920 (part1, code)
    
    gcc/
    
    2019-05-30  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-05-12  Iain Sandoe  <iain@sandoe.co.uk>
    
            PR target/82920
            * config/i386/i386.c (ix86_output_jmp_thunk_or_indirect): New.
            (ix86_output_indirect_branch_via_reg): Use output mechanism
            accounting for __USER_LABEL_PREFIX__.
            (ix86_output_indirect_branch_via_push): Likewise.
            (ix86_output_function_return): Likewise.
            (ix86_output_indirect_function_return): Likewise.
    
    gcc/testsuite/
    
    2019-05-30  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-05-12  Iain Sandoe  <iain@sandoe.co.uk>
                Dominique d'Humieres  <dominiq@gcc.gnu.org>
    
            PR target/82920
            * gcc.target/i386/indirect-thunk-1.c: Adjust scan-asms for Darwin,
            do not use -fno-pic on Darwin.
            * gcc.target/i386/indirect-thunk-2.c: Likewise.
            * gcc.target/i386/indirect-thunk-3.c: Likewise.
            * gcc.target/i386/indirect-thunk-4.c: Likewise.
            * gcc.target/i386/indirect-thunk-7.c: Likewise.
            * gcc.target/i386/indirect-thunk-attr-1.c: Likewise.
            * gcc.target/i386/indirect-thunk-attr-2.c: Likewise.
            * gcc.target/i386/indirect-thunk-attr-3.c: Likewise.
            * gcc.target/i386/indirect-thunk-attr-4.c: Likewise.
            * gcc.target/i386/indirect-thunk-attr-5.c: Likewise.
            * gcc.target/i386/indirect-thunk-attr-6.c: Likewise.
            * gcc.target/i386/indirect-thunk-attr-7.c: Likewise.
            * gcc.target/i386/indirect-thunk-attr-8.c: Likewise.
            * gcc.target/i386/indirect-thunk-extern-1.c: Likewise.
            * gcc.target/i386/indirect-thunk-extern-2.c: Likewise.
            * gcc.target/i386/indirect-thunk-extern-3.c: Likewise.
            * gcc.target/i386/indirect-thunk-extern-4.c: Likewise.
            * gcc.target/i386/indirect-thunk-extern-7.c: Likewise.
            * gcc.target/i386/indirect-thunk-inline-1.c: Likewise.
            * gcc.target/i386/indirect-thunk-inline-2.c: Likewise.
            * gcc.target/i386/indirect-thunk-inline-3.c: Likewise.
            * gcc.target/i386/indirect-thunk-inline-4.c: Likewise.
            * gcc.target/i386/indirect-thunk-inline-7.c: Likewise.
            * gcc.target/i386/indirect-thunk-register-1.c: Likewise.
            * gcc.target/i386/indirect-thunk-register-2.c: Likewise.
            * gcc.target/i386/indirect-thunk-register-3.c: Likewise.
            * gcc.target/i386/indirect-thunk-register-4.c: Likewise.
            * gcc.target/i386/ret-thunk-1.c: Likewise.
            * gcc.target/i386/ret-thunk-10.c: Likewise.
            * gcc.target/i386/ret-thunk-11.c: Likewise.
            * gcc.target/i386/ret-thunk-12.c: Likewise.
            * gcc.target/i386/ret-thunk-13.c: Likewise.
            * gcc.target/i386/ret-thunk-14.c: Likewise.
            * gcc.target/i386/ret-thunk-15.c: Likewise.
            * gcc.target/i386/ret-thunk-16.c: Likewise.
            * gcc.target/i386/ret-thunk-2.c: Likewise.
            * gcc.target/i386/ret-thunk-22.c: Likewise.
            * gcc.target/i386/ret-thunk-23.c: Likewise.
            * gcc.target/i386/ret-thunk-24.c: Likewise.
            * gcc.target/i386/ret-thunk-3.c: Likewise.
            * gcc.target/i386/ret-thunk-4.c: Likewise.
            * gcc.target/i386/ret-thunk-5.c: Likewise.
            * gcc.target/i386/ret-thunk-6.c: Likewise.
            * gcc.target/i386/ret-thunk-7.c: Likewise.
            * gcc.target/i386/ret-thunk-8.c: Likewise.
            * gcc.target/i386/ret-thunk-9.c: Likewise.
    
    From-SVN: r271764

commit 931fdc2d70293d378eaf9b6e1a20fa2bf53bfa7f
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu May 30 00:16:13 2019 +0000

    Daily bump.
    
    From-SVN: r271759

commit ba335143403d966874074dd7ddb6003c1969b3c4
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Wed May 29 17:55:12 2019 +0200

    re PR fortran/90329 (Incompatibility between gfortran and C lapack calls)
    
            PR fortran/90329
            * lto-streamer.h (LTO_minor_version): Bump to 1.
    
            Backported from mainline
            2019-05-29  Jakub Jelinek  <jakub@redhat.com>
    
            PR fortran/90329
            * lang.opt (fbroken-callers): Remove.
            (ftail-call-workaround, ftail-call-workaround=): New options.
            * gfortran.h (struct gfc_namespace): Add implicit_interface_calls.
            * interface.c (gfc_procedure_use): Set implicit_interface_calls
            for calls to implicit interface procedures.
            * trans-decl.c (create_function_arglist): Use flag_tail_call_workaround
            instead of flag_broken_callers.  If it is not 2, also require
            sym->ns->implicit_interface_calls.
            * invoke.texi (fbroken-callers): Remove documentation.
            (ftail-call-workaround, ftail-call-workaround=): Document.
    
            2019-05-19  Thomas Koenig  <tkoenig@gcc.gnu.org>
    
            PR fortran/90329
            * invoke.texi: Document -fbroken-callers.
            * lang.opt: Add -fbroken-callers.
            * trans-decl.c (create_function_arglist): Only set
            DECL_HIDDEN_STRING_LENGTH if flag_broken_callers is set.
    
            2019-05-16  Jakub Jelinek  <jakub@redhat.com>
    
            PR fortran/90329
            * tree-core.h (struct tree_decl_common): Document
            decl_nonshareable_flag for PARM_DECLs.
            * tree.h (DECL_HIDDEN_STRING_LENGTH): Define.
            * calls.c (expand_call): Don't try tail call if caller
            has any DECL_HIDDEN_STRING_LENGTH PARM_DECLs that are or might be
            passed on the stack and callee needs to pass any arguments on the
            stack.
            * tree-streamer-in.c (unpack_ts_decl_common_value_fields): Use
            else if instead of series of mutually exclusive ifs.  Handle
            DECL_HIDDEN_STRING_LENGTH for PARM_DECLs.
            * tree-streamer-out.c (pack_ts_decl_common_value_fields): Likewise.
    
            * trans-decl.c (create_function_arglist): Set
            DECL_HIDDEN_STRING_LENGTH on hidden string length PARM_DECLs if
            len is constant.
    
    From-SVN: r271743

commit 99bc5b384746cc0ec5bb64ed4e017fcfe6b041f4
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Wed May 29 11:35:34 2019 +0200

    re PR bootstrap/90543 (Build failure on MINGW for gcc-9.1.0)
    
            PR bootstrap/90543
            * optc-save-gen.awk: In cl_optimization_print, use correct condition
            for var_opt_string printing.  In cl_optimization_print_diff, print
            (null) instead of invoking undefined behavior if one of the
            var_opt_string pointers is NULL and use && instead of first || in the
            guarding condition.  For var_target_other options, handle const char *
            target variables similarly to const char * optimize node variables.
    
    From-SVN: r271737

commit 1f9190870ce405185da30293f1f9a6a1d96ab1e1
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed May 29 00:16:13 2019 +0000

    Daily bump.
    
    From-SVN: r271725

commit bee4cbe6aa07b2afe04cc445d0412edacffe4163
Author: John David Anglin <danglin@gcc.gnu.org>
Date:   Tue May 28 23:28:02 2019 +0000

    pa.c (hppa_profile_hook): Remove offset adjustment.
    
            * config/pa/pa.c (hppa_profile_hook): Remove offset adjustment.
    
    From-SVN: r271721

commit f6c3f8183006a9b52f883b07d05198de3ace2ebe
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Tue May 28 21:48:31 2019 +0100

    PR libstdc++/90634 reduce allocations in filesystem::path construction
    
    Backport from mainline
    2019-05-28  Jonathan Wakely  <jwakely@redhat.com>
    
            PR libstdc++/90634
            * include/experimental/bits/fs_path.h (path::path(path&&)): Only call
            _M_split_cmpts() for a path with multiple components.
            (path::_S_is_dir_sep()): Add missing 'static' keyword to function.
            * src/filesystem/path.cc (path::_M_split_cmpts()): Count number of
            components and reserve space in vector. Return early when there is
            only one component.
            * testsuite/27_io/filesystem/path/construct/90634.cc: New test.
            * testsuite/experimental/filesystem/path/construct/90634.cc: New test.
    
    From-SVN: r271719

commit 9c0c04ee74a846a22ce6cc52035e0ea2807f29ad
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Tue May 28 21:48:23 2019 +0100

    Fix C++14-only code in testsuite utility
    
            * testsuite/util/testsuite_fs.h (compare_paths): Use three-argument
            form of std::equals for C++11 compatibility.
    
    From-SVN: r271718

commit 8fcaf49b598cf2073d28fd37ee82c2fc14019275
Author: Marek Polacek <polacek@redhat.com>
Date:   Tue May 28 14:16:38 2019 +0000

    PR c++/90548 - ICE with generic lambda and empty pack.
    
            * pt.c (tsubst_copy_and_build): Handle pack expansion properly.
    
            * g++.dg/cpp1y/lambda-generic-90548.C: New test.
    
    From-SVN: r271708

commit 8751a970d74bf4aa0f3178fae08acb6d04d15901
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Tue May 28 08:25:45 2019 +0000

    trans.c (lvalue_required_for_attribute_p): Return 0 for 'Size too.
    
            * gcc-interface/trans.c (lvalue_required_for_attribute_p): Return 0
            for 'Size too.
            (Identifier_to_gnu): Use the actual subtype for a reference to a
            packed array in a return statement.
            (Attribute_to_gnu) <Attr_Size>: Do not strip VIEW_CONVERT_EXPRs from
            the prefix in every case.
    
    From-SVN: r271692

commit 54caef1543a549a0ac6a30ff48f87d5ae5e51a8d
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Tue May 28 08:13:50 2019 +0000

    trans.c (gnat_to_gnu): Remove superfluous tests on Backend_Overflow_Checks_On_Target and rework comments.
    
            * gcc-interface/trans.c (gnat_to_gnu): Remove superfluous tests on
            Backend_Overflow_Checks_On_Target and rework comments.
    
    From-SVN: r271690

commit 56bf2cee023e78ac55963716108ca33d6a35e477
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Tue May 28 08:03:08 2019 +0000

    trans.c (walk_nesting_tree): New static function.
    
            * gcc-interface/trans.c (walk_nesting_tree): New static function.
            (finalize_nrv): Use it to walk the entire nesting tree.
    
    From-SVN: r271686

commit 837f293ffec7e10b264297c6c7834087a116f4aa
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Tue May 28 07:43:17 2019 +0000

    decl.c (gnat_to_gnu_entity): Remove obsolete test on Is_For_Access_Subtype.
    
            * gcc-interface/decl.c (gnat_to_gnu_entity) <E_Record_Subtype>: Remove
            obsolete test on Is_For_Access_Subtype.
    
    From-SVN: r271684

commit 90a000b848389c45b4043da420968aac97b1e152
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Tue May 28 07:40:07 2019 +0000

    decl.c (components_to_record): Set a name on the type created for the REP part, if any.
    
            * gcc-interface/decl.c (components_to_record): Set a name on the type
            created for the REP part, if any.
            * gcc-interface/utils.c (finish_record_type): Only take the maximum
            when merging sizes for a variant part at offset 0.
            (merge_sizes): Rename has_rep parameter into max.
    
    From-SVN: r271682

commit 6ca3289f80b16017991873c542259ee9d44f235d
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue May 28 00:16:16 2019 +0000

    Daily bump.
    
    From-SVN: r271676

commit 1416fdb015d47c205ee15a7017d4761e81775489
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Mon May 27 16:12:41 2019 +0000

    dwarf2out.c (resolve_args_picking_1): Deal with DW_OP_GNU_addr_index and DW_OP_GNU_const_index opcodes.
    
            * dwarf2out.c (resolve_args_picking_1): Deal with DW_OP_GNU_addr_index
            and DW_OP_GNU_const_index opcodes.
    
    From-SVN: r271665

commit ca805701be1a185b9acfafe020ab946f8983232b
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Mon May 27 11:44:05 2019 +0000

    trans.c (Call_to_gnu): Do not initialize the temporary created out of addressability concerns if...
    
            * gcc-interface/trans.c (Call_to_gnu): Do not initialize the temporary
            created out of addressability concerns if it's for the _Init parameter
            of an initialization procedure.
    
    From-SVN: r271660

commit b8b0a7dc69cafa89ea320202d0f86bf06b237b8f
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Mon May 27 11:12:57 2019 +0000

    utils.c (maybe_pad_type): Issue the warning for the specific case of component types preferably.
    
            * gcc-interface/utils.c (maybe_pad_type): Issue the warning for the
            specific case of component types preferably.
    
    From-SVN: r271656

commit bab0c45bd727b4a6a511ef42da9d07d033b2c98b
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Mon May 27 11:07:05 2019 +0000

    trans.c (Identifier_to_gnu): Minor tweaks.
    
            * gcc-interface/trans.c (Identifier_to_gnu): Minor tweaks.
            (gnat_to_gnu): Do not convert the result if it is a reference to an
            unconstrained array used as the prefix of an attribute reference that
            requires an lvalue.
    
    From-SVN: r271654

commit 8408ade283ad3d0d6d7087f60fc0ef5e3d65f483
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Mon May 27 10:48:48 2019 +0000

    trans.c (Gigi_Types_Compatible): New predicate.
    
            * gcc-interface/trans.c (Gigi_Types_Compatible): New predicate.
            (Identifier_to_gnu): Use it to assert that the type of the identifier
            and that of its entity are compatible for gigi.  Rename a couple of
            local variables and separate the processing of the result type.
    
    From-SVN: r271651

commit d450e65582fc529abee8de51bf0c20bbd1557342
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Mon May 27 10:25:17 2019 +0000

    trans.c (Call_to_gnu): Use the unpadded type when putting back an intermediate conversion the type of...
    
            * gcc-interface/trans.c (Call_to_gnu): Use the unpadded type when
            putting back an intermediate conversion the type of the actuals.
    
    From-SVN: r271648

commit edb4ad30c82553d61d19de8f18a6a017f69e68ba
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon May 27 00:16:15 2019 +0000

    Daily bump.
    
    From-SVN: r271643

commit e1248f41edbb808743f17ec6a9b327c05f4c1151
Author: Ian Lance Taylor <ian@gcc.gnu.org>
Date:   Mon May 27 00:13:52 2019 +0000

    re PR go/90635 (typo in libgo/configure.ac)
    
            PR go/90635
        libgo: correct typo in USE_LIBFFI AM_CONDITIONAL
    
        Only affects the case of passing --without-libffi to configure.
    
        Fixes https://gcc.gnu.org/PR90635
    
        Reviewed-on: https://go-review.googlesource.com/c/gofrontend/+/178998
    
    From-SVN: r271639

commit 53cc4f0042b516dac7d7876c231343e7a9541268
Author: Ian Lance Taylor <ian@gcc.gnu.org>
Date:   Mon May 27 00:10:22 2019 +0000

    re PR go/90614 (gcc-9.1.0/libgo/go/syscall/wait.c:54:22: error: unused parameter ‘w’ [-Werror=unused-parameter] Continued (uint32_t *w))
    
            PR go/90614
        syscall: avoid unused parameter error if WIFCONTINUED not defined
    
        Fixes https://gcc.gnu.org/PR90614
    
        Reviewed-on: https://go-review.googlesource.com/c/gofrontend/+/178997
    
    From-SVN: r271637

commit 3f1a94a570f9a990f9b664af79a6fa1d2a4cfb7c
Author: John David Anglin <danglin@gcc.gnu.org>
Date:   Sun May 26 15:19:12 2019 +0000

    linux-unwind.h (pa32_fallback_frame_state): Add cast.
    
            * config/pa/linux-unwind.h (pa32_fallback_frame_state): Add cast.
    
    From-SVN: r271632

commit 21bf2b84afc3d99637614724e142b560c947f968
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun May 26 00:16:12 2019 +0000

    Daily bump.
    
    From-SVN: r271626

commit 3d39d5a63a32383713f55f7a64483067b4237f52
Author: Marek Polacek <polacek@redhat.com>
Date:   Sat May 25 14:46:15 2019 +0000

    PR c++/90572 - wrong disambiguation in friend declaration.
    
            * parser.c (cp_parser_constructor_declarator_p): Don't allow missing
            typename for friend declarations.
    
            * g++.dg/cpp2a/typename16.C: New test.
            * g++.dg/parse/friend13.C: New test.
    
    From-SVN: r271620

commit ebf06049ddc79b6c67bfc231e1564e0568d8a6eb
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat May 25 00:16:13 2019 +0000

    Daily bump.
    
    From-SVN: r271617

commit 7a5e7df8d4ce93840386f32108ad17bbefae4efb
Author: John David Anglin <danglin@gcc.gnu.org>
Date:   Fri May 24 23:15:49 2019 +0000

    re PR target/90530 (Invalid SUBREG insn generated by reload)
    
            PR target/90530
            * config/pa/pa.c (pa_can_change_mode_class): Accept mode changes from
            DImode to SImode in floating-point registers on 64-bit target.
            * config/pa/pa.md (umulsidi3): Change nonimmediate_operand to
            register_operand in xmpyu patterns.
    
    From-SVN: r271612

commit 75addbfa7fb2f6d8e3b99786eea8a56d57f72475
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Fri May 24 17:09:37 2019 +0100

    Fix std::midpoint(T*, T*) for reversed arguments
    
    Backport from mainline
    2019-05-24  Jonathan Wakely  <jwakely@redhat.com>
    
            * include/std/numeric (midpoint(T*, T*)): Fix incorrect result.
            * testsuite/26_numerics/midpoint/pointer.cc: Change "compile" test
            to "run".
    
    From-SVN: r271609

commit 5a3cf0e5f9632c6b9fc7bc0adf912fbefefe336a
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Fri May 24 17:09:33 2019 +0100

    Fix uses of non-reserved names for template parameters
    
    Backport from mainline
    2019-05-17  Jonathan Wakely  <jwakely@redhat.com>
    
            * include/bits/random.h (seed_seq::param): Fix non-reserved name.
            * include/experimental/type_traits (is_detected_exact)
            (is_detected_exact_v): Likewise.
            * include/pstl/execution_defs.h (is_execution_policy)
            (is_execution_policy_v, __enable_if_execution_policy): Likewise.
            * include/pstl/execution_impl.h (__policy_traits): Likewise.
            * testsuite/17_intro/names.cc: Check for more non-reserved names.
            * testsuite/experimental/names.cc: New test.
    
    From-SVN: r271608

commit 588a873a86fc5a60192da6e5cf3d3247f0c5dc98
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Fri May 24 17:09:28 2019 +0100

    PR libstdc++/85965 move is_invocable assertions again
    
    This is another attempt to reduce how often the assertions are
    evaluated, so that code which doesn't try to use the function objects
    doesn't need them to be invocable.
    
    For _Rb_tree we access the _M_key_compare object directly, so can't put
    the assertions in an accessor function for it. However, every invocation
    of _M_key_compare is accompanied by a use of _S_key, so the assertions
    can be put in there.  For _Hashtable there are member functions that are
    consistently used to obtain a hash code or test for equality, so the
    assertions can go in those members.
    
    Backport from mainline
    2019-05-17  Jonathan Wakely  <jwakely@redhat.com>
    
            PR libstdc++/85965
            * include/bits/hashtable.h (_Hashtable::~_Hashtable()): Remove static
            assertions from the destructor.
            * include/bits/hashtable_policy.h (_Hash_code_base::_M_hash_code):
            Move static_assert for hash function to here.
            (_Hash_table_base::_M_equals): Move static_assert for equality
            predicate to here.
            * include/bits/stl_tree.h (_Rb_tree::_S_key(_Const_Link_type)): Move
            assertions here. Access the value directly instead of calling _S_value.
            (_Rb_tree::_S_key(_Const_Base_ptr)): Do downcast and forward to
            _S_key(_Const_Link_type).
            * testsuite/23_containers/set/85965.cc: Check construction,
            destruction, assignment and size() do not trigger the assertions.
            * testsuite/23_containers/unordered_set/85965.cc: Likewise.
            * testsuite/23_containers/map/48101_neg.cc: Call find and adjust
            expected errors.
            * testsuite/23_containers/multimap/48101_neg.cc: Likewise.
            * testsuite/23_containers/multiset/48101_neg.cc: Likewise.
            * testsuite/23_containers/set/48101_neg.cc: Likewise.
            * testsuite/23_containers/unordered_map/48101_neg.cc: Likewise.
            * testsuite/23_containers/unordered_multimap/48101_neg.cc: Likewise.
            * testsuite/23_containers/unordered_multiset/48101_neg.cc: Likewise.
            * testsuite/23_containers/unordered_set/48101_neg.cc: Likewise.
    
    From-SVN: r271607

commit b8e1dc7573c63559c3e2f0136cf148b112b09958
Author: Martin Liska <mliska@suse.cz>
Date:   Fri May 24 09:43:48 2019 +0200

    Backport r271548
    
    2019-05-24  Martin Liska  <mliska@suse.cz>
    
            Backport from mainline
            2019-05-23  Martin Liska  <mliska@suse.cz>
    
            PR sanitizer/90570
            * gimplify.c (gimplify_target_expr): Skip TREE_STATIC target
            expression similarly to gimplify_decl_expr.
    2019-05-24  Martin Liska  <mliska@suse.cz>
    
            Backport from mainline
            2019-05-23  Martin Liska  <mliska@suse.cz>
    
            PR sanitizer/90570
            * g++.dg/asan/pr90570.C: New test.
    
    From-SVN: r271593

commit 2afd1c6ba88cb89fe2f23f46ece0ffc36a1eaa5d
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri May 24 00:16:21 2019 +0000

    Daily bump.
    
    From-SVN: r271587

commit c7167c1b69bb9f6b6fdc61dece62038a73fb6ba4
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Thu May 23 15:18:18 2019 +0100

    Make any_cast compare typeinfo as well as function pointers
    
    It's possible for the function pointer comparison to fail even though
    the type is correct, because the function could be defined multiple
    times with different addresses when shared libraries are in use.
    
    Retain the function pointer check for the common case where the check
    succeeds, but compare typeinfo (if RTTI is enabled) if the first check
    fails.
    
    Backport from mainline
    2019-05-23  Jonathan Wakely  <jwakely@redhat.com>
    
            * include/experimental/any (__any_caster): Use RTTI if comparing
            addresses fails, to support non-unique addresses in shared libraries.
            * include/std/any (__any_caster): Likewise.
            * testsuite/experimental/any/misc/any_cast_neg.cc: Use 0 for dg-error
            line number.
    
    From-SVN: r271559

commit 8e355a1c3b292256605180e55b71296f7c13be6b
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Thu May 23 15:18:13 2019 +0100

    PR libstdc++/90220 fix experimental::any_cast for non-object types
    
    This corresponds to the fixes done for std::any_cast, but has to be done
    without if-constexpr. The dummy specialization of _Manager_internal<_Op>
    is used to avoid instantiating the real _Manager_internal<T>::_S_manage
    function just to compare its address.
    
    Backport from mainline
    2019-05-23  Jonathan Wakely  <jwakely@redhat.com>
    
            PR libstdc++/90220
            * include/experimental/any (__any_caster): Constrain to only be
            callable for object types. Use remove_cv_t instead of decay_t.
            If the type decays or isn't copy constructible, compare the manager
            function to a dummy specialization.
            (__any_caster): Add overload constrained for non-object types.
            (any::_Manager_internal<_Op>): Add dummy specialization.
            * testsuite/experimental/any/misc/any_cast.cc: Test function types
            and array types.
    
    From-SVN: r271558

commit dc172b9806dd22f5eda47a62a0c8b7e6de14e31a
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Thu May 23 10:35:30 2019 +0000

    * c-ada-spec.c (compare_node): Compare the DECL_UIDs as a last resort.
    
    From-SVN: r271550

commit 4e5d65da6f6d1ab614b99ec737373e6a33fe7d6a
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Thu May 23 09:50:21 2019 +0000

    * gnat.dg/opt78.ad[sb]: New test.
    
    From-SVN: r271546

commit e026fa34598f6a33103d1749158e2bb8f3daa79f
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu May 23 00:16:14 2019 +0000

    Daily bump.
    
    From-SVN: r271533

commit 14c551fccf8acc0622417bde59ee826e96b2a082
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Wed May 22 23:36:21 2019 +0100

    PR libstdc++/90557 fix path assignment that alters source
    
    Backport from mainline
    2019-05-22  Jonathan Wakely  <jwakely@redhat.com>
    
            PR libstdc++/90557
            * src/c++17/fs_path.cc (path::_List::operator=(const _List&)): Fix
            reversed arguments to uninitialized_copy_n.
            * testsuite/27_io/filesystem/path/assign/copy.cc: Check that source
            is unchanged by copy assignment.
            * testsuite/util/testsuite_fs.h (compare_paths): Use std::equal to
            compare path components.
    
    From-SVN: r271528

commit 6080857e5a5e4522b3ab67e4d30382ccc92cd6b9
Author: Uros Bizjak <ubizjak@gmail.com>
Date:   Wed May 22 20:49:22 2019 +0200

    backport: re PR target/90547 (ICE in gen_lowpart_general, at rtlhooks.c:63)
    
            Backported from mainline
            2019-05-21  Uroš Bizjak  <ubizjak@gmail.com>
    
            * config/i386/cpuid.h (__cpuid): For 32bit targets, zero
            %ebx and %ecx bafore calling cpuid with leaf 1 or
            non-constant leaf argument.
    
            2019-05-21  Uroš Bizjak  <ubizjak@gmail.com>
    
            PR target/90547
            * config/i386/i386.md (anddi_1 to andsi_1_zext splitter):
            Avoid calling gen_lowpart with CONST operand.
    
    testsuite/ChangeLog:
    
            Backported from mainline
            2019-05-21  Uroš Bizjak  <ubizjak@gmail.com>
    
            PR target/90547
            * gcc.target/i386/pr90547.c: New test.
    
    From-SVN: r271516

commit 1db5db214a64dc25f0ad5f0d48e6e4679f0d245f
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed May 22 00:16:18 2019 +0000

    Daily bump.
    
    From-SVN: r271495

commit 15ad66669ed7219d25b95e02681f78bf24271538
Author: Janne Blomqvist <jb@gcc.gnu.org>
Date:   Tue May 21 18:24:30 2019 +0300

    libfortran/90038: Document new wait=.false. implementation
    
    2019-05-21  Janne Blomqvist  <jb@gcc.gnu.org>
    
           PR libfortran/90038
           * intrinsic.texi (EXECUTE_COMMAND_LINE): Explain new
           wait=.false. implementation.
    
    From-SVN: r271470

commit 204d3f53c6e488c12bb2f672e21cd70c79a82e1e
Author: Sebastian Huber <sebastian.huber@embedded-brains.de>
Date:   Tue May 21 04:41:23 2019 +0000

    [RTEMS] Change multilibs for ARM
    
    Account for Cortex-M3 Errata 602117.  The -mfix-cortex-m3-ldrd option is
    enabled by default, if -mcpu=cortex-m3 is used.
    
    gcc/
    
            * config/arm/t-rtems: Replace ARMv7-M multilibs with Cortex-M
            multilibs.
    
    From-SVN: r271452

commit 27fa84eae5a32f037489a8440b29a726bb5a78a9
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue May 21 00:16:12 2019 +0000

    Daily bump.
    
    From-SVN: r271448

commit 7c236e894e6a7096769a0dc87c6c34acec743037
Author: Joseph Myers <joseph@codesourcery.com>
Date:   Mon May 20 23:22:58 2019 +0100

    * es.po, sv.po: Update.
    
    From-SVN: r271444

commit 357a67c1a7e27afae8c1f02e2ad47fafd9f778ff
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Mon May 20 23:29:49 2019 +0200

    re PR libgomp/90527 (alloc.c:72:7: error: implicit declaration of function ‘posix_memalign’)
    
            PR libgomp/90527
            * alloc.c (_GNU_SOURCE): Define.
    
    From-SVN: r271439

commit 13d9be956e35dc47c47e69081f9f59c62567119c
Author: Jeff Law <law@redhat.com>
Date:   Mon May 20 13:08:18 2019 -0600

    mips.c (mips_dwarf_frame_reg_mode): Replace TARGET_FLOAT64 with !TARGET_FLOAT32, thus handling both fp64 and fpxx modes.
    
            * config/mips/mips.c (mips_dwarf_frame_reg_mode): Replace
            TARGET_FLOAT64 with !TARGET_FLOAT32, thus handling both fp64
            and fpxx modes.
    
            * g++.dg/eh/o32-fp.C: New.
            * gcc.target/mips/dwarfregtable-1.c: New.
            * gcc.target/mips/dwarfregtable-2.c: New.
            * gcc.target/mips/dwarfregtable-3.c: New.
            * gcc.target/mips/dwarfregtable-4.c: New.
            * gcc.target/mips/dwarfregtable.h: New.
    
    From-SVN: r271433

commit 4bc35a9458c3058ab6948a997a98ed332141a2cc
Author: Janne Blomqvist <jb@gcc.gnu.org>
Date:   Mon May 20 20:43:05 2019 +0300

    libfortran/90038 Use posix_spawn, reap dead children when wait=.false.
    
    Backport from trunk.
    
    When using posix_spawn or fork to launch a child process, the parent
    needs to wait for the child, otherwise the dead child is left as a
    zombie process. For this purpose one can install a signal handler for
    SIGCHLD.
    
    2019-05-20  Janne Blomqvist  <jb@gcc.gnu.org>
    
            PR libfortran/90038
            * intrinsics/execute_command_line (sigchld_handler): New function.
            (execute_command_line): Install handler for SIGCHLD.
            * configure.ac: Check for presence of sigaction and waitpid.
            * config.h.in: Regenerated.
            * configure: Regenerated.
    
    
    fork() semantics can be problematic.  Most unix style OS'es have
    posix_spawn which can be used to replace fork + exec in many cases.
    For more information see
    e.g. https://www.microsoft.com/en-us/research/uploads/prod/2019/04/fork-hotos19.pdf
    
    This replaces the one use of fork in libgfortran with posix_spawn.
    
    2019-05-20  Janne Blomqvist  <jb@gcc.gnu.org>
    
            PR libfortran/90038
            * configure.ac (AC_CHECK_FUNCS_ONCE): Check for posix_spawn.
            * intrinsics/execute_command_line (execute_command_line): Use
            posix_spawn.
            * Makefile.in: Regenerated.
            * config.h.in: Regenerated.
            * configure: Regenerated.
    
    Regtested on x86_64-pc-linux-gnu.
    
    From-SVN: r271427

commit d9940358fa46306072ce408c4b5a1fcb3d01a0a2
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Mon May 20 14:02:10 2019 +0100

    PR c++/90532 Ensure __is_constructible(T[]) is false
    
    An array of an unknown bound is an incomplete type, so no object of such
    a type can be constructed. This means __is_constructible should always
    be false for an array of unknown bound.
    
    This patch also changes the std::is_default_constructible trait to use
    std::is_constructible, which now gives the right answer for arrays of
    unknown bound.
    
    gcc/cp:
    
            Backported from mainline
            2019-05-20  Jonathan Wakely  <jwakely@redhat.com>
    
            PR c++/90532 Ensure __is_constructible(T[]) is false
            * method.c (is_xible_helper): Return error_mark_node for construction
            of an array of unknown bound.
    
    gcc/testsuite:
    
            Backported from mainline
            2019-05-20  Jonathan Wakely  <jwakely@redhat.com>
    
            PR c++/90532 Ensure __is_constructible(T[]) is false
            * g++.dg/ext/90532.C: New test.
    
    libstdc++-v3:
    
            Backported from mainline
            2019-05-20  Jonathan Wakely  <jwakely@redhat.com>
    
            PR c++/90532 Ensure __is_constructible(T[]) is false
            * include/std/type_traits (__do_is_default_constructible_impl)
            (__is_default_constructible_atom, __is_default_constructible_safe):
            Remove.
            (is_default_constructible): Use is_constructible.
            * testsuite/20_util/is_constructible/value.cc: Check int[] case.
            * testsuite/20_util/is_default_constructible/value.cc: Likewise.
            * testsuite/20_util/is_trivially_constructible/value.cc: Likewise.
            * testsuite/20_util/is_trivially_default_constructible/value.cc:
            Likewise.
    
    From-SVN: r271417

commit 955a6242cd241be8c27454d042112cb827d0f75b
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon May 20 00:16:42 2019 +0000

    Daily bump.
    
    From-SVN: r271393

commit 324470d4a2e9b7702e7b6538a12c6e03cb72847e
Author: Paul Thomas <pault@gcc.gnu.org>
Date:   Sun May 19 18:08:28 2019 +0000

    re PR fortran/90498 (ICE with select type/associate and derived type argument containing class(*))
    
    2019-05-19  Paul Thomas  <pault@gcc.gnu.org>
    
            PR fortran/90498
            * trans-stmt.c (trans_associate_var) Do not use the saved
            descriptor if the expression is a COMPONENT_REF.
    
    2019-05-19  Paul Thomas  <pault@gcc.gnu.org>
    
            PR fortran/90498
            * gfortran.dg/associate_48.f90 : New test.
    
    From-SVN: r271383

commit 6c887c525c9081881ad90dd62883bcf5f1a062b2
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun May 19 00:16:14 2019 +0000

    Daily bump.
    
    From-SVN: r271374

commit 2bb4c131faa21020a4f44950574cd6182467f255
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat May 18 00:16:12 2019 +0000

    Daily bump.
    
    From-SVN: r271367

commit 1d0679a129525b5250bf7ee0f39c9e97a7c50221
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Fri May 17 21:56:14 2019 +0200

    re PR fortran/54613 ([F08] Add FINDLOC plus support MAXLOC/MINLOC with KIND=/BACK=)
    
            PR fortran/54613
            * gfortran.map (GFORTRAN_9.2): Export _gfortran_{,m,s}findloc{0,1}_r10.
            * Makefile.am (i_findloc0_c): Add $(srcdir)/generated/findloc0_r10.c.
            (i_findloc1_c): Add $(srcdir)/generated/findloc1_r10.c.
            * Makefile.in: Regenerated.
            * generated/findloc0_r10.c: Generated.
            * generated/findloc1_r10.c: Generated.
    
    From-SVN: r271358

commit d6a088c2a128c52bc3e247789fd600c1328dac7e
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Fri May 17 21:54:46 2019 +0200

    re PR fortran/54613 ([F08] Add FINDLOC plus support MAXLOC/MINLOC with KIND=/BACK=)
    
            PR fortran/54613
            * gfortran.map (GFORTRAN_9.2): New symbol version, export
            _gfortran_{,m,s}findloc0_i2 in it.
    
    From-SVN: r271357

commit 8dc08facbd126658bb26b81b6cdde1466360abc4
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Fri May 17 21:54:15 2019 +0200

    backport: re PR c++/90484 (ICE in equal_mem_array_ref_p at gcc/tree-ssa-scopedtables.c:550 since r270433 on i586)
    
            Backported from mainline
            2019-05-16  Jakub Jelinek  <jakub@redhat.com>
    
            PR c++/90484
            * tree-ssa-scopedtables.c (equal_mem_array_ref_p): Don't assert that
            sz0 is equal to sz1, instead return false in that case.
    
    From-SVN: r271356

commit a734d291f3e46f3737313ccb334fea36883e6566
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Fri May 17 21:53:48 2019 +0200

    backport: omp-low.c (lower_rec_input_clauses): If OMP_CLAUSE_IF has non-constant expression...
    
            Backported from mainline
            2019-05-16  Jakub Jelinek  <jakub@redhat.com>
    
            * omp-low.c (lower_rec_input_clauses): If OMP_CLAUSE_IF
            has non-constant expression, force sctx.lane and use two
            argument IFN_GOMP_SIMD_LANE instead of single argument.
            * tree-ssa-dce.c (eliminate_unnecessary_stmts): Don't DCE
            two argument IFN_GOMP_SIMD_LANE without lhs.
            * tree-vectorizer.h (struct _loop_vec_info): Add simd_if_cond
            member.
            (LOOP_VINFO_SIMD_IF_COND, LOOP_REQUIRES_VERSIONING_FOR_SIMD_IF_COND):
            Define.
            (LOOP_REQUIRES_VERSIONING): Or in
            LOOP_REQUIRES_VERSIONING_FOR_SIMD_IF_COND.
            * tree-vect-loop.c (_loop_vec_info::_loop_vec_info): Initialize
            simd_if_cond.
            (vect_analyze_loop_2): Punt if LOOP_VINFO_SIMD_IF_COND is constant 0.
            * tree-vect-loop-manip.c (vect_loop_versioning): Add runtime check
            from simd if clause if needed.
    
            * gcc.dg/vect/vect-simd-1.c: New test.
            * gcc.dg/vect/vect-simd-2.c: New test.
            * gcc.dg/vect/vect-simd-3.c: New test.
            * gcc.dg/vect/vect-simd-4.c: New test.
    
    From-SVN: r271355

commit 0d50662086f2f32855051ef50310086fdf5d46b6
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Fri May 17 21:52:55 2019 +0200

    backport: omp-low.c (lower_rec_input_clauses): For if (0) or simdlen (1) set max_vf to 1.
    
            Backported from mainline
            2019-05-15  Jakub Jelinek  <jakub@redhat.com>
    
            * omp-low.c (lower_rec_input_clauses): For if (0) or simdlen (1) set
            max_vf to 1.
            * omp-expand.c (expand_omp_simd): For if (0) or simdlen (1) clear
            safelen_int and set loop->dont_vectorize.
    
            * c-c++-common/gomp/simd8.c: New test.
    
    From-SVN: r271354

commit 9ceaef52ee3d9c9474457cee80b043bb70876e20
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Fri May 17 21:52:06 2019 +0200

    backport: re PR debug/90197 (Cannot step through simple loop at -O -g)
    
            Backported from mainline
            2019-05-15  Jakub Jelinek  <jakub@redhat.com>
    
            PR debug/90197
            * cp-gimplify.c (genericize_cp_loop): Emit a DEBUG_BEGIN_STMT
            before the condition (or if missing or constant non-zero at the end
            of the loop.  Emit a DEBUG_BEGIN_STMT before the increment expression
            if any.  Don't call protected_set_expr_location on incr if it already
            has a location.
    
    From-SVN: r271353

commit b1abd54e2a93deb5dd4670a4cbdff5aaa49ddbb1
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Fri May 17 21:51:32 2019 +0200

    backport: re PR tree-optimization/90385 (ICE: tree check: expected ssa_name, have real_cst in transform_to_exit_first_loop_alt, at tree-parloops.c:1772)
    
            Backported from mainline
            2019-05-10  Jakub Jelinek  <jakub@redhat.com>
    
            PR tree-optimization/90385
            * tree-parloops.c (try_create_reduction_list): Punt on non-SSA_NAME
            arguments of the exit phis.
    
            * gfortran.dg/pr90385.f90: New test.
    
    From-SVN: r271352

commit 97088068826bc5eb09211a6681012e1b8477fd78
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Fri May 17 21:50:52 2019 +0200

    backport: re PR c++/90383 (GCC generates invalid constexpr copy/move assignment operators for types with trailing padding. (Again))
    
            Backported from mainline
            2019-05-10  Jakub Jelinek  <jakub@redhat.com>
    
            PR c++/90383
            * tree-inline.h (struct copy_body_data): Add do_not_fold member.
            * tree-inline.c (remap_gimple_op_r): Avoid folding expressions if
            id->do_not_fold.
            (copy_tree_body_r): Likewise.
            (copy_fn): Set id.do_not_fold to true.
    
            * g++.dg/cpp1y/constexpr-90383-1.C: New test.
            * g++.dg/cpp1y/constexpr-90383-2.C: New test.
    
    From-SVN: r271351

commit 37491dfb98b159b7ee0f6f93c2d1842b69b40a0b
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Fri May 17 21:49:54 2019 +0200

    backport: re PR pch/90326 (Using any precompiled header breaks definition of FLT_MAX)
    
            Backported from mainline
            2019-05-10  Jakub Jelinek  <jakub@redhat.com>
    
            PR pch/90326
    cp/
            * config-lang.in (gtfiles): Remove c-family/c-lex.c, add
            c-family/c-cppbuiltin.c.
    objc/
            * config-lang.in (gtfiles): Add c-family/c-format.c.
    objcp/
            * config-lang.in (gtfiles): Don't add c-family/c-cppbuiltin.c.
    testsuite/
            * g++.dg/pch/pr90326.C: New test.
            * g++.dg/pch/pr90326.Hs: New file.
    
    From-SVN: r271350

commit 3f888c29afbe961f776040c459ca2fc9817e46e4
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Fri May 17 21:48:25 2019 +0200

    backport: re PR tree-optimization/90303 (ICE in hash_odr_name with fastcall attribute starting with r267359)
    
            Backported from mainline
            2019-05-03  Jakub Jelinek  <jakub@redhat.com>
    
            PR tree-optimization/90303
            * ipa-devirt.c (obj_type_ref_class, get_odr_type): Don't use
            TYPE_CANONICAL for TYPE_STRUCTURAL_EQUALITY_P types in !in_lto_p mode.
    
            * g++.target/i386/pr90303.C: New test.
    
    From-SVN: r271349

commit 90d816acfabf923ffd9febbf0dd0c43ba04e8ac9
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Fri May 17 21:47:18 2019 +0200

    backport: re PR debug/90197 (Cannot step through simple loop at -O -g)
    
            Backported from mainline
            2019-04-26  Jakub Jelinek  <jakub@redhat.com>
    
            PR debug/90197
            * c-tree.h (c_finish_loop): Add 2 further location_t arguments.
            * c-parser.c (c_parser_while_statement): Adjust c_finish_loop caller.
            (c_parser_do_statement): Likewise.
            (c_parser_for_statement): Likewise.  Formatting fixes.
            * c-typeck.c (c_finish_loop): Add COND_LOCUS and INCR_LOCUS arguments,
            emit DEBUG_BEGIN_STMTs if needed.
    
    From-SVN: r271348

commit 36f6476b80ca559ff0fc436d2ab84130bd3d8c70
Author: Richard Biener <rguenther@suse.de>
Date:   Fri May 17 08:10:58 2019 +0000

    backport: [multiple changes]
    
    2019-05-17  Richard Biener  <rguenther@suse.de>
    
            Backport from mainline
            2019-05-07  Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/90316
            * tree-ssa-alias.h (get_continuation_for_phi): Take walking
            limit by reference.
            (walk_non_aliased_vuses): Take walking limit argument.
            * tree-ssa-alias.c (maybe_skip_until): Take limit and abort
            walking if it is reached instead of just counting.
            (get_continuation_for_phi): Likewise.
            (walk_non_aliased_vuses): Likewise, instead of leaving counter
            limiting to the callback.
            * tree-ssa-sccvn.c (vn_reference_lookup_2): Adjust.
            (vn_reference_lookup_3): Likewise.
            (vn_reference_lookup_pieces): Likewise.
            (vn_reference_lookup): Likewise.
            * tree-ssa-pre.c (translate_vuse_through_block): Limit walking.
            * tree-ssa-scopedtables.c (vuse_eq): Adjust.
            (avail_exprs_stack::lookup_avail_expr): Likewise.
    
            2019-05-06  Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/90316
            * tree-ssa-alias.c (maybe_skip_until): Pass in target BB,
            compute target on demand.
            (get_continuation_for_phi): Remove code walking stmts to
            get to a target virtual operand which could end up being
            quadratic.
    
    From-SVN: r271314

commit d61c3c1d52260f640d053ad125eecbeba629ffd4
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri May 17 00:16:11 2019 +0000

    Daily bump.
    
    From-SVN: r271306

commit c679489ec63ce6660498c2dde3891cfc585d810f
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Fri May 17 00:00:26 2019 +0100

    PR libstdc++/90299 make filesystem::absolute overloads consistent
    
    In this implementation it is an error to pass the empty path to absolute,
    because the empty path doesn't represent any file in the filesystem so
    the function cannot meet its postcondition.
    
    Currently the absolute(const path&, error_code&) overload reports an
    error for the empty path, but using errc::no_such_file_or_directory, and
    the other overload does not report an error. This patch makes them
    consistntly report an errc::invalid_argument error for the empty path.
    
    Backport from mainline
    2019-05-04  Jonathan Wakely  <jwakely@redhat.com>
    
            PR libstdc++/90299
            * src/c++17/fs_ops.cc (absolute(const path&)): Report an error if the
            argument is an empty path.
            (absolute(const path&, error_code&)): Use invalid_argument as error
            code instead of no_such_file_or_directory.
            * testsuite/27_io/filesystem/operations/absolute.cc: Check handling
            of non-existent paths and empty paths with both overloads of absolute.
    
    Backport from mainline
    2019-05-16  Jonathan Wakely  <jwakely@redhat.com>
    
            * src/c++17/fs_ops.cc (absolute(const path&, error_code&))
            [_GLIBCXX_FILESYSTEM_IS_WINDOWS]: Remove bogus assertion.
    
    From-SVN: r271301

commit d686768f11c0f3d88746aebac8b87bbaabc0db4d
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu May 16 00:16:21 2019 +0000

    Daily bump.
    
    From-SVN: r271274

commit 486923535cb1d1ca9a7dd62e978923addd764c8c
Author: Janne Blomqvist <jb@gcc.gnu.org>
Date:   Wed May 15 22:38:46 2019 +0300

    Remove translation string markers
    
    C preprocessor definitions should not be translated.
    
    2019-05-15  Janne Blomqvist  <jb@gcc.gnu.org>
    
            Backport from trunk
            * parse.c (gfc_parse_file): Remove translation string markers.
    
    From-SVN: r271264

commit aa5005a56c6b50852400654440ea64e8bfae7e3a
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Wed May 15 20:38:42 2019 +0100

    Fix filesystem::path tests
    
    The root_path.cc test had some debugging macros left in accidentally, so
    didn't FAIL correctly if an assertion failed.
    
    The string-char8_t.cc tests didn't compile on Windows.
    
    Backport from mainline
    2019-04-30  Jonathan Wakely  <jwakely@redhat.com>
    
            * testsuite/27_io/filesystem/path/decompose/root_path.cc: Remove
            macros accidentally left in.
            * testsuite/27_io/filesystem/path/native/string-char8_t.cc: Remove
            unnecessary -lstdc++fs option. Fix test for mingw.
            * testsuite/experimental/filesystem/path/native/string-char8_t.cc:
            Fix test for mingw.
    
    From-SVN: r271263

commit b6721f2c477e5a48f647edaf74bb87d867f7e1ed
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Wed May 15 20:34:59 2019 +0100

    PR libstdc++/90454.cc path construction from void*
    
    Make the filesystem::path constructors SFINAE away for void* arguments,
    instead of giving an error due to iterator_traits<void*>::reference.
    
    Backport from mainline
    2019-05-13  Jonathan Wakely  <jwakely@redhat.com>
    
            PR libstdc++/90454.cc path construction from void*
            * include/bits/fs_path.h (path::_Path): Use remove_pointer so that
            pointers to void are rejected as well as void.
            * include/experimental/bits/fs_path.h (path::_Path): Likewise.
            * testsuite/27_io/filesystem/path/construct/80762.cc: Also check
            pointers to void.
            * testsuite/experimental/filesystem/path/construct/80762.cc: Likewise.
    
    From-SVN: r271262

commit e993da13a06777a6c73a1b4d2132ae5e8ac9e155
Author: Li Jia He <helijia@linux.ibm.com>
Date:   Wed May 15 05:20:02 2019 +0000

    Fix a typo in two_value_replacement function
    
    2019-05-15  Li Jia He  <helijia@linux.ibm.com>
    
            Backport from mainline.
            2019-05-07  Li Jia He  <helijia@linux.ibm.com>
    
            * tree-ssa-phiopt.c (two_value_replacement): Fix a typo in parameter
            detection.
            * gcc.dg/tree-ssa/pr37508.c: Add the no-ssa-phiopt option to skip phi
            optimization.
            * gcc.dg/tree-ssa/pr88676-2.c: New testcase.
    
    From-SVN: r271198

commit 5859baf8a75ae84682b3d25ff17b473747ca8323
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed May 15 00:16:13 2019 +0000

    Daily bump.
    
    From-SVN: r271196

commit 1d040c2034e625f85c8f21e368972700bd35207b
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Tue May 14 17:41:36 2019 +0000

    darwin, testsuite, backport fixes for PR 81058
    
    2019-05-14  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-05-11  Iain Sandoe  <iain@sandoe.co.uk>
    
            PR testsuite/81058
            * gcc.target/i386/avx512bw-vpmovswb-1.c: Use regular data section
            for variables on Darwin, rather than common.
            * gcc.target/i386/avx512bw-vpmovuswb-1.c: Likewise.
            * gcc.target/i386/avx512bw-vpmovwb-1.c: Likewise.
    
    From-SVN: r271186

commit a6c086b89bdbe703fdacc2c6b4bead63a584025d
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Tue May 14 16:14:16 2019 +0000

    darwin, testsuite, fix abi-avx512f.exp fails.
    
    These need an asm shim to build.
    
    2019-05-14  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-05-10  Iain Sandoe  <iain@sandoe.co.uk>
    
            * gcc.target/x86_64/abi/avx512f/abi-avx512f.exp: Darwin is
            now tested.
            * gcc.target/x86_64/abi/avx512f/asm-support-darwin.s: New.
    
    From-SVN: r271178

commit ce9225d65b0a81a27d29ee4af49ca946783f0e11
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Tue May 14 16:05:35 2019 +0000

    darwin, testsuite, backport fixes for section-attr-*
    
    2019-05-14  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-05-02  Iain Sandoe  <iain@sandoe.co.uk>
    
            * gcc.dg/tree-prof/section-attr-1.c: Update scan-asm regex
            for cold section label.
            * gcc.dg/tree-prof/section-attr-2.c: Likewise.
            * gcc.dg/tree-prof/section-attr-3.c: Likewise.
    
    From-SVN: r271177

commit c297c2deffceade3b5a3adabbe773bd9e66fb3b2
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Tue May 14 16:01:21 2019 +0000

    darwin, backport fix for g++.dg/ext/instantiate2.C
    
    2019-05-14  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-05-02  Iain Sandoe  <iain@sandoe.co.uk>
    
            * g++.dg/ext/instantiate2.C: Remove special-casing for Darwin.
    
    From-SVN: r271176

commit e387342c679229ec0833a2a781731820a0e96db4
Author: Martin Liska <mliska@suse.cz>
Date:   Tue May 14 10:47:40 2019 +0200

    Backport r271118
    
    2019-05-14  Martin Liska  <mliska@suse.cz>
    
            Backport from mainline
            2019-05-13  Martin Liska  <mliska@suse.cz>
    
            PR tree-optimization/90416
            * tree-vect-stmts.c (vect_check_load_store_mask): Concatenate
            string instead of passing the second part as va_arg argument.
    
    From-SVN: r271152

commit 1841ab40a2b3ddca16d8d5041b7bf53e029ba98e
Author: Martin Liska <mliska@suse.cz>
Date:   Tue May 14 10:46:35 2019 +0200

    Backport r271117
    
    2019-05-14  Martin Liska  <mliska@suse.cz>
    
            Backport from mainline
            2019-05-13  Martin Liska  <mliska@suse.cz>
    
            PR gcov-profile/90380
            * gcov.c (handle_cycle): Do not support zero cycle count,
            it should not be possible.
            (path_contains_zero_cycle_arc): New function.
            (circuit): Ignore zero cycle arc counts.
    
    From-SVN: r271151

commit 8af68c6ffc9db0af1fa7425bddbf2f3eecc52380
Author: Martin Liska <mliska@suse.cz>
Date:   Tue May 14 10:46:27 2019 +0200

    Backport r271116
    
    2019-05-14  Martin Liska  <mliska@suse.cz>
    
            Backport from mainline
            2019-05-13  Martin Liska  <mliska@suse.cz>
    
            PR gcov-profile/90380
            * gcov.c (enum loop_type): Remove the enum and
            the operator.
            (handle_cycle): Assert that we should not reach
            a negative count.
            (circuit): Use loop_found instead of a tri-state loop_type.
            (get_cycles_count): Do not handle NEGATIVE_LOOP as it can't
            happen.
    
    From-SVN: r271150

commit 1c0152ae21cee4148b82968facf18f379dbe0c16
Author: Chenghua Xu <paul.hua.gm@gmail.com>
Date:   Tue May 14 03:25:38 2019 +0000

    Backport fix for PR90357.
    
            2019-05-14  Chenghua Xu  <paul.hua.gm@gmail.com>
    
            PR target/90357
            * config/mips/mips.c (mips_split_move): Skip forward SRC into
            next insn when the SRC reg is dead.
    
    From-SVN: r271147

commit 4803ac6b9feaa0855303faac6c0190915cf0d42d
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue May 14 00:16:16 2019 +0000

    Daily bump.
    
    From-SVN: r271143

commit ef7ccb123478caec9914fa312f76195fa696b104
Author: Joseph Myers <joseph@codesourcery.com>
Date:   Mon May 13 23:26:47 2019 +0100

    * sv.po: Update.
    
    From-SVN: r271140

commit 5a51d62692f3a6ccc25668d8c9adb3e69b21f884
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Mon May 13 20:37:08 2019 +0000

    backport fix for PR90379
    
    2019-05-13  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-05-11  Iain Sandoe  <iain@sandoe.co.uk>
    
            PR target/90379
            PR bootstrap/89864
            * inclhack.def (darwin_ucred__Atomic): Do not supply test_text
            for wrap fixes.
            * fixincl.x: Regenerated.
    
    From-SVN: r271136

commit 68a25cb91b1f3febfcc3595215706930b08ac53d
Author: Edward Smith-Rowland <3dw4rd@verizon.net>
Date:   Mon May 13 10:58:53 2019 +0000

    Document P0811R3 status in C++20 table
    
    2019-05-13  Edward Smith-Rowland  <3dw4rd@verizon.net>
    
            * doc/xml/manual/status_cxx2020.xml: Document P0811R3 status.
    
    From-SVN: r271123

commit 7d3a63a26d1a9c4413d37e949d6607a955cc5c3e
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon May 13 00:16:19 2019 +0000

    Daily bump.
    
    From-SVN: r271114

commit 1906551ccc54e111de84395c8163c9dcf15aec41
Author: Janne Blomqvist <jb@gcc.gnu.org>
Date:   Sun May 12 21:48:44 2019 +0300

    fortran: C++ support for generating C prototypes
    
    When generating C prototypes for Fortran procedures with the
    -fc-prototypes and -fc-prototypes-external options, print a snippet
    defining macros for complex types, and add C++ support by suppressing
    mangling.
    
    fortran/ChangeLog:
    
    2019-05-12  Janne Blomqvist  <jb@gcc.gnu.org>
    
            * dump-parse-tree.c (get_c_type_name): Use macros for complex type
            names.
            * parse.c (gfc_parse_file): Define complex macros, add CPP support
            when printing C prototypes.
    
    From-SVN: r271109

commit c32199acd16556a77064b2ff3c9c429f54886b1b
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun May 12 00:16:27 2019 +0000

    Daily bump.
    
    From-SVN: r271104

commit e2e9b7b30e790cff4ae4a76b53137a6b9f2e1c3a
Author: Andreas Tobler <andreast@gcc.gnu.org>
Date:   Sat May 11 22:43:00 2019 +0200

    backport: freebsd64.h: Add bits for 32-bit multilib support.
    
    2019-05-11  Andreas Tobler <andreast@gcc.gnu.org>
    
            Backport from mainline.
            2019-04-25  Andreas Tobler  <andreast@gcc.gnu.org>
    
            * config/i386/freebsd64.h: Add bits for 32-bit multilib support.
            * config/i386/t-freebsd64: New file.
            * config.gcc: Add the t-freebsd64 for multilib support.
    
    From-SVN: r271099

commit a301651022734f4a0f744d4c2ebe8a77f27abf5a
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Sat May 11 12:35:59 2019 +0100

    PR libstdc++/81266 fix std::thread::native_handle_type test
    
    The test uses remove_pointer because in most cases native_handle_type is
    a pointer to the actual type that the C++ class contains. However, for
    std::thread, native_handle_type is the same type as the type contained
    in std::thread, and so remove_pointer is not needed. On targets where
    pthread_t is a pointer type remove_pointer<native_handle_type> is not a
    no-op, instead it transforms pthread_t and causes the test to fail.
    
    The fix is to not apply remove_pointer when testing std::thread.
    
    Backport from mainline
    2019-05-10  Jonathan Wakely  <jwakely@redhat.com>
    
            PR libstdc++/81266
            * testsuite/util/thread/all.h: Do not use remove_pointer for
            std::thread::native_handle_type.
    
    From-SVN: r271094

commit c4de1839668f04ec5d62e1f9cfcf9c1a86febaaa
Author: Paul Thomas <pault@gcc.gnu.org>
Date:   Sat May 11 07:49:52 2019 +0000

    re PR fortran/90093 (Extended C interop: optional argument incorrectly identified as PRESENT)
    
    2019-05-11  Paul Thomas  <pault@gcc.gnu.org>
    
            PR fortran/90093
            * gfortran.dg/ISO_Fortran_binding_12.f90: New test.
            * gfortran.dg/ISO_Fortran_binding_12.c: Supplementary code.
    
            PR fortran/90352
            * gfortran.dg/iso_c_binding_char_1.f90: New test.
    
            PR fortran/90355
            * gfortran.dg/ISO_Fortran_binding_4.f90: Add 'substr' to test
            the direct passing of substrings as descriptors to bind(C).
            * gfortran.dg/assign_10.f90: Increase the tree_dump count of
            'atmp' to account for the setting of the 'span' field.
            * gfortran.dg/transpose_optimization_2.f90: Ditto.
    
    From-SVN: r271090

commit 558b990911988b298700196117da7c8dbaeda531
Author: Paul Thomas <pault@gcc.gnu.org>
Date:   Sat May 11 07:47:32 2019 +0000

    re PR fortran/90093 (Extended C interop: optional argument incorrectly identified as PRESENT)
    
    2019-05-11  Paul Thomas  <pault@gcc.gnu.org>
    
            PR fortran/90093
            * trans-decl.c (convert_CFI_desc): Test that the dummy is
            present before doing any of the conversions.
    
            PR fortran/90352
            * decl.c (gfc_verify_c_interop_param): Restore the error for
            charlen > 1 actual arguments passed to bind(C) procs.
            Clean up trailing white space.
    
            PR fortran/90355
            * trans-array.c (gfc_trans_create_temp_array): Set the 'span'
            field to the element length for all types.
            (gfc_conv_expr_descriptor): The force_no_tmp flag is used to
            prevent temporary creation, especially for substrings.
            * trans-decl.c (gfc_trans_deferred_vars): Rather than assert
            that the backend decl for the string length is non-null, use it
            as a condition before calling gfc_trans_vla_type_sizes.
            * trans-expr.c (gfc_conv_gfc_desc_to_cfi_desc): 'force_no_tmp'
            is set before calling gfc_conv_expr_descriptor.
            * trans.c (get_array_span): Move the code for extracting 'span'
            from gfc_build_array_ref to this function. This is specific to
            descriptors that are component and indirect references.
            * trans.h : Add the force_no_tmp flag bitfield to gfc_se.
    
    2019-05-11  Paul Thomas  <pault@gcc.gnu.org>
    
            PR fortran/90093
            * gfortran.dg/ISO_Fortran_binding_12.f90: New test.
            * gfortran.dg/ISO_Fortran_binding_12.c: Supplementary code.
    
            PR fortran/90352
            * gfortran.dg/iso_c_binding_char_1.f90: New test.
    
            PR fortran/90355
            * gfortran.dg/ISO_Fortran_binding_4.f90: Add 'substr' to test
            the direct passing of substrings as descriptors to bind(C).
            * gfortran.dg/assign_10.f90: Increase the tree_dump count of
            'atmp' to account for the setting of the 'span' field.
            * gfortran.dg/transpose_optimization_2.f90: Ditto.
    
    From-SVN: r271089

commit af514ba969f93f76877012c56cdd44ced31ea0c6
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat May 11 00:16:14 2019 +0000

    Daily bump.
    
    From-SVN: r271086

commit b7a51c8b9e760988bb41395018965c10a01cc9ad
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Fri May 10 23:23:10 2019 +0100

    PR libstdc++/90397 fix std::variant friend declaration
    
    Clang diagnoses insert inconsistent noexcept-specifier on the friend
    declaration of __get. Add .
    
            PR libstdc++/90397
            * include/std/variant (variant): Add noexcept to friend declaration.
    
    From-SVN: r271083

commit ad2c7788a90f93a25b4ce6dc35f87558f658cf25
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Fri May 10 23:23:06 2019 +0100

    Tweak C++2a uses-allocator construction utilities
    
    The 20_util/scoped_allocator/69293_neg.cc test was failing in C++2a mode
    because the expected static_assert text wasn't matched. The code is
    still ill-formed in C++2a, but uses the new __uses_alloc_args function
    and so fails a different static_assert. This patch adds the same string
    to the new static_assert, so the test passes.
    
    Now that G++ allows concepts to be declared without 'bool' we can use
    the correct C++2a syntax for the _Std_pair concept used to constrain the
    uses-allocator construction utilities.
    
    Also add a new test to verify that pmr::polymorphic_allocator correctly
    performs recursive uses-allocator construction for nested pairs in
    C++2a.
    
    Backport from mainline
    2019-04-26  Jonathan Wakely  <jwakely@redhat.com>
    
            * include/std/memory (__uses_alloc_args): Add string-literal to
            static_assert, to match the one in __uses_alloc.
            [__cpp_concepts] (_Std_pair): Use C++2a syntax for concept.
            * testsuite/20_util/polymorphic_allocator/construct_c++2a.cc: Check
            for recursive uses-allocator construction of nested pairs.
            * testsuite/20_util/scoped_allocator/construct_pair_c++2a.cc:: Add
            comment.
    
    From-SVN: r271082

commit c252ffdb11130c77772e92c2136ecd7045972afb
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Fri May 10 23:23:01 2019 +0100

    PR libstdc++/90239 use uses_allocator_construction_args in <scoped_allocator>
    
    Backport from mainline
    2019-04-25  Jonathan Wakely  <jwakely@redhat.com>
    
            PR libstdc++/90239
            * doc/xml/manual/status_cxx2020.xml: Amend P0591R4 status.
            * include/std/scoped_allocator [__cplusplus > 201703L]
            (scoped_allocator_adaptor::construct): Define in terms of
            uses_allocator_construction_args, as per P0591R4.
            * testsuite/20_util/scoped_allocator/construct_pair_c++2a.cc: New test.
            * testsuite/util/testsuite_allocator.h: Remove name of unused
            parameter.
            * doc/html/*: Regenerate.
    
    From-SVN: r271081

commit 49cb28a4d10be5f0a0150175cdbf974df1adca9c
Author: Marek Polacek <polacek@redhat.com>
Date:   Fri May 10 14:57:22 2019 +0000

    PR c++/78010 - bogus -Wsuggest-override warning on final function.
    
            * class.c (check_for_override): Don't warn for final functions.
    
            * g++.dg/warn/Wsuggest-override-2.C: New test.
    
    From-SVN: r271066

commit 455ea3748a47cef10577e5bdca32c41448d4f47a
Author: Kelvin Nilsen <kelvin@gcc.gnu.org>
Date:   Fri May 10 14:00:17 2019 +0000

    backport: re PR middle-end/89765 (Multiple problems with vec-insert implementation on PowerPC)
    
    gcc/ChangeLog:
    
    2019-05-10  Kelvin Nilsen  <kelvin@gcc.gnu.org>
    
            Backport from mainline.
            2019-05-07  Kelvin Nilsen  <kelvin@gcc.gnu.org>
    
            PR target/89765
            * config/rs6000/rs6000-c.c (altivec_resolve_overloaded_builtin):
            In handling of ALTIVEC_BUILTIN_VEC_INSERT, use modular arithmetic
            to compute vector element selector for both constant and variable
            operands.
    
    gcc/testsuite/ChangeLog:
    
    2019-05-10  Kelvin Nilsen  <kelvin@gcc.gnu.org>
    
            Backport from mainline.
            2019-05-07  Kelvin Nilsen  <kelvin@gcc.gnu.org>
    
            PR target/89765
            * gcc.target/powerpc/pr89765-mc.c: New test.
            * gcc.target/powerpc/vsx-builtin-10c.c: New test.
            * gcc.target/powerpc/vsx-builtin-10d.c: New test.
            * gcc.target/powerpc/vsx-builtin-11c.c: New test.
            * gcc.target/powerpc/vsx-builtin-11d.c: New test.
            * gcc.target/powerpc/vsx-builtin-12c.c: New test.
            * gcc.target/powerpc/vsx-builtin-12d.c: New test.
            * gcc.target/powerpc/vsx-builtin-13c.c: New test.
            * gcc.target/powerpc/vsx-builtin-13d.c: New test.
            * gcc.target/powerpc/vsx-builtin-14c.c: New test.
            * gcc.target/powerpc/vsx-builtin-14d.c: New test.
            * gcc.target/powerpc/vsx-builtin-15c.c: New test.
            * gcc.target/powerpc/vsx-builtin-15d.c: New test.
            * gcc.target/powerpc/vsx-builtin-16c.c: New test.
            * gcc.target/powerpc/vsx-builtin-16d.c: New test.
            * gcc.target/powerpc/vsx-builtin-17c.c: New test.
            * gcc.target/powerpc/vsx-builtin-17d.c: New test.
            * gcc.target/powerpc/vsx-builtin-18c.c: New test.
            * gcc.target/powerpc/vsx-builtin-18d.c: New test.
            * gcc.target/powerpc/vsx-builtin-19c.c: New test.
            * gcc.target/powerpc/vsx-builtin-19d.c: New test.
            * gcc.target/powerpc/vsx-builtin-20c.c: New test.
            * gcc.target/powerpc/vsx-builtin-20d.c: New test.
            * gcc.target/powerpc/vsx-builtin-9c.c: New test.
            * gcc.target/powerpc/vsx-builtin-9d.c: New test.
    
    From-SVN: r271064

commit 2b4107b450c27d053e4601644e702185f42cf483
Author: Richard Biener <rguenther@suse.de>
Date:   Fri May 10 12:01:47 2019 +0000

    tree-ssa-sccvn.c (visit_reference_op_call): Initialize value-id.
    
    2019-05-10  Richard Biener  <rguenther@suse.de>
    
            * tree-ssa-sccvn.c (visit_reference_op_call): Initialize value-id.
            (do_rpo_vn): Initialize next_value_id.
    
    From-SVN: r271062

commit 41112638d609d27b43b4363fcf993aaf01a16114
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri May 10 00:16:12 2019 +0000

    Daily bump.
    
    From-SVN: r271050

commit 49cddf87b668f1680caf732fe2e24e3634b10b44
Author: Joseph Myers <joseph@codesourcery.com>
Date:   Thu May 9 22:41:45 2019 +0100

    * de.po, fr.po: Update.
    
    From-SVN: r271046

commit 10e4cdb5a794c2568b9a27949973d4d3c1933c5b
Author: Thomas Koenig <tkoenig@gcc.gnu.org>
Date:   Thu May 9 17:40:30 2019 +0000

    backport: re PR fortran/90351 (-fc-prototypes does not dump prototypes for external procedures)
    
    2019-05-09  Thomas Koenig  <tkoenig@gcc.gnu.org>
    
        Backport from trunk
        PR fortran/90351
        PR fortran/90329
        * gfortran.dg/dump-parse-tree.c: Include version.h.
        (gfc_dump_external_c_prototypes): New function.
        (get_c_type_name): Select "char" as a name for a simple char.
        Adjust to handling external functions. Also handle complex.
        (write_decl): Add argument bind_c. Adjust for dumping of external
        procedures.
        (write_proc): Likewise.
        (write_interop_decl): Add bind_c argument to call of write_proc.
        * gfortran.h: Add prototype for gfc_dump_external_c_prototypes.
        * lang.opt: Add -fc-prototypes-external flag.
        * parse.c (gfc_parse_file): Move dumping of BIND(C) prototypes.
        Call gfc_dump_external_c_prototypes if option is set.
        * invoke.texi: Document -fc-prototypes-external.
    
    From-SVN: r271038

commit 239b7733c55d2376778277444f6327fbd0a18b1b
Author: Thomas Schwinge <thomas@codesourcery.com>
Date:   Thu May 9 11:52:53 2019 +0200

    Clean up MPX-related stuff: CIF_CHKP
    
    ..., which was forgotten in recent r268844.
    
            gcc/
            * cif-code.def (CHKP): Remove.
    
    trunk r271029
    
    From-SVN: r271030

commit 4f7632fb3065d92b684b03eeffc05c111311ac05
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu May 9 00:16:14 2019 +0000

    Daily bump.
    
    From-SVN: r271025

commit efe5f7c5fadf731ffb11dbcab1e4c0d871a5e204
Author: Thomas Schwinge <thomas@codesourcery.com>
Date:   Wed May 8 12:03:04 2019 +0200

    Address compiler diagnostics in libgomp.oacc-c-c++-common/pr87835.c
    
        source-gcc/libgomp/testsuite/libgomp.oacc-c-c++-common/pr87835.c: In function 'main':
        source-gcc/libgomp/testsuite/libgomp.oacc-c-c++-common/pr87835.c:45: warning: ignoring #pragma loop gang [-Wunknown-pragmas]
           45 |     #pragma loop gang
              |
        source-gcc/libgomp/testsuite/libgomp.oacc-c-c++-common/pr87835.c:19:7: warning: unused variable 'b' [-Wunused-variable]
           19 |   int b[n];
              |       ^
    
            libgomp/
            PR target/87835
            * testsuite/libgomp.oacc-c-c++-common/pr87835.c: Update.
    
    trunk r271004
    
    From-SVN: r271005

commit 3c1c5def75558cc98d8b57f4b617d5c18357d6f0
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed May 8 00:16:14 2019 +0000

    Daily bump.
    
    From-SVN: r270996

commit 4577993bc6fcfcdfcb29e7e87a4adc06e63c7570
Author: Joseph Myers <joseph@codesourcery.com>
Date:   Wed May 8 01:05:32 2019 +0100

    Update .po files.
    
            * be.po, da.po, de.po, el.po, es.po, fi.po, fr.po, hr.po, id.po,
            ja.po, nl.po, ru.po, sr.po, sv.po, tr.po, uk.po, vi.po, zh_CN.po,
            zh_TW.po: Update.
    
    From-SVN: r270992

commit 38ff331a385baf480d85514276e51a8ac2ed8c48
Author: Kelvin Nilsen <kelvin@gcc.gnu.org>
Date:   Tue May 7 16:22:21 2019 +0000

    backport: re PR target/89424 (__builtin_vec_ext_v1ti (v, i) results in ICE with variable i (RS6000))
    
    gcc/ChangeLog:
    
    2019-05-07  Kelvin Nilsen  <kelvin@gcc.gnu.org>
    
            Backport from mainline.
            2019-05-06  Kelvin Nilsen  <kelvin@gcc.gnu.org>
    
            PR target/89424
            * config/rs6000/rs6000.c (rs6000_expand_vector_extract): Add
            handling of V1TImode.
    
    gcc/testsuite/ChangeLog:
    
    2019-05-07  Kelvin Nilsen  <kelvin@gcc.gnu.org>
    
            Backport from mainline.
            2019-05-06  Kelvin Nilsen  <kelvin@gcc.gnu.org>
    
            PR target/89424
            * gcc.target/powerpc/pr89424-0.c: New test.
            * gcc.target/powerpc/vsx-builtin-13a.c: Define macro PR89424 to
            enable testing of newly patched capability.
            * gcc.target/powerpc/vsx-builtin-13b.c: Likewise.
            * gcc.target/powerpc/vsx-builtin-20a.c: Likewise.
            * gcc.target/powerpc/vsx-builtin-20b.c: Likewise.
    
    From-SVN: r270969

commit a4a0178a87b11473f4029ea47996796b40581308
Author: Rainer Orth <ro@CeBiTec.Uni-Bielefeld.DE>
Date:   Tue May 7 15:21:35 2019 +0000

    Fix make install-gcc-specs with empty GCC_SPECS_FILES
    
            * gcc-interface/Makefile.in (install-gcc-specs): Use foreach.
            Honor DESTDIR.
    
    From-SVN: r270948

commit 505d7ec016ccf489b57b09303ff4cabc1d17791b
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue May 7 00:16:36 2019 +0000

    Daily bump.
    
    From-SVN: r270932

commit 6b58ebe4e561a5d59c32f1310eb7f8ea8b92bc70
Author: Marek Polacek <polacek@redhat.com>
Date:   Mon May 6 17:08:08 2019 +0000

    PR c++/90265 - ICE with generic lambda.
    
            * pt.c (tsubst_copy_and_build): Use a dedicated variable for the last
            element in the vector.
    
            * g++.dg/cpp1y/lambda-generic-90265.C: New test.
    
    From-SVN: r270919

commit d1d20a924eb35f6a340f58af7a066f04050dd359
Author: Paolo Carlini <paolo.carlini@oracle.com>
Date:   Mon May 6 15:23:37 2019 +0000

    re PR c++/90173 (ICE: Segmentation fault (in strip_declarator_types))
    
    /cp
    2019-05-06  Paolo Carlini  <paolo.carlini@oracle.com>
    
            PR c++/90173
            * decl.c (grokdeclarator): Set type to error_mark_node
            upon error about template placeholder type non followed
            by a simple declarator-id.
    
    /testsuite
    2019-05-06  Paolo Carlini  <paolo.carlini@oracle.com>
    
            PR c++/90173
            * g++.dg/cpp1z/class-deduction66.C: New.
    
    From-SVN: r270915

commit 6df94d59ac43d424fde8b722baed9500e1c34f1f
Author: Martin Liska <mliska@suse.cz>
Date:   Mon May 6 16:01:45 2019 +0200

    Backport r270899
    
    2019-05-06  Martin Liska  <mliska@suse.cz>
    
            Backport from mainline
            2019-05-06  Martin Liska  <mliska@suse.cz>
    
            PR sanitizer/90312
            * config/i386/i386-options.c (ix86_option_override_internal): Error only
            when -mabi is selected to a non-default version.
    2019-05-06  Martin Liska  <mliska@suse.cz>
    
            Backport from mainline
            2019-05-06  Martin Liska  <mliska@suse.cz>
    
            PR sanitizer/90312
            * gcc.dg/asan/pr87930.c: Run the test only on *linux or *gnu
            systems.
            * gcc.dg/tsan/pr88017.c: Likewise.
    
    From-SVN: r270912

commit 4f27ebf02dc202ccc547ddc487dfd35e88786756
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon May 6 00:16:12 2019 +0000

    Daily bump.
    
    From-SVN: r270891

commit 7983a8e85eac3c82a018569f04110a7de037946b
Author: Michael Meissner <meissner@gcc.gnu.org>
Date:   Sun May 5 23:31:14 2019 +0000

    Delete file created on the wrong branch
    
    From-SVN: r270886

commit 13b63df73599e3ba3b5d0e67fabafab3e7d46b22
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun May 5 00:16:16 2019 +0000

    Daily bump.
    
    From-SVN: r270880

commit 37a457e3956d09df1aa39952d3aeacbcb864448b
Author: Michael Meissner <meissner@gcc.gnu.org>
Date:   Sat May 4 15:40:37 2019 +0000

    Delete unintentional file from the wrong branch
    
    From-SVN: r270876

commit 2dea4b1e49a49054f3451637ff5dc82a7b0d1d13
Author: Michael Meissner <meissner@gcc.gnu.org>
Date:   Sat May 4 15:39:52 2019 +0000

    Delete unintentional file from the wrong branch
    
    From-SVN: r270875

commit 789f09736b19a02f84ff3d3cdce1b4d6205c00b0
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat May 4 00:16:12 2019 +0000

    Daily bump.
    
    From-SVN: r270866

commit 8cb953d5d2c03eae0958138872f2512b191c2b7c
Author: Michael Meissner <meissner@linux.ibm.com>
Date:   Fri May 3 22:33:10 2019 +0000

    setup branch
    
    From-SVN: r270863

commit e7018d1c3dacb9383d028d17711fc794cc685af4
Author: Ian Lance Taylor <ian@gcc.gnu.org>
Date:   Fri May 3 17:15:42 2019 +0000

    backport: os/user: disable TestGroupIds for AIX
    
    Backport from trunk:
    
        os/user: disable TestGroupIds for AIX
    
        The corresponding Go Toolchain patch is CL 164039
    
        Reviewed-on: https://go-review.googlesource.com/c/gofrontend/+/175079
    
    From-SVN: r270856

commit 32d365a18bb3ac8eca014959f9f48465f8f7fd65
Author: Richard Biener <rguenther@suse.de>
Date:   Fri May 3 11:22:33 2019 +0000

    re PR tree-optimization/90316 (large compile time increase in opt / alias stmt walking for Go example)
    
    2019-05-03  Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/90316
            * tree-ssa-pre.c (pass_pre::execute): Re-compute DOM fast queries
            before running VN.
    
    From-SVN: r270849

commit 93d725e5ce7b39de6ae12d6ecc57c625afe1b188
Author: Jakub Jelinek <jakub@gcc.gnu.org>
Date:   Fri May 3 10:47:02 2019 +0200

    * BASE-VER: Set to 9.1.1.
    
    From-SVN: r270842

commit c8913260b0756f977ab5e6e6392c51a83657fffc
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri May 3 07:59:54 2019 +0000

    Update ChangeLog and version files for release
    
    From-SVN: r270839

commit e69f3341316ea469b161dc58a50ddb02006414bf
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Fri May 3 09:41:05 2019 +0200

    * gennews (files): Add files for GCC 9.
    
    From-SVN: r270838

commit 0d15cc0869978bc561614556f91c6621b92d4d97
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri May 3 00:16:17 2019 +0000

    Daily bump.
    
    From-SVN: r270830

commit d2f284727cb2287101f252e5a3449d2a1a98fc98
Author: Joseph Myers <joseph@codesourcery.com>
Date:   Thu May 2 21:30:48 2019 +0100

    * gcc.pot: Regenerate.
    
    From-SVN: r270823

commit 313b4f62425d6fcf1388bc534c119ca0a787d428
Author: Maciej W. Rozycki <macro@gcc.gnu.org>
Date:   Thu May 2 17:16:04 2019 +0000

    libphobos: Correct my identity in the last ChangeLog entry
    
    From-SVN: r270818

commit e05a859cf63e361465d2dfb3f6347ba04cd22570
Author: Maciej W. Rozycki <macro@wdc.com>
Date:   Thu May 2 16:39:16 2019 +0000

    libphobos: RISC-V: Fix soft-float build errors with IEEE exception flags
    
    Fix assembly errors:
    
    .../libphobos/src/std/math.d: Assembler messages:.../libphobos/src/std/math.d:4773: Error: unrecognized opcode `frflags a0'.../libphobos/src/std/math.d:4856: Error: unrecognized opcode `fsflags a5'.../libphobos/src/std/math.d:4856: Error: unrecognized opcode `fsflags a5'.../libphobos/src/std/math.d:4773: Error: unrecognized opcode `frflags a0'.../libphobos/src/std/math.d:5549: Error: unrecognized opcode `fscsr a5'.../libphobos/src/std/math.d:5456: Error: unrecognized opcode `frcsr a5'.../libphobos/src/std/math.d:5456: Error: unrecognized opcode `frcsr a5'.../libphobos/src/std/math.d:5549: Error: unrecognized opcode `fscsr a5'.../libphobos/src/std/math.d:5456: Error: unrecognized opcode `frcsr a5'.../libphobos/src/std/math.d:5549: Error: unrecognized opcode `fscsr a0'.../libphobos/src/std/math.d:5456: Error: unrecognized opcode `frcsr a0'.../libphobos/src/std/math.d:5456: Error: unrecognized opcode `frcsr a0'.../libphobos/src/std/math.d:5549: Error: unrecognized opcode `fscsr s2'make[8]: *** [Makefile:1119: std/math.lo] Error 1
    
    triggered with the RISC-V lp64 multilib in a GCC build configured with
    `--enable-multilib --enable-languages=all --target=riscv64-linux-gnu'.
    This is due to unconditional explicit use of F extension instructions
    within inline assembly, to access IEEE exception flags.  The use of
    these instructions is not allowed when building for a soft-float ABI.
    
    Correct the problem by wrapping said inline assembly into a conditional
    such that if `D_SoftFloat' is true, then reads from IEEE exception flags
    return 0 and writes are ignored instead, complementing r270522
    ("libphobos: Add D support for RISC-V Linux"), which is an updated
    version of <https://gcc.gnu.org/ml/gcc-patches/2019-04/msg00325.html>,
    where the problematic code has originated from.
    
    libphobos/ChangeLog:
    
    2019-05-02  Maciej Rozycki  <macro@wdc.com>
    
            * std/math.d (IeeeFlags.getIeeeFlags): Handle RISC-V soft-float ABI.
            (IeeeFlags.resetIeeeFlags): Likewise.
            (FloatingPointControl.getControlState): Likewise.
            (FloatingPointControl.setControlState): Likewise.
    
    From-SVN: r270816

commit ad4952c887bdb351e31cffecda4f6c1b8a76ee5f
Author: Rainer Orth <ro@CeBiTec.Uni-Bielefeld.DE>
Date:   Thu May 2 13:33:02 2019 +0000

    Restrict gcc.target/i386/spellcheck-options-5.c to Linux targets
    
            * gcc.target/i386/spellcheck-options-5.c: Restrict to Linux and
            GNU targets.
    
    From-SVN: r270796

commit eb60bcfe81288c51a326d617a4ac6898dc38f4dd
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu May 2 15:03:46 2019 +0200

    Makefile.am (gfor_cdir): Remove $(MULTISUBDIR).
    
            * Makefile.am (gfor_cdir): Remove $(MULTISUBDIR).
            * Makefile.in: Regenerated.
    
    From-SVN: r270794

commit bc31725435896e1a8a2da68c79a442cd2d66e50a
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu May 2 00:16:16 2019 +0000

    Daily bump.
    
    From-SVN: r270785

commit 85370ffdf676ed891f700ffecba6c8d98255bc2e
Author: Rainer Orth <ro@CeBiTec.Uni-Bielefeld.DE>
Date:   Wed May 1 16:16:57 2019 +0000

    Update Solaris baselines for GCC 9.1
    
            * config/abi/post/i386-solaris2.10/baseline_symbols.txt: Regenerate.
            * config/abi/post/i386-solaris2.10/amd64/baseline_symbols.txt: Likewise.
            * config/abi/post/i386-solaris2.11/baseline_symbols.txt: Likewise.
            * config/abi/post/i386-solaris2.11/amd64/baseline_symbols.txt: Likewise.
            * config/abi/post/sparc-solaris2.10/baseline_symbols.txt: Likewise.
            * config/abi/post/sparc-solaris2.10/sparcv9/baseline_symbols.txt:
            Likewise.
            * config/abi/post/sparc-solaris2.11/baseline_symbols.txt: Likewise.
            * config/abi/post/sparc-solaris2.11/sparcv9/baseline_symbols.txt:
            Likewise.
    
    From-SVN: r270774

commit bcaa552890970e0b1c6a09bd09b97c2e71e4852b
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed May 1 00:16:11 2019 +0000

    Daily bump.
    
    From-SVN: r270762

commit 2365ff751c368f45831bb8329e43c12f7cd53ce7
Author: Joseph Myers <joseph@codesourcery.com>
Date:   Tue Apr 30 20:57:58 2019 +0100

    * de.po: Update.
    
    From-SVN: r270710

commit 605dbfb0c4c2c80df31d4122e4416bee51f1495e
Author: Ramana Radhakrishnan <ramana.radhakrishnan@arm.com>
Date:   Tue Apr 30 12:02:30 2019 +0000

    [Patch AArch64] Add __ARM_FEATURE_ATOMICS
    
    
    
    This keeps coming up repeatedly and the ACLE has finally added
    __ARM_FEATURE_ATOMICS for the LSE feature in GCC. This is now part of
    the latest ACLE release
    (https://developer.arm.com/docs/101028/latest/5-feature-test-macros)
    
    I know it's late for GCC-9 but this is a simple macro which need not
    wait  for another year.
    
    Ok for trunk and to backport to all release branches ?
    
    Tested with a simple build and a smoke test.
    
    Backport from mainline.
    PR target/86538
    * config/aarch64/aarch64-c.c (aarch64_update_cpp_builtins): Define
    __ARM_FEATURE_ATOMICS
    
    From-SVN: r270689

commit 9c594b6da1af7ef6e64aa7a9df9a8048062a95c7
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Apr 30 13:41:28 2019 +0200

    gnu.ver (GLIBCXX_3.4.26): Change _Lock_policyE2 exports to _Lock_policyE[012].
    
            * config/abi/pre/gnu.ver (GLIBCXX_3.4.26): Change _Lock_policyE2 exports
            to _Lock_policyE[012].
            * config/abi/post/riscv64-linux-gnu/baseline_symbols.txt: Update.
    
    From-SVN: r270688

commit 046f9fe835e9355a41d80107fa1c934e4b3a9e91
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Apr 30 10:56:01 2019 +0200

    * config/abi/post/riscv64-linux-gnu/baseline_symbols.txt: Update.
    
    From-SVN: r270679

commit d020f96fa398d95d93d76bab5180f3485daa08b7
Author: Martin Liska <mliska@suse.cz>
Date:   Tue Apr 30 10:51:23 2019 +0200

    Subject: Backport r270675
    
    2019-04-30  Martin Liska  <mliska@suse.cz>
    
            Backport from mainline
            2019-04-30  Martin Liska  <mliska@suse.cz>
    
            PR translation/90274
            * opts.c (print_filtered_help): Wrap string in _(...).
    
    From-SVN: r270677

commit 9a0b2c5f5aa3fc13cd05a35bae86306a2b094cfc
Author: Martin Liska <mliska@suse.cz>
Date:   Tue Apr 30 10:35:28 2019 +0200

    Subject: Backport r270622
    
    2019-04-30  Martin Liska  <mliska@suse.cz>
    
            Backport from mainline
            2019-04-27  Martin Liska  <mliska@suse.cz>
    
            PR middle-end/90258
            * opt-suggestions.c (option_proposer::build_option_suggestions):
            When get_valid_option_values returns empty values, add the
            misspelling candidate.
    2019-04-30  Martin Liska  <mliska@suse.cz>
    
            Backport from mainline
            2019-04-27  Martin Liska  <mliska@suse.cz>
    
            PR middle-end/90258
            * gcc.dg/completion-5.c: New test.
            * gcc.target/i386/spellcheck-options-5.c: New test.
    
    From-SVN: r270676

commit 889a8e2a6df86d5679910b6d06f74e47b386d0e4
Author: Richard Biener <rguenther@suse.de>
Date:   Tue Apr 30 07:40:06 2019 +0000

    re PR tree-optimization/90273 (GCC runs out of memory building Firefox)
    
            PR tree-optimization/90273
            * tree-ssa-dce.c (eliminate_unnecessary_stmts): Eliminate
            useless debug stmts.
    
    From-SVN: r270674

commit 56045d08696c8876cf4f8a098ddc7c85dc157a9b
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Apr 30 00:16:11 2019 +0000

    Daily bump.
    
    From-SVN: r270671

commit f72ea6bf8801e5b77dc2121f498d9215779d4165
Author: Joseph Myers <joseph@codesourcery.com>
Date:   Mon Apr 29 23:45:52 2019 +0100

    * sv.po: Update.
    
    From-SVN: r270668

commit 03e50442853e184905614ab5726f38a6bb538e0e
Author: Joseph Myers <joseph@codesourcery.com>
Date:   Mon Apr 29 23:28:09 2019 +0100

    * gcc.pot: Regenerate.
    
    From-SVN: r270666

commit 92095b8ea2d0d53dd4cc6406f11fa4d2f25a2a9e
Author: Iain Buclaw <ibuclaw@gcc.gnu.org>
Date:   Mon Apr 29 05:46:14 2019 +0000

    libphobos: Fix multilib builds for s390x-linux-gnu
    
    Merges upstream druntime aab44549, phobos 3dc363783.
    
    Reviewed-on: https://github.com/dlang/druntime/pull/2590
                 https://github.com/dlang/phobos/pull/6983
    
    libphobos/ChangeLog:
    
    2019-04-28  Iain Buclaw  <ibuclaw@gdcproject.org>
    
            * libdruntime/gcc/sections/elf_shared.d (IBMZ_Any): Define when
            version S390 or SystemZ.  Use condition instead of SystemZ.
            (getTLSRange): Return null on GNU_EMUTLS targets.
    
    From-SVN: r270640

commit 42896ed44cb176f558504a3282c06f694729b07f
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Apr 29 00:16:13 2019 +0000

    Daily bump.
    
    From-SVN: r270636

commit f0697838998027c7353fbf6881eda4f70b9d45be
Author: Iain Buclaw <ibuclaw@gdcproject.org>
Date:   Sun Apr 28 08:02:10 2019 +0000

    [netbsd] d: Fix build failures on sparc*-netbsd
    
    gcc/ChangeLog:
    
    2019-04-27  Iain Buclaw  <ibuclaw@gdcproject.org>
    
            * config/netbsd-d.c: Include memmodel.h.  Remove unused tree.h,
            varasm.h, and netbsd-protos.h.
    
    From-SVN: r270631

commit 9d564422a93f2e413997743f4676bc23dcfeb4c6
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Apr 28 00:16:16 2019 +0000

    Daily bump.
    
    From-SVN: r270629

commit 2702d8c2de7b47b48c0f3a5547ad74086126a142
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Apr 27 00:16:28 2019 +0000

    Daily bump.
    
    From-SVN: r270619

commit 664fb394cc243999afa153ff06adc8f30e85c1f5
Author: H.J. Lu <hongjiu.lu@intel.com>
Date:   Fri Apr 26 17:04:18 2019 +0000

    x32: Update baseline_symbols.txt
    
            Backport from mainline
            * config/abi/post/x86_64-linux-gnu/x32/baseline_symbols.txt: Updated.
    
    From-SVN: r270614

commit 4f00a5492cca1289ee77d7ef0ecbb1be79ee4edd
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Fri Apr 26 17:44:17 2019 +0100

    Fix tests that fail with _GLIBCXX_USE_CXX11_ABI=0
    
    The pmr::string typedef isn't available for the old COW string, so some
    tests that use it were failing.
    
    Backport from mainline
    2019-04-26  Jonathan Wakely  <jwakely@redhat.com>
    
            * testsuite/20_util/variant/run.cc: Use a new Hashable type to test
            hashing, because pmr::string depends on _GLIBCXX_USE_CXX11_ABI==1.
            * testsuite/21_strings/basic_string/hash/hash.cc
            [!_GLIBCXX_USE_CXX11_ABI]: Don't test pmr strings.
            * testsuite/21_strings/basic_string/hash/hash_char8_t.cc
            [!_GLIBCXX_USE_CXX11_ABI]: Likewise.
    
    From-SVN: r270612

commit 06bbb71a2b6d940abd0f45989f2b4ba06ee1fa4a
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Fri Apr 26 17:44:12 2019 +0100

    Adjust linker script to stop exporting unwanted symbol in old version
    
    As discussed in the thread starting at
    https://gcc.gnu.org/ml/libstdc++/2019-04/msg00140.html
    
            * config/abi/pre/gnu.ver (GLIBCXX_3.4): Replace wildcard that matches
            wstring::_M_replace_dispatch with more specific patterns.
    
    From-SVN: r270611

commit d6ea820e70219585e4f889a2c5d8b4825f3018f6
Author: Segher Boessenkool <segher@kernel.crashing.org>
Date:   Fri Apr 26 15:49:53 2019 +0200

    revert r270484
    
    I'm leaving the testsuite piece alone.
    
    From-SVN: r270601

commit 650e99729c6b39d334b76d43326fd66ed0e43a82
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Fri Apr 26 14:09:40 2019 +0200

    baseline_symbols.txt: Update.
    
            * config/abi/post/s390x-linux-gnu/32/baseline_symbols.txt: Update.
            * config/abi/post/s390-linux-gnu/baseline_symbols.txt: Update.
            * config/abi/post/powerpc-linux-gnu/baseline_symbols.txt: Update.
            * config/abi/post/powerpc64-linux-gnu/32/baseline_symbols.txt: Update.
    
    From-SVN: r270599

commit ad74120952ba62484589ea8690be7133886f8e80
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Fri Apr 26 13:15:38 2019 +0200

    baseline_symbols.txt: Update.
    
            * config/abi/post/x86_64-linux-gnu/baseline_symbols.txt: Update.
            * config/abi/post/x86_64-linux-gnu/32/baseline_symbols.txt: Update.
            * config/abi/post/i386-linux-gnu/baseline_symbols.txt: Update.
            * config/abi/post/i486-linux-gnu/baseline_symbols.txt: Update.
            * config/abi/post/aarch64-linux-gnu/baseline_symbols.txt: Update.
            * config/abi/post/s390x-linux-gnu/baseline_symbols.txt: Update.
            * config/abi/post/powerpc64-linux-gnu/baseline_symbols.txt: Update.
    
    From-SVN: r270596

commit d5b8a48bef95646ec581e80ee097ea6f251595c0
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Apr 26 00:16:12 2019 +0000

    Daily bump.
    
    From-SVN: r270591

commit 80fd3eed045ea7cc310825ab906c59b89c1f359c
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Thu Apr 25 22:49:54 2019 +0100

    PR libstdc++/90239 Fix status of P0591R4 in C++2a support table
    
            PR libstdc++/90239
            * doc/xml/manual/status_cxx2020.xml: Correct status of P0591R4.
            * doc/html/*: Regenerate.
    
    From-SVN: r270587

commit 7b37de5c0f06935e46bb7a12e2b68c89f7776a09
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Apr 25 20:08:14 2019 +0200

    re PR tree-optimization/90240 (ICE in try_improve_iv_set, at tree-ssa-loop-ivopts.c:6694)
    
            PR tree-optimization/90240
            Revert:
            2019-04-23  Bin Cheng  <bin.cheng@linux.alibaba.com>
    
            PR tree-optimization/90078
            * tree-ssa-loop-ivopts.c (comp_cost::operator +,-,+=,-+,/=,*=): Add
            checks for infinite_cost overflow.
    
            * gcc/testsuite/g++.dg/tree-ssa/pr90078.C: New test.
    
    From-SVN: r270583

commit 67647bd8854417fa801fc2721119d9d59c356a2b
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Apr 25 20:04:17 2019 +0200

    * DEV-PHASE: Set to prerelease.
    
    From-SVN: r270582
