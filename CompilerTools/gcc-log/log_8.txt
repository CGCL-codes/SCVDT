commit 21cf007c67f47f811275414af25b5af4740fa7e0
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Jan 11 00:17:42 2021 +0000

    Daily bump.

commit 7a9b45f0c3ff84e3658675c8ba3d4d0858ca2d48
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Jan 10 00:17:44 2021 +0000

    Daily bump.

commit db44890b0d89cdf48f307d0d512ad815891b1e7e
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Jan 9 00:17:51 2021 +0000

    Daily bump.

commit abf719ba3fbeabbd4668bb98e3dd15a58bd4a7f4
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Jan 8 00:17:52 2021 +0000

    Daily bump.

commit 5114ee0676e432493ada968e34071f02fb08114f
Author: Martin Liska <mliska@suse.cz>
Date:   Thu Jan 7 11:30:29 2021 +0100

    Sync gcc-changelog scripts.
    
    contrib/ChangeLog:
    
            * gcc-changelog/git_commit.py: Sync from master.
            * gcc-changelog/git_email.py: Likewise.
            * gcc-changelog/git_repository.py: Likewise.
            * gcc-changelog/test_email.py: Likewise.
            * gcc-changelog/test_patches.txt: Likewise.

commit 8714c092e3ce4ad6c130e46c4413f5dab06ffc9f
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Jan 7 00:18:00 2021 +0000

    Daily bump.

commit 4f5b2a38d200a381e17b714e4bdf2908ffe65b9c
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Jan 6 00:18:22 2021 +0000

    Daily bump.

commit f5e87971cb8708378c780c8a00a4af39b5dcab34
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Jan 5 00:18:05 2021 +0000

    Daily bump.

commit 38b5794a0f480b96b2764cbeed1426f182ed6739
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Jan 4 00:17:52 2021 +0000

    Daily bump.

commit a621054804e973e89cdd7e00fb318042a7acde9c
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Jan 3 00:17:51 2021 +0000

    Daily bump.

commit 6f489c126a43a013050dcbabdf51ab7459b93585
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Jan 2 00:17:45 2021 +0000

    Daily bump.

commit d587e14914046009be8310910cdfabeb4a0300e4
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Jan 1 00:17:47 2021 +0000

    Daily bump.

commit eb562189467626b3d8daa9bd734e444e07c9f38d
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Dec 31 00:17:51 2020 +0000

    Daily bump.

commit c5d8b0f6f15e4e8d2f4aa9ad64858c32d1f93ccd
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Sun Oct 11 15:36:13 2020 +0100

    libobjc, Darwin : Fix powerpc encoding regression.
    
    This corrects a typo in the recipe for the special type alignment
    rules that are used for 32bit powerpc Darwin platforms.
    
    libobjc/ChangeLog:
    
            * encoding.c (_darwin_rs6000_special_round_type_align):
            Use DFMode in the emulation of the special round type.
    
    (cherry picked from commit dcd9800fcd42489034c0774247eb898d79b1ea2d)

commit 1bc59f84174ffbd66dbbde53267bb70608c092a4
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Dec 30 00:17:57 2020 +0000

    Daily bump.

commit 79d890de9f2d497c1c903290eb1170feb1845c0c
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Dec 29 00:17:56 2020 +0000

    Daily bump.

commit e64a8d36074ca15b2a3fb453c9abbf9a884e9668
Author: Uros Bizjak <ubizjak@gmail.com>
Date:   Tue Dec 29 00:17:24 2020 +0100

    i386: Fix __builtin_rint with FE_DOWNWARD rounding direction [PR96793]
    
    x86_expand_rint expander uses x86_sse_copysign_to_positive, which
    is unable to change the sign from - to +.  When FE_DOWNWARD rounding
    direction is in effect, the expanded sequence that involves subtraction
    can trigger x - x = -0.0 special rule.  x86_sse_copysign_to_positive
    fails to change the sign of the intermediate value, assumed to always
    be positive, back to positive.
    
    The patch adds one extra fabs that strips the sign from the intermediate
    value when flag_rounding_math is in effect.
    
    2020-12-28  Uroš Bizjak  <ubizjak@gmail.com>
    
    gcc/
            PR target/96793
            * config/i386/i386.c (ix86_expand_rint):
            Remove the sign of the intermediate value for flag_rounding_math.
    
    gcc/testsuite/
            PR target/96793
            * gcc.target/i386/pr96793-2.c: New test.

commit 06c2e77df91b4440be9a496ba117172b90e656b2
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Dec 28 00:17:47 2020 +0000

    Daily bump.

commit 406b278fb27b8fe5c4ca20c94c51c5a813cbae58
Author: Uros Bizjak <ubizjak@gmail.com>
Date:   Sun Dec 27 22:43:44 2020 +0100

    i386: Fix __builtin_trunc with FE_DOWNWARD rounding direction [PR96793]
    
    x86_expand_truncdf_32 expander uses x86_sse_copysign_to_positive, which
    is unable to change the sign from - to +.  When FE_DOWNWARD rounding
    direction is in effect, the expanded sequence that involves subtraction
    can trigger x - x = -0.0 special rule.  x86_sse_copysign_to_positive
    fails to change the sign of the intermediate value, assumed to always
    be positive, back to positive.
    
    The patch adds one extra fabs that strips the sign from the intermediate
    value when flag_rounding_math is in effect.
    
    2020-12-27  Uroš Bizjak  <ubizjak@gmail.com>
    
    gcc/
            PR target/96793
            * config/i386/i386.c (ix86_expand_truncdf_32):
            Remove the sign of the intermediate value for flag_rounding_math.
    
    gcc/testsuite/
            PR target/96793
            * gcc.target/i386/pr96793-1.c: New test.

commit 4b7d812db484696640ee3cc692ce92fb2fe95810
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Dec 27 00:17:47 2020 +0000

    Daily bump.

commit 52f405ae2d030006c2fcfb7b5261780061017fa1
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Dec 26 00:17:41 2020 +0000

    Daily bump.

commit 50710340f2f8d1972f432718393991f51d646f00
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Dec 25 00:17:50 2020 +0000

    Daily bump.

commit 2850df4edce86b13d503e5bf636a874fb21198fc
Author: Roman Zhuykov <zhroma@ispras.ru>
Date:   Thu Dec 24 19:40:07 2020 +0300

    modulo-sched: Carefully process loop counter initialization [PR97421]
    
    Do not allow direct adjustment of pre-header initialization instruction for
    count register if is read in some instruction below in that basic block.
    
    gcc/ChangeLog:
    
            PR rtl-optimization/97421
            * modulo-sched.c (generate_prolog_epilog): Remove forward
            declaration, adjust last argument name and type.
            (const_iteration_count): Add bool pointer parameter to return
            whether count register is read in pre-header after its
            initialization.
            (sms_schedule): Fix count register initialization adjustment
            procedure according to what const_iteration_count said.
    
    gcc/testsuite/ChangeLog:
    
            PR rtl-optimization/97421
            * gcc.c-torture/execute/pr97421-1.c: New test.
            * gcc.c-torture/execute/pr97421-2.c: New test.
            * gcc.c-torture/execute/pr97421-3.c: New test.
    
    (cherry picked from commit 4eb8f93d026eaa1de9b4820337069f3ce3465cd0)

commit 25706215fbbfde8e9f4e07ae7ba6c55f9530cba1
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Dec 24 00:17:56 2020 +0000

    Daily bump.

commit 75de7b2ace83028afa46bdb9a286d66ce1fa26b8
Author: Harald Anlauf <anlauf@gmx.de>
Date:   Thu Dec 17 10:31:55 2020 +0100

    PR fortran/98307 - Dependency check fails when using "allocatable"
    
    The dependency check for FORALL constructs already handled pointer
    components to derived types, but missed allocatables.  Fix that.
    
    gcc/fortran/ChangeLog:
    
            PR fortran/98307
            * trans-stmt.c (check_forall_dependencies): Extend dependency
            check to allocatable components of derived types.
    
    gcc/testsuite/ChangeLog:
    
            PR fortran/98307
            * gfortran.dg/forall_19.f90: New test.
    
    (cherry picked from commit c09deceb534b82ce144af3a345dcb06ab5e49ba4)

commit edb28850520d1137d12a1cc1c0e89c11e6b0c6ef
Author: Uros Bizjak <ubizjak@gmail.com>
Date:   Wed Dec 23 09:18:12 2020 +0100

    i386: Fix __builtin_floor with FE_DOWNWARD rounding direction [PR96793]
    
    x86_expand_floorceil expander uses x86_sse_copysign_to_positive, which
    is unable to change the sign from - to +.  When FE_DOWNWARD rounding
    direction is in effect, the expanded sequence that involves subtraction
    can trigger x - x = -0.0 special rule.  x86_sse_copysign_to_positive
    fails to change the sign of the intermediate value, assumed to always
    be positive, back to positive.
    
    The patch adds one extra fabs that strips the sign from the intermediate
    value when flag_rounding_math is in effect.
    
    2020-12-22  Uroš Bizjak  <ubizjak@gmail.com>
    
    gcc/
            PR target/96793
            * config/i386/i386.c (ix86_expand_floorceil):
            Remove the sign of the intermediate value for flag_rounding_math.
            (ix86_expand_floorceildf_32): Ditto.
    
    gcc/testsuite/
            PR target/96793
            * gcc.target/i386/pr96793.c: New test.

commit 83109751838e1680cf3642c9f24fa88760f32eab
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Dec 23 00:17:52 2020 +0000

    Daily bump.

commit 77f2a46e2130d48fd5b531aed2e6a30db355eba5
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Dec 22 00:17:53 2020 +0000

    Daily bump.

commit 5708a411079c293e96029e60eee79d9594c4ba97
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Dec 21 00:17:46 2020 +0000

    Daily bump.

commit 5fa7735953cf8918b3d2a7aec446c5d64f9eb99c
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Dec 20 00:17:46 2020 +0000

    Daily bump.

commit d4016745322215502148bdd4cdb2d396038f0a4f
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Dec 19 00:17:46 2020 +0000

    Daily bump.

commit 0919a2760c0152bc06c18921145f522a1736fb55
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Dec 18 00:17:48 2020 +0000

    Daily bump.

commit 91b4c22fc765152c3f0a35ff80814cc377d8fb62
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Dec 17 00:17:57 2020 +0000

    Daily bump.

commit 02092ec9a00273716052732eb9ee343eef6bdc1b
Author: Nathan Sidwell <nathan@acm.org>
Date:   Wed Dec 16 11:49:41 2020 -0800

    c++: Fix template parm ICE [PR 98297]
    
    I think this is nonsense code, we seem to be naming an instantiation
    of a template template parm.  But this fixes the ICE.  Perhaps we
    should diagnose the issue earlier?
    
            gcc/cp/
            * parser.c (cp_parser_elaborated_type_specifier): Test
            BOUND_TEMPLATE_TEMPLATE_PARM before checking for instantiation.
            gcc/testsuite/
            * g++.dg/template/pr98297.C: New.

commit bf26930c88074b9101c9d62d59a5db70e7a37b49
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Dec 16 00:17:46 2020 +0000

    Daily bump.

commit 8cbe4e3c2c6c527ce5ac31a8d6bc6b2300f07930
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Dec 15 00:17:54 2020 +0000

    Daily bump.

commit 2dc7700c45e62b740e87651b22fba2955ff4bd89
Author: Wilco Dijkstra <wdijkstr@arm.com>
Date:   Thu Dec 3 18:40:34 2020 +0000

    AArch64: Add support for --with-tune
    
    Add support for --with-tune. Like --with-cpu and --with-arch, the argument is
    validated and transformed into a -mtune option to be processed like any other
    command-line option.  --with-tune has no effect if a -mcpu or -mtune option
    is used. The validating code didn't allow --with-cpu=native, so explicitly
    allow that.
    
    Co-authored-by:  Delia Burduv  <delia.burduv@arm.com>
    
    Bootstrap OK, regress pass, OK to commit?
    
    2020-09-03  Wilco Dijkstra  <wdijkstr@arm.com>
    
    gcc/
            * config.gcc (aarch64*-*-*): Add --with-tune. Support --with-cpu=native.
            * config/aarch64/aarch64.h (OPTION_DEFAULT_SPECS): Add --with-tune.
    
    gcc/testsuite/
            * lib/target-supports.exp (check_effective_target_tune_cortex_a76): New
            effective target test.
            * gcc.target/aarch64/with-tune-config.c: New test.
            * gcc.target/aarch64/with-tune-march.c: Likewise.
            * gcc.target/aarch64/with-tune-mcpu.c: Likewise.
            * gcc.target/aarch64/with-tune-mtune.c: Likewise.

commit 8e7065a82f916b84eda61488d51a1186f1b23218
Author: Sebastian Pop <spop@amazon.com>
Date:   Thu Dec 3 17:35:18 2020 +0000

    disable --with-{cpu,arch,tune}-32
    
    gcc/
            * config.gcc (aarch64*-*-*): Remove --with-{cpu,arch,tune}-32 flags.

commit 9e6e3b026217dda78abff9ed866eed63a3de194e
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Dec 14 09:03:12 2020 +0000

    Daily bump.

commit 24e5d7ea4590d166ab8809439bd28c0d7b611a8b
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Dec 13 00:17:36 2020 +0000

    Daily bump.

commit fa183a4923fa51e87b0966ca2fbed35c589ea87e
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Dec 12 00:17:50 2020 +0000

    Daily bump.

commit 56f83e64e179f2ff5bb4161db076d7e6ae1c0a3f
Author: Harald Anlauf <anlauf@gmx.de>
Date:   Sun Nov 29 23:23:16 2020 +0100

    PR fortran/98017 - Suspected regression using PACK
    
    When substituting a parameter variable of type character, the character
    length was reset to 1.  Fix this by copying the length.
    
    gcc/fortran/ChangeLog:
    
            * expr.c (simplify_parameter_variable): Fix up character length
            after copying an array-valued expression.
    
    gcc/testsuite/ChangeLog:
    
            * gfortran.dg/pr98017.f90: New test.
    
    (cherry picked from commit bb67ad5cff58a707aaae645d4f45a913d8511c86)

commit c1dae1280f0ecba9c38750bf0f671d3da568c0da
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Dec 11 18:24:11 2020 +0000

    Daily bump.

commit 87c40733898283f0d1e48bcbf8055c2718064e77
Author: Ed Schonberg <schonberg@adacore.com>
Date:   Thu Dec 10 22:26:57 2020 +0100

    Fix PR ada/98230
    
    It's a rather curious malfunction of the 'Mod attribute applied to the
    variable of a loop whose upper bound is dynamic.
    
    gcc/ada/ChangeLog:
            PR ada/98230
            * exp_attr.adb (Expand_N_Attribute_Reference, case Mod): Use base
            type of argument to obtain static bound and required size.
    
    gcc/testsuite/ChangeLog:
            * gnat.dg/modular6.adb: New test.

commit 92cad21017f981a3f9f73934ca18d5f76a492421
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Dec 10 00:18:04 2020 +0000

    Daily bump.

commit 56943ab07c0c0e6878806adf7372dccad84b78d7
Author: Jason Merrill <jason@redhat.com>
Date:   Mon Mar 2 14:42:47 2020 -0500

    c++: Allow parm of empty class type in constexpr.
    
    Since copying a class object is defined in terms of the copy constructor,
    copying an empty class is OK even if it would otherwise not be usable in a
    constant expression.
    
    gcc/cp/ChangeLog
    
            PR c++/91953
            * constexpr.c (potential_constant_expression_1) [PARM_DECL]: Allow
            empty class type.
    
    gcc/testsuite/ChangeLog:
    
            PR c++/91953
            * g++.dg/cpp1z/constexpr-if12.C: Remove error.
            * g++.dg/cpp0x/constexpr-empty14.C: New test.

commit fab88d42ed2f2c8f013689aae7b55d08da538837
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Dec 9 00:18:10 2020 +0000

    Daily bump.

commit 833c99a8b09f07d5499861daba92e20783744724
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Dec 8 00:18:07 2020 +0000

    Daily bump.

commit 77019f860e1d9eee9c8b68c4f2690df831c0d7f3
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Dec 7 00:17:39 2020 +0000

    Daily bump.

commit 25d661a55a6aa18f448756272f5af2f5a5ff40c4
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Dec 6 00:18:04 2020 +0000

    Daily bump.

commit e0d562a3b4fcbd8e7a525a3cef2afd7b4988f7ff
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Dec 5 00:17:56 2020 +0000

    Daily bump.

commit a61486017fa128439d07893afa837b00ff42b5e1
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Dec 4 00:17:53 2020 +0000

    Daily bump.

commit 3d20f125b49d6f55eb889902c2b37de3b174caee
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Dec 3 00:18:09 2020 +0000

    Daily bump.

commit e03bdd99101a6191679969535de02aa18f9a5b11
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Dec 2 00:18:00 2020 +0000

    Daily bump.

commit 3114be1ceb750f323a13dad0a419a7622bd71fbe
Author: Richard Biener <rguenther@suse.de>
Date:   Thu May 7 14:06:02 2020 +0200

    ipa/94947 - avoid using externally_visible_p ()
    
    externally_visible_p wasn't the correct predicate to use (even if it
    worked), instead we should use DECL_EXTERNAL || TREE_PUBLIC.
    
    2020-05-07  Richard Biener  <rguenther@suse.de>
    
            PR ipa/94947
            * tree-ssa-structalias.c (refered_from_nonlocal_fn): Use
            DECL_EXTERNAL || TREE_PUBLIC instead of externally_visible.
            (refered_from_nonlocal_var): Likewise.
            (ipa_pta_execute): Likewise.
    
    (cherry picked from commit b9250b3cb91b667cd67943e0fac94bf39ac089a8)

commit 1cd95acac5a521937b205ace0db3f1a042561dd8
Author: Richard Biener <rguenther@suse.de>
Date:   Tue May 5 13:09:50 2020 +0200

    ipa/94947 - fix test for externally visible variables for IPA PTA
    
    This fixes lack of an escape point of externally declared variables.
    
    2020-05-05  Richard Biener  <rguenther@suse.de>
    
            PR ipa/94947
            * tree-ssa-structalias.c (ipa_pta_execute): Use
            varpool_node::externally_visible_p ().
            (refered_from_nonlocal_var): Likewise.
    
            * gcc.dg/torture/pr94947-1.c: New testcase.
            * gcc.dg/torture/pr94947-2.c: Likewise.
    
    (cherry picked from commit f9b5db750bc7fbba69fee93564907f7da1bca35f)

commit 70ac96884811b6971b44a7ffa94d637f612e6cc4
Author: Richard Biener <rguenther@suse.de>
Date:   Wed May 6 10:23:15 2020 +0200

    middle-end/94964 - avoid EH loop entry with CP_SIMPLE_PREHEADERS
    
    Loop optimizers expect to be able to insert on the preheader
    edge w/o splitting it thus avoid ending up with a preheader
    that enters the loop via an EH edge (or an abnormal edge).
    
    2020-05-06  Richard Biener  <rguenther@suse.de>
    
            PR middle-end/94964
            * cfgloopmanip.c (create_preheader): Require non-complex
            preheader edge for CP_SIMPLE_PREHEADERS.
    
    (cherry picked from commit 6fc00b41e764219e2c88d8892d7c701c0d292a17)

commit 3d0da0bc398054f2c37f09b13ccf7e2e2ef63b22
Author: Richard Biener <rguenther@suse.de>
Date:   Fri May 15 09:38:54 2020 +0200

    tree-optimization/95133 - avoid abnormal edges in path splitting
    
    When path splitting tries to detect a CFG diamond make sure it
    is composed of normal (non-EH, not abnormal) edges.  Otherwise
    CFG manipulation later may fail.
    
    2020-05-15  Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/95133
            * gimple-ssa-split-paths.c
            (find_block_to_duplicate_for_splitting_paths): Check for
            normal edges.
    
            * gcc.dg/pr95133.c: New testcase.
    
    (cherry picked from commit aaf1ee48316f9b414b11c17e298198925d816595)

commit 427fe143a43ba13497759e1482ce683deed9a00b
Author: Richard Biener <rguenther@suse.de>
Date:   Thu Nov 26 10:07:06 2020 +0100

    testsuite/98002 - fix gcc.dg/strncmp-2.c
    
    This makes sure not to free() memory we have mprotected to PROT_NONE
    by calling mprotect again with PROT_READ|PROT_WRITE.  This avoids
    crashing the allocator when in debug mode.
    
    2020-11-16  Richard Biener  <rguenther@suse.de>
    
            PR testsuite/98002
            * gcc.dg/strncmp-2.c: Call mprotect again before free.
    
    (cherry picked from commit 5b3a8fad18324cd38c221bdb0ae2b690fc82ede0)

commit 46384dc73076d945c9222b3f0850a9aa3e694eda
Author: Richard Biener <rguenther@suse.de>
Date:   Mon Oct 26 10:10:46 2020 +0100

    middle-end/97554 - avoid overflow in alloc size compute
    
    This avoids overflow in the allocation size computations in
    sbitmap_vector_alloc when the result exceeds 2GB.
    
    2020-10-26  Richard Biener  <rguenther@suse.de>
    
            PR middle-end/97554
            * sbitmap.c (sbitmap_vector_alloc): Use size_t for byte
            quantities to avoid overflow.
    
    (cherry picked from commit 50f9e1f4d458e36d306b2449c689e45492847f68)

commit 1631094a3eb4d1b1eb8b04db6f3b9ba6a5b645eb
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Dec 1 00:17:55 2020 +0000

    Daily bump.

commit 3a936a9ecddef58ad5b6ee11697c3f791b942708
Author: Stam Markianos-Wright <stam.markianos-wright@arm.com>
Date:   Mon Nov 30 10:47:54 2020 +0000

    Backport of the patch for PR target/91816
    
    This is a patch for an issue where the compiler was generating a
    conditional branch in Thumb2, which was too far for b{cond} to handle.
    
    This backport also includes the subsequent fixes to the test in this
    patch.
    
    gcc/ChangeLog
    
            PR target/91816
            * config/arm/arm-protos.h: New function arm_gen_far_branch prototype.
            * config/arm/arm.c (arm_gen_far_branch): New function
            arm_gen_far_branch.
            * config/arm/arm.md: Update b<cond> for Thumb2 range checks.
    
    gcc/testsuite/ChangeLog
    
            PR target/91816
            * gcc.target/arm/pr91816.c: New test.

commit c715a3659873b5f6b449493f54a29c26d06dfd1c
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Nov 30 00:17:44 2020 +0000

    Daily bump.

commit b68aa8c9eec1e355b4b2b00a33779f5838e8e190
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Nov 29 00:17:39 2020 +0000

    Daily bump.

commit 5cf8eddf938553d9a7dbc3f57115d8d7b1d530ba
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Nov 28 00:17:55 2020 +0000

    Daily bump.

commit c2be82c5cbb0e7647f93e2ab8855d44777a811a2
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Nov 27 12:47:25 2020 +0000

    Daily bump.

commit c6145860aac6acfeed2a98fe7532dd2cd0ffab2b
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Thu Nov 26 11:25:55 2020 +0000

    libstdc++: Fix undefined FILE* operations in test
    
    We only need to check that the constructor doesn't clear errno, so
    there's no need to use an invalid FILE* for that.
    
    libstdc++-v3/ChangeLog:
    
            PR libstdc++/98001
            * testsuite/ext/stdio_filebuf/char/79820.cc: Do not pass invalid
            FILE* to constructor.
    
    (cherry picked from commit 2762cb1df686fc1ebcee23c7c4f0f6e8bf5a6abc)

commit 23ec71d91e3044108a557dace573d3e60ff1c07e
Author: Thomas Schwinge <thomas@codesourcery.com>
Date:   Wed Nov 25 20:36:55 2020 +0100

    Don't create location wrapper nodes within OpenACC clauses (testsuite changes only)
    
    This fixes a GCC 11, 10, 9 regression introduced by commit
    dfd7fdca2ac17d8b823a16700525824ca312ade0 (Subversion r267272) "C++: more
    location wrapper nodes (PR c++/43064, PR c++/43486)".  But: this isn't
    intending to blame David, because back then, the problem hasn't been visible in
    the testsuite (or else I'm sure would've been addressed right away) because of
    our all dear friend: missing testsuite coverage.  Thus, for GCC 8, I'm likewise
    enhancing the testsuite, without the C++ front end code changes.
    
    I actually had presumed that there may be an issue for OpenACC:
    <http://mid.mail-archive.com/874lb9qr2u.fsf@euler.schwinge.homeip.net>, so here
    we are, two years (and many "wasted" hours...) later...
    
            gcc/testsuite/
            * c-c++-common/goacc/cache-3-1.c: New.
            * c-c++-common/goacc/cache-3-2.c: Likewise.
            * c-c++-common/goacc/data-clause-1.c: Likewise.
            * c-c++-common/goacc/data-clause-2.c: Likewise.
            * c-c++-common/gomp/map-1.c: Adjust.
            * c-c++-common/gomp/map-2.c: Likewise.
            * g++.dg/goacc/cache-3-1.C: New.
            * g++.dg/goacc/cache-3-2.C: Likewise.
            * g++.dg/goacc/data-clause-1.C: Likewise.
            * g++.dg/goacc/data-clause-2.C: Likewise.
            * g++.dg/gomp/map-1.C: Adjust.
            * g++.dg/gomp/map-2.C: Likewise.
    
    Reported-by: Sandra Loosemore <sandra@codesourcery.com>
    (cherry picked from commit c0c7270cc4efd896fe99f8ad5409dbef089a407f (testsuite changes only))

commit c71a85f4804d9d5d4f3d70fb46a066f4ab3ae3d0
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Nov 26 00:18:01 2020 +0000

    Daily bump.

commit e7e0360147d973e7634f16bfec265cd4cc937e1c
Author: Thomas Schwinge <thomas@codesourcery.com>
Date:   Wed Nov 25 11:41:45 2020 +0100

    Add 'g++.dg/gomp/map-{1,2}.C'
    
            gcc/testsuite/
            * g++.dg/gomp/map-1.C: New.
            * g++.dg/gomp/map-2.C: Likewise.
            * c-c++-common/gomp/map-1.c: Adjust.
            * c-c++-common/gomp/map-2.c: Likewise.
    
    (cherry picked from commit 1049e5408fa343b5bf0a6380212a8ec8dfe2b6fc)

commit b4a3e26c329f63c9953f4c4e3141c562bf91ce93
Author: Thomas Schwinge <thomas@codesourcery.com>
Date:   Wed Nov 25 13:03:52 2020 +0100

    Fix templatized C++ OpenACC 'cache' directive ICEs
    
    This has been broken forever, whoops...
    
            gcc/cp/
            * pt.c (tsubst_omp_clauses): Handle 'OMP_CLAUSE__CACHE_'.
            (tsubst_expr): Handle 'OACC_CACHE'.
            gcc/testsuite/
            * c-c++-common/goacc/cache-1.c: Update.
            * c-c++-common/goacc/cache-2.c: Likewise.
            * g++.dg/goacc/cache-1.C: New.
            * g++.dg/goacc/cache-2.C: Likewise.
            libgomp/
            * testsuite/libgomp.oacc-c++/cache-1.C: New.
            * testsuite/libgomp.oacc-c-c++-common/cache-1.c: Update.
    
    (cherry picked from commit 0cab70604cfda30bc64351b39493ef884ff7ba10)

commit 1dbf117ce5df08e3303f89c0af9e601b2cbd6163
Author: Szabolcs Nagy <szabolcs.nagy@arm.com>
Date:   Thu Jul 2 16:11:04 2020 +0100

    aarch64: Add missing ACLE support for PAC-RET
    
    Define the __ARM_FEATURE_PAC_DEFAULT feature test
    macro when PAC-RET branch protection is enabled.
    
    2020-07-13  Szabolcs Nagy  <szabolcs.nagy@arm.com>
    
    gcc/ChangeLog:
    
            * config/aarch64/aarch64-c.c (aarch64_update_cpp_builtins): Add
            __ARM_FEATURE_PAC_DEFAULT support.
    
    (cherry picked from commit a1faa8e2470b33e92f6274804bf7941fbb6e2d38)

commit 74bffa9a325f7360dc9d105c2fc5719fe45164d3
Author: Szabolcs Nagy <szabolcs.nagy@arm.com>
Date:   Thu May 28 10:28:30 2020 +0100

    doc: Clarify __builtin_return_address [PR94891]
    
    The expected semantics and valid usage of __builtin_return_address is
    not clear since it exposes implementation internals that are normally
    not meaningful to portable c code.
    
    This documentation change tries to clarify the semantics in case the
    return address is stored in a mangled form. This affects AArch64 when
    pointer authentication is used for the return address signing (i.e.
    -mbranch-protection=pac-ret).
    
    2020-07-13  Szabolcs Nagy  <szabolcs.nagy@arm.com>
    
    gcc/ChangeLog:
    
            PR target/94891
            * doc/extend.texi: Update the text for  __builtin_return_address.
    
    (cherry picked from commit 6a391e06f953c3390b14020d8cacb6d55f81b2b9)

commit d5f58a0287d2bc4c0a84bf63cade069744ce3185
Author: Szabolcs Nagy <szabolcs.nagy@arm.com>
Date:   Thu Jun 4 09:33:35 2020 +0100

    libgcc: fix the handling of return address mangling [PR94891]
    
    Mangling, currently only used on AArch64 for return address signing,
    is an internal representation that should not be exposed via
    
      __builtin_return_address return value,
      __builtin_eh_return handler argument,
      _Unwind_DebugHook handler argument.
    
    Note that a mangled address might not even fit into a void *, e.g.
    with AArch64 ilp32 ABI the return address is stored as 64bit, so
    the mangled return address cannot be accessed via _Unwind_GetPtr.
    
    This patch changes the unwinder hooks as follows:
    
    MD_POST_EXTRACT_ROOT_ADDR is removed: root address comes from
    __builtin_return_address which is not mangled.
    
    MD_POST_EXTRACT_FRAME_ADDR is renamed to MD_DEMANGLE_RETURN_ADDR,
    it now operates on _Unwind_Word instead of void *, so the hook
    should work when return address signing is enabled on AArch64 ilp32.
    (But for that __builtin_aarch64_autia1716 should be fixed to operate
    on 64bit input instead of a void *.)
    
    MD_POST_FROB_EH_HANDLER_ADDR is removed: it is the responsibility of
    __builtin_eh_return to do the mangling if necessary.
    
    2020-07-13  Szabolcs Nagy  <szabolcs.nagy@arm.com>
    
    libgcc/ChangeLog:
    
            PR target/94891
            * config/aarch64/aarch64-unwind.h (MD_POST_EXTRACT_ROOT_ADDR): Remove.
            (MD_POST_FROB_EH_HANDLER_ADDR): Remove.
            (MD_POST_EXTRACT_FRAME_ADDR): Rename to ...
            (MD_DEMANGLE_RETURN_ADDR): This.
            (aarch64_post_extract_frame_addr): Rename to ...
            (aarch64_demangle_return_addr): This.
            (aarch64_post_frob_eh_handler_addr): Remove.
            * unwind-dw2.c (uw_update_context): Demangle return address.
            (uw_frob_return_addr): Remove.
    
    (cherry picked from commit b097c7a27fb0796b2653a1d003cbf6b7a69d8961)

commit de7352725acf209ebb3e4c647cd35e176062231a
Author: Szabolcs Nagy <szabolcs.nagy@arm.com>
Date:   Thu Jun 4 13:42:16 2020 +0100

    aarch64: fix __builtin_eh_return with pac-ret [PR94891]
    
    Currently __builtin_eh_return takes a signed return address, which can
    cause ABI and API issues: 1) pointer representation problems if the
    address is passed around before eh return, 2) the source code needs
    pac-ret specific changes and needs to know if pac-ret is used in the
    current frame, 3) signed address may not be representible as void *
    (with ilp32 abi).
    
    Using address signing to protect eh return is ineffective because the
    instruction sequence in the unwinder that starts from the address
    signing and ends with a ret can be used as a return to anywhere gadget.
    Using indirect branch istead of ret with bti j landing pads at the
    target can reduce the potential of such gadget, which also implies
    that __builtin_eh_return should not take a signed address.
    
    This is a big hammer fix to the ABI and API issues: it turns pac-ret
    off for the caller completely (not just on the eh return path).  To
    harden the caller against ROP attacks, it should use indirect branch
    instead of ret, this is not attempted so the patch remains small and
    backportable.
    
    2020-07-13  Szabolcs Nagy  <szabolcs.nagy@arm.com>
    
    gcc/ChangeLog:
    
            PR target/94891
            * config/aarch64/aarch64.c (aarch64_return_address_signing_enabled):
            Disable return address signing if __builtin_eh_return is used.
    
    gcc/testsuite/ChangeLog:
    
            PR target/94891
            * gcc.target/aarch64/return_address_sign_1.c: Update test.
    
    (cherry picked from commit 2bc95be3bb8c8138e2e87c1c11c84bfede989d61)

commit d4fcc365700f94fd15c67b30a3051aeabbb767bc
Author: Szabolcs Nagy <szabolcs.nagy@arm.com>
Date:   Tue Jun 2 16:44:41 2020 +0100

    aarch64: fix return address access with pac [PR94891][PR94791]
    
    This is a big hammer fix for __builtin_return_address (PR target/94891)
    returning signed addresses (sometimes, depending on wether lr happens
    to be signed or not at the time of call which depends on optimizations),
    and similarly -pg may pass signed return address to _mcount
    (PR target/94791).
    
    At the time of return address expansion we don't know if it's signed or
    not so it is done unconditionally.
    
    2020-07-13  Szabolcs Nagy  <szabolcs.nagy@arm.com>
    
    gcc/ChangeLog:
    
            PR target/94891
            PR target/94791
            * config/aarch64/aarch64-protos.h (aarch64_return_addr_rtx): Declare.
            * config/aarch64/aarch64.c (aarch64_return_addr_rtx): New.
            (aarch64_return_addr): Use aarch64_return_addr_rtx.
            * config/aarch64/aarch64.h (PROFILE_HOOK): Likewise.
    
    (cherry picked from commit 463a54e5d4956143f81c1f23b91cbd2d93855741)

commit 3e7d58bc1271ce3f0c67eabba52e8241e150fb47
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Nov 25 09:35:18 2020 +0000

    Daily bump.

commit b49f17753ce6cc915e699fad2c4b458572dbea7c
Author: Martin Liska <mliska@suse.cz>
Date:   Wed Nov 25 07:56:57 2020 +0100

    changelog: fix parsing of a revert commit
    
    contrib/ChangeLog:
    
            * gcc-changelog/git_commit.py: Use revert_regex instead
            of string prefix.  Convert sets to literals.

commit ca8325441a6bb06292db9f165607d4e395f46c4b
Author: Jason Merrill <jason@redhat.com>
Date:   Fri Nov 20 15:20:45 2020 -0500

    dwarf2: ICE with local class in unused function [PR97918]
    
    Here, since we only mention bar<B>, we never emit debug information for it.
    But we do emit debug information for H<J>::h, so we need to refer to the
    debug info for bar<B>::J even though there is no bar<B>.  We deal with this
    sort of thing in dwarf2out with the limbo_die_list; parentless dies like J
    get attached to the CU at EOF.  But here, we were flushing the limbo list,
    then generating the template argument DIE for H<J> that refers to J, which
    adds J to the limbo list, too late to be flushed.  So let's flush a little
    later.
    
    gcc/ChangeLog:
    
            PR c++/97918
            * dwarf2out.c (dwarf2out_early_finish): flush_limbo_die_list
            after gen_scheduled_generic_parms_dies.
    
    gcc/testsuite/ChangeLog:
    
            PR c++/97918
            * g++.dg/debug/localclass2.C: New test.

commit a2bdff4f24d9065791e6d8820004772b9fe0c4c1
Author: Jason Merrill <jason@redhat.com>
Date:   Wed Jun 3 23:50:06 2020 -0400

    c++: Fix FE devirt with diamond inheritance [PR95158]
    
    This started breaking in GCC 8 because of the fix for PR15272; after that
    change, we (correctly) remember the lookup from template parsing time that
    found Base::foo through the non-dependent MiddleB base, and so we overlook
    the overrider in MiddleA.  But given that, the devirtualization condition
    from the fix for PR59031 is insufficient; we know that d has to be a
    Derived, and we found Base::foo in Base, but forcing a non-virtual call
    gets the wrong function.
    
    Fixed by removing the PR59031 code, and instead looking up the overrider in
    BINFO_VIRTUALS.
    
    gcc/cp/ChangeLog:
    
            PR c++/95158
            * class.c (lookup_vfn_in_binfo): New.
            * call.c (build_over_call): Use it.
            (build_new_method_call_1): Don't set LOOKUP_NONVIRTUAL.
            * cp-tree.h (resolves_to_fixed_type_p): Add default argument.
            (lookup_vfn_in_binfo): Declare.
    
    gcc/testsuite/ChangeLog:
    
            PR c++/95158
            * g++.dg/template/virtual5.C: New test.

commit 7642c1e7cf6c2f318145a08b570ee73d1506a84c
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Nov 24 00:18:01 2020 +0000

    Daily bump.

commit 4e676ee9fb8c030f84de26889bd0162bf5df6a58
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Nov 23 00:17:39 2020 +0000

    Daily bump.

commit 2e7de78bda34c4373ede147c5464012aa2a2f0e8
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Nov 22 00:17:42 2020 +0000

    Daily bump.

commit 53c17956412c0c3854f9f202a59c4923b0a13a83
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Nov 21 00:17:48 2020 +0000

    Daily bump.

commit 78fb37bdf9dc18b715fcd31d2443569a9ff2618a
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Nov 20 00:17:55 2020 +0000

    Daily bump.

commit f80afc3259680115d7fc090713c54c1bf43aca34
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Nov 19 00:17:50 2020 +0000

    Daily bump.

commit ba0caa157c91c7a63993b274ea0c6b33218069cc
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Nov 18 00:17:54 2020 +0000

    Daily bump.

commit 87fd84e59dcd9f0b2270e19015e7fa632de151e0
Author: Sebastian Pop <spop@amazon.com>
Date:   Tue Nov 17 18:56:15 2020 +0000

    add --with-{cpu,arch,tune}-{32,64} as alias flags for --with-{cpu,arch,tune}
    
    gcc/
            * config.gcc: add configure flags --with-{cpu,arch,tune}-{32,64}
            as alias flags for --with-{cpu,arch,tune} on AArch64.
            * doc/install.texi: Document new flags for aarch64.
    
    (cherry picked from commit 61ef34c503443dadc0744c5150256b90d138db0a)

commit 44337fbf592ba8498a5e614515d42c2beba3dcc8
Author: Sebastian Pop <spop@amazon.com>
Date:   Tue Nov 17 16:00:51 2020 +0000

    add --with-tune configure flag
    
    fixes a configure error on Arm64 when passing --with-tune=... to configure:
    ```
    This target does not support --with-tune.
    Valid --with options are: abi cpu arch
    ```
    The missing flag sets target tuning to a different value than generic tuning.
    
    gcc/
            * config.gcc: Add --with-tune to AArch64 configure flags.
    
    (cherry picked from commit 04dedd18141ccf42e59f7f5f0abc3b86dd63bdb9)

commit 3ee527923b1ce92c6b16c587d072720a6c813c95
Author: Richard Sandiford <richard.sandiford@arm.com>
Date:   Tue Nov 17 18:16:45 2020 +0000

    aarch64: Clear canary value after stack_protect_test [PR96191]
    
    The stack_protect_test patterns were leaving the canary value in the
    temporary register, meaning that it was often still in registers on
    return from the function.  An attacker might therefore have been
    able to use it to defeat stack-smash protection for a later function.
    
    gcc/
            PR target/96191
            * config/aarch64/aarch64.md (stack_protect_test_<mode>): Set the
            CC register directly, instead of a GPR.  Replace the original GPR
            destination with an extra scratch register.  Zero out operand 3
            after use.
            (stack_protect_test): Update accordingly.
    
    gcc/testsuite/
            PR target/96191
            * gcc.target/aarch64/stack-protector-1.c: New test.
            * gcc.target/aarch64/stack-protector-2.c: Likewise.
    
    (cherry picked from commit fe1a26429038d7cd17abc53f96a6f3e2639b605f)

commit ff3bb57646fb49090ce84b05bda5003b8f33fc07
Author: Tamar Christina <tamar.christina@arm.com>
Date:   Tue Nov 17 12:53:08 2020 +0000

    AArch64: Fix overflow in memcopy expansion on aarch64.
    
    This a partial backport for 0f801e0b6cc9f67c9a8983127e23161f6025c5b6 which fixes
    a truncation error for the inline memcopy on AArch64 on GCC-8.
    
    gcc/ChangeLog:
    
            PR target/97535
            * config/aarch64/aarch64.c (aarch64_expand_movme): Use
            unsigned HOST_WIDE_INT.
    
    gcc/testsuite/ChangeLog:
    
            PR target/97535
            * gcc.target/aarch64/pr97535.c: New test.

commit 3182e62d8c2fc4ffb082c272f568e9c5ccdb06f3
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Nov 17 00:17:43 2020 +0000

    Daily bump.

commit 7dbed9dead9002ee0cd4aa9c22b20942c6f13757
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Fri Aug 28 22:45:24 2020 +0100

    libstdc++: Fix std::gcd and std::lcm for unsigned integers [PR 92978]
    
    This fixes a bug with mixed signed and unsigned types, where converting
    a negative value to the unsigned result type alters the value. The
    solution is to obtain the absolute values of the arguments immediately
    and to perform the actual GCD or LCM algorithm on two arguments of the
    same type.
    
    In order to operate on the most negative number without overflow when
    taking its absolute, use an unsigned type for the result of the abs
    operation. For example, -INT_MIN will overflow, but -(unsigned)INT_MIN
    is (unsigned)INT_MAX+1U which is the correct value.
    
    libstdc++-v3/ChangeLog:
    
            PR libstdc++/92978
            * include/std/numeric (__abs_integral): Replace with ...
            (__detail::__absu): New function template that returns an
            unsigned type, guaranteeing it can represent the most
            negative signed value.
            (__detail::__gcd, __detail::__lcm): Require arguments to
            be unsigned and therefore already non-negative.
            (gcd, lcm): Convert arguments to absolute value as unsigned
            type before calling __detail::__gcd or __detail::__lcm.
            * include/experimental/numeric (gcd, lcm): Likewise.
            * testsuite/26_numerics/gcd/gcd_neg.cc: Adjust expected
            errors.
            * testsuite/26_numerics/lcm/lcm_neg.cc: Likewise.
            * testsuite/26_numerics/gcd/92978.cc: New test.
            * testsuite/26_numerics/lcm/92978.cc: New test.
            * testsuite/experimental/numeric/92978.cc: New test.
    
    (cherry picked from commit 82db1a42e9254c9009bbf8ac01366da4d1ab6df5)

commit 5d185d740f3a2b878b9be9bfb39f95d181ff31c0
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Nov 16 00:17:45 2020 +0000

    Daily bump.

commit b68b24c86d5875c2e89ca109f8e18dd36cecf097
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Nov 15 00:17:41 2020 +0000

    Daily bump.

commit 2b89fe5836b8a1919f5e1273ae01e395c0f5ca91
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Nov 14 00:17:52 2020 +0000

    Daily bump.

commit 6a5765a9b92e33baec228d07731c27a359aac5af
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Nov 13 00:17:52 2020 +0000

    Daily bump.

commit 6f53dfa9acec588c3c7fb19ab10a286c190045fe
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Nov 12 00:17:51 2020 +0000

    Daily bump.

commit 336b7bc769973b89b345f898373972d1b9231ee0
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Nov 11 00:17:49 2020 +0000

    Daily bump.

commit 390c069341b506f991a547188eeff434186ac423
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Nov 10 00:17:42 2020 +0000

    Daily bump.

commit 749cfa1f150d1e0749feb7aed8f68b8d0294b03f
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Thu Nov 5 17:26:13 2020 +0000

    libstdc++: Use non-throwing increment in recursive_directory_iterator [PR 97731]
    
    As described in the PR, the recursive_directory_iterator constructor
    calls advance(ec), but ec is a pointer so it calls _Dir::advance(bool).
    The intention was to either call advance() or advance(*ec) depending
    whether the pointer is null or not.
    
    This fixes the bug and renames the parameter to ecptr to make similar
    mistakes less likely in future.
    
    libstdc++-v3/ChangeLog:
    
            PR libstdc++/97731
            * src/filesystem/dir.cc (recursive_directory_iterator): Call the
            right overload of _Dir::advance.
            * testsuite/experimental/filesystem/iterators/97731.cc: New test.
    
    (cherry picked from commit 2f93a2a03a343a29f614a530d7657f1ed6347ed5)

commit b69c40fc481fca42eeefe55331ac3d0a7490e4c7
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Nov 9 00:17:40 2020 +0000

    Daily bump.

commit a551a1443d6ebfae4d22309665eedd778787a038
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Nov 8 00:17:45 2020 +0000

    Daily bump.

commit df2257f56401d7ac780d1434e0c3131384f9904b
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Nov 7 00:17:57 2020 +0000

    Daily bump.

commit 95181e74e430fd0edd5a1fa7b7d4472457fa840d
Author: Peter Bergner <bergner@linux.ibm.com>
Date:   Fri Nov 6 16:49:37 2020 -0600

    rs6000: Use the correct minimized testcase
    
    Use the correct minimized test case source rather than the large test
    source.
    
    gcc/testsuite/
            * gcc.target/powerpc/pr64505.c: Run everywhere.  Use correct minimized
            test case.
    
    (cherry picked from commit bd7ed0974fe634e0001a6132528a76d24b5e024f)

commit 217af6ff5d3c83eaff7fa9aba18c7cd57fdbc7a9
Author: Martin Liska <mliska@suse.cz>
Date:   Fri Nov 6 14:52:05 2020 +0100

    Sync gcc-changelog scripts.
    
    contrib/ChangeLog:
    
    2020-11-06  Martin Liska  <mliska@suse.cz>
    
            * gcc-changelog/git_commit.py: Sync.
            * gcc-changelog/git_email.py: Likewise.
            * gcc-changelog/git_repository.py: Likewise.
            * gcc-changelog/test_email.py: Likewise.
            * gcc-changelog/test_patches.txt: Likewise.
            * gcc-changelog/setup.cfg: New file.

commit 6340340503bee78bcd10051930cd1ccf811b3f00
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Nov 6 00:17:49 2020 +0000

    Daily bump.

commit 6739ef0748ce47b937563aaa8098d9b3a19bb3b7
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Nov 5 00:17:52 2020 +0000

    Daily bump.

commit 5f94c963732ed54bc09f33ff38f789a1c208392b
Author: Martin Liska <mliska@suse.cz>
Date:   Wed Nov 4 10:21:40 2020 +0100

    Remove duplicite ChangeLog entry.

commit 1ed4f10a9d2955d65766f15e9925c7c638657378
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Nov 4 00:18:02 2020 +0000

    Daily bump.

commit 80b6f6cf6374a6541a7515d7bfef1a3506db2a3d
Author: Richard Biener <rguenther@suse.de>
Date:   Tue Nov 3 10:24:02 2020 +0100

    testsuite/97688 - fix check_vect () with __AVX2__
    
    This fixes the cpuid check to always specify a subleaf zero
    which is required to detect AVX2 and doesn't hurt for level one.
    Without this fix we get zero runtime coverage when -mavx2 is
    specified.
    
    2020-11-03  Richard Biener  <rguenther@suse.de>
    
            PR testsuite/97688
            * gcc.dg/vect/tree-vect.h (check_vect): Fix the x86 cpuid
            check to always specify subleaf zero.
    
    (cherry picked from commit 8414529156e0bca37647c440c71beeca1d04ac86)

commit 100e274ed8bdf38e60991e8de8a80f010f9088a3
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Nov 3 00:17:40 2020 +0000

    Daily bump.

commit 7f5d91750e9f9db62fb8c46810f7145954a4e0eb
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Nov 2 20:54:16 2020 +0000

    Daily bump.

commit 3940a3ff2be0b445a5b24a222e83669e570f32a9
Author: Thomas Schwinge <thomas@codesourcery.com>
Date:   Thu Oct 29 10:29:19 2020 +0100

    libgomp testsuite: tell warning from error diagnostics, etc. [PR80219, PR85303]
    
    This changes makes 'dg-warning', 'dg-error', 'dg-bogus', 'dg-message' behave as
    expected, and also enables use of relative line numbers as well as 'dg-line'.
    
            libgomp/
            PR testsuite/80219
            PR testsuite/85303
            * testsuite/lib/libgomp.exp (libgomp_init): Set
            'gcc_warning_prefix', 'gcc_error_prefix'.
    
    (cherry picked from commit 528507fa0314c75d1105890e4781a475c8badd7c)

commit b0cb1f1fed535595660d03469fb922b2cd42ba4e
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Oct 30 00:17:38 2020 +0000

    Daily bump.

commit 2d327cb2bf9f5e9553700c7ecbb5c09e02ee5b4e
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Oct 29 00:18:10 2020 +0000

    Daily bump.

commit 7b81cfaa565fec77be7a6faa42d40f54a53f73a7
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Oct 28 00:17:57 2020 +0000

    Daily bump.

commit 50765cc3255c5b7b57029346583bff15f8ad1a61
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Oct 27 00:17:38 2020 +0000

    Daily bump.

commit 4b7395ba4a9282c685a4c0cdf89bcdafbd3feefb
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Oct 26 00:17:36 2020 +0000

    Daily bump.

commit c70827788716a77bca0597de12119b88594ac56e
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Oct 25 00:17:38 2020 +0000

    Daily bump.

commit 98931867e61552f76af90eb5337a28ccedbd604b
Author: Harald Anlauf <anlauf@gmx.de>
Date:   Sun Oct 18 20:15:26 2020 +0200

    PR libfortran/97063 - Wrong result for vector (step size is negative) * matrix
    
    The MATMUL intrinsic provided a wrong result for rank-1 times rank-2 array
    when a negative stride was used for addressing the elements of the rank-1
    array, because a check on strides was erroneously placed before the check
    on the rank.  Interchange order of checks.
    
    libgfortran/ChangeLog:
    
            * m4/matmul_internal.m4: Move check for rank-1 times rank-2 before
            checks on strides for rank-2 times rank-2.
            * generated/matmul_c10.c: Regenerated.
            * generated/matmul_c16.c: Likewise.
            * generated/matmul_c4.c: Likewise.
            * generated/matmul_c8.c: Likewise.
            * generated/matmul_i1.c: Likewise.
            * generated/matmul_i16.c: Likewise.
            * generated/matmul_i2.c: Likewise.
            * generated/matmul_i4.c: Likewise.
            * generated/matmul_i8.c: Likewise.
            * generated/matmul_r10.c: Likewise.
            * generated/matmul_r16.c: Likewise.
            * generated/matmul_r4.c: Likewise.
            * generated/matmul_r8.c: Likewise.
            * generated/matmulavx128_c10.c: Likewise.
            * generated/matmulavx128_c16.c: Likewise.
            * generated/matmulavx128_c4.c: Likewise.
            * generated/matmulavx128_c8.c: Likewise.
            * generated/matmulavx128_i1.c: Likewise.
            * generated/matmulavx128_i16.c: Likewise.
            * generated/matmulavx128_i2.c: Likewise.
            * generated/matmulavx128_i4.c: Likewise.
            * generated/matmulavx128_i8.c: Likewise.
            * generated/matmulavx128_r10.c: Likewise.
            * generated/matmulavx128_r16.c: Likewise.
            * generated/matmulavx128_r4.c: Likewise.
            * generated/matmulavx128_r8.c: Likewise.
    
    gcc/testsuite/ChangeLog:
    
            * gfortran.dg/matmul_20.f90: New test.
    
    (cherry picked from commit cd6cd6aed195b4ec7d652e8b41d60b60e174304e)

commit 10f9a44f74fa7e1597fc2d9a5edf5592ec957d52
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Oct 24 00:17:43 2020 +0000

    Daily bump.

commit fe7e1f2340efbdffd85366a7e0c622333816d41b
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Oct 23 00:17:49 2020 +0000

    Daily bump.

commit 2819cdd8ff8e15ed5efb4095143cf531cf3e50f9
Author: Andreas Krebbel <krebbel@linux.ibm.com>
Date:   Thu Oct 22 12:24:22 2020 +0200

    Fix PR97439
    
    decimal_real_maxval misses to set the sign flag in the REAL_VALUE_TYPE.
    
    gcc/ChangeLog:
    
            PR rtl-optimization/97439
            * dfp.c (decimal_real_maxval): Set the sign flag in the
            generated number.
    
    gcc/testsuite/ChangeLog:
    
            * gcc.dg/dfp/pr97439.c: New test.
    
    (cherry picked from commit e3f25eac67aee77af0b2038cd4d6cbd36d7f1030)

commit 5c5e23cd5cadc92033aeafd5a1c64011ab0302ce
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Oct 22 08:29:49 2020 +0000

    Daily bump.

commit 59e503c1f450d1a55497c6dedf307713f38eea2f
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Oct 21 00:17:47 2020 +0000

    Daily bump.

commit d64cc79d94dcd83032a500cae69cfcf50d2dce47
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Oct 20 00:17:42 2020 +0000

    Daily bump.

commit 541b5595460d493f70bc02e9d8679f961f6749ec
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Oct 19 00:17:39 2020 +0000

    Daily bump.

commit 34558681b17282a45d17671a6ea848306bc35728
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Oct 18 00:17:34 2020 +0000

    Daily bump.

commit 4afba91a3186ab35e66cfabd47d06bca4183b98f
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Oct 17 00:17:46 2020 +0000

    Daily bump.

commit 8af9b4e047f8c7254a10f0b23665ea3c4618bfd7
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Oct 16 00:17:44 2020 +0000

    Daily bump.

commit 5ea7a0ab434fd362cf3da56e2b78b61ed8e9799e
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Oct 15 00:17:49 2020 +0000

    Daily bump.

commit 29da194a4575d91d27307c5899dac3e4ab91a18d
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Oct 14 00:17:37 2020 +0000

    Daily bump.

commit 66982057a960665229e053e1a72ca2bf47c25fab
Author: Kyrylo Tkachov <kyrylo.tkachov@arm.com>
Date:   Thu Oct 8 15:20:23 2020 +0100

    AArch64: Add Neoverse N2 tuning model
    
    This is the GCC 8 patch for the Neoverse N2 tuning struct.
    It sets the AARCH64_EXTRA_TUNE_PREFER_ADVSIMD_AUTOVEC tune flag as well.
    
    Bootstrapped and tested on the branch.
    
    gcc/
            * config/aarch64/aarch64.c (neoversen2_tunings): Define.
            * config/aarch64/aarch64-cores.def (neoverse-n2): Use it.

commit 5d3052a4755173f447cfcffa361086562033c8be
Author: Kyrylo Tkachov <kyrylo.tkachov@arm.com>
Date:   Fri Oct 9 10:34:15 2020 +0100

    PR target/97349 AArch64: Incorrect types for some Neon vdupq_n_<...> intrinsics
    
    This patch fixes the PR by adjusting the input types of the intrinsic
    prototypes to the ones mandated by ACLE
    Turns out the tests in the testsuite were already using the correct
    ones, but implicit conversions hid the bug...
    
    Bootstrapped and tested on aarch64-none-linux-gnu.
    
    gcc/
            PR target/97349
            * config/aarch64/arm_neon.h (vdupq_n_p8, vdupq_n_p16,
            vdupq_n_p64, vdupq_n_s8, vdupq_n_s16, vdupq_n_u8, vdupq_n_u16):
            Fix argument type.
    
    gcc/testsuite/
            PR target/97349
            * gcc.target/aarch64/simd/pr97349.c: New test.
    
    (cherry picked from commit 8a3da2e6060ff0f61dae6aaada716e2c67f3d54f)
    (cherry picked from commit b9c1ca3e2fc84b40dc2ab70d12064e3d0eb8abdd)

commit a0bc59d3b78d23b117840b05baefe14abcf0564a
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Oct 13 00:17:41 2020 +0000

    Daily bump.

commit 8897e14141c46f3f740e898417f8b777b8ad4b09
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Oct 12 00:17:37 2020 +0000

    Daily bump.

commit 0657793704fb4e7c4fae4fdc445479b6f0cee564
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Oct 11 00:17:37 2020 +0000

    Daily bump.

commit 80218a1eb56bcfa7b338279ff8d677c2f8de6ecf
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Oct 10 00:17:40 2020 +0000

    Daily bump.

commit 03a38ad58202b465f90e1795ba8f52100c3dc4f4
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Oct 9 00:17:40 2020 +0000

    Daily bump.

commit 311183d74e4f3fd5a37749cfbb0960e655e715fb
Author: Kyrylo Tkachov <kyrylo.tkachov@arm.com>
Date:   Wed Sep 30 12:01:23 2020 +0100

    PR target/97150 AArch64: 2nd parameter of unsigned Neon scalar shift intrinsics should be signed
    
    In this PR the second argument to the intrinsics should be signed but we
    use an unsigned one erroneously.
    The corresponding builtins are already using the correct types so it's
    just a matter of correcting the signatures in arm_neon.h
    
    gcc/
            PR target/97150
            * config/aarch64/arm_neon.h (vqrshlb_u8): Make second argument
            signed.
            (vqrshlh_u16): Likewise.
            (vqrshls_u32): Likewise.
            (vqrshld_u64): Likewise.
            (vqshlb_u8): Likewise.
            (vqshlh_u16): Likewise.
            (vqshls_u32): Likewise.
            (vqshld_u64): Likewise.
            (vshld_u64): Likewise.
    
    gcc/testsuite/
            PR target/97150
            * gcc.target/aarch64/pr97150.c: New test.
    
    (cherry picked from commit 2d8fbebdb1eaca8de557ab3052535a8e4b8f8972)
    (cherry picked from commit 11af9c329ae528abb8c69ae8fae96a0f3fc6ed87)
    (cherry picked from commit d5c6ea22fe6db1ee19a178941a8c7f8ff5d0538c)

commit 7f8115b305f1a1a2ddec4f59bc08a3415359dda6
Author: Kyrylo Tkachov <kyrylo.tkachov@arm.com>
Date:   Wed Sep 30 12:00:20 2020 +0100

    PR target/96313 AArch64: vqmovun* return types should be unsigned
    
    In this PR we have the wrong return type for some intrinsics. It should
    be unsigned, but we implement it as signed.
    Fix this by adjusting the type qualifiers used when creating the
    builtins and fixing the type in the arm_neon.h intrinsic.
    With the adjustment in qualifiers we now don't need to cast the result
    when returning.
    
    Bootstrapped and tested on aarch64-none-linux-gnu.
    
    gcc/
            PR target/96313
            * config/aarch64/aarch64-simd-builtins.def (sqmovun): Use UNOPUS
            qualifiers.
            * config/aarch64/arm_neon.h (vqmovun_s16): Adjust builtin call.
            Remove unnecessary result cast.
            (vqmovun_s32): Likewise.
            (vqmovun_s64): Likewise.
            (vqmovunh_s16): Likewise.  Fix return type.
            (vqmovuns_s32): Likewise.
            (vqmovund_s64): Likewise.
    
    gcc/testsuite/
            PR target/96313
            * gcc.target/aarch64/pr96313.c: New test.
            * gcc.target/aarch64/scalar_intrinsics.c (test_vqmovunh_s16):
            Adjust return type.
            (test_vqmovuns_s32): Likewise.
            (test_vqmovund_s64): Likewise.
    
    (cherry picked from commit 135b043196b5575c690ef1e07bcbb49bf037c3a2)
    (cherry picked from commit 7d177b142dcbe841124fe023cb592914d4200e57)
    (cherry picked from commit 18d980d94f8d7187ce30bf23ddd365fa54189c36)

commit 6c343f9378c8dcd4b5f9d2b93a9568c736d00404
Author: Alan Modra <amodra@gmail.com>
Date:   Thu Oct 1 19:14:09 2020 +0930

    [RS6000] ICE in decompose, at rtl.h:2282
    
    during RTL pass: fwprop1
    gcc.dg/pr82596.c: In function 'test_cststring':
    gcc.dg/pr82596.c:27:1: internal compiler error: in decompose, at rtl.h:2282
    
    -m32 gcc/testsuite/gcc.dg/pr82596.c fails along with other tests after
    applying rtx_cost patches, which exposed a backend bug.
    legitimize_address when presented with the following address
            (plus (reg) (const_int 0x7ffffffff))
    attempts to rewrite it as a high/low sum.  The low part is 0xffff, or
    -1, making the high part 0x80000000.  But this is no longer canonical
    for SImode.
    
            * config/rs6000/rs6000.c (rs6000_legitimize_address): Use
            gen_int_mode for high part of address constant.
    
    (cherry picked from commit 4c69e61f4307865b95151006e480ae2022b30454)

commit ba597a9fad83b3721c5a4d30d9fcf27f8a29eb86
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Thu Oct 8 00:05:53 2020 +0100

    libstdc++: Fix non-reserved name in header
    
    There's a "il" parameter in a std::seed_seq constructor in <random>
    which is only reserved since C++14.
    
    libstdc++-v3/ChangeLog:
    
            * include/bits/random.h (seed_seq(initializer_list<T>)): Rename
            parameter to use reserved name.
            * testsuite/17_intro/names.cc: Check "il".
    
    (cherry picked from commit 23f75da95f5e8e09e9fcbd5b0d2885e6c44739aa)

commit 775c628e44e073df45e22a7b557f184e8966d05e
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Oct 8 00:17:44 2020 +0000

    Daily bump.

commit bc3b48a1d15b0920c32bba9efd880de2120b5f48
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Oct 7 00:17:45 2020 +0000

    Daily bump.

commit 367e8e91d16c92834855f306eedb402c43a4589f
Author: Alex Coplan <alex.coplan@arm.com>
Date:   Tue Oct 6 16:48:48 2020 +0100

    arm: Add missing part number for Neoverse V1
    
    This patch adds the part number for Neoverse V1 which was missing from
    the initial AArch32 support in GCC 8.
    
    gcc/ChangeLog:
    
            * config/arm/driver-arm.c (arm_cpu_table): Add neoverse-v1.

commit cb0a59cb7efa7d39e91ef28a692a424cc3c90fd3
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Oct 6 00:17:41 2020 +0000

    Daily bump.

commit 46f2b419640f5f233e56f80e99d902bb1da256b3
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Oct 5 00:17:32 2020 +0000

    Daily bump.

commit f02e03b729fb2b1c58f7acb9dec82af3d24b6084
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Oct 4 00:17:37 2020 +0000

    Daily bump.

commit a8e1fa105202bb92a483b5ff3512219427a46de9
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Oct 3 00:17:43 2020 +0000

    Daily bump.

commit cb79435c6832ae55857ac86cf14deb059294ad67
Author: Alex Coplan <alex.coplan@arm.com>
Date:   Fri Oct 2 18:07:30 2020 +0100

    arm: Add support for Neoverse N2 CPU
    
    This patch backports the AArch32 support for Arm's Neoverse N2 CPU to
    GCC 8.
    
    gcc/ChangeLog:
    
            * config/arm/arm-cpus.in (neoverse-n2): New.
            * config/arm/arm-tables.opt: Regenerate.
            * config/arm/arm-tune.md: Regenerate.
            * config/arm/driver-arm.c (arm_cpu_table): Add Neoverse N2.
            * doc/invoke.texi: Document support for Neoverse N2.

commit a9ba7f6cb74a6bc591d98983d37160edbc2ba06b
Author: Kyrylo Tkachov <kyrylo.tkachov@arm.com>
Date:   Fri Oct 2 15:39:11 2020 +0100

    AArch64: Add Neoverse V1 tuning struct
    
    This GCC 8 patch duplicates the Cortex-A72 tuning struct that's
    currently used for Neoverse V1 and
    AARCH64_EXTRA_TUNE_PREFER_ADVSIMD_AUTOVEC tune flag to prefer Advanced
    SIMD over SVE autovectorisation.
    
    gcc/
            * config/aarch64/aarch64.c (neoversev1_tunings): Define.
            * config/aarch64/aarch64-cores.def (zeus): Use it.
            (neoverse-v1): Likewise.

commit d44721af80bba1be9493a5944ba4afa72dc47f58
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Oct 2 00:17:45 2020 +0000

    Daily bump.

commit 42140cb640bd8ab9362d89b8ab01f31309069710
Author: Kyrylo Tkachov <kyrylo.tkachov@arm.com>
Date:   Thu Oct 1 17:36:13 2020 +0100

    AArch64: Add prefer_advsimd_autovec internal tune_flag
    
    This is the GCC 8 version of the prefer_advsimd_autovec patch.
    It's very similar to the GCC 9 version.
    
    Bootstrapped and tested on aarch64-none-linux-gnu.
    
    gcc/
            * config/aarch64/aarch64-tuning-flags.def
            (PREFER_ADVSIMD_AUTOVEC): Define.
            * config/aarch64/aarch64.c (aarch64_preferred_simd_mode): Use
            it.
            (aarch64_autovectorize_vector_sizes): Likewise.

commit 8586b291c50bd1796ef98d9c29837c622a59d8d1
Author: Kyrylo Tkachov <kyrylo.tkachov@arm.com>
Date:   Thu Oct 1 15:22:51 2020 +0100

    AArch64: Add rng feature to Neoverse V1
    
    This patch adds the +rng feature to the Neoverse V1 entry. It exists in
    the GCC 11 and 10 branches, but was missed out on GCC 9 and 8 as those
    didn't support the rng intrinsic then, but they do now.
    
    gcc/
            * config/aarch64/aarch64-cores.def (zeus): Add AARCH64_FL_RNG to
            features.
            (neoverse-v1): Likewise.

commit 442cec79a034be1c6ac315ad70dff11974468a5b
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Oct 1 11:04:56 2020 +0200

    s390: Fix up s390_atomic_assign_expand_fenv
    
    The following patch fixes
    -FAIL: gcc.dg/pr94780.c (internal compiler error)
    -FAIL: gcc.dg/pr94780.c (test for excess errors)
    -FAIL: gcc.dg/pr94842.c (internal compiler error)
    -FAIL: gcc.dg/pr94842.c (test for excess errors)
    on s390x-linux.  The fix is essentially the same as has been applied to many
    other targets (i386, aarch64, arm, rs6000, alpha, riscv).
    
    2020-10-01  Jakub Jelinek  <jakub@redhat.com>
    
            * config/s390/s390.c (s390_atomic_assign_expand_fenv): Use
            TARGET_EXPR instead of MODIFY_EXPR for the first assignments to
            fenv_var and old_fpc.  Formatting fixes.
    
    (cherry picked from commit 85516b71730d8f9401c34407ac3fadf5f1ebfc4e)

commit 925d3cf3e3640238b585480f100a46c428118370
Author: Alex Coplan <alex.coplan@arm.com>
Date:   Thu Oct 1 09:53:48 2020 +0100

    aarch64: Add support for Neoverse N2 CPU
    
    This patch backports the AArch64 support for Arm's Neoverse N2 CPU to
    GCC 8.
    
    gcc/ChangeLog:
    
            * config/aarch64/aarch64-cores.def: Add Neoverse N2.
            * config/aarch64/aarch64-tune.md: Regenerate.
            * doc/invoke.texi: Document AArch64 support for Neoverse N2.

commit e38531c3f12100cb69691598ebd5ab985a56bc25
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Oct 1 00:17:43 2020 +0000

    Daily bump.

commit 292d4ff8f63f0a611958a6e37cbf6545ba86fa63
Author: Kyrylo Tkachov <kyrylo.tkachov@arm.com>
Date:   Fri Sep 25 17:32:43 2020 +0100

    AArch64: Add Linux cpuinfo string for rng feature
    
    The Linux kernel has defined the cpuinfo string for the +rng feature, so
    this patch adds that to GCC so that -march=native can pick it up.
    Bootstrapped and tested on aarch64-none-linux-gnu.
    
    gcc/
            * config/aarch64/aarch64-option-extensions.def (rng): Add
            cpuinfo string.
    
    (cherry picked from commit 0d8f3f612d662ea3007c184a11ea5eb7d58760e7)
    (cherry picked from commit 05c3a208a19af25fbfd5c7cad8be12e23bf84cfa)

commit b0e6f198547d423b24520c13e3c29f3712026fce
Author: H.J. Lu <hjl.tools@gmail.com>
Date:   Wed Sep 23 12:11:45 2020 -0700

    x86: Use SET operation in MOVDIRI and MOVDIR64B
    
    Since MOVDIRI and MOVDIR64B write to memory, similar to UNSPEC_MOVNT,
    use SET operation in MOVDIRI and MOVDIR64B patterns with UNSPEC instead
    of UNSPECV.
    
    gcc/
    
            PR target/97184
            * config/i386/i386.md (UNSPECV_MOVDIRI): Renamed to ...
            (UNSPEC_MOVDIRI): This.
            (UNSPECV_MOVDIR64B): Renamed to ...
            (UNSPEC_MOVDIR64B): This.
            (movdiri<mode>): Use SET operation.
            (@movdir64b_<mode>): Likewise.
    
    gcc/testsuite/
    
            PR target/97184
            * gcc.target/i386/movdir64b.c: New test.
            * gcc.target/i386/movdiri32.c: Likewise.
            * gcc.target/i386/movdiri64.c: Likewise.
            * lib/target-supports.exp (check_effective_target_movdir): New.
    
    (cherry picked from commit 5521e8a629f8bee3a7778d69521d857496556d1f)

commit 1b4dc1d09eda31f2a8b5238df36d270830e3e3a0
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Sep 30 00:17:41 2020 +0000

    Daily bump.

commit 528348fca9a9a29ba40a32df8f1a0dc95b101aa7
Author: Hongyu Wang <hongyu.wang@intel.com>
Date:   Mon Sep 28 22:22:28 2020 +0000

    Add missing FSF copyright notes for x86 intrinsic headers.
    
    gcc/ChangeLog:
    
            PR target/97231
            * config/i386/pconfigintrin.h: Add FSF copyright notes.
            * config/i386/wbnoinvdintrin.h: Ditto.
    
    (cherry picked from commit d68f4d2ecb8ed6781e4e535d2abc498b1674d68a)

commit d41b3eac2b4a499317fce6cd392a545153c30845
Author: Alex Coplan <alex.coplan@arm.com>
Date:   Tue Sep 29 14:56:13 2020 +0100

    arm: Add support for Neoverse V1 CPU
    
    This patch backports the AArch32 support for Arm's Neoverse V1 CPU to
    GCC 8.
    
    gcc/ChangeLog:
    
            * config/arm/arm-cpus.in (neoverse-v1): New.
            * config/arm/arm-tables.opt: Regenerate.
            * config/arm/arm-tune.md: Regenerate.
            * doc/invoke.texi: Document AArch32 support for Neoverse V1.

commit 8fefe1028d314a81b2356e9e9b9e1644f2eeb0ef
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Sep 29 00:17:52 2020 +0000

    Daily bump.

commit 768c95cc6c84d504cf95fe948d808376628d2fa8
Author: Christophe Lyon <christophe.lyon@linaro.org>
Date:   Fri Sep 25 10:40:18 2020 +0000

    testsuite: [aarch64] Fix aarch64/advsimd-intrinsics/v{trn,uzp,zip}_half.c
    
    Since r11-3402 (g:65c9878641cbe0ed898aa7047b7b994e9d4a5bb1), the
    vtrn_half, vuzp_half and vzip_half started failing with
    
    vtrn_half.c:76:17: error: redeclaration of 'vector_float64x2' with no linkage
    vtrn_half.c:77:17: error: redeclaration of 'vector2_float64x2' with no linkage
    vtrn_half.c:80:17: error: redeclaration of 'vector_res_float64x2' with no linkage
    
    This is because r11-3402 now always declares float64x2 variables for
    aarch64, leading to a duplicate declaration in these testcases.
    
    The fix is simply to remove these now useless declarations.
    
    These tests are skipped on arm*, so there is no impact on that target.
    
    2020-09-25  Christophe Lyon  <christophe.lyon@linaro.org>
    
            gcc/testsuite/
            PR target/71233
            * gcc.target/aarch64/advsimd-intrinsics/vtrn_half.c: Remove
            declarations of vector, vector2, vector_res for float64x2 type.
            * gcc.target/aarch64/advsimd-intrinsics/vuzp_half.c: Likewise.
            * gcc.target/aarch64/advsimd-intrinsics/vzip_half.c: Likewise.
    
    (cherry picked from commit 8c775bf447e190024fa08c55e38db94dd013a393)

commit 3489c06cccb60c1af4c66aff82b670fb39f36266
Author: Kyrylo Tkachov <kyrylo.tkachov@arm.com>
Date:   Wed Sep 23 17:37:58 2020 +0100

    AArch64: Implement missing p128<->f64 reinterpret intrinsics
    
    This patch implements the missing reinterprets to and from poly128_t and
    float64x2_t.
    I've plugged in the appropriate testing in the advsimd-intrinsics.exp
    too.
    
    Bootstrapped and tested on aarch64-none-linux-gnu.
    Tested advsimd-intrinsics.exp on arm-none-eabi too to make sure arm
    testing isn't affected.
    
    gcc/
            PR target/71233
            * config/aarch64/arm_neon.h (vreinterpretq_f64_p128,
            vreinterpretq_p128_f64): Define.
    
    gcc/testsuite/
            PR target/71233
            * gcc.target/aarch64/advsimd-intrinsics/arm-neon-ref.h
            (clean_results): Add float64x2_t cleanup.
            (DECL_VARIABLE_128BITS_VARIANTS): Add float64x2_t variable.
            * gcc.target/aarch64/advsimd-intrinsics/vreinterpret_p128.c: Add
            testing of vreinterpretq_f64_p128, vreinterpretq_p128_f64.
    
    (cherry picked from commit 65c9878641cbe0ed898aa7047b7b994e9d4a5bb1)

commit 852423cd68b403d09a14f6436080243c609a57a8
Author: Kyrylo Tkachov <kyrylo.tkachov@arm.com>
Date:   Wed Sep 23 12:02:29 2020 +0100

    AArch64: Implement missing vrndns_f32 intrinsic
    
    This patch implements the missing vrndns_f32 intrinsic. This operates on a scalar float32_t value.
    It can be mapped down to a __builtin_aarch64_frintnsf builtin.
    
    This patch does that.
    
    Bootstrapped and tested on aarch64-none-linux-gnu.
    
    gcc/
            PR target/71233
            * config/aarch64/aarch64-simd-builtins.def (frintn): Use BUILTIN_VHSDF_HSDF
            for modes.  Remove explicit hf instantiation.
            * config/aarch64/arm_neon.h (vrndns_f32): Define.
    
    gcc/testsuite/
            PR target/71233
            * gcc.target/aarch64/simd/vrndns_f32_1.c: New test.
    
    (cherry picked from commit 02b5377b3766804059b7824330d33d0e1cef2e5b)

commit 99a8808add97c61b64a4cb979e4616731b86e58b
Author: Kyrylo Tkachov <kyrylo.tkachov@arm.com>
Date:   Wed Sep 23 11:07:50 2020 +0100

    AArch64: Implement missing _p64 intrinsics for vector permutes
    
    This patch implements some missing vector permute intrinsics operating on poly64x2_t types.
    They are implemented identically to their uint64x2_t brethren.
    
    Bootstrapped and tested on aarch64-none-linux-gnu.
    
    gcc/
            PR target/71233
            * config/aarch64/arm_neon.h (vtrn1q_p64, vtrn2q_p64, vuzp1q_p64,
            vuzp2q_p64, vzip1q_p64, vzip2q_p64): Define.
    
    gcc/testsuite/
            PR target/71233
            * gcc.target/aarch64/simd/trn_zip_p64_1.c: New test.
    
    (cherry picked from commit e8e818399d70c5a5a3d30a54d305c6e2b92e2c66)

commit a45e419416c641b7be5d4f4eb877fa390349c004
Author: Kyrylo Tkachov <kyrylo.tkachov@arm.com>
Date:   Wed Sep 23 10:32:42 2020 +0100

    AArch64: Implement vldrq_p128 intrinsic
    
    This patch implements the missing vldrq_p128 intrinsic that just loads from the appropriate pointer.
    
    Bootstrapped and tested on aarch64-none-linux-gnu.
    
    gcc/
            PR target/71233
            * config/aarch64/arm_neon.h (vldrq_p128): Define.
    
    gcc/testsuite/
            PR target/71233
            * gcc.target/aarch64/simd/vldrq_p128_1.c: New test.
    
    (cherry picked from commit f2868e4bcff2c7b882d01231f039459c00e59d7b)

commit c0817ceebffa0be66b39c874a5da408404330b42
Author: Kyrylo Tkachov <kyrylo.tkachov@arm.com>
Date:   Wed Sep 23 10:29:17 2020 +0100

    AArch64: Implement vstrq_p128 intrinsic
    
    This patch implements the missing vstrq_p128 intrinsic.
    It just performs a store of the poly128_t argument to a memory location.
    
    Bootstrapped and tested on aarch64-none-linux-gnu.
    
    gcc/
            PR target/71233
            * config/aarch64/arm_neon.h (vstrq_p128): Define.
    
    gcc/testsuite/
            PR target/71233
            * gcc.target/aarch64/simd/vstrq_p128_1.c: New test.
    
    (cherry picked from commit d23ea1e865301cd45f14ccbdb0bca49251fde9e1)

commit fd250940d0e3dd17302eb5e2653255c9189bfd70
Author: Kyrylo Tkachov <kyrylo.tkachov@arm.com>
Date:   Tue Sep 22 12:03:49 2020 +0100

    AArch64: Implement missing vcls intrinsics on unsigned types
    
    This patch implements some missing intrinsics that perform a CLS on unsigned SIMD types.
    
    Bootstrapped and tested on aarch64-none-linux-gnu.
    
    gcc/
            PR target/71233
            * config/aarch64/arm_neon.h (vcls_u8, vcls_u16, vcls_u32,
            vclsq_u8, vclsq_u16, vclsq_u32): Define.
    
    gcc/testsuite/
            PR target/71233
            * gcc.target/aarch64/simd/vcls_unsigned_1.c: New test.
    
    (cherry picked from commit 30957092db46d8798e632feefb5df634488dbb33)

commit e9ed4afbb6778dedfb1efa0ba92429a51d4d049b
Author: Kyrylo Tkachov <kyrylo.tkachov@arm.com>
Date:   Tue Sep 22 12:00:38 2020 +0100

    AArch64: Implement missing vceq*_p* intrinsics
    
    This patch implements some missing vceq* intrinsics on poly types.
    The behaviour is to produce the appropriate CMEQ instruction as for the unsigned types.
    
    Bootstrapped and tested on aarch64-none-linux-gnu.
    
    gcc/
            PR target/71233
            * config/aarch64/arm_neon.h (vceqq_p64, vceqz_p64, vceqzq_p64): Define.
    
    gcc/testsuite/
    
            PR target/71233
            * gcc.target/aarch64/simd/vceq_poly_1.c: New test.
    
    (cherry picked from commit d4703be185b422f637deebd3bb9222a41c8023d6)

commit 3c21a2f28014cd3bbfaee975a466dc3488052060
Author: Kyrylo Tkachov <kyrylo.tkachov@arm.com>
Date:   Tue Sep 22 11:58:36 2020 +0100

    AArch64: Implement poly-type vadd intrinsics
    
    This implements the vadd[p]_p* intrinsics.
    In terms of functionality they are aliases of veor operations on the relevant unsigned types.
    
    Bootstrapped and tested on aarch64-none-linux-gnu.
    
    gcc/
            PR target/71233
            * config/aarch64/arm_neon.h (vadd_p8, vadd_p16, vadd_p64, vaddq_p8,
            vaddq_p16, vaddq_p64, vaddq_p128): Define.
    
    gcc/testsuite/
            PR target/71233
            * gcc.target/aarch64/simd/vadd_poly_1.c: New test.
    
    (cherry picked from commit fa9ad35dae03dcb20c4ccb50ba1b351a8ab77970)

commit b65099a08e257cc9c93060c6299311faaa4b44e9
Author: Mark Eggleston <markeggleston@gcc.gnu.org>
Date:   Mon Sep 28 11:04:48 2020 +0100

    Revert "Fortran  :  ICE in build_field PR95614"
    
    This reverts commit e28cc38ac34cb4de31b983f817c6e5f7dde55e2c.

commit b0897beee417e690a31ccedd7985ebd72f65f1f0
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Sep 28 00:17:33 2020 +0000

    Daily bump.

commit 0ed1ce77f876cb05cd3e403c6c28e86fe0692f93
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Sun Sep 27 23:18:26 2020 +0200

    optabs: Don't reuse target for multi-word expansions if it overlaps operand(s) [PR97073]
    
    The following testcase is miscompiled on i686-linux, because
    we try to expand a double-word bitwise logic operation with op0
    being a (mem:DI u) and target (mem:DI u+4), i.e. partial overlap, and
    thus end up with:
            movl    4(%esp), %eax
            andl    u, %eax
            movl    %eax, u+4
    ! movl u+4, %eax optimized out
            andl    8(%esp), %eax
            movl    %eax, u+8
    rather than with the desired:
            movl    4(%esp), %edx
            movl    8(%esp), %eax
            andl    u, %edx
            andl    u+4, %eax
            movl    %eax, u+8
            movl    %edx, u+4
    because the store of the first word to target overwrites the second word of
    the operand.
    expand_binop for this (and several similar places) already check for target
    == op0 or target == op1, this patch just adds reg_overlap_mentioned_p calls
    next to it.
    Pedantically, at least for some of these it might be sufficient to force
    a different target if there is overlap but target is not rtx_equal_p to
    the operand (e.g. in this bitwise logical case, but e.g. not in the shift
    cases where there is reordering), though that would go against the
    preexisting target == op? checks and the rationale that REG_EQUAL notes in
    that case isn't correct.
    
    2020-09-27  Jakub Jelinek  <jakub@redhat.com>
    
            PR middle-end/97073
            * optabs.c (expand_binop, expand_absneg_bit, expand_unop,
            expand_copysign_bit): Check reg_overlap_mentioned_p between target
            and operand(s) and if it returns true, force a pseudo as target.
    
            * gcc.c-torture/execute/pr97073.c: New test.
    
    (cherry picked from commit a4b31d5807f2bc67c8999b3d53369cf2a5c6e1ec)

commit e28cc38ac34cb4de31b983f817c6e5f7dde55e2c
Author: Mark Eggleston <markeggleston@gcc.gnu.org>
Date:   Thu Jun 11 14:33:51 2020 +0100

    Fortran  :  ICE in build_field PR95614
    
    Local identifiers can not be the same as a module name.  Original
    patch by Steve Kargl resulted in name clashes between common block
    names and local identifiers.  A local identifier can be the same as
    a global identier if that identifier represents a common.  The patch
    was modified to allow global identifiers that represent a common
    block.
    
    2020-09-27  Steven G. Kargl  <kargl@gcc.gnu.org>
                Mark Eggleston  <markeggleston@gcc.gnu.org>
    
    gcc/fortran/
    
            PR fortran/95614
            * decl.c (gfc_get_common): Use gfc_match_common_name instead
            of match_common_name.
            * decl.c (gfc_bind_idents): Use gfc_match_common_name instead
            of match_common_name.
            * match.c : Rename match_common_name to gfc_match_common_name.
            * match.c (gfc_match_common): Use gfc_match_common_name instead
            of match_common_name.
            * match.h : Rename match_common_name to gfc_match_common_name.
            * resolve.c (resolve_common_vars): Check each symbol in a
            common block has a global symbol.  If there is a global symbol
            issue an error if the symbol type is known as is not a common
            block name.
    
    2020-09-27  Mark Eggleston  <markeggleston@gcc.gnu.org>
    
    gcc/testsuite/
    
            PR fortran/95614
            * gfortran.dg/pr95614_1.f90: New test.
            * gfortran.dg/pr95614_2.f90: New test.
    
    (cherry picked from commit e5a76af3a2f3324efc60b4b2778ffb29d5c377bc)

commit 346276f67fb7709b0e9cf6d0f870d19524309ee8
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Sep 27 00:17:36 2020 +0000

    Daily bump.

commit bf4ce3fcedf5931f25086aaf9f778fd6c750b3af
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Sep 26 00:17:45 2020 +0000

    Daily bump.

commit 1788d74b05b7936e9e8dd01a8f66701ad2bc2951
Author: Tamar Christina <tamar.christina@arm.com>
Date:   Thu Jan 10 03:30:59 2019 +0000

    AArch64: Implement Armv8.3-a complex arithmetic intrinsics
    
    I'd like to backport some patches from Tamar in GCC 9 to GCC 8 that implement the complex arithmetic intrinsics for Advanced SIMD.
    These should have been present in GCC 8 that gained support for Armv8.3-a.
    
    There were 4 follow-up fixes that I've rolled into the one commit.
    
    Bootstrapped and tested on aarch64-none-linux-gnu and arm-none-linux-gnueabihf on the GCC 8 branch.
    
    gcc/
            PR target/71233
            * config/aarch64/aarch64-builtins.c (enum aarch64_type_qualifiers):
            Add qualifier_lane_pair_index.
            (emit-rtl.h): Include.
            (TYPES_QUADOP_LANE_PAIR): New.
            (aarch64_simd_expand_args): Use it.
            (aarch64_simd_expand_builtin): Likewise.
            (AARCH64_SIMD_FCMLA_LANEQ_BUILTINS, aarch64_fcmla_laneq_builtin_datum): New.
            (FCMLA_LANEQ_BUILTIN, AARCH64_SIMD_FCMLA_LANEQ_BUILTIN_BASE,
            AARCH64_SIMD_FCMLA_LANEQ_BUILTINS, aarch64_fcmla_lane_builtin_data,
            aarch64_init_fcmla_laneq_builtins, aarch64_expand_fcmla_builtin): New.
            (aarch64_init_builtins): Add aarch64_init_fcmla_laneq_builtins.
            (aarch64_expand_buildin): Add AARCH64_SIMD_BUILTIN_FCMLA_LANEQ0_V2SF,
            AARCH64_SIMD_BUILTIN_FCMLA_LANEQ90_V2SF, AARCH64_SIMD_BUILTIN_FCMLA_LANEQ180_V2SF,
            AARCH64_SIMD_BUILTIN_FCMLA_LANEQ2700_V2SF, AARCH64_SIMD_BUILTIN_FCMLA_LANEQ0_V4HF,
            AARCH64_SIMD_BUILTIN_FCMLA_LANEQ90_V4HF, AARCH64_SIMD_BUILTIN_FCMLA_LANEQ180_V4HF,
            AARCH64_SIMD_BUILTIN_FCMLA_LANEQ270_V4HF.
            * config/aarch64/aarch64-c.c (aarch64_update_cpp_builtins): Add __ARM_FEATURE_COMPLEX.
            * config/aarch64/aarch64-simd-builtins.def (fcadd90, fcadd270, fcmla0, fcmla90,
            fcmla180, fcmla270, fcmla_lane0, fcmla_lane90, fcmla_lane180, fcmla_lane270,
            fcmla_laneq0, fcmla_laneq90, fcmla_laneq180, fcmla_laneq270,
            fcmlaq_lane0, fcmlaq_lane90, fcmlaq_lane180, fcmlaq_lane270): New.
            * config/aarch64/aarch64-simd.md (aarch64_fcmla_lane<rot><mode>,
            aarch64_fcmla_laneq<rot>v4hf, aarch64_fcmlaq_lane<rot><mode>,aarch64_fcadd<rot><mode>,
            aarch64_fcmla<rot><mode>): New.
            * config/aarch64/arm_neon.h:
            (vcadd_rot90_f16): New.
            (vcaddq_rot90_f16): New.
            (vcadd_rot270_f16): New.
            (vcaddq_rot270_f16): New.
            (vcmla_f16): New.
            (vcmlaq_f16): New.
            (vcmla_lane_f16): New.
            (vcmla_laneq_f16): New.
            (vcmlaq_lane_f16): New.
            (vcmlaq_rot90_lane_f16): New.
            (vcmla_rot90_laneq_f16): New.
            (vcmla_rot90_lane_f16): New.
            (vcmlaq_rot90_f16): New.
            (vcmla_rot90_f16): New.
            (vcmlaq_laneq_f16): New.
            (vcmla_rot180_laneq_f16): New.
            (vcmla_rot180_lane_f16): New.
            (vcmlaq_rot180_f16): New.
            (vcmla_rot180_f16): New.
            (vcmlaq_rot90_laneq_f16): New.
            (vcmlaq_rot270_laneq_f16): New.
            (vcmlaq_rot270_lane_f16): New.
            (vcmla_rot270_laneq_f16): New.
            (vcmlaq_rot270_f16): New.
            (vcmla_rot270_f16): New.
            (vcmlaq_rot180_laneq_f16): New.
            (vcmlaq_rot180_lane_f16): New.
            (vcmla_rot270_lane_f16): New.
            (vcadd_rot90_f32): New.
            (vcaddq_rot90_f32): New.
            (vcaddq_rot90_f64): New.
            (vcadd_rot270_f32): New.
            (vcaddq_rot270_f32): New.
            (vcaddq_rot270_f64): New.
            (vcmla_f32): New.
            (vcmlaq_f32): New.
            (vcmlaq_f64): New.
            (vcmla_lane_f32): New.
            (vcmla_laneq_f32): New.
            (vcmlaq_lane_f32): New.
            (vcmlaq_laneq_f32): New.
            (vcmla_rot90_f32): New.
            (vcmlaq_rot90_f32): New.
            (vcmlaq_rot90_f64): New.
            (vcmla_rot90_lane_f32): New.
            (vcmla_rot90_laneq_f32): New.
            (vcmlaq_rot90_lane_f32): New.
            (vcmlaq_rot90_laneq_f32): New.
            (vcmla_rot180_f32): New.
            (vcmlaq_rot180_f32): New.
            (vcmlaq_rot180_f64): New.
            (vcmla_rot180_lane_f32): New.
            (vcmla_rot180_laneq_f32): New.
            (vcmlaq_rot180_lane_f32): New.
            (vcmlaq_rot180_laneq_f32): New.
            (vcmla_rot270_f32): New.
            (vcmlaq_rot270_f32): New.
            (vcmlaq_rot270_f64): New.
            (vcmla_rot270_lane_f32): New.
            (vcmla_rot270_laneq_f32): New.
            (vcmlaq_rot270_lane_f32): New.
            (vcmlaq_rot270_laneq_f32): New.
            * config/aarch64/aarch64.h (TARGET_COMPLEX): New.
            * config/aarch64/iterators.md (UNSPEC_FCADD90, UNSPEC_FCADD270,
            UNSPEC_FCMLA, UNSPEC_FCMLA90, UNSPEC_FCMLA180, UNSPEC_FCMLA270): New.
            (FCADD, FCMLA): New.
            (rot): New.
            (FCMLA_maybe_lane): New.
            * config/arm/types.md (neon_fcadd, neon_fcmla): New.
    
    gcc/testsuite/
            PR target/71233
            * lib/target-supports.exp
            (check_effective_target_arm_v8_3a_complex_neon_ok_nocache,
            check_effective_target_arm_v8_3a_complex_neon_ok,
            add_options_for_arm_v8_3a_complex_neon,
            check_effective_target_arm_v8_3a_complex_neon_hw,
            check_effective_target_vect_complex_rot_N): New.
            * gcc.target/aarch64/advsimd-intrinsics/vector-complex.c: New test.
            * gcc.target/aarch64/advsimd-intrinsics/vector-complex_f16.c: New test.

commit 26020c849802a03f7a0634636d752ffbc7729096
Author: Kyrylo Tkachov <kyrylo.tkachov@arm.com>
Date:   Mon Oct 21 10:52:05 2019 +0000

    AArch64: Implement __rndr, __rndrrs intrinsics
    
    This patch implements the recently published[1] __rndr and __rndrrs
    intrinsics used to access the RNG in Armv8.5-A.
    The __rndrrs intrinsics can be used to reseed the generator too.
    They are guarded by the __ARM_FEATURE_RNG feature macro.
    A quirk with these intrinsics is that they store the random number in
    their pointer argument and return a status
    code if the generation succeeded.
    
    The instructions themselves write the CC flags indicating the success of
    the operation that we can then read with a CSET.
    Therefore this implementation makes use of the IGNORE indicator to the
    builtin expand machinery to avoid generating
    the CSET if its result is unused (the CC reg clobbering effect is still
    reflected in the pattern).
    I've checked that using unspec_volatile prevents undesirable CSEing of
    the instructions.
    
    [1] https://developer.arm.com/docs/101028/latest/data-processing-intrinsics
    
    gcc/
            PR target/71233
            * config/aarch64/aarch64.md (UNSPEC_RNDR, UNSPEC_RNDRRS):
            Define.
            (aarch64_rndr): New define_insn.
            (aarch64_rndrrs): Likewise.
            * config/aarch64/aarch64.h (AARCH64_ISA_RNG): Define.
            (TARGET_RNG): Likewise.
            (AARCH64_FL_RNG): Likewise.
            * config/aarch64/aarch64-option-extensions.def (rng): Define.
            * config/aarch64/aarch64-builtins.c (enum aarch64_builtins):
            Add AARCH64_BUILTIN_RNG_RNDR, AARCH64_BUILTIN_RNG_RNDRRS.
            (aarch64_init_rng_builtins): Define.
            (aarch64_init_builtins): Call aarch64_init_rng_builtins.
            (aarch64_expand_rng_builtin): Define.
            (aarch64_expand_builtin): Use IGNORE argument, handle
            RNG builtins.
            * config/aarch64/aarch64-c.c (aarch64_update_cpp_builtins):
            Define __ARM_FEATURE_RNG when TARGET_RNG.
            * config/aarch64/arm_acle.h (__rndr, __rndrrs): Define.
    
    gcc/testsuite/
            PR target/71233
            * gcc.target/aarch64/acle/rng_1.c: New test.

commit 5a2283440668f96a537f8a9e3cd5fc659d0643e2
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Sep 25 00:17:47 2020 +0000

    Daily bump.

commit 97c34eb5f57bb1d37f3feddefefa5f553bcea9fc
Author: H.J. Lu <hjl.tools@gmail.com>
Date:   Mon Sep 14 08:52:27 2020 -0700

    rtl_data: Add sp_is_clobbered_by_asm
    
    Add sp_is_clobbered_by_asm to rtl_data to inform backends that the stack
    pointer is clobbered by asm statement.
    
    gcc/
    
            PR target/97032
            * cfgexpand.c (expand_asm_stmt): Set sp_is_clobbered_by_asm to
            true if the stack pointer is clobbered by asm statement.
            * emit-rtl.h (rtl_data): Add sp_is_clobbered_by_asm.
            * config/i386/i386.c (ix86_get_drap_rtx): Set need_drap to true
            if the stack pointer is clobbered by asm statement.
    
    gcc/testsuite/
    
            PR target/97032
            * gcc.target/i386/pr97032.c: New test.
    
    (cherry picked from commit 453a20c65722719b9e2d84339f215e7ec87692dc)

commit a8ec9cc2241f4e0c387e78f23bae0100c74de6a8
Author: Kyrylo Tkachov <kyrylo.tkachov@arm.com>
Date:   Tue Sep 3 08:40:30 2019 +0000

    Add support for __jcvt intrinsic
    
    This patch implements the __jcvt ACLE intrinsic [1] that maps down to the FJCVTZS [2] instruction from Armv8.3-a.
    No fancy mode iterators or nothing. Just a single builtin, UNSPEC and define_insn and the associate plumbing.
    This patch also defines __ARM_FEATURE_JCVT to indicate when the intrinsic is available.
    
    [1] https://developer.arm.com/docs/101028/latest/data-processing-intrinsics
    [2] https://developer.arm.com/docs/ddi0596/latest/simd-and-floating-point-instructions-alphabetic-order/fjcvtzs-floating-point-javascript-convert-to-signed-fixed-point-rounding-toward-zero
    
    gcc/
            PR target/71233
            * config/aarch64/aarch64.md (UNSPEC_FJCVTZS): Define.
            (aarch64_fjcvtzs): New define_insn.
            * config/aarch64/aarch64.h (TARGET_JSCVT): Define.
            * config/aarch64/aarch64-builtins.c (aarch64_builtins):
            Add AARCH64_JSCVT.
            (aarch64_init_builtins): Initialize __builtin_aarch64_jcvtzs.
            (aarch64_expand_builtin): Handle AARCH64_JSCVT.
            * config/aarch64/aarch64-c.c (aarch64_update_cpp_builtins): Define
            __ARM_FEATURE_JCVT where appropriate.
            * config/aarch64/arm_acle.h (__jcvt): Define.
            * doc/sourcebuild.texi (aarch64_fjcvtzs_hw) Document new
            target supports option.
    
    gcc/testsuite/
            PR target/71233
            * gcc.target/aarch64/acle/jcvt_1.c: New test.
            * gcc.target/aarch64/acle/jcvt_2.c: New testcase.
            * lib/target-supports.exp
            (check_effective_target_aarch64_fjcvtzs_hw): Add new check for
            FJCVTZS hw.
    
    Co-Authored-By: Andrea Corallo  <andrea.corallo@arm.com>
    
    (cherry picked from commit e1d5d19ec4f84b67ac693fef5b2add7dc9cf056d)
    (cherry picked from commit 2c62952f8160bdc8d4111edb34a4bc75096c1e05)
    (cherry picked from commit d2b86e14c14020f3e119ab8f462e2a91bd7d46e5)
    (cherry picked from commit 58ae77d3ba70a2b9ccc90a90f3f82cf46239d5f1)

commit 7409639ab568d0d4babcc17370816a2ddd112b72
Author: Tamar Christina <tamar.christina@arm.com>
Date:   Mon Feb 25 17:46:16 2019 +0000

    AArch64: Update Armv8.4-a's FP16 FML intrinsics
    
    This patch updates the Armv8.4-a FP16 FML intrinsics's suffixes from u32 to f16
    to be more consistent with the naming convention for intrinsics.
    
    The specifications for these intrinsics have not been published yet so we do
    not need to maintain the old names.
    
    The patch was created with the following script:
    
    grep -lIE "(vfml[as].+)_u32" -r gcc/ | grep -iEv ".+Changelog.*" \
      | xargs sed -i -E -e "s/(vfml[as].+)_u32/\1_f16/g"
    
    gcc/
            PR target/71233
            * config/aarch64/arm_neon.h (vfmlal_low_u32, vfmlsl_low_u32,
            vfmlalq_low_u32, vfmlslq_low_u32, vfmlal_high_u32, vfmlsl_high_u32,
            vfmlalq_high_u32, vfmlslq_high_u32, vfmlal_lane_low_u32,
            vfmlsl_lane_low_u32, vfmlal_laneq_low_u32, vfmlsl_laneq_low_u32,
            vfmlalq_lane_low_u32, vfmlslq_lane_low_u32, vfmlalq_laneq_low_u32,
            vfmlslq_laneq_low_u32, vfmlal_lane_high_u32, vfmlsl_lane_high_u32,
            vfmlal_laneq_high_u32, vfmlsl_laneq_high_u32, vfmlalq_lane_high_u32,
            vfmlslq_lane_high_u32, vfmlalq_laneq_high_u32, vfmlslq_laneq_high_u32):
            Rename ...
            (vfmlal_low_f16, vfmlsl_low_f16, vfmlalq_low_f16, vfmlslq_low_f16,
            vfmlal_high_f16, vfmlsl_high_f16, vfmlalq_high_f16, vfmlslq_high_f16,
            vfmlal_lane_low_f16, vfmlsl_lane_low_f16, vfmlal_laneq_low_f16,
            vfmlsl_laneq_low_f16, vfmlalq_lane_low_f16, vfmlslq_lane_low_f16,
            vfmlalq_laneq_low_f16, vfmlslq_laneq_low_f16, vfmlal_lane_high_f16,
            vfmlsl_lane_high_f16, vfmlal_laneq_high_f16, vfmlsl_laneq_high_f16,
            vfmlalq_lane_high_f16, vfmlslq_lane_high_f16, vfmlalq_laneq_high_f16,
            vfmlslq_laneq_high_f16): ... To this.
    
    gcc/testsuite/
            PR target/71233
            * gcc.target/aarch64/fp16_fmul_high.h (test_vfmlal_high_u32,
            test_vfmlalq_high_u32, test_vfmlsl_high_u32, test_vfmlslq_high_u32):
            Rename ...
            (test_vfmlal_high_f16, test_vfmlalq_high_f16, test_vfmlsl_high_f16,
            test_vfmlslq_high_f16): ... To this.
            * gcc.target/aarch64/fp16_fmul_lane_high.h (test_vfmlal_lane_high_u32,
            tets_vfmlsl_lane_high_u32, test_vfmlal_laneq_high_u32,
            test_vfmlsl_laneq_high_u32, test_vfmlalq_lane_high_u32,
            test_vfmlslq_lane_high_u32, test_vfmlalq_laneq_high_u32,
            test_vfmlslq_laneq_high_u32): Rename ...
            (test_vfmlal_lane_high_f16, tets_vfmlsl_lane_high_f16,
            test_vfmlal_laneq_high_f16, test_vfmlsl_laneq_high_f16,
            test_vfmlalq_lane_high_f16, test_vfmlslq_lane_high_f16,
            test_vfmlalq_laneq_high_f16, test_vfmlslq_laneq_high_f16): ... To this.
            * gcc.target/aarch64/fp16_fmul_lane_low.h (test_vfmlal_lane_low_u32,
            test_vfmlsl_lane_low_u32, test_vfmlal_laneq_low_u32,
            test_vfmlsl_laneq_low_u32, test_vfmlalq_lane_low_u32,
            test_vfmlslq_lane_low_u32, test_vfmlalq_laneq_low_u32,
            test_vfmlslq_laneq_low_u32): Rename ...
            (test_vfmlal_lane_low_f16, test_vfmlsl_lane_low_f16,
            test_vfmlal_laneq_low_f16, test_vfmlsl_laneq_low_f16,
            test_vfmlalq_lane_low_f16, test_vfmlslq_lane_low_f16,
            test_vfmlalq_laneq_low_f16, test_vfmlslq_laneq_low_f16): ... To this.
            * gcc.target/aarch64/fp16_fmul_low.h (test_vfmlal_low_u32,
            test_vfmlalq_low_u32, test_vfmlsl_low_u32, test_vfmlslq_low_u32):
            Rename ...
            (test_vfmlal_low_f16, test_vfmlalq_low_f16, test_vfmlsl_low_f16,
            test_vfmlslq_low_f16): ... To This.
            * lib/target-supports.exp
            (check_effective_target_arm_fp16fml_neon_ok_nocache): Update test.
    
    (cherry picked from commit 9d04c986b6faed878dbcc86d2f9392a721a3936e)

commit 11e0e5fa724f9f6f979abe537d6485850abfe4d9
Author: Tamar Christina <tamar.christina@arm.com>
Date:   Mon May 21 10:33:30 2018 +0000

    Add missing AArch64 NEON instrinctics for Armv8.2-a to Armv8.4-a
    
    This patch adds the missing neon intrinsics for all 128 bit vector Integer modes for the
    three-way XOR and negate and xor instructions for Arm8.2-a to Armv8.4-a.
    
    gcc/
            PR target/71233
            * config/aarch64/aarch64-simd.md (aarch64_eor3qv8hi): Change to
            eor3q<mode>4.
            (aarch64_bcaxqv8hi): Change to bcaxq<mode>4.
            * config/aarch64/aarch64-simd-builtins.def (veor3q_u8, veor3q_u32,
            veor3q_u64, veor3q_s8, veor3q_s16, veor3q_s32, veor3q_s64, vbcaxq_u8,
            vbcaxq_u32, vbcaxq_u64, vbcaxq_s8, vbcaxq_s16, vbcaxq_s32,
            vbcaxq_s64): New.
            * config/aarch64/arm_neon.h: Likewise.
            * config/aarch64/iterators.md (VQ_I): New.
    
    gcc/testsuite/
            PR target/71233
            * gcc.target/aarch64/sha3.h (veor3q_u8, veor3q_u32,
            veor3q_u64, veor3q_s8, veor3q_s16, veor3q_s32, veor3q_s64, vbcaxq_u8,
            vbcaxq_u32, vbcaxq_u64, vbcaxq_s8, vbcaxq_s16, vbcaxq_s32,
            vbcaxq_s64): New.
            * gcc.target/aarch64/sha3_1.c: Likewise.
            * gcc.target/aarch64/sha3_2.c: Likewise.
            * gcc.target/aarch64/sha3_3.c: Likewise.
    
    (cherry picked from commit d21052ebd7ac9d545a26dde3229c57f872c1d5f3)

commit 1540e95f2c4bb49b1ce31d840ca29bec56d08167
Author: Alex Coplan <alex.coplan@arm.com>
Date:   Thu Sep 24 10:22:58 2020 +0100

    aarch64: Add support for Neoverse V1 CPU
    
    This patch backports the AArch64 support for Arm's Neoverse V1 CPU to
    GCC 8.
    
    gcc/ChangeLog:
    
            * config/aarch64/aarch64-cores.def: Add Neoverse V1.
            * config/aarch64/aarch64-tune.md: Regenerate.
            * doc/invoke.texi: Document support for Neoverse V1.

commit bbc1763ca663d8093f99f8b12b172eeb0814c72e
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Sep 24 00:17:45 2020 +0000

    Daily bump.

commit 04b5e64e6440bfccaee60921e9df1cfa653dad04
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Sep 23 00:17:39 2020 +0000

    Daily bump.

commit 874bdcd54b53283a82418649ea7457c1d6804562
Author: Vlad Lazar <vlad.lazar@arm.com>
Date:   Fri Aug 31 15:00:54 2018 +0000

    [AArch64] Implement new intrinsics vabsd_s64 and vnegd_s64.
    
    gcc/
    2018-08-31  Vlad Lazar  <vlad.lazar@arm.com>
    
            PR target/71233
            * config/aarch64/arm_neon.h (vabsd_s64): New.
            (vnegd_s64): Likewise.
    
    gcc/testsuite/
    2018-08-31  Vlad Lazar  <vlad.lazar@arm.com>
    
            PR target/71233
            * gcc.target/aarch64/scalar_intrinsics.c (test_vnegd_s64): New.
            * gcc.target/aarch64/vneg_s.c (RUN_TEST_SCALAR): New.
            (test_vnegd_s64): Likewise.
            * gcc.target/aarch64/vnegd_s64.c: New.
            * gcc.target/aarch64/vabsd_s64.c: New.
    
    (cherry picked from commit 66da5b53107962a1c115a9686f2220de27f276f7)

commit 6e86f0926f8de014cb0b0218442812e9f3ea8e95
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Tue Sep 22 09:39:33 2020 +0100

    libstdc++: Use correct argument type for __use_alloc [PR 96803]
    
    The _Tuple_impl constructor for allocator-extended construction from a
    different tuple type uses the _Tuple_impl's own _Head type in the
    __use_alloc test. That is incorrect, because the argument tuple could
    have a different type. Using the wrong type might select the
    leading-allocator convention when it should use the trailing-allocator
    convention, or vice versa.
    
    This backport includes the value category fix from r11-3348.
    
    libstdc++-v3/ChangeLog:
    
            PR libstdc++/96803
            * include/std/tuple
            (_Tuple_impl(allocator_arg_t, Alloc, const _Tuple_impl<U...>&)):
            Replace parameter pack with a type parameter and a pack and pass
            the first type to __use_alloc.
            * testsuite/20_util/tuple/cons/96803.cc: New test.
    
    (cherry picked from commit 5494edae83ad33c769bd1ebc98f0c492453a6417)

commit 8340a89f38932d1a8980ad9a4cb34f3bd0183b3a
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Sep 22 00:17:41 2020 +0000

    Daily bump.

commit 4c78dccc580d475d7204ea21d19e84d4d31194ce
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Sep 21 00:17:41 2020 +0000

    Daily bump.

commit ec4b95d001a8fe1ff7c2aa1d560b295ea8e3edd1
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Sep 20 00:17:36 2020 +0000

    Daily bump.

commit e0c7ff6237c78d99b40869afbdcdbe27fe98b698
Author: Tobias Burnus <tobias@codesourcery.com>
Date:   Thu Sep 17 14:01:09 2020 +0200

    Fortran: Avoid double-free with parse error (PR96041, PR93423)
    
    gcc/fortran/
    
            PR fortran/96041
            PR fortran/93423
            * decl.c (gfc_match_submod_proc): Avoid later double-free
            in the error case.
    
    (cherry picked from commit c12facd22881517127ebbe213d7ecc7fc1fcea4e)

commit aef149efb6d3fc97a38c74f7022124a6ba247746
Author: Harald Anlauf <anlauf@gmx.de>
Date:   Thu Jul 2 20:48:16 2020 +0200

    PR fortran/93423 - ICE on invalid with argument list for module procedure
    
    When recovering from an error, a NULL pointer dereference could occur.
    Check for that situation and punt.
    
    gcc/fortran/
            PR fortran/93423
            * resolve.c (resolve_symbol): Avoid NULL pointer dereference.
    
    (cherry picked from commit b88744905a46be44ffa3c57d46080f601ae832b8)

commit 766493676bd8068367167f0a8de2511305d6c9a0
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Sep 19 00:17:45 2020 +0000

    Daily bump.

commit 87ae45cdbd7b70a4c92d5137552228ed9ad9e9e7
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Wed Sep 16 09:42:33 2020 +0200

    store-merging: Consider also overlapping stores earlier in the by bitpos sorting [PR97053]
    
    As the testcases show, if we have something like:
      MEM <char[12]> [&b + 8B] = {};
      MEM[(short *) &b] = 5;
      _5 = *x_4(D);
      MEM <long long unsigned int> [&b + 2B] = _5;
      MEM[(char *)&b + 16B] = 88;
      MEM[(int *)&b + 20B] = 1;
    then in sort_by_bitpos the stores are almost like in the given order,
    except the first store is after the = _5; store.
    We can't coalesce the = 5; store with = _5;, because the latter is MEM_REF,
    while the former INTEGER_CST, and we can't coalesce the = _5 store with
    the = {} store because the former is MEM_REF, the latter INTEGER_CST.
    But we happily coalesce the remaining 3 stores, which is wrong, because the
    = _5; store overlaps those and is in between them in the program order.
    We already have code to deal with similar cases in check_no_overlap, but we
    deal only with the following stores in sort_by_bitpos order, not the earlier
    ones.
    
    The following patch checks also the earlier ones.  In coalesce_immediate_stores
    it computes the first one that needs to be checked (all the ones whose
    bitpos + bitsize is smaller or equal to merged_store->start don't need to be
    checked and don't need to be checked even for any following attempts because
    of the sort_by_bitpos sorting) and the end of that (that is the first store
    in the merged_store).
    
    2020-09-16  Jakub Jelinek  <jakub@redhat.com>
    
            PR tree-optimization/97053
            * gimple-ssa-store-merging.c (check_no_overlap): Add FIRST_ORDER,
            START, FIRST_EARLIER and LAST_EARLIER arguments.  Return false if
            any stores between FIRST_EARLIER inclusive and LAST_EARLIER exclusive
            has order in between FIRST_ORDER and LAST_ORDER and overlaps the to
            be merged store.
            (imm_store_chain_info::try_coalesce_bswap): Add FIRST_EARLIER argument.
            Adjust check_no_overlap caller.
            (imm_store_chain_info::coalesce_immediate_stores): Add first_earlier
            and last_earlier variables, adjust them during iterations.  Adjust
            check_no_overlap callers, call check_no_overlap even when extending
            overlapping stores by extra INTEGER_CST stores.
    
            * gcc.dg/store_merging_31.c: New test.
            * gcc.dg/store_merging_32.c: New test.
    
    (cherry picked from commit bd909071ac04e94f4b6f0baab64d0687ec55681d)

commit bbb72c2ccc271541e0d1feb25d2256d47041df59
Author: Richard Sandiford <richard.sandiford@arm.com>
Date:   Wed Apr 29 11:51:38 2020 +0100

    arm: Extend the PR94780 fix to arm
    
    Essentially the same fix as for x86.
    
    2020-04-29  Richard Sandiford  <richard.sandiford@arm.com>
    
    gcc/
            * config/arm/arm-builtins.c (arm_atomic_assign_expand_fenv): Use
            TARGET_EXPR instead of MODIFY_EXPR for the first assignments to
            fenv_var and new_fenv_var.
    
    (cherry picked from commit 1d7ead9cba91533291e0048d22b711ca124e19de)

commit e991bd1ecd85b421ce6fc9364e66068e293e3f00
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Sep 18 00:17:58 2020 +0000

    Daily bump.

commit 550a13d7163a480aa6158bae54dfd080995884d9
Author: Segher Boessenkool <segher@kernel.crashing.org>
Date:   Fri Apr 24 13:33:14 2020 +0000

    rs6000: Properly handle LE index munging in vec_shr (PR94710)
    
    The PR shows the compiler crashing with -mvsx -mlittle -O0.  This turns
    out to be caused by a failure to make of the higher bits in an index
    endian conversion.
    
    2020-04-24  Segher Boessenkool  <segher@kernel.crashing.org>
    
            PR target/94710
            * config/rs6000/vector.md (vec_shr_<mode> for VEC_L): Correct little
            endian byteshift_val calculation.
    
    (cherry picked from commit 9c725245beed2f056b67f5dc218fef6cb869c5f2)

commit 36290fcee3b6f1bb71dad0aaba7a68e71d825b74
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Wed Aug 26 10:30:15 2020 +0200

    dwarf2out: Fix up dwarf2out_next_real_insn caching [PR96729]
    
    The addition of NOTE_INSN_BEGIN_STMT and NOTE_INSN_INLINE_ENTRY notes
    reintroduced quadratic behavior into dwarf2out_var_location.
    This function needs to know the next real instruction to which the var
    location note applies, but the way final_scan_insn is called outside of
    final.c main loop doesn't make it easy to look up the next real insn in
    there (and for non-dwarf it is even useless).  Usually next real insn is
    only a few notes away, but we can have hundreds of thousands of consecutive
    notes only followed by a real insn.  dwarf2out_var_location to avoid the
    quadratic behavior contains a cache, it remembers the next note and when it
    is called again on that loc_note, it can use the previously computed
    dwarf2out_next_real_insn result, rather than walking the insn chain once
    again.  But, for NOTE_INSN_{BEGIN_STMT,INLINE_ENTRY} dwarf2out_var_location
    is not called while the code puts into the cache those notes, which means if
    we have e.g. in the worst case NOTE_INSN_VAR_LOCATION and
    NOTE_INSN_BEGIN_STMT notes alternating, the cache is not really used.
    
    The following patch fixes it by looking up the next NOTE_INSN_VAR_LOCATION
    if any.  While the lookup could be perhaps done together with looking for
    the next real insn once (e.g. in dwarf2out_next_real_insn or its copy),
    there are other dwarf2out_next_real_insn callers which don't need/want that
    behavior and if there are more than two NOTE_INSN_VAR_LOCATION notes
    followed by the same real insn, we need to do that "find next
    NOTE_INSN_VAR_LOCATION" walk anyway.
    
    On the testcase from the PR this patch speeds it 2.8times, from 0m0.674s
    to 0m0.236s (why it takes for the reporter more than 60s is unknown).
    
    2020-08-26  Jakub Jelinek  <jakub@redhat.com>
    
            PR debug/96729
            * dwarf2out.c (dwarf2out_next_real_insn): Adjust function comment.
            (dwarf2out_var_location): Look for next_note only if next_real is
            non-NULL, in that case look for the first non-deleted
            NOTE_INSN_VAR_LOCATION between loc_note and next_real, if any.
    
    (cherry picked from commit ca1afa261d03c9343dff1208325f87d9ba69ec7a)

commit 5378a7496db299c06f3be72a2db2eab280f29dbb
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Aug 25 13:49:40 2020 +0200

    gimple: Ignore *0 = {CLOBBER} in path isolation [PR96722]
    
    Clobbers of MEM_REF with NULL address are just fancy nops, something we just
    ignore and don't emit any code for it (ditto for other clobbers), they just
    mark end of life on something, so we shouldn't infer from those that there
    is some UB.
    
    2020-08-25  Jakub Jelinek  <jakub@redhat.com>
    
            PR tree-optimization/96722
            * gimple.c (infer_nonnull_range): Formatting fix.
            (infer_nonnull_range_by_dereference): Return false for clobber stmts.
    
            * g++.dg/opt/pr96722.C: New test.
    
    (cherry picked from commit a5b15fcb954ba63d58f0daa700281aba33b5f24a)

commit 2346f2b89780790210816eeea12b817e61652b26
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Aug 18 07:51:58 2020 +0200

    c: Fix -Wunused-but-set-* warning with _Generic [PR96571]
    
    The following testcase shows various problems with -Wunused-but-set*
    warnings and _Generic construct.  I think it is best to treat the selector
    and the ignored expressions as (potentially) read, because when they are
    parsed, the vars in there are already marked as TREE_USED.
    
    2020-08-18  Jakub Jelinek  <jakub@redhat.com>
    
            PR c/96571
            * c-parser.c (c_parser_generic_selection): Change match_found from bool
            to int, holding index of the match.  Call mark_exp_read on the selector
            expression and on expressions other than the selected one.
    
            * gcc.dg/Wunused-var-4.c: New test.
    
    (cherry picked from commit 6d42cbe5ad7a7b46437f2576c9920e44dc14b386)

commit 4ae2e2b9405aff8c242769c8139ce33115df568e
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Aug 11 16:46:49 2020 +0200

    c-family: Fix ICE in get_atomic_generic_size [PR96545]
    
    As the testcase shows, we would ICE if the type of the first argument of
    various atomic builtins was pointer to (non-void) incomplete type, we would
    assume that TYPE_SIZE_UNIT must be non-NULL.  This patch diagnoses it
    instead.  And also changes the TREE_CODE != INTEGER_CST check to
    !tree_fits_uhwi_p, as we use tree_to_uhwi after this and at least in theory
    the int could be too large and not fit.
    
    2020-08-11  Jakub Jelinek  <jakub@redhat.com>
    
            PR c/96545
            * c-common.c (get_atomic_generic_size): Require that first argument's
            type points to a complete type and use tree_fits_uhwi_p instead of
            just INTEGER_CST TREE_CODE check for the TYPE_SIZE_UNIT.
    
            * c-c++-common/pr96545.c: New test.
    
    (cherry picked from commit 7840b4dc05539cf5575b3e9ff57ff5f6c3da2cae)

commit 6b326d90d2195f00eb37dbf1be963ee3880af3b9
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Sat Aug 8 11:10:30 2020 +0200

    openmp: Handle clauses with gimple sequences in convert_nonlocal_omp_clauses properly
    
    If the walk_body on the various sequences of reduction, lastprivate and/or linear
    clauses needs to create a temporary variable, we should declare that variable
    in that sequence rather than outside, where it would need to be privatized inside of
    the construct.
    
    2020-08-08  Jakub Jelinek  <jakub@redhat.com>
    
            PR fortran/93553
            * tree-nested.c (convert_nonlocal_omp_clauses): For
            OMP_CLAUSE_REDUCTION, OMP_CLAUSE_LASTPRIVATE and OMP_CLAUSE_LINEAR
            save info->new_local_var_chain around walks of the clause gimple
            sequences and declare_vars if needed into the sequence.
    
    2020-08-08  Tobias Burnus  <tobias@codesourcery.com>
    
            PR fortran/93553
            * testsuite/libgomp.fortran/pr93553.f90: New test.
    
    (cherry picked from commit 676b5525e8333005bdc1c596ed086f1da27a450f)

commit d7cd4f2de0393cde7ec091fdbbb7875733d4a059
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Wed Jul 15 11:34:44 2020 +0200

    fix _mm512_{,mask_}cmp*_p[ds]_mask at -O0 [PR96174]
    
    The _mm512_{,mask_}cmp_p[ds]_mask and also _mm_{,mask_}cmp_s[ds]_mask
    intrinsics have an argument which must have a constant passed to it
    and so use an inline version only for ifdef __OPTIMIZE__ and have
    a #define for -O0.  But the _mm512_{,mask_}cmp*_p[ds]_mask intrinsics
    don't need a constant argument, they are essentially the first
    set with the constant added to them implicitly based on the comparison
    name, and so there is no #define version for them (correctly).
    But their inline versions are defined in between the first and s[ds]
    set and so inside of ifdef __OPTIMIZE__, which means that with -O0
    they aren't defined at all.
    
    This patch fixes that by moving those after the #ifdef __OPTIMIZE #else
    use #define #endif block.
    
    2020-07-15  Jakub Jelinek  <jakub@redhat.com>
    
            PR target/96174
            * config/i386/avx512fintrin.h (_mm512_cmpeq_pd_mask,
            _mm512_mask_cmpeq_pd_mask, _mm512_cmplt_pd_mask,
            _mm512_mask_cmplt_pd_mask, _mm512_cmple_pd_mask,
            _mm512_mask_cmple_pd_mask, _mm512_cmpunord_pd_mask,
            _mm512_mask_cmpunord_pd_mask, _mm512_cmpneq_pd_mask,
            _mm512_mask_cmpneq_pd_mask, _mm512_cmpnlt_pd_mask,
            _mm512_mask_cmpnlt_pd_mask, _mm512_cmpnle_pd_mask,
            _mm512_mask_cmpnle_pd_mask, _mm512_cmpord_pd_mask,
            _mm512_mask_cmpord_pd_mask, _mm512_cmpeq_ps_mask,
            _mm512_mask_cmpeq_ps_mask, _mm512_cmplt_ps_mask,
            _mm512_mask_cmplt_ps_mask, _mm512_cmple_ps_mask,
            _mm512_mask_cmple_ps_mask, _mm512_cmpunord_ps_mask,
            _mm512_mask_cmpunord_ps_mask, _mm512_cmpneq_ps_mask,
            _mm512_mask_cmpneq_ps_mask, _mm512_cmpnlt_ps_mask,
            _mm512_mask_cmpnlt_ps_mask, _mm512_cmpnle_ps_mask,
            _mm512_mask_cmpnle_ps_mask, _mm512_cmpord_ps_mask,
            _mm512_mask_cmpord_ps_mask): Move outside of __OPTIMIZE__ guarded
            section.
    
            * gcc.target/i386/avx512f-vcmppd-3.c: New test.
            * gcc.target/i386/avx512f-vcmpps-3.c: New test.
    
    (cherry picked from commit 12d69dbfff9dd5ad4a30b20d1636f5cab6425e8c)

commit cac9ff3a809f90236dc737a51eb8ff0e9088783c
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Jul 2 11:38:20 2020 +0200

    tree-cfg: Fix ICE with switch stmt to unreachable opt and forced labels [PR95857]
    
    The following testcase ICEs, because during the cfg cleanup, we see:
      switch (i$e_11) <default: <L12> [33.33%], case -3: <lab2> [33.33%], case 0: <L10> [33.33%], case 2: <lab2> [33.33%]>
    ...
    lab2:
      __builtin_unreachable ();
    where lab2 is FORCED_LABEL.  The way it works, we go through the case labels
    and when we reach the first one that points to gimple_seq_unreachable*
    basic block, we remove the edge (if any) from the switch bb to the bb
    containing the label and bbs reachable only through that edge we've just
    removed.  Once we do that, we must throw away all other cases that use
    the same label (or some other labels from the same bb we've removed the edge
    to and the bb).  To avoid quadratic behavior, this is not done by walking
    all remaining cases immediately before removing, but only when processing
    them later.
    For normal labels this works, fine, if the label is in a deleted bb, it will
    have NULL label_to_block and we handle that case, or, if the unreachable bb
    has some other edge to it, only the edge will be removed and not the bb,
    and again, find_edge will not find the edge and we only remove the case.
    And if a label would be to some other block, that other block wouldn't have
    been removed earlier because there would be still an edge from the switch
    block.
    Now, FORCED_LABEL (and I think DECL_NONLOCAL too) break this, because
    those labels aren't removed, but instead moved to some surrounding basic
    block.  So, when we later process those, when their gimple_seq_unreachable*
    basic block is removed, label_to_block will return some unrelated block
    (in the testcase the switch bb), so we decide to keep the case which doesn't
    seem to be unreachable, but we don't really have an edge from the switch
    block to the block the label got moved to.
    
    I thought first about punting in gimple_seq_unreachable* on
    FORCED_LABEL/DECL_NONLOCAL labels, but that might penalize even code that
    doesn't care, so this instead just makes sure that for
    FORCED_LABEL/DECL_NONLOCAL labels that are being removed (and thus moved
    randomly) we remember in a hash_set the fact that those labels should be
    treated as removed for the purpose of the optimization, and later on
    handle those labels that way.
    
    2020-07-02  Jakub Jelinek  <jakub@redhat.com>
    
            PR tree-optimization/95857
            * tree-cfg.c (group_case_labels_stmt): When removing an unreachable
            base_bb, remember all forced and non-local labels on it and later
            treat those as if they have NULL label_to_block.  Formatting fix.
            Fix a comment typo.
    
            * gcc.dg/pr95857.c: New test.
    
    (cherry picked from commit 00f24f56732861d09a9716fa5b6b8a96c2289143)

commit 111d3ebb356dd9f08bb0f9d0ad1044dd67a8c16c
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Sat Jun 27 12:38:23 2020 +0200

    c-family: Use TYPE_OVERFLOW_UNDEFINED instead of !TYPE_UNSIGNED in pointer_sum [PR95903]
    
    For lp64 targets and int off ... ptr[off + 1]
    is lowered in pointer_sum to *(ptr + ((sizetype) off + (sizetype) 1)).
    That is fine when signed integer wrapping is undefined (and is not done
    already if off has unsigned type), but changes behavior for -fwrapv, where
    overflow is well defined.  Runtime test could be:
    int
    main ()
    {
      char *p = __builtin_malloc (0x100000000UL);
      if (!p) return 0;
      char *q = p + 0x80000000UL;
      int o = __INT_MAX__;
      q[o + 1] = 1;
      if (q[-__INT_MAX__ - 1] != 1) __builtin_abort ();
      return 0;
    }
    with -fwrapv or so, not included in the testsuite because it requires 4GB
    allocation (with some other test it would be enough to have something
    slightly above 2GB, but still...).
    
    2020-06-27  Jakub Jelinek  <jakub@redhat.com>
    
            PR middle-end/95903
    gcc/c-family/
            * c-common.c (pointer_int_sum): Use TYPE_OVERFLOW_UNDEFINED instead of
            !TYPE_UNSIGNED check to see if we can apply distributive law and handle
            smaller precision intop operands separately.
    gcc/testsuite/
            * c-c++-common/pr95903.c: New test.
    
    (cherry picked from commit 37995960984ea2222346dd9d168d332cd6f7adf0)

commit 4163fd72a0606199c4ab867fde0efdff6346d6f3
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu May 28 23:40:54 2020 +0200

    c++: Try to complete decomp types [PR95328]
    
    Two years ago Paolo has added the
      else if (processing_template_decl && !COMPLETE_TYPE_P (type))
        pedwarn (...);
    lines into cp_finish_decomp.  For type dependent decl we punt much earlier,
    but even for types which aren't type dependent COMPLETE_TYPE_P might be
    false as this testcase shows, so this patch tries to complete_type first
    (the reason for writing it that way is that it is then followed by another
    else if and if complete_type returns error_mark_node, we shouldn't report
    anything, as a bug should have been reported already.
    
    2020-05-28  Jakub Jelinek  <jakub@redhat.com>
    
            PR c++/95328
            * decl.c (cp_finish_decomp): Call complete_type before checking
            COMPLETE_TYPE_P.
    
            * g++.dg/cpp1z/decomp53.C: New test.
    
    (cherry picked from commit 3d8d5ddb539a5254c7ef83414377f4c74c7701d4)

commit 38484dac88b157151db984790be0582bf66adcfb
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu May 14 09:51:05 2020 +0200

    openmp: Fix placement of 2nd+ preparation statement for PHIs in simd clone lowering [PR95108]
    
    For normal stmts, preparation statements are inserted before the stmt, so if we need multiple,
    they are in the correct order, but for PHIs we emit them after labels in the entry successor
    bb, and we used to emit them in the reverse order that way.
    
    2020-05-14  Jakub Jelinek  <jakub@redhat.com>
    
            PR middle-end/95108
            * omp-simd-clone.c (struct modify_stmt_info): Add after_stmt member.
            (ipa_simd_modify_stmt_ops): For PHIs, only add before first stmt in
            entry block if info->after_stmt is NULL, otherwise add after that stmt
            and update it after adding each stmt.
            (ipa_simd_modify_function_body): Initialize info.after_stmt.
    
            * gcc.dg/gomp/pr95108.c: New test.
    
    (cherry picked from commit d0fb9ffc1b8f3b86bbdf0e915cec2136141b329b)

commit 819a383e5952dad6613791adba16c44d81da749b
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Wed May 13 11:22:37 2020 +0200

    Fix -fcompare-debug issue in purge_dead_edges [PR95080]
    
    The following testcase fails with -fcompare-debug, the bug used to be latent
    since introduction of -fcompare-debug.
    The loop at the start of purge_dead_edges behaves differently between -g0
    and -g - if the last insn is a DEBUG_INSN, then it skips not just
    DEBUG_INSNs but also NOTEs until it finds some other real insn (or bb head),
    while with -g0 it will not skip any NOTEs, so if we have
    real_insn
    note
    debug_insn // not present with -g0
    then with -g it might remove useless REG_EH_REGION from real_insn, while
    with -g0 it will not.
    
    Yet another option would be not skipping NOTE_P in the loop; I couldn't find
    in history rationale for why it is done.
    
    2020-05-13  Jakub Jelinek  <jakub@redhat.com>
    
            PR debug/95080
            * cfgrtl.c (purge_dead_edges): Skip over debug and note insns even
            if the last insn is a note.
    
            * g++.dg/opt/pr95080.C: New test.
    
    (cherry picked from commit 18edc195442291525e04f0fa4d5ef972155117da)

commit 79a11b9833baa91cef7c881532e01470fa25047f
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Wed May 6 23:38:13 2020 +0200

    c++: Avoid strict_aliasing_warning on dependent types or expressions [PR94951]
    
    The following testcase gets a bogus warning during build_base_path,
    when cp_build_indirect_ref* calls strict_aliasing_warning with a dependent
    expression.  IMHO calling get_alias_set etc. on dependent types feels wrong
    to me, we should just defer the warnings in those cases until instantiation
    and only handle the cases where neither type nor expr are dependent.
    
    2020-05-06  Jakub Jelinek  <jakub@redhat.com>
    
            PR c++/94951
            * typeck.c (cp_strict_aliasing_warning): New function.
            (cp_build_indirect_ref_1, build_reinterpret_cast_1): Use
            it instead of strict_aliasing_warning.
    
            * g++.dg/warn/Wstrict-aliasing-bogus-tmpl.C: New test.
    
    (cherry picked from commit d82414ebcf7716ea24688510594a2c464a105908)

commit 102c275fde47f913bb081e76fe4ca3388940aaa1
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Wed May 6 09:40:33 2020 +0200

    riscv: Fix up riscv_atomic_assign_expand_fenv [PR94950]
    
    Similarly to the fixes on many other targets, riscv needs to use TARGET_EXPR
    to avoid having the create_tmp_var_raw temporaries without proper DECL_CONTEXT
    and not mentioned in local decls.
    
    2020-05-06  Jakub Jelinek  <jakub@redhat.com>
    
            PR target/94950
            * config/riscv/riscv-builtins.c (riscv_atomic_assign_expand_fenv): Use
            TARGET_EXPR instead of MODIFY_EXPR for first assignment to old_flags.
    
    (cherry picked from commit 5454a13add37fa6a8eedbf9d2f6bdc63a7825e2c)

commit 10f44fe62fc461d4333290bfdadee4d2ea1f79d4
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Wed May 6 09:31:19 2020 +0200

    combine: Don't replace SET_SRC with REG_EQUAL note content if SET_SRC has side-effects [PR94873]
    
    There were some discussions about whether REG_EQUAL notes are valid on insns with a single
    set which contains auto-inc-dec side-effects in the SET_SRC and the majority thinks that
    it should be valid.  So, this patch fixes the combiner to punt in that case, because otherwise
    the auto-inc-dec side-effects from the SET_SRC are lost.
    
    2020-05-06  Jakub Jelinek  <jakub@redhat.com>
    
            PR rtl-optimization/94873
            * combine.c (combine_instructions): Don't optimize using REG_EQUAL
            note if SET_SRC (set) has side-effects.
    
            * gcc.dg/pr94873.c: New test.
    
    (cherry picked from commit 8982e39b46b1e4a4b09022ddebd758b77ab73bac)

commit b79f3e1e67ca0c5e14b677e3fc847a3c79881b5f
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Apr 30 21:48:30 2020 +0200

    c: Fix ICE with _Atomic side-effect in nested fn param decls [PR94842]
    
    If there are _Atomic side-effects in the parameter declarations
    of non-nested function, when they are parsed, current_function_decl is
    NULL, the create_artificial_label created labels during build_atomic* are
    then adjusted by store_parm_decls through set_labels_context_r callback.
    Unfortunately, if such thing happens in nested function parameter
    declarations, while those decls are parsed current_function_decl is the
    parent function (and am not sure it is a good idea to temporarily clear it,
    some code perhaps should be aware it is in a nested function, or it can
    refer to variables from the parent function etc.) and that means
    store_param_decls through set_labels_context_r doesn't adjust anything.
    As those labels are emitted in the nested function body rather than in the
    parent, I think it is ok to override the context in those cases.
    
    2020-04-30  Jakub Jelinek  <jakub@redhat.com>
    
            PR c/94842
            * c-decl.c (set_labels_context_r): In addition to context-less
            LABEL_DECLs adjust also LABEL_DECLs with context equal to
            parent function if any.
            (store_parm_decls): Adjust comment.
    
            * gcc.dg/pr94842.c: New test.
    
    (cherry picked from commit 61fb8963c22d91152a9c46a3512307bef3b3d7f7)

commit e5f9acf964cd7956359d1cbbbd3670545ebfd714
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Sat May 2 12:09:04 2020 +0200

    tilegx: Unbreak build
    
    ../../gcc/config/tilegx/tilegx.md:4109:1: ambiguous attribute 'n'; could be '1' (via 'I124MODE:n') or '4' (via 'I48MODE:n')
    ../../gcc/config/tilegx/tilegx.md:4109:1: ambiguous attribute 'n'; could be '1' (via 'I124MODE:n') or '' (via 'I48MODE:n')
    ../../gcc/config/tilegx/tilegx.md:4109:1: ambiguous attribute 'n'; could be '2' (via 'I124MODE:n') or '4' (via 'I48MODE:n')
    ../../gcc/config/tilegx/tilegx.md:4109:1: ambiguous attribute 'n'; could be '2' (via 'I124MODE:n') or '' (via 'I48MODE:n')
    ../../gcc/config/tilegx/tilegx.md:4109:1: ambiguous attribute 'n'; could be '4' (via 'I124MODE:n') or '' (via 'I48MODE:n')
    
    The insn name already uses <I124MODE:n> explicitly, just the preparation
    stmts don't, and as it creates a I124MODE lowpart subreg of a word mode
    register, <I124MODE:n> seems obviously correct.
    
    2020-05-02  Jakub Jelinek  <jakub@redhat.com>
    
            * config/tilegx/tilegx.md
            (insn_stnt<I124MODE:n>_add<I48MODE:bitsuffix>): Use <I124MODE:n>
            rather than just <n>.
    
    (cherry picked from commit 0118d0397f94c307b76aa14abec99347a93da621)

commit a0159c30c19a1271f6b6ba6bc489c2c1c59954a3
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Wed Apr 29 17:31:26 2020 +0200

    x86: Fix -O0 remaining intrinsic macros [PR94832]
    
    A few other macros seem to suffer from the same issue.  What I've done was:
    cat gcc/config/i386/*intrin.h | sed -e ':x /\\$/ { N; s/\\\n//g ; bx }' \
    | grep '^[[:blank:]]*#[[:blank:]]*define[[:blank:]].*(' | sed 's/[      ]\+/ /g' \
    > /tmp/macros
    and then looking for regexps:
    )[a-zA-Z]
    ) [a-zA-Z]
    [a-zA-Z][-+*/%]
    [a-zA-Z] [-+*/%]
    [-+*/%][a-zA-Z]
    [-+*/%] [a-zA-Z]
    in the resulting file.
    
    2020-04-29  Jakub Jelinek  <jakub@redhat.com>
    
            PR target/94832
            * config/i386/avx512bwintrin.h (_mm512_alignr_epi8,
            _mm512_mask_alignr_epi8, _mm512_maskz_alignr_epi8): Wrap macro operands
            used in casts into parens.
            * config/i386/avx512fintrin.h (_mm512_cvt_roundps_ph, _mm512_cvtps_ph,
            _mm512_mask_cvt_roundps_ph, _mm512_mask_cvtps_ph,
            _mm512_maskz_cvt_roundps_ph, _mm512_maskz_cvtps_ph,
            _mm512_mask_cmp_epi64_mask, _mm512_mask_cmp_epi32_mask,
            _mm512_mask_cmp_epu64_mask, _mm512_mask_cmp_epu32_mask,
            _mm512_mask_cmp_round_pd_mask, _mm512_mask_cmp_round_ps_mask,
            _mm512_mask_cmp_pd_mask, _mm512_mask_cmp_ps_mask): Likewise.
            * config/i386/avx512vlbwintrin.h (_mm256_mask_alignr_epi8,
            _mm256_maskz_alignr_epi8, _mm_mask_alignr_epi8, _mm_maskz_alignr_epi8,
            _mm256_mask_cmp_epu8_mask): Likewise.
            * config/i386/avx512vlintrin.h (_mm_mask_cvtps_ph, _mm_maskz_cvtps_ph,
            _mm256_mask_cvtps_ph, _mm256_maskz_cvtps_ph): Likewise.
            * config/i386/f16cintrin.h (_mm_cvtps_ph, _mm256_cvtps_ph): Likewise.
            * config/i386/shaintrin.h (_mm_sha1rnds4_epu32): Likewise.
    
    (cherry picked from commit 0c8217b16f307c3eedce8f22354714938613f701)

commit b45a7ab268df5803f6980642bc32a3c4f39d6e90
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Wed Apr 29 17:30:22 2020 +0200

    x86: Fix -O0 intrinsic *gather*/*scatter* macros [PR94832]
    
    As reported in the PR, while most intrinsic -O0 macro argument uses
    are properly wrapped in ()s or used in context where having a complex
    expression passed as the argument doesn't pose a problem (e.g. when
    macro argument use is in between commas, or between ( and comma, or
    between comma and ) etc.), especially the gather/scatter macros don't do
    this and if one passes to some macro e.g. x + y as argument, the
    corresponding inline function would do cast on the argument, but
    the macro does (int) ARG, then it is (int) x + y rather than (int) (x + y).
    
    The following patch fixes those issues in *gather/*scatter*; additionally,
    the AVX2 macros were passing incorrect mask of e.g.
    (__v2df)_mm_set1_pd((double)(long long int) -1)
    which is IMHO equivalent to
    (__v2df){-1.0, -1.0}
    when it really wants to pass __v2df vector with all bits set.
    I've used what the inline functions use for those cases.
    
    2020-04-29  Jakub Jelinek  <jakub@redhat.com>
    
            PR target/94832
            * config/i386/avx2intrin.h (_mm_mask_i32gather_pd,
            _mm256_mask_i32gather_pd, _mm_mask_i64gather_pd,
            _mm256_mask_i64gather_pd, _mm_mask_i32gather_ps,
            _mm256_mask_i32gather_ps, _mm_mask_i64gather_ps,
            _mm256_mask_i64gather_ps, _mm_i32gather_epi64,
            _mm_mask_i32gather_epi64, _mm256_i32gather_epi64,
            _mm256_mask_i32gather_epi64, _mm_i64gather_epi64,
            _mm_mask_i64gather_epi64, _mm256_i64gather_epi64,
            _mm256_mask_i64gather_epi64, _mm_i32gather_epi32,
            _mm_mask_i32gather_epi32, _mm256_i32gather_epi32,
            _mm256_mask_i32gather_epi32, _mm_i64gather_epi32,
            _mm_mask_i64gather_epi32, _mm256_i64gather_epi32,
            _mm256_mask_i64gather_epi32): Surround macro parameter uses with
            parens.
            (_mm_i32gather_pd, _mm256_i32gather_pd, _mm_i64gather_pd,
            _mm256_i64gather_pd, _mm_i32gather_ps, _mm256_i32gather_ps,
            _mm_i64gather_ps, _mm256_i64gather_ps): Likewise.  Don't use
            as mask vector containing -1.0 or -1.0f elts, but instead vector
            with all bits set using _mm*_cmpeq_p? with zero operands.
            * config/i386/avx512fintrin.h (_mm512_i32gather_ps,
            _mm512_mask_i32gather_ps, _mm512_i32gather_pd,
            _mm512_mask_i32gather_pd, _mm512_i64gather_ps,
            _mm512_mask_i64gather_ps, _mm512_i64gather_pd,
            _mm512_mask_i64gather_pd, _mm512_i32gather_epi32,
            _mm512_mask_i32gather_epi32, _mm512_i32gather_epi64,
            _mm512_mask_i32gather_epi64, _mm512_i64gather_epi32,
            _mm512_mask_i64gather_epi32, _mm512_i64gather_epi64,
            _mm512_mask_i64gather_epi64, _mm512_i32scatter_ps,
            _mm512_mask_i32scatter_ps, _mm512_i32scatter_pd,
            _mm512_mask_i32scatter_pd, _mm512_i64scatter_ps,
            _mm512_mask_i64scatter_ps, _mm512_i64scatter_pd,
            _mm512_mask_i64scatter_pd, _mm512_i32scatter_epi32,
            _mm512_mask_i32scatter_epi32, _mm512_i32scatter_epi64,
            _mm512_mask_i32scatter_epi64, _mm512_i64scatter_epi32,
            _mm512_mask_i64scatter_epi32, _mm512_i64scatter_epi64,
            _mm512_mask_i64scatter_epi64): Surround macro parameter uses with
            parens.
            * config/i386/avx512pfintrin.h (_mm512_prefetch_i32gather_pd,
            _mm512_prefetch_i32gather_ps, _mm512_mask_prefetch_i32gather_pd,
            _mm512_mask_prefetch_i32gather_ps, _mm512_prefetch_i64gather_pd,
            _mm512_prefetch_i64gather_ps, _mm512_mask_prefetch_i64gather_pd,
            _mm512_mask_prefetch_i64gather_ps, _mm512_prefetch_i32scatter_pd,
            _mm512_prefetch_i32scatter_ps, _mm512_mask_prefetch_i32scatter_pd,
            _mm512_mask_prefetch_i32scatter_ps, _mm512_prefetch_i64scatter_pd,
            _mm512_prefetch_i64scatter_ps, _mm512_mask_prefetch_i64scatter_pd,
            _mm512_mask_prefetch_i64scatter_ps): Likewise.
            * config/i386/avx512vlintrin.h (_mm256_mmask_i32gather_ps,
            _mm_mmask_i32gather_ps, _mm256_mmask_i32gather_pd,
            _mm_mmask_i32gather_pd, _mm256_mmask_i64gather_ps,
            _mm_mmask_i64gather_ps, _mm256_mmask_i64gather_pd,
            _mm_mmask_i64gather_pd, _mm256_mmask_i32gather_epi32,
            _mm_mmask_i32gather_epi32, _mm256_mmask_i32gather_epi64,
            _mm_mmask_i32gather_epi64, _mm256_mmask_i64gather_epi32,
            _mm_mmask_i64gather_epi32, _mm256_mmask_i64gather_epi64,
            _mm_mmask_i64gather_epi64, _mm256_i32scatter_ps,
            _mm256_mask_i32scatter_ps, _mm_i32scatter_ps, _mm_mask_i32scatter_ps,
            _mm256_i32scatter_pd, _mm256_mask_i32scatter_pd, _mm_i32scatter_pd,
            _mm_mask_i32scatter_pd, _mm256_i64scatter_ps,
            _mm256_mask_i64scatter_ps, _mm_i64scatter_ps, _mm_mask_i64scatter_ps,
            _mm256_i64scatter_pd, _mm256_mask_i64scatter_pd, _mm_i64scatter_pd,
            _mm_mask_i64scatter_pd, _mm256_i32scatter_epi32,
            _mm256_mask_i32scatter_epi32, _mm_i32scatter_epi32,
            _mm_mask_i32scatter_epi32, _mm256_i32scatter_epi64,
            _mm256_mask_i32scatter_epi64, _mm_i32scatter_epi64,
            _mm_mask_i32scatter_epi64, _mm256_i64scatter_epi32,
            _mm256_mask_i64scatter_epi32, _mm_i64scatter_epi32,
            _mm_mask_i64scatter_epi32, _mm256_i64scatter_epi64,
            _mm256_mask_i64scatter_epi64, _mm_i64scatter_epi64,
            _mm_mask_i64scatter_epi64): Likewise.
    
    (cherry picked from commit 78cef09019cc9c80d1b39a49861f8827a2ee2e60)

commit e031d8024aa22d31ceb85180a6607b3d6bb01481
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Wed Apr 29 15:55:39 2020 +0200

    rs6000: Fix rs6000_atomic_assign_expand_fenv [PR94826]
    
    This is the rs6000 version of the earlier committed x86, aarch64 and arm
    fixes, as create_tmp_var_raw is used because the C FE can call this outside
    of function context, we need to make sure the first references to those
    VAR_DECLs are through a TARGET_EXPR, so that it gets gimple_add_tmp_var
    marked in whatever function it gets expanded in.  Without that DECL_CONTEXT
    is NULL and the vars aren't added as local decls of the containing function.
    
    2020-04-29  Jakub Jelinek  <jakub@redhat.com>
    
            PR target/94826
            * config/rs6000/rs6000.c (rs6000_atomic_assign_expand_fenv): Use
            TARGET_EXPR instead of MODIFY_EXPR for first assignment to
            fenv_var, fenv_clear and old_fenv variables.  For fenv_addr
            take address of TARGET_EXPR of fenv_var with void_node initializer.
            Formatting fixes.
    
    (cherry picked from commit c7137fcc7cbc1f1f14f9fed75adcc6bd8f1d418c)

commit 840a91477f0157a5811957b7d866489d519fb77f
Author: Haijian Zhang <z.zhanghaijian@huawei.com>
Date:   Wed Apr 29 10:23:11 2020 +0200

    pr94780.c fails with ICE on aarch64 [PR94820]
    
    This is a simple fix for pr94820.
    The PR was only fixed on i386, the same error was also reported on aarch64.
    This function, because it is sometimes called even outside of function bodies, uses create_tmp_var_raw rather than create_tmp_var.
    But in order for that to work, when first referenced, the VAR_DECLs need to appear in a TARGET_EXPR so that during gimplification
    the var gets the right DECL_CONTEXT and is added to local decls. Without that, e.g. tree-nested.c ICEs on those.
    
    2020-04-29  Haijian Zhang  <z.zhanghaijian@huawei.com>
    
            PR target/94820
            * config/aarch64/aarch64-builtins.c
            (aarch64_atomic_assign_expand_fenv): Use TARGET_EXPR instead of
            MODIFY_EXPR for first assignment to fenv_cr, fenv_sr and
            new_fenv_var.
    
    (cherry picked from commit d81bc2af7d2700888e414eb5a322ff5f5b0df0bb)

commit 1831242824752a6c51f513759830a8667a97f7f2
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Apr 28 11:26:56 2020 +0200

    tree: Fix up TREE_SIDE_EFFECTS on internal calls [PR94809]
    
    On the following testcase, match.pd during GENERIC folding
    changes the -1U / x < y into __imag__ .MUL_OVERFLOW (x, y),
    but unfortunately unlike for normal calls nothing sets TREE_SIDE_EFFECTS on
    the call.  There is the process_call_operands function that non-internal
    call creation calls and it is usable for internal calls too,
    e.g. TREE_SIDE_EFFECTS is derived from checking whether the
    call has side-effects (non-ECF_{CONST,PURE}; we have those for internal
    calls) and from whether any of the arguments has TREE_SIDE_EFFECTS.
    
    2020-04-28  Jakub Jelinek  <jakub@redhat.com>
    
            PR tree-optimization/94809
            * tree.c (build_call_expr_internal_loc_array): Call
            process_call_operands.
    
            * gcc.c-torture/execute/pr94809.c: New test.
    
    (cherry picked from commit 34f6b14ff33e0c64b3a4a1a2cd871df715d69151)

commit a8a6b29393dbc13d81fdc5d354526452bd79fb94
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Mon Apr 27 21:14:52 2020 +0200

    x86: Fix up ix86_atomic_assign_expand_fenv [PR94780]
    
    This function, because it is sometimes called even outside of function
    bodies, uses create_tmp_var_raw rather than create_tmp_var.  But in order
    for that to work, when first referenced, the VAR_DECLs need to appear in a
    TARGET_EXPR so that during gimplification the var gets the right
    DECL_CONTEXT and is added to local decls.  Without that, e.g. tree-nested.c
    ICEs on those.
    
    2020-04-27  Jakub Jelinek  <jakub@redhat.com>
    
            PR target/94780
            * config/i386/i386.c (ix86_atomic_assign_expand_fenv): Use
            TARGET_EXPR instead of MODIFY_EXPR for first assignment to
            sw_var, exceptions_var, mxcsr_orig_var and mxcsr_mod_var.
    
            * gcc.dg/pr94780.c: New test.
    
    (cherry picked from commit 9b8e9006bb35641865358e2df4f6b3ae185b239a)

commit 012e366a3928303aa1082876313e0bc3ea67190e
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Sat Apr 25 00:11:35 2020 +0200

    c++: Avoid -Wreturn-type warning if a template fn calls noreturn template fn [PR94742]
    
    finish_call_expr already has code to set current_function_returns_abnormally
    if a template calls a noreturn function, but on the following testcase it
    doesn't call a FUNCTION_DECL, but TEMPLATE_DECL instead, in which case
    we didn't check noreturn at all and just assumed it could return.
    
    2020-04-25  Jakub Jelinek  <jakub@redhat.com>
    
            PR c++/94742
            * semantics.c (finish_call_expr): When looking if all overloads
            are noreturn, use STRIP_TEMPLATE to look through TEMPLATE_DECLs.
    
            * g++.dg/warn/Wreturn-type-12.C: New test.
    
    (cherry picked from commit 4ff685a8705e8ee55fa86e75afb769ffb0975aea)

commit b3a45adc90bbbdf7a62e9ff301b32f43ba93cdad
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Apr 23 21:57:50 2020 +0200

    Shortcut identity VEC_PERM expansion [PR94710]
    
    This PR is about the rs6000 backend emitting wrong assembly
    for whole vector shift by 0, and while I think it is desirable
    to fix the backend, I don't see a point why the expander should
    try to emit that, whole vector shift by 0 is identity, we can just
    return the operand.
    
    2020-04-23  Jakub Jelinek  <jakub@redhat.com>
    
            PR target/94710
            * optabs.c (expand_vec_perm_const): For shift_amt const0_rtx
            just return v2.
    
    (cherry picked from commit f51be2fb8653f81092f8158a0f0527275f86603b)

commit 1dd77eeccc2941323607e88a6fe37625a2dc6698
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Apr 23 09:54:14 2020 +0200

    attribs: Don't diagnose attribute exclusions during error recovery [PR94705]
    
    On the following testcase GCC ICEs, because last_decl is error_mark_node,
    and diag_attr_exclusions assumes that if it is not NULL, it must be a decl.
    
    The following patch just doesn't diagnose attribute exclusions if the
    other decl is erroneous (and thus we've already reported errors for it).
    
    2020-04-23  Jakub Jelinek  <jakub@redhat.com>
    
            PR c/94705
            * attribs.c (decl_attribute): Don't diagnose attribute exclusions
            if last_decl is error_mark_node or has such a TREE_TYPE.
    
            * gcc.dg/pr94705.c: New test.
    
    (cherry picked from commit e2a71816b4949225498bec37e947293aa7f5841b)

commit 3e8a10bb21b4c830e1884ff43edd639eae5bf5ce
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Apr 21 17:06:31 2020 +0200

    ubsan: Avoid -Wpadded warnings [PR94641]
    
    -Wpadded warnings aren't really useful for the artificial types that GCC
    lays out for ubsan.
    
    2020-04-21  Jakub Jelinek  <jakub@redhat.com>
    
            PR c/94641
            * stor-layout.c (place_field, finalize_record_size): Don't emit
            -Wpadded warning on TYPE_ARTIFICIAL rli->t.
            * ubsan.c (ubsan_get_type_descriptor_type,
            ubsan_get_source_location_type, ubsan_create_data): Set
            TYPE_ARTIFICIAL.
            * asan.c (asan_global_struct): Likewise.
    
            * c-c++-common/ubsan/pr94641.c: New test.
    
    (cherry picked from commit 73f8e9dca5ff891ed19001b213fd1f6ce31417e3)

commit 00191dfc2914b2e66a3fbe50aa79ef6a5fc2be46
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Fri Apr 17 10:33:27 2020 +0200

    Fix -fcompare-debug issue in delete_insn_and_edges [PR94618]
    
    delete_insn_and_edges calls purge_dead_edges whenever deleting the last insn
    in a bb, whatever it is.  If it called it only for mandatory last insns
    in the basic block (that may not be followed by DEBUG_INSNs, dunno if that
    is control_flow_insn_p or something more complex), that wouldn't be a
    problem, but as it calls it on any last insn and can actually do something
    in the bb, if such an insn is followed by one more more DEBUG_INSNs and
    nothing else in the same bb, we don't call purge_dead_edges with -g and do
    call it with -g0.
    
    On the testcase, there are two reg-to-reg moves with REG_EH_REGION notes
    (previously memory accesses but simplified and yet not optimized), and the
    second is followed by DEBUG_INSNs; the second move is delete_insn_and_edges
    and after removing it, for -g0 purge_dead_edges removes the REG_EH_REGION
    from the now last insn in the bb (the first reg-to-reg move), while
    for -g it isn't called and things diverge from that quickly on.
    
    Fixed by calling purdge_dead_edges even if we remove the last real insn
    followed only by DEBUG_INSNs in the same bb.
    
    2020-04-17  Jakub Jelinek  <jakub@redhat.com>
    
            PR rtl-optimization/94618
            * cfgrtl.c (delete_insn_and_edges): Set purge not just when
            insn is the BB_END of its block, but also when it is only followed
            by DEBUG_INSNs in its block.
    
            * g++.dg/opt/pr94618.C: New test.
    
    (cherry picked from commit c41884a09206be0e21cad7eea71b9754daa969d4)

commit 189c10499d796877e22c7f019a2805099fab8509
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Apr 16 07:19:57 2020 +0200

    c++: Fix pasto in structured binding diagnostics [PR94571]
    
    This snippet has been copied from the non-structured binding declaration
    parsing later in the function, and while for non-structured bindings
    it can be followed by comma or semicolon, structured bindings may be
    only followed by semicolon.
    
    Or, do we want to have a different message for the case when there is
    a comma (and keep this corrected one only if there is something else)
    that would explain better what is the bug (or add a fix-it hint)?
    Marek said in the PR that clang++ reports
    error: decomposition declaration must be the only declaration in its group
    
    There is another thing Marek noted (though, something for different spot),
    that diagnostic for auto x(1), [e,f] = test2; could also use a clearer
    wording like the above (or a fix-it hint), but the question is if we should
    assume [ after , as a structured binding or if we should do some tentative
    parsing first to figure out if it looks like a structured binding.
    
    2020-04-16  Jakub Jelinek  <jakub@redhat.com>
    
            PR c++/94571
            * parser.c (cp_parser_simple_declaration): Fix up a pasto in
            diagnostics.
    
            * g++.dg/cpp1z/decomp51.C: New test.
    
    (cherry picked from commit e4658c7dbbe88f742c96e5f58ee4a6d549d642ca)

commit 7146b8fd63e5107f1cf896df92fbaed99aa5ac0d
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Wed Apr 8 21:22:05 2020 +0200

    vect: Fix up lowering of TRUNC_MOD_EXPR by negative constant [PR94524]
    
    The first testcase below is miscompiled, because for the division part
    of the lowering we canonicalize negative divisors to their absolute value
    (similarly how expmed.c canonicalizes it), but when multiplying the division
    result back by the VECTOR_CST, we use the original constant, which can
    contain negative divisors.
    
    Fixed by computing ABS_EXPR of the VECTOR_CST.  Unfortunately, fold-const.c
    doesn't support const_unop (ABS_EXPR, VECTOR_CST) and I think it is too late
    in GCC 10 cycle to add it now.
    
    Furthermore, while modulo by most negative constant happens to return the
    right value, it does that only by invoking UB in the IL, because
    we then expand division by that 1U+INT_MAX and say for INT_MIN % INT_MIN
    compute the division as -1, and then multiply by INT_MIN, which is signed
    integer overflow.  We in theory could do the computation in unsigned vector
    types instead, but is it worth bothering.  People that are doing % INT_MIN
    are either testing for standard conformance, or doing something wrong.
    So, I've also added punting on % INT_MIN, both in vect lowering and vect
    pattern recognition (we punt already for / INT_MIN).
    
    2020-04-08  Jakub Jelinek  <jakub@redhat.com>
    
            PR tree-optimization/94524
            * tree-vect-generic.c (expand_vector_divmod): If any elt of op1 is
            negative for signed TRUNC_MOD_EXPR, multiply with absolute value of
            op1 rather than op1 itself at the end.  Punt for signed modulo by
            most negative constant.
            * tree-vect-patterns.c (vect_recog_divmod_pattern): Punt for signed
            modulo by most negative constant.
    
            * gcc.c-torture/execute/pr94524-1.c: New test.
            * gcc.c-torture/execute/pr94524-2.c: New test.
    
    (cherry picked from commit f52eb4f988992d393c69ee4ab76f236dced80e36)

commit 212ae35e5a9b554748c1340015968fda1d1fa0d8
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Wed Apr 8 18:24:12 2020 +0200

    i386: Don't use AVX512F integral masks for V*TImode [PR94438]
    
    The ix86_get_mask_mode hook uses int mask for 512-bit vectors or 128/256-bit
    vectors with AVX512VL (that is correct), and only for V*[SD][IF]mode if not
    AVX512BW (also correct), but with AVX512BW it would stop checking the
    elem_size altogether and pretend the hw has masking support for V*TImode
    etc., which it doesn't.  That can lead to various ICEs later on.
    
    2020-04-08  Jakub Jelinek  <jakub@redhat.com>
    
            PR target/94438
            * config/i386/i386.c (ix86_get_mask_mode): Only use int mask for elem_size
            1, 2, 4 and 8.
    
            * gcc.target/i386/avx512bw-pr94438.c: New test.
            * gcc.target/i386/avx512vlbw-pr94438.c: New test.
    
    (cherry picked from commit 8bf5faa9c463f0d53ffe835ba03d4502edfb959d)

commit 1298b488c37c44abf33cca6932e760ef69dd7815
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Wed Apr 8 15:30:16 2020 +0200

    c++: Further fix for -fsanitize=vptr [PR94325]
    
    For -fsanitize=vptr, we insert a NULL store into the vptr instead of just
    adding a CLOBBER of this.  build_clobber_this makes the CLOBBER conditional
    on in_charge (implicit) parameter whenever CLASSTYPE_VBASECLASSES, but when
    adding this conditionalization to the -fsanitize=vptr code in PR87095,
    I wanted it to catch some more cases when the class has CLASSTYPE_VBASECLASSES,
    but the vptr is still not shared with something else, otherwise the
    sanitization would be less effective.
    The following testcase shows that the chosen test that CLASSTYPE_PRIMARY_BINFO
    is non-NULL and has BINFO_VIRTUAL_P set wasn't sufficient,
    the D class has still sizeof(D) == sizeof(void*) and thus contains just
    a single vptr, but while in B::~B() this results in the vptr not being
    cleared, in C::~C() this condition isn't true, as CLASSTYPE_PRIMARY_BINFO
    in that case is B and is not BINFO_VIRTUAL_P, so it clears the vptr, but the
    D::~D() dtor after invoking C::~C() invokes A::~A() with an already cleared
    vptr, which is then reported.
    The following patch is just a shot in the dark, keep looking through
    CLASSTYPE_PRIMARY_BINFO until we find BINFO_VIRTUAL_P, but it works on the
    existing testcase as well as this new one.
    
    2020-04-08  Jakub Jelinek  <jakub@redhat.com>
    
            PR c++/94325
            * decl.c (begin_destructor_body): For CLASSTYPE_VBASECLASSES class
            dtors, if CLASSTYPE_PRIMARY_BINFO is non-NULL, but not BINFO_VIRTUAL_P,
            look at CLASSTYPE_PRIMARY_BINFO of its BINFO_TYPE if it is not
            BINFO_VIRTUAL_P, and so on.
    
            * g++.dg/ubsan/vptr-15.C: New test.
    
    (cherry picked from commit 4cf6b06cb5b02c053738e2975e3b7a4b3c577401)

commit 62138a256af79900ef9958e32806f5acc333bd93
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Apr 7 14:39:24 2020 +0200

    i386: Fix V{64QI,32HI}mode constant permutations [PR94509]
    
    The following testcases are miscompiled, because expand_vec_perm_pshufb
    incorrectly thinks it can use vpshufb instruction for the permutations
    when it can't.
    The
              if (vmode == V32QImode)
                {
                  /* vpshufb only works intra lanes, it is not
                     possible to shuffle bytes in between the lanes.  */
                  for (i = 0; i < nelt; ++i)
                    if ((d->perm[i] ^ i) & (nelt / 2))
                      return false;
                }
    intra-lane check which is correct has been copied and adjusted for 64-byte
    modes into:
              if (vmode == V64QImode)
                {
                  /* vpshufb only works intra lanes, it is not
                     possible to shuffle bytes in between the lanes.  */
                  for (i = 0; i < nelt; ++i)
                    if ((d->perm[i] ^ i) & (nelt / 4))
                      return false;
                }
    which is not correct, because 64-byte modes have 4 lanes rather than just
    two and the above is only testing that the permutation grabs even lane elts
    from even lanes and odd lane elts from odd lanes, but not that they are
    from the same 256-bit half.
    
    The following patch fixes it by using 3 * nelt / 4 instead of nelt / 4,
    so we actually check the most significant 2 bits rather than just one.
    
    2020-04-07  Jakub Jelinek  <jakub@redhat.com>
    
            PR target/94509
            * config/i386/i386.c (expand_vec_perm_pshufb): Fix the check
            for inter-lane permutation for 64-byte modes.
    
            * gcc.target/i386/avx512bw-pr94509-1.c: New test.
            * gcc.target/i386/avx512bw-pr94509-2.c: New test.
    
    (cherry picked from commit 14192f1ed48cb3982b1b3c794e0f313835d0cdcd)

commit 84d649d3c71e80269ebd9764652131c51ff4a895
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Apr 7 10:01:16 2020 +0200

    aarch64: Fix {ash[lr],lshr}<mode>3 expanders [PR94488]
    
    The following testcase ICEs on aarch64 apparently since the introduction of
    the aarch64 port.  The reason is that the {ashl,ashr,lshr}<mode>3 expanders
    completely unnecessarily FAIL; if operands[2] is something other than
    a CONST_INT or REG or MEM and the middle-end code can't cope with the
    pattern giving up in these cases.  All the expanders use general_operand
    predicate for the shift amount operand, but then have just a special case
    for CONST_INT (if in-bound, emit an immediate shift, otherwise force into
    REG), or MEM (force into REG), or REG (that is the case it handles).
    In the testcase, operands[2] is a lowpart SUBREG of a REG, which is valid
    general_operand.
    I don't see any reason what is magic about MEMs that it should be forced
    into REG and others like SUBREGs that it shouldn't, there isn't even a
    reason to check for !REG_P because force_reg will do nothing if the operand
    is already a REG, and otherwise can handle general_operand just fine.
    
    2020-04-07  Jakub Jelinek  <jakub@redhat.com>
    
            PR target/94488
            * config/aarch64/aarch64-simd.md (ashl<mode>3, lshr<mode>3,
            ashr<mode>3): Force operands[2] into reg whenever it is not CONST_INT.
            Assume it is a REG after that instead of testing it and doing FAIL
            otherwise.  Formatting fix.
    
            * gcc.c-torture/compile/pr94488.c: New test.
    
    (cherry picked from commit 7f3ac38b3c765d49a46f65f1e5e9a812fb1da49c)

commit bd748b6b448ef47f56922ec67244037915f721c2
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Apr 7 21:01:40 2020 +0200

    debug: Improve debug info of c++14 deduced return type [PR94459]
    
    On the following testcase, in gdb ptype S<long>::m1 prints long as return
    type, but all the other methods show void instead.
    PR53756 added code to add_type_attribute if the return type is
    auto/decltype(auto), but we actually should look through references,
    pointers and qualifiers.
    Haven't included there DW_TAG_atomic_type, because I think at least ATM
    one can't use that in C++.  Not sure about DW_TAG_array_type or what else
    could be deduced.
    
    > http://eel.is/c++draft/dcl.spec.auto#3 says it has to appear as a
    > decl-specifier.
    >
    > http://eel.is/c++draft/temp.deduct.type#8 lists the forms where a template
    > argument can be deduced.
    >
    > Looks like you are missing arrays, pointers to members, and function return
    > types.
    
    2020-04-04  Hannes Domani  <ssbssa@yahoo.de>
                Jakub Jelinek  <jakub@redhat.com>
    
            PR debug/94459
            * dwarf2out.c (gen_subprogram_die): Look through references, pointers,
            arrays, pointer-to-members, function types and qualifiers when
            checking if in-class DIE had an 'auto' or 'decltype(auto)' return type
            to emit type again on definition.
    
            * g++.dg/debug/pr94459.C: New test.
    
    Co-Authored-By: Hannes Domani <ssbssa@yahoo.de>
    (cherry picked from commit b5039b7259e64a92f5c077fe4d023556d6b12550)

commit 6fc550e75d4aac02953510215abf8a76f9adeaaa
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Fri Apr 3 19:44:42 2020 +0200

    i386: Fix vph{add,subs?}[wd] 256-bit AVX2 RTL patterns [PR94460]
    
    The following testcase is miscompiled, because the AVX2 patterns don't
    describe correctly what the insn does.  E.g. vphaddd with %ymm* operands
    (the second pattern) instruction as per:
    https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm256_hadd_epi32&expand=2941
    does { a0+a1, a2+a3, b0+b1, b2+b3, a4+a5, a6+a7, b4+b5, b6+b7 }
    but our RTL pattern did
         { a0+a1, a2+a3, a4+a5, a6+a7, b0+b1, b2+b3, b4+b5, b6+b7 }
    where the first and last 64 bits are the same and two middle 64 bits
    swapped.
    https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm256_hadd_epi16&expand=2939
    similarly, insn does:
         { a0+a1, a2+a3, a4+a5, a6+a7, b0+b1, b2+b3, b4+b5, b6+b7,
           a8+a9, a10+a11, a12+a13, a14+a15, b8+b9, b10+b11, b12+b13, b14+b15 }
    but RTL pattern did
         { a0+a1, a2+a3, a4+a5, a6+a7, a8+a9, a10+a11, a12+a13, a14+a15,
           b0+b1, b2+b3, b4+b5, b6+b7, b8+b9, b10+b11, b12+b13, b14+b15 }
    again, first and last 64 bits are the same and the two middle 64 bits
    swapped.
    
    2020-04-03  Jakub Jelinek  <jakub@redhat.com>
    
            PR target/94460
            * config/i386/sse.md (avx2_ph<plusminus_mnemonic>wv16hi3,
            avx2_ph<plusminus_mnemonic>dv8si3): Fix up RTL pattern to do
            second half of first lane from first lane of second operand and
            first half of second lane from second lane of first operand.
    
            * gcc.target/i386/avx2-pr94460.c: New test.
    
    (cherry picked from commit dbff1829843180dc2a6c8ce5ce7883146b5cf083)

commit 24a0023809f4058cf2629221ec70ce92e0db1f0f
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Apr 7 21:01:06 2020 +0200

    objsz: Don't call replace_uses_by on SSA_NAME_OCCURS_IN_ABNORMAL_PHI [PR94423]
    
    The following testcase ICEs because the objsz pass calls replace_uses_by
    on SSA_NAME_OCCURS_IN_ABNORMAL_PHI SSA_NAME.  The following patch instead
    of that calls replace_call_with_value, which will turn it into
      xyz_123(ab) = 234;
    
    2020-04-01  Jakub Jelinek  <jakub@redhat.com>
    
            PR middle-end/94423
            * tree-object-size.c (pass_object_sizes::execute): Don't call
            replace_uses_by for SSA_NAME_OCCURS_IN_ABNORMAL_PHI lhs, instead
            call replace_call_with_value.
    
            * gcc.dg/ubsan/pr94423.c: New test.
    
    (cherry picked from commit 4486a537f14bc3b05ac552c3cbe18e540e397ed7)

commit ff421cb31d2d51f337dffdaf6b008fe1737d239f
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Mar 31 11:06:43 2020 +0200

    fold-const: Fix division folding with vector operands [PR94412]
    
    The following testcase is miscompiled since 4.9, we treat unsigned
    vector types as if they were signed and "optimize" negations across it.
    
    2020-03-31  Marc Glisse  <marc.glisse@inria.fr>
                Jakub Jelinek  <jakub@redhat.com>
    
            PR middle-end/94412
            * fold-const.c (fold_binary_loc) <case TRUNC_DIV_EXPR>: Use
            ANY_INTEGRAL_TYPE_P instead of INTEGRAL_TYPE_P.
    
            * gcc.c-torture/execute/pr94412.c: New test.
    
    Co-authored-by: Marc Glisse <marc.glisse@inria.fr>
    (cherry picked from commit 8f99f9e6ccec167a5ba67dcc08e6c14948595b82)

commit 6609a2a20e21f7f318655ffdecf4834d75e72d12
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Apr 7 21:00:28 2020 +0200

    Fix vextract* masked patterns [PR93069]
    
    The AVX512F documentation clearly states that in instructions where the
    destination is a memory only merging-masking is possible, not zero-masking,
    and the assembler enforces that.
    
    The testcase in this patch fails to assemble because of
    Error: unsupported masking for `vextracti32x8'
    on
            vextracti32x8   $0x0, %zmm1, -64(%rsp){%k1}{z}
    For the vector extraction patterns, we apparently have 7 *_maskm patterns
    that only accept memory destinations and rtx_equal_p merge-masking source
    for it, 7 *<mask_name> corresponding patterns that allow memory destination
    only for the non-masked cases (through <store_mask_constraint>), then 2
    *<mask_name> patterns (lo ssehalf V16FI and lo ssehalf VI8F_256 ones) which
    do allow memory destination even for masked cases and are the cause of the
    testsuite failure, because we must not allow C constraint if the destination
    is m, and finally one pair of patterns (separate * and *_mask, hi ssehalf
    VI4F_256), which has another issue (for which I don't have a testcase
    though), where if it would match zero-masking with register destination,
    it wouldn't emit the needed {z} into assembly.
    The attached patch fixes those 3 issues only, perhaps more suitable for
    backporting.
    
    2020-03-30  Jakub Jelinek  <jakub@redhat.com>
    
            PR target/93069
            * config/i386/sse.md (vec_extract_lo_<mode><mask_name>): Use
            <store_mask_constraint> instead of m in output operand constraint.
            (vec_extract_hi_<mode><mask_name>): Use <mask_operand2> instead of
            %{%3%}.
    
            * gcc.target/i386/avx512vl-pr93069.c: New test.
            * gcc.dg/vect/pr93069.c: New test.
    
    (cherry picked from commit 57e276f3e304ef92483763ee1028e5b3e1345e0f)

commit c53f6b6c38fd3c61257c9f311ca9dc21135223b4
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Sat Mar 28 10:21:52 2020 +0100

    reassoc: Fix -fcompare-debug bug in reassociate_bb [PR94329]
    
    The following testcase FAILs with -fcompare-debug, because reassociate_bb
    mishandles the case when the last stmt in a bb has zero uses.  In that case
    reassoc_remove_stmt (like gsi_remove) moves the iterator to the next stmt,
    i.e. gsi_end_p is true, which means the code sets the iterator back to
    gsi_last_bb.  The problem is that the for loop does gsi_prev on that before
    handling the next statement, which means the former penultimate stmt, now
    last one, is not processed by reassociate_bb.
    Now, with -g, if there is at least one debug stmt at the end of the bb,
    reassoc_remove_stmt moves the iterator to that following debug stmt and we
    just do gsi_prev and continue with the former penultimate non-debug stmt,
    now last non-debug stmt.
    
    The following patch fixes that by not doing the gsi_prev in this case; there
    are too many continue; cases, so I didn't want to copy over the gsi_prev to
    all of them, so this patch uses a bool for that instead.  The second
    gsi_end_p check isn't needed anymore, because when we don't do the
    undesirable gsi_prev after gsi = gsi_last_bb, the loop !gsi_end_p (gsi)
    condition will catch the removal of the very last stmt from a bb.
    
    2020-03-28  Jakub Jelinek  <jakub@redhat.com>
    
            PR tree-optimization/94329
            * tree-ssa-reassoc.c (reassociate_bb): When calling reassoc_remove_stmt
            on the last stmt in a bb, make sure gsi_prev isn't done immediately
            after gsi_last_bb.
    
            * gfortran.dg/pr94329.f90: New test.
    
    (cherry picked from commit aa9c08ef97f4df1ebb1fc8d72f2e7f9f8c1045c2)

commit 0aa738f8d4469434c131dc36711a045cfd8ecd7f
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Apr 7 20:59:37 2020 +0200

    varasm: Fix output_constructor where a RANGE_EXPR index needs to skip some elts [PR94303]
    
    The following testcase is miscompiled, because output_constructor doesn't
    output the initializer correctly.  The FE creates {[1...2] = 9} in this
    case, and we emit .long 9; long 9; .zero 8 instead of the expected
    .zero 8; .long 9; .long 9.  If the CONSTRUCTOR is {[1] = 9, [2] = 9},
    output_constructor_regular_field has code to notice that the current
    location (local->total_bytes) is smaller than the location we want to write
    to (1*sizeof(elt)) and will call assemble_zeros to skip those.  But
    RANGE_EXPRs are handled by a different function which didn't do this,
    so for RANGE_EXPRs we emitted them properly only if local->total_bytes
    was always equal to the location where the RANGE_EXPR needs to start.
    
    2020-03-25  Jakub Jelinek  <jakub@redhat.com>
    
            PR middle-end/94303
            * varasm.c (output_constructor_array_range): If local->index
            RANGE_EXPR doesn't start at the current location in the constructor,
            skip needed number of bytes using assemble_zeros or assert we don't
            go backwards.
    
            PR middle-end/94303
            * g++.dg/torture/pr94303.C: New test.
    
    (cherry picked from commit 56407bab53a514ffcd6ac011965cebdc5eb3ef54)

commit 2e4d37fcb34b16b73a9af6fa76b48ac5c554b550
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Wed Mar 25 08:08:04 2020 +0100

    if-conv: Delete dead stmts backwards in ifcvt_local_dce [PR94283]
    
    > > This patch caused:
    > >
    > > gcc /home/marxin/Programming/gcc/gcc/testsuite/gcc.c-torture/compile/990625-2.c -O3 -g -fno-tree-dce -c
    > > during GIMPLE pass: ifcvt
    > > /home/marxin/Programming/gcc/gcc/testsuite/gcc.c-torture/compile/990625-2.c: In function ‘broken030599’:
    > > /home/marxin/Programming/gcc/gcc/testsuite/gcc.c-torture/compile/990625-2.c:2:1: internal compiler error: Segmentation fault
    >
    > Likely
    >
    >   /* Delete dead statements.  */
    >   gsi = gsi_start_bb (bb);
    >   while (!gsi_end_p (gsi))
    >     {
    >
    > needs to instead work back-to-front for debug stmt adjustment to work
    
    Indeed, that seems to work.
    
    2020-03-25  Richard Biener  <rguenther@suse.de>
                Jakub Jelinek  <jakub@redhat.com>
    
            PR debug/94283
            * tree-if-conv.c (ifcvt_local_dce): Delete dead statements backwards.
    
            * gcc.dg/pr94283.c: New test.
    
    Co-authored-by: Richard Biener <rguenther@suse.de>
    (cherry picked from commit 8ea7970c4968517fb73f42bcca40d316adacf215)

commit c9790fa67882765eb293774e629cd071de857952
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Apr 7 20:57:37 2020 +0200

    if-conv: Fix -fcompare-debug bugs in ifcvt_local_dce [PR94283]
    
    The following testcase shows -fcompare-debug bugs in ifcvt_local_dce,
    where the decisions what statements are needed is based also on debug stmt
    operands, which is wrong.
    So, this patch makes sure to never add debug stmt to the worklist, or never
    add an assign to worklist just because it is used in a debug stmt in another
    bb.
    
    2020-03-24  Jakub Jelinek  <jakub@redhat.com>
    
            PR debug/94283
            * tree-if-conv.c (ifcvt_local_dce): For gimple debug stmts, just set
            GF_PLF_2, but don't add them to worklist.  Don't add an assigment to
            worklist or set GF_PLF_2 just because it is used in a debug stmt in
            another bb.  Formatting improvements.
    
            * gcc.target/i386/pr94283.c: New test.
    
    (cherry picked from commit 4dcfd4e56b0d22af12750372f3e0b49249b1d473)

commit 4ef4c88af7007ff0563e65269e1807b1ba30085d
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Mar 19 12:22:47 2020 +0100

    c++: Fix up handling of captured vars in lambdas in OpenMP clauses [PR93931]
    
    Without the parser.c change we were ICEing on the testcase, because while the
    uses of the captured vars inside of the constructs were replaced with capture
    proxy decls, we didn't do that for decls in OpenMP clauses.
    
    With that fixed, we don't ICE anymore, but the testcase is miscompiled and FAILs
    at runtime.  This is because the capture proxy decls have DECL_VALUE_EXPR and
    during gimplification we were gimplifying those to their DECL_VALUE_EXPRs.
    That is fine for shared vars, but for privatized ones we must not do that.
    So that is what the cp-gimplify.c changes do.  Had to add a DECL_CONTEXT check
    before calling is_capture_proxy because some VAR_DECLs don't have DECL_CONTEXT
    set (yet) and is_capture_proxy relies on that being non-NULL always.
    
    2020-03-19  Jakub Jelinek  <jakub@redhat.com>
    
            PR c++/93931
            * parser.c (cp_parser_omp_var_list_no_open): Call process_outer_var_ref
            on outer_automatic_var_p decls.
            * cp-gimplify.c (cxx_omp_disregard_value_expr): Return true also for
            capture proxy decls.
    
            * testsuite/libgomp.c++/pr93931.C: New test.
    
    (cherry picked from commit 484206967f958fc47827a71654fe52a98adc95cb)

commit 2b0aaa4970a8d174b00fb98b4d24550d1c9a4e3a
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Mar 19 10:24:16 2020 +0100

    phiopt: Avoid -fcompare-debug bug in phiopt [PR94211]
    
    Two years ago, I've added support for up to 2 simple preparation statements
    in value_replacement, but the
    -      && estimate_num_insns (assign, &eni_time_weights)
    +      && estimate_num_insns (bb_seq (middle_bb), &eni_time_weights)
    change, meant that we compute the cost of all those statements rather than
    just the single assign that has been the single supported non-debug
    statement in the bb before, doesn't do what I thought would do, gimple_seq
    is just gimple * and thus it can't be really overloaded depending on whether
    we pass a single gimple * or a whole sequence.  Which means in the last
    two years it doesn't count all the statements, but only the first one.
    With -g that happens to be a DEBUG_STMT, or it could be e.g. the first
    preparation statement which could be much cheaper than the actual assign.
    
    2020-03-19  Jakub Jelinek  <jakub@redhat.com>
    
            PR tree-optimization/94211
            * tree-ssa-phiopt.c (value_replacement): Use estimate_num_insns_seq
            instead of estimate_num_insns for bb_seq (middle_bb).  Rename
            emtpy_or_with_defined_p variable to empty_or_with_defined_p, adjust
            all uses.
    
            * gcc.dg/pr94211.c: New test.
    
    (cherry picked from commit 8db876e9c045c57d2dc5bd08a6e250f822efaad0)

commit cac1949a51e25360a7fd7dc8f473997b7ca048a9
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Mar 17 22:32:34 2020 +0100

    c: Handle C_TYPE_INCOMPLETE_VARS even for ENUMERAL_TYPEs [PR94172]
    
    The following testcases ICE, because they contain extern variable
    declarations with incomplete enum types that is later completed and after
    that those variables are accessed.  The ICEs are because the vars then may have
    incorrect DECL_MODE etc., e.g. in the first case the var has SImode
    DECL_MODE (the guessed mode for the enum), but the enum then actually has
    DImode because its enumerators don't fit into unsigned int.
    
    The following patch fixes it by using C_TYPE_INCOMPLETE_VARS not just on
    incomplete struct/union types, but also incomplete enum types.
    TYPE_VFIELD can't be used as it is TYPE_MIN_VALUE on ENUMERAL_TYPE,
    thankfully TYPE_LANG_SLOT_1 has been used in the C FE only on
    FUNCTION_TYPEs.
    
    2020-03-17  Jakub Jelinek  <jakub@redhat.com>
    
            PR c/94172
            * c-tree.h (C_TYPE_INCOMPLETE_VARS): Define to TYPE_LANG_SLOT_1
            instead of TYPE_VFIELD, and support it on {RECORD,UNION,ENUMERAL}_TYPE.
            (TYPE_ACTUAL_ARG_TYPES): Check that it is only used on FUNCTION_TYPEs.
            * c-decl.c (pushdecl): Push C_TYPE_INCOMPLETE_VARS also to
            ENUMERAL_TYPEs.
            (finish_incomplete_vars): New function, moved from finish_struct.  Use
            relayout_decl instead of layout_decl.
            (finish_struct): Remove obsolete comment about C_TYPE_INCOMPLETE_VARS
            being TYPE_VFIELD.  Use finish_incomplete_vars.
            (finish_enum): Clear C_TYPE_INCOMPLETE_VARS.  Call
            finish_incomplete_vars.
            * c-typeck.c (c_build_qualified_type): Clear C_TYPE_INCOMPLETE_VARS
            also on ENUMERAL_TYPEs.
    
            * gcc.dg/pr94172-1.c: New test.
            * gcc.dg/pr94172-2.c: New test.
    
    (cherry picked from commit 87ce34fa00cd6b87452d747235da40dfe5b6e00f)

commit feb0b5e3339e3b3f710c4f82d5997c1cd6af67ae
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Mar 17 21:21:16 2020 +0100

    c++: Fix parsing of invalid enum specifiers [PR90995]
    
    The testcase shows some accepts-invalid (the ones without alignas) and
    ice-on-invalid-code (the ones with alignas) cases.
    If the enum doesn't have an underlying type and is not a definition,
    the caller retries to parse it as elaborated type specifier.
    E.g. for enum struct S s it will then pedwarn that elaborated type specifier
    shouldn't have the struct/class keywords.
    The problem is if the enum specifier is not followed by { when it has
    underlying type.  In that case we have already called
    cp_parser_parse_definitely to end the tentative parsing started at the
    beginning of cp_parser_enum_specifier.  But the
    cp_parser_error (parser, "expected %<;%> or %<{%>");
    doesn't emit any error because the whole function is called from yet another
    tentative parse and the caller starts parsing the elaborated type
    specifier where the cp_parser_enum_specifier stopped (i.e. after the
    underlying type token(s)).  The ultimate caller than commits the tentative
    parsing (and even if it wouldn't, it wouldn't know what kind of error
    to report).  I think after seeing enum {,struct,class} : type not being
    followed by { or ;, there is no reason not to report it right away, as it
    can't be valid C++, which is what the patch does.  Not sure if we shouldn't
    also return error_mark_node instead of NULL_TREE, so that the caller doesn't
    try to parse it as elaborated type specifier (the patch doesn't do that
    right now).
    
    Furthermore, while reading the code, I've noticed that
    parser->colon_corrects_to_scope_p is saved and set to false at the start
    of the function, but not restored back in some cases.  Don't have a testcase
    where this would be a problem, but it just seems wrong.  Either we can in
    the two spots replace return NULL_TREE; with { type = NULL_TREE; goto out; }
    or we could perhaps abuse warning_sentinel or create a special class with
    dtor to clean the flag up.
    
    And lastly, I've fixed some formatting issues in the function while reading
    it.
    
    2020-03-17  Jakub Jelinek  <jakub@redhat.com>
    
            PR c++/90995
            * parser.c (cp_parser_enum_specifier): Use temp_override for
            parser->colon_corrects_to_scope_p, replace goto out with return.
            If scoped enum or enum with underlying type is not followed by
            { or ;, call cp_parser_commit_to_tentative_parse before calling
            cp_parser_error and make sure to return error_mark_node instead of
            NULL_TREE.  Formatting fixes.
    
            * g++.dg/cpp0x/enum40.C: New test.
    
    (cherry picked from commit 980a7a0be5a114e285c49ab05ac70881e4f27fc3)

commit 7fdfea793bdf47510a8ac6ff11dbf46288ae47a6
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Mon Mar 16 09:03:59 2020 +0100

    tree-inline: Fix a -fcompare-debug issue in the inliner [PR94167]
    
    The following testcase fails with -fcompare-debug.  The problem is that
    bar is marked as address_taken only with -g and not without.
    I've tracked it down to insert_init_stmt calling gimple_regimplify_operands
    even on DEBUG_STMTs.  That function will just insert normal stmts before
    the DEBUG_STMT if the DEBUG_STMT operand isn't gimple val or invariant.
    While DCE will turn those statements into debug temporaries, it can cause
    differences in SSA_NAMEs and more importantly, the ipa references are
    generated from those before the DCE happens.
    On the testcase, the DEBUG_STMT value is (int)bar.
    
    We could generate DEBUG_STMTs with debug temporaries instead, but I fail to
    see the reason to do that, DEBUG_STMTs allow other expressions and all we
    want to ensure is that the expressions aren't too large (arbitrarily
    complex), but during inlining/function versioning I don't see why something
    would queue a DEBUG_STMT with arbitrarily complex expressions in there.
    
    2020-03-16  Jakub Jelinek  <jakub@redhat.com>
    
            PR debug/94167
            * tree-inline.c (insert_init_stmt): Don't gimple_regimplify_operands
            DEBUG_STMTs.
    
            * gcc.dg/pr94167.c: New test.
    
    (cherry picked from commit 378e830538afd4a02e41674cc9161fa59b5e09a9)

commit 434ddc50ba49442e655c34d85cedd358110e4266
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Sun Mar 15 01:27:40 2020 +0100

    tree-nested: Fix handling of *reduction clauses with C array sections [PR93566]
    
    tree-nested.c didn't handle C array sections in {,task_,in_}reduction clauses.
    
    2020-03-14  Jakub Jelinek  <jakub@redhat.com>
    
            PR middle-end/93566
            * tree-nested.c (convert_nonlocal_omp_clauses,
            convert_local_omp_clauses): Handle {,in_,task_}reduction clauses
            with C/C++ array sections.
    
            * testsuite/libgomp.c/pr93566.c: New test.
    
    (cherry picked from commit a8fc40fd551a60a97efbfe3fee08721accd80964)

commit ce8325e77d923a11dce089a7ef3a24b4737bf95f
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Fri Mar 13 11:33:16 2020 +0100

    aarch64: Fix another bug in aarch64_add_offset_1 [PR94121]
    
    > I'm getting this ICE with -mabi=ilp32:
    >
    > during RTL pass: fwprop1
    > /opt/gcc/gcc-20200312/gcc/testsuite/gcc.dg/pr94121.c: In function 'bar':
    > /opt/gcc/gcc-20200312/gcc/testsuite/gcc.dg/pr94121.c:16:1: internal compiler error: in decompose, at rtl.h:2279
    
    That is a preexisting issue, caused by another bug in the same function.
    When mode is SImode and moffset is 0x80000000 (or anything else with the
    bit 31 set), we need to sign-extend it.
    
    2020-03-13  Jakub Jelinek  <jakub@redhat.com>
    
            PR target/94121
            * config/aarch64/aarch64.c (aarch64_add_offset_1): Use gen_int_mode
            instead of GEN_INT.
    
    (cherry picked from commit c2f836c413b1e9ae45598338b4a2ecd33bd926fb)

commit 7fb0f17a66c8a6f91d82c136954edc181e3df9d3
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Mar 12 18:30:16 2020 +0100

    maintainer-scripts: Fix up gcc_release without -l, where mkdir was using umask 077 after migration
    
    2020-03-12  Jakub Jelinek  <jakub@redhat.com>
    
            * gcc_release (upload_files): Without -l, pass -m 755 to the mkdir
            command invoked through ssh.
    
    (cherry picked from commit 3739894d0cfc88b6d84134b827f33b31d646d32a)

commit 51ef2c2c0f3d59f14b8aeb909ebcc2d85f6c6618
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Mar 12 09:35:30 2020 +0100

    doc: Fix up ASM_OUTPUT_ALIGNED_DECL_LOCAL description
    
    When looking into PR94134, I've noticed bugs in the
    ASM_OUTPUT_ALIGNED_DECL_LOCAL documentation.  varasm.c has:
      #if defined ASM_OUTPUT_ALIGNED_DECL_LOCAL
        unsigned int align = symtab_node::get (decl)->definition_alignment ();
        ASM_OUTPUT_ALIGNED_DECL_LOCAL (asm_out_file, decl, name,
                                       size, align);
        return true;
      #elif defined ASM_OUTPUT_ALIGNED_LOCAL
        unsigned int align = symtab_node::get (decl)->definition_alignment ();
        ASM_OUTPUT_ALIGNED_LOCAL (asm_out_file, name, size, align);
        return true;
      #else
        ASM_OUTPUT_LOCAL (asm_out_file, name, size, rounded);
        return false;
      #endif
    and the ASM_OUTPUT_ALIGNED_LOCAL documentation properly mentions:
    Like @code{ASM_OUTPUT_LOCAL} and mentions the same macro in another place.
    The ASM_OUTPUT_ALIGNED_DECL_LOCAL description mentions non-existing macros
    ASM_OUTPUT_ALIGNED_DECL and ASM_OUTPUT_DECL instead of the right ones
    ASM_OUTPUT_ALIGNED_LOCAL and ASM_OUTPUT_LOCAL.
    
    2020-03-12  Jakub Jelinek  <jakub@redhat.com>
    
            * doc/tm.texi.in (ASM_OUTPUT_ALIGNED_DECL_LOCAL): Change
            ASM_OUTPUT_ALIGNED_DECL in description to ASM_OUTPUT_ALIGNED_LOCAL
            and ASM_OUTPUT_DECL to ASM_OUTPUT_LOCAL.
            * doc/tm.texi: Regenerated.
    
    (cherry picked from commit 9a8af207d7d03149a438185a2a0c50eeeb96a402)

commit 9001bc36447e015283a5f1a0a924bd355f9d9df3
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Mar 12 09:34:00 2020 +0100

    tree-dse: Fix mem* head trimming if call has lhs [PR94130]
    
    As the testcase shows, if DSE decides to head trim {mem{set,cpy,move},strncpy}
    and the call has lhs, it is incorrect to leave the lhs as is, because it
    will then point to the adjusted address (base + head_trim) instead of the
    original base.
    The following patch fixes that by dropping the lhs of the call and assigning
    lhs the original base in a following statement.
    
    2020-03-12  Jakub Jelinek  <jakub@redhat.com>
    
            PR tree-optimization/94130
            * tree-ssa-dse.c: Include gimplify.h.
            (increment_start_addr): If stmt has lhs, drop the lhs from call and
            set it after the call to the original value of the first argument.
            Formatting fixes.
            (decrement_count): Formatting fix.
    
            * gcc.c-torture/execute/pr94130.c: New test.
    
    (cherry picked from commit a545ffafa380fa958393e1dfbf7f5f8f129bc5cf)

commit 4910b2e4cfe25c95fef18cf54125b788c190cfb2
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Wed Mar 11 18:35:13 2020 +0100

    pdp11: Fix handling of common (local and global) vars [PR94134]
    
    As mentioned in the PR, the generic code decides to put the a variable into
    lcomm_section, which is a NOSWITCH section and thus the generic code doesn't
    switch into a particular section before using
    ASM_OUTPUT{_ALIGNED{,_DECL}_}_LOCAL, on many targets that results just in
    .lcomm (or for non-local .comm) directives which don't need a switch to some
    section, other targets put switch_to_section (bss_section) at the start of
    that macro.
    pdp11 doesn't do that (and doesn't have bss_section), and so emits the
    lcomm/comm variables in whatever section is current (it has only .text/.data
    and for DEC assembler rodata).
    
    The following patch fixes that by putting it always into data section, and
    additionally avoids emitting an empty line in the assembly for the lcomm
    vars.
    
    2020-03-11  Jakub Jelinek  <jakub@redhat.com>
    
            PR target/94134
            * config/pdp11/pdp11.c (pdp11_asm_output_var): Call switch_to_section
            at the start to switch to data section.  Don't print extra newline if
            .globl directive has not been emitted.
    
            * gcc.c-torture/execute/pr94134.c: New test.
    
    (cherry picked from commit f1125cf88ac0c97d819e4f81d556fbcd1161270e)

commit 5f6826f724348c4e1317c15ea4cea01d5604fc39
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Wed Mar 11 10:54:22 2020 +0100

    aarch64: Fix ICE in aarch64_add_offset_1 [PR94121]
    
    abs_hwi asserts that the argument is not HOST_WIDE_INT_MIN and as the
    (invalid) testcase shows, the function can be called with such an offset.
    The following patch is IMHO minimal fix, absu_hwi unlike abs_hwi allows even
    that value and will return (unsigned HOST_WIDE_INT) HOST_WIDE_INT_MIN
    in that case.  The function then uses moffset in two spots which wouldn't
    care if the value is (unsigned HOST_WIDE_INT) HOST_WIDE_INT_MIN or
    HOST_WIDE_INT_MIN and wouldn't accept it (!moffset and
    aarch64_uimm12_shift (moffset)), then in one spot where the signedness of
    moffset does matter and using unsigned is the right thing -
    moffset < 0x1000000 - and finally has code which will handle even this
    value right; the assembler doesn't really care for DImode immediates if
            mov     x1, -9223372036854775808
    or
            mov     x1, 9223372036854775808
    is used and similarly it doesn't matter if we add or sub it in DImode.
    
    2020-03-11  Jakub Jelinek  <jakub@redhat.com>
    
            PR target/94121
            * config/aarch64/aarch64.c (aarch64_add_offset_1): Use absu_hwi
            instead of abs_hwi, change moffset type to unsigned HOST_WIDE_INT.
    
            * gcc.dg/pr94121.c: New test.
    
    (cherry picked from commit a644079a702a6228df2ffaace1d88a5f74e4bb9f)

commit 8b53a85254e91903018498d70b59928b0d1dd9f9
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Wed Mar 11 09:33:52 2020 +0100

    dfp: Fix decimal_to_binary [PR94111]
    
    As e.g. decimal_from_decnumber shows, the REAL_VALUE_TYPE representation
    contains a decimal128 embedded in ->sig only if it is rvc_normal, for
    other kinds like rvc_inf or rvc_nan, ->sig is ignored and everything is
    contained in the REAL_VALUE_TYPE flags (cl, sign, signalling and decimal).
    decimal_to_binary which is used when folding a decimal{32,64,128} constant
    to a binary floating point type ignores this and thus folds infinities and
    NaNs into +0.0.
    The following patch fixes that by only doing that for rvc_normal.
    Similarly to the binary to decimal folding, it goes through a string, in
    order to e.g. deal with canonical NaN mantissas, or binary float formats
    that don't support infinities and/or NaNs.
    
    2020-03-11  Jakub Jelinek  <jakub@redhat.com>
    
            PR middle-end/94111
            * dfp.c (decimal_to_binary): Only use decimal128ToString if from->cl
            is rvc_normal, otherwise use real_to_decimal to print the number to
            string.
    
            * gcc.dg/dfp/pr94111.c: New test.
    
    (cherry picked from commit 343c467ccdc24edb9acd7c60d54914d9656ab499)

commit 8d5332862e86edb92f27bd136ccd9fdba3524039
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Wed Mar 11 09:32:22 2020 +0100

    ldist: Further fixes for -ftrapv [PR94114]
    
    As the testcase shows, arithmetics that for -ftrapv would need multiple
    basic blocks can show up not just in nb_bytes expressions where we
    are calling rewrite_to_non_trapping_overflow for a while already,
    but also in the pointer expression to the start of the region.
    While the testcase covers just the first hunk and I've failed to create
    a testcase for the latter, it is at least in theory possible too, so I've
    adjusted that hunk too.
    
    2020-03-11  Jakub Jelinek  <jakub@redhat.com>
    
            PR tree-optimization/94114
            * tree-loop-distribution.c (generate_memset_builtin): Call
            rewrite_to_non_trapping_overflow even on mem.
            (generate_memcpy_builtin): Call rewrite_to_non_trapping_overflow even
            on dest and src.
    
            * gcc.dg/pr94114.c: New test.
    
    (cherry picked from commit 2fd27691f213f2e808626c4cd492b00c801a00fa)

commit c035257d1f775f44359fe55ceb3d018a68d87114
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Mar 5 09:12:44 2020 +0100

    print-rtl: Fix printing of CONST_STRING in DEBUG_INSNs [PR93399]
    
    The following testcase fails to assemble, as CONST_STRING in the DEBUG_INSNs
    is printed as is, so if it contains \n and/or \r, we are in trouble:
            .loc 1 14 3
            # DEBUG haystack => [si]
            # DEBUG needle => "
    "
    In the gimple dumps we print those (STRING_CSTs) as
      # DEBUG haystack => D#1
      # DEBUG needle => "\n"
    so this patch uses what we use in tree printing for the CONST_STRINGs too.
    
    2020-03-05  Jakub Jelinek  <jakub@redhat.com>
    
            PR middle-end/93399
            * tree-pretty-print.h (pretty_print_string): Declare.
            * tree-pretty-print.c (pretty_print_string): Remove forward
            declaration, no longer static.  Change nbytes parameter type
            from unsigned to size_t.
            * print-rtl.c (print_value) <case CONST_STRING>: Use
            pretty_print_string and for shrink way too long strings.
    
            * gcc.dg/pr93399.c: New test.
    
    (cherry picked from commit e0d6777cda966b04fc47d544c09839c4fa94343c)

commit 777fa0a232a6bfc7ed3827f35322ec740fe714e9
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Wed Mar 4 12:59:04 2020 +0100

    inliner: Copy DECL_BY_REFERENCE in copy_decl_to_var [PR93888]
    
    In the following testcase we emit wrong debug info for the karg
    parameter in the DW_TAG_inlined_subroutine into main.
    The problem is that the karg PARM_DECL is DECL_BY_REFERENCE and thus
    in the IL has const K & type, but in the source just const K.
    When the function is inlined, we create a VAR_DECL for it, but don't
    set DECL_BY_REFERENCE, so when emitting DW_AT_location, we treat it like
    a const K & typed variable, but it has DW_AT_abstract_origin which has
    just the const K type and thus the debugger thinks the variable has
    const K type.
    
    Fixed by copying the DECL_BY_REFERENCE flag.  Not doing it in
    copy_decl_for_dup_finish, because copy_decl_no_change already copies
    that flag through copy_node and in copy_result_decl_to_var it is
    undesirable, as we handle DECL_BY_REFERENCE in that case instead
    by changing the type.
    
    2020-03-04  Jakub Jelinek  <jakub@redhat.com>
    
            PR debug/93888
            * tree-inline.c (copy_decl_to_var): Copy DECL_BY_REFERENCE flag.
    
            * g++.dg/guality/pr93888.C: New test.
    
    (cherry picked from commit d2a810ee83e2952bf351498cecf8f5db28860a24)

commit 5dd7682887c959a10d5d1d4d7ad7b4a0950805d2
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Mar 5 19:44:42 2020 +0100

    i386: Fix some -O0 avx2intrin.h and xopintrin.h intrinsic macros [PR94046]
    
    As the testcases show, the macros we have for -O0 for intrinsics that require
    constant argument(s) should first cast the argument to the type the -O1+
    inline uses and afterwards to whatever type e.g. a builtin needs.
    The PR reported one which violated this, and I've grepped for all double-casts
    and grepped out from that meaningful casts where the __m{128,256,512}{,d,i}
    first cast is cast to same sized __v* type and has the same kind of element
    type (float, double, integral).  These 7 macros were using different casts,
    and I've double checked them against the inline function types.
    
    2020-03-05  Jakub Jelinek  <jakub@redhat.com>
    
            PR target/94046
            * config/i386/avx2intrin.h (_mm_mask_i32gather_ps): Fix first cast of
            SRC and MASK arguments to __m128 from __m128d.
            (_mm256_mask_i32gather_ps): Fix first cast of MASK argument to __m256
            from __m256d.
            (_mm_mask_i64gather_ps): Fix first cast of MASK argument to __m128
            from __m128d.
            * config/i386/xopintrin.h (_mm_permute2_pd): Fix first cast of C
            argument to __m128i from __m128d.
            (_mm256_permute2_pd): Fix first cast of C argument to __m256i from
            __m256d.
            (_mm_permute2_ps): Fix first cast of C argument to __m128i from __m128.
            (_mm256_permute2_ps): Fix first cast of C argument to __m256i from
            __m256.
    
            * g++.dg/ext/pr94046-1.C: New test.
            * g++.dg/ext/pr94046-2.C: New test.
    
    (cherry picked from commit 07d52e63d999a0a10c7598c34c48365a357d3d5a)

commit 3549a5cabdfd4ebb197da99f247d0abad0ba55b5
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Mar 3 10:42:34 2020 +0100

    explow: Fix ICE caused by plus_constant [PR94002]
    
    The following testcase ICEs in cross to riscv64-linux.  The problem is
    that we have a DImode integral constant (that doesn't fit into SImode),
    which is pushed into a constant pool and later access just the first half of
    it using a MEM.  When plus_constant is called on such a MEM, if the constant
    has mode, we verify the mode, but if it doesn't, we don't and ICE later on
    when we think the CONST_INT is a valid SImode constant.
    
    2020-03-03  Jakub Jelinek  <jakub@redhat.com>
    
            PR rtl-optimization/94002
            * explow.c (plus_constant): Punt if cst has VOIDmode and
            get_pool_mode is different from mode.
    
            * gcc.dg/pr94002.c: New test.
    
    (cherry picked from commit e913d4f4771e04d4254bf6c0e720fec5e324a898)

commit e1fdce3a0d7064957639949a1ab0fe4a282012c8
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Sep 17 00:17:46 2020 +0000

    Daily bump.

commit 74c624523bdbe4329c7cb77bff222ac695e36c95
Author: Will Schmidt <will_schmidt@vnet.ibm.com>
Date:   Wed Sep 16 11:21:04 2020 -0500

    [PATCH, rs6000] Fix vector long long subtype (PR96139)
    
    Hi,
    This corrects an issue with the powerpc vector long long subtypes.
    As reported by SjMunroe, when building some code with -Wall, and
    attempting to print an element of a "long long vector" with a
    long long printf format string, we will report an error because
    the vector sub-type was improperly defined as int.
    
    When defining a V2DI_type_node we use a TARGET_POWERPC64 ternary to
    define the V2DI_type_node with "vector long" or "vector long long".
    We also need to specify the proper sub-type when we define the type.
    
    Due to some file renames, This is a backport and rework of both
        [PATCH, rs6000] Fix vector long long subtype (PR96139)
    and
        [PATCH, rs6000] Testsuite fixup pr96139 tests
    
    
            PR target/96139
    
    gcc/ChangeLog:
            * config/rs6000/rs6000.c (rs6000_init_builtin): Update V2DI_type_node
              and unsigned_V2DI_type_node definitions.
    
    gcc/testsuite/ChangeLog:
            * gcc.target/powerpc/pr96139-a.c: New test.
            * gcc.target/powerpc/pr96139-b.c: New test.
            * gcc.target/powerpc/pr96139-c.c: New test.

commit a4004f62d60ada3a20dbf30146ca461047a575cc
Author: Sylvia Taylor <sylvia.taylor@arm.com>
Date:   Thu Aug 22 11:28:26 2019 +0000

    add intrinsics for vld1(q)_x4 and vst1(q)_x4
    
    This patch adds the intrinsic functions for:
    - vld1_<mode>_x4
    - vst1_<mode>_x4
    - vld1q_<mode>_x4
    - vst1q_<mode>_x4
    
    Bootstrapped and tested on aarch64-none-linux-gnu.
    
    Committed on behalf of Sylvia Taylor.
    
    2019-08-22  Sylvia Taylor  <sylvia.taylor@arm.com>
    
    gcc/
            * config/aarch64/aarch64-simd-builtins.def:
            (ld1x4): New.
            (st1x4): Likewise.
            * config/aarch64/aarch64-simd.md:
            (aarch64_ld1x4<VALLDIF:mode>): New pattern.
            (aarch64_st1x4<VALLDIF:mode>): Likewise.
            (aarch64_ld1_x4_<mode>): Likewise.
            (aarch64_st1_x4_<mode>): Likewise.
            * config/aarch64/arm_neon.h:
            (vld1_s8_x4): New function.
            (vld1q_s8_x4): Likewise.
            (vld1_s16_x4): Likewise.
            (vld1q_s16_x4): Likewise.
            (vld1_s32_x4): Likewise.
            (vld1q_s32_x4): Likewise.
            (vld1_u8_x4): Likewise.
            (vld1q_u8_x4): Likewise.
            (vld1_u16_x4): Likewise.
            (vld1q_u16_x4): Likewise.
            (vld1_u32_x4): Likewise.
            (vld1q_u32_x4): Likewise.
            (vld1_f16_x4): Likewise.
            (vld1q_f16_x4): Likewise.
            (vld1_f32_x4): Likewise.
            (vld1q_f32_x4): Likewise.
            (vld1_p8_x4): Likewise.
            (vld1q_p8_x4): Likewise.
            (vld1_p16_x4): Likewise.
            (vld1q_p16_x4): Likewise.
            (vld1_s64_x4): Likewise.
            (vld1_u64_x4): Likewise.
            (vld1_p64_x4): Likewise.
            (vld1q_s64_x4): Likewise.
            (vld1q_u64_x4): Likewise.
            (vld1q_p64_x4): Likewise.
            (vld1_f64_x4): Likewise.
            (vld1q_f64_x4): Likewise.
            (vst1_s8_x4): Likewise.
            (vst1q_s8_x4): Likewise.
            (vst1_s16_x4): Likewise.
            (vst1q_s16_x4): Likewise.
            (vst1_s32_x4): Likewise.
            (vst1q_s32_x4): Likewise.
            (vst1_u8_x4): Likewise.
            (vst1q_u8_x4): Likewise.
            (vst1_u16_x4): Likewise.
            (vst1q_u16_x4): Likewise.
            (vst1_u32_x4): Likewise.
            (vst1q_u32_x4): Likewise.
            (vst1_f16_x4): Likewise.
            (vst1q_f16_x4): Likewise.
            (vst1_f32_x4): Likewise.
            (vst1q_f32_x4): Likewise.
            (vst1_p8_x4): Likewise.
            (vst1q_p8_x4): Likewise.
            (vst1_p16_x4): Likewise.
            (vst1q_p16_x4): Likewise.
            (vst1_s64_x4): Likewise.
            (vst1_u64_x4): Likewise.
            (vst1_p64_x4): Likewise.
            (vst1q_s64_x4): Likewise.
            (vst1q_u64_x4): Likewise.
            (vst1q_p64_x4): Likewise.
            (vst1_f64_x4): Likewise.
            (vst1q_f64_x4): Likewise.
    
    gcc/testsuite/
            * gcc.target/aarch64/advsimd-intrinsics/vld1x4.c: New test.
            * gcc.target/aarch64/advsimd-intrinsics/vst1x4.c: New test.
    
    (cherry picked from commit 391625888d4d97f9016ab9ac04acc55d81f0c26f)

commit 2c55e6caa9432b2c1f081cb3aeddd36abec03233
Author: Sameera Deshpande <sameera.deshpande@linaro.org>
Date:   Thu May 31 08:46:20 2018 +0000

    Patch implementing vld1_*_x3, vst1_*_x2 and vst1_*_x3 intrinsics for AARCH64 for all types.
    
    2018-05-31  Sameera Deshpande  <sameera.deshpande@linaro.org>
    
    gcc/
            * config/aarch64/aarch64-simd-builtins.def (ld1x3): New.
            (st1x2): Likewise.
            (st1x3): Likewise.
            * config/aarch64/aarch64-simd.md
            (aarch64_ld1x3<VALLDIF:mode>): New pattern.
            (aarch64_ld1_x3_<mode>): Likewise
            (aarch64_st1x2<VALLDIF:mode>): Likewise
            (aarch64_st1_x2_<mode>): Likewise
            (aarch64_st1x3<VALLDIF:mode>): Likewise
            (aarch64_st1_x3_<mode>): Likewise
            * config/aarch64/arm_neon.h (vld1_u8_x3): New function.
            (vld1_s8_x3): Likewise.
            (vld1_u16_x3): Likewise.
            (vld1_s16_x3): Likewise.
            (vld1_u32_x3): Likewise.
            (vld1_s32_x3): Likewise.
            (vld1_u64_x3): Likewise.
            (vld1_s64_x3): Likewise.
            (vld1_f16_x3): Likewise.
            (vld1_f32_x3): Likewise.
            (vld1_f64_x3): Likewise.
            (vld1_p8_x3): Likewise.
            (vld1_p16_x3): Likewise.
            (vld1_p64_x3): Likewise.
            (vld1q_u8_x3): Likewise.
            (vld1q_s8_x3): Likewise.
            (vld1q_u16_x3): Likewise.
            (vld1q_s16_x3): Likewise.
            (vld1q_u32_x3): Likewise.
            (vld1q_s32_x3): Likewise.
            (vld1q_u64_x3): Likewise.
            (vld1q_s64_x3): Likewise.
            (vld1q_f16_x3): Likewise.
            (vld1q_f32_x3): Likewise.
            (vld1q_f64_x3): Likewise.
            (vld1q_p8_x3): Likewise.
            (vld1q_p16_x3): Likewise.
            (vld1q_p64_x3): Likewise.
            (vst1_s64_x2): Likewise.
            (vst1_u64_x2): Likewise.
            (vst1_f64_x2): Likewise.
            (vst1_s8_x2): Likewise.
            (vst1_p8_x2): Likewise.
            (vst1_s16_x2): Likewise.
            (vst1_p16_x2): Likewise.
            (vst1_s32_x2): Likewise.
            (vst1_u8_x2): Likewise.
            (vst1_u16_x2): Likewise.
            (vst1_u32_x2): Likewise.
            (vst1_f16_x2): Likewise.
            (vst1_f32_x2): Likewise.
            (vst1_p64_x2): Likewise.
            (vst1q_s8_x2): Likewise.
            (vst1q_p8_x2): Likewise.
            (vst1q_s16_x2): Likewise.
            (vst1q_p16_x2): Likewise.
            (vst1q_s32_x2): Likewise.
            (vst1q_s64_x2): Likewise.
            (vst1q_u8_x2): Likewise.
            (vst1q_u16_x2): Likewise.
            (vst1q_u32_x2): Likewise.
            (vst1q_u64_x2): Likewise.
            (vst1q_f16_x2): Likewise.
            (vst1q_f32_x2): Likewise.
            (vst1q_f64_x2): Likewise.
            (vst1q_p64_x2): Likewise.
            (vst1_s64_x3): Likewise.
            (vst1_u64_x3): Likewise.
            (vst1_f64_x3): Likewise.
            (vst1_s8_x3): Likewise.
            (vst1_p8_x3): Likewise.
            (vst1_s16_x3): Likewise.
            (vst1_p16_x3): Likewise.
            (vst1_s32_x3): Likewise.
            (vst1_u8_x3): Likewise.
            (vst1_u16_x3): Likewise.
            (vst1_u32_x3): Likewise.
            (vst1_f16_x3): Likewise.
            (vst1_f32_x3): Likewise.
            (vst1_p64_x3): Likewise.
            (vst1q_s8_x3): Likewise.
            (vst1q_p8_x3): Likewise.
            (vst1q_s16_x3): Likewise.
            (vst1q_p16_x3): Likewise.
            (vst1q_s32_x3): Likewise.
            (vst1q_s64_x3): Likewise.
            (vst1q_u8_x3): Likewise.
            (vst1q_u16_x3): Likewise.
            (vst1q_u32_x3): Likewise.
            (vst1q_u64_x3): Likewise.
            (vst1q_f16_x3): Likewise.
            (vst1q_f32_x3): Likewise.
            (vst1q_f64_x3): Likewise.
            (vst1q_p64_x3): Likewise.
    
    gcc/testsuite/
            * gcc.target/aarch64/advsimd-intrinsics/vld1x3.c: New test for
            vld1x3 intrinsics for aarch64.
            * gcc.target/aarch64/advsimd-intrinsics/vst1x2.c: New test for
            vst1x2 intrinsics for aarch64.
            * gcc.target/aarch64/advsimd-intrinsics/vst1x3.c: New test for
            vst1x3 intrinsics for aarch64.
    
    (cherry picked from commit 568421baa5a4cdb7bb7c5ac323c939492ee3f052)

commit db0fe2954f474e863e9c237a963b950a343612c5
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Sep 16 00:17:51 2020 +0000

    Daily bump.

commit e7d3ab351008a409403f5f378c324316caa1bf47
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Sep 15 00:17:54 2020 +0000

    Daily bump.

commit 39e274a502f966c2b5841ba680a3e3edea1810ec
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Sep 14 00:17:37 2020 +0000

    Daily bump.

commit f3a0968de4ff3be23263a0d31e4d2bcae69d2494
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Sep 13 00:17:33 2020 +0000

    Daily bump.

commit a46de9c7310c4927abc105e7d125c44e755bec60
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Sep 12 00:17:44 2020 +0000

    Daily bump.

commit 1521433e2b6bff583b227fe391fe9dcf02f6000e
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Wed Mar 18 23:19:12 2020 +0000

    libstdc++: Fix is_trivially_constructible (PR 94033)
    
    This attempts to make is_nothrow_constructible more robust (and
    efficient to compile) by not depending on is_constructible. Instead the
    __is_constructible intrinsic is used directly. The helper class
    __is_nt_constructible_impl which checks whether the construction is
    non-throwing now takes a bool template parameter that is substituted by
    the result of the instrinsic. This fixes the reported bug by not using
    the already-instantiated (and incorrect) value of std::is_constructible.
    I don't think it really fixes the problem in general, because
    std::is_nothrow_constructible itself could already have been
    instantiated in a context where it gives the wrong result. A proper fix
    needs to be done in the compiler.
    
    Backported to the gcc-8 and gcc-9 branches to fix PR 96999.
    
            PR libstdc++/94033
            * include/std/type_traits (__is_nt_default_constructible_atom): Remove.
            (__is_nt_default_constructible_impl): Remove.
            (__is_nothrow_default_constructible_impl): Remove.
            (__is_nt_constructible_impl): Add bool template parameter. Adjust
            partial specializations.
            (__is_nothrow_constructible_impl): Replace class template with alias
            template.
            (is_nothrow_default_constructible): Derive from alias template
            __is_nothrow_constructible_impl instead of
            __is_nothrow_default_constructible_impl.
            * testsuite/20_util/is_nothrow_constructible/94003.cc: New test.
    
    (cherry picked from commit b3341826531e80e02f194460b4fbe1b0541c0463)

commit 877cdcc714704e242f477580d81397cc1d0fc90e
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Thu Sep 10 15:49:26 2020 +0100

    libstdc++: Enable assertions in constexpr string_view members [PR 71960]
    
    There is no longer any reason we can't just use __glibcxx_assert in
    constexpr functions. As long as the condition is true, there will be no
    call to std::__replacement_assert that would make the function
    ineligible for constant evaluation.
    
            PR libstdc++/71960
            * include/experimental/string_view (basic_string_view):
            Enable debug assertions.
            * include/std/string_view (basic_string_view):
            Likewise.

commit 1fcb8430cfdbae0cf5abc1898d763bd4a3069d04
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Sep 11 00:17:34 2020 +0000

    Daily bump.

commit 945644e2ab0cda9117deb6b66da0b24d6e75a5d8
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Sep 10 00:17:38 2020 +0000

    Daily bump.

commit b8c7eae4be6fccfe24ed36d618c0f2d67256e993
Author: Harald Anlauf <anlauf@gmx.de>
Date:   Thu Sep 3 20:33:14 2020 +0200

    PR fortran/96890 - Wrong answer with intrinsic IALL
    
    The IALL intrinsic would always return 0 when the DIM and MASK arguments
    were present since the initial value of repeated BIT-AND operations was
    set to 0 instead of -1.
    
    libgfortran/ChangeLog:
    
            * m4/iall.m4: Initial value for result should be -1.
            * generated/iall_i1.c (miall_i1): Generated.
            * generated/iall_i16.c (miall_i16): Likewise.
            * generated/iall_i2.c (miall_i2): Likewise.
            * generated/iall_i4.c (miall_i4): Likewise.
            * generated/iall_i8.c (miall_i8): Likewise.
    
    gcc/testsuite/ChangeLog:
    
            * gfortran.dg/iall_masked.f90: New test.
    
    (cherry picked from commit 8eeeecbcc17041fdfd3ccc928161ae86e7f9b456)

commit 7ad1903e82e1f5ad4e48ceb3fe3c99b38eb77505
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Sep 9 00:17:41 2020 +0000

    Daily bump.

commit 611a899607c7e31209271c9603f3ac0d186f26a8
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Sep 8 00:17:45 2020 +0000

    Daily bump.

commit 199467696e523a9638a7e59f427f76e1d628f773
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Sep 7 00:17:34 2020 +0000

    Daily bump.

commit a1a04077d391ca9057f68d50a094648d190a060f
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Sep 6 00:17:32 2020 +0000

    Daily bump.

commit ad66fe28f3c06ba27af69a98bd6c61ba2e99c4f1
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Sep 5 00:17:30 2020 +0000

    Daily bump.

commit b0d5e58993627f44ae614c2386561d8aa011855e
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Sep 4 00:17:47 2020 +0000

    Daily bump.

commit eeb970e1ca1685f90b10f61566ad497d0c991837
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Sep 3 00:17:39 2020 +0000

    Daily bump.

commit 16efd8a4e7df8393deda8f612b070d218283dabb
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Sep 2 00:17:40 2020 +0000

    Daily bump.

commit 99f496bea7cc1107a62e0f0cc75bd40d84e672f0
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Sep 1 00:17:39 2020 +0000

    Daily bump.

commit c4081a0b2574fb8e49313648f5a9dc14df94f492
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Aug 31 00:17:30 2020 +0000

    Daily bump.

commit 3f65e214c0a7313bf30b71418c7bb40bdf0674a5
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Aug 30 00:17:32 2020 +0000

    Daily bump.

commit 1add9bf60be2e741e5c19d3547b898c3093adbd5
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Aug 29 00:17:32 2020 +0000

    Daily bump.

commit d8f4b1df62154d4e46a5b0b04d8fbf6bceb767f2
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Aug 28 00:17:32 2020 +0000

    Daily bump.

commit 7edec20c8f9a97b3c036158212b76211b7fe42df
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Aug 27 00:17:38 2020 +0000

    Daily bump.

commit 324ec2752c7e0fb09f512c4488091f17a4726f97
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Aug 26 00:17:51 2020 +0000

    Daily bump.

commit bb952c62eb57de20232977e42a714449d1f0e744
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Aug 25 00:17:32 2020 +0000

    Daily bump.

commit ebc88f3958bce5d0f3f402e143a488fdf2b3e70a
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Aug 24 00:17:34 2020 +0000

    Daily bump.

commit e0a14adec0a3dd35df0aabff48143a04d78de300
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Aug 23 00:17:38 2020 +0000

    Daily bump.

commit 7cea2ec7f4e8ee39020bd0da65c5a51e87fe7515
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Aug 22 00:17:35 2020 +0000

    Daily bump.

commit a1c02b7da22dae2f02af3345d3726f2dc6ecc322
Author: Richard Sandiford <richard.sandiford@arm.com>
Date:   Fri Aug 21 19:07:06 2020 +0100

    Update links to Arm docs
    
    gcc/
            * doc/extend.texi: Update links to Arm docs.
            * doc/invoke.texi: Likewise.
    
    (cherry picked from commit 09698e44c766c4a05ee463d2e36bc1fdac21dce4)
    (cherry picked from commit 0fc33daacbdf993ab0d5830b0af3468b0df7c187)

commit 0dd0cfc6182f3fda92aea3930430b833bfd933ac
Author: Tamar Christina <tamar.christina@arm.com>
Date:   Mon Aug 3 12:03:17 2020 +0100

    AArch64: Fix hwasan failure in readline.
    
    My previous fix added an unchecked call to fgets in the new function readline.
    fgets can fail when there's an error reading the file in which case it returns
    NULL.  It also returns NULL when the next character is EOF.
    
    The EOF case is already covered by the existing code but the error case isn't.
    This fixes it by returning the empty string on error.
    
    Also I now use strnlen instead of strlen to make sure we never read outside the
    buffer.
    
    This was flagged by Matthew Malcomson during his hwasan work.
    
    gcc/ChangeLog:
    
            * config/aarch64/driver-aarch64.c (readline): Check return value fgets.
    
    (cherry picked from commit 341573406b392f4d57e052ce22f80e85a7c479e9)

commit 6b4efdeaa6d8aa276a17bb646f4c15a95a973de3
Author: Tamar Christina <tamar.christina@arm.com>
Date:   Wed Jul 8 14:32:34 2020 +0100

    AArch64: Add test for -mcpu=native
    
    gcc/testsuite/ChangeLog:
    
            * gcc.target/aarch64/cpunative/aarch64-cpunative.exp: New file.
            * gcc.target/aarch64/cpunative/info_0: New test.
            * gcc.target/aarch64/cpunative/info_1: New test.
            * gcc.target/aarch64/cpunative/info_10: New test.
            * gcc.target/aarch64/cpunative/info_11: New test.
            * gcc.target/aarch64/cpunative/info_12: New test.
            * gcc.target/aarch64/cpunative/info_13: New test.
            * gcc.target/aarch64/cpunative/info_14: New test.
            * gcc.target/aarch64/cpunative/info_15: New test.
            * gcc.target/aarch64/cpunative/info_2: New test.
            * gcc.target/aarch64/cpunative/info_3: New test.
            * gcc.target/aarch64/cpunative/info_4: New test.
            * gcc.target/aarch64/cpunative/info_5: New test.
            * gcc.target/aarch64/cpunative/info_6: New test.
            * gcc.target/aarch64/cpunative/info_7: New test.
            * gcc.target/aarch64/cpunative/info_8: New test.
            * gcc.target/aarch64/cpunative/info_9: New test.
            * gcc.target/aarch64/cpunative/native_cpu_0.c: New test.
            * gcc.target/aarch64/cpunative/native_cpu_1.c: New test.
            * gcc.target/aarch64/cpunative/native_cpu_10.c: New test.
            * gcc.target/aarch64/cpunative/native_cpu_13.c: New test.
            * gcc.target/aarch64/cpunative/native_cpu_14.c: New test.
            * gcc.target/aarch64/cpunative/native_cpu_2.c: New test.
            * gcc.target/aarch64/cpunative/native_cpu_3.c: New test.
            * gcc.target/aarch64/cpunative/native_cpu_4.c: New test.
            * gcc.target/aarch64/cpunative/native_cpu_5.c: New test.
            * gcc.target/aarch64/cpunative/native_cpu_6.c: New test.
            * gcc.target/aarch64/cpunative/native_cpu_7.c: New test.
            * gcc.target/aarch64/cpunative/native_cpu_8.c: New test.
    
    (cherry picked from commit 8bc83ee378e1cac65d75752b5137ec35d9e1aca1)

commit b852fba56d66242b3d13719c3062c5cecaab2435
Author: Tamar Christina <tamar.christina@arm.com>
Date:   Fri Jul 17 13:12:46 2020 +0100

    Testuite: Document environment setting directives
    
    This document some of the existing DejaGnu directives to modify
    environment variables before test or compiler invocations.
    
    gcc/ChangeLog:
    
            * doc/sourcebuild.texi (dg-set-compiler-env-var,
            dg-set-target-env-var): Document.
    
    (cherry picked from commit 7c4491e33d1be16bfb85d448862a8b956d35e4d8)

commit 8e93c77a7e0a93ecd9e068689f21b7e662e7b3cd
Author: Tamar Christina <tamar.christina@arm.com>
Date:   Fri Jul 17 13:12:23 2020 +0100

    Testsuite: Make it easier to debug environment setting functions
    
    This adds verbose output to dg-set-compiler-env-var and dg-set-target-env-var
    so you can actually see what they're setting when you add -v -v.
    
    gcc/testsuite/ChangeLog:
    
            * lib/gcc-dg.exp (dg-set-compiler-env-var, dg-set-target-env-var): Add
            verbose output.
    
    (cherry picked from commit e410cbff5d5a408b7c64a0c426951afc2a24df93)

commit f7f6626f0398b9977a67a9e219302274c4121e3a
Author: Tamar Christina <tamar.christina@arm.com>
Date:   Fri Jul 17 13:12:00 2020 +0100

    Arm: Add GCC_CPUINFO override
    
    This adds an in intentionally undocumented environment variable
    GCC_CPUINFO which can be used to test -mcpu=native.
    
    Tests using these are added later on.
    
    gcc/ChangeLog:
    
            * config/arm/driver-arm.c (host_detect_local_cpu): Add GCC_CPUINFO.
    
    (cherry picked from commit 34a6c43487caf3a2a0ec9c7c79c526d116abc8b9)

commit 9c7fce1459ef1c99a168501c596d3b9c4f5955d3
Author: Tamar Christina <tamar.christina@arm.com>
Date:   Fri Jul 17 13:10:53 2020 +0100

    AArch64: Add GCC_CPUINFO override
    
    This adds an in intentionally undocumented environment variable
    GCC_CPUINFO which can be used to test -mcpu=native.
    
    Tests using this are added later on.
    
    gcc/ChangeLog:
    
            * config/aarch64/driver-aarch64.c (host_detect_local_cpu):
            Add GCC_CPUINFO.
    
    (cherry picked from commit 55f6addc0c102eab2bf19d94de3ce52f9de0ab91)

commit 7f8f284fa760fa504116c3c29f9f522b076a6392
Author: Tamar Christina <tamar.christina@arm.com>
Date:   Fri Jul 17 13:10:28 2020 +0100

    AArch64: Fix bugs in -mcpu=native detection.
    
    This patch fixes a couple of issues in AArch64's -mcpu=native processing:
    
    The buffer used to read the lines from /proc/cpuinfo is 128 bytes long.  While
    this was enough in the past with the increase in architecture extensions it is
    no longer enough.   It results in two bugs:
    
    1) No option string longer than 127 characters is correctly parsed.  Features
       that are supported are silently ignored.
    
    2) It incorrectly enables features that are not present on the machine:
      a) It checks for substring matching instead of full word matching.  This makes
         it incorrectly detect sb support when ssbs is provided instead.
      b) Due to the truncation at the 127 char border it also incorrectly enables
         features due to the full feature being cut off and the part that is left
         accidentally enables something else.
    
    This breaks -mcpu=native detection on some of our newer system.
    
    The patch fixes these issues by reading full lines up to the \n in a string.
    This gives us the full feature line.  Secondly it creates a set from this string
    to:
    
     1) Reduce matching complexity from O(n*m) to O(n*logm).
     2) Perform whole word matching instead of substring matching.
    
    To make this code somewhat cleaner I also changed from using char* to using
    std::string and std::set.
    
    Note that I have intentionally avoided the use of ifstream and stringstream
    to make it easier to backport.  I have also not change the substring matching
    for the initial line classification as I cannot find a documented cpuinfo format
    which leads me to believe there may be kernels out there that require this which
    may be why the original code does this.
    
    I also do not want this to break if the kernel adds a new line that is long and
    indents the file by two tabs to keep everything aligned.  In short I think an
    imprecise match is the right thing here.
    
    Test for this is added as the last thing in this series as it requires some
    changes to be made to be able to test this.
    
    gcc/ChangeLog:
    
            * config/aarch64/driver-aarch64.c (INCLUDE_SET): New.
            (parse_field): Use std::string.
            (split_words, readline, find_field): New.
            (host_detect_local_cpu): Fix truncation issues.
    
    (cherry picked from commit b399f3c6425f6c33b64e813899cbd589288ef716)

commit 185d9cb0c436b34d4d517259d563d2221a8744ff
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Aug 21 00:17:38 2020 +0000

    Daily bump.

commit c6b090a8c49532d59b7d5d7d9fbe753810459491
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Aug 20 00:17:43 2020 +0000

    Daily bump.

commit 2e0e4314b3ec7fd819d7aa65e81e614750417954
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Aug 19 00:17:38 2020 +0000

    Daily bump.

commit bf7b9330982165e051de0962c5bc231e2d1242d9
Author: Uros Bizjak <ubizjak@gmail.com>
Date:   Tue Aug 18 19:48:51 2020 +0200

    i386: Fix restore_stack_nonlocal expander [PR96536].
    
    -fcf-protection code in restore_stack_nonlocal uses a branch based on
    a clobber result.  The patch adds missing compare.
    
    2020-08-18  Uroš Bizjak  <ubizjak@gmail.com>
    
    gcc/ChangeLog:
    
            PR target/96536
            * config/i386/i386.md (restore_stack_nonlocal):
            Add missing compare RTX.

commit c48a50ef269c93f39f37d0b93c00a57e6ddf5e7c
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Aug 18 00:17:37 2020 +0000

    Daily bump.

commit 36e677905cba2a6a97aaa82e77a08513080214bc
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Aug 17 00:17:30 2020 +0000

    Daily bump.

commit 10e2ba035583c02efc281fb232fdd0d99fb4fc16
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Aug 16 00:17:31 2020 +0000

    Daily bump.

commit fa6464edd031800fab6619947dd29967afdf35d2
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Aug 15 00:17:33 2020 +0000

    Daily bump.

commit 0d5f0894b84777b7de3598d193ea549d3482aeb0
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Aug 14 00:17:33 2020 +0000

    Daily bump.

commit a2c5598640423f2b9679b9f3e8587fdf605f680b
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Aug 13 00:17:37 2020 +0000

    Daily bump.

commit 6786b369ab2851b25e8fd2aae33d3b1bf20de132
Author: Kewen Lin <linkw@linux.ibm.com>
Date:   Wed Aug 12 04:19:16 2020 -0500

    testsuite: Add -fno-common to pr82374.c [PR94077]
    
    As the PR comments show, the case gcc.dg/gomp/pr82374.c fails on
    Power7 since gcc8.  But it passes from gcc10.  By looking into
    the difference, it's due to that gcc10 sets -fno-common as default,
    which makes vectorizer force the alignment and be able to use
    aligned vector load/store on those targets which doesn't support
    unaligned vector load/store (here it's Power7).
    
    As Jakub suggested in the PR, this patch is to append -fno-common
    into dg-options.
    
    Verified with gcc8/gcc9 releases on ppc64-redhat-linux (Power7).
    
    gcc/testsuite/ChangeLog:
    
            PR testsuite/94077
            * gcc.dg/gomp/pr82374.c: Add option -fno-common.

commit fc2b0c3ca0206d5e91ba78c47aa3ae0b0d8d01d8
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Aug 12 00:17:37 2020 +0000

    Daily bump.

commit db6447c88b18f4175624a94ff5f3a1519dcd9ca8
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Aug 11 00:17:56 2020 +0000

    Daily bump.

commit 11bdad7ce94234d5b9e7ac5ad6c37612454b87d8
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Mon Aug 10 11:47:50 2020 +0100

    libstdc++: Remove unused Makefile.in
    
    This file was unintentionally added by r271568 when backporting a change
    from trunk.
    
            * src/c++17/Makefile.in: Remove unused file.

commit 755f90be5f5ab2d697a3d4b868f63b627c4a8e2b
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Aug 10 00:17:44 2020 +0000

    Daily bump.

commit ef97eb30c27cae4b9891724971229adb10f76d00
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Aug 9 00:17:48 2020 +0000

    Daily bump.

commit 53e0eafd4622a03deab9687a67f502c42f6179b9
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Aug 8 00:17:46 2020 +0000

    Daily bump.

commit 3e2d69ee245e5a44c53cae27a797b97ba529eb72
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Mon Aug 3 22:55:28 2020 +0200

    aarch64: Fix up __aarch64_cas16_acq_rel fallback
    
    As mentioned in the PR, the fallback path when LSE is unavailable writes
    incorrect registers to the memory if the previous content compares equal
    to x0, x1 - it writes copy of x0, x1 from the start of function, but it
    should write x2, x3.
    
    2020-08-03  Jakub Jelinek  <jakub@redhat.com>
    
            PR target/96402
            * config/aarch64/lse.S (__aarch64_cas16_acq_rel): Use x2, x3 instead
            of x(tmp0), x(tmp1) in STXP arguments.
    
            * gcc.target/aarch64/pr96402.c: New test.
    
    (cherry picked from commit 90b43856fdff7d96d93d22970eca8a86c56e0ddc)

commit b623cf82022d8837c228c1c9ca6a585318c24e40
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Thu Mar 12 17:39:04 2020 +0000

    libstdc++: Fix FS-dependent filesystem tests
    
    These tests were failing on XFS because it doesn't support setting file
    timestamps past 2038, so the expected overflow when reading back a huge
    timestamp into a file_time_type didn't happen.
    
    Additionally, the std::filesystem::file_time_type::clock has an
    epoch that is out of range of 32-bit time_t so testing times around that
    epoch may also fail.
    
    This fixes the tests to give up gracefully if the filesystem doesn't
    support times that can't be represented in 32-bit time_t.
    
    Backport from mainline
    2020-02-28  Jonathan Wakely  <jwakely@redhat.com>
    
            * testsuite/27_io/filesystem/operations/last_write_time.cc: Fixes for
            filesystems that silently truncate timestamps.
            * testsuite/experimental/filesystem/operations/last_write_time.cc:
            Likewise.
    
    (cherry picked from commit 2fa3247fef79ede9ec3638605ea137b0e4d76075)

commit 3b05a417774d40cf1b9fca61630209de8338ba47
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Thu Jan 10 15:39:28 2019 +0000

    Fix filesystem::last_write_time failure with 32-bit time_t
    
            * testsuite/27_io/filesystem/operations/last_write_time.cc: Fix
            test failures on targets with 32-bit time_t.
    
    (cherry picked from commit 174f1d264274d3f77133713a3853fc016ba527b4)

commit 01cbd26b022cc9d4eaf26287b48299acfce80348
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Sat Mar 21 22:11:44 2020 +0000

    libstdc++: Fix experimental::path::generic_string (PR 93245)
    
    This function was unimplemented, simply returning the native format
    string instead.
    
            PR libstdc++/93245
            * include/experimental/bits/fs_path.h (path::generic_string<C,T,A>()):
            Return the generic format not the native format.
            * testsuite/experimental/filesystem/path/generic/generic_string.cc:
            Improve test coverage.
    
    (cherry picked from commit a577c0c26931090e7c25e56ef5ffc807627961ec)

commit 39a5a04daa09c711caeb6aaff12f1d03406fe29f
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Sat Mar 21 21:51:07 2020 +0000

    libstdc++: Fix path::generic_string allocator handling (PR 94242)
    
    It's not possible to construct a path::string_type from an allocator of
    a different type. Create the correct specialization of basic_string, and
    adjust path::_S_str_convert to use a basic_string_view so that it is
    independent of the allocator type.
    
            PR libstdc++/94242
            * include/bits/fs_path.h (path::_S_str_convert): Replace first
            parameter with basic_string_view so that strings with different
            allocators can be accepted.
            (path::generic_string<C,T,A>()): Use basic_string object that uses the
            right allocator type.
            * testsuite/27_io/filesystem/path/generic/94242.cc: New test.
            * testsuite/27_io/filesystem/path/generic/generic_string.cc: Improve
            test coverage.
    
    (cherry picked from commit 9fc985118d9f5014afc1caf32a411ee5803fba61)

commit 566304a863e86bd894ee8a06527395da22c919b1
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Aug 7 00:17:48 2020 +0000

    Daily bump.

commit 8b692f8b4c0e47bc8e11d9c3ab83049f68b2edbc
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Thu Aug 6 18:44:50 2020 +0100

    libstdc++: Fix unnecessary allocations in read_symlink [PR 96484]
    
    libstdc++-v3/ChangeLog:
    
            PR libstdc++/96484
            * src/filesystem/ops.cc (fs::read_symlink): Return an error
            immediately for non-symlinks.
            * src/filesystem/std-ops.cc (fs::read_symlink): Likewise.
    
    (cherry picked from commit 6a13a4e3f29fc4ce5eff96d74ba965c9fdc02184)

commit 9801353c9d8651808880f3550de52edaae74c2f2
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Aug 6 00:17:40 2020 +0000

    Daily bump.

commit c96fe73b73583b8fe39898a1fae57166c3f559dc
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Aug 5 00:17:56 2020 +0000

    Daily bump.

commit 1d317f4315ef3983fad37427887581761e3491c2
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Aug 4 00:17:34 2020 +0000

    Daily bump.

commit 5eda65b5c509d694d5741845d570f39d1e8083b8
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Mon Aug 3 21:16:50 2020 +0100

    cpp: Do not use @dots for ... tokens in code examples
    
    This prevents a ... token in code examples from being turned into a
    single HORIZONTAL ELLIPSIS glyph (e.g. via the HTML &hellip; entity).
    
    gcc/ChangeLog:
    
            * doc/cpp.texi (Variadic Macros): Use the exact ... token in
            code examples.
    
    (cherry picked from commit 2ac7fe2769890fe4c146da9cfa6d0eabb185d7db)

commit 165277b9695dc24069ac230c95afe929cf57ef98
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Aug 3 00:17:30 2020 +0000

    Daily bump.

commit 1719d142419274e560c6832dd5aca4c9b1c44c63
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Aug 2 00:17:33 2020 +0000

    Daily bump.

commit b3f17f1bdd96bfc8a69f230685f8b855a27f8f6b
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Aug 1 00:17:37 2020 +0000

    Daily bump.

commit da01a92da503c123b532051cb34ba040a76dceff
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Jul 31 00:17:34 2020 +0000

    Daily bump.

commit 4c482062f1cf1febd7571b7fd77516d9c4f38081
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Jul 30 00:17:33 2020 +0000

    Daily bump.

commit e89b5340c0696209f5802cebdcdc106557d342a7
Author: Martin Liska <mliska@suse.cz>
Date:   Wed Jul 29 14:13:42 2020 +0200

    gcc-changelog: fix combining of arguments.
    
    contrib/ChangeLog:
    
    2020-07-29  Martin Liska  <mliska@suse.cz>
    
            * git-backport.py: fix how are ChangeLog paths combined.

commit 34dc998ce9d963545a9d6cfaa9590cc8818e8463
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Jul 29 00:17:33 2020 +0000

    Daily bump.

commit 1c2494fcf24f1cec0535b054f5a76fcd80f9afdb
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Jul 28 00:17:40 2020 +0000

    Daily bump.

commit 3b3e52aff2feecaa607940e05ca69a5ddbd7dd60
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Jul 27 00:17:30 2020 +0000

    Daily bump.

commit cec3ae95129ff7aceba415c8ec4ff5c668acc0f7
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Jul 26 00:17:28 2020 +0000

    Daily bump.

commit 1757a63809d6c6073c87978c22dcfffe85753c0f
Author: Dominique d'Humieres <dhumieres.dominique@free.fr>
Date:   Fri Jul 24 20:07:12 2020 +0200

    PR 93592 - Invalid UP/DOWN rounding with EN descriptor.
    
    The fix is obvious (I have added a comment). The tests are probably
    an overkill, but it does not hurt.
    
    libgfortran/ChangeLog:
    
            PR fortran/93592
            * io/write_float.def (build_float_string): Do not reset
              nbefore for FMT_F and FMT_EN.
    
    gcc/testsuite/ChangeLog:
    
            PR fortran/93592
            * gfortran.dg/fmt_en.f90: Adjust test.
            * gfortran.dg/fmt_en_rd.f90: New test.
            * gfortran.dg/fmt_en_rn.f90: New test.
            * gfortran.dg/fmt_en_ru.f90: New test.
            * gfortran.dg/fmt_en_rz.f90: New test.
    
    (cherry picked from commit 05e0971bcf94a481cbfa2731484f024a67dbd4a5)

commit c940e808b4813aa018de6ce1e1400e69ec8b8124
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Jul 25 00:17:33 2020 +0000

    Daily bump.

commit ea22267f7bebdfa06f567177c270f7f5f456e468
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Jul 24 00:17:33 2020 +0000

    Daily bump.

commit 41c072bded24642d6b4a38e3f5e2890c1aa8c5a1
Author: Harald Anlauf <anlauf@gmx.de>
Date:   Tue Jul 21 21:37:30 2020 +0200

    PR fortran/89574 - ICE in conv_function_val, at fortran/trans-expr.c:3792
    
    When checking for an external procedure from the same file, do not
    consider symbols from different modules.
    
    gcc/fortran/
            PR fortran/89574
            * trans-decl.c (gfc_get_extern_function_decl): Check whether a
            symbol belongs to a different module.
    
    (cherry picked from commit 28f2a080cc27531a8c78aec9f44aeff4961c2a4c)

commit 3cbdea2dbbaeab1c76255cd4631a9e9fcc67b112
Author: Martin Liska <mliska@suse.cz>
Date:   Thu Jul 23 10:39:00 2020 +0200

    gcc-changelog: fix when somebody reverts a backport
    
    contrib/ChangeLog:
    
            * gcc-changelog/git_commit.py: When reverting a backport,
            we should print only Revert header.
    
    (cherry picked from commit 02cada26e4783b4bfeaf6512a6c22df24d7a25fc)

commit dfe4408535008fb5ceddadccfba1d35469655db2
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Fri Jul 17 09:53:19 2020 +0100

    gcc-changelog: Fix typo in output
    
    contrib/ChangeLog:
    
            * gcc-changelog/git_update_version.py: Fix typo.
    
    (cherry picked from commit 0c1d1c01039a96c191a7aded40e5df40b14d387a)

commit a946595a750c72307eb3cdbc89dec7445c79bb47
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Jul 23 00:17:34 2020 +0000

    Daily bump.

commit eb2a8a9e14f4b86fc6d3d1578364381d4a4ffb54
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Jul 22 00:17:35 2020 +0000

    Daily bump.

commit c54d4e218f18c66ce1ad9d7e7762357fd7edacb7
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Mon Jan 28 23:58:57 2019 +0000

    PR libstdc++/68737 Do not use vsnprintf on HPUX
    
    It doesn't conform to the spec, so use vsprintf with a large buffer
    instead.
    
            PR libstdc++/68737
            * config/locale/generic/c_locale.h (__convert_from_v)
            [_GLIBCXX_USE_C99_STDIO]: Also check _GLIBCXX_HAVE_BROKEN_VSNPRINTF.
            * config/os/hpux/os_defines.h: Define _GLIBCXX_HAVE_BROKEN_VSNPRINTF.
            * include/bits/locale_facets.tcc (num_put::_M_insert_float)
            [_GLIBCXX_USE_C99_STDIO]: Also check _GLIBCXX_HAVE_BROKEN_VSNPRINTF.
    
    (cherry picked from commit c98f255154798847bdd1fc6ce33266c1a1ddc13a)

commit 65e85d4d89dc447e879639fbc70725e7249fb0a3
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Jul 21 00:17:40 2020 +0000

    Daily bump.

commit 0c1ead4ca67c500cfd75e8613dbc3cdb93eebed8
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Jul 20 00:17:33 2020 +0000

    Daily bump.

commit ac766bc9369490b9b927baf3acf154a00fc18595
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Jul 19 00:17:33 2020 +0000

    Daily bump.

commit cf3dd7cf1ccb0f9b8f7fe0b0b0ecc2a4b35c628d
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Jul 18 00:17:34 2020 +0000

    Daily bump.

commit eba1113dbdf4b1d0d88755b2538327a1d09837b3
Author: Will Schmidt <will_schmidt@vnet.ibm.com>
Date:   Mon Jul 13 13:38:17 2020 -0500

    [PATCH] rs6000 improve handling of built-in initialization [PR95952]
    
      Handle a scenario with a combination of old hardware, gcc-8 and
    binutils where gcc will ICE during it's selftest.  This ICE was exposed
    when the builtin processing for better #pragma support was added, where
    we no longer skip builtin initialization based on the current mask.
    
    Per the bug report and assorted debug, the ICE occurrs when building
    the gcc-8 branch on a 970* based system with an old binutils.  (gcc-9 and
    newer is OK.  binutils 2.34 is reported to allow success).
    
    The attached patch adds a clause to the builtin initialization to skip
    initialization of a builtin when the builtin mask is set but the icode
    value is zero.   The subsequent assert check remains in place.
    
    2020-07-13  Will Schmidt  <will_schmidt@vnet.ibm.com>
    
    gcc/ChangeLog:
    
            PR target/95952
    
            * config/rs6000/rs6000.c (altivec_init_builtins): Add continue clause to
            predicate builtin handling.

commit da8fd11388922aa04220fb101338ce2f1ec8690d
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Jul 17 00:17:36 2020 +0000

    Daily bump.

commit 385b9589e455c2e98369e4c4d4dcc75a7d0b278e
Author: Stefan Schulze Frielinghaus <stefansf@linux.ibm.com>
Date:   Tue May 26 18:21:52 2020 +0200

    S/390: Emit vector alignment hints for z13 if AS accepts them
    
    Squashed with commit 87cb9423add08743d8bb3368f0af61ddc9572837
    
    gcc/ChangeLog:
    
            * config.in: Regenerate.
            * config/s390/s390.c (print_operand): Emit vector alignment hints
            for target z13, if AS accepts them.  For other targets the logic
            stays the same.
            * config/s390/s390.h (TARGET_VECTOR_LOADSTORE_ALIGNMENT_HINTS): Define
            macro.
            * configure: Regenerate.
            * configure.ac: Check HAVE_AS_VECTOR_LOADSTORE_ALIGNMENT_HINTS_ON_Z13.
    
    gcc/testsuite/ChangeLog:
    
            * gcc.target/s390/vector/align-1.c: Change target architecture
            to z13.
            * gcc.target/s390/vector/align-2.c: Change target architecture
            to z13.
    
    (cherry picked from commit 929fd91ba975eebf9e57f7f092041271dcaf0c34)

commit 6412f8716f914b7cb1b886deef03c17e66b956b6
Author: Andreas Krebbel <krebbel@linux.ibm.com>
Date:   Wed Nov 21 07:48:49 2018 +0000

    S/390: Support vector load/store alignment hints
    
    The IBM z14 POP adds an optional alignment operand to the vl, vst,
    vlm, and vstm instruction (vector loads and stores). Vectors residing
    on 8 or 16 byte boundaries might get loaded or stored faster on some
    models given the instruction uses the proper hint operand.  A wrong
    hint will hurt performance though.
    
    The attached testcase align-1 currently fails due to:
    https://gcc.gnu.org/bugzilla/show_bug.cgi?id=88085
    
    gcc/ChangeLog:
    
    2018-11-21  Andreas Krebbel  <krebbel@linux.ibm.com>
    
            * configure.ac: Add check for Binutils to determine whether vector
            load/store alignments hints are being supported.
            * config.in: Regenerate.
            * configure: Regenerate.
            * config/s390/s390.c (print_operand): Support new output
            modifier A.
            * config/s390/s390.md ("movti"): Append alignment hint output
            using the new output modifier 'A'.
            * config/s390/vector.md ("mov<mode>", "*vec_tf_to_v1tf")
            ("*vec_ti_to_v1ti"): Likewise.
    
    gcc/testsuite/ChangeLog:
    
    2018-11-21  Andreas Krebbel  <krebbel@linux.ibm.com>
    
            * gcc.target/s390/vector/align-1.c: New test.
            * gcc.target/s390/vector/align-2.c: New test.
    
    (cherry picked from commit b8923037ef1b229326b7f238580d91bbbb76b8ff)

commit d60223eeecfac2bc1675a8f723518fc724b132b0
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Jul 16 00:17:53 2020 +0000

    Daily bump.

commit ff4a27d225f22b8e3a89957421c126c1cbe10cde
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Jul 15 00:17:47 2020 +0000

    Daily bump.

commit fb578967933d523fc15f89a91e815e274131752f
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Jul 14 00:17:46 2020 +0000

    Daily bump.

commit 28621720e0490b8d7646b4dfdda45ca93197ac28
Author: Will Schmidt <will_schmidt@vnet.ibm.com>
Date:   Fri Jul 10 17:13:24 2020 -0500

    [PATCH, rs6000]Add support to enable vmsumudm behind vec_msum builtin.
    
    2020-07-08  Will Schmidt  <will_schmidt@vnet.ibm.com>
    
    gcc/ChangeLog:
    
            * config/rs6000/altivec.h (vec_vmsumudm): New define.
            * config/rs6000/altivec.md (UNSPEC_VMSUMUDM): New unspec.
              (altivec_vmsumudm): New define_insn.
            * config/rs6000/rs6000-builtin.def (altivec_vmsumudm): New BU_ALTIVEC_3
              entry. (vmsumudm): New BU_ALTIVEC_OVERLOAD_3 entry.
            * config/rs6000/rs6000-c.c (altivec_overloaded_builtins): Add
              entries for ALTIVEC_BUILTIN_VMSUMUDM variants of vec_msum.
            * doc/extend.texi: Add document for vmsumudm behind vmsum.
    
    gcc/testsuite/ChangeLog:
    
            * gcc.target/powerpc/builtins-msum-runnable.c: New test.
            * gcc.target/powerpc/vsx-builtin-msum.c: New test.
    
            Modified from ...
            (cherry picked from commit c1a57681a64150d2fc336ba8e055c5f82e3737e8)

commit 92432d97445b26e2c09645474006e80a74cbb53a
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Jul 13 00:17:27 2020 +0000

    Daily bump.

commit 89bb73d540656fc887178330ae8e21a2218f82ab
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Jul 12 00:17:28 2020 +0000

    Daily bump.

commit 4452f8309d253244d781b90c5f5d5b598d44737f
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Jul 11 00:17:42 2020 +0000

    Daily bump.

commit 9c55b3924be9bc3aa8c056a362b53702b8d05554
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Jul 10 00:17:42 2020 +0000

    Daily bump.

commit 3081f87604c66545bad3deec07465ca3ea9a6d4e
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Jul 9 00:17:59 2020 +0000

    Daily bump.

commit 978bacb758ddbbdee71772a5acafa1db4683950a
Author: Alexandre Oliva <oliva@adacore.com>
Date:   Tue Jul 7 09:02:01 2020 +0200

    accept <case> and [cond] in ChangeLog
    
    Only '(' and ':' currently terminate file lists in ChangeLog entries
    in the ChangeLog parser.  This rules out such legitimate entries as:
    
    * filename <CASE>:
    * filename [COND]:
    
    This patch extends the ChangeLog parser to recognize these forms.
    
    for  contrib/ChangeLog
    
            * gcc-changelog/git_commit.py: Support CASE and COND.
            * gcc-changelog/test_patches.txt: Add test.
            * gcc-changelog/test_email.py: Add test.
    
    Co-Authored-By: Martin Liska <mliska@suse.cz>
    (cherry picked from commit a759bfc7cf238b9fc5bf97884297fc69d8cdf2b5)

commit d32be852172f3a9dc5a3fb531d229717740b1bd1
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Jul 8 00:17:52 2020 +0000

    Daily bump.

commit 25a37d567df36bbae6b4fee940ece3fc6d4d7140
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Jul 7 00:17:47 2020 +0000

    Daily bump.

commit 5131f42d776eda08b3309c6596df9104b69987e9
Author: Will Schmidt <will_schmidt@vnet.ibm.com>
Date:   Wed Jul 1 15:04:13 2020 -0500

    [PATCH v2, PR target/94954] Fix wrong codegen for vec_pack_to_short_fp32() builtin
    
    PR TARGET/94954
    
    2020-07-06  Will Schmidt  <will_schmidt@vnet.ibm.com>
    
    gcc/ChangeLog:
            * config/rs6000/altivec.h (vec_pack_to_short_fp32): Update.
            * config/rs6000/altivec.md (UNSPEC_CONVERT_4F32_8F16): New unspec.
            (convert_4f32_8f16): New define_expand
            * config/rs6000/rs6000-builtin.def (convert_4f32_8f16): New builtin define
            and overload.
            * config/rs6000/rs6000-c.c (P9V_BUILTIN_VEC_CONVERT_4F32_8F16): New
            overloaded builtin entry.
            * config/rs6000/vsx.md (UNSPEC_VSX_XVCVSPHP): New unspec.
            (vsx_xvcvsphp): New define_insn.
    
    gcc/testsuite/ChangeLog:
    
            * gcc.target/powerpc/builtins-1-p9-runnable.c: Update.

commit 45edf0015ae61857f5d28787e844dc4372fdb67b
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Jul 6 00:17:42 2020 +0000

    Daily bump.

commit 56ce663146b436ff1a267ee2a9701b7d5e190e62
Author: Harald Anlauf <anlauf@gmx.de>
Date:   Tue Jun 30 23:36:56 2020 +0200

    PR fortran/88379 - ICE with allocatable coarray, class and associate
    
    Catch NULL pointer dereference for ASSOCIATE on allocatable coarray variable.
    
    gcc/fortran/
            PR fortran/88379
            * resolve.c (resolve_assoc_var): Avoid NULL pointer dereference.
    
    (cherry picked from commit 267f84c6035c9380c8d1e9cb83ffe299c23e3a85)

commit e51bef33bd29712e44a3e9051bb21d91efa5a65b
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Jul 5 00:17:31 2020 +0000

    Daily bump.

commit 9b4d6ceaa9846ce02538b84f2269ef171ee4d0e3
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Jul 4 00:17:36 2020 +0000

    Daily bump.

commit 5dd0c2aa6755ef44815a10bb09b713a8132acc21
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Jul 3 00:17:34 2020 +0000

    Daily bump.

commit 10b028c2813f683a8ebab7d36c9d0d05b49a710b
Author: Harald Anlauf <anlauf@gmx.de>
Date:   Mon Jun 29 15:15:49 2020 +0200

    PR fortran/71706 - ICE on using sync images with -fcheck=bounds
    
    The run-time checking code did not properly convert the kind of the
    argument to SYNC IMAGES, leading to an error in verify_gimple.  Fix that.
    
    gcc/fortran/
            PR fortran/71706
            * trans-stmt.c (gfc_trans_sync): Do proper kind conversion in
            bounds-checking code.
    
    (cherry picked from commit e6cc67f6616c96f3e18a434e0c74ba2f3818cb6d)

commit ee7491826111f55ff6aed4f04f1812ce19f68196
Author: Martin Liska <mliska@suse.cz>
Date:   Thu Jul 2 10:51:06 2020 +0200

    gcc-changelog: sync from master.
    
    contrib/ChangeLog:
    
            * gcc-changelog/git_check_commit.py: New file.
            * gcc-changelog/git_commit.py: New file.
            * gcc-changelog/git_email.py: New file.
            * gcc-changelog/git_repository.py: New file.
            * gcc-changelog/git_update_version.py: New file.
            * gcc-changelog/test_email.py: New file.
            * gcc-changelog/test_patches.txt: New file.

commit 43cd501a48e869fa44617c78c100de956d0c78c0
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Jul 2 00:17:35 2020 +0000

    Daily bump.

commit 88b44ed719378a52e001a474bcf963ea4c4841b1
Author: Mark Eggleston <markeggleston@gcc.gnu.org>
Date:   Tue Jun 23 11:01:28 2020 +0100

    Fortran  : Bogus error with additional blanks in type(*) PR95829
    
    Checking for "* ) " instead of "*)" clears the bogus error.
    
    2020-07-01  Steven G. Kargl  <kargl@gcc.gnu.org>
    
    gcc/fortran/
    
            PR fortran/95829
            * decl.c (gfc_match_decl_type_spec): Compare with "* ) " instead
            of "*)".
    
    2020-07-01  Mark Eggleston  <markeggleston@gcc.gnu.org>
    
    gcc/testsuite/
    
            PR fortran/95829
            * gfortran.dg/pr95829.f90: New test.
    
    (cherry picked from commit 624e60f080989fa57756575a0bb47a97748b52b8)

commit 6bd944f066b2a2c630959b1b460894cd512c6080
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Jul 1 00:17:37 2020 +0000

    Daily bump.

commit 4ff0022df0f013a9bea23e3f6d4025633b9dc528
Author: Alex Coplan <alex.coplan@arm.com>
Date:   Mon May 18 16:29:04 2020 +0100

    arm: Don't generate invalid LDRD insns
    
    This fixes a bug in the arm backend where GCC generates invalid LDRD
    instructions. The LDRD instruction requires the first transfer register to be
    even, but GCC attempts to use odd registers here. For example, with the
    following C code:
    
        struct c {
          double a;
        } __attribute((aligned)) __attribute((packed));
        struct c d;
        struct c f(struct c);
        void e() { f(d); }
    
    The struct d is passed in registers r1 and r2 to the function f, and GCC
    attempted to do this with a LDRD instruction when compiling with -march=armv7-a
    on a soft float toolchain.
    
    The fix is analogous to the corresponding one for STRD in the same function:
    https://gcc.gnu.org/git/?p=gcc.git;a=commit;h=52057dc4ac5295caebf83147f688d769c93cbc8d
    
    gcc/:
            * config/arm/arm.c (output_move_double): Fix codegen when loading into
            a register pair with an odd base register.
    
    gcc/testsuite/:
            * gcc.c-torture/compile/packed-aligned-1.c: New test.
            * gcc.c-torture/execute/packed-aligned.c: New test.
    
    (cherry picked from commit 8b8f3117263ca79b3febadadb07732588d99d5f6)

commit e2cc377f4231467ab61876aee00746dbd9cd6573
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Jun 30 09:03:38 2020 +0000

    Daily bump.

commit b0b770c42f266d87c022aa5ae3f2c92dd7245a66
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Jun 29 00:17:42 2020 +0000

    Daily bump.

commit 160a8aed47609576da2bb9958f03406625bd7fe8
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Jun 28 00:17:32 2020 +0000

    Daily bump.

commit 7bba78283adcc9f3153d90358b57a27e270b0572
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Jun 27 00:17:31 2020 +0000

    Daily bump.

commit 985e3cda5669c10d1ef713bfad1b8aad64ee54d0
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Jun 26 00:17:32 2020 +0000

    Daily bump.

commit e39a8763c4dead0f448981d9488d7b264db9da55
Author: H.J. Lu <hjl.tools@gmail.com>
Date:   Wed Jun 24 09:12:47 2020 -0700

    x96: Remove PTA_CLWB from PTA_ICELAKE_CLIENT
    
    CLWB isn't supported on Ice Lake client.  But Ice Lake server support it.
    Move PTA_CLWB to PTA_ICELAKE_SERVER.
    
            PR target/95874
            * config/i386/i386.c (PTA_ICELAKE_CLIENT): Remove PTA_CLWB.
            (PTA_ICELAKE_SERVER): Add PTA_CLWB.
    
    (cherry picked from commit c422e5f81f42a0fc197f0715f4fcd81f1be90bff)

commit 58b191815896857d540937704f85e7574ae4b792
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Jun 25 00:17:35 2020 +0000

    Daily bump.

commit e1edfe597d9157b8b9b61c4677b38730a9a59936
Author: Harald Anlauf <anlauf@gmx.de>
Date:   Wed Jun 24 22:33:11 2020 +0200

    Revert "PR fortran/95689 - ICE in check_sym_interfaces, at fortran/interface.c:2015"
    
    With submodules, name mangling of interfaces may result in long internal
    symbols overflowing an internal buffer.  We now check that we do not
    exceed the enlarged buffer size.
    
    gcc/fortran/
            PR fortran/95689
            * interface.c (check_sym_interfaces): Enlarge temporary buffer,
            and add check on length on mangled name to prevent overflow.
    
    gcc/testsuite/
            PR fortran/95689
            * gfortran.dg/pr95689.f90: New test.
    
            (reverts the cherry-pick from commit 62c0c0ea7bfb6f8f6b8d767b05120cafb6823da6)

commit 55b27ca8e60c96d28a3a635a7dd0842f6aee57be
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Jun 24 00:17:41 2020 +0000

    Daily bump.

commit 4cfdae8e4a96912871865d289a5a817cec68eaa0
Author: Harald Anlauf <anlauf@gmx.de>
Date:   Sat Jun 20 16:09:45 2020 +0200

    PR fortran/95689 - ICE in check_sym_interfaces, at fortran/interface.c:2015
    
    With submodules, name mangling of interfaces may result in long internal
    symbols overflowing an internal buffer.  We now check that we do not
    exceed the enlarged buffer size.
    
    gcc/fortran/
            PR fortran/95689
            * interface.c (check_sym_interfaces): Enlarge temporary buffer,
            and add check on length on mangled name to prevent overflow.
    
    (cherry picked from commit 62c0c0ea7bfb6f8f6b8d767b05120cafb6823da6)

commit 8cd9870d1b29ba7f6d6550611892036ed49f5bcf
Author: Eric Botcazou <ebotcazou@gcc.gnu.org>
Date:   Tue Jun 23 18:33:28 2020 +0200

    Fix memory corruption with vector and variant record
    
    The problem is that Has_Constrained_Partial_View must be tested on the
    base type of the designated type of an allocator.
    
    gcc/ada/ChangeLog:
            * gcc-interface/trans.c (gnat_to_gnu) <N_Allocator>: Minor tweaks.
            Call Has_Constrained_Partial_View on base type of designated type.

commit 837329193e40efcbd040b687420b1bcd4dac1c40
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Jun 23 00:17:29 2020 +0000

    Daily bump.

commit 31b4a3509a5eb119821888394c3606d52459f4bd
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Jun 22 00:17:35 2020 +0000

    Daily bump.

commit 79ce007d4369114ae5e680ae0a8df8098f676f3e
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Jun 21 00:17:30 2020 +0000

    Daily bump.

commit 0a7a2b7c64a77218e504e8390af29cfa5f79a242
Author: Bin Cheng <bin.cheng@linux.alibaba.com>
Date:   Sat Jun 20 16:56:21 2020 +0800

    Add missing unit dependence vector in data dependence analysis
    
    Current data dependence analysis misses unit distant vector if DRs in
    DDR have the same invariant access functions.  This adds the vector as
    the constant access function case.
    
    Also fix typo in testcase.
    
    Backport from master commit: 287552950d56be47adb6b6bf2eae2d612233eaec
    and f6e1a4cd83190746b6544917f7526fa480ca5f18
    
    2020-06-20  Bin Cheng  <bin.cheng@linux.alibaba.com>
    
    gcc/
            PR tree-optimization/94969
            * tree-data-ref.c (constant_access_functions): Rename to...
            (invariant_access_functions): ...this.  Add parameter.  Check for
            invariant access function, rather than constant.
            (build_classic_dist_vector): Call above function.
            * tree-loop-distribution.c (pg_add_dependence_edges): Add comment.
    
    gcc/testsuite/
            PR tree-optimization/94969
            * gcc.dg/tree-ssa/pr94969.c: New test.
    
    2020-06-20  Jakub Jelinek  <jakub@redhat.com>
    
    gcc/testsuite/
            PR tree-optimization/95110
            * gcc.dg/tree-ssa/pr94969.c: Swap scan-tree-dump-not arguments.

commit 913b045b87cc59ca24f121d1e25f80fcc71b248a
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Jun 20 00:17:30 2020 +0000

    Daily bump.

commit 7d86dedb6a36b7ce472b71726584d7f2542cf583
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Jun 19 00:17:41 2020 +0000

    Daily bump.

commit 496966ffb81a32b38781cf5542cbb6f8e128a57a
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Jun 18 00:17:52 2020 +0000

    Daily bump.

commit 9c5787ea072e16f26c9950139c00ae28fddadd72
Author: Samuel Thibault <samuel.thibault@gnu.org>
Date:   Fri May 29 13:46:50 2020 +0200

    hurd: libgcc unwinding support over signal trampolines
    
            libgcc/
            * config.host (md_unwind_header) <i[34567]86-*-gnu*>: Set to
            'i386/gnu-unwind.h'
            * config/i386/gnu-unwind.h: New file.
    
    Signed-off-by: Thomas Schwinge <thomas@codesourcery.com>
    (cherry picked from commit 5e2eebc80d6eeca24745c27a925afdb64292ed22)

commit e7fad65109690ae41be04a23093cd7504d022d4c
Author: Thomas Schwinge <thomas@codesourcery.com>
Date:   Sat Jun 6 18:44:34 2020 +0200

    [HSA] Avoid ICE when "HSA does not implement indirect calls"
    
    Made apparent by recent commit dc703151d4f4560e647649506d5b4ceb0ee11e90
    "openmp: Implement discovery of implicit declare target to clauses":
    
        +FAIL: libgomp.c/target-39.c (internal compiler error)
        +FAIL: libgomp.c/target-39.c (test for excess errors)
        +UNRESOLVED: libgomp.c/target-39.c compilation failed to produce executable
    
    This is in a '--enable-offload-targets=[...],hsa' build, with '-foffload=hsa'
    enabled (by default).
    
        during GIMPLE pass: hsagen
        source-gcc/libgomp/testsuite/libgomp.c/target-39.c: In function ‘main._omp_fn.0.hsa.0’:
        source-gcc/libgomp/testsuite/libgomp.c/target-39.c:23:11: internal compiler error: Segmentation fault
           23 |   #pragma omp target map(from:err)
              |           ^~~
        [...]
    
    GDB:
    
        Program received signal SIGSEGV, Segmentation fault.
        fndecl_built_in_p (node=0x0, name=BUILT_IN_PREFETCH) at [...]/source-gcc/gcc/tree.h:6267
        6267      return (fndecl_built_in_p (node, BUILT_IN_NORMAL)
        (gdb) bt
        #0  fndecl_built_in_p (node=0x0, name=BUILT_IN_PREFETCH) at [...]/source-gcc/gcc/tree.h:6267
        #1  0x0000000000b19739 in gen_hsa_insns_for_call (stmt=stmt@entry=0x7ffff693b200, hbb=hbb@entry=0x2b152c0) at [...]/source-gcc/gcc/hsa-gen.c:5304
        #2  0x0000000000b1aca7 in gen_hsa_insns_for_gimple_stmt (stmt=0x7ffff693b200, hbb=hbb@entry=0x2b152c0) at [...]/source-gcc/gcc/hsa-gen.c:5770
        #3  0x0000000000b1bd21 in gen_body_from_gimple () at [...]/source-gcc/gcc/hsa-gen.c:5999
        #4  0x0000000000b1dbd2 in generate_hsa (kernel=<optimized out>) at [...]/source-gcc/gcc/hsa-gen.c:6596
        #5  0x0000000000b1de66 in (anonymous namespace)::pass_gen_hsail::execute (this=0x2a2aac0) at [...]/source-gcc/gcc/hsa-gen.c:6680
        #6  0x0000000000d06f90 in execute_one_pass (pass=pass@entry=0x2a2aac0) at [...]/source-gcc/gcc/passes.c:2502
        [...]
        (gdb) up
        #1  0x0000000000b19739 in gen_hsa_insns_for_call (stmt=stmt@entry=0x7ffff693b200, hbb=hbb@entry=0x2b152c0) at /home/thomas/tmp/source/gcc/build/track-slim-omp/source-gcc/gcc/hsa-gen.c:5304
        5304          if (fndecl_built_in_p (function_decl, BUILT_IN_PREFETCH))
        (gdb) print function_decl
        $1 = (tree) 0x0
        (gdb) list
        5299      if (!gimple_call_builtin_p (stmt, BUILT_IN_NORMAL))
        5300        {
        5301          tree function_decl = gimple_call_fndecl (stmt);
        5302          /* Prefetch pass can create type-mismatching prefetch builtin calls which
        5303             fail the gimple_call_builtin_p test above.  Handle them here.  */
        5304          if (fndecl_built_in_p (function_decl, BUILT_IN_PREFETCH))
        5305            return;
        5306
        5307          if (function_decl == NULL_TREE)
        5308            {
    
    The problem is present already since 2016-11-23 commit
    56b1c60e412fcf1245b4780871553cbdebb956a3 (r242761) "Merge from HSA branch to
    trunk", and the fix obvious enough.
    
            gcc/
            * hsa-gen.c (gen_hsa_insns_for_call): Move 'function_decl ==
            NULL_TREE' check earlier.
            gcc/testsuite/
            * c-c++-common/gomp/hsa-indirect-call-1.c: New file.
    
    (cherry picked from commit 973bce0fb50bbfd91f47238b82b99935525716ad)

commit 572c0aff9a5fcc19adad0b0c392e7c10db189244
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Jun 17 00:17:40 2020 +0000

    Daily bump.

commit 76e147e6e32bc5fd3d597d49423558c061325f83
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Jun 16 00:17:34 2020 +0000

    Daily bump.

commit f1a8a7dc133e18afe28cae0b7533d1694cf6095b
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Jun 15 00:17:27 2020 +0000

    Daily bump.

commit a5cda02410222030c0af6679998a997bbcddb021
Author: Thomas Koenig <tkoenig@gcc.gnu.org>
Date:   Sun Jun 14 13:54:19 2020 +0200

    When avoiding double deallocation, look at namespace, expression and component.
    
    Our finalization handling is a mess.  Really, we should get to try and get
    this fixed for gcc 11.
    
    In the meantime, here is a patch which fixes a regression I introduced
    when fixing a regression with a memory leak.  The important thing
    here is to realize that we do not need to finalize (and deallocate)
    multiple times for the same expression and the same component
    in the same namespace.  It might cause code size regressions, but
    better big code than wrong code...
    
    Backported from r11-1296-g1af22e455584ef5fcad2b4474c1efc3fd26f6cb3 .
    
    gcc/fortran/ChangeLog:
    
            PR fortran/94109
            * class.c (finalize_component): Return early if finalization has
            already happened for expression and component within namespace.
            * gfortran.h (gfc_was_finalized): New type.
            (gfc_namespace): Add member was_finalzed.
            (gfc_expr): Remove finalized.
            * symbol.c (gfc_free_namespace): Free was_finalized.
    
    gcc/testsuite/ChangeLog:
    
            PR fortran/94109
            * gfortran.dg/finalize_34.f90: Adjust free counts.
            * gfortran.dg/finalize_36.f90: New test.

commit eb99c92ee882b112f99f09921e55b988061bfbe8
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Jun 14 00:17:25 2020 +0000

    Daily bump.

commit cb4a12ade7e024f7d592214f7f8317d9b9dc1206
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Jun 13 00:17:35 2020 +0000

    Daily bump.

commit 5222017313f5abf39e2374dc11bcac9b444f1b4c
Author: Martin Liska <mliska@suse.cz>
Date:   Thu Jun 11 09:34:41 2020 +0200

    asan: fix RTX emission for ilp32
    
    gcc/ChangeLog:
    
            PR sanitizer/95634
            * asan.c (asan_emit_stack_protection): Fix emission for ilp32
            by using Pmode instead of ptr_mode.
    
    Co-Authored-By: Jakub Jelinek <jakub@redhat.com>
    (cherry picked from commit 8cff672cb9a132d3d3158c2edfc9a64b55292b80)

commit 5d746191e271949e530d9e5f46cde7e7bf08272f
Author: Martin Liska <mliska@suse.cz>
Date:   Tue May 19 16:57:56 2020 +0200

    Add missing store in emission of asan_stack_free.
    
    gcc/ChangeLog:
    
    2020-05-19  Martin Liska  <mliska@suse.cz>
    
            PR sanitizer/94910
            * asan.c (asan_emit_stack_protection): Emit
            also **SavedFlagPtr(FakeStack, class_id) = 0 in order to release
            a stack frame.
    
    (cherry picked from commit 8b6731e674c76cb48a417f2eef74ced92a17f469)

commit 2e710aa664fc9e00cc083d8a0bc1a44ca9b5d758
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Jun 12 00:17:40 2020 +0000

    Daily bump.

commit 6194bfb2647ce7a18556c10a091a139cd9477710
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Jun 11 00:17:54 2020 +0000

    Daily bump.

commit c6dce1d8083a2fdc94be167a2465db7fd837ccae
Author: Carl Love <cel@us.ibm.com>
Date:   Wed Jun 10 16:12:08 2020 -0500

    pr94833, fix vec_first_match_index for nulls
    
    Backported patch from mainline.  Updated ChangeLog format
            commit 24f68831d25bad739a6fe167a58b5b4c0c3cbf9a
            Author: Carl Love <cel@us.ibm.com>
            Date:   Wed Apr 29 10:23:11 2020 -0500
    
            Note the mainlin patch adds tests to the test case in mainline.  The test
            case does not exist in GCC 8.  Only the functional change in
            gcc/config/rs6000/vsx.md was backported.
    
    2020-06-10  Carl Love  <cel@us.ibm.com>
    
    gcc/
            PR target/94833
            * config/rs6000/vsx.md (define_expand): Fix instruction generation for
            first_match_index_<mode>.

commit 26eabd4bf492907087371b9db2131adc8b7c58d0
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Jun 10 00:17:50 2020 +0000

    Daily bump.

commit 33ebf40daa79a73e66c379728b4c0ef7297297fe
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Jun 9 00:17:58 2020 +0000

    Daily bump.

commit 22d2ef94289e4d6ea5e2ed011c069021d3b0b7a1
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Jun 8 00:17:34 2020 +0000

    Daily bump.

commit 8da53517387ceb8d0e5ce87750b31d619d7b3b3b
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Jun 7 00:17:27 2020 +0000

    Daily bump.

commit d64b74ce3dfe4f2f7342921cdd9fae54e257b248
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Jun 6 00:17:34 2020 +0000

    Daily bump.

commit 2b595aed9f0335ecf2e2652e4e875816a888c014
Author: H.J. Lu <hjl.tools@gmail.com>
Date:   Mon May 18 05:35:27 2020 -0700

    x86: Update Intel processor detection
    
    Add cpu model numbers for Intel Airmont, Comet Lake and Ice Lake
    processor families.
    
            * config/i386/driver-i386.c (host_detect_local_cpu): Support
            Intel Airmont, Comet Lake and Ice Lake processor families.

commit 2af0ef6477f20198574db98be32fc5d4b0a94ccb
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Jun 5 00:17:39 2020 +0000

    Daily bump.

commit f4a45e0d85e51bd6550a82f31f70484c03332a4e
Author: Thomas Schwinge <thomas@codesourcery.com>
Date:   Wed May 6 10:05:49 2020 +0200

    'libgomp.oacc-fortran/{error_,}stop-{1,2,3}.f': initialize before the checkpoint
    
    If, for example, GCC is configured such that 'libgomp-plugin-nvptx.so.1'
    dynamically links against 'libcuda.so.1', but testing is run on a system where
    there is no 'libcuda.so.1', this produces output such as:
    
        PASS: libgomp.oacc-fortran/error_stop-1.f -DACC_DEVICE_TYPE_host=1 -DACC_MEM_SHARED=1 -foffload=disable  -O0  (test for excess errors)
        PASS: libgomp.oacc-fortran/error_stop-1.f -DACC_DEVICE_TYPE_host=1 -DACC_MEM_SHARED=1 -foffload=disable  -O0  execution test
        FAIL: libgomp.oacc-fortran/error_stop-1.f -DACC_DEVICE_TYPE_host=1 -DACC_MEM_SHARED=1 -foffload=disable  -O0  output pattern test, is  CheCKpOInT
    
        libgomp: while loading libgomp-plugin-nvptx.so.1: libcuda.so.1: cannot open shared object file: No such file or directory
        ERROR STOP
    
        Error termination. Backtrace: [...]
        , should match CheCKpOInT(
        |
        |^M)+ERROR STOP (
        |
        |^M)+Error termination.*
    
    ..., where after 'CheCKpOInT' we got 'libgomp: while loading [...]' injected
    before the expected 'ERROR STOP'.
    
            libgomp/
            * testsuite/libgomp.oacc-fortran/error_stop-1.f: Initialize before
            the checkpoint.
            * testsuite/libgomp.oacc-fortran/error_stop-2.f: Likewise.
            * testsuite/libgomp.oacc-fortran/error_stop-3.f: Likewise.
            * testsuite/libgomp.oacc-fortran/stop-1.f: Likewise.
            * testsuite/libgomp.oacc-fortran/stop-2.f: Likewise.
            * testsuite/libgomp.oacc-fortran/stop-3.f: Likewise.
    
    (cherry picked from commit 1e378edd8f038c52914bc6cac8f6dd5a5c4f8a98)

commit 53c76137ab03432194fd6322429577c7f838b484
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Jun 4 00:17:40 2020 +0000

    Daily bump.

commit 6f8917d0a065173de628463d11c277e5ec5066c6
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Jun 3 00:17:42 2020 +0000

    Daily bump.

commit 60286b92fb8fbf7edaaa0d7e234c5223ac87980f
Author: Kyrylo Tkachov <kyrylo.tkachov@arm.com>
Date:   Tue Jun 2 17:52:16 2020 +0100

    aarch64: Add initial support for -mcpu=zeus
    
    This patch adds support for the Arm Zeus CPU.
    Bootstrapped and tested on aarch64-none-linux-gnu.
    
    gcc/
    
    2020-06-02  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>
    
            * config/aarch64/aarch64-cores.def (zeus): Define.
            * config/aarch64/aarch64-tune.md: Regenerate.
            * doc/invoke.texi (AArch64 Options): Document zeus -mcpu option.

commit aafd10254f9c2025bfb23a680f52ef1c2bb297da
Author: Martin Liska <mliska@suse.cz>
Date:   Tue Jun 2 08:58:33 2020 +0200

    Remove bad ChangeLog entry.

commit 195e4bd2a7eeb94b53e22c48ad0cbf168158f9ad
Author: Martin Liska <mliska@suse.cz>
Date:   Tue Jun 2 08:54:54 2020 +0200

    Remove accidentally installed file.
    
    ChangeLog:
    
            * -: Remove.

commit ac2b67cb07f19817261bb235d8cda332ce8e02ed
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Jun 2 00:17:36 2020 +0000

    Daily bump.

commit 75f5824b77632ef583a7a65302b326e8bf1b851c
Author: Thomas Koenig <tkoenig@gcc.gnu.org>
Date:   Sun May 31 10:26:40 2020 +0200

    Finalization depends on the expression, not on the component.
    
    This patch fixes a 8/9/10/11 regression, where finalized types
    were not finalized (and deallocated), which led to memory
    leaks.
    
    gcc/fortran/ChangeLog:
    
    2020-05-24  Thomas Koenig  <tkoenig@gcc.gnu.org>
    
            PR fortran/94361
            * class.c (finalize_component): Use expr->finalized instead of
            comp->finalized.
            * gfortran.h (gfc_component): Remove finalized member.
            (gfc_expr): Add it here instead.
    
    gcc/testsuite/ChangeLog:
    
    2020-05-24  Thomas Koenig  <tkoenig@gcc.gnu.org>
    
            PR fortran/94361
            * gfortran.dg/finalize_28.f90: Adjusted free counts.
            * gfortran.dg/finalize_34.f90: Likewise.
            * gfortran.dg/finalize_35.f90: New test.
    
    (cherry picked from commit 2a0de88ccf2ecc6659b0f1e4580c1ce5cff976b3)

commit b801fb54a13532e37e2e2102f7e3f3398038db2d
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Jun 1 00:17:35 2020 +0000

    Daily bump.

commit c3169253d97b1ab0b09e8d42bee2dc027e97429d
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun May 31 00:17:31 2020 +0000

    Daily bump.

commit e120b454c310311a659b87bcfe5cd2bb39c75f13
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat May 30 00:17:38 2020 +0000

    Daily bump.

commit b64ec9c3eea5204b90936e332704e6f57470f6e5
Author: Alex Coplan <alex.coplan@arm.com>
Date:   Fri May 29 14:23:02 2020 +0100

    aarch64: PR target/94591: Don't generate invalid REV64 insns
    
    This fixes PR94591. The problem was the function
    aarch64_evpc_rev_local() matching vector permutations that were not
    reversals. In particular, prior to this patch, this function matched the
    identity permutation which led to generating bogus REV64 insns which
    were rejected by the assembler.
    
    gcc/
            PR target/94591
            * config/aarch64/aarch64.c (aarch64_evpc_rev_local): Don't match
            identity permutation.
    
    gcc/testsuite/
            PR target/94591
            * gcc.c-torture/execute/pr94591.c: New test.
    
    (cherry picked from commit 98452668d362bb9e6358f7eb5cff69f4f5ab1d45)

commit d0d2a937abf6ea0e03bfd7cb56c0f976ba03cbf1
Author: Kyrylo Tkachov <kyrylo.tkachov@arm.com>
Date:   Wed May 6 16:20:38 2020 +0100

    [AArch64] Use __getauxval instead of getauxval in LSE detection code in libgcc
    
    This version of the fix uses __getauxval instead of getauxval.
    The whole thing is guarded simply on __gnu_linux__.
    __getauxval was introduced in 2.16 but the aarch64 port was added in 2.17 so in practice I expect all aarch64 glibcs to support __getauxval.
    
    Bootstrapped and tested on aarch64-none-linux-gnu.
    Also tested on aarch64-none-elf.
    
    2020-05-06  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>
    
            * config/aarch64/lse-init.c (init_have_lse_atomics): Use __getauxval
            instead of getauxval.
            (AT_HWCAP): Define.
            (HWCAP_ATOMICS): Define.
            Guard detection on __gnu_linux__.
    
    (cherry picked from commit 1266778548e20de82983b6446f3cb685068cfb1e)

commit 406f6d0ad7325f872c4a084d360196302029fbeb
Author: Martin Liska <mliska@suse.cz>
Date:   Thu May 28 08:16:58 2020 +0200

    gcov-tool: Flexible endian adjustment for merging coverage data
    
    gcc/ChangeLog:
    2020-05-27  Dong JianQiang  <dongjianqiang2@huawei.com>
    
            PR gcov-profile/95332
            * gcov-io.c (gcov_var::endian): Move field.
            (from_file): Add IN_GCOV_TOOL check.
            * gcov-io.h (gcov_magic): Ditto.
    
    libgcc/ChangeLog:
    2020-05-27  Dong JianQiang  <dongjianqiang2@huawei.com>
    
            PR gcov-profile/95332
            * libgcov-util.c (read_gcda_file): Call gcov_magic.
            * libgcov.h (gcov_magic): Disable GCC poison.
    
    (cherry picked from commit 17d1594bfe08f3c768e024b180816cbe37ac08ac)

commit b721e2855d92372ab1efbc7e35cf0a71ceb35b80
Author: Martin Liska <mliska@suse.cz>
Date:   Fri May 29 11:29:25 2020 +0200

    Fix various limitations of git-backport.py.
    
    I've just tested the script and I'm going to install the patch
    to all active branches.
    
    contrib/ChangeLog:
    
            * git-backport.py: The script did 'git co HEAD~' when
            there was no modified ChangeLog file in a successful
            git cherry pick.
            Run cherry-pick --continue without editor.
    
    (cherry picked from commit 24663f1f6d709daf8913484914ed01af9f7a480a)

commit 73e995ebef836e2f9ea34517511296e4c71624ea
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri May 29 00:17:30 2020 +0000

    Daily bump.

commit 83b84b6ef84ffc0ca25aef5c91720d8f82212a5c
Author: Mark Eggleston <markeggleston@gcc.gnu.org>
Date:   Thu May 7 08:15:26 2020 +0100

    Fortran  : ICE in gfc_trans_label_assign PR50392
    
    A function may contain an assigned goto.  If the the return variable
    is an integer a statement can be assigned to it.  Prior to this fix
    this resulted in an ICE.
    
    2020-05-28  Tobias Burnus  <tobias@codesourcery.com>
    
    gcc/fortran/
    
            PR fortran/50392
            * trans-decl.c (gfc_get_symbol_decl): Remove unnecessary block
            delimiters.  Add auxiliary variables if a label is assigned to
            a return variable. (gfc_gat_fake_result): If the symbol has an
            assign attribute set declaration from the symbol's backend
            declaration.
    
    2020-05-28  Mark Eggleston  <markeggleston@gnu.gcc.org>
    
    gcc/testsuite/
    
            PR fortran/50392
            * gfortran.dg/pr50392.f: New test.
    
    (cherry picked from commit a7fd43c38f7469a3ef5ee30e889d60e1376d4dfc)

commit 77690650eddf4cd789c3d94de0d3c80d71f21a0c
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu May 28 04:25:02 2020 +0000

    Daily bump.

commit b22157432d5ce4f80ab832aab6c8a071a1e76623
Author: Martin Liska <mliska@suse.cz>
Date:   Tue May 26 15:32:32 2020 +0200

    Add new git-backport.py script.
    
    contrib/ChangeLog:
    
            * git-backport.py: New file.

commit d8465ff121d9c01cfef6ae0068274eea0c53ca02
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed May 27 07:47:00 2020 +0000

    Daily bump.

commit dd9f457caeb2693a3172380b5211982bba98124c
Author: Martin Liska <mliska@suse.cz>
Date:   Tue May 26 09:40:09 2020 +0200

    Add missing ChangeLog entries.

commit 4b33a9faae8dd2e6cacb1e3d39734ea3b0c51e3e
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue May 26 00:17:22 2020 +0000

    Daily bump.

commit bc721725161c6ee3813870a734c0b0c18429a922
Author: Jason Merrill <jason@redhat.com>
Date:   Mon May 25 18:38:09 2020 -0400

    c++: Local class DMI using local static [PR90749]
    
    For default member initializers in templates it's important to push into the
    right context during get_nsdmi.  But for a local class that's not possible,
    and trying leaves the function context we need to be in, so don't try.
    
    gcc/cp/ChangeLog
    2020-05-01  Jason Merrill  <jason@redhat.com>
    
            PR c++/90749
            * init.c (get_nsdmi): Don't push_to_top_level for a local class.

commit 09831707ce65606f951c97632d882f083ad3ed02
Author: Jason Merrill <jason@redhat.com>
Date:   Mon May 25 18:38:09 2020 -0400

    c++: -fmerge-all-constants vs. destructors [PR91529]
    
    cp_finish_decl avoids setting TREE_READONLY on TREE_STATIC variables that
    have non-constant construction or destruction, but -fmerge-all-constants was
    converting an automatic variable to static while leaving TREE_READONLY set.
    
    Fixed by clearing the flag in cp_finish_decl in the presence of
    -fmerge-all-constants.
    
    gcc/cp/ChangeLog
    2020-05-01  Jason Merrill  <jason@redhat.com>
    
            PR c++/91529
            * decl.c (cp_finish_decl): Also clear TREE_READONLY if
            -fmerge-all-constants.

commit 487f16a7f2a6f849497a0d2f8fff61225e2270f6
Author: Jason Merrill <jason@redhat.com>
Date:   Mon May 25 18:38:09 2020 -0400

    c++: generic lambda and -fsanitize=vla-bound [PR93822]
    
    Within the generic lambda the VLA capture proxy VAR_DECL has DECL_VALUE_EXPR
    which is a NOP_EXPR to the VLA type of the proxy.  The problem here was that
    when instantiating we were tsubsting that type twice, once for the type of
    the DECL and once for the type of the NOP_EXPR, and getting two
    different (though equivalent) types.  Then gimplify_type_sizes fixed up the
    type of the DECL, but that didn't affect the type of the NOP_EXPR, leading
    to sadness.
    
    Fixed by directly reusing the type from the DECL.
    
    gcc/cp/ChangeLog
    2020-05-01  Jason Merrill  <jason@redhat.com>
    
            PR c++/93822
            * pt.c (tsubst_decl): Make sure DECL_VALUE_EXPR continues to have
            the same type as the variable.

commit 341e59fef8d4b9c86f1c95abfe3ed60482293f23
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon May 25 00:17:20 2020 +0000

    Daily bump.

commit 0055fa9a7b7239c50e6067724f28e64eceadd0fe
Author: H.J. Lu <hjl.tools@gmail.com>
Date:   Fri May 22 04:18:34 2020 -0700

    x86: Handle -mavx512vpopcntdq for -march=native
    
    Add -mavx512vpopcntdq for -march=native if AVX512VPOPCNTDQ is available.
    
            PR target/95258
            * config/i386/driver-i386.c (host_detect_local_cpu): Detect
            AVX512VPOPCNTDQ.
    
    (cherry picked from commit 808b611bfb4b05703ea174e50874c711dca44c98)

commit 18ff359bc9bb4cf4ae49004bd214e36e11de41df
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun May 24 00:17:19 2020 +0000

    Daily bump.

commit b732ebc9ce61151fc7eca52d1b84c3b7227422e7
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat May 23 00:17:12 2020 +0000

    Daily bump.

commit 5d1d79fd3f89c902207992e7843ae37505e79d29
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri May 22 00:17:09 2020 +0000

    Daily bump.

commit f26cfe27e19eeb538675ffb2de0503b760662261
Author: Martin Liska <mliska@suse.cz>
Date:   Thu May 21 16:53:35 2020 +0200

    Fix backport due to usage for x_target_flags.
    
    gcc/ChangeLog:
    
            * common/config/aarch64/aarch64-common.c (aarch64_handle_option):
            Use MASK_OUTLINE_ATOMICS for x_target_flags.

commit 9f561d35223b7cd11e5486ba087d8e7890cf9b1d
Author: Martin Liska <mliska@suse.cz>
Date:   Thu May 21 12:45:47 2020 +0200

    Add outline-atomics to target attribute.
    
            * common/config/aarch64/aarch64-common.c (aarch64_handle_option):
            Handle OPT_moutline_atomics.
            * config/aarch64/aarch64.c: Add outline-atomics to
            aarch64_attributes.
    
            * doc/extend.texi: Document the newly added target attribute.
    
            * gcc.target/aarch64/target_attr_20.c: New test.
            * gcc.target/aarch64/target_attr_21.c: New test.
    
    (cherry picked from commit 9e02b45ffc60e0078bde3c56a14f00c54b7f8039)

commit 69b35b7c91ebbc1a6df57e957303e904210ad265
Author: H.J. Lu <hjl.tools@gmail.com>
Date:   Tue May 19 18:55:08 2020 -0700

    x86: Update VPCLMULQDQ check
    
    Update VPCLMULQDQ check to support processors with AVX version of
    VPCLMULQDQ.
    
            Backport from master
            PR target/91695
            * config/i386/cpuinfo.c (get_available_features): Fix VPCLMULQDQ
            check.
    
    (cherry picked from commit 1e46a443f25d26816536c0c480211714b123a1d5)

commit aad7ffb62247fce56e03b03dd696b49bbc8913e7
Author: H.J. Lu <hjl.tools@gmail.com>
Date:   Tue May 19 14:42:12 2020 -0700

    x86: Update GFNI check
    
    Update GFNI check to support processors with SSE and AVX versions of GFNI.
    
            Backport from master
            PR target/95220
            * config/i386/cpuinfo.c (get_available_features): Fix
            FEATURE_GFNI check.
    
    (cherry picked from commit 1e46a443f25d26816536c0c480211714b123a1d5)

commit 527a1978797339062dfd240f9be7b8f727e36a73
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu May 21 00:17:29 2020 +0000

    Daily bump.

commit 15e518600a9ef82b55d2ec75d8d41d767132f475
Author: Mark Eggleston <markeggleston@gcc.gnu.org>
Date:   Thu May 7 08:02:02 2020 +0100

    Fortran  : ProcPtr function results: 'ppr@' in error message PR39695
    
    The value 'ppr@' is set in the name of result symbol, the actual
    name of the symbol is in the procedure name symbol pointed
    to by the result symbol's namespace (ns). When reporting errors for
    symbols that have the proc_pointer attribute check whether the
    result attribute is set and set the name accordingly.
    
    Backport from master.
    
    2020-05-20  Mark Eggleston  <markeggleston@gcc.gnu.org>
    
    gcc/fortran/
    
            PR fortran/39695
            * resolve.c (resolve_fl_procedure): Set name depending on
            whether the result attribute is set.  For PROCEDURE/RESULT
            conflict use the name in sym->ns->proc_name->name.
            * symbol.c (gfc_add_type): Add check for function and result
            attributes use sym->ns->proc_name->name if both are set.
            Where the symbol cannot have a type use the name in
            sym->ns->proc_name->name.
    
    2020-05-20  Mark Eggleston  <markeggleston@gcc.gnu.org>
    
    gcc/testsuite/
    
            PR fortran/39695
            * gfortran.dg/pr39695_1.f90: New test.
            * gfortran.dg/pr39695_2.f90: New test.
            * gfortran.dg/pr39695_3.f90: New test.
            * gfortran.dg/pr39695_4.f90: New test.
    
            (cherry picked from commit eb069ae8819c3a84d7f78becc5501e21ee3a9554)

commit 0dce839465e65f65bb61a0550c4baf30f1d4a4c5
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed May 20 00:17:29 2020 +0000

    Daily bump.

commit 13df06ec2c307c4ac016470a45ea208213dbcb95
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue May 19 00:17:33 2020 +0000

    Daily bump.

commit 81c539d7d78dd80e356eadf7af090ecba901d4c6
Author: Douglas Rupp <rupp@adacore.com>
Date:   Mon May 18 11:43:48 2020 -0700

    Require powerpc_vsx_ok in gcc.target/powerpc/pr71763.c
    
    We're getting an error when running this test on PowerPC VxWorks 7,
    due to an unexpected warning:
    
        | Excess errors:
        | cc1: warning: '-mvsx' and '-mno-altivec' are incompatible
    
    The warning comes from a combination of factors:
      - The test itself uses -mvsx explicitly via the following directive:
           // { dg-options "-O1 -mvsx" }
      - Our toolchain was configured so as to make -mno-altivec
        the default;
      - These two options are mutually exclusive.
    
    This commit adds a powerpc_vsx_ok dg-require-effective-target directive
    to that test, and thus making it UNSUPPORTED instead.
    
    Tested on PowerPC VxWorks 7. Also tested on PowerPC ELF as well,
    a platform where we do not make -mno-altivec the default, to verify
    that the test continues to run as usual in that case.
    
    gcc/testsuite/
    
            * gcc.target/powerpc/pr71763.c: Require powerpc_vsx_ok.
    
    (cherry picked from commit c917584aa9ec32934acf0082ed383b04f49fd174)

commit 445028d31f51ee37c32df8052bfd459b4e9f36bc
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon May 18 00:17:15 2020 +0000

    Daily bump.

commit de5ec5993aefb8f3ca4266d46646c8f571a8c0a5
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun May 17 00:17:24 2020 +0000

    Daily bump.

commit 12188df11006211e04bcb7398778dc3d51256eaa
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat May 16 00:17:19 2020 +0000

    Daily bump.

commit 95cf5933a319365fd62276f867a923ebe7ef35c0
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri May 15 00:17:17 2020 +0000

    Daily bump.

commit 62ab8b9114b0bdae508ed76fa9028e0040d35e6b
Author: Szabolcs Nagy <szabolcs.nagy@arm.com>
Date:   Mon Apr 27 09:07:15 2020 +0100

    aarch64: Fix .cfi_window_save with pac-ret [PR94515]
    
    On aarch64 -mbranch-protection=pac-ret reuses the dwarf
    opcode for window_save to mean "toggle the return address
    mangle state", but in the dwarf2cfi internal logic the
    state was not updated when an opcode was emitted, the
    currently present update logic is only valid for the
    original sparc use of window_save so a separate bool is
    used on aarch64 to track the state.
    
    This bug can cause the unwinder not to authenticate return
    addresses that were signed (or vice versa) which means a
    runtime crash on a pauth enabled system.
    
    Currently only aarch64 pac-ret uses REG_CFA_TOGGLE_RA_MANGLE.
    
    This should be backported to gcc-9 and gcc-8 branches.
    
    Changed branch-protection=pac-ret to sign-return-address=all etc
    in the tests for the backport and adjusted the dwarf2cfi.c
    changes because the sparc change was missing.
    
    gcc/ChangeLog:
    
            Backport from mainline.
            2020-04-27  Szabolcs Nagy  <szabolcs.nagy@arm.com>
    
            PR target/94515
            * dwarf2cfi.c (struct GTY): Add ra_mangled.
            (cfi_row_equal_p): Check ra_mangled.
            (dwarf2out_frame_debug_cfa_window_save): Remove the argument,
            this only handles the sparc logic now.
            (dwarf2out_frame_debug_cfa_toggle_ra_mangle): New function for
            the aarch64 specific logic.
            (dwarf2out_frame_debug): Update to use the new subroutines.
            (change_cfi_row): Check ra_mangled.
    
    gcc/testsuite/ChangeLog:
    
            Backport from mainline.
            2020-04-27  Szabolcs Nagy  <szabolcs.nagy@arm.com>
    
            PR target/94515
            * g++.target/aarch64/pr94515-1.C: New test.
            * g++.target/aarch64/pr94515-2.C: New test.

commit d523cd5109bc5ab42edf85385f6a1085e0d6028c
Author: Szabolcs Nagy <szabolcs.nagy@arm.com>
Date:   Fri Apr 3 09:35:41 2020 +0000

    aarch64, libgcc: Fix unwinding from pac-ret to normal frames [PR94514]
    
    With -mbranch-protection=pac-ret the debug info toggles the
    signedness state of the return address so the unwinder knows when
    the return address needs pointer authentication.
    
    The unwind context flags were not updated according to the dwarf
    frame info.
    
    This causes unwinding across frames that were built without pac-ret
    to incorrectly authenticate the return address wich corrupts the
    return address on a system where PAuth is enabled.
    
    Note: This even affects systems where all code use pac-ret because
    unwinding across a signal frame the return address is not signed.
    
    Changed branch-protection=pac-ret to sign-return-address=all etc
    in the tests for the backport.
    
    gcc/testsuite/ChangeLog:
    
            Backport from mainline.
            2020-04-23  Szabolcs Nagy  <szabolcs.nagy@arm.com>
    
            PR target/94514
            * g++.target/aarch64/pr94514.C: Require lp64.
            * gcc.target/aarch64/pr94514.c: Likewise.
    
            Backport from mainline.
            2020-04-21  Szabolcs Nagy  <szabolcs.nagy@arm.com>
    
            PR target/94514
            * g++.target/aarch64/pr94514.C: New test.
            * gcc.target/aarch64/pr94514.c: New test.
    
    libgcc/ChangeLog:
    
            Backport from mainline.
            2020-04-21  Szabolcs Nagy  <szabolcs.nagy@arm.com>
    
            PR target/94514
            * config/aarch64/aarch64-unwind.h (aarch64_frob_update_context):
            Update context->flags accroding to the frame state.

commit 9ced3bd38b020aa29d2fbf1cb6e75906f68e7376
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu May 14 00:17:20 2020 +0000

    Daily bump.

commit 18aabb0cb3fbf44e04152fd2e1fbe522e5d99095
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed May 13 00:17:29 2020 +0000

    Daily bump.

commit 24c54df7f3643fd911fef2eb2953577664bf43eb
Author: David Edelsohn <dje.gcc@gmail.com>
Date:   Tue May 12 17:09:36 2020 -0400

        rs6000: AIX long double builtins for 64 bit long double.
    
        When long doubles are 64 bit, the AIX C library overrides the definitions
        but GCC builtins point to 128 bit names.  This patch overrides the
        builtins for fmodl, frexpl, ldexpl and modfl to refer to the 64 bit symbols.
    
        Backport from mainline
        2020-05-04  Clement Chigot  <clement.chigot@atos.net>
                    David Edelsohn  <dje.gcc@gmail.com>
    
                * config/rs6000/rs6000-call.c (rs6000_init_builtins): Override expli
    cit
                for fmodl, frexpl, ldexpl and modfl builtins.

commit 83263a280460fd99e35149f386787435b8e7627e
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue May 12 00:17:16 2020 +0000

    Daily bump.

commit 3d32b5c89438dbec423e48954ebffe51ee2b8dda
Author: Mark Eggleston <markeggleston@gcc.gnu.org>
Date:   Mon May 11 12:38:14 2020 +0100

    Fortran : Spurious warning message with -Wsurprising PR59107
    
    This change is from a patch developed for gcc-5.  The code
    has moved on since then requiring a change to interface.c
    
    2020-05-11  Mark Eggleston  <markeggleston@gcc.gnu.org>
    
    Backported from mainline
    2020-05-11  Janus Weil  <janus@gcc.gnu.org>
                Dominique d'Humieres  <dominiq@lps.ens.fr>
    
    gcc/fortran/
    
            PR fortran/59107
            * gfortran.h: Rename field resolved as resolve_symbol_called
            and assign two 2 bits instead of 1.
            * interface.c (gfc_find_typebound_dtio_proc): Use new field name.
            * resolve.c (gfc_resolve_intrinsic): Replace check of the formal
            field with resolve_symbol_called is at least 2, if it is not
            set the field to 2.  (resolve_symbol): Use new field name and
            check whether it is at least 1, if it is not set the field to 1.
    
    Backported from mainline
    2020-05-11  Mark Eggleston  <markeggleston@gcc.gnu.org>
    
    gcc/testsuite/
    
            PR fortran/59107
            * gfortran.dg/pr59107.f90: New test.

commit fae191ba5c100db4f181f995dbcd06db38126f44
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon May 11 00:17:26 2020 +0000

    Daily bump.

commit 1684d7cd879febbd06292c6f1f543069f1be8caf
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun May 10 00:17:19 2020 +0000

    Daily bump.

commit dc7687581143f5d546b3023139b4433b6f91bd10
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat May 9 00:17:14 2020 +0000

    Daily bump.

commit 53b71b7b9d497d6da82892c2a54ed28f4a6caec7
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri May 8 00:17:20 2020 +0000

    Daily bump.

commit 49ad77be9c797562c47b74c98a2b9cbd17f6b285
Author: Uros Bizjak <ubizjak@gmail.com>
Date:   Thu May 7 17:26:37 2020 +0200

    alpha: Implement the PR94780 fix for alpha.
    
    Essentially the same fix as for x86.
    
    2020-05-07  Uroš Bizjak  <ubizjak@gmail.com>
    
    gcc/
            * config/alpha/alpha.c (alpha_atomic_assign_expand_fenv): Use
            TARGET_EXPR instead of MODIFY_EXPR for the first assignments to
            fenv_var and new_fenv_var.

commit f088749058e0fdffa8f8bbaf6e9630ad09f7a9a8
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu May 7 00:17:31 2020 +0000

    Daily bump.

commit ce7eda645d20cde0eca901fc770446451b2ce7f8
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Wed May 6 11:16:16 2020 +0100

    libstdc++: Replace pre-release version number in docs
    
            * doc/xml/manual/abi.xml (abi.versioning.history): Update 8.0.0 to
            8.1.0 in list of versions.
            * doc/html/*: Regenerate.

commit 6734f3c79656e16cea671f393434b90e3dabe9e0
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed May 6 00:17:16 2020 +0000

    Daily bump.

commit 152e4526687b9913b7e4df656f00a05b5b4d9ecb
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue May 5 00:17:24 2020 +0000

    Daily bump.

commit afd6cb78ec214fd6eeaf3ea33c1b937609cafe0a
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Mon May 4 22:54:25 2020 +0100

    libstdc++: Fix broken link to SGI STL FAQ
    
    The previous URL to an entry in the wayback machine now redirects to a
    page saying "SGI.com Tech Archive Resources now retired" so use an older
    entry from the archive.
    
            * doc/xml/faq.xml: Use working link for SGI STL FAQ.
            * doc/html/*: Regenerate.

commit 4b0a1274faa64cbbe3c3b5db1129b3d2b3b530bb
Author: Eric Botcazou <ebotcazou@gcc.gnu.org>
Date:   Mon May 4 23:32:39 2020 +0200

    Fix Ada bootstrap on Cygwin64
    
    This fixes a compilation error preventing bootstrap with Ada
    on x86_64-pc-cygwin.
    
    2020-05-04  Mikael Pettersson  <mikpelinux@gmail.com>
    
            PR bootstrap/94918
            * mingw32.h: Prevent windows.h from including emmintrin.h on Cygw64.

commit f6965321b1c00bfb2b9c8407df56bcf38f096088
Author: Marek Polacek <polacek@redhat.com>
Date:   Mon May 4 13:25:42 2020 -0400

    c++: Bogus error with alignof [PR90736]
    
            PR c++/90736 - bogus error with alignof.
            * constexpr.c (adjust_temp_type): Use cv_unqualified type.

commit 386f23b84aafbdb43701b5a50ebe2dc1f4e6201f
Author: Bin Cheng <bin.cheng@linux.alibaba.com>
Date:   Mon May 4 16:56:34 2020 +0800

    Add unsigned type iv_cand for iv_use with non mode-precision type
    
    Precisely,  for iv_use if it's not integer/pointer type, or non-mode
    precision type, add candidate for the corresponding scev in unsigned
    type with the same precision, rather than its original type.
    
    Backport from master.
    2020-04-09  Bin Cheng  <bin.cheng@linux.alibaba.com>
        PR tree-optimization/93674
    
    gcc/
        * tree-ssa-loop-ivopts.c (langhooks.h): New include.
        (add_iv_candidate_for_use): For iv_use of non integer or pointer type,
        or non-mode precision type, add candidate in unsigned type with the
        same precision.
    
    gcc/testsuite/
        * g++.dg/pr93674.C: New test.

commit 2c7bab44f1e080a58bb09c5dd72e9f18e7b50cd7
Author: Andreas Krebbel <krebbel@linux.ibm.com>
Date:   Mon May 4 10:43:02 2020 +0200

    S/390: Fix PR94666
    
    The vector popcount expanders use a hardcoded subreg.  This might lead
    to double subregs being generated which then fail to match.  With this
    patch simplify_gen_subreg is used instead to fold the subregs.
    
    gcc/ChangeLog:
    
    2020-05-04  Andreas Krebbel  <krebbel@linux.ibm.com>
    
            Backport from mainline
            2020-04-20  Andreas Krebbel  <krebbel@linux.ibm.com>
    
            * config/s390/vector.md ("popcountv8hi2_vx", "popcountv4si2_vx")
            ("popcountv2di2_vx"): Use simplify_gen_subreg.
    
    gcc/testsuite/ChangeLog:
    
    2020-05-04  Andreas Krebbel  <krebbel@linux.ibm.com>
    
            Backport from mainline
            2020-04-20  Andreas Krebbel  <krebbel@linux.ibm.com>
    
            * g++.dg/pr94666.C: New test.

commit cf16ecdd897a73a1651aba50533c5a6fd73e842c
Author: Andreas Krebbel <krebbel@linux.ibm.com>
Date:   Mon May 4 10:43:02 2020 +0200

    PR94613: Fix vec_sel builtin for IBM Z
    
    The vsel instruction is a bit-wise select instruction.  Using an
    IF_THEN_ELSE to express it in RTL is wrong and leads to wrong code being
    generated in the combine pass.
    
    With the patch the pattern is written using bit operations.  However,
    I've just noticed that the manual still demands a fixed point mode for
    AND/IOR and friends although several targets emit bit ops on floating
    point vectors (including i386, Power, and s390). So I assume this is a
    safe thing to do?!
    
    gcc/ChangeLog:
    
    2020-05-04  Andreas Krebbel  <krebbel@linux.ibm.com>
    
            Backport from mainline
            2020-04-20  Andreas Krebbel  <krebbel@linux.ibm.com>
    
            PR target/94613
            * config/s390/s390-builtin-types.def: Add 3 new function modes.
            * config/s390/s390-builtins.def: Add mode dependent low-level
            builtin and map the overloaded builtins to these.
            * config/s390/vx-builtins.md ("vec_selV_HW"): Rename to ...
            ("vsel<V_HW"): ... this and rewrite the pattern with bitops.
    
    gcc/testsuite/ChangeLog:
    
    2020-05-04  Andreas Krebbel  <krebbel@linux.ibm.com>
    
            Backport from mainline
            2020-04-20  Andreas Krebbel  <krebbel@linux.ibm.com>
    
            PR target/94613
            * gcc.target/s390/zvector/pr94613.c: New test.
            * gcc.target/s390/zvector/vec_sel-1.c: New test.

commit 4a5244551bf047cbe3981acebc88c8b4d9528f75
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon May 4 00:17:13 2020 +0000

    Daily bump.

commit ea74cc16f670890a62821b9207d0441bcf9af8de
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun May 3 00:17:21 2020 +0000

    Daily bump.

commit d07a84a582f85fee86bca506018841382b80db80
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat May 2 00:17:16 2020 +0000

    Daily bump.

commit b92bb10248a8f99cecf71a54c56bd4d8c75a322f
Author: Thomas Koenig <tkoenig@gcc.gnu.org>
Date:   Fri May 1 14:45:56 2020 +0200

    Revert patch for PR fortran/93956.
    
    2020-04-27  Thomas Koenig  <tkoenig@gcc.gnu.org>
    
                PR fortran/93956
                PR fortran/94788
                * expr.c (gfc_check_pointer_assign): Revert patch for PR 93956.
                * interface.c: Likewise.

commit 80b9bc568cf5e39a08acbe570671e24814a342e2
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri May 1 00:17:18 2020 +0000

    Daily bump.

commit 1b3bf1b907a89cdba07c41c47dca9cbe3d7ff453
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Apr 30 00:16:48 2020 +0000

    Daily bump.

commit 80c605c875fb394212164908151bf0f8665f0391
Author: Andre Vieira <andre.simoesdiasvieira@arm.com>
Date:   Wed Apr 29 15:42:27 2020 +0100

    aarch64: Force TImode values into even registers
    
    The LSE CASP instruction requires values to be placed in even
    register pairs.  A solution involving two additional register
    classes was rejected in favor of the much simpler solution of
    simply requiring all TImode values to be aligned.
    
    gcc/ChangeLog:
    2020-04-29  Andre Vieira  <andre.simoesdiasvieira@arm.com>
    
            Backport from mainline.
            2018-10-31  Richard Henderson  <richard.henderson@linaro.org>
    
            * config/aarch64/aarch64.c (aarch64_hard_regno_mode_ok): Force
            16-byte modes held in GP registers to use an even regno.

commit 612c7e2518423ad66c68c4dd240f9fa84c07794e
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Apr 29 00:16:54 2020 +0000

    Daily bump.

commit 034dfe065033a846761b0a5c35fc86023bee1874
Author: Andre Vieira <andre.simoesdiasvieira@arm.com>
Date:   Tue Apr 28 13:25:43 2020 +0100

    aarch64: Fix for PR target/94814
    
    Backport of PR target/94518: Fix memmodel index in aarch64_store_exclusive_pair
    
    2020-04-28  Andre Vieira  <andre.simoesdiasvieira@arm.com>
    
            PR target/94814
            Backport from gcc-9.
            2020-04-07  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>
    
            PR target/94518
            2019-09-23  Richard Sandiford  <richard.sandiford@arm.com>
    
            * config/aarch64/atomics.md (aarch64_store_exclusive_pair): Fix
            memmodel index.

commit 0a6cc68bc0d5525b0da71f59a57286b189781d41
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Apr 28 00:16:55 2020 +0000

    Daily bump.

commit 661772c7b858ca655b32fa260a571814d503d118
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Apr 27 00:16:54 2020 +0000

    Daily bump.

commit b7832aa71d29aba1679913b0b8fb08bdf00e8d4d
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Apr 26 00:16:55 2020 +0000

    Daily bump.

commit 84eaabbb404ba92c37952e64c50d72b4af9ad1dd
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Apr 25 00:16:51 2020 +0000

    Daily bump.

commit aadc54867cc200ad7d073222769b9de7f13b5bcd
Author: Thomas König <tkoenig@gcc.gnu.org>
Date:   Fri Apr 24 09:26:48 2020 +0200

    Fix PR 93956, wrong pointer when returned via function.
    
    Backport from trunk.
    
    This one took a bit of detective work.  When array pointers point
    to components of derived types, we currently set the span field
    and then create an array temporary when we pass the array
    pointer to a procedure as a non-pointer or non-target argument.
    (This is inefficient, but that's for another release).
    
    Now, the compiler detected this case when there was a direct assignment
    like p => a%b, but not when p was returned either as a function result
    or via an argument.  This patch fixes that.
    
    2020-04-24  Thomas Koenig  <tkoenig@gcc.gnu.org>
    
            PR fortran/93956
            * expr.c (gfc_check_pointer_assign): Also set subref_array_pointer
            when a function returns a pointer.
            * interface.c (gfc_set_subref_array_pointer_arg): New function.
            (gfc_procedure_use): Call it.
    
    2020-04-24  Thomas Koenig  <tkoenig@gcc.gnu.org>
    
            PR fortran/93956
            * gfortran.dg/pointer_assign_13.f90: New test.

commit 51a599bb2de24784c2d38eaedc04fb23587726c1
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Apr 24 00:16:54 2020 +0000

    Daily bump.

commit a099cb63af86e1725f1966ba82382dd11c016acc
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Apr 23 00:16:55 2020 +0000

    Daily bump.

commit 69472d76d2456a447f61bc539bd6fe262c167bcf
Author: Andre Vieira <andre.simoesdiasvieira@arm.com>
Date:   Thu Apr 16 10:16:19 2020 +0100

    re PR target/90724 (ICE with __sync_bool_compare_and_swap with -march=armv8.2-a+sve)
    
    2020-04-16  Andre Vieira  <andre.simoesdiasvieira@arm.com>
    
            Backport from mainline
            2019-08-21  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>
    
            PR target/90724
            * config/aarch64/aarch64.c (aarch64_gen_compare_reg_maybe_ze): Force y
            in reg if it fails aarch64_plus_operand predicate.

commit 1dbd821ee74e6c234e61e25b0801a0b0949bcc67
Author: Andre Vieira <andre.simoesdiasvieira@arm.com>
Date:   Thu Apr 16 10:16:18 2020 +0100

    aarch64: Fix ICE due to aarch64_gen_compare_reg_maybe_ze [PR94435]
    
    The following testcase ICEs, because aarch64_gen_compare_reg_maybe_ze emits
    invalid RTL.
    For y_mode [QH]Imode it expects y to be of that mode (or CONST_INT that fits
    into that mode) and x being SImode; for non-CONST_INT y it zero extends y
    into SImode and compares that against x, for CONST_INT y it zero extends y
    into SImode.  The problem is that when the zero extended constant isn't
    usable directly, it forces it into a REG, but with y_mode mode, and then
    compares against y.  That is wrong, because it should force it into a SImode
    REG and compare that way.
    
    2020-04-16  Andre Vieira  <andre.simoesdiasvieira@arm.com>
    
            Backport from mainline
            2020-04-02  Jakub Jelinek  <jakub@redhat.com>
    
            PR target/94435
            * config/aarch64/aarch64.c (aarch64_gen_compare_reg_maybe_ze): For
            y_mode E_[QH]Imode and y being a CONST_INT, change y_mode to SImode.
    
            * gcc.target/aarch64/pr94435.c: New test.

commit a69a60c4969cea06c1d44b5e3e4970595041e510
Author: Andre Vieira <andre.simoesdiasvieira@arm.com>
Date:   Thu Apr 16 10:16:18 2020 +0100

    aarch64: Fix bootstrap with old binutils [PR93053]
    
    As reported in the PR, GCC 10 (and also 9.3.1 but not 9.3.0) fails to build
    when using older binutils which lack LSE support, because those instructions
    are used in libgcc.
    Thanks to Kyrylo's hint, the following patches (hopefully) allow it to build
    even with older binutils by using .inst directive if LSE support isn't
    available in the assembler.
    
    2020-04-16  Andre Vieira  <andre.simoesdiasvieira@arm.com>
    
            Backport from mainline
            2020-04-15  Jakub Jelinek  <jakub@redhat.com>
    
            PR target/93053
            * configure.ac (LIBGCC_CHECK_AS_LSE): Add HAVE_AS_LSE checking.
            * config/aarch64/lse.S: Include auto-target.h, if HAVE_AS_LSE
            is not defined, use just .arch armv8-a.
            (B, M, N, OPN): Define.
            (COMMENT): New .macro.
            (CAS, CASP, SWP, LDOP): Use .inst directive if HAVE_AS_LSE is not
            defined.  Otherwise, move the operands right after the glue? and
            comment out operands where the macros are used.
            * configure: Regenerated.
            * config.in: Regenerated.

commit 163e0d03f2cdc80de4968c4be4694cdaeaf47fcd
Author: Andre Vieira <andre.simoesdiasvieira@arm.com>
Date:   Thu Apr 16 10:16:17 2020 +0100

    aarch64: Fix up aarch64_compare_and_swaphi pattern [PR94368]
    
    2020-04-16  Andre Vieira  <andre.simoesdiasvieira@arm.com>
    
            Backport from mainline
            2020-03-31  Jakub Jelinek  <jakub@redhat.com>
    
            PR target/94368
            * config/aarch64/constraints.md (Uph): New constraint.
            * config/aarch64/atomics.md (cas_short_expected_imm): New mode attr.
            (aarch64_compare_and_swap<mode>): Use it instead of n in operand 2's
            constraint.
    
            * gcc.dg/pr94368.c: New test.

commit 5d44ad1e0a66651495ed964058cdd6db0d99d876
Author: Andre Vieira <andre.simoesdiasvieira@arm.com>
Date:   Thu Apr 16 10:16:17 2020 +0100

    aarch64: Configure for sys/auxv.h in libgcc for lse-init.c
    
    2020-04-16  Andre Vieira  <andre.simoesdiasvieira@arm.com>
    
            Backport from mainline
            2019-09-25  Richard Henderson  <richard.henderson@linaro.org>
    
            PR target/91833
            * config/aarch64/lse-init.c: Include auto-target.h.  Disable
            initialization if !HAVE_SYS_AUXV_H.
            * configure.ac (AC_CHECK_HEADERS): Add sys/auxv.h.
            * config.in, configure: Rebuild.

commit 4eaef24ba1f83ccfb54c9e473eb203cce3a9f12f
Author: Andre Vieira <andre.simoesdiasvieira@arm.com>
Date:   Thu Apr 16 10:16:16 2020 +0100

    aarch64: Fix store-exclusive in load-operate LSE helpers
    
    2020-04-16  Andre Vieira  <andre.simoesdiasvieira@arm.com>
    
            Backport from mainline
            2019-09-25  Richard Henderson  <richard.henderson@linaro.org>
    
            PR target/91834
            * config/aarch64/lse.S (LDNM): Ensure STXR output does not
            overlap the inputs.

commit ff54767725cd86e1d937cde50ec499a318b25997
Author: Andre Vieira <andre.simoesdiasvieira@arm.com>
Date:   Thu Apr 16 10:16:15 2020 +0100

    aarch64: Implement -moutline-atomics
    
    2020-04-16  Andre Vieira  <andre.simoesdiasvieira@arm.com>
    
            Backport from mainline
            2019-09-19  Richard Henderson  <richard.henderson@linaro.org>
    
            * config/aarch64/aarch64.opt (-moutline-atomics): New.
            * config/aarch64/aarch64.c (aarch64_atomic_ool_func): New.
            (aarch64_ool_cas_names, aarch64_ool_swp_names): New.
            (aarch64_ool_ldadd_names, aarch64_ool_ldset_names): New.
            (aarch64_ool_ldclr_names, aarch64_ool_ldeor_names): New.
            (aarch64_expand_compare_and_swap): Honor TARGET_OUTLINE_ATOMICS.
            * config/aarch64/atomics.md (atomic_exchange<ALLI>): Likewise.
            (atomic_<atomic_op><ALLI>): Likewise.
            (atomic_fetch_<atomic_op><ALLI>): Likewise.
            (atomic_<atomic_op>_fetch<ALLI>): Likewise.
            * doc/invoke.texi: Document -moutline-atomics.
    
            * gcc.target/aarch64/atomic-op-acq_rel.c: Use -mno-outline-atomics.
            * gcc.target/aarch64/atomic-comp-swap-release-acquire.c: Likewise.
            * gcc.target/aarch64/atomic-op-acquire.c: Likewise.
            * gcc.target/aarch64/atomic-op-char.c: Likewise.
            * gcc.target/aarch64/atomic-op-consume.c: Likewise.
            * gcc.target/aarch64/atomic-op-imm.c: Likewise.
            * gcc.target/aarch64/atomic-op-int.c: Likewise.
            * gcc.target/aarch64/atomic-op-long.c: Likewise.
            * gcc.target/aarch64/atomic-op-relaxed.c: Likewise.
            * gcc.target/aarch64/atomic-op-release.c: Likewise.
            * gcc.target/aarch64/atomic-op-seq_cst.c: Likewise.
            * gcc.target/aarch64/atomic-op-short.c: Likewise.
            * gcc.target/aarch64/atomic_cmp_exchange_zero_reg_1.c: Likewise.
            * gcc.target/aarch64/atomic_cmp_exchange_zero_strong_1.c: Likewise.
            * gcc.target/aarch64/sync-comp-swap.c: Likewise.
            * gcc.target/aarch64/sync-op-acquire.c: Likewise.
            * gcc.target/aarch64/sync-op-full.c: Likewise.

commit 36579491fa01039694ad12e673ffe523c69dd156
Author: Andre Vieira <andre.simoesdiasvieira@arm.com>
Date:   Thu Apr 16 10:16:14 2020 +0100

    Add visibility to libfunc constructors
    
    2020-04-16  Andre Vieira  <andre.simoesdiasvieira@arm.com>
    
            Backport from mainline.
            2018-10-31  Richard Henderson  <richard.henderson@linaro.org>
    
            * optabs-libfuncs.c (build_libfunc_function_visibility):
            New, split out from...
            (build_libfunc_function): ... here.
            (init_one_libfunc_visibility): New, split out from ...
            (init_one_libfunc): ... here.

commit 06f8058a8368f79e2cbf4659db53b941895f271a
Author: Andre Vieira <andre.simoesdiasvieira@arm.com>
Date:   Thu Apr 16 10:16:13 2020 +0100

    aarch64: Add out-of-line functions for LSE atomics
    
    This is the libgcc part of the interface -- providing the functions.
    Rationale is provided at the top of libgcc/config/aarch64/lse.S.
    
    2020-04-16  Andre Vieira  <andre.simoesdiasvieira@arm.com>
    
            Backport from mainline
            2019-09-19  Richard Henderson  <richard.henderson@linaro.org>
    
            * config/aarch64/lse-init.c: New file.
            * config/aarch64/lse.S: New file.
            * config/aarch64/t-lse: New file.
            * config.host: Add t-lse to all aarch64 tuples.

commit eccc28184d58dc27232d6710dc44eb2c91c01060
Author: Andre Vieira <andre.simoesdiasvieira@arm.com>
Date:   Thu Apr 16 10:16:13 2020 +0100

    aarch64: Tidy aarch64_split_compare_and_swap
    
    2020-04-16  Andre Vieira  <andre.simoesdiasvieira@arm.com>
    
            Backport from mainline.
            2019-09-19  Richard Henderson  <richard.henderson@linaro.org>
    
            * config/aarch64/aarch64 (aarch64_split_compare_and_swap): Disable
            strong_zero_p for aarch64_track_speculation; unify some code paths;
            use aarch64_gen_compare_reg instead of open-coding.

commit 0b65e477890b7fe7f47a3dd85975ab7ee09b0609
Author: Andre Vieira <andre.simoesdiasvieira@arm.com>
Date:   Thu Apr 16 10:16:15 2020 +0100

    Aarch64: Fix shrinkwrapping interactions with atomics (PR92692)
    
    2020-04-16  Andre Vieira  <andre.simoesdiasvieira@arm.com>
    
            Backport from mainline
            2020-01-17  Wilco Dijkstra  <wdijkstr@arm.com>
    
            PR target/92692
            * config/aarch64/atomics.md (aarch64_compare_and_swap<mode>)
            Use epilogue_completed rather than reload_completed.

commit 1101198f3d099af0555d7202a2a00c96d39ee4e2
Author: Andre Vieira <andre.simoesdiasvieira@arm.com>
Date:   Thu Apr 16 10:16:12 2020 +0100

    aarch64: Implement TImode compare-and-swap
    
    2020-04-16  Andre Vieira  <andre.simoesdiasvieira@arm.com>
    
            Backport from mainline.
            2019-09-19  Richard Henderson  <richard.henderson@linaro.org>
    
            * config/aarch64/aarch64.c (aarch64_gen_compare_reg): Add support
            for NE comparison of TImode values.
            (aarch64_emit_load_exclusive): Add support for TImode.
            (aarch64_emit_store_exclusive): Likewise.
            (aarch64_split_compare_and_swap): Disable strong_zero_p for TImode.
            * config/aarch64/atomics.md (atomic_compare_and_swapti):
            Change iterator from ALLI to ALLI_TI.
            (atomic_compare_and_swapti): New.
            (atomic_compare_and_swapti: New.
            (aarch64_load_exclusive_pair): New.
            (aarch64_store_exclusive_pair): New.
            * config/aarch64/iterators.md (ALLI_TI): New iterator.

commit c7ae64412b6c9c7b966f3c0ab8eaa51c220ea39c
Author: Andre Vieira <andre.simoesdiasvieira@arm.com>
Date:   Thu Apr 16 10:16:11 2020 +0100

    aarch64: Extend %R for integer registers
    
    2020-04-16  Andre Vieira  <andre.simoesdiasvieira@arm.com>
    
            Backport from mainline.
            2019-09-19  Richard Henderson  <richard.henderson@linaro.org>
    
            * config/aarch64/aarch64.c (aarch64_print_operand): Allow integer
            registers with %R.

commit 5497bc389dca6a992aaa063df308959f23409c3f
Author: Andre Vieira <andre.simoesdiasvieira@arm.com>
Date:   Thu Apr 16 10:16:11 2020 +0100

    aarch64: Remove early clobber from ATOMIC_LDOP scratch
    
    2020-04-16  Andre Vieira  <andre.simoesdiasvieira@arm.com>
    
            Backport from mainline.
            2018-10-31  Richard Henderson  <richard.henderson@linaro.org>
    
            * config/aarch64/atomics.md (aarch64_atomic_<ATOMIC_LDOP><ALLI>_lse):
            scratch register need not be early-clobber.  Document the reason
            why we cannot use ST<OP>.

commit f557aa1a836377d49fdbd4e7cecb2eede55b1dd2
Author: Andre Vieira <andre.simoesdiasvieira@arm.com>
Date:   Thu Apr 16 10:16:10 2020 +0100

    aarch64: Improve atomic-op lse generation
    
    Fix constraints; avoid unnecessary split.  Drop the use of the atomic_op
    iterator in favor of the ATOMIC_LDOP iterator; this is simplier and more
    logical for ldclr aka bic.
    
    2020-04-16  Andre Vieira  <andre.simoesdiasvieira@arm.com>
    
            Backport from mainline.
            2018-10-31  Richard Henderson  <richard.henderson@linaro.org>
    
            * config/aarch64/aarch64.c (aarch64_emit_bic): Remove.
            (aarch64_atomic_ldop_supported_p): Remove.
            (aarch64_gen_atomic_ldop): Remove.
            * config/aarch64/atomic.md (atomic_<atomic_optab><ALLI>):
            Fully expand LSE operations here.
            (atomic_fetch_<atomic_optab><ALLI>): Likewise.
            (atomic_<atomic_optab>_fetch<ALLI>): Likewise.
            (aarch64_atomic_<ATOMIC_LDOP><ALLI>_lse): Drop atomic_op iterator
            and use ATOMIC_LDOP instead; use register_operand for the input;
            drop the split and emit insns directly.
            (aarch64_atomic_fetch_<ATOMIC_LDOP><ALLI>_lse): Likewise.
            (aarch64_atomic_<atomic_op>_fetch<ALLI>_lse): Remove.
            (aarch64_atomic_load<ATOMIC_LDOP><ALLI>): Remove.

commit 5d8ff6f1ff2cef121dc33d954535fc4cf5648cb6
Author: Andre Vieira <andre.simoesdiasvieira@arm.com>
Date:   Thu Apr 16 10:16:09 2020 +0100

    aarch64: Improve swp generation
    
    Allow zero as an input; fix constraints; avoid unnecessary split.
    
    2020-04-16  Andre Vieira  <andre.simoesdiasvieira@arm.com>
    
            Backport from mainline.
            2018-10-31  Richard Henderson  <richard.henderson@linaro.org>
    
            * config/aarch64/aarch64.c (aarch64_emit_atomic_swap): Remove.
            (aarch64_gen_atomic_ldop): Don't call it.
            * config/aarch64/atomics.md (atomic_exchange<ALLI>):
            Use aarch64_reg_or_zero.
            (aarch64_atomic_exchange<ALLI>): Likewise.
            (aarch64_atomic_exchange<ALLI>_lse): Remove split; remove & from
            operand 0; use aarch64_reg_or_zero for input; merge ...
            (aarch64_atomic_swp<ALLI>): ... this and remove.

commit 369a4d6dd2df645f1870506d8dd6a5a265955b34
Author: Andre Vieira <andre.simoesdiasvieira@arm.com>
Date:   Thu Apr 16 10:16:09 2020 +0100

    aarch64: Improve cas generation
    
    Do not zero-extend the input to the cas for subword operations;
    instead, use the appropriate zero-extending compare insns.
    Correct the predicates and constraints for immediate expected operand.
    
    2020-04-16  Andre Vieira  <andre.simoesdiasvieira@arm.com>
    
            Backport from mainline.
            2018-10-31  Richard Henderson  <richard.henderson@linaro.org>
    
            * config/aarch64/aarch64.c (aarch64_gen_compare_reg_maybe_ze): New.
            (aarch64_split_compare_and_swap): Use it.
            (aarch64_expand_compare_and_swap): Likewise.  Remove convert_modes;
            test oldval against the proper predicate.
            * config/aarch64/atomics.md (atomic_compare_and_swap<ALLI>):
            Use nonmemory_operand for expected.
            (cas_short_expected_pred): New.
            (aarch64_compare_and_swap<SHORT>): Use it; use "rn" not "rI" to match.
            (aarch64_compare_and_swap<GPI>): Use "rn" not "rI" for expected.
            * config/aarch64/predicates.md (aarch64_plushi_immediate): New.
            (aarch64_plushi_operand): New.

commit 1bf932b1ab9002089ddd79d64532186d7320d6b5
Author: Andre Vieira <andre.simoesdiasvieira@arm.com>
Date:   Thu Apr 16 10:16:08 2020 +0100

    aarch64: Simplify LSE cas generation
    
    The cas insn is a single insn, and if expanded properly need not
    be split after reload.  Use the proper inputs for the insn.
    
    2020-04-16  Andre Vieira  <andre.simoesdiasvieira@arm.com>
    
            Backport from mainline.
            2018-10-31  Richard Henderson  <richard.henderson@linaro.org>
    
            * config/aarch64/aarch64.c (aarch64_expand_compare_and_swap):
            Force oldval into the rval register for TARGET_LSE; emit the compare
            during initial expansion so that it may be deleted if unused.
            (aarch64_gen_atomic_cas): Remove.
            * config/aarch64/atomics.md (aarch64_compare_and_swap<SHORT>_lse):
            Change =&r to +r for operand 0; use match_dup for operand 2;
            remove is_weak and mod_f operands as unused.  Drop the split
            and merge with...
            (aarch64_atomic_cas<SHORT>): ... this pattern's output; remove.
            (aarch64_compare_and_swap<GPI>_lse): Similarly.
            (aarch64_atomic_cas<GPI>): Similarly.

commit 512b0ffab3bc4f334cbb36c598192c1da2abe330
Author: Andre Vieira <andre.simoesdiasvieira@arm.com>
Date:   Thu Apr 16 10:16:07 2020 +0100

    aarch64: Add early clobber for aarch64_store_exclusive.
    
    gcc/ChangeLog:
    2020-04-16  Andre Vieira  <andre.simoesdiasvieira@arm.com>
    
            Backport from mainline.
            2018-07-16  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>
    
            * config/aarch64/atomics.md (aarch64_store_execlusive<mode>): Add
            early clobber.

commit b6295ad4c9ea45781341f0f31bc7e91e517d1a86
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Apr 22 00:16:56 2020 +0000

    Daily bump.

commit 08a6420c7b017bbb78abfbd315944147492280da
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Tue Apr 21 17:26:52 2020 +0100

    libstdc++: Document correct feature test macro, __cpp_lib_is_invocable
    
    The std::is_callable trait was renamed to is_invocable, but I never
    updated the manual to reflect the updated feature test macro.
    
            * doc/xml/manual/status_cxx2017.xml: Fix name of feature test macro.
            * doc/html/*: Regenerate.

commit b463ced59535fddeff90d697f869d58e444568fa
Author: Martin Jambor <mjambor@suse.cz>
Date:   Tue Apr 21 17:41:01 2020 +0200

    sra-8: Fix sra_modify_expr handling of partial writes (PR 94482)
    
    This is a fairly straightforward backport of the mainline fix for PR 94482.
    
    When sra_modify_expr is invoked on an expression that modifies only
    part of the underlying replacement, such as a BIT_FIELD_REF on a LHS
    of an assignment and the SRA replacement's type is not compatible with
    what is being replaced (0th operand of the B_F_R in the above
    example), it does not work properly, basically throwing away the part
    of the expr that should have stayed intact.
    
    This is fixed in two ways.  For BIT_FIELD_REFs, which operate on the
    binary image of the replacement (and so in a way serve as a
    VIEW_CONVERT_EXPR) we just do not bother with converting.  For
    REALPART_EXPRs and IMAGPART_EXPRs, if the replacement is not a
    register, we insert a VIEW_CONVERT_EXPR under
    the complex partial access expression, which is always OK, for loads
    from registers we take the extra step of converting it to a temporary.
    
    This revealed a bug in fwprop which is fixed with the hunk from Richi.
    This is the only difference from the mainline patch which has two
    hunks, but the code handling BIT_FIELD_REF is not present in gcc-8.
    
    Oh, and the testcase options were changed to what Jakub put there on
    the mainline to suppress all vector ABI warnings.
    
    Bootstrapped and tested on x86_64-linux.
    
    2020-04-21  Martin Jambor  <mjambor@suse.cz>
    
            Backport from master
            2020-04-09  Martin Jambor  <mjambor@suse.cz>
                        Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/94482
            * tree-sra.c (create_access_replacement): Dump new replacement with
            TDF_UID.
            (sra_modify_expr): Fix handling of cases when the original EXPR writes
            to only part of the replacement.
            * tree-ssa-forwprop.c (pass_forwprop::execute): Properly verify
            the first operand of combinations into REAL/IMAGPART_EXPR and
            BIT_FIELD_REF.
    
            testsuite/
            * gcc.dg/torture/pr94482.c: New test.
            * gcc.dg/tree-ssa/pr94482-2.c: Likewise.

commit 7539c2a680c99c90b7d1a47acf659cdd259b4650
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Apr 21 00:16:54 2020 +0000

    Daily bump.

commit 472c004fcd13e429dad7d1b829d21e26d24e39a4
Author: H.J. Lu <hjl.tools@gmail.com>
Date:   Mon Apr 20 05:51:29 2020 -0700

    x86: Restore the frame pointer in word_mode
    
    We must restore the frame pointer in word_mode for eh_return epilogues
    since the upper 32 bits of RBP register can have any values.
    
    Tested on Linux/x32 and Linux/x86-64.
    
            Backport from master
            PR target/94556
            * config/i386/i386.c (ix86_expand_epilogue): Restore the frame
            pointer in word_mode for eh_return epilogues.
    
    (cherry picked from commit efc1f3577f38bb213b313661c025ac965baee953)

commit b262ef0ed1628d88aa7a899fb3f93bcf3e51998e
Author: Tamar Christina <tamar.christina@arm.com>
Date:   Mon Apr 20 11:46:38 2020 +0100

    AArch64: Fix options canonicanization for assembler
    
    It is currently impossible to use fp16 on any architecture higher than Armv8.3-a
    due to a bug in options canonization.  This bug results in the fp16 flag not
    being emitted in the assembly when it should have been.
    
    This is caused by a complicated architectural requirement at Armv8.4-a.  On
    Armv8.2-a and Armv8.3-a fp16fml is an optional extension and turning it on turns
    on both fp and fp16.  However starting with Armv8.4-a fp16fml is mandatory if
    fp16 is available, otherwise it's optional.
    
    In short this means that to enable fp16fml the smallest option that needs to
    passed to the assembler is Armv8.4-a+fp16.
    
    The fix in this patch takes into account that an option may be on by default in
    an architecture, but that not all the bits required to use it are on by default
    in an architecture.  In such cases the difference between the two are still
    emitted to the assembler.
    
    gcc/ChangeLog:
    
            PR target/94396
            * common/config/aarch64/aarch64-common.c
            (aarch64_get_extension_string_for_isa_flags): Handle default flags.
    
    gcc/testsuite/ChangeLog:
    
            PR target/94396
            * gcc.target/aarch64/options_set_11.c: New test.
            * gcc.target/aarch64/options_set_12.c: New test.
            * gcc.target/aarch64/options_set_13.c: New test.
            * gcc.target/aarch64/options_set_14.c: New test.
            * gcc.target/aarch64/options_set_15.c: New test.
            * gcc.target/aarch64/options_set_16.c: New test.
            * gcc.target/aarch64/options_set_17.c: New test.
            * gcc.target/aarch64/options_set_18.c: New test.
            * gcc.target/aarch64/options_set_19.c: New test.
            * gcc.target/aarch64/options_set_20.c: New test.
            * gcc.target/aarch64/options_set_21.c: New test.
            * gcc.target/aarch64/options_set_22.c: New test.
            * gcc.target/aarch64/options_set_23.c: New test.
            * gcc.target/aarch64/options_set_24.c: New test.
            * gcc.target/aarch64/options_set_25.c: New test.
            * gcc.target/aarch64/options_set_26.c: New test.

commit b3e5d33b380a161bbfb854f47077a5c32684a39e
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Apr 20 00:16:56 2020 +0000

    Daily bump.

commit 1737e76b253f7412ac6635e7c9dc1398efbffad9
Author: Uros Bizjak <ubizjak@gmail.com>
Date:   Sun Apr 19 16:30:13 2020 +0200

    i386: Remove unneeded assignments when triggering SSE exceptions
    
    According to "Intel 64 and IA32 Arch SDM, Vol. 3":
    
    "Because SIMD floating-point exceptions are precise and occur immediately,
    the situation does not arise where an x87 FPU instruction, a WAIT/FWAIT
    instruction, or another SSE/SSE2/SSE3 instruction will catch a pending
    unmasked SIMD floating-point exception."
    
    Remove unneeded assignments to volatile memory.
    
    libgcc/ChangeLog:
    
            * config/i386/sfp-exceptions.c (__sfp_handle_exceptions) [__SSE_MATH__]:
            Remove unneeded assignments to volatile memory.
    
    libatomic/ChangeLog:
    
            * config/x86/fenv.c (__atomic_feraiseexcept) [__SSE_MATH__]:
            Remove unneeded assignments to volatile memory.
    
    libgfortran/ChangeLog:
    
            * config/fpu-387.h (local_feraiseexcept) [__SSE_MATH__]:
            Remove unneeded assignments to volatile memory.

commit a79b2bcb2e9af1a80f980105a052f21f8af79095
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Apr 19 00:16:57 2020 +0000

    Daily bump.

commit 24a2c2d015f20679d055ae38f4e37864cced705f
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Apr 18 00:16:56 2020 +0000

    Daily bump.

commit 99ddb11c0840f68466a14fd583dd4d3a558d4961
Author: H.J. Lu <hjl.tools@gmail.com>
Date:   Fri Apr 17 15:23:27 2020 -0700

    x86: Insert ENDBR if function will be called indirectly
    
    Since constant_call_address_operand has
    
    ;; Test for a pc-relative call operand
    (define_predicate "constant_call_address_operand"
      (match_code "symbol_ref")
    {
      if (ix86_cmodel == CM_LARGE || ix86_cmodel == CM_LARGE_PIC
          || flag_force_indirect_call)
        return false;
      if (TARGET_DLLIMPORT_DECL_ATTRIBUTES && SYMBOL_REF_DLLIMPORT_P (op))
        return false;
      return true;
    })
    
    even if cgraph_node::get (cfun->decl)->only_called_directly_p () returns
    false, the fuction may still be called indirectly.  Copy the logic from
    constant_call_address_operand to rest_of_insert_endbranch to insert ENDBR
    at function entry if function will be called indirectly.
    
    NB: gcc.target/i386/pr94417-2.c is updated to expect 4 ENDBRs, instead
    of 2, since only GCC 10 has the fix for PR target/89355 not to insert
    ENDBR after NOTE_INSN_DELETED_LABEL.
    
    gcc/
    
            Backport from master
            PR target/94417
            * config/i386/i386.c (rest_of_insert_endbranch): Insert ENDBR at
            function entry if function will be called indirectly.
    
    gcc/testsuite/
    
            Backport from master
            PR target/94417
            * gcc.target/i386/pr94417-1.c: New test.
            * gcc.target/i386/pr94417-2.c: Likewise.
            * gcc.target/i386/pr94417-3.c: Likewise.
    
    (cherry picked from commit c5f379653964a1d2c7037b2de3e947a48370a198)

commit 23f24c89039bd775fd27ab1d2a084d83801a594a
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Apr 17 00:17:00 2020 +0000

    Daily bump.

commit 9ba334bab33fbb68cadbe0d65b471bdb8420c676
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Apr 16 00:17:01 2020 +0000

    Daily bump.

commit 06d6120b7a5621d584bd0c861bc94096cc8b60b7
Author: Uros Bizjak <ubizjak@gmail.com>
Date:   Wed Apr 15 23:25:27 2020 +0200

    i386: Require OPTION_MASK_ISA_SSE2 for __builtin_ia32_movq128 [PR94603]
    
            PR target/94603
            * config/i386/i386-builtin.def (__builtin_ia32_movq128):
            Require OPTION_MASK_ISA_SSE2.
    
    testsuite/ChangeLog:
    
            PR target/94603
            * gcc.target/i386/pr94603.c: New test.

commit f45b87f786809997d2f8d418ab10de6640149422
Author: Max Filippov <jcmvbkbc@gmail.com>
Date:   Mon Apr 13 13:26:04 2020 -0700

    xtensa: backport fix for PR target/94584
    
    Patterns zero_extendhisi2, zero_extendqisi2 and extendhisi2_internal can
    load value from memory, but they don't treat volatile memory correctly.
    Add %v1 before load instructions to emit 'memw' instruction when
    -mserialize-volatile is in effect.
    
    2020-04-15  Max Filippov  <jcmvbkbc@gmail.com>
    gcc/
            * config/xtensa/xtensa.md (zero_extendhisi2, zero_extendqisi2)
            (extendhisi2_internal): Add %v1 before the load instructions.
    
    gcc/testsuite/
            * gcc.target/xtensa/pr94584.c: New test.

commit 87c1bfebcdda50ff8964a07c9963823de43de65a
Author: Max Filippov <jcmvbkbc@gmail.com>
Date:   Thu Sep 26 20:51:27 2019 +0000

    xtensa: backport fix for PR target/91880
    
    Xtensa hwloop_optimize segfaults when zero overhead loop is about to be
    inserted as the first instruction of the function.
    Insert zero overhead loop instruction into new basic block before the
    loop when basic block that precedes the loop is empty.
    
    2020-04-15  Max Filippov  <jcmvbkbc@gmail.com>
    gcc/
            * config/xtensa/xtensa.c (hwloop_optimize): Insert zero overhead
            loop instruction into new basic block before the loop when basic
            block that precedes the loop is empty.
    
    gcc/testsuite/
            * gcc.target/xtensa/pr91880.c: New test case.
            * gcc.target/xtensa/xtensa.exp: New test suite.

commit 1cbbd75bb5f6a07d0ec777b9a5da714230d1d2e6
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Apr 15 00:17:00 2020 +0000

    Daily bump.

commit 5e67ee3aa084a54f59c0848c32c17faddbb04c4c
Author: Thomas König <tkoenig@gcc.gnu.org>
Date:   Tue Apr 14 18:45:59 2020 +0200

    Backport from trunk of the fix for PR 94270.
    
    2020-04-14  Thomas Koenig  <tkoenig@gcc.gnu.org>
    
            Backport from trunk.
            PR fortran/94270
            * trans-decl.c (generate_local_decl): Do not warn if the
            symbol is artifical.
    
    2020-04-14  Thomas Koenig  <tkoenig@gcc.gnu.org>
    
            Backport from trunk
            PR fortran/94270
            * gfortran.dg/warn_unused_dummy_argument_6.f90: New test.

commit 0be6e988cbd251e0897d3cff15e0e2f446b3a221
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Apr 14 00:16:58 2020 +0000

    Daily bump.

commit 3efeae5e1147c831e96896b3a15b68ab8546e45d
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Apr 13 00:16:57 2020 +0000

    Daily bump.

commit 295b1a5d2d95a486195973d8f9c4bb13090a5ce4
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Apr 12 00:16:52 2020 +0000

    Daily bump.

commit 6f9fa50688ee33f836751ada1d407048e0bb28d8
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Apr 11 00:16:52 2020 +0000

    Daily bump.

commit c4f7e2bee23afa4c6b5b39cc5cb19c767cdf123a
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Apr 10 00:16:58 2020 +0000

    Daily bump.

commit ca49ba6ab92328c48a9b84fce43cfa12ae5bfe04
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Apr 9 00:16:57 2020 +0000

    Daily bump.

commit 5913ca399ca0f4fb4fc1d33bf48c99702fd359b0
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Apr 8 00:16:56 2020 +0000

    Daily bump.

commit 09f2293fac1785681f8ceaf6ae6d2d5cfe519b08
Author: Will Schmidt <will_schmidt@vnet.ibm.com>
Date:   Tue Apr 7 16:32:39 2020 -0500

    rs6000 pragma fix backport from mainline to gcc-8
    
        2020-04-07  Will Schmidt  <will_schmidt@vnet.ibm.com>
    
        Backport from mainline.
            2020-03-23  Will Schmidt  <will_schmidt@vnet.ibm.com>
    
            * config/rs6000/rs6000-call.c altivec_init_builtins(): Remove
            code to skip defining builtins based on builtin_mask.
    
            * gcc.target/powerpc/pragma_power6.c: New.
            * gcc.target/powerpc/pragma_power7.c: New.
            * gcc.target/powerpc/pragma_power8.c: New.
            * gcc.target/powerpc/pragma_power9.c: New.
            * gcc.target/powerpc/pragma_misc9.c: New.
            * gcc.target/powerpc/vsu/pragma_misc9.c: New.
            * gcc.target/powerpc/vsu/vec-all-nez-7.c: Update.
            * gcc.target/powerpc/vsu/vec-any-eqz-7.c: Update.

commit 11b19dfc082607e5049f72f1ef954fda7b42e8d4
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Apr 7 08:27:49 2020 +0200

    i386: Fix emit_reduc_half on V{64Q,32H}Imode [PR94500]
    
    The following testcase is miscompiled in 8.x, because emit_reduc_half is
    prepared to handle for 512-bit modes only i equal to 512, 256, 128 and 64.
    V32HImode also needs i equal to 32 and V64QImode i equal to 32 and 16,
    but emit_reduc_half in that case performs a redundant permutation exactly
    like i == 32.  In 9+ the testcase works because Richard in r9-3393
    changed the reduc_* expanders so that they actually don't call
    ix86_expand_reduc on 512-bit modes, but only 128-bit ones.
    
    The patch fixes emit_reduc_half to handle also i of 32 and 16 similarly to
    how V32QImode/V16HImode are handled for AVX2.  I think it shouldn't hurt
    to fix the function even on the trunk and 9 branch even when nothing uses
    it ATM.
    
    2020-04-07  Jakub Jelinek  <jakub@redhat.com>
    
            PR target/94500
            * config/i386/i386.c (emit_reduc_half): For V{64QI,32HI}mode
            handle i < 64 using avx512bw_lshrv4ti3.  Formatting fixes.
    
            * gcc.target/i386/avx512bw-pr94500.c: New test.

commit 6bdef867e21eb667be537c4987bda965dcb61b9c
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Apr 7 00:16:57 2020 +0000

    Daily bump.

commit 2b9d5e0e59dfe5beb71e42d312650ec0cae35f3c
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Apr 6 00:16:49 2020 +0000

    Daily bump.

commit 15abbf3f217f516729d03863e6673bb0b74f6639
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Apr 5 00:16:52 2020 +0000

    Daily bump.

commit e42d142f421c132ceeee3aca3a5b3f0176bd363d
Author: Jason Merrill <jason@redhat.com>
Date:   Sat Apr 4 11:45:41 2020 -0400

    c++: Mangling of dependent conversions [PR91377]
    
    We skip over other conversion codes when mangling expressions, we should do
    the same with IMPLICIT_CONV_EXPR.
    
    gcc/cp/ChangeLog
    2020-04-04  Jason Merrill  <jason@redhat.com>
    
            PR c++/91377
            * mangle.c (write_expression): Skip IMPLICIT_CONV_EXPR.

commit c4f6911d39089c5f500977d9fc0e36c72f2018a7
Author: Jason Merrill <jason@redhat.com>
Date:   Thu Apr 2 23:40:46 2020 -0400

    c++: alias template and parameter packs (PR91966).
    
    In this testcase, when we do a pack expansion of count_better_mins<nums>,
    nums appears both in the definition of count_better_mins and as its template
    argument.  The intent is that we get a expansion over pairs of elements of
    the pack, i.e. less<2,2>, less<2,7>, less<7,2>, ....  But if we substitute
    into the definition of count_better_mins when parsing the template, we end
    up with sum<less<nums,nums>...>, which never gives us less<2,7>.  We could
    deal with this by somehow marking up the use of 'nums' as an argument for
    'num', but it's simpler to mark the alias as complex, so we need to
    instantiate it later with all its arguments rather than replace it early
    with its expansion.
    
    gcc/cp/ChangeLog
    2020-04-03  Jason Merrill  <jason@redhat.com>
    
            PR c++/91966
            * pt.c (complex_pack_expansion_r): New.
            (complex_alias_template_p): Use it.

commit fa63b36943448336219d8847278bb888e1ab1c09
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Apr 4 00:16:53 2020 +0000

    Daily bump.

commit b445ceec81ba3f4afad8c3ead1e58f14f1c2e146
Author: Martin Jambor <mjambor@suse.cz>
Date:   Fri Apr 3 22:01:17 2020 +0200

    gcc-8 sra: Cap number of sub-access propagations with a param (PR 93435)
    
    This is non-trivial but rather straightforward backport of
    29f23ed79b60949fc60f6fdbbd931bd58090b241 from master.  See
    https://gcc.gnu.org/pipermail/gcc-patches/2020-March/542390.html for
    more information.
    
    Bootstrapped and tested on gcc-8 branch.
    
    2020-04-03  Martin Jambor  <mjambor@suse.cz>
    
            PR tree-optimization/93435
            * params.def (PARAM_SRA_MAX_PROPAGATIONS): New parameter.
            * tree-sra.c (propagation_budget): New variable.
            (budget_for_propagation_access): New function.
            (propagate_subaccesses_across_link): Use it.
            (propagate_all_subaccesses): Set up and destroy propagation_budget.
            * doc/invoke.texi (sra-max-propagations): New.
    
            testsuite/
            * gcc.dg/tree-ssa/pr93435.c: New test.

commit afae9879c28a2797c49bf2da51415da70cdd2b83
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Fri Apr 3 12:00:07 2020 +0100

    libstdc++: Fix std::to_address for debug iterators (PR 93960)
    
    It should be valid to use std::to_address on a past-the-end iterator,
    but the debug mode iterators do a check for dereferenceable in their
    operator->(). That check is generally useful, so rather than remove it
    this changes std::__to_address to identify a debug mode iterator and
    use base().operator->() to skip the check.
    
    Backport from mainline
    2020-04-03  Jonathan Wakely  <jwakely@redhat.com>
    
            PR libstdc++/93960
            * include/bits/ptr_traits.h (__to_address): Add special case for debug
            iterators, to avoid dereferenceable check.
            * testsuite/20_util/to_address/1_neg.cc: Adjust dg-error line number.
            * testsuite/20_util/to_address/debug.cc: New test.

commit 33c5b217cbc7562238f96a29393f6ca8fb97482a
Author: Martin Liska <mliska@suse.cz>
Date:   Fri Apr 3 12:36:31 2020 +0200

    Backport 55a7380213a5c16120d5c674fb42b38a3d796b57
    
            Backport from mainline
            2020-04-03  Martin Liska  <mliska@suse.cz>
    
            PR ipa/94445
            * ipa-icf-gimple.c (func_checker::compare_gimple_call):
              Compare type attributes for gimple_call_fntypes.

commit 905d96d07e50171d986b11c95d98963632fd630f
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Apr 3 00:16:55 2020 +0000

    Daily bump.

commit f662909010de770ab6c29effb60b83d08abd61ad
Author: Fritz Reese <foreese@gcc.gnu.org>
Date:   Thu Apr 2 14:32:07 2020 -0400

    Indicate backport in changelogs from last commit.

commit f722c80a63cf0283acb7f7008c7a145293275d43
Author: Fritz Reese <foreese@gcc.gnu.org>
Date:   Thu Apr 2 13:50:11 2020 -0400

    Backport form master: Fix fortran/85982 ICE in resolve_component.
    
    2020-04-02  Fritz Reese  <foreese@gcc.gnu.org>
    
            Backport from master.
            2020-04-02  Fritz Reese  <foreese@gcc.gnu.org>
    
            PR fortran/85982
            * fortran/decl.c (match_attr_spec): Lump COMP_STRUCTURE/COMP_MAP into
            attribute checking used by TYPE.
    
    2020-04-02  Fritz Reese  <foreese@gcc.gnu.org>
    
            Backport from master.
            2020-04-02  Fritz Reese  <foreese@gcc.gnu.org>
    
            PR fortran/85982
            * gfortran.dg/dec_structure_28.f90: New test.

commit 26191cec3421a157f4bafa7760cfd1bc4f90f0e5
Author: Mark Eggleston <markeggleston@gcc.gnu.org>
Date:   Thu Apr 2 08:32:05 2020 +0100

    fortran: ICE equivalence with an element of an array PR94030
    
    Deferred size arrays can not be used in equivalance statements.
    
    gcc/fortran/ChangeLog:
    
            Backport from master
            2020-04-02  Mark Eggleston <markeggleston@gcc.gnu.org>
    
            PR fortran/94030
            * resolve.c (resolve_equivalence): Correct formatting
            around the label "identical_types".  Instead of using
            gfc_resolve_array_spec use is_non_constants_shape_array
            to determine whether the array can be used in a in an
            equivalence statement.
    
    gcc/testsuite/ChangeLog:
    
            Backport from master
            2020-04-02  Mark Eggleston <markeggleston@gcc.gnu.org>
    
            PR fortran/94030
            * gfortran.dg/pr94030_1.f90
            * gfortran.dg/pr94030_2.f90

commit bca131fee1666e24549a0218de5b7258780462d3
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Apr 2 00:16:50 2020 +0000

    Daily bump.

commit bfdb0a856a157dadfa127b77ac794d0d175c18c4
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Apr 1 00:17:16 2020 +0000

    Daily bump.

commit 9d9d5382765785afbd114e9b9f253a602871a047
Author: Carl Love <carll@us.ibm.com>
Date:   Tue Mar 31 12:45:34 2020 -0500

    rs6000: vec_rlnm fix to make builtin work according to ABI
    
            Backport from mainline:
              commit e97929e20b2f52e6cfc046c1302324d1b24d95e3
              Author: Carl Love <carll@us.ibm.com>
              Date:   Wed Mar 25 18:33:37 2020 -0500
    
            gcc/ChangeLog
    
            PR target/93819
                * gcc/config/rs6000/altivec.h:
                Fixed swapped arguments for vec_rlnm define.

commit bfb0e282e3dacb7c72f78b9b546b36a6fcc534e8
Author: Carl Love <carll@us.ibm.com>
Date:   Tue Mar 31 11:53:47 2020 -0500

    rs6000 Add command line and builtin compatibility check
    
    2020-03-31  Carl Love  <cel@us.ibm.com>
    
            backport of mainline commit
    
            commit 68dd57808f7c0147acdb5ca72c88ff655afcb0ce
            Author: Carl Love <carll@us.ibm.com>
            Date:   Fri Mar 20 18:15:05 2020 -0500
    
            whith change log typo fixed.
    
            PR target/87583
            * gcc/config/rs6000/rs6000.c (rs6000_option_override_internal):
            Add check for TARGET_FPRND for Power 7 or newer.

commit e9c115a0876d843a3649888bad7d3a5bda568685
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Mar 31 00:17:00 2020 +0000

    Daily bump.

commit 5a450ae4d1cee633d7edcf06451de94ff416027a
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Mar 30 00:16:57 2020 +0000

    Daily bump.

commit 2e50319ad2437e7b3a7691aa1351d522437d5b95
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Fri Dec 20 18:36:48 2019 +0100

    backport: re PR fortran/92775 (Incorrect expression in DW_AT_byte_stride on an array)
    
            Backported from mainline
            2019-12-06  Jakub Jelinek  <jakub@redhat.com>
    
            PR fortran/92775
            * trans.h (struct lang_type, struct lang_decl): Remove span member.
            (GFC_DECL_SPAN, GFC_TYPE_ARRAY_SPAN): Remove macros.
            * trans-array.h (gfc_get_descriptor_offsets_for_info): Add another
            argument.
            * trans-array.c (gfc_get_descriptor_offsets_for_info): Add SPAN_OFF
            argument and initialize *SPAN_OFF to the offset of span field.
            * trans-types.c (gfc_get_array_descr_info): Adjust
            gfc_get_descriptor_offsets_for_info caller.  Compute elem_size
            as base->span instead of TYPE_SIZE_UNIT (etype) constant.

commit 40aa944391dfec4529fb6970b9e78d5805f88fc5
Author: Martin Liska <mliska@suse.cz>
Date:   Sun Mar 29 19:19:09 2020 +0200

    Backport 9297e013293e4d332fc7c40859ea4dd9616e0d88
    
            Backport from mainline
            2019-09-02  Martin Liska  <mliska@suse.cz>
    
            PR gcov-profile/91601
            * gcov.c (path_contains_zero_cycle_arc): Rename to ...
            (path_contains_zero_or_negative_cycle_arc): ... this and handle
            also negative edges.
            (circuit): Handle also negative edges as they can happen
            in some situations.

commit bc23ea9c342cbdf5d364648d836a5f95d8ec596d
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Sun Mar 29 10:04:03 2020 +0100

    Darwin: Fix i686 bootstrap when the assembler supports GOTOFF in data.
    
    When we use an assembler that supports " .long XX@GOTOFF", the current
    combination of configuration parameters and conditional compilation
    (when building an i686-darwin compiler with mdynamic-no-pic) assume that
    it's OK to put jump tables in the .const section.
    
    However, when we encounter a weak function with a jump table, this
    produces relocations that directly access the weak symbol section from
    the .const section - which is deemed illegal by the linker (since that
    would mean that the weak symbol could not be replaced).
    
    Arguably, this is a limitation (maybe even a bug) in the linker - but
    it seems that we'd have to change the ABI to fix it - since it would
    require some annotation (maybe just using a special section for the
    jump tables) to tell the linker that this specific circumstance is OK
    because the direct access to the weak symbol can only occur from that
    symbol itself.
    
    The fix is to force jump tables into the text section for all X86 Darwin
    versions (PIC code already had this change).
    
    We also need to backport 263764 'reorder MACHO and HAVE_GOTOFF_IN_DATA
    tests', since this causes us to emit @GOTOFF relocations which are not
    useable by the Darwin linker.
    
    gcc/ChangeLog:
    
    2020-03-29  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from master.
            2018-08-22  Iain Sandoe  <iain@sandoe.co.uk>
    
            * config/i386/i386.c (ix86_output_addr_diff_elt): Move the MACH-O
            specific test before the one for HAVE_AS_GOTOFF_IN_DATA.
    
            Backport from master.
            2020-03-22  Iain Sandoe  <iain@sandoe.co.uk>
    
            * config/i386/darwin.h (JUMP_TABLES_IN_TEXT_SECTION): Remove
            references to Darwin.
            * config/i386/i386.h (JUMP_TABLES_IN_TEXT_SECTION): Define this
            unconditionally and comment on why.

commit 3641821e2d6ee1064a9bdbfbb5bdb5977dcad97f
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Mar 29 00:16:54 2020 +0000

    Daily bump.

commit 13e62dcdcd436a2a957698e56f5b48fb9594aaea
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Mar 28 00:16:56 2020 +0000

    Daily bump.

commit 4c36b54de7ddbcb580f4b99936af4a0195db9d2f
Author: Nathan Sidwell <nathan@acm.org>
Date:   Fri Mar 27 13:24:27 2020 -0700

    c++: Fix ICE on popping local scope [pr84733]
    
            PR c++/84733
            * name-lookup.c (do_pushdecl): Look through cleanp levels.

commit 5dff17fb0d20807d73c41daa3f897faff13f7bac
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Mar 27 00:17:00 2020 +0000

    Daily bump.

commit c072c70c29b51377905422e41575f01269b32506
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Mar 26 00:17:02 2020 +0000

    Daily bump.

commit 2cc686897cc4d9935d4c8302af67565fa54c0aec
Author: Mark Eggleston <markeggleston@gcc.gnu.org>
Date:   Wed Mar 25 15:10:03 2020 +0000

    fortran: ICE using undeclared symbol in array constructor PR93484
    
    Using undeclared symbol k in an expression in the following
    array constructor results in an ICE:
    
        print *, [real(x(k))]
    
    If the call to the intrinsic is not in a constructor a no IMPLICIT
    type error is reported and the ICE does not occur.
    
    Matching on an expression instead of an initialisation express an
    and not converting a MATCH_ERROR return value into MATCH_NO results
    in the no IMPLICIT error and no ICE.
    
    Note: Steven G. Kargl  <kargl@gcc.gnu.org> is the author of the
    changes except for the test cases.
    
    gcc/fortran/ChangeLog:
    
            Backport from master
            2020-03-25  Mark Eggleston <markeggleston@gcc.gnu.org>
    
            PR fortran/93484
            * match.c (gfc_match_type_spec): Replace gfc_match_init_expr with
            gfc_match_expr. Return m if m is MATCH_NO or MATCH_ERROR.
    
    gcc/testsuite
    
            Backport from master
            2020-03-25  Mark Eggleston <markeggleston@gcc.gnu.org>
    
            PR fortran/93484
            * gfortran.dg/pr93484_1.f90: New test.
            * gfortran.dg/pr93484_2.f90: New test.

commit e5acaad2bdd1297ea25067271da909163ec472e7
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Mar 25 00:16:52 2020 +0000

    Daily bump.

commit dc65052d2351aeb1f1968b6ac9f1244de6ed64e1
Author: John David Anglin <danglin@gcc.gnu.org>
Date:   Tue Mar 24 17:09:58 2020 +0000

    Define __BIG_ENDIAN__
    
            2020-03-24  John David Anglin  <danglin@gcc.gnu.org>
    
            PR lto/94249
            * config/pa/pa.h (TARGET_CPU_CPP_BUILTINS): Define __BIG_ENDIAN__.

commit 0349bc70454e4de18d1cdf5eea0917646fdf79ae
Author: Tamar Christina <tamar.christina@arm.com>
Date:   Tue Mar 24 15:00:44 2020 +0000

    AArch64: Break apart paradoxical subregs for VSTRUCT writes (PR target/94052)
    
    This works around an ICE in reload where from expand we get the following RTL
    generated for VSTRUCT mode writes:
    
    (insn 446 354 445 2 (set (reg:CI 383)
     (subreg:CI (reg:V4SI 291) 0)) "small.i":146:22 3408 {*aarch64_movci}
     (nil))
    
    This sequence is trying to say two things:
    
    1) liveliness: It's trying to say that eventually the whole CI reg will be
                   written to. It does this by generating the paradoxical subreg.
    2) write data: It's trying to in the same instruction also write the V4SI mode
                   component at offset 0 in the CI reg.
    
    This patch fixes it by in the backend when we see such a paradoxical
    construction breaking it apart and issuing a clobber to correct the liveliness
    information and then emitting a normal subreg write for the component that the
    paradoxical subreg was trying to write to.
    
    Concretely we generate this:
    
    (insn 42 41 43 (clobber (reg/v:CI 122 [ diD.5226 ])) "small.i":121:23 -1
         (nil))
    
    (insn 43 42 44 (set (subreg:V4SI (reg/v:CI 122 [ diD.5226 ]) 0)
            (reg:V4SI 136)) "small.i":121:23 -1
         (nil))
    
    gcc/ChangeLog:
    
            PR target/94052
            * config/aarch64/aarch64-simd.md (mov<mode>): Remove paradoxical
            subregs of VSTRUCT modes.
    
    gcc/testsuite/ChangeLog:
    
            * g++.target/aarch64/aarch64.exp: New file.
            * g++.target/aarch64/pr94052.C: New test.

commit 61ec6247a91954f6ed57e5c7fecde894acfce544
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Mar 24 00:17:01 2020 +0000

    Daily bump.

commit 3c1be1b68cbbc7324ab6ac0c6c689dbf35600293
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Mar 23 00:16:55 2020 +0000

    Daily bump.

commit 27aaa6a6ebd73cc6e1884bb6f304866bf5fc726a
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Mar 22 12:51:42 2020 +0000

    Daily bump.

commit 7bbdeb3737beb5e4bd3f00aa2f09c9bb678ca761
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Mar 21 00:16:56 2020 +0000

    Daily bump.

commit 2cfe18b8376faaabec23490201d846c98045a386
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Mar 20 00:17:00 2020 +0000

    Daily bump.

commit c8f84830a1bd275a62e226584b8ede40f0ce6760
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Thu Mar 19 15:33:02 2020 +0000

    doc: Note that some warnings depend on optimizations (PR 92757)
    
    Backport from mainline
    2020-01-13  Jonathan Wakely  <jwakely@redhat.com>
    
            PR driver/92757
            * doc/invoke.texi (Warning Options): Add caveat about some warnings
            depending on optimization settings.

commit 4d3efe374195c800abe97ad6574e07e2fc474c60
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Mar 19 00:16:57 2020 +0000

    Daily bump.

commit 0636fd84c3515fd16e712871e12e1a987d000e8d
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Mar 18 00:16:53 2020 +0000

    Daily bump.

commit b153804994b7234319acd6b2f32d72b26eb38848
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Mar 17 00:16:49 2020 +0000

    Daily bump.

commit 52955f5d4958b3fb33a4d76815a41a86f2e3ace0
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Mar 16 00:16:53 2020 +0000

    Daily bump.

commit eee8f2161e072c1b9da4f334f882c385a27baa1f
Author: Jason Merrill <jason@redhat.com>
Date:   Sat Mar 14 17:10:39 2020 -0400

    c++: Find parameter pack in typedef in lambda [92909].
    
    find_parameter_packs_r doesn't look through typedefs, which is normally
    correct, but that means we need to handle their declarations specially.
    
    gcc/cp/ChangeLog
    2020-03-14  Jason Merrill  <jason@redhat.com>
    
            PR c++/92909
            * pt.c (find_parameter_packs_r): [DECL_EXPR]: Walk
            DECL_ORIGINAL_TYPE of a typedef.

commit fed9ac72ee6c1b36d20a9550803835daaac174db
Author: Jason Merrill <jason@redhat.com>
Date:   Sat Mar 14 17:10:39 2020 -0400

    c++: Fix ICE-after-error on partial spec [92068]
    
    Here the template arguments for the partial specialization are valid
    arguments for the template, but not for a partial specialization, because
    'd' can never be deduced to anything other than an empty pack.
    
    gcc/cp/ChangeLog
    2020-03-14  Jason Merrill  <jason@redhat.com>
    
            PR c++/92068
            * pt.c (process_partial_specialization): Error rather than crash on
            extra pack expansion.

commit 23690790dd739f1cdd33a8249304b8f17e296c38
Author: Jason Merrill <jason@redhat.com>
Date:   Sat Mar 14 17:10:39 2020 -0400

    c++: Fix CTAD with multiple-arg ctor template [93248].
    
    When cp_unevaluated_operand is set, tsubst_decl thinks that if it sees a
    PARM_DECL that isn't already in local_specializations, we're in a decltype
    in a trailing return type or some such, and so we only want a substitution
    for a single PARM_DECL.  In this case, we want the whole chain, so make sure
    cp_unevaluated_operand is cleared.
    
    gcc/cp/ChangeLog
    2020-03-14  Jason Merrill  <jason@redhat.com>
    
            PR c++/93248
            * pt.c (build_deduction_guide): Clear cp_unevaluated_operand for
            substituting DECL_ARGUMENTS.

commit 88eae4fb59093df2311c24f44240eacc29279994
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Mar 15 00:16:51 2020 +0000

    Daily bump.

commit 91167c5739a5615e526a9673ccc413d5eca52a24
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Mar 14 00:17:04 2020 +0000

    Daily bump.

commit d72abee890682af7563541d4b174704db627b2a0
Author: Eric Botcazou <ebotcazou@gcc.gnu.org>
Date:   Fri Mar 13 18:04:41 2020 +0100

    Fix wrong year in ChangeLog.

commit 8c55e44368d639849b28484f2c7842f4265b33c8
Author: Richard Biener <rguenther@suse.de>
Date:   Fri Mar 13 13:56:26 2020 +0100

    tree-optimization/94163 constrain alignment set by PRE
    
    This avoids HWI -> unsigned truncation to end up with zero alignment
    which set_ptr_info_alignment ICEs on.
    
    2020-03-13  Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/94163
            * tree-ssa-pre.c (create_expression_by_pieces): Check
            whether alignment would be zero.

commit 92902501c2ad030d56fd3347defd00e79187c51f
Author: Eric Botcazou <ebotcazou@gcc.gnu.org>
Date:   Fri Mar 13 09:58:44 2020 +0100

    Fix incorrect filling of delay slots in branchy code at -O2
    
    The issue is that relax_delay_slots can streamline the CFG in some cases,
    in particular remove BARRIERs, but removing BARRIERs changes the way the
    instructions are associated with (basic) blocks by the liveness analysis
    code in resource.c (find_basic_block) and thus can cause entries in the
    cache maintained by resource.c to become outdated, thus producing wrong
    answers downstream.
    
    The fix is to invalidate the cache entries affected by the removal of
    BARRIERs in relax_delay_slots, i.e. for the instructions down to the
    next BARRIER.
    
            PR rtl-optimization/94119
            * resource.h (clear_hashed_info_until_next_barrier): Declare.
            * resource.c (clear_hashed_info_until_next_barrier): New function.
            * reorg.c (add_to_delay_list): Fix formatting.
            (relax_delay_slots): Call clear_hashed_info_until_next_barrier on
            the next instruction after removing a BARRIER.

commit 6215083b9cdf97bb2886383ee309d1c9ce23a085
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Mar 13 00:16:49 2020 +0000

    Daily bump.

commit 3d46f4875c6c50e8095294b6b700d6678a7e2f1e
Author: Richard Earnshaw <rearnsha@arm.com>
Date:   Fri Mar 6 10:04:51 2020 +0000

    arm: correct constraints on movsi_compare0 [PR91913]
    
    The peephole that detects a mov of one register to another followed by
    a comparison of the original register against zero is only used in Arm
    state; but the instruction that matches this is generic to all 32-bit
    compilation states.  That instruction lacks support for SP which is
    permitted in Arm state, but has restrictions in Thumb2 code.
    
    This patch fixes the problem by allowing SP when in ARM state for all
    registers; in Thumb state it allows SP only as a source when the
    register really is copied to another target.
    
    gcc/ChangeLog:
            PR target/91913
            Backport from master
            * config/arm/arm.md (movsi_compare0): Allow SP as a source register
            in Thumb state and also as a destination in Arm state.  Add T16
            variants.
    
    gcc/testsuite/ChangeLog:
            2020-02-10  Jakub Jelinek  <jakub@redhat.com>
    
            PR target/91913
            Backport from master
            * gfortran.dg/pr91913.f90: New test.

commit caba313a9a5bfd308f02afe3bdcbb9c267a875fa
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Mar 12 00:16:48 2020 +0000

    Daily bump.

commit e6f7fb1872800656cdcf696fc4dc3e07547bd9fd
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Mar 11 00:16:49 2020 +0000

    Daily bump.

commit 58ee464cbe58ad0c6006cfeddfd6e2ba36280918
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Mar 10 00:16:51 2020 +0000

    Daily bump.

commit b4b9f03c3cc4d610681d6ded9fc91f11e75a7e20
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Mar 9 00:17:15 2020 +0000

    Daily bump.

commit 932faa2ee1bf615c20e32cd8b703cc4490065f47
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Mar 7 00:17:29 2020 +0000

    Daily bump.

commit ce1281ffc193af8ef7c599bc84a91c320a9b18ed
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Mar 6 00:17:35 2020 +0000

    Daily bump.

commit 7191ace5b8e96c6ed63ccdda25de978876c73ab1
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Mar 5 00:17:29 2020 +0000

    Daily bump.

commit a9e9ff7b8a4d10ccf54dd4a641dd55c1b1645e17
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Feb 27 10:45:30 2020 +0100

    gimplify: Don't optimize register const vars to static [PR93949]
    
    The following testcase is rejected, while it was accepted in 3.4 and earlier
    (before tree-ssa merge).
    The problem is that we decide to promote the const variable to TREE_STATIC,
    but TREE_STATIC DECL_REGISTER VAR_DECLs may only be the global register vars
    and so assemble_variable/make_decl_rtl diagnoses it.
    
    Either we do what the following patch does, where we could consider
    register as a hint the user doesn't want such optimization, because if
    something is forced static, it is not "register" anymore and register static
    is not valid in C either, or we could clear DECL_REGISTER instead, but would
    still need to punt at least on DECL_HARD_REGISTER cases.
    
    2020-02-27  Jakub Jelinek  <jakub@redhat.com>
    
            PR c/93949
            * gimplify.c (gimplify_init_constructor): Don't promote readonly
            DECL_REGISTER variables to TREE_STATIC.
    
            * gcc.c-torture/compile/pr93949.c: New test.

commit 6352c50d06a8ca0157293ecb0ef1f8a6dc19148a
Author: Tobias Burnus <tobias@codesourcery.com>
Date:   Wed Mar 4 13:29:25 2020 +0100

    [Fortran] Disable front-end optimization for OpenACC atomic (PR93462)
    
            Backported from mainline
            2020-01-31  Tobias Burnus  <tobias@codesourcery.com>
    
            PR fortran/93462
            * frontend-passes.c (gfc_code_walker): For EXEC_OACC_ATOMIC, set
            in_omp_atomic to true prevent front-end optimization.
    
            PR fortran/93462
            * gfortran.dg/goacc/atomic-1.f90: New.

commit 38296a44a0eae7c613647217858746e89c02438c
Author: H.J. Lu <hjl.tools@gmail.com>
Date:   Mon Mar 2 03:08:57 2020 -0800

    lto: Also copy .note.gnu.property section
    
    When generating the separate file with LTO debug sections, we should
    also copy .note.gnu.property section.
    
            PR lto/93966
            * simple-object.c (handle_lto_debug_sections): Also copy
            .note.gnu.property section.
    
    (cherry picked from commit 577350603a657590c4b54a4a966cb49497e2514c)

commit f4e748747a6536dc49586c8202284bc2b7bf2c6c
Author: H.J. Lu <hjl.tools@gmail.com>
Date:   Mon Feb 10 07:58:45 2020 -0800

    i386: Properly pop restore token in signal frame
    
    Linux CET kernel places a restore token on shadow stack for signal
    handler to enhance security.  The restore token is 8 byte and aligned
    to 8 bytes.  It is usually transparent to user programs since kernel
    will pop the restore token when signal handler returns.  But when an
    exception is thrown from a signal handler, now we need to pop the
    restore token from shadow stack.  For x86-64, we just need to treat
    the signal frame as normal frame.  For i386, we need to search for
    the restore token to check if the original shadow stack is 8 byte
    aligned.  If the original shadow stack is 8 byte aligned, we just
    need to pop 2 slots, one restore token, from shadow stack.  Otherwise,
    we need to pop 3 slots, one restore token + 4 byte padding, from
    shadow stack.
    
    This patch also includes 2 tests, one has a restore token with 4 byte
    padding and one without.
    
    Tested on Linux/x86-64 CET machine with and without -m32.
    
    libgcc/
    
            Backport from mainline
            PR libgcc/85334
            * config/i386/shadow-stack-unwind.h (_Unwind_Frames_Increment):
            New.
    
    (cherry picked from commit bf6465d0461234ccd45ae34d5e2375a0bee0081d)

commit b8fc27379c134e2795717f26cc259b8e2028e96b
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Feb 27 09:38:12 2020 +0100

    maintainer-scripts: Speed up git clone in gcc_release
    
    When doing the 8.4-rc1, I've noticed (probably also because of the dying
    disk on sourceware) that git clone is extremely slow, and furthermore when
    all of us have some local snapshots, it is a waste of resources to download
    everything again.  Especially for the -f runs when we'll need to wait until
    git tag -s asks us for a gpg password interactively.
    
    The following patch adds an option through which one can point the script
    at a local gcc .git directory from which it can --dissociate --reference ...
    during cloning to speed it up.
    
    2020-02-27  Jakub Jelinek  <jakub@redhat.com>
    
            * gcc_release: Add support for -b local-git-repo argument.

commit ae88ae18fa1a120a9757432eaa296f3dd42204fd
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Wed Mar 4 10:03:26 2020 +0100

    Bump BASE-VER to 8.4.1
    
    2020-03-04  Jakub Jelinek  <jakub@redhat.com>
    
            * BASE-VER: Set to 8.4.1.

commit 8cd3bffead2ed1d1998c190865694f920fbc93ab
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Wed Mar 4 08:30:30 2020 +0000

    Update ChangeLog and version files for release

commit cf3497d37bb740c38d462bced570d877ba44410d
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Mar 4 00:17:29 2020 +0000

    Daily bump.

commit ab2818a64ebebe443cab6300d14dd46687bdd754
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Mar 3 00:17:34 2020 +0000

    Daily bump.

commit 0afd41f8e6530b13421679801cf73cb6bef55553
Author: Martin Liska <mliska@suse.cz>
Date:   Mon Mar 2 10:34:35 2020 +0100

    Backport 08bf7bde9f2987b1c623d272cc71fc14a1622442
    
            Backport from mainline
            2020-02-28  Martin Liska  <mliska@suse.cz>
    
            PR other/93965
            * configure.ac: Improve detection of ld_date by requiring
            either two dashes or none.
            * configure: Regenerate.

commit 901f462bd7518f37a33d06c568f95237f09a3664
Author: Peter Bergner <bergner@linux.ibm.com>
Date:   Mon Mar 2 09:47:44 2020 +0100

    Readd ChangeLog entries for
    
    r8-10096-gc68a93aaf5ce1e6f0229fd1da91bb77a58859487^..r8-10098-gcb7565c841d6058fc2c696902fe7e85dd526111f
    
    plus add entries for their reversion.

commit 1aa8f8ef587cbf1ec263eabb5b742246eed59231
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Mar 2 00:17:28 2020 +0000

    Daily bump.

commit 1c2a976edb44e5720489ddf195d9e1f842911008
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Mar 1 00:17:35 2020 +0000

    Daily bump.

commit cb7565c841d6058fc2c696902fe7e85dd526111f
Author: Peter Bergner <bergner@linux.ibm.com>
Date:   Sat Feb 29 16:38:12 2020 -0600

    Revert "Fix bad code of vector extract of PC-relative address with variable element #."
    
    This reverts commit 7f85c982a20c54397cf8b3a1b172f65de89c4c1d.
    See PR93974.

commit 14eab35ebefe92a3b4592a3c035abc1294b9bd4d
Author: Peter Bergner <bergner@linux.ibm.com>
Date:   Sat Feb 29 16:38:01 2020 -0600

    Revert "Adjust how variable vector extraction is done."
    
    This reverts commit e88c006ab2b919913fcdb5a5d9db147f372cd156.
    See PR93974.

commit c68a93aaf5ce1e6f0229fd1da91bb77a58859487
Author: Peter Bergner <bergner@linux.ibm.com>
Date:   Sat Feb 29 16:37:22 2020 -0600

    Revert "rs6000: Fix infinite loop building ghostscript and icu [PR93658]"
    
    This reverts commit 53efbfe030a5fda41e5e7856d76ea827dd09f49c.
    See PR93974.

commit 786712503de0bb851b62eca1e19ac1e25c5c386c
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Feb 29 00:17:32 2020 +0000

    Daily bump.

commit 5e7568f5a647738c6787667552ce1d5bcee0c108
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Feb 28 00:18:04 2020 +0000

    Daily bump.

commit 39338122adb31c9fe3ff3c95386f3a492615a242
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Feb 27 00:17:36 2020 +0000

    Daily bump.

commit f551b0889f56d2a89529e8cfce87f763f1a0bee9
Author: Carl Love <carll@us.ibm.com>
Date:   Wed Feb 26 18:12:17 2020 -0600

    PR target/91276 - Doc typos in __builtin_crypto_vpmsum*
    
    gcc/ChangeLog:
    
    2020-02-26  Carl Love  <cel@us.ibm.com>
    
            PR target/91276
            * doc/extend.texi (PowerPC AltiVec Built-in Functions): The
            builtin-function name __builtin_crypto_vpmsumb is only for the
            vector unsigned short arguments.  It is also listed as the name of
            the built-in for arguments vector unsigned short,
            vector unsigned int and vector unsigned long long built-ins.  The
            name of the builtins for these arguments should be:
            __builtin_crypto_vpmsumh, __builtin_crypto_vpmsumw and
            __builtin_crypto_vpmsumd respectively.

commit f80c40f93f9e8781b14f1a8301467f117fd24051
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Wed Feb 26 16:09:52 2020 +0000

    libstdc++: Fix undefined behaviour in random dist serialization (PR93205)
    
    The deserialization functions for random number distributions fail to
    check the stream state before using the extracted values. In some cases
    this leads to using indeterminate values to resize a vector, and then
    filling that vector with indeterminate values.
    
    No values that affect control flow should be used without checking that a
    good value was read from the stream.
    
    Additionally, where reasonable to do so, defer modifying any state in
    the distribution until all values have been successfully read, to avoid
    modifying some of the distribution's parameters and leaving others
    unchanged.
    
    Backport from mainline
    2020-01-09  Jonathan Wakely  <jwakely@redhat.com>
    
            PR libstdc++/93205
            * include/bits/random.h (operator>>): Check stream operation succeeds.
            * include/bits/random.tcc: (operator>>): Likewise.
            (__extract_params): New function to fill a vector from a stream.
            * testsuite/26_numerics/random/pr60037-neg.cc: Adjust dg-error line.

commit a13dd21c3f4fe405980b469c544a00c4356d7006
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Wed Feb 26 15:46:27 2020 +0000

    libstdc++: Fix description of std::ios::trunc (PR 92886)
    
    Backport from mainline
    2019-12-10  Jonathan Wakely  <jwakely@redhat.com>
    
            PR libstdc++/92886
            * include/bits/ios_base.h (std::ios_base::trunc): Fix comment.

commit 655434f5ae93a4222a48c39c37a3a6fe0bdfc071
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Wed Feb 26 15:32:34 2020 +0000

    libstdc++: Replace glibc-specific check for clock_gettime (PR 93325)
    
    It's wrong to assume that clock_gettime is unavailable on any *-*-linux*
    target that doesn't have glibc 2.17 or later. Use a generic test instead
    of using __GLIBC_PREREQ. Only do that test when is_hosted=yes so that we
    don't get an error for cross targets without a working linker.
    
    This ensures that C library's clock_gettime will be used on non-glibc
    targets, instead of an incorrect syscall to SYS_clock_gettime.
    
    Backport from mainline
    2020-01-28  Jonathan Wakely  <jwakely@redhat.com>
    
            PR libstdc++/93325
            * acinclude.m4 (GLIBCXX_ENABLE_LIBSTDCXX_TIME): Use AC_SEARCH_LIBS for
            clock_gettime instead of explicit glibc version check.
            * configure: Regenerate.

commit e47c9cd77f5e60780f054aacb096315b1fcca8bb
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Wed Feb 26 15:04:53 2020 +0000

    libstdc++: Fix regressions in unique_ptr::swap (PR 93562)
    
    The requirements for this function are only that the deleter is
    swappable, but we incorrectly require that the element type is complete
    and that the deleter can be swapped using std::swap (which requires it
    to be move cosntructible and move assignable).
    
    The fix is to add __uniq_ptr_impl::swap which swaps the pointer and
    deleter individually, instead of using the generic std::swap on the
    tuple containing them.
    
            PR libstdc++/93562
            * include/bits/unique_ptr.h (__uniq_ptr_impl::swap): Define.
            (unique_ptr::swap, unique_ptr<T[], D>::swap): Call it.
            * testsuite/20_util/unique_ptr/modifiers/93562.cc: New test.

commit 499ea2e31fba0ff6e4492f0a62e3ffb2bdba465e
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Wed Feb 26 14:20:55 2020 +0000

    libstdc++: Fix freestanding build (PR 92376)
    
    Explicitly declare aligned alloc functions for freestanding, because
    <cstdlib> doesn't declare them.
    
    Backport from mainline
    2020-01-17  Jonathan Wakely  <jwakely@redhat.com>
    
            PR libstdc++/92376
            * libsupc++/new_opa.cc [!_GLIBCXX_HOSTED]: Declare allocation
            functions if they were detected by configure.

commit 26b070a3f6e5c7ccee7491fb758dba4c72bd7026
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Wed Feb 26 09:43:59 2020 +0000

    PR libstdc++/78552 only construct std::locale for C locale once
    
    Backport from mainline
    2019-10-09  Jonathan Wakely  <jwakely@redhat.com>
    
            PR libstdc++/78552
            * src/c++98/locale_init.cc (locale::classic()): Do not construct a new
            locale object for every call.
            (locale::_S_initialize_once()): Construct C locale here.

commit 761696abfe0a772315449e3d2b57de76756f5953
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Fri Jan 24 11:13:55 2020 +0000

    libstdc++: Simplify makefile rule for largefile-config.h (PR91947)
    
    The previous rule could leave an incomplete file if the build was
    interrupted, which would then not be remade if make was run again.
    
    This makes the rule more robust by writing to a temporary file and only
    moving it into place as the final step. It also simplifies the rule so
    that only the essential macro definitions are written to the file, not
    the explanatory comments and commented out #undef lines.
    
    Also, the macro for enabling LFS on Mac OS X 10.5 is now set
    unconditionally, which is a bug fix from upstream autoconf.
    
    Backport from mainline
    2020-01-23  Jonathan Wakely  <jwakely@redhat.com>
    
            PR libstdc++/91947
            * include/Makefile.am (${host_builddir}/largefile-config.h): Simplify
            rule.
            * include/Makefile.in: Regenerate.

commit 56b6c2ba3a45c768a33f726b130a56fc19cca650
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Thu Jan 9 13:38:43 2020 +0000

    Build filesystem library with large file support
    
    Enable AC_SYS_LARGEFILE to set the macros needed for large file APIs to
    be used by default. We do not want to define those macros in the
    public headers that users include. The values of the macros are copied
    to a separate file that is only included by the filesystem sources
    during the build, and then the macros in <bits/c++config.h> are renamed
    so that they don't have any effect in user code including our headers.
    
    Also use larger type for result of filesystem::file_size to avoid
    truncation of large values on 32-bit systems (PR 91947).
    
    Backport from mainlne
    2019-10-04  Jonathan Wakely  <jwakely@redhat.com>
    
            PR libstdc++/81091
            PR libstdc++/91947
            * configure.ac: Use AC_SYS_LARGEFILE to enable 64-bit file APIs.
            * config.h.in: Regenerate:
            * configure: Regenerate:
            * include/Makefile.am (${host_builddir}/largefile-config.h): New
            target to generate config header for filesystem library.
            (${host_builddir}/c++config.h): Rename macros for large file support.
            * include/Makefile.in: Regenerate.
            * src/c++17/fs_dir.cc: Include new config header.
            * src/c++17/fs_ops.cc: Likewise.
            (filesystem::file_size): Use uintmax_t for size.
            * src/filesystem/dir.cc: Include new config header.
            * src/filesystem/ops.cc: Likewise.
            (experimental::filesystem::file_size): Use uintmax_t for size.

commit 8edd406bd7515833905d6bba8fb9195af392008c
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Wed Feb 26 09:33:48 2020 +0100

    store-merging: Fix coalesce_immediate_stores [PR93820]
    
    The following testcase is miscompiled in 8+.
    The problem is that check_no_overlap has a special case for INTEGER_CST
    marked stores (i.e. stores of constants), if both all currenly merged stores
    and the one under consideration for merging with them are marked that way,
    it anticipates that other INTEGER_CST marked stores that overlap with those
    and precede those (have smaller info->order) could be merged with those and
    doesn't punt for them.
    In PR86844 and PR87859 fixes I've then added quite large code that is
    performed after check_no_overlap and tries to find out if we need and can
    merge further INTEGER_CST marked stores, or need to punt.
    Unfortunately, that code is there only in the overlapping case code and
    the testcase below shows that we really need it even in the adjacent store
    case.  After sort_by_bitpos we have:
    bitpos  width   order   rhs_code
    96      32      3       INTEGER_CST
    128     32      1       INTEGER_CST
    128     128     2       INTEGER_CST
    192     32      0       MEM_REF
    Because of the missing PR86844/PR87859-ish code in the adjacent store
    case, we merge the adjacent (memory wise) stores 96/32/3 and 128/32/1,
    and then we consider the 128-bit store which is in program-order in between
    them, but in this case we punt, because the merging would extend the
    merged store region from bitpos 96 and 64-bits to bitpos 96 and 160-bits
    and that has an overlap with an incompatible store (the MEM_REF one).
    The problem is that we can't really punt this way, because the 128-bit
    store is in between those two we've merged already, so either we manage
    to merge even that one together with the others, or would need to avoid
    already merging the 96/32/3 and 128/32/1 stores together.
    Now, rather than copying around the PR86844/PR87859 code to the other spot,
    we can actually just use the overlapping code, merge_overlapping is really
    a superset of merge_into, so that is what the patch does.  If doing
    adjacent store merge for rhs_code other than INTEGER_CST, I believe the
    current code is already fine, check_no_overlap in that case doesn't make
    the exception and will punt if there is some earlier (smaller order)
    non-mergeable overlapping store.  There is just one case that could be
    problematic, if the merged_store has BIT_INSERT_EXPRs in them and the
    new store is a constant store (INTEGER_CST rhs_code), then check_no_overlap
    would do the exception and still would allow the special case.  But we
    really shouldn't have the special case in that case, so this patch also
    changes check_no_overlap to just have a bool whether we should have the
    special case or not.
    
    Note, as I said in the PR, for GCC11 we could consider performing some kind
    of cheap DSE during the store merging (perhaps guarded with flag_tree_dse).
    And another thing to consider is only consider as problematic non-mergeable
    stores that not only have order smaller than last_order as currently, but
    also have order larger than first_order, as in this testcase if we actually
    ignored (not merged with anything at all) the 192/32/0 store, because it is
    not in between the other stores we'd merge, it would be fine to merge the
    other 3 stores, though of course the testcase can be easily adjusted by
    putting the 192/32 store after the 128/32 store and then this patch would be
    still needed.  Though, I think I'd need more time thinking this over.
    
    2020-02-26  Jakub Jelinek  <jakub@redhat.com>
    
            PR tree-optimization/93820
            * gimple-ssa-store-merging.c (check_no_overlap): Change RHS_CODE
            argument to ALL_INTEGER_CST_P boolean.
            (imm_store_chain_info::try_coalesce_bswap): Adjust caller.
            (imm_store_chain_info::coalesce_immediate_stores): Likewise.  Handle
            adjacent INTEGER_CST store into merged_store->only_constants like
            overlapping one.
    
            * gcc.dg/pr93820.c: New test.

commit f4335f978249a2991620f38e118adf790e677968
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Wed Feb 26 09:02:05 2020 +0100

    c++: Fix rejects-valid bug in cxx_eval_outermost_constant_expr [PR93905]
    
    The following testcase is rejected in 8.3, but was accepted in 8.2 and
    is in 9.x.  This started with my PR87934
            * constexpr.c (cxx_eval_constant_expression) <case CONSTRUCTOR>: Do
            re-process TREE_CONSTANT CONSTRUCTORs if they aren't reduced constant
            expressions.
    backport, where the NSDMI CONSTRUCTOR that contains CONST_DECLs is now
    constexpr evaluated so that it doesn't contain them.  The difference from
    9.x is that 9.x doesn't call get_target_expr if we got a CONSTRUCTOR for a
    class type for something that has been originally a CONSTRUCTOR too.
    
    This patch cherry-picks just that hunk of the r9-3835 change.
    
    2020-02-26  Jakub Jelinek  <jakub@redhat.com>
    
            PR c++/93905
            Backported from mainline
            2018-11-04  Jason Merrill  <jason@redhat.com>
    
            * constexpr.c (cxx_eval_outermost_constant_expr): Don't wrap a
            CONSTRUCTOR if one was passed in.
    
            * g++.dg/cpp0x/pr93905.C: New test.

commit f52ec6bc163af837cd13e234b7c2eab6bc456e12
Author: Marek Polacek <polacek@redhat.com>
Date:   Wed Feb 26 00:33:52 2020 -0500

    PR c++/90998 - ICE with copy elision in init by ctor and -Wconversion.
    
    After r269667 which introduced joust_maybe_elide_copy, in C++17 we can elide
    a constructor if it uses a conversion function that returns a prvalue, and
    use the conversion function in its stead.
    
    This eliding means that if we have a candidate that previously didn't have
    ->second_conv, it can have it after the elision.  This confused the
    -Wconversion warning because it was assuming that if cand1->second_conv is
    non-null, so is cand2->second_conv.  Here cand1->second_conv was non-null
    but cand2->second_conv remained null, so it crashed in compare_ics.
    
    I checked with clang that both compilers call A::operator B() in C++17 and
    B::B(A const &) otherwise.
    
    gcc/cp/ChangeLog
    2020-02-26  Marek Polacek  <polacek@redhat.com>
    
            PR c++/90998 - ICE with copy elision in init by ctor and -Wconversion.
            * call.c (joust): Don't attempt to warn if ->second_conv is null.
    
    gcc/testsuite/ChangeLog
    2020-02-26  Marek Polacek  <polacek@redhat.com>
    
            PR c++/90998 - ICE with copy elision in init by ctor and -Wconversion.
            * g++.dg/cpp0x/overload-conv-4.C: New test.

commit 32988aac5be4fa472823e21d2d0eb877faca5667
Author: Jason Merrill <jason@redhat.com>
Date:   Wed Feb 26 00:33:52 2020 -0500

    PR c++/86521 - C++17 copy elision in initialization by constructor.
    
    This is an overlooked case in C++17 mandatory copy elision: We want overload
    resolution to reflect that initializing an object from a prvalue does not
    involve a copy or move constructor even when [over.match.ctor] says that
    only constructors are candidates.  Here I implement that by looking through
    the copy/move constructor in joust.
    
    gcc/cp/ChangeLog
    2020-02-26  Jason Merrill  <jason@redhat.com>
    
            PR c++/86521 - C++17 copy elision in initialization by constructor.
            * call.c (joust_maybe_elide_copy): New.
            (joust): Call it.

commit c93117eea148326a718ae1e413bc85f4fa257d8f
Author: Jason Merrill <jason@redhat.com>
Date:   Wed Feb 26 00:33:52 2020 -0500

    c++: Allow template rvalue-ref conv to bind to lvalue ref.
    
    When I implemented the [over.match.ref] rule that a reference conversion
    function needs to match l/rvalue of the target reference type it changed our
    handling of this testcase.  It seems to me that our current behavior is what
    the standard says, but it doesn't seem desirable, and all the other
    compilers have our old behavior.  So let's limit the change to non-templates
    until there's some clarification from the committee.
    
    gcc/cp/ChangeLog
    2020-02-26  Jason Merrill  <jason@redhat.com>
    
            PR c++/90546
            * call.c (build_user_type_conversion_1): Allow a template conversion
            returning an rvalue reference to bind directly to an lvalue.

commit f93784da474823ad563a9dfd6fd535a017b4bc9f
Author: Jason Merrill <jason@redhat.com>
Date:   Wed Feb 26 00:33:52 2020 -0500

    PR c++/86521 - wrong overload resolution with ref-qualifiers.
    
    Here we were wrongly treating binding a const lvalue ref to an xvalue as
    direct binding, which is wrong under [dcl.init.ref] and [over.match.ref].
    
    gcc/cp/ChangeLog
    2020-02-26  Jason Merrill  <jason@redhat.com>
    
            PR c++/86521 - wrong overload resolution with ref-qualifiers.
            * call.c (build_user_type_conversion_1): Don't use a conversion to a
            reference of the wrong rvalueness for direct binding.

commit 2b6565dd2d07d3f2f706795f800d0cc2ff8f2f68
Author: Jason Merrill <jason@redhat.com>
Date:   Tue Feb 25 13:37:18 2020 -0500

    PR c++/89831 - error with qualified-id in const member function.
    
    Since the fix for 15272 we were remembering the wrong function to use at
    instantiation time, because the type of the SCOPE_REF didn't reflect the
    cv-quals of 'this'.  Conveniently, we can fix this by simplifying the code.
    
    gcc/cp/ChangeLog
    2020-02-25  Jason Merrill  <jason@redhat.com>
    
            PR c++/89831 - error with qualified-id in const member function.
            * semantics.c (finish_non_static_data_member): Use object cv-quals
            in scoped case, too.

commit b9bfe25d3a7f925754df3a557e3b1743d21d0c4d
Author: Jason Merrill <jason@redhat.com>
Date:   Tue Feb 25 13:37:18 2020 -0500

    PR c++/88380 - wrong-code with flexible array and NSDMI.
    
    Here 'skipped' was set to -1 to force an explicit initializer for 'uninit'
    before the initializer for 'initialized', and so we also tried to emit an
    explicit initializer for the flexible array, for which build_zero_init
    returns error_mark_node.  We should ignore flexarrays even when
    skipped < 0.
    
    gcc/cp/ChangeLog
    2020-02-25  Jason Merrill  <jason@redhat.com>
    
            PR c++/88380 - wrong-code with flexible array and NSDMI.
            * typeck2.c (process_init_constructor_record): Skip flexarrays.

commit b6136084ea86ab0d3fac54be83e50817a3db74a9
Author: Jason Merrill <jason@redhat.com>
Date:   Tue Feb 25 13:37:18 2020 -0500

    PR c++/87685 - generic lambda 'this' capture error.
    
    The standard says that in a generic lambda we should speculatively capture
    'this' if we see a call to an overload set that contains a non-static member
    function, but it seems wrong to reject the program if we can't capture,
    since it might not actually be needed.
    
    gcc/cp/ChangeLog
    2020-02-25  Jason Merrill  <jason@redhat.com>
    
            PR c++/87685 - generic lambda 'this' capture error.
            * lambda.c (lambda_expr_this_capture): Change add_capture_p to int.
            (maybe_generic_this_capture): Pass -1.

commit a57528b33be33d4428ac62901d04cf39807d624e
Author: Jason Merrill <jason@redhat.com>
Date:   Tue Feb 25 13:37:18 2020 -0500

    PR c++/87554 - ICE with extern template and reference member.
    
    The removed code ended up setting DECL_INITIAL to the INIT_EXPR returned by
    split_nonconstant_init, which makes no sense.  This code was added back in
    1996, so any rationale is long lost.
    
    gcc/cp/ChangeLog
    2020-02-25  Jason Merrill  <jason@redhat.com>
    
            PR c++/87554 - ICE with extern template and reference member.
            * decl.c (cp_finish_decl): Don't set DECL_INITIAL of external vars.

commit 3d99aab56d7237bb8260653ed07ca8b182fbf975
Author: Alexandre Oliva <aoliva@redhat.com>
Date:   Tue Feb 25 21:29:03 2020 -0500

    c++: tsubst friend tpl ctxt before looking it up for dupes [PR86747]
    
    When a member template is redeclared as a friend, we enter the context
    of the member before looking it up, and then we check that the decls
    are compatible.  However, when the member template references template
    types of the enclosing context, say an enclosing template class, the
    compare fails because the friend decl is already tsubsted, whereas the
    looked up name isn't.
    
    The problem is that the enclosing context is taken from the friend
    declaration before tsubsting it, so we look up in the context of the
    generic template instead of that of the tsubsted one we're
    specializing.  The solution is to tsubst the enclosing context when
    it's a non-namespace scope.
    
    gcc/cp/ChangeLog
    2020-02-25  Alexandre Oliva <aoliva@redhat.com>
    
            PR c++/86747
            * pt.c (tsubst_friend_class): Enter tsubsted class context.
    
    gcc/testsuite/ChangeLog
    2020-02-25  Alexandre Oliva <aoliva@redhat.com>
    
            PR c++/86747
            * g++.dg/pr86747.C: New.

commit 6470e8caa2bd331fb6e21524d6c14662531cfa9b
Author: Jason Merrill <jason@redhat.com>
Date:   Tue Feb 25 21:29:03 2020 -0500

    PR c++/86429 - constexpr variable in lambda.
    
    When we refer to a captured variable from a constant-expression context
    inside a lambda, the closure (like any function parameter) is not constant
    because we aren't in a call, so we don't have an argument.  So the capture
    is non-constant.  But if the captured variable is constant, we might be able
    to use it directly in constexpr evaluation.
    
    gcc/cp/ChangeLog
    2020-02-25  Jason Merrill  <jason@redhat.com>
    
            PR c++/86429 - constexpr variable in lambda.
            PR c++/82643
            PR c++/87327
            * constexpr.c (cxx_eval_constant_expression): In a lambda function,
            try evaluating the captured variable directly.

commit f59aeab723cfcbf2b986ce777a11fd869db0185a
Author: Jason Merrill <jason@redhat.com>
Date:   Tue Feb 25 21:29:03 2020 -0500

    c++: Define TYPE_REF_P.
    
    Various backports depend on it.
    
    gcc/cp/ChangeLog
    2020-02-25  Jason Merrill  <jason@redhat.com>
    
            * cp-tree.h (TYPE_REF_P): New.

commit ac5e28911abdfb8d9bf6bea980223e199bbcf28d
Author: Jason Merrill <jason@redhat.com>
Date:   Tue Feb 25 21:29:03 2020 -0500

    PR c++/87748 - substitution failure error with decltype.
    
    This issue is similar to PR 87480; in both cases we were doing non-dependent
    substitution with processing_template_decl set, leading to member access
    expressions seeming still instantiation-dependent, and therefore decltype
    not being simplified to its actual type.  And as in that PR, the fix is to
    clear processing_template_decl while substituting a default template
    argument.
    
    gcc/cp/ChangeLog
    2020-02-25  Jason Merrill  <jason@redhat.com>
    
            PR c++/87748 - substitution failure error with decltype.
            * pt.c (most_specialized_partial_spec): Clear
            processing_template_decl.

commit 2dcdcda91921b512b978f7223c530352fd61b91b
Author: Jason Merrill <jason@redhat.com>
Date:   Tue Feb 25 21:29:03 2020 -0500

    PR c++/87480 - decltype of member access in default template arg
    
    The issue here is that declval<T>().d is considered instantiation-dependent
    within a template, as the access to 'd' might depend on the particular
    specialization.  But when we're deducing template arguments for a call, we
    know that the call and the arguments are non-dependent, so we can do the
    substitution as though we aren't in a template.  Which strictly speaking we
    aren't, since the default argument is considered a separate definition.
    
    gcc/cp/ChangeLog
    2020-02-25  Jason Merrill  <jason@redhat.com>
    
            PR c++/87480 - decltype of member access in default template arg
            * pt.c (type_unification_real): Accept a dependent result in
            template context.

commit bf2fe5d49627ca757123f4425a029bd92c50fc05
Author: Jason Merrill <jason@redhat.com>
Date:   Tue Feb 25 21:29:03 2020 -0500

    PR c++/88394 - ICE with VLA init-capture.
    
    We mostly use is_normal_capture_proxy to decide whether or not to use
    DECL_CAPTURED_VARIABLE; we could just check whether it's set.  VLA capture
    is still mostly broken, but this fixes this ICE.
    
    gcc/cp/ChangeLog
    2020-02-25  Jason Merrill  <jason@redhat.com>
    
            PR c++/88394 - ICE with VLA init-capture.
            * lambda.c (is_normal_capture_proxy): Check DECL_CAPTURED_VARIABLE.

commit 1c10b9782a040868f6be2ff6d23f13287e40fbad
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Feb 26 00:17:30 2020 +0000

    Daily bump.

commit d2221c1179354ad71c4944ea0cc634803aae98f1
Author: Alexandre Oliva <aoliva@redhat.com>
Date:   Tue Feb 5 06:11:25 2019 +0000

    c++: test partial specializations for type dependence [PR87770]
    
    When instantiating a partial specialization of a template member
    function for a full specialization of a class template, we test
    whether the context of variables local to the partial specialization,
    i.e., the partial specialization itself, is dependent, and this ICEs
    in type_dependent_expression_p, when checking that the function type
    isn't type-dependent because it is not in a type-dependent scope.
    
    We shouldn't have got that far: the previous block in
    type_dependent_expression_p catches cases in which the function itself
    takes template arguments of its own, but it only did so for primary
    templates, not for partial specializations.  This patch fixes that.
    
    gcc/cp/ChangeLog
    2019-02-05  Alexandre Oliva <aoliva@redhat.com>
    
            PR c++/87770
            * pt.c (instantiates_primary_template_p): New.
            (type_dependent_expression_p): Use it.
    
    gcc/testsuite/ChangeLog
    2019-02-05  Alexandre Oliva <aoliva@redhat.com>
    
            PR c++/87770
            * g++.dg/pr87770.C: New.

commit a955c8f0a0aacd9271876ddc5ca8f0ccaca18ac7
Author: Marek Polacek <polacek@redhat.com>
Date:   Fri Dec 20 23:30:04 2019 +0000

    PR c++/92745 - bogus error when initializing array of vectors.
    
    In r268428 I changed reshape_init_r in such a way that when it sees
    a nested { } in a CONSTRUCTOR with missing braces, it just returns
    the initializer:
    +     else if (COMPOUND_LITERAL_P (stripped_init)
    ...
    +         ++d->cur;
    +         gcc_assert (!BRACE_ENCLOSED_INITIALIZER_P (stripped_init));
    +         return init;
    
    But as this test shows, that's incorrect: if TYPE is an array, we need
    to proceed to reshape_init_array_1 which will iterate over the array
    initializers:
     6006   /* Loop until there are no more initializers.  */
     6007   for (index = 0;
     6008        d->cur != d->end && (!sized_array_p || index <= max_index_cst);
     6009        ++index)
     6010     {
    and update d.cur accordingly.  In other words, when reshape_init gets
    
    {{col[0][0], col[1][0], col[2][0], col[3][0]},
     {col[0][1], col[1][1], col[2][1], col[3][1]},
     {col[0][2], col[1][2], col[2][2], col[3][2]},
     {col[0][3], col[1][3], col[2][3], col[3][3]}}
    
    we recurse on the first element:
      {col[0][0], col[1][0], col[2][0], col[3][0]}
    and we can't just move d.cur to point to
      {col[0][1], col[1][1], col[2][1], col[3][1]}
    and return; we need to iterate, so that d.cur ends up being properly
    updated, and after all initializers have been seen, points to d.end.
    Currently we skip the loop, wherefore we hit this:
    
     6502   /* Make sure all the element of the constructor were used. Otherwise,
     6503      issue an error about exceeding initializers.  */
     6504   if (d.cur != d.end)
     6505     {
     6506       if (complain & tf_error)
     6507         error ("too many initializers for %qT", type);
     6508       return error_mark_node;
     6509     }
    
    gcc/cp/ChangeLog
    2020-02-25  Marek Polacek  <polacek@redhat.com>
    
            PR c++/92745 - bogus error when initializing array of vectors.
            * decl.c (reshape_init_r): For a nested compound literal, do
            call reshape_init_{class,array,vector}.
    
    gcc/testsuite/ChangeLog
    2020-02-25  Marek Polacek  <polacek@redhat.com>
                Jakub Jelinek  <jakub@redhat.com>
    
            PR c++/92745
            * g++.dg/cpp0x/initlist118.C: New test.
            * g++.dg/cpp0x/initlist118.C: Add -Wno-psabi -w to dg-options.

commit 7ac251ee4fa84f5a7583c597fa0641278e3855fc
Author: Jason Merrill <jason@redhat.com>
Date:   Tue Feb 25 13:37:18 2020 -0500

    PR c++/89917 - ICE with lambda in variadic mem-init.
    
    A mem-initializer is not a type, and we don't want to turn autos within it
    into packs.
    
    gcc/cp/ChangeLog
    2020-02-25  Jason Merrill  <jason@redhat.com>
    
            PR c++/89917 - ICE with lambda in variadic mem-init.
            * pt.c (make_pack_expansion): Change type_pack_expansion_p to false.

commit d9814ee5972b48eb67a7af171957d1a285453f46
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Feb 25 13:56:47 2020 +0100

    combine: Fix find_split_point handling of constant store into ZERO_EXTRACT [PR93908]
    
    git is miscompiled on s390x-linux with -O2 -march=zEC12 -mtune=z13.
    I've managed to reduce it into the following testcase.  The problem is that
    during combine we see the s->k = -1; bitfield store and change the SET_SRC
    from a pseudo into a constant:
    (set (zero_extract:DI (mem/j:HI (plus:DI (reg/v/f:DI 60 [ s ])
                    (const_int 10 [0xa])) [0 +0 S2 A16])
            (const_int 2 [0x2])
            (const_int 7 [0x7]))
        (const_int -1 [0xffffffffffffffff]))
    This on s390x with the above option isn't recognized as valid instruction,
    so find_split_point decides to handle it as IOR or IOR/AND.
    src is -1, mask is 3 and pos is 7.
    src != mask (this is also incorrect, we want to set all (both) bits in the
    bitfield), so we go for IOR/AND, but instead of trying
    mem = (mem & ~0x180) | ((-1 << 7) & 0x180)
    we actually try
    mem = (mem & ~0x180) | (-1 << 7)
    and that is further simplified into:
    mem = mem | (-1 << 7)
    aka
    mem = mem | 0xff80
    which doesn't set just the 2-bit bitfield, but also many other bitfields
    that shouldn't be touched.
    We really should do:
    mem = mem | 0x180
    instead.
    The problem is that we assume that no bits but those low len (2 here) will
    be set in the SET_SRC, but there is nothing that can prevent that, we just
    should ignore the other bits.
    
    The following patch fixes it by masking src with mask, this way already
    the src == mask test will DTRT, and as the code for or_mask uses
    gen_int_mode, if the most significant bit is set after shifting it left by
    pos, it will be properly sign-extended.
    
    2020-02-25  Jakub Jelinek  <jakub@redhat.com>
    
            PR rtl-optimization/93908
            * combine.c (find_split_point): For store into ZERO_EXTRACT, and src
            with mask.
    
            * gcc.c-torture/execute/pr93908.c: New test.

commit e803bacc36955686a633bfb48d2ee433d503edfa
Author: Eric Botcazou <ebotcazou@gcc.gnu.org>
Date:   Tue Feb 25 12:34:00 2020 +0100

    Fix link failure with debug info in LTO mode
    
    This fixes a regression whereby the program fails to link with debug
    info in LTO mode because of an undefined reference to a symbol coming
    from the object files containing the early debug info.
    
            * dwarf2out.c (dwarf2out_size_function): Run in early-DWARF mode.

commit 74dcd19755676a222365203b2f6b54f10e7921bb
Author: Roman Zhuykov <zhroma@ispras.ru>
Date:   Tue Feb 25 14:32:42 2020 +0300

    doc: backport proper description of --enable-checking behavior
    
    This patch rewords the whole description to fix minor issues:
     - documents 'gimple' and 'types' checks,
     - clarifies what happens when option is used without '=list',
     - fixes inaccurate wrong wording about release snapshots,
     - describes that release checks can only be disabled explicitly.
    
            Backport from master
            2020-02-24  Roman Zhuykov  <zhroma@ispras.ru>
    
            * doc/install.texi (--enable-checking): Properly document current
            behavior.
            (--enable-stage1-checking): Minor clarification about bootstrap.

commit a6378029183005ff05865496975ff706d91853d8
Author: Richard Sandiford <richard.sandiford@arm.com>
Date:   Tue Feb 18 18:06:32 2020 +0000

    vect: Fix offset calculation for -ve strides [PR93767]
    
    This PR is a regression caused by r256644, which added support for alias
    checks involving variable strides.  One of the changes in that commit
    was to split the access size out of the segment length.  The PR shows
    that I hadn't done that correctly for the handling of negative strides
    in vect_compile_time_alias.  The old code was:
    
          const_length_a = (-wi::to_poly_wide (segment_length_a)).force_uhwi ();
          offset_a = (offset_a + vect_get_scalar_dr_size (a)) - const_length_a;
    
    where vect_get_scalar_dr_size (a) was cancelling out the subtraction
    of the access size inherent in "- const_length_a".  Taking the access
    size out of the segment length meant that the addition was no longer
    needed/correct.
    
    2020-02-25  Richard Sandiford  <richard.sandiford@arm.com>
    
    gcc/
            Backport from mainline
            2020-02-19  Richard Sandiford  <richard.sandiford@arm.com>
    
            PR tree-optimization/93767
            * tree-vect-data-refs.c (vect_compile_time_alias): Remove the
            access-size bias from the offset calculations for negative strides.
    
    gcc/testsuite/
            Backport from mainline
            2020-02-19  Richard Sandiford  <richard.sandiford@arm.com>
    
            PR tree-optimization/93767
            * gcc.dg/vect/pr93767.c: New test.

commit 50c7f76eb30041a9b219cd6535c8c09583cc052b
Author: Richard Sandiford <richard.sandiford@arm.com>
Date:   Mon Jan 27 19:37:55 2020 +0000

    predcom: Fix invalid store-store commoning [PR93434]
    
    predcom has the following code to stop one rogue load from
    interfering with other store-load opportunities:
    
          /* If A is read and B write or vice versa and there is unsuitable
             dependence, instead of merging both components into a component
             that will certainly not pass suitable_component_p, just put the
             read into bad component, perhaps at least the write together with
             all the other data refs in it's component will be optimizable.  */
    
    But when store-store commoning was added later, this had the effect
    of ignoring loads that occur between two candidate stores.
    
    There is code further up to handle loads and stores with unknown
    dependences:
    
          /* Don't do store elimination if there is any unknown dependence for
             any store data reference.  */
          if ((DR_IS_WRITE (dra) || DR_IS_WRITE (drb))
              && (DDR_ARE_DEPENDENT (ddr) == chrec_dont_know
                  || DDR_NUM_DIST_VECTS (ddr) == 0))
            eliminate_store_p = false;
    
    But the store-load code above skips loads for *known* dependences
    if (a) the load has already been marked "bad" or (b) the data-ref
    machinery knows the dependence distance, but determine_offsets
    can't handle the combination.
    
    (a) happens to be the problem in the testcase, but a different
    sequence could have given (b) instead.  We have writes to individual
    fields of a structure and reads from the whole structure.  Since
    determine_offsets requires the types to be the same, it returns false
    for each such read/write combination.
    
    This patch records which components have had loads removed and
    prevents store-store commoning for them.  It's a bit too pessimistic,
    since there shouldn't be a problem if a "bad" load dominates all stores
    in a component.  But (a) we can't AFAIK use pcom_stmt_dominates_stmt_p
    here and (b) the handling for that case would probably need to be
    removed again if we handled more exotic cases in future.
    
    2020-02-25  Richard Sandiford  <richard.sandiford@arm.com>
    
    gcc/
            Backport from mainline
            2020-01-28  Richard Sandiford  <richard.sandiford@arm.com>
    
            PR tree-optimization/93434
            * tree-predcom.c (split_data_refs_to_components): Record which
            components have had aliasing loads removed.  Prevent store-store
            commoning for all such components.
    
    gcc/testsuite/
            PR tree-optimization/93434
            * gcc.c-torture/execute/pr93434.c: New test.

commit e4efe90aec0a5f722341c1070680d2ab3a438a7d
Author: Richard Sandiford <richard.sandiford@arm.com>
Date:   Thu Dec 5 14:20:38 2019 +0000

    Check for bitwise identity when encoding VECTOR_CSTs [PR92768]
    
    This PR shows that we weren't checking for bitwise-identical values
    when trying to encode a VECTOR_CST, so -0.0 was treated the same as
    0.0 for -fno-signed-zeros.  The patch adds a new OEP flag to select
    that behaviour.
    
    2020-02-25  Richard Sandiford  <richard.sandiford@arm.com>
    
    gcc/
            Backport from mainline
            2019-12-05  Richard Sandiford  <richard.sandiford@arm.com>
    
            PR middle-end/92768
            * tree-core.h (OEP_BITWISE): New flag.
            * fold-const.c (operand_compare::operand_equal_p): Handle it.
            * tree-vector-builder.h (tree_vector_builder::equal_p): Pass it.
    
    gcc/testsuite/
            PR middle-end/92768
            * gcc.dg/pr92768.c: New test.

commit 785eda9390473e42f0e0b7199c42032a0432de68
Author: Richard Sandiford <richard.sandiford@arm.com>
Date:   Mon Nov 11 19:43:52 2019 +0000

    Fix SLP downward group access classification [PR92420]
    
    This PR was caused by the SLP handling in get_group_load_store_type
    returning VMAT_CONTIGUOUS rather than VMAT_CONTIGUOUS_REVERSE for
    downward groups.
    
    A more elaborate fix would be to try to combine the reverse permutation
    into SLP_TREE_LOAD_PERMUTATION for loads, but that's really a follow-on
    optimisation and not backport material.  It might also not necessarily
    be a win, if the target supports (say) reversing and odd/even swaps
    as independent permutes but doesn't recognise the combined form.
    
    2020-02-25  Richard Sandiford  <richard.sandiford@arm.com>
    
    gcc/
            Backport from mainline
            2019-11-11  Richard Sandiford  <richard.sandiford@arm.com>
    
            PR tree-optimization/92420
            * tree-vect-stmts.c (get_negative_load_store_type): Move further
            up file.
            (get_group_load_store_type): Use it for reversed SLP accesses.
    
    gcc/testsuite/
            PR tree-optimization/92420
            * gcc.dg/vect/pr92420.c: New test.

commit 7a2f576c3b40eca0a846553af5b1dfb05d84eb71
Author: Richard Sandiford <richard.sandiford@arm.com>
Date:   Fri Aug 9 09:37:55 2019 +0000

    Reject tail calls that read from an escaped RESULT_DECL [PR90313]
    
    In this PR we have two return paths from a function "map".  The common
    code sets <result> to the value returned by one path, while the other
    path does:
    
       <retval> = map (&<retval>, ...);
    
    We treated this call as tail recursion, losing the copy semantics
    on the value returned by the recursive call.
    
    We'd correctly reject the same thing for variables:
    
       local = map (&local, ...);
    
    The problem is that RESULT_DECLs didn't get the same treatment.
    
    2020-02-25  Richard Sandiford  <richard.sandiford@arm.com>
    
    gcc/
            Backport from mainline
            2019-08-09  Richard Sandiford  <richard.sandiford@arm.com>
    
            PR middle-end/90313
            * tree-tailcall.c (find_tail_calls): Reject calls that might
            read from an escaped RESULT_DECL.
    
    gcc/testsuite/
            PR middle-end/90313
            * g++.dg/torture/pr90313.cc: New test.

commit b08c21d93c2ae3057242e2009f4f8ae47c53dc61
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Feb 25 00:17:28 2020 +0000

    Daily bump.

commit 300d219af336436fbb58043db193f54d2a1b4b49
Author: Jason Merrill <jason@redhat.com>
Date:   Mon Feb 24 16:22:45 2020 -0500

    c++: Fix constexpr vs. omitted aggregate init.
    
    Value-initialization is importantly different from {}-initialization for
    this testcase, where the former calls the deleted S constructor and the
    latter initializes S happily.
    
    gcc/cp/ChangeLog
    2020-02-24  Jason Merrill  <jason@redhat.com>
    
            PR c++/90951
            * constexpr.c (cxx_eval_array_reference): {}-initialize missing
            elements instead of value-initializing them.

commit 6e85b76b48ae55377042c859be1f4c2ac49cba26
Author: Jason Merrill <jason@redhat.com>
Date:   Mon Feb 24 16:22:45 2020 -0500

    cgraph: A COMDAT decl always has non-zero address.
    
    We should be able to assume that a template instantiation or other COMDAT
    has non-zero address even if MAKE_DECL_ONE_ONLY for the target sets
    DECL_WEAK and we haven't yet decided to emit a definition in this
    translation unit.
    
    gcc/ChangeLog
    2020-02-24  Jason Merrill  <jason@redhat.com>
    
            PR c++/92003
            * symtab.c (symtab_node::nonzero_address): A DECL_COMDAT decl has
            non-zero address even if weak and not yet defined.

commit 907401f2f910847b4581daf44d02e2cf9bfad220
Author: Jason Merrill <jason@redhat.com>
Date:   Mon Feb 24 16:22:45 2020 -0500

    c++: Fix decltype of empty pack expansion of parm.
    
    In unevaluated context, we only substitute a single PARM_DECL, not the
    entire chain, but the handling of an empty pack expansion was missing that
    check.
    
    gcc/cp/ChangeLog
    2020-02-24  Jason Merrill  <jason@redhat.com>
    
            PR c++/93140
            * pt.c (tsubst_decl) [PARM_DECL]: Check cp_unevaluated_operand in
            handling of TREE_CHAIN for empty pack.

commit 90e1d25b60630d45fe1092abeb8f4d7b6c5e2da2
Author: Jason Merrill <jason@redhat.com>
Date:   Mon Feb 24 11:21:47 2020 -0500

    c++: Preserve location in maybe_constant_value.
    
    If cxx_eval_outermost_constant_expr doesn't change the argument, we really
    shouldn't unshare it when we try to fold it again.
    
    gcc/cp/ChangeLog
    2020-02-24  Jason Merrill  <jason@redhat.com>
    
            PR c++/92852
            * constexpr.c (maybe_constant_value): Don't unshare if the cached
            value is the same as the argument.

commit 53efbfe030a5fda41e5e7856d76ea827dd09f49c
Author: Peter Bergner <bergner@linux.ibm.com>
Date:   Sun Feb 23 22:04:44 2020 -0600

    rs6000: Fix infinite loop building ghostscript and icu [PR93658]
    
    Fix rs6000_legitimate_address_p(), which erroneously marks a valid Altivec
    address as being invalid, which causes LRA's process_address()  to go into
    an infinite loop spilling the same address over and over again.
    Include Mike's earlier commits that fix bugs this patch exposes.
    
            Backport from master
            2020-02-20  Peter Bergner  <bergner@linux.ibm.com>
    
            PR target/93658
            * config/rs6000/rs6000.c (rs6000_legitimate_address_p): Handle VSX
            vector modes.
    
            * gcc.target/powerpc/pr93658.c: New test.
            * gcc.target/powerpc/vsx-vector-6-le.c: Update fragile insn count.

commit e88c006ab2b919913fcdb5a5d9db147f372cd156
Author: Michael Meissner <meissner@gcc.gnu.org>
Date:   Sun Feb 23 21:57:11 2020 -0600

    Adjust how variable vector extraction is done.
    
            Backport from master
            2020-02-03  Michael Meissner  <meissner@linux.ibm.com>
    
            * config/rs6000/rs6000.c (get_vector_offset): New helper function
            to calculate the offset in memory from the start of a vector of a
            particular element.  Add code to keep the element number in
            bounds if the element number is variable.
            (rs6000_adjust_vec_address): Move calculation of offset of the
            vector element to get_vector_offset.
            (rs6000_split_vec_extract_var): Do not do the initial AND of
            element here, move the code to get_vector_offset.
    
    Fix PR 93568 (thinko)
    
            Backport from master
            2020-02-05  Michael Meissner  <meissner@linux.ibm.com>
    
            PR target/93568
            * config/rs6000/rs6000.c (get_vector_offset): Fix Q constraint assert
            to use MEM.

commit 7f85c982a20c54397cf8b3a1b172f65de89c4c1d
Author: Michael Meissner <meissner@gcc.gnu.org>
Date:   Sun Feb 23 18:39:57 2020 -0600

    Fix bad code of vector extract of PC-relative address with variable element #.
    
            Backport from master
            2020-01-06  Michael Meissner  <meissner@linux.ibm.com>
    
            * config/rs6000/vsx.md (vsx_extract_<mode>_var, VSX_D iterator):
            Use 'Q' for doing vector extract from memory.
            (vsx_extract_v4sf_var): Use 'Q' for doing vector extract from
            memory.
            (vsx_extract_<mode>_var, VSX_EXTRACT_I iterator): Use 'Q' for
            doing vector extract from memory.
            (vsx_extract_<mode>_<VS_scalar>mode_var): Use 'Q' for doing vector
            extract from memory.

commit c27f494f14c66251bbf9db3ff8296645eba25c11
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Feb 24 00:17:36 2020 +0000

    Daily bump.

commit f0fdb65c5c86fbe7add94fe34380c95beb8c25cb
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Feb 23 00:17:41 2020 +0000

    Daily bump.

commit 0668053d3ff2520f678b263b830188dccf4af27f
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Feb 22 00:17:29 2020 +0000

    Daily bump.

commit c8b5eee54d5d69113a88555072c04bb1fa5141d2
Author: John David Anglin <danglin@gcc.gnu.org>
Date:   Fri Feb 21 23:37:11 2020 +0000

    Fix handling of floating-point homogeneous aggregates.
    
            2020-02-21  John David Anglin  <danglin@gcc.gnu.org>
    
            * gcc/config/pa/pa.c (pa_function_value): Fix check for word and
            double-word size when handling aggregate return values.
            * gcc/config/pa/som.h (ASM_DECLARE_FUNCTION_NAME): Fix to indicate
            that homogeneous SFmode and DFmode aggregates are passed and returned
            in general registers.

commit 046f873f5238815cd7edf5479a05e319b61d5b88
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Feb 21 00:17:48 2020 +0000

    Daily bump.

commit e4a43b20c564aaca847ae74cc17ca0b48ce6d3ff
Author: Uros Bizjak <ubizjak@gmail.com>
Date:   Thu Feb 20 22:00:45 2020 +0100

    i386: Fix *vec_extractv2sf_1 and *vec_extractv2sf_1 shufps alternative [PR93828]
    
    shufps moves two of the four packed single-precision floating-point values
    from *destination* operand (first operand) into the low quadword of the
    destination operand.  Match source operand to the destination.
    
            PR target/93828
            * config/i386/mmx.md (*vec_extractv2sf_1): Match source operand
            to destination operand for shufps alternative.
            (*vec_extractv2si_1): Ditto.

commit ecd0c303b0553e2be89379e9b7d4f4821ac03020
Author: Bernd Edlinger <bernd.edlinger@hotmail.de>
Date:   Mon Feb 17 17:40:07 2020 +0100

    Avoid collect2 calling signal unsafe functions and/or unlink with uninitialized memory
    
    2020-02-20  Bernd Edlinger  <bernd.edlinger@hotmail.de>
    
            * collect2.c (tool_cleanup): Avoid calling not signal-safe
            functions.
            (maybe_run_lto_and_relink): Avoid possible signal handler
            access to unintialzed memory (lto_o_files).

commit b4edc88453b61d6f3bdb9143cd0486536f95598d
Author: H.J. Lu <hjl.tools@gmail.com>
Date:   Thu Feb 20 03:05:27 2020 -0800

    i386: Skip ENDBR32 at the target function entry
    
    Skip ENDBR32 at the target function entry when initializing trampoline.
    
    Tested on Linux/x86-64 CET machine with and without -m32.
    
    gcc/
    
            Backport from master
            PR target/93656
            * config/i386/i386.c (ix86_trampoline_init): Skip ENDBR32 at
            the target function entry.
    
    gcc/testsuite/
    
            Backport from master
            PR target/93656
            * gcc.target/i386/pr93656.c: New test.
    
    (cherry picked from commit 1d69147af203d4dcd2270429f90c93f1a37ddfff)

commit 33261fdc5df8f638312cfc80c9365c8fb77ad072
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Feb 20 00:17:57 2020 +0000

    Daily bump.

commit 581e2c5b4aef54ee5c2f9fcf6976fba4419dafcd
Author: Mark Eggleston <markeggleston@gcc.gnu.org>
Date:   Wed Feb 19 16:03:11 2020 +0000

    [fortran] xfail no longer necessary in typebound_call_22.f03
    
    PR91984 changes resulted in an expected failure. Backport of PR92113
    negated the need for the xfail.
    
    gcc/testsuite/ChangeLog
    
            * typebound_call_22.d03 : Remove xfail clause.

commit db0e1e9948434352455db1e729383272d79105e8
Author: Mark Eggleston <markeggleston@gcc.gnu.org>
Date:   Wed Feb 19 10:30:38 2020 +0000

    [fortran] ICE assign character pointer to non target PR93714
    
    An ICE occurred if an attempt was made to assign a pointer to a
    character variable that has an length incorrectly specified using
    a real constant and does not have the target attribute.
    
            Backported from mainline
            2020-02-18  Mark Eggleston  <markeggleston@gcc.gnu.org>
    
            PR fortran/93714
            * expr.c (gfc_check_pointer_assign): Move check for
            matching character length to after checking the lvalue
            attributes for target or pointer.
    
            PR fortran/93714
            * gfortran.dg/char_pointer_assign_6.f90: Look for no target
            message instead of length mismatch.
            * gfortran.dg/pr93714_1.f90
            * gfortran.dg/pr93714_2.f90

commit dfcc4197ef14f5d94867c6d7f727fedf7c20600b
Author: liuhongt <hongtao.liu@intel.com>
Date:   Wed Feb 19 10:18:17 2020 +0800

    Add -mavx512vbmi2 to i386-2.C and i386-3.C
    
    2020-02-18  Hongtao Liu  <hongtao.liu@intel.com>
    
    gcc/testsuite/
            * g++.dg/other/i386-2.C: Add -mavx512vbmi2.
            * g++.dg/other/i386-3.C: Ditto.

commit b8b4799fd160983852b87e8986a36ab00d7aeef3
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Feb 19 00:17:39 2020 +0000

    Daily bump.

commit 44fe8c5f322638a19bf7a320e4bf455a5f452bd0
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Feb 18 00:17:46 2020 +0000

    Daily bump.

commit 9eba9635f653291804ecb832eebe1ed96e3346ba
Author: Richard Biener <rguenther@suse.de>
Date:   Wed Jan 22 12:38:12 2020 +0100

    tree-optimization/93381 fix integer offsetting in points-to analysis
    
    We were incorrectly assuming a merge operation is conservative enough
    for not explicitely handled operations but we also need to consider
    offsetting within fields when field-sensitive analysis applies.
    
    2020-01-22  Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/93381
            * tree-ssa-structalias.c (find_func_aliases): Assume offsetting
            throughout, handle all conversions the same.
    
            * gcc.dg/torture/pr93381.c: New testcase.

commit 2065106aed5e32891e2e96881615b922d1a14667
Author: Richard Biener <rguenther@suse.de>
Date:   Fri Feb 14 09:19:40 2020 +0100

    middle-end/93054 deal with undefs in call gimplification
    
    2020-02-14  Richard Biener  <rguenther@suse.de>
    
            Backport from mainline
            2020-01-09  Richard Biener  <rguenther@suse.de>
    
            PR middle-end/93054
            * gimplify.c (gimplify_expr): Deal with NOP definitions.
    
            * gcc.dg/pr93054.c: New testcase.

commit 0727fae83508fe21bd510ae380d6a361ac632680
Author: Richard Biener <rguenther@suse.de>
Date:   Fri Feb 14 09:17:57 2020 +0100

    debug/92763 keep DIEs that might be used in DW_TAG_inlined_subroutine
    
    We were pruning type-local subroutine DIEs if their context is unused
    despite us later needing those DIEs as abstract origins for inlines.
    The patch makes code already present for -fvar-tracking-assignments
    unconditional.
    
    2020-02-14  Richard Biener  <rguenther@suse.de>
    
            Backport from mainline
            2020-01-20  Richard Biener  <rguenther@suse.de>
    
            PR debug/92763
            * dwarf2out.c (prune_unused_types): Unconditionally mark
            called function DIEs.
    
            * g++.dg/debug/pr92763.C: New testcase.

commit da1f7a6dfa20d2da45d62bba824766d5ec963ccf
Author: Richard Biener <rguenther@suse.de>
Date:   Fri Feb 14 09:14:42 2020 +0100

    tree-optimization/92704 fix ifcvt ICE with loops without stores
    
    2020-02-14  Richard Biener  <rguenther@suse.de>
    
            Backport from mainline
            2019-11-29  Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/92704
            * tree-if-conv.c (combine_blocks): Deal with virtual PHIs
            in loops performing only loads.
    
            * gcc.dg/torture/pr92704.c: New testcase.

commit 8a7f319cad03b87020b788c0779cf49a2718e12e
Author: Richard Biener <rguenther@suse.de>
Date:   Fri Feb 14 09:10:48 2020 +0100

    middle-end/92674 delay purging EH edges when folding during inlining
    
    2020-02-14  Richard Biener  <rguenther@suse.de>
    
            Backport from mainline
            2019-11-27  Richard Biener  <rguenther@suse.de>
    
            PR middle-end/92674
            * tree-inline.c (expand_call_inline): Delay purging EH/abnormal
            edges and instead record blocks in bitmap.
            (gimple_expand_calls_inline): Adjust.
            (fold_marked_statements): Delay EH cleanup until all folding is
            done.
            (optimize_inline_calls): Do EH/abnormal cleanup for calls after
            inlining finished.

commit 560dbf35a1d33b5623479796e6934e5e847214cd
Author: liuhongt <hongtao.liu@intel.com>
Date:   Mon Feb 17 09:02:45 2020 +0800

    Add Changelog entry to relevant Changelog files for my last commit.

commit eedb9f896d27e151d4651bc6b292a414c2f18a9f
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Feb 17 00:17:51 2020 +0000

    Daily bump.

commit cd90cc0e43f2b066772e11d1e869f98e53ddd020
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Feb 16 00:17:37 2020 +0000

    Daily bump.

commit e24c48585721fc4122ae10282e32af49aff4c380
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Sat Feb 15 12:53:44 2020 +0100

    match.pd: Disallow side-effects in GENERIC for non-COND_EXPR to COND_EXPR simplifications [PR93744]
    
    As the following testcases show (the first one reported, last two
    found by code inspection), we need to disallow side-effects
    in simplifications that turn some unconditional expression into conditional
    one.  From my little understanding of genmatch.c, it is able to
    automatically disallow side effects if the same operand is used multiple
    times in the match pattern, maybe if it is used multiple times in the
    replacement pattern, and if it is used in conditional contexts in the match
    pattern, could it be taught to handle this case too?  If yes, perhaps
    just the first hunk could be usable for 8/9 backports (+ the testcases).
    
    2020-02-15  Jakub Jelinek  <jakub@redhat.com>
    
            PR tree-optimization/93744
            * match.pd (((m1 >/</>=/<= m2) * d -> (m1 >/</>=/<= m2) ? d : 0,
            A - ((A - B) & -(C cmp D)) -> (C cmp D) ? B : A,
            A + ((B - A) & -(C cmp D)) -> (C cmp D) ? B : A): For GENERIC, make
            sure @2 in the first and @1 in the other patterns has no side-effects.
    
            * gcc.c-torture/execute/pr93744-1.c: New test.
            * gcc.c-torture/execute/pr93744-2.c: New test.
            * gcc.c-torture/execute/pr93744-3.c: New test.

commit ae683899a906ca03b94cb20bfc3a1c558b5188ce
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Feb 15 00:18:07 2020 +0000

    Daily bump.

commit c35cfc834eda41cd8b08ee989b028552ad9cd6a8
Author: Eric Botcazou <ebotcazou@gcc.gnu.org>
Date:   Fri Feb 14 19:21:02 2020 +0100

    Fix problematic TLS sequences for the Solaris linker
    
    This is an old thinko pertaining to the interaction between TLS
    sequences and delay slot filling: the compiler knows that it cannot
    put instructions with TLS relocations into delay slots with the
    original Sun TLS model, but it tests TARGET_SUN_TLS in this context,
    which depends only on the assembler.  So if the compiler is configured
    with the GNU assembler and the Solaris linker, then TARGET_GNU_TLS is
    set instead and the limitation is not enforced.
    
            PR target/93704
            * config/sparc/sparc.c (eligible_for_call_delay): Test HAVE_GNU_LD
            in conjunction with TARGET_GNU_TLS in early return.

commit 53073523bca574251d45bded65b2b0c183b01e5d
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Fri Feb 14 17:36:00 2020 +0100

    c++: Fix thinko in enum_min_precision [PR61414]
    
    When backporting the PR61414 fix to 8.4, I've noticed that the caching
    of prec is actually broken, as it would fail to actually store the computed
    precision into the hash_map's value and so next time we'd think the enum needs
    0 bits.
    
    2020-02-14  Jakub Jelinek  <jakub@redhat.com>
    
            PR c++/61414
            * class.c (enum_min_precision): Change prec type from int to int &.
    
            * g++.dg/cpp0x/enum39.C: New test.

commit cd73697811f4d638a26be9aeada6eb20b645b739
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Fri Feb 14 15:50:57 2020 +0100

    c: Fix ICE with cast to VLA [93576]
    
    The following testcase ICEs, because the PR84305 changes try to evaluate
    the size earlier.  If size has side-effects, that is desirable, and the
    side-effects will actually be wrapped in a SAVE_EXPR.  The problem on this
    testcase is that there are no side-effects, and c_fully_fold doesn't fold
    those COMPOUND_EXPRs to constant, and while before gimplification we unshare
    trees found in the expressions, the unsharing doesn't involve TYPE_SIZE etc.
    of used types.  Gimplification is destructive though, so when we gimplify
    the two nested COMPOUND_EXPRs and then try to gimplify it the second time
    for the TYPE_SIZEs, we ICE.
    Now, we could use unshare_expr in what we push to *expr, SAVE_EXPRs and
    their operands in there aren't unshared, but I really don't see a point of
    evaluating expressions that don't have side-effects before, so instead
    this just pushes there expressions that do have side-effects.
    
    2020-02-13  Jakub Jelinek  <jakub@redhat.com>
    
            PR c/93576
            * c-decl.c (grokdeclarator): If this_size_varies, only push size into
            *expr if it has side effects.
    
            * gcc.dg/pr93576.c: New test.

commit db4bfbae142906291ee319d768f4fa56d2a7682c
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Fri Feb 14 15:50:10 2020 +0100

    i386: Fix up _mm*_mask_popcnt_epi* [PR93696]
    
    As mentioned in the PR and as
    https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mask_popcnt_epi
    also documents, _mm*_popcnt_epi* intrinsics are consistent with all other
    unary AVX512* intrinsics regarding arguments, i.e. the
    _mm*_whatever has just single argument (called a in the docs, and __A in the
    GCC headers),
    _mm*_mask_whatever has 3 arguments (called src, k, a in the docs and
    _W, __U, __A in GCC headers) and
    _mm*_maskz_whatever 2 arguments (called k, a in the docs and __U, __A in GCC
    headers).  Unfortunately, whomever implemented the _mm*_popcnt_epi*
    intrinsics got it wrong for the _mm*_mask_popcnt_epi* ones, calling the
    args __A, __U, __B and not passing them in the canonical order to the
    builtins, making it API incompatible with ICC as well as clang (tested on
    godbolts clang 7/8/9/trunk and ICC 19.0.{0,1}, older clang/ICC don't
    understand those, so it isn't that it used to be broken even in other
    compilers and got changed afterwards).
    
    2020-02-13  Jakub Jelinek  <jakub@redhat.com>
    
            PR target/93696
            * config/i386/avx512bitalgintrin.h (_mm512_mask_popcnt_epi8,
            _mm512_mask_popcnt_epi16, _mm256_mask_popcnt_epi8,
            _mm256_mask_popcnt_epi16, _mm_mask_popcnt_epi8,
            _mm_mask_popcnt_epi16): Rename __B argument to __A and __A to __W,
            pass __A to the builtin followed by __W instead of __A followed by
            __B.
            * config/i386/avx512vpopcntdqintrin.h (_mm512_mask_popcnt_epi32,
            _mm512_mask_popcnt_epi64): Likewise.
            * config/i386/avx512vpopcntdqvlintrin.h (_mm_mask_popcnt_epi32,
            _mm256_mask_popcnt_epi32, _mm_mask_popcnt_epi64,
            _mm256_mask_popcnt_epi64): Likewise.
    
            * gcc.target/i386/pr93696-1.c: New test.
            * gcc.target/i386/pr93696-2.c: New test.
            * gcc.target/i386/avx512bitalg-vpopcntw-1.c (TEST): Fix argument order
            of _mm*_mask_popcnt_*.
            * gcc.target/i386/avx512vpopcntdq-vpopcntq-1.c (TEST): Likewise.
            * gcc.target/i386/avx512vpopcntdq-vpopcntd-1.c (TEST): Likewise.
            * gcc.target/i386/avx512bitalg-vpopcntb-1.c (TEST): Likewise.
            * gcc.target/i386/avx512bitalg-vpopcntb.c (foo): Likewise.
            * gcc.target/i386/avx512bitalg-vpopcntbvl.c (foo): Likewise.
            * gcc.target/i386/avx512vpopcntdq-vpopcntd.c (foo): Likewise.
            * gcc.target/i386/avx512bitalg-vpopcntwvl.c (foo): Likewise.
            * gcc.target/i386/avx512bitalg-vpopcntw.c (foo): Likewise.
            * gcc.target/i386/avx512vpopcntdq-vpopcntq.c (foo): Likewise.

commit fbb4d21086a20cd996049309d6c24d7fb3099123
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Fri Feb 14 15:49:32 2020 +0100

    i386: Fix k*shift* intrinsics [PR93673]
    
    As mentioned in the PR, the intrinsics allow counts from 0 to 255, but
    we actually reject values from 128 to 255.  That is because QImode
    CONST_INTs can be only -128 to 127.  Fixed by using const_0_to_255_operand
    and dropping the modes for the operands with those predicates
    (the IL actually contains the CONST_INT which has VOIDmode).
    
    2020-02-13  Jakub Jelinek  <jakub@redhat.com>
    
            PR target/93673
            * config/i386/sse.md (k<code><mode>): Drop mode from last operand and
            use const_0_to_255_operand predicate instead of immediate_operand.
            (avx512dq_fpclass<mode><mask_scalar_merge_name>,
            avx512dq_vmfpclass<mode><mask_scalar_merge_name>,
            vgf2p8affineinvqb_<mode><mask_name>,
            vgf2p8affineqb_<mode><mask_name>): Drop mode from
            const_0_to_255_operand predicated operands.
    
            * gcc.target/i386/avx512f-pr93673.c: New test.
            * gcc.target/i386/avx512dq-pr93673.c: New test.
            * gcc.target/i386/avx512bw-pr93673.c: New test.

commit 5538456480ad9c1a411b76479c798984bcae2c5c
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Fri Feb 14 15:49:11 2020 +0100

    i386: Fix up vec_extract_lo* patterns [PR93670]
    
    The VEXTRACT* insns have way too many different CPUID feature flags (ATT
    syntax)
    vextractf128 $imm, %ymm, %xmm/mem               AVX
    vextracti128 $imm, %ymm, %xmm/mem               AVX2
    vextract{f,i}32x4 $imm, %ymm, %xmm/mem {k}{z}   AVX512VL+AVX512F
    vextract{f,i}32x4 $imm, %zmm, %xmm/mem {k}{z}   AVX512F
    vextract{f,i}64x2 $imm, %ymm, %xmm/mem {k}{z}   AVX512VL+AVX512DQ
    vextract{f,i}64x2 $imm, %zmm, %xmm/mem {k}{z}   AVX512DQ
    vextract{f,i}32x8 $imm, %zmm, %ymm/mem {k}{z}   AVX512DQ
    vextract{f,i}64x4 $imm, %zmm, %ymm/mem {k}{z}   AVX512F
    
    As the testcase shows and the patch too, we didn't get it right in all
    cases.
    
    The first hunk is about avx512vl_vextractf128v8s[if] incorrectly
    requiring TARGET_AVX512DQ.  The corresponding insn is the first
    vextract{f,i}32x4 above, so it requires VL+F, and the builtins have it
    correct (TARGET_AVX512VL implies TARGET_AVX512F):
    BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512vl_vextractf128v8sf, "__builtin_ia32_extractf32x4_256_mask", IX86_BUILTIN_EXTRACTF32X4_256, UNKNOWN, (int) V4SF_FTYPE_V8SF_INT_V4SF_UQI)
    BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512vl_vextractf128v8si, "__builtin_ia32_extracti32x4_256_mask", IX86_BUILTIN_EXTRACTI32X4_256, UNKNOWN, (int) V4SI_FTYPE_V8SI_INT_V4SI_UQI)
    We only need TARGET_AVX512DQ for avx512vl_vextractf128v4d[if].
    
    The second hunk is about vec_extract_lo_v16s[if]{,_mask}.  These are using
    the vextract{f,i}32x8 insns (AVX512DQ above), but we weren't requiring that,
    but instead incorrectly && 1 for non-masked and && (64 == 64 && TARGET_AVX512VL)
    for masked insns.  This is extraction from ZMM, so it doesn't need VL for
    anything.  The hunk actually only requires TARGET_AVX512DQ when the insn
    is masked, if it is not masked, when TARGET_AVX512DQ isn't available we can
    use vextract{f,i}64x4 instead which is available already in TARGET_AVX512F
    and does the same thing, extracts the low 256 bits from 512 bits vector
    (often we split it into just nothing, but there are some special cases like
    when using xmm16+ when we can't without AVX512VL).
    
    The last hunk is about vec_extract_lo_v8s[if]{,_mask}.  The non-_mask
    suffixed ones are ok already and just split into nothing (lowpart subreg).
    The masked ones were incorrectly requiring TARGET_AVX512VL and
    TARGET_AVX512DQ, when we only need TARGET_AVX512VL.
    
    2020-02-12  Jakub Jelinek  <jakub@redhat.com>
    
            PR target/93670
            * config/i386/sse.md (VI48F_256_DQ): New mode iterator.
            (avx512vl_vextractf128<mode>): Use it instead of VI48F_256.  Remove
            TARGET_AVX512DQ from condition.
            (vec_extract_lo_<mode><mask_name>): Use <mask_avx512dq_condition>
            instead of <mask_mode512bit_condition> in condition.  If
            TARGET_AVX512DQ is false, emit vextract*64x4 instead of
            vextract*32x8.
            (vec_extract_lo_<mode><mask_name>): Drop <mask_avx512dq_condition>
            from condition.
    
            * gcc.target/i386/avx512vl-pr93670.c: New test.

commit 231b10fe9f870a8a8a162e95416a6bc6df023839
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Fri Feb 14 15:48:42 2020 +0100

    i386: Fix -mavx -mno-mavx2 ICE with VEC_COND_EXPR [PR93637]
    
    As mentioned in the PR, for -mavx -mno-avx2 the backend does support
    vcondv4div4df and vcondv8siv8sf optabs (while generally 32-byte vectors
    aren't much supported in that case, it is performed using
    vandps/vandnps/vorps).  The problem is that after the last generic vector
    lowering (where the VEC_COND_EXPR still compares two V4DF vectors and
    has two V4DI last operands and V4DI result and so is considered ok) fre4
    folds the condition into constant, at which point the middle-end during
    expansion will try vcond_mask_optab and fall back to trying to expand it
    as the constant vector < 0 vcondv4div4di, but neither of them is supported
    for -mavx -mno-avx2 and thus we ICE.
    
    So, the options I see is either what the following patch does, also support
    vcond_mask_v4div4di and vcond_mask_v4siv4si already for TARGET_AVX, or
    require for vcondv4div4df and vcondv8siv8sf TARGET_AVX2 rather than current
    TARGET_AVX.
    
    2020-02-10  Jakub Jelinek  <jakub@redhat.com>
    
            PR target/93637
            * config/i386/sse.md (VI_256_AVX2): New mode iterator.
            (vcond_mask_<mode><sseintvecmodelower>): Use it instead of VI_256.
            Change condition from TARGET_AVX2 to TARGET_AVX.
    
            * gcc.target/i386/avx-pr93637.c: New test.

commit baef3efdc4992e4dcb7f4de62ff5bcb13bf05f60
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Fri Feb 14 15:47:55 2020 +0100

    i386: Make xmm16-xmm31 call used even in ms ABI [PR65782]
    
    On Tue, Feb 04, 2020 at 11:16:06AM +0100, Uros Bizjak wrote:
    > I guess that Comment #9 patch form the PR should be trivially correct,
    > but althouhg it looks obvious, I don't want to propose the patch since
    > I have no means of testing it.
    
    I don't have means of testing it either.
    https://docs.microsoft.com/en-us/cpp/build/x64-calling-convention?view=vs-2019
    is quite explicit that [xyz]mm16-31 are call clobbered and only xmm6-15 (low
    128-bits only) are call preserved.
    
    We are talking e.g. about
    /* { dg-options "-O2 -mabi=ms -mavx512vl" } */
    
    typedef double V __attribute__((vector_size (16)));
    void foo (void);
    V bar (void);
    void baz (V);
    void
    qux (void)
    {
      V c;
      {
        register V a __asm ("xmm18");
        V b = bar ();
        asm ("" : "=x" (a) : "0" (b));
        c = a;
      }
      foo ();
      {
        register V d __asm ("xmm18");
        V e;
        d = c;
        asm ("" : "=x" (e) : "0" (d));
        baz (e);
      }
    }
    where according to the MSDN doc gcc incorrectly holds the c value
    in xmm18 register across the foo call; if foo is compiled by some Microsoft
    compiler (or LLVM), then it could clobber %xmm18.
    If all xmm18 occurrences are changed to say xmm15, then it is valid to hold
    the 128-bit value across the foo call (though, surprisingly, LLVM saves it
    into stack anyway).
    
    The other parts are I guess mainly about SEH.  Consider e.g.
    void
    foo (void)
    {
      register double x __asm ("xmm14");
      register double y __asm ("xmm18");
      asm ("" : "=x" (x));
      asm ("" : "=v" (y));
      x += y;
      y += x;
      asm ("" : : "x" (x));
      asm ("" : : "v" (y));
    }
    looking at cross-compiler output, with -O2 -mavx512f this emits
            .file   "abcdeq.c"
            .text
            .align 16
            .globl  foo
            .def    foo;    .scl    2;      .type   32;     .endef
            .seh_proc       foo
    foo:
            subq    $40, %rsp
            .seh_stackalloc 40
            vmovaps %xmm14, (%rsp)
            .seh_savexmm    %xmm14, 0
            vmovaps %xmm18, 16(%rsp)
            .seh_savexmm    %xmm18, 16
            .seh_endprologue
            vaddsd  %xmm18, %xmm14, %xmm14
            vaddsd  %xmm18, %xmm14, %xmm18
            vmovaps (%rsp), %xmm14
            vmovaps 16(%rsp), %xmm18
            addq    $40, %rsp
            ret
            .seh_endproc
            .ident  "GCC: (GNU) 10.0.1 20200207 (experimental)"
    Does whatever assembler mingw64 uses even assemble this (I mean the
    .seh_savexmm %xmm16, 16 could be problematic)?
    I can find e.g.
    https://stackoverflow.com/questions/43152633/invalid-register-for-seh-savexmm-in-cygwin/43210527
    which then links to
    https://gcc.gnu.org/PR65782
    
    2020-02-08  Uroš Bizjak  <ubizjak@gmail.com>
                Jakub Jelinek  <jakub@redhat.com>
    
            PR target/65782
            * config/i386/i386.h (CALL_USED_REGISTERS): Make
            xmm16-xmm31 call-used even in 64-bit ms-abi.
    
            * gcc.target/i386/pr65782.c: New test.
    
    Co-authored-by: Uroš Bizjak <ubizjak@gmail.com>

commit fdaf101b1dd46d6673a318139e9620c068f45a12
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Fri Feb 14 14:18:10 2020 +0100

    openmp: Fix handling of non-addressable shared scalars in parallel nested inside of target [PR93515]
    
    As the following testcase shows, we need to consider even target to be a construct
    that forces not to use copy in/out for shared on parallel inside of the target.
    E.g. for parallel nested inside another parallel or host teams, we already avoid
    copy in/out and we need to treat target the same.
    
    2020-02-06  Jakub Jelinek  <jakub@redhat.com>
    
            PR libgomp/93515
            * omp-low.c (use_pointer_for_field): For nested constructs, also
            look for map clauses on target construct.
            (scan_omp_1_stmt) <case GIMPLE_OMP_TARGET>: Bump temporarily
            taskreg_nesting_level.
    
            * testsuite/libgomp.c-c++-common/pr93515.c: New test.

commit 5781600c42f3ed9860a804dbbf892392bea3e39d
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Fri Feb 14 15:46:51 2020 +0100

    openmp: Avoid ICEs with declare simd; declare simd inbranch [PR93555]
    
    The testcases ICE because when processing the declare simd inbranch,
    we don't create the i == 0 clone as it already exists, which means
    clone_info->nargs is not adjusted, but we then rely on it being adjusted
    when trying other clones.
    
    2020-02-05  Jakub Jelinek  <jakub@redhat.com>
    
            PR middle-end/93555
            * omp-simd-clone.c (expand_simd_clones): If simd_clone_mangle or
            simd_clone_create failed when i == 0, adjust clone->nargs by
            clone->inbranch.
    
            * c-c++-common/gomp/pr93555-1.c: New test.
            * c-c++-common/gomp/pr93555-2.c: New test.
            * gfortran.dg/gomp/pr93555.f90: New test.

commit a73ee641c3d2ca729bdf55225afd881f57bf4d96
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Fri Feb 14 15:46:13 2020 +0100

    combine: Punt on out of range rotate counts [PR93505]
    
    What happens on this testcase is with the out of bounds rotate we get:
    Trying 13 -> 16:
       13: r129:SI=r132:DI#0<-<0x20
          REG_DEAD r132:DI
       16: r123:DI=r129:SI<0
          REG_DEAD r129:SI
    Successfully matched this instruction:
    (set (reg/v:DI 123 [ <retval> ])
        (const_int 0 [0]))
    during combine.  So, perhaps we could also change simplify-rtx.c to punt
    if it is out of bounds rather than trying to optimize anything.
    Or, but probably GCC11 material, if we decide that ROTATE/ROTATERT doesn't
    have out of bounds counts or introduce targetm.rotate_truncation_mask,
    we should truncate the argument instead of punting.
    Punting is better for backports though.
    
    2020-01-30  Jakub Jelinek  <jakub@redhat.com>
    
            PR middle-end/93505
            * combine.c (simplify_comparison) <case ROTATE>: Punt on out of range
            rotate counts.
    
            * gcc.c-torture/compile/pr93505.c: New test.

commit e0cbedff53ead3bbb6e7af959c727a04ec8445c7
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Fri Feb 14 15:45:07 2020 +0100

    openmp: Handle rest of EXEC_OACC_* in oacc_code_to_statement [PR93463]
    
    As the testcase shows, some EXEC_OACC_* codes weren't handled in
    oacc_code_to_statement.  Fixed thusly.
    
    2020-01-29  Jakub Jelinek  <jakub@redhat.com>
    
            PR fortran/93463
            * openmp.c (oacc_code_to_statement): Handle
            EXEC_OACC_{ROUTINE,UPDATE,WAIT,CACHE,{ENTER,EXIT}_DATA,DECLARE}.
    
            * gfortran.dg/goacc/pr93463.f90: New test.

commit 83799a013b4a7f555b1a168fcb5f8df25edede99
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Fri Feb 14 15:44:23 2020 +0100

    postreload: Fix up postreload combine [PR93402]
    
    The following testcase is miscompiled, because the postreload pass changes:
    -(insn 14 13 23 2 (parallel [
    -            (set (reg:DI 1 dx [94])
    -                (plus:DI (reg:DI 1 dx [95])
    -                    (reg:DI 5 di [92])))
    -            (clobber (reg:CC 17 flags))
    -        ]) "pr93402.c":8:30 186 {*adddi_1}
    -     (expr_list:REG_EQUAL (plus:DI (reg:DI 5 di [92])
    -            (const_int 111111111111 [0x19debd01c7]))
    -        (nil)))
    -(insn 23 14 25 2 (set (reg:SI 0 ax)
    +(insn 23 13 25 2 (set (reg:SI 0 ax)
             (const_int 0 [0])) "pr93402.c":10:1 67 {*movsi_internal}
          (nil))
     (insn 25 23 26 2 (use (reg:SI 0 ax)) "pr93402.c":10:1 -1
          (nil))
    -(insn 26 25 35 2 (use (reg:DI 1 dx)) "pr93402.c":10:1 -1
    +(insn 26 25 35 2 (use (plus:DI (reg:DI 1 dx [95])
    +            (reg:DI 5 di [92]))) "pr93402.c":10:1 -1
          (nil))
    A USE insn is not a normal insn and verify_changes called from
    apply_change_group is happy about any changes into it.
    The following patch avoids this optimization if we were to change
    the USE operand (this routine only changes a reg into (plus reg reg2)).
    
    2020-01-23  Jakub Jelinek  <jakub@redhat.com>
    
            PR rtl-optimization/93402
            * postreload.c (reload_combine_recognize_pattern): Don't try to adjust
            USE insns.
    
            * gcc.c-torture/execute/pr93402.c: New test.

commit 93266871ac794243e9785d92a0cec09b2fa5648b
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Fri Feb 14 15:43:47 2020 +0100

    i386: Fix up -fdollars-in-identifiers with identifiers starting with $ in -masm=att [PR91298]
    
    In AT&T syntax leading $ is special, so if we have identifiers that start
    with dollar, we usually fail to assemble it (or assemble incorrectly).
    As mentioned in the PR, what works is wrapping the identifiers inside of
    parens, like:
            movl    $($a), %eax
            leaq    ($a)(,%rdi,4), %rax
            movl    ($a)(%rip), %eax
            movl    ($a)+16(%rip), %eax
            .globl  $a
            .type   $a, @object
            .size   $a, 72
    $a:
            .string "$a"
            .quad   ($a)
    (this is x86_64 -fno-pic -O2).  In some places ($a) is not accepted,
    like as .globl operand, in .type, .size, so the patch overrides
    ASM_OUTPUT_SYMBOL_REF rather than e.g. ASM_OUTPUT_LABELREF.
    I didn't want to duplicate what assemble_name is doing (following
    transparent aliases), so split assemble_name into two parts; just
    mere looking at the first character of a name before calling assemble_name
    wouldn't be good enough, a transparent alias could lead from a name
    not starting with $ to one starting with it and vice versa.
    
    2020-01-22  Jakub Jelinek  <jakub@redhat.com>
    
            PR target/91298
            * output.h (assemble_name_resolve): Declare.
            * varasm.c (assemble_name_resolve): New function.
            (assemble_name): Use it.
            * config/i386/i386.h (ASM_OUTPUT_SYMBOL_REF): Define.
    
            * gcc.target/i386/pr91298-1.c: New test.
            * gcc.target/i386/pr91298-2.c: New test.

commit a7324c0216fcb95157a1f9f980e1351d17228b35
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Fri Feb 14 15:42:58 2020 +0100

    openmp: Fix up !$omp target parallel handling
    
    The PR93329 fix revealed we ICE on !$omp target parallel, this change fixes
    that.
    
    2020-01-22  Jakub Jelinek  <jakub@redhat.com>
    
            * parse.c (parse_omp_structured_block): Handle ST_OMP_TARGET_PARALLEL.
            * trans-openmp.c (gfc_trans_omp_target)
            <case EXEC_OMP_TARGET_PARALLEL>: Call pushlevel first.
    
            * gfortran.dg/gomp/target-parallel1.f90: New test.
            * gfortran.dg/goacc/pr93329.f90: Enable commented out target parallel
            test.

commit ba6ebaafc62924a05c961146cb0ec114ae8b04cf
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Fri Feb 14 15:41:59 2020 +0100

    openmp: Teach omp_code_to_statement about rest of OpenMP statements
    
    The omp_code_to_statement function added with the initial OpenACC support
    only handled small subset of the OpenMP statements, leading to ICE if
    any other OpenMP directive appeared inside of OpenACC directive.
    
    2020-01-22  Jakub Jelinek  <jakub@redhat.com>
    
            PR fortran/93329
            * openmp.c (omp_code_to_statement): Handle remaining EXEC_OMP_*
            cases.
    
            * gfortran.dg/goacc/pr93329.f90: New test.

commit 0b00f43cf381f03aeaced375f8f0ef1e731c9f43
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Fri Feb 14 15:41:22 2020 +0100

    riscv: Fix up riscv_rtx_costs for RTL checking (PR target/93333)
    
    As mentioned in the PR, during combine rtx_costs can be called sometimes
    even on RTL that has not been validated yet and so can contain even operands
    that aren't valid in any instruction.
    
    2020-01-21  Jakub Jelinek  <jakub@redhat.com>
    
            PR target/93333
            * config/riscv/riscv.c (riscv_rtx_costs) <case ZERO_EXTRACT>: Verify
            the last two operands are CONST_INT_P before using them as such.
    
            * gcc.c-torture/compile/pr93333.c: New test.

commit f0776f088dce384106609fc868061defd472bc10
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Fri Feb 14 15:40:34 2020 +0100

    powerpc: Fix ICE with fp conditional move (PR target/93073)
    
    The following testcase ICEs, because for TFmode the particular subtraction
    pattern (*subtf3) is not enabled with the given options.  Using
    expand_simple_binop instead of emitting the subtraction by hand just moves
    the ICE one insn later, NEG of ABS is not then recognized, etc., but
    ultimately the problem is that when rs6000_emit_cmove is called for floating
    point operand mode (and earlier condition ensures that in that case
    compare_mode is also floating point), the expander makes sure the
    operand mode is SFDF, but for the comparison mode nothing checks it, yet
    there is just one *fsel* pattern with 2 separate SFDF iterators.
    
    The following patch fixes it by giving up if compare_mode is not SFmode or
    DFmode.
    
    2020-01-21  Jakub Jelinek  <jakub@redhat.com>
    
            PR target/93073
            * config/rs6000/rs6000.c (rs6000_emit_cmove): If using fsel, punt for
            compare_mode other than SFmode or DFmode.
    
            * gcc.target/powerpc/pr93073.c: New test.

commit ef2e6135591f2a197d4fb8a7dbb8425a9d2df85e
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Fri Feb 14 15:39:57 2020 +0100

    c++: Fix deprecated attribute handling on templates (PR c++/93228)
    
    As the following testcase shows, when deprecated attribute is on a template,
    we'd never print the message if any, because the attribute is not
    present on the TEMPLATE_DECL with which warn_deprecated_use is called,
    but on its DECL_TEMPLATE_RESULT or its type.
    
    2020-01-17  Jakub Jelinek  <jakub@redhat.com>
    
            PR c++/93228
            * parser.c (cp_parser_template_name): Look up deprecated attribute
            in DECL_TEMPLATE_RESULT or its type's attributes.
    
            * g++.dg/cpp1y/attr-deprecated-3.C: New test.

commit 04e48115ac4f4eab20525280653e8ff985f1a3d8
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Fri Feb 14 15:35:59 2020 +0100

    re PR inline-asm/93202 ([RISCV] ICE when using inline asm 'h' operand modifier)
    
            PR inline-asm/93202
            * config/riscv/riscv.c (riscv_print_operand_reloc): Use
            output_operand_lossage instead of gcc_unreachable.
            * doc/md.texi (riscv f constraint): Fix typo.
    
            * gcc.target/riscv/pr93202.c: New test.

commit 1ccdfea80e8ead4936c35b5eb736dc407a07fb32
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Fri Feb 14 15:34:43 2020 +0100

    re PR rtl-optimization/93088 (Compile time hog on gcc/testsuite/gcc.target/i386/pr56348.c w/ -O3 -funroll-loops -fno-tree-dominator-opts -fno-tree-vrp)
    
            PR rtl-optimization/93088
            * loop-iv.c (find_single_def_src): Punt after looking through
            128 reg copies for regs with single definitions.  Move definitions
            to first uses.
    
            * gcc.target/i386/pr93088.c: New test.

commit f01dfd67820e6a8254e6bf9ea242bf86134486ff
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Fri Feb 14 15:33:44 2020 +0100

    re PR ipa/93087 (Bogus `-Wsuggest-attribute=cold` on function already marked as `__attribute__((cold))`)
    
            PR ipa/93087
            * predict.c (compute_function_frequency): Don't call
            warn_function_cold on functions that already have cold attribute.
    
            * c-c++-common/cold-1.c: New test.

commit c343d4aab243cb477c65c6d0c37b1a6cdd2f858e
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Fri Feb 14 13:57:45 2020 +0100

    re PR libgomp/93065 (libgomp: destructor missing to delete goacc_cleanup_key)
    
            PR libgomp/93065
            * oacc-init.c (goacc_runtime_deinitialize): New function.

commit becbae00641077f7104d16b4565c1d64df5fafc6
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Fri Feb 14 15:32:20 2020 +0100

    re PR c++/92438 (Function declaration parsed incorrectly with `-std=c++1z`)
    
            PR c++/92438
            * parser.c (cp_parser_constructor_declarator_p): If open paren
            is followed by RID_ATTRIBUTE, skip over the attribute tokens and
            try to parse type specifier.
    
            * g++.dg/ext/attrib61.C: New test.

commit 7d35cad11152895d239f103f1fffbd6f0cb58c8b
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Fri Feb 14 15:27:21 2020 +0100

    re PR c++/92992 (Side-effects dropped when decltype(nullptr) typed expression is passed to ellipsis)
    
            PR c++/92992
            * call.c (convert_arg_to_ellipsis): For decltype(nullptr) arguments
            that have side-effects use cp_build_compound_expr.
    
            * g++.dg/cpp0x/nullptr45.C: New test.

commit b69684fdac2ac4bd128150631de6391c786e2184
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Fri Feb 14 15:26:52 2020 +0100

    backport: re PR fortran/92977 (ICE in gfc_trans_omp_atomic, at fortran/trans-openmp.c:3526)
    
            Backported from mainline
            2019-12-19  Jakub Jelinek  <jakub@redhat.com>
    
            PR fortran/92977
            * frontend-passes.c (call_external_blas): Use || instead of |.
    
            PR fortran/92977
            * frontend-passes.c (in_omp_atomic): New variable.
            (cfe_expr_0, matmul_to_var_expr, matmul_temp_args,
            inline_matmul_assign, call_external_blas): Don't optimize in
            EXEC_OMP_ATOMIC.
            (optimize_namespace): Clear in_omp_atomic.
            (gfc_code_walker): Set in_omp_atomic for EXEC_OMP_ATOMIC, save/restore
            it around.
    
            * gfortran.dg/gomp/pr92977.f90: New test.

commit 4ece9571bcb003148a4c7c8e909da2c1adf60292
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Fri Feb 14 13:45:52 2020 +0100

    backport: re PR ipa/92357 (ICE in IPA pass fnsummary in openmp offload)
    
            Backported from mainline
            2019-12-14  Jakub Jelinek  <jakub@redhat.com>
    
            PR ipa/92357
            * ipa-fnsummary.c (ipa_fn_summary_write): Use
            lto_symtab_encoder_iterator with lsei_start_function_in_partition and
            lsei_next_function_in_partition instead of walking all cgraph nodes
            in encoder.

commit 4982521a900158e5d6d93138e0aafb5f59f75093
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Fri Feb 14 15:25:45 2020 +0100

    backport: re PR tree-optimization/92930 (GCC incorrectly optimizes away __builtin_apply() calls)
    
            Backported from mainline
            2019-12-14  Jakub Jelinek  <jakub@redhat.com>
    
            PR tree-optimization/92930
            * ipa-pure-const.c (special_builtin_state): Don't handle
            BUILT_IN_APPLY.
    
            * gcc.dg/tree-ssa/pr92930.c: New test.

commit ffb5cc9a5599b1936c5ebea153ca52a0aa2c785d
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Fri Feb 14 15:24:48 2020 +0100

    backport: re PR target/92904 (varargs for __int128 is placed at an unaligned location and uses movdqa for the load)
    
            Backported from mainline
            2019-12-12  Jakub Jelinek  <jakub@redhat.com>
    
            PR target/92904
            * config/i386/i386.c (ix86_gimplify_va_arg): If need_intregs and
            not need_temp, decrease alignment of the read because the GPR save
            area only guarantees 8-byte alignment.
    
            * gcc.c-torture/execute/pr92904.c: New test.

commit f9a0c0800994d5e0b68c0a8eed47454bce841f97
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Fri Feb 14 15:23:34 2020 +0100

    backport: re PR fortran/92899 ([OpenMP] ICE in gfc_trans_omp_atomic, at fortran/trans-openmp.c:3769)
    
            Backported from mainline
            2019-12-11  Jakub Jelinek  <jakub@redhat.com>
    
            PR fortran/92899
            * trans-openmp.c (gfc_trans_omp_atomic): For GFC_OMP_ATOMIC_SWAP,
            do look through conversion on expr2 if any.
    
            * testsuite/libgomp.fortran/atomic1.f90: New test.

commit c58bec27145c9a049d6642ca011b7f0fbe9c5f33
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Fri Feb 14 13:08:33 2020 +0100

    backport: re PR target/92723 (ICE in expand_shift_1, at expmed.c:2635)
    
            Backported from mainline
            2019-12-11  Jakub Jelinek  <jakub@redhat.com>
    
            PR target/92723
            * tree-vect-patterns.c (vect_recog_rotate_pattern): If dt is not
            vect_internal_def, use oprnd1 as is, without trying to cast it.
            Formatting fix.
    
            * gcc.dg/vect/pr92723.c: New test.

commit 37e948410c67d1e4a0bb5bd3721b9fbf4d77f889
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Fri Feb 14 12:59:53 2020 +0100

    backport: re PR fortran/92781 (ICE in convert_nonlocal_reference_op, at tree-nested.c:1065)
    
            Backported from mainline
            2019-12-05  Jakub Jelinek  <jakub@redhat.com>
    
            PR fortran/92781
            * trans-decl.c (gfc_get_symbol_decl): If sym->backend_decl is
            current_function_decl, add length to current rather than parent
            function and expect DECL_CONTEXT (length) to be current_function_decl.
    
            * gfortran.dg/pr92781.f90: New test.

commit 41e5eec55cb64b54c717d9625bcee1aac1def569
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Fri Feb 14 12:58:46 2020 +0100

    backport: re PR c++/92732 (Bit-field of scoped enumeration type cannot be initialized)
    
            Backported from mainline
            2019-12-03  Jakub Jelinek  <jakub@redhat.com>
    
            PR c++/92732
            * typeck2.c (digest_nsdmi_init): For bitfields, use
            DECL_BIT_FIELD_TYPE instead of TREE_TYPE.
    
            * g++.dg/cpp2a/bitfield3.C: Don't expect narrowing conversion
            warnings.
            * g++.dg/cpp2a/bitfield4.C: New test.

commit 1aafdd7c93226cb092b560462028394a82f404a2
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Fri Feb 14 12:56:42 2020 +0100

    backport: re PR c++/60228 (ICE using lambda in #pragma omp declare reduction)
    
            Backported from mainline
            2019-11-29  Jakub Jelinek  <jakub@redhat.com>
    
            PR c++/60228
            * parser.c (cp_parser_omp_declare_reduction_exprs): If
            processing_template_decl, wrap the combiner or initializer
            into EXPR_STMT.
            * decl.c (start_preparsed_function): Don't start a lambda scope
            for DECL_OMP_DECLARE_REDUCTION_P functions.
            (finish_function): Don't finish a lambda scope for
            DECL_OMP_DECLARE_REDUCTION_P functions, nor cp_fold_function
            them nor cp_genericize them.
            * mangle.c (decl_mangling_context): Look through
            DECL_OMP_DECLARE_REDUCTION_P functions.
            * semantics.c (expand_or_defer_fn_1): For DECL_OMP_DECLARE_REDUCTION_P
            functions, use tentative linkage, don't keep their bodies with
            -fkeep-inline-functions and return false at the end.
    
            * g++.dg/gomp/openmp-simd-2.C: Don't expect bodies for
            DECL_OMP_DECLARE_REDUCTION_P functions.
    
            * testsuite/libgomp.c++/udr-20.C: New test.
            * testsuite/libgomp.c++/udr-21.C: New test.

commit bf5e3130c0ed518311a79c5a0099e0e39f33a889
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Fri Feb 14 12:53:12 2020 +0100

    backport: re PR fortran/91944 (ICE in gfc_conv_array_initializer, at fortran/trans-array.c:6156)
    
            Backported from mainline
            2019-11-27  Jakub Jelinek  <jakub@redhat.com>
    
            PR fortran/91944
            * simplify.c (gfc_simplify_spread): Check gfc_init_expr_flag instead
            of gfc_current_ns->sym_root->n.sym->attr.flavor == FL_PARAMETER.
    
            * gfortran.dg/spread_size_limit_2.f90: New test.

commit 929d901ead4f859c8e385d91547482445a85066c
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Fri Feb 14 12:51:28 2020 +0100

    backport: re PR c++/92524 (ICE in short program with constexpr and std::array)
    
            Backported from mainline
            2019-11-27  Jakub Jelinek  <jakub@redhat.com>
    
            PR c++/92524
            * tree.c (replace_placeholders_r): Don't walk constructor elts with
            RANGE_EXPR indexes.
    
            * g++.dg/cpp0x/pr92524.C: New test.

commit 5c265f5f1977f7c935b8b54cfdb23c862f686f20
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Fri Feb 14 12:49:07 2020 +0100

    backport: re PR debug/92664 (Wrong .debug_line section information when compiling stdin input with -g3)
    
            Backported from mainline
            2019-11-27  Jakub Jelinek  <jakub@redhat.com>
    
            PR debug/92664
            * dwarf2out.c (lookup_filename): Use "<stdin>" instead of "".

commit 37c0297f864394ddceba143ad410a6eb44a3119e
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Fri Feb 14 12:48:05 2020 +0100

    backport: re PR c++/92648 (Handling of unknown attributes)
    
            Backported from mainline
            2019-11-26  Jakub Jelinek  <jakub@redhat.com>
    
            PR c++/92648
            * parser.c (cp_parser_std_attribute): For unknown attributes,
            skip balanced token seq instead of trying to parse
            attribute-argument-clause as expression list.
    
            * g++.dg/cpp0x/gen-attrs-71.C: New test.

commit 22a7fa8517063c76b069d2b08dca5a9d270798f8
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Fri Feb 14 12:45:30 2020 +0100

    backport: re PR c++/61414 (enum class bitfield size-checking needs a separate warning flag controlling it)
    
            Backported from mainline
            2019-11-26  Jakub Jelinek  <jakub@redhat.com>
    
            PR c++/61414
            * c-attribs.c (handle_mode_attribute): Add mode attribute to
            ENUMERAL_TYPEs.
    
            * class.c (enum_to_min_precision): New hash_map.
            (enum_min_precision): New function.
            (check_bitfield_decl): Use it.
    
            * g++.dg/cpp0x/enum23.C: Remove xfail.
            * g++.dg/cpp0x/enum28.C: New test.

commit dbdf86838aaaef76620c00c53096cfe157d5af6e
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Fri Feb 14 12:38:30 2020 +0100

    backport: re PR sanitizer/92154 (new glibc breaks arm bootstrap due to libsanitizer)
    
            Backported from mainline
            2019-11-26  Jakub Jelinek  <jakub@redhat.com>
    
            PR sanitizer/92154
            * sanitizer_common/sanitizer_platform_limits_posix.h: Cherry-pick
            llvm-project revision 947f9692440836dcb8d88b74b69dd379d85974ce.
            * sanitizer_common/sanitizer_platform_limits_posix.cc: Likewise.

commit ef7d101ee0eb663c078cfc018db164387e97cc02
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Fri Feb 14 12:37:40 2020 +0100

    backport: re PR inline-asm/92615 (ICE in extract_insn)
    
            Backported from mainline
            2019-11-23  Jakub Jelinek  <jakub@redhat.com>
    
            PR target/92615
            * config/i386/i386.c (ix86_md_asm_adjust): If dest_mode is
            GET_MODE (dest), is not QImode, using ZERO_EXTEND and dest is not
            register_operand, force x into register before storing it into dest.
            Formatting fix.
    
            * gcc.target/i386/pr92615.c: New test.

commit 56728b264c1b0d9f193aa5e8b1702a1cd7a08868
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Fri Feb 14 12:34:46 2020 +0100

    backport: re PR c++/90842 (ICE in poplevel, at cp/decl.c:585)
    
            Backported from mainline
            2019-11-21  Jakub Jelinek  <jakub@redhat.com>
                        Jason Merrill  <jason@redhat.com>
    
            PR c++/90842
            * parser.c (cp_parser_decl_specifier_seq): For concept or typedef
            break early if CP_PARSER_FLAGS_ONLY_MUTABLE_OR_CONSTEXPR.
            For type specifiers, set CP_PARSER_FLAGS_NO_TYPE_DEFINITIONS
            if CP_PARSER_FLAGS_ONLY_MUTABLE_OR_CONSTEXPR is set.
    
            * g++.dg/cpp1y/lambda-generic-90842.C: New test.

commit 54d87ffe4b34052f159ac5b72b250129ce813b2a
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Fri Feb 14 12:33:27 2020 +0100

    backport: re PR sanitizer/92154 (new glibc breaks arm bootstrap due to libsanitizer)
    
            Backported from mainline
            2019-10-22  Tamar Christina  <tamar.christina@arm.com>
    
            PR sanitizer/92154
            * sanitizer_common/sanitizer_platform_limits_posix.cc:
            Cherry-pick compiler-rt revision r375220.

commit 1b169f1ea0c9fab7712ede65edb0ffb6e021ad7c
Author: Richard Biener <rguenther@suse.de>
Date:   Tue Jan 14 08:43:32 2020 +0100

    PR middle-end/93246 - missing alias subsets
    
    Starting with the introduction of TYPE_TYPELESS_STORAGE the situation
    of having a alias-set zero aggregate field became more common which
    prevents recording alias-sets of fields of said aggregate as subset
    of the outer aggregate.  component_uses_parent_alias_set_from in the
    past fended off some of the issues with that but the alias oracles
    use of the alias set of the base of an access path never appropriately
    handled it.
    
    The following makes it so that alias-sets of fields of alias-set zero
    aggregate fields are still recorded as subset of the container.
    
    2020-01-14  Richard Biener  <rguenther@suse.de>
    
            PR middle-end/93246
            * alias.c (record_component_aliases): Take superset to record
            into, recurse for alias-set zero fields.
            (record_component_aliases): New oveerload wrapping around the above.
    
            * g++.dg/torture/pr93246.C: New testcase.

commit e6a329e42d127a0e6094250ace5ea147d3cc9550
Author: liuhongt <hongtao.liu@intel.com>
Date:   Fri Feb 14 16:32:49 2020 +0800

    Intrinsic macro of vpshr* and vpshl* lack a closing parenthesis which would cause failure in O0.
    
    2020-02-14 Hongtao Liu  <hongtao.liu@intel.com>
    
    gcc/
            PR target/93724
            * config/i386/avx512vbmi2intrin.h
            (_mm512_shrdi_epi16, _mm512_mask_shrdi_epi16,
            _mm512_maskz_shrdi_epi16, _mm512_shrdi_epi32,
            _mm512_mask_shrdi_epi32, _mm512_maskz_shrdi_epi32,
            _m512_shrdi_epi64, _m512_mask_shrdi_epi64,
            _m512_maskz_shrdi_epi64, _mm512_shldi_epi16,
            _mm512_mask_shldi_epi16, _mm512_maskz_shldi_epi16,
            _mm512_shldi_epi32, _mm512_mask_shldi_epi32,
            _mm512_maskz_shldi_epi32, _mm512_shldi_epi64,
            _mm512_mask_shldi_epi64, _mm512_maskz_shldi_epi64): Fix typo
            of lacking a closing parenthesis.
            * config/i386/avx512vbmi2vlintrin.h
            (_mm256_shrdi_epi16, _mm256_mask_shrdi_epi16,
            _mm256_maskz_shrdi_epi16, _mm256_shrdi_epi32,
            _mm256_mask_shrdi_epi32, _mm256_maskz_shrdi_epi32,
            _m256_shrdi_epi64, _m256_mask_shrdi_epi64,
            _m256_maskz_shrdi_epi64, _mm256_shldi_epi16,
            _mm256_mask_shldi_epi16, _mm256_maskz_shldi_epi16,
            _mm256_shldi_epi32, _mm256_mask_shldi_epi32,
            _mm256_maskz_shldi_epi32, _mm256_shldi_epi64,
            _mm256_mask_shldi_epi64, _mm256_maskz_shldi_epi64,
            _mm_shrdi_epi16, _mm_mask_shrdi_epi16,
            _mm_maskz_shrdi_epi16, _mm_shrdi_epi32,
            _mm_mask_shrdi_epi32, _mm_maskz_shrdi_epi32,
            _mm_shrdi_epi64, _mm_mask_shrdi_epi64,
            _m_maskz_shrdi_epi64, _mm_shldi_epi16,
            _mm_mask_shldi_epi16, _mm_maskz_shldi_epi16,
            _mm_shldi_epi32, _mm_mask_shldi_epi32,
            _mm_maskz_shldi_epi32, _mm_shldi_epi64,
            _mm_mask_shldi_epi64, _mm_maskz_shldi_epi64): Ditto.
    
    gcc/testsuite/
            * gcc.target/i386/avx512vbmi2-vpshld-1.c: New test.
            * gcc.target/i386/avx512vbmi2-vpshrd-1.c: Ditto.
            * gcc.target/i386/sse-12.c: Add -mavx512vbmi2.
            * gcc.target/i386/sse-13.c: Ditto.
            * gcc.target/i386/sse-14.c: Add -mavx512vbmi2 and tests.
            * gcc.target/i386/sse-22.c: Ditto.

commit 04d883b1968b6982a155199b056611a655df4f8b
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Feb 14 00:17:39 2020 +0000

    Daily bump.

commit 4f61a4a778d5004bc08435180b83c21c0cde7d49
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Feb 13 00:17:42 2020 +0000

    Daily bump.

commit e0d31dbf62d168e2f2c04975ebb9f46adbba891e
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Feb 12 00:17:39 2020 +0000

    Daily bump.

commit 0e35a433f8ec02ac46eb5ceb4a9bc6a25e88b05c
Author: Tamar Christina <tamar.christina@arm.com>
Date:   Tue Feb 11 10:47:19 2020 +0000

    middle-end: Fix logical shift truncation (PR rtl-optimization/91838) (gcc-8 backport)
    
    This fixes a fall-out from a patch I had submitted two years ago which started
    allowing simplify-rtx to fold logical right shifts by offsets a followed by b
    into >> (a + b).
    
    However this can generate inefficient code when the resulting shift count ends
    up being the same as the size of the shift mode.  This will create some
    undefined behavior on most platforms.
    
    This patch changes to code to truncate to 0 if the shift amount goes out of
    range.  Before my older patch this used to happen in combine when it saw the
    two shifts.  However since we combine them here combine never gets a chance to
    truncate them.
    
    The issue mostly affects GCC 8 and 9 since on 10 the back-end knows how to deal
    with this shift constant but it's better to do the right thing in simplify-rtx.
    
    Note that this doesn't take care of the Arithmetic shift where you could replace
    the constant with MODE_BITS (mode) - 1, but that's not a regression so punting it.
    
    gcc/ChangeLog:
    
            Backport from mainline
            2020-01-31  Tamar Christina  <tamar.christina@arm.com>
    
            PR rtl-optimization/91838
            * simplify-rtx.c (simplify_binary_operation_1): Update LSHIFTRT case
            to truncate if allowed or reject combination.
    
    gcc/testsuite/ChangeLog:
    
            Backport from mainline
            2020-01-31  Tamar Christina  <tamar.christina@arm.com>
                        Jakub Jelinek  <jakub@redhat.com>
    
            PR rtl-optimization/91838
            * g++.dg/opt/pr91838.C: New test.

commit dfb16c24163d5699fce47f7801e1ec1b31bf483e
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Feb 11 00:17:32 2020 +0000

    Daily bump.

commit 48549a81d1c2b25d0a31f428ad416083068835de
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Feb 10 00:17:35 2020 +0000

    Daily bump.

commit c1a2ff7e488f35f1f4825597fcb5a573e3428d53
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Feb 9 00:17:33 2020 +0000

    Daily bump.

commit 134e71b8596325beba3f4687f3a4d11229032b51
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Feb 8 00:17:48 2020 +0000

    Daily bump.

commit aea14ca89283707f52c1cf68fb730dd158797081
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Feb 7 00:17:41 2020 +0000

    Daily bump.

commit f285f0ed20bfcef93351631ba8968be8ee8791f2
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Feb 6 00:17:30 2020 +0000

    Daily bump.

commit 50a6717e1e073b6b9c78fd5a750bcdb822c6a793
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Feb 5 00:17:33 2020 +0000

    Daily bump.

commit bf92183876bc8fa518c5d5407006ea72a977c259
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Feb 4 00:17:46 2020 +0000

    Daily bump.

commit a08dadf58ca64df5e7627399ddfdbfea037e5e19
Author: Tobias Burnus <tobias@codesourcery.com>
Date:   Mon Feb 3 12:15:40 2020 +0100

    [OpenMP] Add missing parameters to omp_lib documentation (PR fortran/93541)
    
            Backported from mainline
            2020-02-03  Tobias Burnus  <tobias@codesourcery.com>
    
            PR fortran/93541
            * intrinisic.texi (OpenMP Modules OMP_LIB and OMP_LIB_KINDS):
            Add undocumented parameters from omp_lib.f90.in.

commit 884399665c6109e5ff6df58321c6b6b7ba6d4c68
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Feb 3 00:17:52 2020 +0000

    Daily bump.

commit d545975a753621a47488ca6337fd7143a65129ef
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Feb 2 00:17:32 2020 +0000

    Daily bump.

commit 3d926089df46c23c83b9a3f490a8439c9cd22745
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Feb 1 00:17:32 2020 +0000

    Daily bump.

commit 98d6963b59903fc29ebc206b278ea444b99b75ec
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Jan 31 00:17:45 2020 +0000

    Daily bump.

commit c406b239bb981a52b27332913d98bd0438d19836
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Jan 30 00:17:31 2020 +0000

    Daily bump.

commit b848d94aea6b0a2ff0405f759d2411ceb27d2775
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Jan 29 00:17:34 2020 +0000

    Daily bump.

commit 3a4ff785f02a771f83d86dfd9e6058afeb839966
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Jan 28 00:17:31 2020 +0000

    Daily bump.

commit 573b265dc7bbafbdef82dd7904ca429f703e1f6c
Author: Nathan Sidwell <nathan@acm.org>
Date:   Mon Jan 27 05:49:43 2020 -0800

    c++: Bogus error using namespace alias [PR91826]
    
    My changes to is_nested_namespace broke is_ancestor's use where a namespace
    alias might be passed in.  This changes is_ancestor to look through the alias.
    
            PR c++/91826
            * name-lookup.c (is_ancestor): Allow CHILD to be a namespace alias.

commit b2200f40e3ecf87238eb15c909e74a2fe16de948
Author: Wilco Dijkstra <wdijkstr@arm.com>
Date:   Fri Jan 17 13:17:21 2020 +0000

    [AArch64] Fix shrinkwrapping interactions with atomics (PR92692)
    
    The separate shrinkwrapping pass may insert stores in the middle
    of atomics loops which can cause issues on some implementations.
    Avoid this by delaying splitting atomics patterns until after
    prolog/epilog generation.
    
    gcc/
            PR target/92692
            * config/aarch64/aarch64.c (aarch64_split_compare_and_swap)
            Add assert to ensure prolog has been emitted.
            (aarch64_split_atomic_op): Likewise.
            * config/aarch64/atomics.md (aarch64_compare_and_swap<mode>)
            Use epilogue_completed rather than reload_completed.
            (aarch64_atomic_exchange<mode>): Likewise.
            (aarch64_atomic_<atomic_optab><mode>): Likewise.
            (atomic_nand<mode>): Likewise.
            (aarch64_atomic_fetch_<atomic_optab><mode>): Likewise.
            (atomic_fetch_nand<mode>): Likewise.
            (aarch64_atomic_<atomic_optab>_fetch<mode>): Likewise.
            (atomic_nand_fetch<mode>): Likewise.
    
    (cherry picked from commit a708cb25d9284e9234b6457f8260bfc79f09043e)

commit 41fcd8889bd19fbc7c0ab6be761c5f256833e6e0
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Jan 27 00:17:49 2020 +0000

    Daily bump.

commit a8386a749d41d61724ccf60fa2b0a53fff7b8d15
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Jan 26 00:17:26 2020 +0000

    Daily bump.

commit 7f4f15b2c6b2aa69cc73580766a4b4f7d7ee575f
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Jan 25 00:17:27 2020 +0000

    Daily bump.

commit 7175893ad8010df1270af884a1810476e51a8cd9
Author: Jason Merrill <jason@redhat.com>
Date:   Thu Jan 23 15:45:36 2020 -0500

    c++: Unshare expressions from constexpr cache.
    
    Another place we need to unshare cached expressions.
    
            PR c++/92852 - ICE with generic lambda and reference var.
            * constexpr.c (maybe_constant_value): Likewise.

commit 1cade6b381f41bdd0355b7047365bd29e25cfd99
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Fri Jan 24 11:17:58 2020 +0000

    libstdc++: Fix recent documentation changes
    
    Backport from mainline
    2020-01-20  Jonathan Wakely  <jwakely@redhat.com>
    
            * doc/xml/faq.xml: Fix grammar.
            * doc/xml/manual/appendix_contributing.xml: Improve instructions.
            * doc/xml/manual/spine.xml: Update copyright years.
            * doc/html/*: Regenerate.

commit aa9b03b74681197c23622322b155cfaf48b009f0
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Jan 24 00:17:20 2020 +0000

    Daily bump.

commit 8e55f241ab8c754a2ab8ec2fe39afd9173589401
Author: Dominique d'Humieres <dominiq@gcc.gnu.org>
Date:   Tue Apr 16 15:24:58 2019 +0200

    pr89358_0.C: Replace dg-* with dg-lto-*.
    
    2019-04-16  Dominique d'Humieres  <dominiq@gcc.gnu.org>
    
            * g++.dg/lto/pr89358_0.C: Replace dg-* with dg-lto-*.
    
    (cherry picked from trunk r270390/commit ef9387d8fe79219a106c3f9d6c6a87b0a9065d54)

commit 7828cce6f8aacdc25772b5d681fbf3d2665ddaa9
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Jan 23 00:17:34 2020 +0000

    Daily bump.

commit 7ec6673ada331b9eed0771875e58881049ec6915
Author: Joseph Myers <joseph@codesourcery.com>
Date:   Wed Jan 22 20:49:41 2020 +0000

    Fix ICE with cast of division by zero (PR c/93348).
    
    Bug 93348 reports an ICE on certain cases of casts of expressions that
    may appear only in unevaluated parts of integer constant expressions,
    arising from the generation of nested C_MAYBE_CONST_EXPRs.  This patch
    fixes it by adding a call to remove_c_maybe_const_expr in the
    integer-operands case, as is done in other similar cases.
    
    Bootstrapped with no regressions for x86_64-pc-linux-gnu.
    
            PR c/93348
    gcc/c:
            * c-typeck.c (build_c_cast): Call remove_c_maybe_const_expr on
            argument with integer operands.
    
    gcc/testsuite:
            * gcc.c-torture/compile/pr93348-1.c: New test.
    
    (cherry picked from commit ac68e287fc2e939ae6b45ba7ff04e493982b7f62)

commit 71ae33fbd8cdedb3f6d2e07faddfe0fb47b79da0
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Jan 22 00:17:34 2020 +0000

    Daily bump.

commit 4ff6ead2b7131ff14c2ff44f1f929a33e9e9716e
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Jan 21 00:17:28 2020 +0000

    Daily bump.

commit f35ac7e749a362ef5c892031b13a25fcd38dd2db
Author: Martin Liska <mliska@suse.cz>
Date:   Mon Jan 20 12:12:28 2020 +0100

    Backport f48c6014133c8989702458f9082e34ba6dd326d4
    
            Backport from mainline
            2020-01-16  Martin Liska  <mliska@suse.cz>
    
            * lto-partition.c (lto_balanced_map): Remember
            best_noreorder_pos and then restore to it
            when we revert.

commit d11f667d830fd7a44b5dbd29856c104f4113270a
Author: Eric S. Raymond <esr@thyrsus.com>
Date:   Sun Jan 19 18:40:45 2020 -0800

    Clean up references to Subversion in documentation sources.
    
    Clean up references to SVN in in the GCC docs, redirecting to Git
    documentation as appropriate.
    
    Where references to "the source code repository" rather than a
    specific VCS make sense, I have used them. You might, after
    all, change VCSes again someday.
    
    I have not modified either generated HTML files nor maintainer scripts.
    These changes should be complete with repect to the documentation tree.
    
    2020-01-19  Eric S. Raymond <esr@thyrsus.com>
                Sandra Loosemore  <sandra@codesourcery.com>
    
            Partial backport from mainline:
    
            2020-01-19  Eric S. Raymond <esr@thyrsus.com>
    
            gcc/
            * doc/contribute.texi: Update for SVN -> Git transition.
            * doc/install.texi: Likewise.
    
            libstdc++-v3
            * doc/xml/faq.xml: Update for SVN -> Git transition.
            * doc/xml/manual/appendix_contributing.xml: Likewise.

commit 8dd7f195330bb1d84d9543213ad8ca79a6b1c834
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Jan 20 00:17:31 2020 +0000

    Daily bump.

commit e49898c655da6d71692ea72e9c9fec19ceab38ba
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Jan 19 00:17:26 2020 +0000

    Daily bump.

commit abce20a7c8f79144ac6509446df8f9480b9259c8
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Jan 18 00:17:32 2020 +0000

    Daily bump.

commit bb0763101b88f5f916bb5b2aa13fed9e7b6a8d9e
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Jan 17 00:17:44 2020 +0000

    Daily bump.

commit 40d6a484170b25f05037b3e17a5d60ffc73d8ffc
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Jan 16 00:17:36 2020 +0000

    Daily bump.

commit 67cceb6c538b7a10cd5cf5693bce7fc7a646581d
Author: Joseph Myers <joseph@codesourcery.com>
Date:   Wed Jan 15 22:33:04 2020 +0000

    Fix setting of DECL_CONTEXT in pushdecl (PR c/93072).
    
    Bug 93072 is a case where the C front end (a) wrongly interprets an
    inline declaration at block scope as indicating that DECL_CONTEXT
    should be set for an inline function and (b) this results in an ICE.
    This is a regression resulting from a previous fix of mine for other
    bugs involving such declarations being wrongly interpreted elsewhere
    as nested function declarations.  The fix is similar to the previous
    fix: use TREE_PUBLIC instead of DECL_EXTERNAL in another place as the
    relevant test to determine whether to set DECL_CONTEXT.  (When a
    variable reaches the code in question in pushdecl, the two are
    equivalent.)
    
    Bootstrapped with no regressions for x86_64-pc-linux-gnu.
    
            PR c/93072
    gcc/c:
            * c-decl.c (pushdecl): Use TREE_PUBLIC, not DECL_EXTERNAL, to
            determine whether to set DECL_CONTEXT.
    
    gcc/testsuite:
            * gcc.dg/inline-42.c, gcc.dg/inline-43.c: New tests.
    
    (cherry picked from commit e2346a33b05871fc065815d4cfd531dfa0195507)

commit 54e009926bfbb928eb109704cad6cff4ccd53035
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Wed Jan 15 19:48:16 2020 +0000

    [testsuite, Darwin] Fix failing darwin-version-1.c.
    
    Recent platform linkers will no longer accept linking for a target
    OS version less than 10.4. Recent SDKs no longer have the libgcc_s
    shims used for 10.4 and 10.5. So we need to adjust tests that expect
    these.
    
    2020-01-15  Iain Sandoe  <iain@sandoe.co.uk>
    
    Backport from mainline.
    2020-01-05  Iain Sandoe  <iain@sandoe.co.uk>
    
    * gcc.dg/darwin-version-1.c: Adjust test to use different
    options for Darwin4-9 and Darwin10+.

commit 593c9e3aa19c17139d70bced7d2b2a5cdec612b6
Author: Jim Wilson <jimw@sifive.com>
Date:   Wed May 2 00:24:45 2018 +0000

    Backport: Add support for gcc as git submodule of another repository.
    
            contrib/
            * gcc_update: Check for .git as a file.

commit 13ef7dc2448c0f9d8981577bb5448ee9b6842b1c
Author: Martin Liska <mliska@suse.cz>
Date:   Wed Jan 15 10:41:14 2020 +0100

    Backport d2a0371d2641e85c5e6ca396029be32204d976df
    
            Backport from mainline
            2019-04-14  Jan Hubicka  <hubicka@ucw.cz>
    
            PR lto/89358
            * ipa-devirt.c (skip_in_fields_list_p): New.
            (odr_types_equivalent_p): Use it.
            Backport from mainline
            2019-04-14  Jan Hubicka  <hubicka@ucw.cz>
    
            PR lto/89358
            * g++.dg/lto/pr89358_0.C: New testcase.
            * g++.dg/lto/pr89358_1.C: New testcase.

commit 18640d8cac1ffaaea405dbec7eed40cadfa40946
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Jan 15 00:17:34 2020 +0000

    Daily bump.

commit a2a2a06cafff858f3211a53a6ecc215f5b296565
Author: Joseph Myers <joseph@codesourcery.com>
Date:   Tue Jan 14 16:53:26 2020 +0000

    Fix handling of overflow in C casts in integer constant expressions (PR c/93241).
    
    Bug 93241 reports a case where certain C expressions involving casts,
    that would not be valid in an evaluated part of an integer constant
    expression (because of e.g. involving integer overflow), are wrongly
    rejected in an unevaluated part of an integer constant expression even
    though all the operands and operations are ones that are valid in that
    context.  This is a rejects-valid regression in GCC 4.5 and later
    relative to 4.4 (for some testcases; the one in the bug uses
    _Static_assert which isn't supported in those older releases).
    
    The rule in the C front end is that an expression with those
    properties (valid in an unevaluated part of an integer constant
    expression but not an evaluated part) must be represented either as an
    INTEGER_CST with TREE_OVERFLOW set or as a C_MAYBE_CONST_EXPR with
    C_MAYBE_CONST_EXPR_INT_OPERANDS set.  This patch fixes build_c_cast to
    check for that case and call note_integer_operands as needed.
    
    Bootstrapped with no regressions for x86_64-pc-linux-gnu.
    
            PR c/93241
    gcc/c:
            * c-typeck.c (build_c_cast): Check for expressions with integer
            operands that can occur in an unevaluated part of an integer
            constant expression and call note_integer_operands as needed.
    
    gcc/testsuite:
            * gcc.dg/c11-static-assert-10.c, gcc.dg/c99-const-expr-15.c: New
            tests.
    
    (cherry picked from commit 3d77686d2eddf76d3498169d0ca5653db45a8662)

commit e4c9309ab60fb002daecdfa71c73d1f5804c0a65
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Jan 14 00:17:45 2020 +0000

    Daily bump.

commit a8d3c5702a422025e42b22ce860e245b50ff57a2
Author: Joseph Myers <joseph@codesourcery.com>
Date:   Mon Jan 13 22:15:01 2020 +0000

    Fix libdecnumber handling of non-canonical BID significands (PR middle-end/91226).
    
    As reported in bug 91226, the libdecnumber code used on the host to
    interpret DFP values in the BID encoding fails, for _Decimal64 and
    _Decimal128, to check for the case where a significand is too large
    and so specified in IEEE 754 to be a non-canonical encoding of the
    zero significand.  This patch adds the required handling of that case,
    together with tests both using -O2 (testing this host code) and -O0
    (testing libgcc code, which already worked before the patch); the
    tests also cover _Decimal32, which already had the required check.
    
    In the _Decimal128 case, where the code previously completely ignored
    the case where the first four bits of the combination field are 1100,
    1101 or 1110, the logic for determining the correct quantum exponent
    in that case is also newly added by this patch, so tests are added for
    that as well (again, libgcc already handled it correctly when the
    conversion was done at runtime rather than at compile time).
    
    Bootstrapped with no regressions for x86_64-pc-linux-gnu.
    
            PR middle-end/91226
    libdecnumber:
            * bid/bid2dpd_dpd2bid.c (_bid_to_dpd64): Handle non-canonical
            significands.
            (_bid_to_dpd128): Likewise.  Check for case where combination
            field starts 1100, 1101 or 1110.
    
    gcc/testsuite:
            * gcc.dg/dfp/bid-non-canonical-d128-1.c,
            gcc.dg/dfp/bid-non-canonical-d128-2.c,
            gcc.dg/dfp/bid-non-canonical-d128-3.c,
            gcc.dg/dfp/bid-non-canonical-d128-4.c,
            gcc.dg/dfp/bid-non-canonical-d32-1.c,
            gcc.dg/dfp/bid-non-canonical-d32-2.c,
            gcc.dg/dfp/bid-non-canonical-d64-1.c,
            gcc.dg/dfp/bid-non-canonical-d64-2.c: New tests.
    
    (cherry picked from commit 0fad54f0a88160e81c3150b63c91fd9809665474)

commit c5adae9b602cc7001facc39def7a4731b599ae86
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Mon Jan 13 16:25:01 2020 +0000

    libstdc++: Fix documentation claiming to refer to mainline
    
            * doc/xml/manual/status_cxx1998.xml: Replace incorrect statement
            about documenting mainline.
            * doc/xml/manual/status_cxx2011.xml: Likewise.
            * doc/xml/manual/status_cxx2014.xml: Likewise.
            * doc/xml/manual/status_cxx2017.xml: Likewise.
            * doc/xml/manual/status_cxxtr1.xml: Likewise.
            * doc/xml/manual/status_cxxtr24733.xml: Likewise.
            * doc/html/*: Regenerate.

commit 91cd6528d2c4241a9dad88d6876e897598631be9
Author: Joseph Myers <joseph@codesourcery.com>
Date:   Mon Jan 13 16:02:22 2020 +0000

    Update gcc_release to mainline version.
    
    Will be needed for building subsequent releases on this branch from
    git.
    
            Backport:
    
            2020-01-13  Joseph Myers  <joseph@codesourcery.com>
    
            * gcc_release: Use git instead of SVN.
    
            2019-11-20  Janne Blomqvist  <jb@gcc.gnu.org>
    
            * gcc_release: Use https for gcc.gnu.org.
    
            2018-10-26  Jakub Jelinek  <jakub@redhat.com>
    
            * gcc_release (error, inform): Use $@ instead of $1.
            (build_sources): Check for ^[[:blank:]]*GCC in both index.html
            and changes.html, rather than for GCC in one and ^GCC in another one.
    
            2018-05-03  Jakub Jelinek  <jakub@redhat.com>
    
            PR other/85622
            * gcc_release: For -f, verify contrib/gennews has the major version
            pages listed and both index.html and changes.html have been updated
            for the new release.

commit 58586b8d85d460cdc7aff985b8fe2126adb421b9
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Jan 13 12:37:05 2020 +0000

    Daily bump.

commit 40f2daaeb4b1e7b34faf689ee2b5880eaeb1c9ef
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Jan 11 00:16:05 2020 +0000

    Daily bump.
    
    From-SVN: r280153

commit cb7410059dc9afc07f2ef4e241b4f3a6c481f6e7
Author: Martin Jambor <mjambor@suse.cz>
Date:   Fri Jan 10 23:46:46 2020 +0100

    IPA-CP: Remove bogus static keyword (PR 92971)
    
    2020-01-10  Martin Jambor  <mjambor@suse.cz>
    
            Backport from mainline
            2019-12-17  Martin Jambor  <mjambor@suse.cz>
    
            PR ipa/92971
            * ipa-cp.c (cgraph_edge_brings_all_agg_vals_for_node): Fix
              definition of values, release memory on exit.
    
            testsuite/
            * gcc.dg/ipa/ipcp-agg-12.c: New test.
    
    From-SVN: r280151

commit 14a72f37f1febd3ff2925a12a309fde681435a3f
Author: Tobias Burnus <burnus@gcc.gnu.org>
Date:   Fri Jan 10 16:05:06 2020 +0100

    Fortran] PR84135 fix merging dimension into codimension array spec
    
            Backported from mainline
            2020-01-09  Tobias Burnus  <tobias@codesourcery.com>
    
            PR fortran/84135
            * array.c (gfc_set_array_spec): Fix shifting of codimensions
            when adding a dimension.
            * decl.c (merge_array_spec): Ditto. Fix using correct codimensions.
    
            Backported from mainline
            2020-01-09  Tobias Burnus  <tobias@codesourcery.com>
    
            PR fortran/84135
            * gfortran.dg/coarray/codimension_3.f90: New.
    
    From-SVN: r280113

commit b52cff35c25707c9616febad639b15989fa8f0d3
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Jan 10 00:16:06 2020 +0000

    Daily bump.
    
    From-SVN: r280094

commit 69551eba711f0baa531cbe848ccd47e3da4a918a
Author: Martin Liska <mliska@suse.cz>
Date:   Thu Jan 9 11:32:59 2020 +0100

    Backport r279306
    
    2020-01-09  Martin Liska  <mliska@suse.cz>
    
            Backport from mainline
            2019-12-12  Jan Hubicka  <hubicka@ucw.cz>
    
            * ipa-prop.c (read_ipcp_transformation_info): Fix undefined ordering
            of execution of function call parameters.
    
    From-SVN: r280036

commit dea0d8ecc0241322d123f3bd56b759d8bc5c6d11
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Jan 9 00:16:07 2020 +0000

    Daily bump.
    
    From-SVN: r280022

commit ec79804a746c0ee40a8812ae6709e66a03266509
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Wed Jan 8 21:51:38 2020 +0000

    libstdc++: Fix error handling in filesystem::remove_all (PR93201)
    
    When recursing into a directory, any errors that occur while removing a
    directory entry are ignored, because the subsequent increment of the
    directory iterator clears the error_code object.
    
    This fixes that bug by checking the result of each recursive operation
    before incrementing. This is a change in observable behaviour, because
    previously other directory entries would still be removed even if one
    (or more) couldn't be removed due to errors. Now the operation stops on
    the first error, which is what the code intended to do all along. The
    standard doesn't specify what happens in this case (because the order
    that the entries are processed is unspecified anyway).
    
            PR libstdc++/93201
            * src/c++17/fs_ops.cc (remove_all(const path&, error_code&)): Check
            result of recursive call before incrementing iterator.
            * src/filesystem/ops.cc (remove_all(const path&, error_code&)):
            Likewise.
            * testsuite/27_io/filesystem/operations/remove_all.cc: Check errors
            are reported correctly.
            * testsuite/experimental/filesystem/operations/remove_all.cc: Likewise.
    
    From-SVN: r280021

commit 2c6a8b0a156849909b5022a754b24bcda33900ce
Author: Georg-Johann Lay <avr@gjlay.de>
Date:   Wed Jan 8 09:52:03 2020 +0000

    backport: Add -nodevicespecs option for avr.
    
    gcc/
            Backport from 2020-01-08 trunk r279995.
            Add -nodevicespecs option for avr.
            PR target/93182
            * config/avr/avr.opt (-nodevicespecs): New driver option.
            * config/avr/driver-avr.c (avr_devicespecs_file): Only issue
            "-specs=device-specs/..." if that option is not set.
            * doc/invoke.texi (AVR Options) <-nodevicespecs>: Document.
    
    From-SVN: r279997

commit 0aa31957250c94120beca189593930926af00a86
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Jan 8 00:16:10 2020 +0000

    Daily bump.
    
    From-SVN: r279981

commit 9edcc3c6ad5e4b2e19b6c7fbd79b3ea984ef3a4f
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Jan 7 00:16:04 2020 +0000

    Daily bump.
    
    From-SVN: r279930

commit a9f12537ed14f17060884875a8ba759173c5ae27
Author: John David Anglin <danglin@gcc.gnu.org>
Date:   Mon Jan 6 23:57:41 2020 +0000

    pa.md: Revert change to use ordered_comparison_operator instead of...
    
            * config/pa/pa.md: Revert change to use ordered_comparison_operator
            instead of cmpib_comparison_operator in cmpib patterns.
            * config/pa/predicates.md (cmpib_comparison_operator): Revert removal
            of cmpib_comparison_operator.  Revise comment.
    
    From-SVN: r279929

commit d859297039e0ab5c4e5cc13a3deb727406f59a63
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Jan 6 00:16:05 2020 +0000

    Daily bump.
    
    From-SVN: r279890

commit 18855bc22199d0ab46a88e2807522d35adf7baf6
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Jan 5 00:16:06 2020 +0000

    Daily bump.
    
    From-SVN: r279881

commit dccc4fe7ceef1b9556d0258fbc6fae4ecf01b0ca
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Jan 4 00:16:07 2020 +0000

    Daily bump.
    
    From-SVN: r279874

commit 0f1bcdbea744266c5c36cdbdcc3a7aef138b718b
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Jan 3 00:16:23 2020 +0000

    Daily bump.
    
    From-SVN: r279850

commit baa18f1144a27e99ab203ee5989ff92fe6711f03
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Jan 2 00:16:10 2020 +0000

    Daily bump.
    
    From-SVN: r279825

commit cba301178fd27dba16201ff42626ecc5f2ad7b5e
Author: John David Anglin <danglin@gcc.gnu.org>
Date:   Wed Jan 1 20:59:14 2020 +0000

    re PR target/93111 (FAIL: gfortran.fortran-torture/compile/pr32663.f,  -O3 -g   (internal compiler error))
    
            PR target/93111
            * config/pa/pa.md (scc): Use ordered_comparison_operator instead of
            comparison_operator in B and S integer comparisons.  Likewise, use
            ordered_comparison_operator instead of cmpib_comparison_operator in
            cmpib patterns.
            * config/pa/predicates.md (cmpib_comparison_operator): Remove.
    
    From-SVN: r279820

commit a5def6685e08cfd0cbd818b576e9fe301de6f954
Author: John David Anglin <danglin@gcc.gnu.org>
Date:   Wed Jan 1 17:05:41 2020 +0000

    backport: re PR libgomp/93066 (libgomp/target.c:525:46: error: expected expression before ')' token)
    
            Backport from mainline
            2019-12-30  John David Anglin  <danglin@gcc.gnu.org>
    
            PR libgomp/93066
            * inclhack.def (hpux_c99_inttypes3): Fix defines for INTPTR_MAX
            and UINTPTR_MAX, and missing define for SIZE_MAX.
            * fixincl.x: Regenerate.
            * tests/base/inttypes.h: Update for above fix.
    
    From-SVN: r279815

commit 5ef425172e8cc65923708733ec63b98bcd23d140
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Jan 1 00:16:05 2020 +0000

    Daily bump.
    
    From-SVN: r279806

commit fb74c30580cd2a7d5949c77c630a589e2a3e4bcc
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Dec 31 00:16:27 2019 +0000

    Daily bump.
    
    From-SVN: r279799

commit 2b0ace9e475afad48b2aa25f7cc84bf35a40fae3
Author: Thomas Koenig <tkoenig@gcc.gnu.org>
Date:   Mon Dec 30 15:29:30 2019 +0000

    Catch division by zero errors in array sizes.
    
    2019-12-30  Thomas Koenig  <tkoenig@gcc.gnu.org>
    
            Backport from trunk
            PR fortran/92961
            * gfortran.h (gfc_seen_div0): Add declaration.
            * arith.h (gfc_seen_div0): Add definition.
            (eval_intrinsic): For integer division by zero, set gfc_seen_div0.
            * decl.c (variable_decl):  If resolution resp. simplification
            fails for array spec and a division of zero error has been
            seen, return MATCH_ERROR.
    
    2019-12-30  Thomas Koenig  <tkoenig@gcc.gnu.org>
    
            Backport from trunk
            PR fortran/92961
            * gfortran.dg/arith_divide_2.f90: New test.
    
    From-SVN: r279770

commit 836e4f77fb4ad61a53dd279eb23ba119dbbc048c
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Dec 30 00:16:05 2019 +0000

    Daily bump.
    
    From-SVN: r279759

commit b5cea4229530da8e4a5acb733d9e2d08eb94a158
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Dec 29 00:16:09 2019 +0000

    Daily bump.
    
    From-SVN: r279749

commit 420ea6251d0fe971bcdeaeb65fe9d80c4183f90d
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Sat Dec 28 20:39:54 2019 +0000

    [Darwin, PPC] Use Darwin9 bundle header for Rosetta builds.
    
    This fixes a build fail for PPC on Darwin10.
    
    On Darwin10 it's possible to make a 32b PPC build using the
    'Rosetta' emulator. However, these builds need to make use of
    Darwin9 crts (for exes, dylibs and bundles). This adds the
    change to cater for bundles.
    
    gcc/ChangeLog:
    
    2019-12-28  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-12-14 Iain Sandoe <iain@sandoe.co.uk>
    
            * config/darwin.h (DARWIN_EXTRA_SPECS): Add new
            bundle spec. (DARWIN_BUNDLE1_SPEC): New.
            (STARTFILE_SPEC): Use darwin bundle spec.
            * config/rs6000/darwin.h (DARWIN_BUNDLE1_SPEC): New.
            (DARWIN_DYLIB1_SPEC): Delete duplicate.
    
    From-SVN: r279748

commit defd8f3aef8812b660bd7f8d025dfd853ed2f653
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Dec 28 00:16:07 2019 +0000

    Daily bump.
    
    From-SVN: r279744

commit 1c5c6009088a969470155e673a3838a717d25241
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Dec 27 00:16:06 2019 +0000

    Daily bump.
    
    From-SVN: r279737

commit e20d9585cd700fe7b1b1dfe229d46693f287c6d0
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Dec 26 00:16:24 2019 +0000

    Daily bump.
    
    From-SVN: r279733

commit 8ef3461e35943b931e6ec6fcf595a97875be4405
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Dec 25 00:16:06 2019 +0000

    Daily bump.
    
    From-SVN: r279728

commit 258649bb98d10cd34586415b19abeb9c055c33b9
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Dec 24 00:16:07 2019 +0000

    Daily bump.
    
    From-SVN: r279721

commit 24fb9cb27d3547753477146d5f1c12238819f2c5
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Dec 23 00:16:05 2019 +0000

    Daily bump.
    
    From-SVN: r279713

commit deb7e6d724ef5dd5d9f55bdddca6a1c1581754a2
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Dec 22 00:16:06 2019 +0000

    Daily bump.
    
    From-SVN: r279703

commit 55fa94d955b850edd77922d4f867f01b85501b01
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Dec 21 00:16:08 2019 +0000

    Daily bump.
    
    From-SVN: r279688

commit 3deecf67faeb08a97c10dd4c0268778df2ac40e7
Author: Roman Zhuykov <zhroma@ispras.ru>
Date:   Fri Dec 20 15:52:02 2019 +0000

    Backport: rename tests to reference the correct PR
    
    2019-12-20  Roman Zhuykov  <zhroma@ispras.ru>
    
            * gcc.dg/pr92951-1.c: Rename to ...
            * gcc.dg/pr92591-1.c: ... this.
            * gcc.dg/pr92951-2.c: Rename to ...
            * gcc.dg/pr92591-2.c: ... this.
    
    From-SVN: r279647

commit 87bb01276ad6ac77a7a17fa7d6e045db3e571f9e
Author: Roman Zhuykov <zhroma@ispras.ru>
Date:   Fri Dec 20 15:07:58 2019 +0000

    modulo-sched: backport PR92591 fix from mainline
    
    2019-12-20  Roman Zhuykov  <zhroma@ispras.ru>
    
    modulo-sched: fix branch rescheduling issue (PR92591)
    
            PR rtl-optimization/92591
            * modulo-sched.c (ps_add_node_check_conflicts): Improve checking
            for history > 0 case.
            * params.def (sms-dfa-history): Limit to 16.
    
    gcc/testsuite:
    
            PR rtl-optimization/92591
            * gcc.dg/pr92951-1.c: New test.
            * gcc.dg/pr92951-2.c: New test.
    
    From-SVN: r279643

commit 386444302fbba0d034d5250e6f751d0bf8fb7827
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Dec 20 00:16:12 2019 +0000

    Daily bump.
    
    From-SVN: r279617

commit fd084103a5affa3f0d1ab2d83352806172bd6fef
Author: Georg-Johann Lay <gjl@gcc.gnu.org>
Date:   Thu Dec 19 09:31:07 2019 +0000

    Backport support for some AVR devices from avrxmega3 family
            from SVN trunk r279309, r278387, r278389, r278478.
    
            PR target/92545
            * config/avr/avr-arch.h (avr_mcu_t) <flash_pm_offset>: New field.
            * config/avr/avr-devices.c (avr_mcu_types): Adjust initializers.
            * config/avr/avr-mcus.def (AVR_MCU): Add respective field.
            * config/avr/gen-avr-mmcu-specs.c (print_mcu)
            <*cpp, *cpp_mcu, *cpp_avrlibc, *link_pm_base_address>: Emit code
            for spec definitions.
            * config/avr/gen-avr-mmcu-texi.c: Rewrite.
            * doc/avr-mmcu.texi: Regenerate.
    
    From-SVN: r279565

commit 93f40cfb336ac47ca9e400714bfa093d091a4df5
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Dec 19 00:16:05 2019 +0000

    Daily bump.
    
    From-SVN: r279558

commit 9cb86907270043661d747d4e842c8c91b943800e
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Dec 18 00:16:19 2019 +0000

    Daily bump.
    
    From-SVN: r279481

commit 59089356ae2a6dbdc6e5959c9a4c00404896c8c4
Author: Andreas Krebbel <krebbel@linux.ibm.com>
Date:   Tue Dec 17 08:41:54 2019 +0000

    Fix PR92950: Wrong code emitted for movv1qi
    
    The backend emits 16 bit memory loads for single element character
    vector.  As a result the character will not be right justified in the
    GPR.
    
    gcc/ChangeLog:
    
    2019-12-17  Andreas Krebbel  <krebbel@linux.ibm.com>
    
            Backport from mainline
            2019-12-16  Andreas Krebbel  <krebbel@linux.ibm.com>
    
            PR target/92950
            * config/s390/vector.md ("mov<mode>" for V_8): Replace lh, lhy,
            and lhrl with llc.
    
    gcc/testsuite/ChangeLog:
    
    2019-12-17  Andreas Krebbel  <krebbel@linux.ibm.com>
    
            Backport from mainline
            2019-12-16  Andreas Krebbel  <krebbel@linux.ibm.com>
    
            PR target/92950
            * gcc.target/s390/vector/pr92950.c: New test.
    
    From-SVN: r279454

commit 9dda0b3739c3feed1e9aad19893c3dbd608dbd3c
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Dec 17 00:16:04 2019 +0000

    Daily bump.
    
    From-SVN: r279448

commit aa1bf6c693d689500e9421c958e3cdc479d9717b
Author: Jason Merrill <jason@redhat.com>
Date:   Mon Dec 16 18:23:43 2019 -0500

    PR c++/92859 - ADL and bit-field.
    
    We also need unlowered_expr_type when considering associated types for ADL.
    
            * name-lookup.c: Use unlowered_expr_type.
    
    From-SVN: r279446

commit be35b24fc2b40f7a0967270aa9be69c2d89f46f7
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Dec 16 00:16:04 2019 +0000

    Daily bump.
    
    From-SVN: r279406

commit 7c2c4c7871ec5717a98820b3325b59c0a42b83a0
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Dec 15 00:16:05 2019 +0000

    Daily bump.
    
    From-SVN: r279400

commit 3bea7e58938df8b9d43fff1643b340adb8c612fd
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Dec 14 00:16:12 2019 +0000

    Daily bump.
    
    From-SVN: r279389

commit 1fb26c7c7dbfc824a554e321ad6c0246c83dff39
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Dec 13 00:16:06 2019 +0000

    Daily bump.
    
    From-SVN: r279328

commit d35fca0c261ffc2345c9fe41a3ddea65e9cfb469
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Dec 12 00:16:08 2019 +0000

    Daily bump.
    
    From-SVN: r279268

commit e1fffe89e2c9bb8fe5732e023151b2da7fbb0618
Author: Tobias Burnus <tobias@codesourcery.com>
Date:   Wed Dec 11 13:39:24 2019 +0000

    libgomp – spelling fixes, incl. omp_lib.h.in
    
            Backported from mainline
            2019-12-11  Tobias Burnus  <tobias@codesourcery.com>
    
            * omp_lib.h.in: Fix spelling of function declaration
            omp_get_cancell(l)ation.
    
    From-SVN: r279222

commit 332cdb6b36631e2ccad01a30afccedf99155b642
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Dec 11 00:16:09 2019 +0000

    Daily bump.
    
    From-SVN: r279208

commit a3818678db8fbe831a27254d6ad45d326a7adcf2
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Dec 10 00:16:04 2019 +0000

    Daily bump.
    
    From-SVN: r279148

commit 5473d7afb4ff0271460eabcbbb65bdaa6cca52da
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Dec 9 00:16:05 2019 +0000

    Daily bump.
    
    From-SVN: r279102

commit a94764f6710f9a6ce521f7e9158a28bce570ecfe
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Dec 8 00:16:13 2019 +0000

    Daily bump.
    
    From-SVN: r279082

commit fb0d5c87ca50547d24c6bb085f22844fe42e5228
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Dec 7 00:16:05 2019 +0000

    Daily bump.
    
    From-SVN: r279070

commit 8562d856425c29a8c959a1931702d225fb8648f8
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Dec 6 00:16:34 2019 +0000

    Daily bump.
    
    From-SVN: r279026

commit 06a473baacbda6796141a2f9e04372800dff062d
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Dec 5 00:16:08 2019 +0000

    Daily bump.
    
    From-SVN: r278978

commit 58292d3d925d3ec6ae3fab5e738b6d0bced0a948
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Dec 4 00:16:31 2019 +0000

    Daily bump.
    
    From-SVN: r278952

commit 8a9a96db2cca5487bd8d7a7517e7772b465296fa
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Dec 3 00:16:04 2019 +0000

    Daily bump.
    
    From-SVN: r278913

commit ed1affa2982bca0645762adc9c5493fbf768526f
Author: Wilco Dijkstra <wdijkstr@arm.com>
Date:   Mon Dec 2 14:55:03 2019 +0000

    [AArch64] Backport Cortex-A76, Ares and Neoverse N1 cpu names
    
    Add support for Cortex-A76, Ares and Neoverse N1 cpu names in GCC8 branch.
    
        gcc/
            * config/aarch64/aarch64-cores.def (ares): Define.
            (cortex-a76): Likewise.
            (neoverse-n1): Likewise.
            * config/aarch64/aarch64-tune.md: Regenerate.
            * doc/invoke.texi (AArch64 Options): Document ares, cortex-a76 and
            neoverse-n1.
    
    From-SVN: r278899

commit bbd3ae127507164ae2a929e166142fa8df939b0f
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Dec 2 00:16:05 2019 +0000

    Daily bump.
    
    From-SVN: r278887

commit 9bd3e81dae469dc7c78072b8bf3a788a15b3c1ef
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Dec 1 00:16:18 2019 +0000

    Daily bump.
    
    From-SVN: r278881

commit c44cd41879684cca1f53c6a6d60e2afc371e4263
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Nov 30 00:16:13 2019 +0000

    Daily bump.
    
    From-SVN: r278866

commit 0ac3d9f6a05bb9c26db850f0fd0dd2988b093609
Author: Harald Anlauf <anlauf@gmx.de>
Date:   Fri Nov 29 20:58:39 2019 +0000

    backport: re PR fortran/92629 (internal compiler error: in convert_mpz_to_unsigned, at fortran/simplify.c:173)
    
    2019-11-29  Harald Anlauf  <anlauf@gmx.de>
    
            Backport from mainline
            PR fortran/92629
            * simplify.c (convert_mpz_to_unsigned): Skip assert for argument
            range when -fno-range-check is specified.
    
            PR fortran/92629
            * gfortran.dg/pr92629.f90: New testcase.
    
    From-SVN: r278863

commit 5525d4720ff07b95f199c601f4cd93497bc7e4a0
Author: David Malcolm <dmalcolm@redhat.com>
Date:   Fri Nov 29 17:22:30 2019 +0000

    aarch64: fix use-after-free in -march=native (PR driver/89014)
    
    Running:
      $ valgrind ./xgcc -B. -c test.c -march=native
    on aarch64 shows a use-after-free in host_detect_local_cpu due
    to the std::string result of aarch64_get_extension_string_for_isa_flags
    only living until immediately after a c_str call.
    
    This leads to corrupt "-march=" values being passed to cc1.
    
    This patch fixes the use-after-free, though it appears to also need
    Tamar's patch here:
      https://gcc.gnu.org/ml/gcc-patches/2018-12/msg01302.html
    in order to generate valid values for cc1.  This may have worked by
    accident in the past, if the corrupt "-march=" value happened to be
    0-terminated in the "right" place; with this patch it now appears
    to reliably break without Tamar's patch.
    
            Backport from mainline
            2019-01-23  David Malcolm  <dmalcolm@redhat.com>
    
            PR driver/89014
            * config/aarch64/driver-aarch64.c (host_detect_local_cpu): Fix
            use-after-free of the result of
            aarch64_get_extension_string_for_isa_flags.
    
    From-SVN: r278854

commit b209d24a7860a43c2d235313e4160d43c61c2a0b
Author: Tobias Burnus <burnus@gcc.gnu.org>
Date:   Fri Nov 29 14:16:31 2019 +0100

    Fix testcase - was missing -fopenacc
    
            Backport from mainline
            2019-11-29 Tobias Burnus  <tobias@codesourcery.com>
    
            PR ipa/84963
            * gfortran.dg/goacc/pr84963.f90: Use dg-additional-options not
            dg-options as otherwise -fopenacc is not used.
    
    From-SVN: r278840

commit 813cccb96ffe788a3c800401db46d364318a1a17
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Nov 29 00:16:04 2019 +0000

    Daily bump.
    
    From-SVN: r278823

commit 4805a31e0c0fabac01abb91f8861f2d1dd249687
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Nov 28 00:16:04 2019 +0000

    Daily bump.
    
    From-SVN: r278791

commit 2d153545c07dc7552dec6546820970fa2311c234
Author: Jerry DeLisle <jvdelisle@gcc.gnu.org>
Date:   Wed Nov 27 01:05:04 2019 +0000

    Fix log entry.
    
    From-SVN: r278754

commit 5c11124e5c786097be5189732f1d82598806a59c
Author: Jerry DeLisle <jvdelisle@gcc.gnu.org>
Date:   Wed Nov 27 00:50:51 2019 +0000

    backport: re PR libfortran/92100 (Formatted stream IO irreproducible read with binary data in file)
    
    2019-11-26  Jerry DeLisle  <jvdelisle@gcc.ngu.org>
    
            Backport from mainline
            PR fortran/92100
            io/transfer.c (data_transfer_init): Use fbuf_reset
            instead of fbuf_flush before the seek. Note that fbuf_reset
            calls fbuf_flush and adjusts fbuf pointers.
    
            gfortran.dg/streamio_18.f90: New test.
    
    From-SVN: r278753

commit f2ab2836883c764b73771c3fff4df9dc84f5bdd8
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Nov 27 00:16:05 2019 +0000

    Daily bump.
    
    From-SVN: r278749

commit 6fcac22f0d6c3f68b8d2b9c3a044944c56ad6028
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Nov 26 00:16:05 2019 +0000

    Daily bump.
    
    From-SVN: r278714

commit 2f40ab856bdcb33eaef52795150850df18fa1abf
Author: Thomas Koenig <tkoenig@gcc.gnu.org>
Date:   Mon Nov 25 22:26:26 2019 +0000

    Fix EOF handling for arrays.
    
    2019-11-25  Thomas Koenig  <tkoenig@gcc.gnu.org>
        Harald Anlauf <anlauf@gmx.de>
    
        Backport from trunk
        PR fortran/92569
        * io/transfer.c (transfer_array_inner):  If position is
        at AFTER_ENDFILE in current unit, return from data loop.
    
    2019-11-25  Thomas Koenig  <tkoenig@gcc.gnu.org>
        Harald Anlauf <anlauf@gmx.de>
    
        Backport from trunk
        PR fortran/92569
        * gfortran.dg/eof_6.f90: New test.
    
    
    Co-Authored-By: Harald Anlauf <anlauf@gmx.de>
    
    From-SVN: r278710

commit 3c4f5c79cd11929ca11f194a9c11a63f1c294524
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Mon Nov 25 10:31:20 2019 +0000

    re PR ada/92575 (couple of suspicious assignments in expect.c)
    
            PR ada/92575
            * expect.c (__gnat_expect_poll [VMS, HPUX]): Fix typo.
    
    From-SVN: r278673

commit 39d2b1b27810bdb3e700b123fe266df33f4087a7
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Nov 25 00:16:09 2019 +0000

    Daily bump.
    
    From-SVN: r278661

commit d776a554d21dba929d39e889a32cf8dababbb9fb
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Nov 24 00:16:05 2019 +0000

    Daily bump.
    
    From-SVN: r278651

commit d91ab78b478f02d0dca26192ef78e2cf2ff331e1
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Nov 23 00:16:12 2019 +0000

    Daily bump.
    
    From-SVN: r278636

commit f238ecf67fc6a12b072881a061ef72fd3156699f
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Nov 22 00:16:29 2019 +0000

    Daily bump.
    
    From-SVN: r278605

commit 9fe0f3b6468871448bf40751a4f30cf20118ce6a
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Nov 21 18:21:46 2019 +0100

    re PR tree-optimization/91355 (optimized code does not call destructor while unwinding after exception)
    
            PR tree-optimization/91355
            * tree-ssa-sink.c (select_best_block): Use >= rather than >
            for early_bb scaled count with best_bb count comparison.
    
            * g++.dg/torture/pr91355.C: New test.
    
    From-SVN: r278587

commit b08a8b50de9ddf84f93c12d7571b455d09c4e436
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Nov 21 18:20:47 2019 +0100

    backport: re PR middle-end/90840 (ICE in simplify_subreg, at simplify-rtx.c:6441)
    
            Backported from mainline
            2019-11-20  Jakub Jelinek  <jakub@redhat.com>
    
            PR middle-end/90840
            * expmed.c (store_bit_field_1): Handle the case where op0 is not a MEM
            and has a mode that doesn't have corresponding integral type.
    
            * gcc.c-torture/compile/pr90840.c: New test.
    
    From-SVN: r278586

commit ba8fb20d5aafa5c81f5d5a6dcfc1c35c631c6713
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Nov 21 18:20:04 2019 +0100

    backport: re PR target/90867 (Multiplication or typecast of integer and double always zero when...)
    
            Backported from mainline
            2019-11-20  Jakub Jelinek  <jakub@redhat.com>
    
            PR target/90867
            * config/i386/i386.c (ix86_valid_target_attribute_tree): Don't
            clear opts->x_ix86_isa_flags{,2} here...
            (ix86_valid_target_attribute_inner_p): ... but here when seeing
            arch=.  Also clear opts->x_ix86_isa_flags{,2}_explicit.
    
            * gcc.target/i386/pr90867.c: New test.
    
    From-SVN: r278585

commit 02a720280ff33a3b4b70cd29cc6feb9fc40c7636
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Nov 21 18:18:55 2019 +0100

    backport: re PR c/90898 (ICE in insert_clobber_before_stack_restore, at tree-ssa-ccp.c:2112)
    
            Backported from mainline
            2019-11-20  Jakub Jelinek  <jakub@redhat.com>
    
            PR c/90898
            * tree-ssa-ccp.c (insert_clobber_before_stack_restore): Remove
            assertion.
            (insert_clobbers_for_var): Fix a typo in function comment.
    
            * gcc.dg/pr90898.c: New test.
    
    From-SVN: r278584

commit 55d738f529e183d1f17678abe9492a5e93c7df2e
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Nov 21 18:18:17 2019 +0100

    backport: re PR middle-end/91450 (__builtin_mul_overflow(A,B,R) wrong code if product < 0, *R is unsigned, and !(A&B))
    
            Backported from mainline
            2019-11-19  Jakub Jelinek  <jakub@redhat.com>
    
            PR middle-end/91450
            * internal-fn.c (expand_mul_overflow): For s1 * s2 -> ur, if one
            operand is negative and one non-negative, compare the non-negative
            one against 0 rather than comparing s1 & s2 against 0.  Otherwise,
            don't compare (s1 & s2) == 0, but compare separately both s1 == 0
            and s2 == 0, unless one of them is known to be negative.  Remove
            tem2 variable, use tem where tem2 has been used before.
    
            * gcc.c-torture/execute/pr91450-1.c: New test.
            * gcc.c-torture/execute/pr91450-2.c: New test.
    
    From-SVN: r278583

commit 7b39bb39fea9bf53ab264db59c31ca95ab53e510
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Nov 21 18:17:20 2019 +0100

    backport: re PR middle-end/92384 (Empty class instances have different equal testing result among GCC versions)
    
            Backported from mainline
            2019-11-08  Jakub Jelinek  <jakub@redhat.com>
    
            PR c++/92384
            * function.c (assign_parm_setup_block, assign_parm_setup_stack): Don't
            copy TYPE_EMPTY_P arguments from data->entry_parm to data->stack_parm
            slot.
            (assign_parms): For TREE_ADDRESSABLE parms with TYPE_EMPTY_P type
            force creation of a unique data.stack_parm slot.
    
            * g++.dg/torture/pr92384.C: New test.
    
    From-SVN: r278582

commit 64d2ed1ddc9f825deac610a7473b36a1f0c551e4
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Nov 21 18:15:56 2019 +0100

    backport: re PR preprocessor/92296 (internal compiler error: Segmentation fault  #pragma push_macro("__LINE__"))
    
            Backported from mainline
            2019-10-31  Jakub Jelinek  <jakub@redhat.com>
    
            PR preprocessor/92296
            * internal.h (struct def_pragma_macro): Add is_builtin bitfield.
            (_cpp_restore_special_builtin): Declare.
            * init.c (_cpp_restore_special_builtin): New function.
            * directives.c (do_pragma_push_macro): For NT_MACRO with NODE_BUILTIN
            set is_builtin and don't try to grab definition.
            (cpp_pop_definition): Use _cpp_restore_special_builtin to restore
            builtin macros.
    
            * c-c++-common/cpp/pr92296-1.c: New test.
            * c-c++-common/cpp/pr92296-2.c: New test.
    
    From-SVN: r278581

commit eb84792b2d843473e6c6aa4816c0d28dadccc348
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Nov 21 18:15:01 2019 +0100

    backport: re PR tree-optimization/85887 (Missing DW_TAG_lexical_block PC range)
    
            Backported from mainline
            2019-10-22  Jakub Jelinek  <jakub@redhat.com>
    
            PR tree-optimization/85887
            * decl.c (expand_static_init): Drop ECF_LEAF from __cxa_guard_acquire
            and __cxa_guard_release.
    
    From-SVN: r278580

commit dbbfe2bc9b0e32bc130f9003a2ffa52d41681ed5
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Nov 21 18:14:25 2019 +0100

    backport: re PR c++/92201 (ICE: ‘verify_gimple’ failed with -std=c++2a)
    
            Backported from mainline
            2019-10-29  Jakub Jelinek  <jakub@redhat.com>
    
            PR c++/92201
            * cp-gimplify.c (cp_gimplify_expr): If gimplify_to_rvalue changes the
            function pointer type, re-add cast to the original one.
    
            * g++.dg/other/pr92201.C: New test.
    
    From-SVN: r278579

commit 5b1242e549ddf300caa340b1c0c00d71714b87bd
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Nov 21 18:13:41 2019 +0100

    backport: re PR tree-optimization/92056 (ice in expr_object_size, at tree-object-si ze.c:675 with -O3)
    
            Backported from mainline
            2019-10-17  Jakub Jelinek  <jakub@redhat.com>
    
            PR tree-optimization/92056
            * tree-object-size.c (cond_expr_object_size): Return early if then_
            processing resulted in unknown size.
    
            * gcc.c-torture/compile/pr92056.c: New test.
    
    From-SVN: r278578

commit cc38ffbc579b5fc1d52f863b8f87f78135d9b02c
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Nov 21 18:12:57 2019 +0100

    backport: re PR c++/91974 (function not sequenced before function argument)
    
            Backported from mainline
            2019-10-04  Jakub Jelinek  <jakub@redhat.com>
    
            PR c++/91974
            * cp-gimplify.c (cp_gimplify_expr) <case CALL_EXPR>: For
            -fstrong-eval-order ensure CALL_EXPR_FN side-effects are evaluated
            before any arguments.  Additionally, ensure CALL_EXPR_FN that isn't
            invariant nor OBJ_TYPE_REF nor SSA_NAME is forced into a temporary.
    
            * g++.dg/cpp1z/eval-order5.C: New test.
    
    From-SVN: r278577

commit 7da11884fe193328bb05ce1f39b8c5a5f45022c1
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Nov 21 18:12:06 2019 +0100

    backport: re PR tree-optimization/91665 (ICE in build_vector_from_val, at tree.c:1904)
    
            Backported from mainline
            2019-09-07  Jakub Jelinek  <jakub@redhat.com>
    
            PR tree-optimization/91665
            * tree-vect-loop.c (vectorizable_reduction): Punt if base has type
            incompatible with the type of PHI result.
    
            * gcc.dg/vect/pr91665.c: New test.
    
    From-SVN: r278576

commit 2ff2d92fa0e83d1ea27011efc0996136713f5c79
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Nov 21 18:11:19 2019 +0100

    backport: re PR middle-end/91001 (internal compiler error: in extract_insn, at recog.c:2310)
    
            Backported from mainline
            2019-09-06  Jakub Jelinek  <jakub@redhat.com>
    
            * function.c (assign_parm_find_data_types): Use RECORD_OR_UNION_TYPE_P
            before testing TYPE_TRANSPARENT_AGGR.
            * calls.c (initialize_argument_information, load_register_parameters):
            Likewise.
    
            2019-09-05  Jakub Jelinek  <jakub@redhat.com>
    
            PR middle-end/91001
            PR middle-end/91105
            PR middle-end/91106
            * calls.c (load_register_parameters): For TYPE_TRANSPARENT_AGGR
            types, use type of their first field instead of type of
            args[i].tree_value.
    
            * gcc.c-torture/compile/pr91001.c: New test.
    
    From-SVN: r278575

commit 3c04df53d4a3293961c0322fcb6f15a03aaa781a
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Nov 21 18:09:57 2019 +0100

    backport: re PR middle-end/91623 (-msse4.1 -O3 segfault in /usr/lib/gcc/x86_64-pc-linux-gnu/8.3.0/include/smmintrin.h:270:10)
    
            Backported from mainline
            2019-09-01  Jakub Jelinek  <jakub@redhat.com>
    
            PR middle-end/91623
            * optabs.c (expand_vec_cond_expr): If op0 is a VECTOR_CST and only
            EQ_EXPR/NE_EXPR is supported, verify that op0 only contains
            zeros or negative elements and use NE_EXPR instead of LT_EXPR against
            zero vector.
    
            * gcc.target/i386/pr91623.c: New test.
    
    From-SVN: r278574

commit 1d22a845a482203c5b0469b9eb0cc923e4c5f1d8
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Nov 21 18:08:49 2019 +0100

    backport: re PR c/91401 (schedule + dist_schedule clauses rejected on distribute parallel for)
    
            Backported from mainline
            2019-08-09  Jakub Jelinek  <jakub@redhat.com>
    
            PR c/91401
            * c-parser.c (c_parser_omp_clause_dist_schedule): Fix up typos in the
            check_no_duplicate_clause call.  Comment it out, instead emit a
            warning for duplicate dist_schedule clauses.
    
            * parser.c (cp_parser_omp_clause_dist_schedule): Comment out the
            check_no_duplicate_clause call, instead emit a warning for duplicate
            dist_schedule clauses.
    
            * c-c++-common/gomp/pr91401-1.c: New test.
            * c-c++-common/gomp/pr91401-2.c: New test.
    
    From-SVN: r278573

commit 292165723098a9854537547afe90504db436c987
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Nov 21 18:07:15 2019 +0100

    backport: quadmath.h (M_Eq, [...]): Use two more decimal places.
    
            Backported from mainline
            2019-08-02  Jakub Jelinek  <jakub@redhat.com>
    
            * quadmath.h (M_Eq, M_LOG2Eq, M_LOG10Eq, M_LN2q, M_LN10q, M_PIq,
            M_PI_2q, M_PI_4q, M_1_PIq, M_2_PIq, M_2_SQRTPIq, M_SQRT2q,
            M_SQRT1_2q): Use two more decimal places.
    
    From-SVN: r278572

commit 4b2e17389949bf1b6306efd51d3770eb030aa1db
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Nov 21 00:16:21 2019 +0000

    Daily bump.
    
    From-SVN: r278535

commit a70fd3ad15b28bc7a2938393a3a708244492c2b2
Author: Peter Bergner <bergner@linux.ibm.com>
Date:   Wed Nov 20 20:44:50 2019 +0000

    Backport fix for PR92090.
    
    gcc/
            Backport from mainline
            2019-11-07  Peter Bergner <bergner@linux.ibm.com>
    
            PR other/92090
            * config/rs6000/predicates.md (input_operand): Allow MODE_PARTIAL_INT
            modes for integer constants.
    
    gcc/testsuite/
            Backport from mainline
            2019-11-13  David Edelsohn  <dje.gcc@gmail.com>
    
            * gcc.target/powerpc/pr92090.c: Limit -mbig to powerpc64le-*-*.
            * gcc.target/powerpc/pr92090-2.c: Likewise.
    
            2019-11-07  Peter Bergner <bergner@linux.ibm.com>
    
            PR other/92090
            * gcc.target/powerpc/pr92090-2.c: New test.
    
            2019-11-07  Peter Bergner <bergner@linux.ibm.com>
    
            PR other/92090
            * gcc.target/powerpc/pr92090.c: New test.
    
    From-SVN: r278528

commit e487ea860460016a5b9bfd3a17c32d7f89fcbb08
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Nov 20 00:16:10 2019 +0000

    Daily bump.
    
    From-SVN: r278472

commit 8a29721cada53d8c9bca4ca09ca3dec87759a328
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Tue Nov 19 09:13:13 2019 +0000

    * doc/invoke.texi (-gno-internal-reset-location-views): Fix typo.
    
    From-SVN: r278436

commit 5c60e6c8aa6af81a5e840b5e61342cf32cb8a462
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Nov 19 00:16:05 2019 +0000

    Daily bump.
    
    From-SVN: r278425

commit a44b23f95802dee643ba0a499bbd334c08364288
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Nov 18 00:16:05 2019 +0000

    Daily bump.
    
    From-SVN: r278380

commit 12a953f9a774ae5bb3dc0b6b04f413c0d282d037
Author: John David Anglin <danglin@gcc.gnu.org>
Date:   Sun Nov 17 23:18:51 2019 +0000

    linux-atomic.c (__kernel_cmpxchg): Change argument 1 to volatile void *.
    
            * config/pa/linux-atomic.c (__kernel_cmpxchg): Change argument 1 to
            volatile void *.  Remove trap check.
            (__kernel_cmpxchg2): Likewise.
            (FETCH_AND_OP_2): Adjust operand types.
            (OP_AND_FETCH_2): Likewise.
            (FETCH_AND_OP_WORD): Likewise.
            (OP_AND_FETCH_WORD): Likewise.
            (COMPARE_AND_SWAP_2): Likewise.
            (__sync_val_compare_and_swap_4): Likewise.
            (__sync_bool_compare_and_swap_4): Likewise.
            (SYNC_LOCK_TEST_AND_SET_2): Likewise.
            (__sync_lock_test_and_set_4): Likewise.
            (SYNC_LOCK_RELEASE_1): Likewise.  Use __kernel_cmpxchg2 for release.
            (__sync_lock_release_4): Adjust operand types.  Use __kernel_cmpxchg
            for release.
            (__sync_lock_release_8): Remove.
    
    From-SVN: r278379

commit 3956f511f9f9d2c57340930c9d707094fa561ea4
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Nov 17 00:16:05 2019 +0000

    Daily bump.
    
    From-SVN: r278367

commit a59e60f3a8c2a5fc6f5807e81ceb5175616c702c
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Nov 16 00:16:06 2019 +0000

    Daily bump.
    
    From-SVN: r278326

commit cfb588c7587a9c4458e7ca8e209ed0a5cd816047
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Nov 15 00:16:04 2019 +0000

    Daily bump.
    
    From-SVN: r278270

commit 601afe1bd121906c76814b8ea6489100131a4a06
Author: Martin Liska <mliska@suse.cz>
Date:   Thu Nov 14 10:21:58 2019 +0100

    Backport r278210
    
    2019-11-14  Martin Liska  <mliska@suse.cz>
    
            Backport from mainline
            2019-11-14  Martin Liska  <mliska@suse.cz>
    
            PR target/92389
            * config/i386/i386.h: Add PTA_AVX512VPOPCNTDQ to
            PTA_ICELAKE_CLIENT which is later interited by
            PTA_ICELAKE_SERVER and PTA_TIGERLAKE.
    
    From-SVN: r278213

commit 471502838347fe633f05967be4f810f34d862644
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Nov 14 00:16:10 2019 +0000

    Daily bump.
    
    From-SVN: r278187

commit 9fb1c389a448a7ad245d62a5fc30d3bd0eca2cc4
Author: Dragan Mladjenovic <dmladjenovic@wavecomp.com>
Date:   Wed Nov 13 19:37:04 2019 +0000

    Sanitize the constant argument for rotr<mode>3
    
    This was dormant for quite some time, but it started happening for me
    on gcc.c-torture/compile/pr65153.c sometime after r276645 for -mabi=32 linux runs.
    
    The pattern accepts any SMALL_OPERAND constant value while it asserts during the final
    that the value is in the mode size range. I this case it happens that combine_and_move_insns
    during ira makes a pattern with negative "shift count" which fails at final stage.
    
    This simple fix just truncates the constant operand to mode size the same as shift patterns.
    
    gcc/ChangeLog:
    
    2019-11-13  Dragan Mladjenovic  <dmladjenovic@wavecomp.com>
    
            Backport from mainline
            * config/mips/mips.md (rotr<mode>3): Sanitize the constant argument
            instead of asserting its value.
    
    From-SVN: r278155

commit 49e8c618b2a7ef1dbfb916d0ed1614e3348ea1bc
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Nov 13 00:16:18 2019 +0000

    Daily bump.
    
    From-SVN: r278109

commit 5ed84e9a320c13edf03e33f6180e47c8ad65a863
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Nov 12 00:16:46 2019 +0000

    Daily bump.
    
    From-SVN: r278072

commit 5d4b83768f2c70a6a6d082c8534b52a08d319b8a
Author: H.J. Lu <hjl.tools@gmail.com>
Date:   Mon Nov 11 00:39:32 2019 -0800

    [PR87833] x86: Put -fPIC and -shared the last to create offload image
    
    On x86, since -fPIC and -shared should be used to create offload image,
    we put them the last to properly create offload image.
    
    2019-11-11  H.J. Lu  <hjl.tools@gmail.com>
    
            PR target/87833
            * config/i386/intelmic-mkoffload.c (prepare_target_image): Put
            -fPIC and -shared the last to create offload image.
    
    Backport from trunk r278041.
    
    From-SVN: r278043

commit 285f78b88e39262e25c15680c3aef39f86c6ebbf
Author: Thomas Schwinge <thomas@codesourcery.com>
Date:   Mon Nov 11 09:19:41 2019 +0100

    Assert 'offset2' instead of 'offset' in 'gcc/gimplify.c:gimplify_scan_omp_clauses'
    
    ... to fix a long-time typo/copy'n'past-o.
    
            gcc/
            * gimplify.c (gimplify_scan_omp_clauses): Assert 'offset2' instead
            of 'offset'.
    
    Backport from trunk r278038.
    
    From-SVN: r278040

commit 6ac5ff4508e27b7785aa9b2ca42428d7cbeaadc0
Author: Thomas Schwinge <thomas@codesourcery.com>
Date:   Mon Nov 11 09:06:44 2019 +0100

    [build] Properly track GCC language configure fragments
    
    The 'gcc/configure' script sources all 'gcc/*/config-lang.in' files, but fails
    to emit such dependency information into the build machinery.  That means,
    currently, when something gets changed in a 'gcc/*/config-lang.in' file, this
    is not noticed, and doesn't propagate through the build machinery.
    
    Handling of configure fragments is modelled in the same way as it already
    exists for Makefile fragments.
    
            gcc/
            * Makefile.in (LANG_CONFIGUREFRAGS): Define.
            (config.status): Use/depend on it.
            * configure.ac (all_lang_configurefrags): Track, 'AC_SUBST'.
            * configure: Regenerate.
    
    Backport from trunk r278035.
    
    From-SVN: r278037

commit 35af38b614816a2b5508fbfbb70f8bcc9056dbda
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Nov 11 00:16:10 2019 +0000

    Daily bump.
    
    From-SVN: r278030

commit 0bd9fa7474ec57d67f1d102046c2a23955d4b31e
Author: Thomas Koenig <tkoenig@gcc.gnu.org>
Date:   Sun Nov 10 12:07:56 2019 +0000

    Put vtab into RO section, same for __def_init if it contains an initializer.
    
    
    2019-11-10  Thomas Koenig  <tkoenig@gcc.gnu.org>
    
        Backport from trunk
        PR fortran/92113
        * trans-decl.c (gfc_get_symbol_decl): If __def_init actually
        contains a value, put it into  the read-only section.
    
    From-SVN: r278018

commit 2393ddb81f2a46a75cabce20c6fef5d8047b12b0
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Nov 10 00:16:15 2019 +0000

    Daily bump.
    
    From-SVN: r278011

commit e5130e14b28cb126332f010aef6a44e7f624dd1e
Author: John David Anglin <danglin@gcc.gnu.org>
Date:   Sat Nov 9 14:24:47 2019 +0000

    backport: pa.md (memory_barrier): Revise to use ldcw barriers.
    
            Backport from mainline
            2019-11-07  John David Anglin  <danglin@gcc.gnu.org>
    
            * config/pa/pa.md (memory_barrier): Revise to use ldcw barriers.
            Enhance comment.
            (memory_barrier_coherent, memory_barrier_64, memory_barrier_32): New
            insn patterns using ldcw instruction.
            (memory_barrier): Remove insn pattern using sync instruction.
            * config/pa/pa.opt (coherent-ldcw): New option.
            (ordered): New option.
    
    From-SVN: r278002

commit f69b3318b07159af3194ed681e8a28f43ad93e07
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Nov 9 00:16:10 2019 +0000

    Daily bump.
    
    From-SVN: r277997

commit b94b3b3a1f8e6bae7d5a2da7eaadbf32131525cc
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Fri Nov 8 12:46:12 2019 +0000

    overflow-1.c: Add -fno-pie to the options.
    
            * gcc.target/sparc/overflow-1.c: Add -fno-pie to the options.
            * gcc.target/sparc/overflow-2.c: Likewise.
    
    From-SVN: r277971

commit 3fcce773f0f914c0499b130c6e9efa0e45ee54a0
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Fri Nov 8 12:38:03 2019 +0000

    re PR target/92095 (internal error with -O1 -mcpu=niagara2 -fPIE)
    
            PR target/92095
            * config/sparc/sparc-protos.h (output_load_pcrel_sym): Declare.
            * config/sparc/sparc.c (sparc_cannot_force_const_mem): Revert latest
            change.
            (got_helper_needed): New static variable.
            (output_load_pcrel_sym): New function.
            (get_pc_thunk_name): Remove after inlining...
            (load_got_register): ...here.  Rework the initialization of the GOT
            register and of the GOT helper.
            (save_local_or_in_reg_p): Test the REGNO of the GOT register.
            (sparc_file_end): Test got_helper_needed to decide whether the GOT
            helper must be emitted.  Use output_asm_insn instead of fprintf.
            (sparc_init_pic_reg): In PIC mode, always initialize the PIC register
            if optimization is enabled.
            * config/sparc/sparc.md (load_pcrel_sym<P:mode>): Emit the assembly
            by calling output_load_pcrel_sym.
    
    From-SVN: r277968

commit 0bce203b4c5188803d2d5678458af522ce61a2c2
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Nov 8 00:16:09 2019 +0000

    Daily bump.
    
    From-SVN: r277938

commit b55f8859080f4c0b2b74fdf9119f88dd252388f4
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Nov 7 00:16:12 2019 +0000

    Daily bump.
    
    From-SVN: r277897

commit 4441c6cd7b64e05b52c625a5ae586624522acb7b
Author: John David Anglin <danglin@gcc.gnu.org>
Date:   Wed Nov 6 23:46:04 2019 +0000

    backport: re PR rtl-optimization/85458 (FAIL: gcc.dg/pr83480.c (internal compiler error))
    
            Backport from mainline
            2018-09-19  John David Anglin  <danglin@gcc.gnu.org>
    
            PR rtl-optimization/85458
            * config/pa/pa.c (pa_adjust_priority): Delete.
            (TARGET_SCHED_ADJUST_PRIORITY): Delete define.
    
    From-SVN: r277894

commit e8ac80b31b190a3febb612b0719346bd45b7706c
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Nov 6 00:16:10 2019 +0000

    Daily bump.
    
    From-SVN: r277868

commit 862c733be7bde07cdb674133af4cf1fb2e82e116
Author: Segher Boessenkool <segher@kernel.crashing.org>
Date:   Tue Nov 5 18:36:17 2019 +0100

    backport "rs6000: Implement [u]avg<mode>3_ceil"
    
            * config/rs6000/altivec.md (altivec_vavgu<VI_char>): Rename to...
            (uavg<mode>3_ceil): ... This.
            (altivec_vavgs<VI_char>): Rename to...
            (avg<mode>3_ceil): ... This.
            * config/rs6000/rs6000-builtin.def (VAVGUB, VAVGSB, VAVGUH, VAVGSH,
            VAVGUW, VAVGSW): Adjust.
    
    From-SVN: r277858

commit 9ea8b107b82e7b7ddbbcbfaf40100af0144d07e9
Author: Segher Boessenkool <segher@kernel.crashing.org>
Date:   Tue Nov 5 18:20:00 2019 +0100

    backport for PR91289
    
            Backport from trunk
            2019-10-26  Segher Boessenkool  <segher@kernel.crashing.org>
    
            PR target/91289
            * config/rs6000/rs6000.c (rs6000_emit_allocate_stack): Don't add an
            immediate to r0; use r11 instead.  Save and restore r11 to r0 around
            this.
    
    From-SVN: r277856

commit a6c6df235d5b59b435675b7e9d6192f3df70c041
Author: Jason Merrill <jason@redhat.com>
Date:   Tue Nov 5 06:46:54 2019 -0500

    PR c++/88075 - Don't require 'bool' in a concept definition.
    
            * parser.c (cp_parser_decl_specifier_seq): Support C++20
            concept-definition syntax without 'bool'.
    
    From-SVN: r277825

commit 442a63fc4fe28aea0f9a2a21524fa1003a8dec84
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Tue Nov 5 00:26:18 2019 +0000

    [objective-c/c++, testsuite] Fix stubify tests for -fnext-runtime.
    
    Fixed to work for x86 as well as powerpc (use the final assembler output
    instead of the jump rtl which varies between X86 and PPC).  Amended the
    options to reflect this change.
    
    gcc/testsuite/
    
    2019-11-05  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-06-20  Iain Sandoe  <iain@sandoe.co.uk>
    
            * obj-c++.dg/stubify-1.mm: Adjust options and scan-asm checks.
            * obj-c++.dg/stubify-2.mm: Likewise.
            * objc.dg/stubify-1.m: Likewise.
            * objc.dg/stubify-2.m: Likewise.
    
    From-SVN: r277811

commit bfd28e42d69e3103e5dd21d5487e95f337e47887
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Nov 5 00:16:21 2019 +0000

    Daily bump.
    
    From-SVN: r277808

commit 37d2a8ad2f4f13903239a72d1a89720f4e27e9e3
Author: John David Anglin <danglin@gcc.gnu.org>
Date:   Mon Nov 4 23:43:15 2019 +0000

    backport: lib2funcs.S (__gcc_plt_call): Load branch target to %r21.
    
            Backport from mainline
            2019-10-12  John David Anglin  <danglin@gcc.gnu.org>
    
            * config/pa/lib2funcs.S (__gcc_plt_call): Load branch target to %r21.
            Load PIC register after branch target.  Fix white space.
            * config/pa/milli64.S ($$dyncall): Separate LINUX and non LINUX
            implementations.  Load PIC register after branch target.  Don't
            clobber function pointer when it points to function descriptor.
            Use nullification instead of branch in LINUX implementation.
    
    From-SVN: r277806

commit 0b4172257a09592ddd83758b6e3e36ea1ceb02a2
Author: John David Anglin <danglin@gcc.gnu.org>
Date:   Mon Nov 4 23:39:46 2019 +0000

    backport: fptr.c (_dl_read_access_allowed): Change argument to unsigned int.
    
            Backport from mainline
            2019-10-15  John David Anglin  <danglin@gcc.gnu.org>
    
            * config/pa/fptr.c (_dl_read_access_allowed): Change argument to
            unsigned int.  Adjust callers.
            (__canonicalize_funcptr_for_compare): Change plabel type to volatile
            unsigned int *.  Load relocation offset before function pointer.
            Add barrier to ensure ordering.
    
    From-SVN: r277805

commit 04db315e7de067306935929892da01e520570816
Author: John David Anglin <danglin@gcc.gnu.org>
Date:   Mon Nov 4 23:34:00 2019 +0000

    backport: pa.h (MAX_PCREL17F_OFFSET): Adjust.
    
            Backport from mainline
            2019-10-03  John David Anglin  <danglin@gcc.gnu.org>
    
            * config/pa/pa.h (MAX_PCREL17F_OFFSET): Adjust.
    
    From-SVN: r277804

commit 0f0a645129c3c41a1e652c79a37835a3b57df8b4
Author: John David Anglin <danglin@gcc.gnu.org>
Date:   Mon Nov 4 23:30:52 2019 +0000

    backport: pa.c (pa_output_call): Remove 64-bit sibcall sequence.
    
            Backport from mainline
            2019-10-03  John David Anglin  <danglin@gcc.gnu.org>
    
            * config/pa/pa.c (pa_output_call): Remove 64-bit sibcall sequence.
            (pa_attr_length_call): Adjust length for 64-bit plabel sequence.
    
    From-SVN: r277803

commit ae9282dbbdc540024ad829b2aa2de4b8b10e206b
Author: John David Anglin <danglin@gcc.gnu.org>
Date:   Mon Nov 4 23:24:53 2019 +0000

    backport: pa.c (pa_output_call): Load descriptor address to register %r22.
    
            Backport from mainline
            2019-10-12  John David Anglin  <danglin@gcc.gnu.org>
    
            * config/pa/pa.c (pa_output_call): Load descriptor address to register
            %r22.  Load function address before global pointer.
            (pa_attr_length_indirect_call): Adjust length of inline versions of
            $$dyncall.
            (pa_output_indirect_call): Remove fast inline version of $$dyncall
            before normal cases.  Update inline $$dyncall sequences to preserve
            function descriptor address in register %r22.
            (TRAMPOLINE_CODE_SIZE): Adjust.
            (pa_asm_trampoline_template): Revise 32-bit trampoline.  Don't assume
            register %r22 contains trampoline address.
            (pa_trampoline_init): Adjust offsets.
            (pa_trampoline_adjust_address): Likewise.
            * config/pa/pa.h (TRAMPOLINE_SIZE): Adjust 32-bit size.
    
            2019-10-17  John David Anglin  <danglin@gcc.gnu.org>
    
            * config/pa/pa.c (pa_output_indirect_call): Fix typos in last change.
    
    From-SVN: r277802

commit e8626cdb98f9373003e39adee0e9e930e204f452
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Nov 4 00:16:09 2019 +0000

    Daily bump.
    
    From-SVN: r277762

commit 95405bf0e3de153074db9a14e49fe206739a6b65
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Sun Nov 3 07:59:32 2019 +0000

    [Darwin, testsuite] Fix PR 79274
    
    The solution for initialising global TLS variables does not apply
    to platforms using emulated TLS.  XFAIL the test for this on Darwin.
    
    2019-11-03  Iain Sandoe  <iain@sandoe.co.uk>
    
            PR c++/79274
            * g++.dg/tls/pr77285-2.C: XFAIL test for Darwin.
    
    From-SVN: r277750

commit cbf2c00c90b9bbae8b2906569474aac6ae7ad240
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Nov 3 00:16:08 2019 +0000

    Daily bump.
    
    From-SVN: r277747

commit f28223a87340e8fc0103840d6bb81ae6380f5f7c
Author: Iain Sandoe <iains@gcc.gnu.org>
Date:   Sat Nov 2 12:00:35 2019 +0000

    [testsuite] Require alias support for pr90760.
    
    This test fails on Darwin because it requires alias support, so
    add the relevant dg-requires.
    
    gcc/testsuite/
    
    2019-11-02  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline
            2019-06-13  Iain Sandoe  <iain@sandoe.co.uk>
    
            * gcc.dg/pr90760.c: Require alias support.
    
    From-SVN: r277744

commit a430fb60137420efb407601d9d51cbe328feb1db
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Nov 2 00:16:09 2019 +0000

    Daily bump.
    
    From-SVN: r277738

commit 52fa42071c9d1df5a06182b3d4b5e75cadec2ade
Author: Delia Burduv <Delia.Burduv@arm.com>
Date:   Fri Nov 1 16:37:04 2019 -0600

    backport: re PR target/86487 (insn does not satisfy its constraints on arm big-endian)
    
             Backport from trunk
             2019-02-20  Andre Vieira <andre.simoesdiasvieira@arm.com>
    
             PR target/86487
             * lra-constraints.c(uses_hard_regs_p): Fix handling of
             paradoxical SUBREGS.
    
             PR target/86487
             * gcc.target/arm/pr86487.c: New.
    
    From-SVN: r277729

commit 8fbb29cc1411ab3f48d54cba5b3a0f82bb551a9a
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Nov 1 00:16:08 2019 +0000

    Daily bump.
    
    From-SVN: r277701

commit e6a939ee914aba48bf8e2a13511183f746e91d74
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Thu Oct 31 20:11:42 2019 +0000

    [testsuite] Make the Wnonnull test independent of system headers.
    
    This backports two patches that fix failure of Wnonnull test on some targets.
    
    277280 To avoid the result of this test depending on the implementation of
    the system 'string.h', provide prototypes for the two functions used
    in the test. This generalises the fix from 277202.
    
    277202 was the initial fix for Wnonnull on Darwin.
    
    2019-10-31  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-10-22  Iain Sandoe  <iain@sandoe.co.uk>
    
            * gcc.dg/Wnonnull.c: Provide prototypes for strlen and memcpy.
            Use __SIZE_TYPE__ instead of size_t.
    
            Backport from mainline.
            2019-10-19  Iain Sandoe  <iain@sandoe.co.uk>
    
            * gcc.dg/Wnonnull.c: Add attributed function declarations for
            memcpy and strlen for Darwin.
    
    From-SVN: r277696

commit e89fd1203b4a68706cc29d2e0f940b0e4636b9b4
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Thu Oct 31 20:05:54 2019 +0000

    [Darwin, machopic] Back out part of PR71767 fix.
    
    This is part of making our codegen match what the system tools produce.
    
    We applied a conservative, but fairly large, hammer to fix 71767.
    However, ideally, we want minimise the number of symbols visible to
    ld64 and to match the cases emitted by clang (since that's what ld64
    is expecting). Now we've improved the handling of indirections, we
    can make the indirection symbols local when they are in the regular
    non-lazy symbol pointers section. We will continue to make any
    indirections in the data section visible (since right now we have no
    way to track if a given symbol follows a weak global).
    This change makes no difference to handling of labels for constants
    (to be revised in a future patch).
    
    There's a mechanical change to a number of tests (allowing 'l' or 'L'
    as the indirection symbol prefix).
    
    gcc/
    
    2019-10-31  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline
            2019-10-13  Iain Sandoe  <iain@sandoe.co.uk>
    
            * config/darwin.c (machopic_indirection_name): Rework the
            function to emit linker-visible symbols only for indirections
            in the data section.  Clean up the code and update comments.
    
    gcc/testsuite/
    
    2019-10-31  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-10-13  Iain Sandoe  <iain@sandoe.co.uk>
    
            * gcc.target/i386/indirect-thunk-1.c: Allow 'l' or 'L' in
            indirection label prefix, for Darwin.
            * gcc.target/i386/indirect-thunk-2.c: Likewise.
            * gcc.target/i386/indirect-thunk-3.c: Likewise.
            * gcc.target/i386/indirect-thunk-4.c: Likewise.
            * gcc.target/i386/indirect-thunk-attr-1.c: Likewise.
            * gcc.target/i386/indirect-thunk-attr-2.c: Likewise.
            * gcc.target/i386/indirect-thunk-attr-3.c: Likewise.
            * gcc.target/i386/indirect-thunk-attr-4.c: Likewise.
            * gcc.target/i386/indirect-thunk-attr-5.c: Likewise.
            * gcc.target/i386/indirect-thunk-attr-6.c: Likewise.
            * gcc.target/i386/indirect-thunk-extern-1.c: Likewise.
            * gcc.target/i386/indirect-thunk-extern-2.c: Likewise.
            * gcc.target/i386/indirect-thunk-extern-3.c: Likewise.
            * gcc.target/i386/indirect-thunk-extern-4.c: Likewise.
            * gcc.target/i386/indirect-thunk-inline-1.c: Likewise.
            * gcc.target/i386/indirect-thunk-inline-2.c: Likewise.
            * gcc.target/i386/indirect-thunk-inline-3.c: Likewise.
            * gcc.target/i386/indirect-thunk-inline-4.c: Likewise.
            * gcc.target/i386/pr32219-2.c: Likewise.
            * gcc.target/i386/pr32219-3.c: Likewise.
            * gcc.target/i386/pr32219-4.c: Likewise.
            * gcc.target/i386/pr32219-7.c: Likewise.
            * gcc.target/i386/pr32219-8.c: Likewise.
            * gcc.target/i386/ret-thunk-14.c: Likewise.
            * gcc.target/i386/ret-thunk-15.c: Likewise.
            * gcc.target/i386/ret-thunk-9.c: Likewise.
    
    From-SVN: r277695

commit 4361b52af4ea03458f95f6fda6eae8f57b68a95f
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Thu Oct 31 20:00:44 2019 +0000

    [Darwin] Fix Objective-C NeXT ABI version check diagnostics.
    
    This fixes build errors when used with newer GCC and corrects a mistake
    in the checking of ABI versions.
    
    276768 We were missing a check for the case that user's ABI was > 2 and the
    codegen was for 64 bit.
    
    276635 Fix some format-related build warnings.
    
    This fixes two error messages to avoid punctuation and contracted
    negations.
    
    2019-10-31  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline
            2019-10-09  Iain Sandoe  <iain@sandoe.co.uk>
    
            * config/darwin.c (darwin_override_options): Make the check for
            Objective-C ABI version more specific for 64bit code.
    
            Backport from mainline
            2019-10-06  Iain Sandoe  <iain@sandoe.co.uk>
    
            * config/darwin.c (darwin_override_options): Adjust objective-c
            ABI version error messages to avoid punctuation and contracted
            negations.
    
    From-SVN: r277694

commit d12d808215c0901d4c091a057dcd5290970cf8d7
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Thu Oct 31 19:57:18 2019 +0000

    [Darwin] Some TLC for older Darwin versions.
    
    The library handling and some of the options for creating the crts for
    the older PPC Darwin versions had bit-rotted somewhat. This adjusts the
    build criteria for the crts to avoid newer ld64 versions warnings about
    mismatches in build and object versions.
    
    Added to some of the comments to documented why the specs are as they
    are.
    
    gcc/
    
    2019-10-31  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline
            2019-07-03  Iain Sandoe  <iain@sandoe.co.uk>
    
            * config/darwin.h (REAL_LIBGCC_SPEC): Adjust for earlier Darwin.
            (STARTFILE_SPEC): Split crt3 into a separate spec.
            (DARWIN_EXTRA_SPECS): Add crt2 and crt3 spec.
            (DARWIN_CRT2_SPEC): New.
            (DARWIN_CRT3_SPEC): New.
            (MIN_LD64_OMIT_STUBS): Revise to 62.1.
            * config/rs6000/darwin.h (DARWIN_CRT2_SPEC): Revise conditions.
            (DARWIN_CRT3_SPEC): New.
    
    libgcc/
    
    2019-10-31  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-07-03  Iain Sandoe  <iain@sandoe.co.uk>
    
            * config.host (powerpc-*-darwin*,powerpc64-*-darwin*): Revise crt
            list.
            * config/rs6000/t-darwin: Build crt3_2 for older systems.  Revise
            mmacosx-version-min for crts to run across all system versions.
            * config/rs6000/t-darwin64 (LIB2ADD): Remove.
            * config/t-darwin: Revise mmacosx-version-min for crts to run across
            system versions >= 10.4.
    
    From-SVN: r277693

commit 1ae74f1d5235755f30067dd30fb7c1f761b70655
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Thu Oct 31 19:50:07 2019 +0000

    [Darwin, PPC] Move the out of line register save/restore to an endfile.
    
    272660
    We have been including this in libgcc, which means that we have to append
    -lgcc even when using shared libgcc. In preparation for revision of libgcc
    split this into an endfile.
    
    272759 Correct whitespace in specs.
    
    gcc/
    
    2019-10-31  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline
            2019-06-27  Iain Sandoe  <iain@sandoe.co.uk>
    
            * config/rs6000/darwin.h (ENDFILE_SPEC): Correct whitespace in the
            spec.
    
            Backport from mainline
            2019-06-25  Iain Sandoe  <iain@sandoe.co.uk>
    
            * config/rs6000/darwin.h (ENDFILE_SPEC): New.
    
    libgcc/
    
    2019-10-31  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-06-25  Iain Sandoe  <iain@sandoe.co.uk>
    
            * config.host: Add libef_ppc.a to the extra files for powerpc-darwin.
            * config/rs6000/t-darwin: (PPC_ENDFILE_SRC, PPC_ENDFILE_OBJS): New.
            Build objects for the out of line save/restore register functions
            so that they can be used for any supported Darwin version.
            * config/t-darwin: Default the build Darwin version to Darwin8
            (MacOS 10.4).
    
    From-SVN: r277692

commit 70048f951c79bfa0668208988606f23747aeec84
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Thu Oct 31 19:43:14 2019 +0000

    [Darwin] The need for FDE symbols is dependent on linker used, not OS rev.
    
    For very old toolchains, the compiler generated extra symbols that mark the
    start of each FDE. We no longer need this (since xcode 3 era) - so, for
    compatibility with newer linkers, omit this when it is not required.
    
    Since we have detection of the linker version, we can use that directly to
    determine if support is needed.
    
    2019-10-31  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline
            2019-06-18  Iain Sandoe  <iain@sandoe.co.uk>
    
            * config/darwin.c (darwin_emit_unwind_label): New default to false.
            (darwin_override_options): Set darwin_emit_unwind_label as needed.
    
    From-SVN: r277691

commit b06624c3829d928d63cb6954e4a2bca6618609a3
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Thu Oct 31 19:40:07 2019 +0000

    [Darwin] The need for picsym stubs is dependent on linker used, not OS rev.
    
    272356 For very old toolchains, the compiler generated pic symbol stubs that
    provide the necessary indirections. We no longer need this (since xcode
    3 era) and it's more efficient for the linker to make one stub when it
    knows a symbol is needed that for us to emit them speculatively in every
    object.
    
    Our current codegen is making the assumption that a specific OS version
    uses a specific linker version - and therefore the presence of support
    could be based on the target OS rev. Of course, that's way too simplistic
    (most likely bogus for cross-toolchains) and we want to make things explict.
    
    Since we have detection of the linker version, we can use that directly
    (A config test for support for stub-less linking might also be feasible
    but much more involved).
    
    Finally, should the user wish to generate code that caters for export to
    use in an environment with an older toolchain, the generation of stubs
    can be forced from the command line.
    
    In addition to the points above, branch islanding and a long branch opt
    for PowerPC Darwin has become conflated with the emission of these stubs
    (which is confusing, and will be rectified in a following patch).
    
    274379 There is no need to distinguish PIC/non-PIC symbol stubs.
    
    So we can use a single flag for both.
    
    gcc/
    
    2019-10-31  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline
            2019-08-13 Iain Sandoe <iain@sandoe.co.uk>
    
            * config/darwin.c (machopic_indirect_call_target): Rename symbol stub
            flag.
            (darwin_override_options): Likewise.
            * config/darwin.h: Likewise.
            * config/darwin.opt: Likewise.
            * config/i386/i386.c (output_pic_addr_const): Likewise.
            * config/rs6000/darwin.h: Likewise.
            * config/rs6000/rs6000.c (rs6000_call_darwin_1): Likewise.
            * config/i386/darwin.h (TARGET_MACHO_PICSYM_STUBS): Rename to ...
            ... this TARGET_MACHO_SYMBOL_STUBS.
            (FUNCTION_PROFILER):Likewise.
            * config/i386/i386.h: Likewise.
    
            Backport from mainline
            2019-06-16  Iain Sandoe  <iain@sandoe.co.uk>
    
            * config/darwin.c (machopic_indirect_call_target): Use renamed
            darwin_picsymbol_stubs to decide on output.
            (darwin_override_options): Handle darwin_picsymbol_stubs.
            * config/darwin.h (MIN_LD64_OMIT_STUBS): New.
            (LD64_VERSION): Revise default.
            * config/darwin.opt: (mpic-symbol-stubs): New option.
            (darwin_picsymbol_stubs): New variable.
            * config/i386/darwin.h (TARGET_MACHO_BRANCH_ISLANDS):
            rename to TARGET_MACHO_PICSYM_STUBS.
            * config/i386/i386.c (output_pic_addr_const): Likewise.
            * config/i386/i386.h Likewise.
            * config/rs6000/darwin.h: Likewise.
            * config/rs6000/rs6000.c (rs6000_call_darwin_1): Use renamed
            darwin_picsymbol_stubs.
    
    gcc/testsuite/
    
    2019-10-31  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-08-13  Iain Sandoe  <iain@sandoe.co.uk>
    
            * obj-c++.dg/stubify-1.mm: Rename symbol stub option.
            * obj-c++.dg/stubify-2.mm: Likewise.
            * objc.dg/stubify-1.m: Likewise.
            * objc.dg/stubify-2.m: Likewise.
    
    From-SVN: r277690

commit c992b1a9f865601ce06669b64fe9607927e867ce
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Thu Oct 31 19:31:20 2019 +0000

    [Darwin, PPC, testsuite] Exclude darwin from VSX, power8 and power9.
    
    If we build Darwin with a modern assembler, then it might well
    recognise insns that cannot be used on current Darwin systems.
    
    The patch augments the tests for feature support for VSX,
    power8 and power9 to exclude Darwin even if the assembler can
    handle the instructions.
    
    gcc/testsuite/
    
    2019-10-31  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-05-15  Iain Sandoe  <iain@sandoe.co.uk>
    
            * lib/target-supports.exp
            (check_effective_target_powerpc_p8vector_ok): No support for Darwin.
            (check_effective_target_powerpc_p9vector_ok): Likewise.
            (check_effective_target_powerpc_float128_sw_ok): Likewise.
            (check_effective_target_powerpc_float128_hw_ok): Likewise.
            (check_effective_target_powerpc_vsx_ok): Likewise.
            * gcc.target/powerpc/bfp/bfp.exp: Don't try to run this for Darwin.
            * gcc.target/powerpc/dfp/dfp.exp: Likewise.
    
    From-SVN: r277689

commit fd7c2a9c04fbd52cd7603e9386eae86ebb101eab
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Thu Oct 31 19:24:39 2019 +0000

    [Darwin, PPC] Allow the user to override the use of hard float in kexts.
    
    The default for the kernel is soft-float, however a user writing a kernel
    extension might want to make use of hard float. This aligns GCC with the
    system tools and makes " -mkernel -mhard-float " work as expected.
    
    2019-10-31  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline
            2019-06-27  Iain Sandoe  <iain@sandoe.co.uk>
    
            * config/rs6000/rs6000.c (darwin_rs6000_override_options): Honour
            user-specified float mode choice for kernel mode code.
    
    From-SVN: r277688

commit 66b449fdd2a300a93344e98849e39feba58f66cc
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Thu Oct 31 19:17:19 2019 +0000

    [Darwin, PPC] Handle GCC target pragma.
    
    For compatibility with other members of the port.
    Note, that we do not handle the longcall attribute, since longcall
    is not required/used on current Darwin.
    
    2019-10-31  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline
            2019-06-23  Iain Sandoe  <iain@sandoe.co.uk>
    
            * config/rs6000/darwin.h: Handle GCC target pragma.
    
    From-SVN: r277687

commit 6fd46cb036db6b23826ff676910e1f93d94bcf81
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Oct 31 00:16:08 2019 +0000

    Daily bump.
    
    From-SVN: r277651

commit f669731c1410d271ae030617c8a564c428c1e8ac
Author: Dragan Mladjenovic <dmladjenovic@wavecomp.com>
Date:   Wed Oct 30 15:38:15 2019 +0000

    Backport fix for PR89245
    
    gcc/ChangeLog:
    
    2019-10-30  Dragan Mladjenovic  <dmladjenovic@wavecomp.com>
    
            Backport from mainline
            2019-07-09  Dragan Mladjenovic  <dmladjenovic@wavecomp.com>
    
            * cfgcleanup.c (old_insns_match_p): Check if used hard regs set is equal
            for both call instructions.
    
    gcc/testsuite/ChangeLog:
    
    2019-10-30  Dragan Mladjenovic  <dmladjenovic@wavecomp.com>
    
            Backport from mainline
            2019-07-09  Dragan Mladjenovic  <dmladjenovic@wavecomp.com>
    
            * gcc.target/mips/cfgcleanup-jalr1.c: New test.
            * gcc.target/mips/cfgcleanup-jalr2.c: New test.
            * gcc.target/mips/cfgcleanup-jalr3.c: New test.
    
    From-SVN: r277626

commit cc72e44c144e004b017203e0fd73883bea3d7031
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Oct 30 00:16:43 2019 +0000

    Daily bump.
    
    From-SVN: r277597

commit c0e750cd351f83e378a276a0aa26caa251fd881f
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Oct 29 00:16:37 2019 +0000

    Daily bump.
    
    From-SVN: r277548

commit 02ba3e7ad0492bd3aee1aa993e1f079b4c7c10ba
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Mon Oct 28 20:02:01 2019 +0000

    [Darwin, PPC] Fix PR 65342.
    
    The current Darwin load/store lo_sum patterns have neither predicate nor
    constraint. This means that most parts of the backend, which rely on
    recog() to validate the rtx, can produce invalid combinations/selections.
    
    For 32bit cases this isn't a problem since we can load/store to unaligned
    addresses using D-mode insns.
    
    Conversely, for 64bit instructions that use DS mode, this can manifest as
    assemble errors (for an assembler that checks the LO14 relocations), or as
    crashes caused by wrong offsets (or worse, wrong content for the two LSBs).
    
    What we want to check for Y on Darwin is:
    - that the alignment of the Symbols' target is sufficient for DS mode
    - that the offset is suitable for DS mode.
    (while looking through the Mach-O PIC unspecs).
    
    So, the patch removes the Darwin-specific lo_sum patterns (we begin using
    the movdi_internal64 patterns). We also we need to extend the handling of the
    mem_operand_gpr constraint to allow looking through Mach-O PIC UNSPECs in
    the lo_sum cases.
    
    2019-10-28  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline
            2019-10-17  Iain Sandoe  <iain@sandoe.co.uk>
    
            PR target/65342
            * config/rs6000/darwin.md (movdi_low, movsi_low_st): Delete.
            (movdi_low_st): Delete.
            * config/rs6000/rs6000.c
            (darwin_rs6000_legitimate_lo_sum_const_p): New.
            (mem_operand_gpr): Validate Mach-O LO_SUM cases separately.
            * config/rs6000/rs6000.md (movsi_low): Delete.
    
    From-SVN: r277543

commit 5224711fed2f246a34eadcbc55d3bcc81be79502
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Mon Oct 28 19:56:27 2019 +0000

    [Darwin, machopic] Fix for 67183
    
    When we're using the LLVM-based assembler (the default on modern Darwin)
    the ordering of stubs and non-lazy symbol pointers is important.
    
    Interleaving the output (current GCC behaviour) leads to crashes which
    prevents us from building code with symbol stubs.
    
    To resolve this, we order the output of stubs and symbol indirections:
    
    1. Any indirections in the data section
    2. Symbol stubs.
    3. Non-lazy symbol pointers.
    
    At present, we still emit LTO sections after these.
    
    2019-10-28  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline
            2019-10-12  Iain Sandoe  <iain@sandoe.co.uk>
    
            PR target/67183
            * config/darwin.c (machopic_indirection): New field to flag
            non-lazy-symbol-pointers in the data section.
            (machopic_indirection_name): Compute if an indirection should
            appear in the data section.
            (machopic_output_data_section_indirection): New callback split
            from machopic_output_indirection.
            (machopic_output_stub_indirection): Likewise.
            (machopic_output_indirection): Retain the code for non-lazy
            symbol pointers in their regular section.
            (machopic_finish): Use the new callbacks to order the indirection
            output.
    
    From-SVN: r277542

commit 291dbba37038fcf79eb9c4c1db36a4e7160e8a6b
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Mon Oct 28 19:52:38 2019 +0000

    [Darwin, machopic] Preparatory patches.
    
    This is a combined set of 5 patches that allows us to fix PRs 65342
    and 67183.
    
    276924 Make machopic_finish() static.
    
    276767 Set a SYMBOL flag for indirections.
    
    We are able to treat these specially where needed in legitimate address
    tests (specifically, they are guaranteed to be pointer-aligned).
    
    276708 Compute and cache indirection rules.
    
    This caches a check for the requirement to indirect a symbol in the Darwin
    ABI, and uses it where needed. We also ensure that we place the indirection
    pointers into the non-lazy symbol pointers section. Other placements have
    occurred with various platform toolchains - but these seem to have been
    unintentional so we match current platform toolchains.
    
    276675 Consider visibility in indirections.
    
    For weak, hidden vars the indirection should just be as normal, that
    is that the indirections for such symbols should appear in the non-lazy
    symbol pointers table, not in the .data section.
    
    276674 Initial tidy of Mach-O symbol handling.
    
    We want to improve the detection and caching of symbol-properties
    so that (a) we can make the compiler's output match the platform
    norms (b) we can improve efficiency by checking flags instead of
    inspecting strings. (c) The fix for PR71767 was a largish hammer
    and we want to reduce the number of symbols that are made linker-
    visible.
    
    This first patch is largely typographical changes with no functional
    difference intended:
    
    - Tries to ensure that there's no overlap between the symbols used in
    the Mach-O case and those declared in the i386 or rs6000 port trees.
    
    - Some improvement to comments.
    
    - Makes the naming of the symbol flags consistent with other uses.
    
    - Provides a predicate macro for each use.
    
    2019-10-28  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline
            2019-10-12  Iain Sandoe  <iain@sandoe.co.uk>
    
            * config/darwin-protos.h (machopic_finish): Delete.
            * config/darwin.c (machopic_finish): Make static.
    
            Backport from mainline
            2019-10-09  Iain Sandoe  <iain@sandoe.co.uk>
    
            * config/darwin.c (machopic_indirect_data_reference): Set flag to
            indicate that the new symbol is an indirection.
            (machopic_indirect_call_target): Likewise.
            * config/darwin.h (MACHO_SYMBOL_FLAG_INDIRECTION): New.
            (MACHO_SYMBOL_INDIRECTION_P): New.
            (MACHO_SYMBOL_FLAG_STATIC): Adjust bit number.
    
            Backport from mainline
            2019-10-08  Iain Sandoe  <iain@sandoe.co.uk>
    
            * config/darwin.c (machopic_indirect_data_reference): Check for
            required indirections before making direct access to defined
            values.
            (machopic_output_indirection): Place the indirected pointes for
            required indirections into the non-lazy symbol pointers section.
            (darwin_encode_section_info):
            * config/darwin.h (MACHO_SYMBOL_FLAG_MUST_INDIRECT): New.
            (MACHO_SYMBOL_MUST_INDIRECT_P): New.
    
            Backport from mainline
            2019-10-07  Iain Sandoe  <iain@sandoe.co.uk>
    
            * config/darwin.c (machopic_output_indirection): Don't put
            hidden symbol indirections into the .data section, use the
            non-lazy symbol pointers section as normal.
            (darwin_encode_section_info): Record if a symbol is hidden.
            * config/darwin.h (MACHO_SYMBOL_FLAG_HIDDEN_VIS): New.
            (MACHO_SYMBOL_HIDDEN_VIS_P): New.
    
            Backport from mainline
            2019-10-07  Iain Sandoe  <iain@sandoe.co.uk>
    
            * config/darwin.c (machopic_symbol_defined_p): Use symbol flag
            predicates instead of accessing bits directly.
            (machopic_indirect_call_target): Likewise.
            (machopic_output_indirection): Likewise.
            (darwin_encode_section_info): Improve description.  Use renamed
            symbol flags.  Use predicate macros for variables and functions.
            * config/darwin.h:
            Rename MACHO_SYMBOL_VARIABLE to MACHO_SYMBOL_FLAG_VARIABLE.
            Rename MACHO_SYMBOL_DEFINED to MACHO_SYMBOL_FLAG_DEFINED.
            Rename MACHO_SYMBOL_STATIC to MACHO_SYMBOL_FLAG_STATIC.
            (MACHO_SYMBOL_VARIABLE_P): New.
            (MACHO_SYMBOL_DEFINED_P):New.
            (MACHO_SYMBOL_STATIC_P): New.
            * config/i386/darwin.h (MACHO_SYMBOL_FLAG_VARIABLE): Delete.
            (SYMBOL_FLAG_SUBT_DEP): New.
            * config/rs6000/darwin.h (SYMBOL_FLAG_SUBT_DEP): New.
    
    From-SVN: r277541

commit c3cf8da206c3014834800134b85816bd6ab59fe7
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Mon Oct 28 19:40:03 2019 +0000

    [Darwin] Amend section for constants with relocations.
    
    Darwin's linker doesn't like text section relocations (they require special
    enabling). The Fortran FE, at least, seems to generate cases where the
    initialiser for a pointer constant can need a relocation. We can handle
    this by special-casing SECCAT_RODATA when the relocation is present by
    placing the constant in the .const_data section.
    
    2019-10-28  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline
            2019-10-05  Iain Sandoe  <iain@sandoe.co.uk>
    
            PR target/59888
            * config/darwin.c (darwin_rodata_section): Add relocation flag,
            choose const_data section for constants with relocations.
            (machopic_select_section): Pass relocation flag to
            darwin_rodata_section ().
    
    From-SVN: r277540

commit 3900e2e37968e210eac4636b730e9fb2018aea2f
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Mon Oct 28 19:35:36 2019 +0000

    [Darwin] Update machopic_legitimize_pic_address.
    
    Some changes were missed here in the transition to LRA. The Darwin
    archs are all using LRA now, testing for reload is not correct
    
    2019-10-28  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline
            2019-09-21  Iain Sandoe  <iain@sandoe.co.uk>
    
            * config/darwin.c (machopic_legitimize_pic_address): Check
            for lra, rather than reload.
    
    From-SVN: r277539

commit e6ebe71faf85c2876cf7e729ea08aed00c2771e3
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Mon Oct 28 17:43:36 2019 +0000

    [Darwin, testsuite] Skip pr72802.c.
    
    As fallout from 19315, which is not fixed on this branch, the presence
    of an unused static variable causes a 'promotion' of that to extern.
    This produces wrong code on Darwin when Mach-O PIC is in use (m32 X86
    and all PPC).  So skip this unconditionally, as noted in the PR trail,
    the usefulness of the test is questionable anyway.
    
    gcc/testsuite/
    
    2019-10-28  Iain Sandoe  <iain@sandoe.co.uk>
    
            * gcc.c-torture/compile/pr72802.c: Skip for Darwin.
    
    From-SVN: r277530

commit 03687a03ba78bed626d3eaac820b50df8e5bd074
Author: Jiufu Guo <guojiufu@linux.ibm.com>
Date:   Mon Oct 28 14:30:05 2019 +0000

    backport: re PR target/70010 (powerpc: -flto forgets 'no-vsx' function attributes)
    
            Backport from mainline
    
            PR target/70010
            * gcc.target/powerpc/pr70010.c: Add -Wno-psabi and -mvsx.
    
    From-SVN: r277523

commit 9ac37660d869e8048a343bdc41d6d844150c8651
Author: Peter Bergner <bergner@linux.ibm.com>
Date:   Mon Oct 28 13:55:41 2019 +0000

    [rs6000] PR70010, avoid no-vsx function to be inlined to vsx function
    
    In PR70010, a function is marked with target(no-vsx) to disable VSX code
    generation.  To avoid VSX code generation, this function should not be
    inlined into VSX function.  To fix the bug, in the current logic when
    checking whether the caller's ISA flags supports the callee's ISA flags, we
    just need to add a test that enforces that the caller's ISA flags match
    exactly the callee's flags, for those flags that were explicitly set in the
    callee.  If caller without target attribute then using options from command
    line.
    
    Jiufu
    BR
    
    
    gcc/
    2019-10-16  Peter Bergner <bergner@linux.ibm.com>
                Jiufu Guo  <guojiufu@linux.ibm.com>
    
            PR target/70010
            * config/rs6000/rs6000.c (rs6000_can_inline_p): Prohibit inlining if
            the callee explicitly disables some isa_flags the caller is using.
    
    gcc.testsuite/
    2019-10-16  Peter Bergner <bergner@linux.ibm.com>
                Jiufu Guo  <guojiufu@linux.ibm.com>
    
            PR target/70010
            * gcc.target/powerpc/pr70010.c: New test.
            * gcc.target/powerpc/pr70010-1.c: New test.
            * gcc.target/powerpc/pr70010-3.c: New test.
            * gcc.target/powerpc/pr70010-4.c: New test.
    
    
    
    Co-Authored-By: Jiufu Guo <guojiufu@linux.ibm.com>
    
    From-SVN: r277518

commit b617c41464a95601282acbb85ddc57fa79f91e53
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Oct 28 00:16:53 2019 +0000

    Daily bump.
    
    From-SVN: r277497

commit 38c585ea8268d9905ce02292e12b12607e054596
Author: Paul Thomas <pault@gcc.gnu.org>
Date:   Sun Oct 27 17:06:38 2019 +0000

    backport: re PR fortran/86248 (LEN_TRIM in specification expression causes link failure)
    
    2019-10-27  Paul Thomas  <pault@gcc.gnu.org>
    
            Backport from mainline
            PR fortran/86248
            * resolve.c (flag_fn_result_spec): Correct a typo before the
            function declaration.
            * trans-decl.c (gfc_sym_identifier): Boost the length of 'name'
            to allow for all variants. Simplify the code by using a pointer
            to the symbol's proc_name and taking the return out of each of
            the conditional branches. Allow symbols with fn_result_spec set
            that do not come from a procedure namespace and have a module
            name to go through the non-fn_result_spec branch.
    
    2019-10-27  Paul Thomas  <pault@gcc.gnu.org>
    
            Backport from mainline
            PR fortran/86248
            * gfortran.dg/char_result_19.f90 : New test.
            * gfortran.dg/char_result_mod_19.f90 : Module for the new test.
    
    From-SVN: r277489

commit 96c69633b1c4ad08e03748d6117e62fb5796b5bb
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Oct 27 00:16:38 2019 +0000

    Daily bump.
    
    From-SVN: r277478

commit d9f5b8dd723dbf4942d4f59d647401be0d7e4d12
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Oct 26 00:16:51 2019 +0000

    Daily bump.
    
    From-SVN: r277466

commit 3fe7de10247a28f09486f70f9b48b5ea302c2e43
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Fri Oct 25 23:13:52 2019 +0000

    [Darwin, PPC] Check for out of range asm values.
    
    There are some cases in which the value for the max skip to a p2align
    directive can be negative. The older assembler (and GAS) just ignores
    these cases but newer tools produce an error. To preserve behaviour,
    we avoid emitting out of range values.
    
    2019-10-25  Iain Sandoe  <iain@sandoe.co.uk>
    
            * config/rs6000/darwin.h (ASM_OUTPUT_MAX_SKIP_ALIGN):Guard
            against out of range max skip or log values.
    
    From-SVN: r277463

commit 3c0afb45065aa9f2e806c31a773fd1e04550aaa3
Author: Richard Earnshaw <rearnsha@arm.com>
Date:   Fri Oct 25 14:37:14 2019 +0000

    [arm][PR88167] Fix __builtin_return_address returns invalid address
    
    This patch fixes a problem with the thumb1 prologue code where the link
    register could be unconditionally used as a scratch register even if the
    return value was still live at the end of the prologue.
    
    Additionally, the patch improves the code generated when we are not
    using many low call-saved registers to make use of any unused call
    clobbered registers to help with the saving of high registers that
    cannot be pushed directly (quite rare in normal code as the register
    allocator correctly prefers low registers).
    
    2019-05-08  Mihail Ionescu  <mihail.ionescu@arm.com>
                Richard Earnshaw  <rearnsha@arm.com>
    
    gcc:
    
            PR target/88167
            * config/arm/arm.c (thumb1_prologue_unused_call_clobbered_lo_regs): New
            function.
            (thumb1_epilogue_unused_call_clobbered_lo_regs): New function.
            (thumb1_compute_save_core_reg_mask): Don't force a spare work
            register if both the epilogue and prologue can use call-clobbered
            regs.
            (thumb1_unexpanded_epilogue): Use
            thumb1_epilogue_unused_call_clobbered_lo_regs.  Reverse the logic for
            picking temporaries for restoring high regs to match that of the
            prologue where possible.
            (thumb1_expand_prologue): Add any usable call-clobbered low registers to
            the list of work registers.  Detect if the return address is still live
            at the end of the prologue and avoid using it for a work register if so.
            If the return address is not live, add LR to the list of pushable regs
            after the first pass.
    
    gcc/testsuite:
    
            PR target/88167
            * gcc.target/arm/pr88167-1.c: New test.
            * gcc.target/arm/pr88167-2.c: New test.
    
    From-SVN: r277453

commit 51fd97e305845f121e7bbc3b4b67ccc832ca79ff
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Oct 25 00:16:53 2019 +0000

    Daily bump.
    
    From-SVN: r277431

commit d5e4044f203db0d0b8c94270152946cbd1ed6738
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Thu Oct 24 15:13:56 2019 +0100

    Fix tests that fail with -std=gnu++98 or -std=gnu++11
    
    Backport from mainline
    2019-06-06  Jonathan Wakely  <jwakely@redhat.com>
    
            * testsuite/20_util/is_nothrow_invocable/value.cc: Test converting to
            void.
            * testsuite/experimental/names.cc: Do not run for C++98 mode. Do not
            include Library Fundamentals or Networking headers in C++11 mode.
            * testsuite/ext/char8_t/atomic-1.cc: Do not run for C++98 mode.
    
    From-SVN: r277402

commit a506877462aa7ea64addc52af6bc1deca9e92f21
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Thu Oct 24 15:13:52 2019 +0100

    Do not declare std::uses_allocator before C++11
    
    Backport from mainline
    2019-10-22  Jonathan Wakely  <jwakely@redhat.com>
    
            * include/bits/memoryfwd.h (uses_allocator): Do not declare for C++98.
            * testsuite/17_intro/names.cc: Check uses_allocator in C++98.
    
    From-SVN: r277401

commit eee2bd1a8fa61761b5c55cc9c3f09b1ac1052a39
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Thu Oct 24 15:13:48 2019 +0100

    PR libstdc++/92143 adjust for OS X aligned_alloc behaviour
    
    OS X 10.15 adds aligned_alloc but it has the same restriction as the AIX
    version, namely that alignments smaller than sizeof(void*) are not
    supported.
    
    Backport from mainline
    2019-10-18  Jonathan Wakely  <jwakely@redhat.com>
    
            PR libstdc++/92143
            * libsupc++/new_opa.cc (operator new) [__APPLE__]: Increase alignment
            to at least sizeof(void*).
    
    From-SVN: r277400

commit 83b5dbb8d906c1ea5a7edcf7a38ec30c02314a95
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Thu Oct 24 15:13:43 2019 +0100

    Add makefile target to update HTML files in source tree
    
    Also remove the creation of the html/ext sub-directory, which has been
    unused since revision r245258.
    
    Backport from mainline
    2019-10-08  Jonathan Wakely  <jwakely@redhat.com>
    
            * doc/Makefile.am (doc-html-docbook-regenerate): New target.
            (${docbook_outdir}/html): Do not create unused 'html/ext' directory.
            * doc/Makefile.in: Regenerate.
            * doc/xml/manual/documentation_hacking.xml: Document new target.
            * doc/html/*: Regenerate.
    
    From-SVN: r277399

commit ad1e302d66872da674d801bf7afbb26a7b43fc12
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Thu Oct 24 15:13:39 2019 +0100

    Update URL for CUJ article in libstdc++ docs
    
            * doc/xml/manual/allocator.xml: Use archived copy of CUJ article.
    
    From-SVN: r277398

commit 4e77ca12a63452e0bd1b70609e8e028ab21088a9
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Thu Oct 24 15:13:31 2019 +0100

    Update URL for Hoard in libstdc++ docs
    
    Backport from mainline
    2019-05-31  Gerald Pfeifer  <gerald@pfeifer.com>
    
            * doc/xml/manual/allocator.xml: Move hoard.org back to http.
    
    From-SVN: r277397

commit a4b22198fbdec3f2bd01f9b4b2e82c8816761b73
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Thu Oct 24 15:13:25 2019 +0100

    PR libstdc++/92059 fix several bugs in tr2::dynamic_bitset
    
    Backport from mainline
    2019-10-11  Jonathan Wakely  <jwakely@redhat.com>
    
            PR libstdc++/92059
            * include/tr2/dynamic_bitset (__dynamic_bitset_base): Define all
            special member functions as defaulted. Add noexcept to most members.
            (__dynamic_bitset_base(size_t, unsigned long long, const _Alloc&)):
            Mask off unwanted bits in the __val parameter. Avoid undefined left
            shifts.
            (__dynamic_bitset_base::_M_assign): Remove.
            (__dynamic_bitset_base::_M_do_reset): Use std::fill.
            (__dynamic_bitset_base::_M_are_all_aux): Avoid integer promotion when
            block_type has lower rank than int.
            (dynamic_bitset): Add noexcept to most members. Use injected-class-name
            in return types and parameter types.
            (dynamic_bitset::_M_Nb): Add default member initializer.
            (dynamic_bitset(), dynamic_bitset(const dynamic_bitset&)): Define as
            defaulted.
            (dynamic_bitset(dynamic_bitset&&)): Clear source object after move.
            (dynamic_bitset::operator=(const dynamic_bitset&)): Define as
            defaulted.
            (dynamic_bitset::operator=(dynamic_bitset&&)): Add noexcept-specifier.
            Define without using swap, to propagate allocator correctly.
            (dynamic_bitset(const char*, const _Alloc&)): Use strlen.
            (dynamic_bitset::_M_do_sanitize, dynamic_bitset::_M_do_fill): Use
            casts to avoid unwanted integer promotions.
            (dynamic_bitset::_M_copy_from_ptr): Rearrange template parameters and
            add default template arguments and default argument to simplify usage.
            (dynamic_bitset::_M_copy_from_string): Adjust call to _M_copy_from_ptr.
            (operator==(const dynamic_bitset&, const dynamic_bitset&))
            (operator<(const dynamic_bitset&, const dynamic_bitset&)): Use _M_Nb.
            * include/tr2/dynamic_bitset.tcc (dynamic_bitset::_M_copy_from_ptr):
            Adjust template parameters to match declaration.
            * testsuite/tr2/dynamic_bitset/cmp.cc: New test.
            * testsuite/tr2/dynamic_bitset/cons.cc: New test.
            * testsuite/tr2/dynamic_bitset/copy.cc: New test.
            * testsuite/tr2/dynamic_bitset/move.cc: New test.
            * testsuite/tr2/dynamic_bitset/pr92059.cc: New test.
    
    From-SVN: r277396

commit fd7d467b60370be7c6b5bd137cfe13e5ba084f4a
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Oct 24 00:16:10 2019 +0000

    Daily bump.
    
    From-SVN: r277360

commit 41c229157e8e861097a4ffa8da5ca238c0b26df4
Author: Peter Bergner <bergner@linux.ibm.com>
Date:   Wed Oct 23 21:36:06 2019 +0000

    backport: config.gcc: Move -L usage from LINK_OS_EXTRA_SPEC32 and LINK_OS_EXTRA_SPEC64 to...
    
            Backport from mainline
            2019-10-08  Tulio Magno Quites Machado Filho  <tuliom@linux.ibm.com>
    
            * config.gcc: Move -L usage from LINK_OS_EXTRA_SPEC32 and
            LINK_OS_EXTRA_SPEC64 to MD_STARTFILE_PREFIX and
            MD_STARTFILE_PREFIX_1 when using --with-advance-toolchain.
    
    From-SVN: r277354

commit 6081e577fa4f381e1752206b991d7a29bbbe378c
Author: Richard Biener <rguenther@suse.de>
Date:   Wed Oct 23 12:31:24 2019 +0000

    backport: [multiple changes]
    
    2019-10-23  Richard Biener  <rguenther@suse.de>
    
            Backport from mainline
            2019-10-17  Richard Biener  <rguenther@suse.de>
    
            PR debug/91887
            * dwarf2out.c (gen_formal_parameter_die): Also try to match
            context_die against a DW_TAG_GNU_formal_parameter_pack parent.
    
            * g++.dg/debug/dwarf2/pr91887.C: New testcase.
    
            2019-09-19  Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/91812
            * tree-ssa-phiprop.c (propagate_with_phi): Do not replace
            volatile loads.
    
            * gcc.dg/torture/pr91812.c: New testcase.
    
            2019-09-17  Richard Biener  <rguenther@suse.de>
    
            PR debug/91772
            * dwarf2out.c (dwarf2out_late_global_decl): If early dwarf
            was missing generate locations only once.
    
    From-SVN: r277319

commit b5b1f91043e9cd454d4125f446afd65d7a0c6e0a
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Wed Oct 23 11:38:41 2019 +0000

    re PR tree-optimization/92131 (incorrect assumption that (ao >= 0) is always false)
    
            PR tree-optimization/92131
            * tree-vrp.c (extract_range_from_plus_minus_expr): If the resulting
            range would be symbolic, drop to varying for any explicit overflow
            in the constant part or if neither range is a singleton.
    
    From-SVN: r277316

commit d3ec38abf57b6aa2fa6b3ce19608d7970146600d
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Oct 23 00:16:16 2019 +0000

    Daily bump.
    
    From-SVN: r277304

commit 37ed31604727c8fc4c20bc4730dce5a673aff2ec
Author: Marek Polacek <polacek@redhat.com>
Date:   Tue Oct 22 17:46:12 2019 +0000

    PR c++/92106 - ICE with structured bindings and -Wreturn-local-addr.
    
            * typeck.c (maybe_warn_about_returning_address_of_local): Avoid
            recursing on null initializer and return false instead.
    
    From-SVN: r277296

commit d26d030105ea16f8a46cc1d9b284d06f5f573584
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Oct 22 00:16:08 2019 +0000

    Daily bump.
    
    From-SVN: r277274

commit 8b84d2004e74c1259ac647ed19a4bed475742908
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Oct 21 00:16:09 2019 +0000

    Daily bump.
    
    From-SVN: r277219

commit 78a59da681a55ba3cd23edb61cb6c39e16ddfd5d
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Sun Oct 20 16:43:57 2019 +0000

    [Darwin] Pick up SDKROOT as the sysroot fallback.
    
    For compatibility with xcrun and the behaviour of the clang driver, make use
    of the setting of the SDKROOT environment variable when it is available.
    This applies to both finding headers and libraries (i.e. it is also passed to
    ld64).
    
    Priority:
    1. User's command-line specified --sysroot= or -isysroot.
    2. The SDKROOT variable when set, and validated.
    3. Any sysroot provided by --with-sysroot= configuration parameter.
    
    SDKROOT is checked thus:
    1. Presence.
    2. That it starts with / (i.e. 'absolute').
    3. That it is not / only (since that's the default).
    4. That it is readable by the process executing the driver.
    
    This is pretty much the same rule set as used by the clang driver.
    
    NOTE: (3) might turn out to be overly restrictive in the case that we
    have configured with --with-sysroot= and then we want to run on a system
    with an installation of the headers/libraries in /. We can revisit this
    if that turns out to be an important use-case.
    
    So one can do:
    
    xcrun --sdk macosx /path/to/gcc ....
    
    and that provides the SDK path as the sysroot to GCC as expected.
    
    CAVEAT: An unfortunate effect of the fact that gcc (and g++) are
    executables in the Xcode installation, which are found ahead of any such
    named in the $PATH
    
    PATH=/path/to/gcc/install:$PATH
    xcrun --sdk macosx gcc ....
    
    does *not* work, instead that executes the clang from the xcode/commmand
    line tools installation.
    
    PATH=/path/to/gcc/install:$PATH
    xcrun --sdk macosx x64_64-apple-darwinXX-gcc ...
    
    does work as expected, however.
    
    gcc/
    
    2019-10-20  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline
            2019-10-03  Iain Sandoe  <iain@sandoe.co.uk>
    
            PR target/87243
            * config/darwin-driver.c (maybe_get_sysroot_from_sdkroot): New.
            (darwin_driver_init): Use the sysroot provided by SDKROOT when that
            is available and the user has not set one on the command line.
    
    From-SVN: r277213

commit c4c0f9e4533284bc40f7a7e43777c4714198e7a9
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Sun Oct 20 16:29:27 2019 +0000

    [Darwin, specs] Fix driver handling of PIE options.
    
    pie, no-pie and rdynamic are driver options, we can process them in the
    relevant place and drop them once dealt with. There's no need to generate
    a new header to process the no_compact_unwind which is applied on the
    basis of the target system.
    
    Support for the -pie, -no_pie and -no_compact_unwind options should ideally
    be checked at configure time, however the status quo is to assert that linkers
    capable of targeting the relevant systems support these options (i.e. we trust
    that the user doesn't attempt to configure inappropriately).
    
    TODO: check the availability of the linker opts in configure rather than
    trusting to the user.
    
    This will fix the fail of pie-7.c, which is a result of failing to handle the
    no-pie driver option.
    
    gcc/
    
    2019-10-20  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline
            2019-07-03  Iain Sandoe  <iain@sandoe.co.uk>
    
            * config/darwin.h (DRIVER_SELF_SPECS): Remove the linker cases.
            (RDYNAMIC): Rename to, DARWIN_RDYNAMIC.
            (DARWIN_PIE_SPEC, DARWIN_NOPIE_SPEC): Adjust to remove the Xlinker
            clauses.
            (LINK_COMMAND_SPEC_A): Add DARWIN_RDYNAMIC, DARWIN_PIE_SPEC and
            DARWIN_NOPIE_SPEC.
    
            Backport from mainline
            2019-06-19  Iain Sandoe  <iain@sandoe.co.uk>
    
            * config/darwin.h (DRIVER_SELF_SPECS): Add RDYNAMIC, DARWIN_PIE_SPEC
            and DARWIN_NOPIE_SPEC.
            (RDYNAMIC): New, modified from DARWIN_EXPORT_DYNAMIC.
            (DARWIN_PIE_SPEC): Collate from darwin.h and darwin9.h.
            (DARWIN_NOPIE_SPEC): Collate from darwin10.h.
            (DARWIN_NOCOMPACT_UNWIND): New from darwin10.h
            (DARWIN_EXPORT_DYNAMIC): Delete.
            * config/darwin10.h (LINK_GCC_C_SEQUENCE_SPEC): Move no_compact_unwind
            and pie options processing to  darwin.h.
            * config/darwin9.h (DARWIN_PIE_SPEC): Move pie processing to darwin.h
    
    From-SVN: r277212

commit 86df880a2842c095910544512ed3b8ff1f35e209
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Oct 20 00:16:19 2019 +0000

    Daily bump.
    
    From-SVN: r277207

commit 818f1e34833aa0bf7c0c381e677f69b2f0d6dfc3
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Oct 19 00:18:01 2019 +0000

    Daily bump.
    
    From-SVN: r277197

commit 7bcc7b301126aec27021510d4adb513d9ca17414
Author: Steven G. Kargl <kargl@gcc.gnu.org>
Date:   Fri Oct 18 18:18:34 2019 +0000

    re PR fortran/69455 ([F08] Assembler error(s) when using intrinsic modules in two BLOCK)
    
    2019-10-18  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/69455
            * trans-decl.c (generate_local_decl): Avoid misconstructed
            intrinsic modules in a BLOCK construct.
    
    2019-10-18  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/69455
            * gfortran.dg/pr69455_1.f90: New test.
            * gfortran.dg/pr69455_2.f90: Ditto.
    
    From-SVN: r277161

commit 30a73c9b8c4eb8b34742a2187c62e1d7a9a9c126
Author: Georg-Johann Lay <avr@gjlay.de>
Date:   Fri Oct 18 09:12:34 2019 +0000

    backport: re PR target/86040 ([avr]: RAMPZ is not always cleared after loading __flashN data)
    
            Backport from 2019-10-18 trunk r277143.
            PR target/86040
            * config/avr/avr.c (avr_out_lpm): Do not shortcut-return.
    
    From-SVN: r277148

commit 834885a884429e9f6b34059f170902817454ef8e
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Oct 18 00:16:08 2019 +0000

    Daily bump.
    
    From-SVN: r277138

commit d6863e029c905aacbe080e0a72590001b212219d
Author: Segher Boessenkool <segher@kernel.crashing.org>
Date:   Thu Oct 17 21:51:01 2019 +0200

    backport: re PR rtl-optimization/89721 (__builtin_mffs sometimes optimized away)
    
            Backport from trunk
            2019-03-15  Segher Boessenkool  <segher@kernel.crashing.org>
    
            PR rtl-optimization/89721
            * lra-constraints (invariant_p): Return false if side_effects_p holds.
    
    From-SVN: r277131

commit 54dbec2788abc1f0659b9e36e4a2a63778aa62cd
Author: Richard Earnshaw <rearnsha@arm.com>
Date:   Thu Oct 17 16:47:42 2019 +0000

    [arm]  PR target/89400 fix thumb1 unaligned access expansion
    
    Armv6 has support for unaligned accesses to memory.  However, the
    thumb1 code patterns were trying to use the 32-bit code constraints.
    One failure mode from this was that the patterns are designed to be
    compatible with conditional execution and this was then causing an
    assert in the compiler.
    
    The unaligned_loadhis pattern is only used for expanding extv, which
    in turn is only enabled for systems supporting thumb2.  Given that
    there is no simple expansion for a thumb1 sign-extending load (the
    instruction has no immediate offset form and requires two registers in
    the address) it seems simpler to just disable this for thumb1.
    
    Fixed thusly:
    
            Backport from trunk:
            2019-05-03  Richard Earnshaw  <rearnsha@arm.com>
    
            PR target/89400
            * config/arm/arm.md (unaligned_loadsi): Add variant for thumb1.
            Restrict 'all' variant to 32-bit configurations.
            (unaligned_loadhiu): Likewise.
            (unaligned_storehi): Likewise.
            (unaligned_storesi): Likewise.
            (unaligned_loadhis): Disable when compiling for thumb1.
    
    From-SVN: r277124

commit 731e5839f9c51f72eadf2d55252b3039c36628bd
Author: Bill Schmidt <wschmidt@linux.ibm.com>
Date:   Thu Oct 17 15:33:58 2019 +0000

    backport: re PR testsuite/92093 (New test case gcc.target/powerpc/pr91275.c from r276410 fails on BE)
    
    2019-10-17  Bill Schmidt  <wschmidt@linux.ibm.com>
    
            Backport from mainline
            2019-10-15  Bill Schmidt  <wschmidt@linux.ibm.com>
    
            PR target/92093
            * gcc.target/powerpc/pr91275.c: Fix type and endian issues.
    
    From-SVN: r277118

commit 9432b617b45a5b9bd81a80eec05cab6e710193d5
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Oct 17 00:16:09 2019 +0000

    Daily bump.
    
    From-SVN: r277086

commit e2a0a168bc6d13ab19ef265b6275be71e0b21e6d
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Oct 16 00:16:08 2019 +0000

    Daily bump.
    
    From-SVN: r277031

commit acd30b2cb73f3e2f21acbb4ad4a14b54a004a1b9
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Oct 15 00:16:09 2019 +0000

    Daily bump.
    
    From-SVN: r276980

commit 5ae22e85e97b2ede85eb4d0dfd515a2114802722
Author: Will Schmidt <will_schmidt@vnet.ibm.com>
Date:   Mon Oct 14 18:08:58 2019 +0000

    backport: rs6000-builtin.def: (LVSL...
    
    Backport from trunk
    [gcc]
    
    2019-09-26  Will Schmidt <will_schmidt@vnet.ibm.com>
            * config/rs6000/rs6000-builtin.def: (LVSL, LVSR, LVEBX, LVEHX,
            LVEWX, LVXL, LVXL_V2DF, LVXL_V2DI, LVXL_V4SF, LVXL_V4SI, LVXL_V8HI,
            LVXL_V16QI, LVX, LVX_V1TI, LVX_V2DF, LVX_V2DI, LVX_V4SF, LVX_V4SI,
            LVX_V8HI, LVX_V16QI, LVLX, LVLXL, LVRX, LVRXL, LXSDX, LXVD2X_V1TI,
            LXVD2X_V2DF, LXVD2X_V2DI, LXVDSX, LXVW4X_V4SF, LXVW4X_V4SI,
            LXVW4X_V8HI, LXVW4X_V16QI, LD_ELEMREV_V1TI, LD_ELEMREV_V2DF,
            LD_ELEMREV_V2DI, LD_ELEMREV_V4SF, LD_ELEMREV_V4SI, LD_ELEMREV_V8HI,
            LD_ELEMREV_V16QI): Use the PURE attribute.
    
    [testsuite]
    
    2019-09-26  Will Schmidt <will_schmidt@vnet.ibm.com>
            * gcc.target/powerpc/pure-builtin-redundant-load.c:  New.
    
    From-SVN: r276965

commit ccc56b134ad20adddc477f0cc1a4985520563d3a
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Oct 14 00:16:09 2019 +0000

    Daily bump.
    
    From-SVN: r276945

commit a1382ec9f2a8c9fb035eb269911ae18a43c94258
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Oct 13 00:16:18 2019 +0000

    Daily bump.
    
    From-SVN: r276931

commit 94b67726568acc2be48c1f187b5fcc837c023410
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Sat Oct 12 14:50:05 2019 +0000

    re PR ada/91995 (gnat miscompilation and bootstrap failure on m68k-linux)
    
            PR ada/91995
            * sem_ch8.adb (Chain_Use_Clause): Remove second argument in calls
            to Defining_Entity.
            * sem_elab.adb (Find_Unit_Entity): Likewise.  Deal with N_Subunit
            here in lieu of in Defining_Entity.
            * sem_spark.adb (Check_Callable_Body): Likewise.
            (Check_Package_Body): Likewise.
            * sem_util.ads (Defining_Entity): Remove 2nd and 3th parameters.
            * sem_util.adb (Defining_Entity): Remove 2nd and 3th parameters,
            and adjust accordingly.  Deal with N_Compilation_Unit.
    
    From-SVN: r276918

commit 2bba66abb82b483b41296be0fd4bd166651478eb
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Oct 12 00:16:09 2019 +0000

    Daily bump.
    
    From-SVN: r276910

commit 877cf43d567ca8817a76cf1fc89d5faf1832d319
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Fri Oct 11 08:57:48 2019 +0000

    decl.c (annotate_value): Really test the sign of the value when deciding to build a NEGATE_EXPR.
    
            * gcc-interface/decl.c (annotate_value) <INTEGER_CST>: Really test the
            sign of the value when deciding to build a NEGATE_EXPR.
            <PLUS_EXPR>: Remove redundant line.
            <BIT_AND_EXPR>: Do the negation here.
    
    From-SVN: r276868

commit 167ee62be78a215a1e14e0971391cb85cf300d4f
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Oct 11 00:16:32 2019 +0000

    Daily bump.
    
    From-SVN: r276856

commit 2cd9710a59b9888a8c3c6dcd328b3c5f1a338678
Author: Uros Bizjak <ubizjak@gmail.com>
Date:   Thu Oct 10 19:58:24 2019 +0200

    re PR target/92022 (ICE in alpha_handle_trap_shadows, at config/alpha/alpha.c:8847)
    
            PR target/92022
            * config/alpha/alpha.c (alpha_handle_trap_shadows): Skip DEBUG_INSN.
    
    testsuite/ChangeLog:
    
            PR target/92022
            * g++.dg/pr92022.C: New test.
    
    From-SVN: r276845

commit 8e07e147e2389b76a23848cd0d2f455ef6f100c0
Author: Oleg Endo <olegendo@gcc.gnu.org>
Date:   Thu Oct 10 15:28:31 2019 +0000

    backport: re PR target/88630 (Incorrect float negating together with convertion to int on ST-40)
    
    gcc/
            Backport from mainline
            2019-10-10  Oleg Endo  <olegendo@gcc.gnu.org>
    
            PR target/88630
            * config/sh/sh.h (TARGET_FPU_SH4_300): New macro.
            * config/sh/sh.c (sh_option_override): Enable fsca and fsrra insns
            also for TARGET_FPU_SH4_300.
            (sh_emit_mode_set): Check for TARGET_FPU_SH4_300 instead of
            TARGET_SH4_300.
            * config/sh/sh.md (toggle_pr): Add TARGET_FPU_SH4_300 condition.
            (negsf2): Expand to either negsf2_fpscr or negsf2_no_fpscr.
            (*negsf2_i): Split into ...
            (negsf2_fpscr, negsf2_no_fpscr): ... these new patterns.
            (abssf2): Expand to either abssf2_fpsc or abssf2_no_fpsc.
            (**abssf2_i): Split into ...
            (abssf2_fpscr, abssf2_no_fpscr): ... these new patterns.
            (negdf2): Expand to either negdf2_fpscr or negdf2_no_fpscr.
            (*negdf2_i): Split into ...
            (negdf2_fpscr, negdf2_no_fpscr): ... these new patterns.
            (absdf2): Expand to either absdf2_fpscr or absdf2_no_fpsc.
            (**abssf2_i): Split into ...
            (absdf2_fpscr, absdf2_no_fpscr): ... these new patterns.
    
    From-SVN: r276837

commit 832fc0be5768c8a5555aadb7cbb1ee48f33505cf
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Oct 10 00:16:11 2019 +0000

    Daily bump.
    
    From-SVN: r276784

commit 4992e67ea11fc23552fd19b9dc3705ec2f88d2b1
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Oct 9 00:16:14 2019 +0000

    Daily bump.
    
    From-SVN: r276748

commit 8556052bf4cc2783e50cba7ba94bbdc8198298b3
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Oct 8 00:16:08 2019 +0000

    Daily bump.
    
    From-SVN: r276683

commit b12d2cc9c970b2fb943607b30da761257641f57f
Author: Thomas Koenig <tkoenig@gcc.gnu.org>
Date:   Mon Oct 7 20:12:00 2019 +0000

    backport: re PR fortran/84487 (Large rodate section increase in 465.tonto with r254427)
    
    2019-10-07  Thomas Koenig <tkoenig@gcc.gnu.org>
    
            Backport from trunk
            PR fortran/84487
            * trans-decl.c (gfc_get_symbol_decl): For __def_init, set
            DECL_ARTIFICAL and do not set TREE_READONLY.
    
    2019-10-07  Thomas Koenig <tkoenig@gcc.gnu.org>
    
            Backport from trunk
            PR fortran/84487
            * gfortran.dg/typebound_call_22.f03: xfail.
    
    From-SVN: r276673

commit e0523e892f3ddeb79377ef92dd95abd0a05896cf
Author: Bill Schmidt <wschmidt@linux.ibm.com>
Date:   Mon Oct 7 19:34:41 2019 +0000

    backport: re PR target/91275 (__builtin_crypto_vpmsumd gives different results -O[123] vs -O0)
    
    [gcc]
    
    2019-10-07  Bill Schmidt  <wschmidt@linux.ibm.com>
    
            Backport from mainline
            2019-10-01  Bill Schmidt  <wschmidt@linux.ibm.com>
    
            PR target/91275
            * config/rs6000/rs6000-p8swap.c (rtx_is_swappable_p): Don't swap
            vpmsumd.
    
    [gcc/testsuite]
    
    2019-10-07  Bill Schmidt  <wschmidt@linux.ibm.com>
    
            Backport from mainline
            2019-10-01  Bill Schmidt  <wschmdit@linux.ibm.com>
    
            PR target/91275
            * gcc.target/powerpc/pr91275.c: New.
    
    From-SVN: r276669

commit bc20b2e156a258ce40464b9e95aff16dc266556b
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Oct 7 00:16:17 2019 +0000

    Daily bump.
    
    From-SVN: r276642

commit c90fea470301659452699836c7522cd0bb375522
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Oct 6 00:16:27 2019 +0000

    Daily bump.
    
    From-SVN: r276632

commit 8cffac10f60780cb0add67975332f34dc1760169
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Oct 5 00:16:12 2019 +0000

    Daily bump.
    
    From-SVN: r276616

commit 2d5d816de6bc7f80fdc650e50f74ceaff3895e27
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Oct 4 00:16:09 2019 +0000

    Daily bump.
    
    From-SVN: r276558

commit 364a53cf3a4f29a1f0a2613538c74060e7401e16
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Oct 3 00:16:11 2019 +0000

    Daily bump.
    
    From-SVN: r276500

commit ec6a2a25d85db8468273e49c375fd50db7c47b0f
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Oct 2 00:16:11 2019 +0000

    Daily bump.
    
    From-SVN: r276436

commit a3bd45ab622962840ed49d38cffa8249d26b4465
Author: Oleg Endo <olegendo@gcc.gnu.org>
Date:   Tue Oct 1 15:00:40 2019 +0000

    backport: re PR c++/88562 (Incorrect pointer incrementing on SH4)
    
    gcc/
    2019-10-01  Oleg Endo  <olegendo@gcc.gnu.org>
    
            Backport from mainline
    
            2019-10-01  Oleg Endo  <olegendo@gcc.gnu.org>
    
            PR target/88562
            * config/sh/sh.c (sh_extending_set_of_reg::use_as_extended_reg): Use
            sh_check_add_incdec_notes to preserve REG_INC notes when replacing
            a memory access insn.
    
    From-SVN: r276413

commit 38bf71d294ea2a2fee6372e1d10f19a28197b7e3
Author: Kyrylo Tkachov <kyrylo.tkachov@arm.com>
Date:   Tue Oct 1 10:37:55 2019 +0000

    [AArch64] Don't split 64-bit constant stores to volatile location
    
    2019-10-01  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>
    
            Backport from mainline
            2019-09-24  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>
    
            * config/aarch64/aarch64.md (mov<mode>): Don't call
            aarch64_split_dimode_const_store on volatile MEM.
    
            * gcc.target/aarch64/nosplit-di-const-volatile_1.c: New test.
    
    From-SVN: r276399

commit cffa2bf1281d58711dcc08b4701621206f994661
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Tue Oct 1 08:10:17 2019 +0000

    re PR target/91854 (unaligned floating-point register with -mcpu=niagara4)
    
            PR target/91854
            Backport from mainline
            2019-09-20  Eric Botcazou  <ebotcazou@adacore.com>
    
            PR target/91269
            * config/sparc/sparc.h (HARD_REGNO_CALLER_SAVE_MODE): Define.
    
    From-SVN: r276390

commit 0af5edfc9bb7a2576dc105436ec76cc57dbd5820
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Oct 1 00:16:08 2019 +0000

    Daily bump.
    
    From-SVN: r276384

commit 4b55b160c79114ec4c3eec4bad0a5da729bdd24b
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Sep 30 00:16:31 2019 +0000

    Daily bump.
    
    From-SVN: r276274

commit 73a51e50c6aad6041fde49406cf6130ef06453e0
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Sep 29 00:16:23 2019 +0000

    Daily bump.
    
    From-SVN: r276262

commit b9be40ee26cd6974575c4b994e43d5956ee34605
Author: Paul Thomas <pault@gcc.gnu.org>
Date:   Sat Sep 28 15:48:35 2019 +0000

    backport: re PR fortran/91588 (ICE in check_inquiry, at fortran/expr.c:2673)
    
    2019-09-28  Paul Thomas  <pault@gcc.gnu.org>
    
            Backport from mainline
            PR fortran/91588
            * expr.c (check_inquiry): Remove extended component refs by
            using symbol pointers. If a function argument is an associate
            variable with a constant target, copy the target expression in
            place of the argument expression. Check that the charlen is not
            NULL before using the string length.
    
    2019-09-28  Paul Thomas  <pault@gcc.gnu.org>
    
            Backport from mainline
            PR fortran/91588
            * gfortran.dg/associate_49.f90 : New test.
    
    From-SVN: r276252

commit 429784c661328ca7ab43ac189bddca3e002b57a4
Author: Oleg Endo <olegendo@gcc.gnu.org>
Date:   Sat Sep 28 09:11:02 2019 +0000

    backport: re PR libitm/86712 (libitm produces libitm.so with TEXTREL on SuperH (sh4) in _ITM_beginTransaction)
    
    libitm/
    2019-09-28  Oleg Endo  <olegendo@gcc.gnu.org>
    
            Backport from mainline
            2018-08-03  Sergei Trofimovich  <slyfox@gentoo.org>
    
            PR target/86712
            * config/sh/sjlj.S: Adjust to use PIC vs normal code to avoid
            absolute relocation in a shared library.
    
    From-SVN: r276246

commit 758b803f4387cd633cc3a862b675a21267188c78
Author: Oleg Endo <olegendo@gcc.gnu.org>
Date:   Sat Sep 28 08:39:40 2019 +0000

    backport: re PR target/80672 (gcc/config/sh/sh.c:716: prefer compare to find.)
    
    gcc/
    2019-09-28  Oleg Endo  <olegendo@gcc.gnu.org>
    
            Backport from mainline
            2019-09-28  Oleg Endo  <olegendo@gcc.gnu.org>
    
            PR target/80672
            * config/sh/sh.c (parse_validate_atomic_model_option): Use
            std::string::compare instead of std::string::find.
    
    From-SVN: r276242

commit 71d58ef4fe92cd1750c1a0138f191a1881b44174
Author: Oleg Endo <olegendo@gcc.gnu.org>
Date:   Sat Sep 28 07:27:43 2019 +0000

    fix date typo in changelog
    
    From-SVN: r276238

commit eedb6c4b8ebb93c545be13ff68c1836d5546179f
Author: Oleg Endo <olegendo@gcc.gnu.org>
Date:   Sat Sep 28 07:23:10 2019 +0000

    backport: re PR target/85993 (config/sh/sh.c:10878: suspicious if .. else chain)
    
    gcc/
    2018-09-28  Oleg Endo  <olegendo@gcc.gnu.org>
    
            Backport from mainline
            2018-07-15  Jeff Law  <law@redhat.com>
    
            PR target/85993
            * config/sh/sh.c (output_mi_thunk): Remove dead conditional
            block.
    
    From-SVN: r276237

commit 863ca8b4b8a4ca4d4cd4503eb314fefcb940538b
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Sep 28 00:16:15 2019 +0000

    Daily bump.
    
    From-SVN: r276225

commit 49e7308708d720caa01d6bfde2eacb349e36bb42
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Sep 27 00:16:13 2019 +0000

    Daily bump.
    
    From-SVN: r276170

commit c0dc602546e9690dd07289e617c3c9533716a384
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Thu Sep 26 19:11:41 2019 +0000

    [Darwin, opts processing] Fix missing RejectNegative etc.
    
    This adds RejectNegative in a number of places it was needed,
    reorders the opts into two groups (one general and one driver-only).
    We also add a minimal description to each opt, and note some that
    are now obsolete. The only functional change is to permit
    -mtarget-linker= as an alias of -mtarget-linker.
    
    This fixes the Darwin part of PR89327
    
    2019-09-26  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline
            2019-06-16  Iain Sandoe  <iain@sandoe.co.uk>
    
            * config/darwin.opt (prebind, noprebind, seglinkedit,
            noseglinkedit): Add RejectNegative.
    
            Backport from mainline
            2019-06-14  Iain Sandoe  <iain@sandoe.co.uk>
    
            * config/darwin.opt: Add RejectNegative where needed, reorder
            and add minimal functional descriptions.
    
    From-SVN: r276161

commit 7a4df689588ffc1b519131fd137203beea5023fc
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Sep 26 00:16:15 2019 +0000

    Daily bump.
    
    From-SVN: r276137

commit 27366585f3bffe180f8a001281feddf18398c32a
Author: Kyrylo Tkachov <kyrylo.tkachov@arm.com>
Date:   Wed Sep 25 15:05:07 2019 +0000

    [arm] Fix use of CRC32 intrinsics with Armv8-a and hard-float
    
    2019-09-25  Kyrylo Tkachov <kyrylo.tkachov@arm.com>
    
            Backport from mainline
            2019-08-22  Kyrylo Tkachov <kyrylo.tkachov@arm.com>
    
            * config/arm/arm_acle.h: Use arch=armv8-a+crc+simd pragma for CRC32
            intrinsics if __ARM_FP.
            Use __ARM_FEATURE_CRC32 ifdef guard.
    
            * gcc.target/arm/acle/crc_hf_1.c: New test.
    
    From-SVN: r276129

commit 6e112f9d392d98c52ac5106c4cc27201e0194924
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Sep 25 00:16:33 2019 +0000

    Daily bump.
    
    From-SVN: r276109

commit 7f19e340a2443b24f22ecb7da18c4ed2f4f1d9a7
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Sep 24 00:16:27 2019 +0000

    Daily bump.
    
    From-SVN: r276087

commit 787723e67fdff8846055b06aafe3cffd47222c88
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Mon Sep 23 08:09:22 2019 +0000

    trans.c (Attribute_to_gnu): Test Can_Use_Internal_Rep on the underlying type of the node.
    
            * gcc-interface/trans.c (Attribute_to_gnu): Test Can_Use_Internal_Rep
            on the underlying type of the node.
            (Call_to_gnu): Likewise with the type of the prefix.
    
    From-SVN: r276043

commit fba5d9b4c0f4488281efbeef56c100bb52e55165
Author: Max Filippov <jcmvbkbc@gmail.com>
Date:   Mon Sep 23 07:48:41 2019 +0000

    xtensa: backport fix for PR target/90922
    
    Stack pointer adjustment code in prologue missed a case of no
    callee-saved registers and a stack frame size bigger than 128 bytes.
    Handle that case.
    
    This fixes the following gcc tests with call0 ABI:
      gcc.c-torture/execute/stdarg-2.c
      gcc.dg/torture/pr55882.c
      gcc.dg/torture/pr57569.c
    
    gcc/
    2019-09-23  Max Filippov  <jcmvbkbc@gmail.com>
    
            Backport from mainline
            2019-06-18  Max Filippov  <jcmvbkbc@gmail.com>
    
            * config/xtensa/xtensa.c (xtensa_expand_prologue): Add stack
            pointer adjustment for the case of no callee-saved registers and
            stack frame bigger than 128 bytes.
    
    From-SVN: r276038

commit 2ba270fd1e82e3b08d0dbd91d4029f0f2831f3e3
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Sep 23 00:16:10 2019 +0000

    Daily bump.
    
    From-SVN: r276033

commit eb98eb61303580688bff2936e61b5ec35a05163e
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Sep 22 00:16:08 2019 +0000

    Daily bump.
    
    From-SVN: r276024

commit 795e4222a55b66ed95743a49d17970d8a9144449
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Sep 21 00:16:09 2019 +0000

    Daily bump.
    
    From-SVN: r276013

commit 02238eb195286ce784fa1f8b0ebb82b1911e0540
Author: John David Anglin <danglin@gcc.gnu.org>
Date:   Fri Sep 20 21:56:25 2019 +0000

    pa.c (pa_trampoline_init): Remove spurious extended character.
    
            * config/pa/pa.c (pa_trampoline_init): Remove spurious extended
            character.
    
    From-SVN: r276009

commit 0321b83ad196ae48d26305bec25f04077840b31f
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Fri Sep 20 18:29:16 2019 +0000

    [Darwin, X86, testsuite] Fix PR81058.
    
    The tests fail because Darwin indirects common accesses which causes different
    codegen and the mismatch in output. Placing the vars in regular .data section
    fixes that.
    
    gcc/testsuite/
    
    2019-09-20  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-05-11  Iain Sandoe  <iain@sandoe.co.uk>
    
            PR testsuite/81058
            * gcc.target/i386/avx512bw-vpmovswb-1.c: Use regular data section
            for variables on Darwin, rather than common.
            * gcc.target/i386/avx512bw-vpmovuswb-1.c: Likewise.
            * gcc.target/i386/avx512bw-vpmovwb-1.c: Likewise.
    
    From-SVN: r276003

commit 8819c9c22c06d8bf1e42d2fa71115e33bb217228
Author: Andreas Krebbel <krebbel@linux.ibm.com>
Date:   Fri Sep 20 09:03:44 2019 +0000

    re PR rtl-optimization/88751 (Performance regression reload vs lra)
    
    Fix PR88751
    
    This patch implements a small improvement for the heuristic in lra
    which decides when it has to activate the simpler register allocation
    algorithm.
    
    gcc/ChangeLog:
    
    2019-09-20  Andreas Krebbel  <krebbel@linux.ibm.com>
    
            Backport from mainline
            2019-06-06  Andreas Krebbel  <krebbel@linux.ibm.com>
    
            PR rtl-optimization/88751
            * ira.c (ira): Use the number of the actually referenced registers
            when calculating the threshold.
    
    From-SVN: r275991

commit 1f34b783d58ef7965aa77e98ae498f9142612d3c
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Sep 20 00:16:08 2019 +0000

    Daily bump.
    
    From-SVN: r275984

commit 8252082355468fc2fcf25e1f4447c19e31ebb1c9
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Sep 19 00:16:08 2019 +0000

    Daily bump.
    
    From-SVN: r275922

commit 5f4b56adbbed69ba6c323544891f2dd8bf92c678
Author: Thomas Koenig <tkoenig@gcc.gnu.org>
Date:   Wed Sep 18 17:39:33 2019 +0000

    backport: re PR fortran/91550 (ICE in do_subscript, at fortran/frontend-passes.c:2652)
    
    2019-09-18  Thomas Koenig  <tkoenig@gcc.gnu.org>
    
        Backport from trunk
        PR fortran/91550
        * frontend-passes.c (do_subscript): If step equals
        zero, a previuos error has been reported; do nothing
        in this case.
        * resolve.c (gfc_resolve_iterator): Move error checking
        after type conversion.
    
    2019-09-18  Thomas Koenig  <tkoenig@gcc.gnu.org>
    
        Backport from trunk
        PR fortran/91550
        * gfortran.dg/do_subscript_6.f90: New test.
    
    From-SVN: r275892

commit 8a6e9d7ba30cfc1bd2abf22a623e276bc38bceb7
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Sep 18 00:16:08 2019 +0000

    Daily bump.
    
    From-SVN: r275831

commit cf39726e97ef55576b7bd442e6878ff0c76f37b5
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Sep 17 00:16:26 2019 +0000

    Daily bump.
    
    From-SVN: r275761

commit de168dd4d4e99e2e27159be39da3b9d85b2e45f7
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Sep 16 00:16:10 2019 +0000

    Daily bump.
    
    From-SVN: r275739

commit b62d5cd156420769fed19956b928f8afc1451833
Author: Thomas Koenig <tkoenig@gcc.gnu.org>
Date:   Sun Sep 15 20:01:44 2019 +0000

    backport: re PR fortran/91557 (Bogus warning about unused dummy argument _formal_*)
    
    2019-09-15  Thomas Koenig  <tkoenig@gcc.gnu.org>
    
            Backport from trunk
            PR fortran/91557
            * trans-decl.c (generate_local_decl): Do not warn if the symbol
            is artificial.
            * trans-types.c (get_formal_from_actual_arglist): Set artificial
            attribute on dummy arguments.
    
    2019-09-15  Thomas Koenig  <tkoenig@gcc.gnu.org>
    
            Backport from trunk
            PR fortran/91557
            * gfortran.dg/warn_unused_dummy_argument_5.f90: New test.
    
    From-SVN: r275734

commit 8c14c1a97177012420e1a6657e2241482dfc87b8
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Sep 15 00:16:15 2019 +0000

    Daily bump.
    
    From-SVN: r275721

commit 388974a3df7290072e2a24215503caa4ad278edf
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Sep 14 00:16:09 2019 +0000

    Daily bump.
    
    From-SVN: r275707

commit a3a942425cc4749fcc4f00c775a788a7fed540ed
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Sep 13 00:16:12 2019 +0000

    Daily bump.
    
    From-SVN: r275693

commit a5ca93fcaaef0182832fa1d1588fc5cac46300e5
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Sep 12 00:16:11 2019 +0000

    Daily bump.
    
    From-SVN: r275678

commit 8dc213622a65e4a921ed4757873a3cdf2a18ec5a
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Wed Sep 11 12:41:04 2019 +0100

    Fix Xmethod for shared_ptr::use_count()
    
    This was reported in https://bugzilla.redhat.com/show_bug.cgi?id=1749578
    
            * python/libstdcxx/v6/xmethods.py (SharedPtrUseCountWorker.__call__):
            Fix syntax error.
    
    From-SVN: r275646

commit d0cbed9de28be208b3b2009dc08f95bd8bd00f2d
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Wed Sep 11 10:43:19 2019 +0000

    re PR rtl-optimization/89795 (wrong code with -O2 -fno-dce -fno-forward-propagate -fno-sched-pressure)
    
            PR rtl-optimization/89795
            * rtlanal.c (nonzero_bits1) <SUBREG>: Do not propagate results from
            inner REGs to paradoxical SUBREGs if WORD_REGISTER_OPERATIONS is set.
    
    From-SVN: r275637

commit 9bcecde80fdf07a5afed4a4e141f5016110e240a
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Sep 11 00:16:29 2019 +0000

    Daily bump.
    
    From-SVN: r275620

commit 6eded78f9ec514afb747e9d026437c9b6c0f9382
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Sep 10 00:16:09 2019 +0000

    Daily bump.
    
    From-SVN: r275553

commit 867bd25bb01783dbc6e176b1e596a8474b1b44f7
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Mon Sep 9 13:00:46 2019 +0200

    re PR target/87853 (_mm_cmpgt_epi8 broken with -funsigned-char)
    
            PR target/87853
            * config/i386/emmintrin.h (_mm_cmpeq_epi8): Use casts to __v16qi
            instead of __v16qs.
    
            * gcc.target/i386/pr87853.c: New test.
    
    From-SVN: r275512

commit ea5ee7e192f3575db08427993fc8f7cafd7b3301
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Mon Sep 9 12:59:48 2019 +0200

    re PR target/91704 ([X86] Codegen for _mm256_cmpgt_epi8 is affected by -funsigned-char)
    
            PR target/91704
            * config/i386/avxintrin.h (__v32qs): New typedef.
            * config/i386/avx2intrin.h (_mm256_cmpgt_epi8): Use casts to __v32qs
            instead of __v32qi.
    
            * gcc.target/i386/pr91704.c: New test.
    
    From-SVN: r275511

commit ac8880d44e8a8601098466ef8499d88dc58efb71
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Sep 9 00:16:52 2019 +0000

    Daily bump.
    
    From-SVN: r275499

commit 0c3745ae5a60510f8b020772323a07818688f333
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Sep 8 00:16:26 2019 +0000

    Daily bump.
    
    From-SVN: r275491

commit b55a7be06eaaaec9b59c5912830c1da44f856db7
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Sep 7 00:16:31 2019 +0000

    Daily bump.
    
    From-SVN: r275480

commit 20a05cfee1ad7fc495bc30aaad91c70b0f012cd7
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Sep 6 00:16:29 2019 +0000

    Daily bump.
    
    From-SVN: r275447

commit 6e202bfc2ac5c01d22947ecc266a79e1ad4b5ef0
Author: Steven G. Kargl <kargl@gcc.gnu.org>
Date:   Thu Sep 5 19:28:04 2019 +0000

    re PR fortran/91660 (Missing error on invalid type declaration)
    
    2019-09-05  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/91660
            * decl.c (gfc_match_decl_type_spec): Improve and restore error
            message for malformed types-spec.
    
    2019-09-05  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/91660
            * gfortran.dg/pdt_4.f03: Fix invalid code.
            * gfortran.dg/pr91660_1.f90: New test.
            * gfortran.dg/pr91660_2.f90: Ditto.
    
    From-SVN: r275432

commit c10859f55632075dc5adbecf09a76f32a102988a
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Sep 5 00:16:17 2019 +0000

    Daily bump.
    
    From-SVN: r275393

commit fa8a4ffc4df3cb9e5ab314a780c4714603720602
Author: Wilco Dijkstra <wdijkstr@arm.com>
Date:   Wed Sep 4 13:06:55 2019 +0000

    [AArch64] Fix PR81800
    
    PR81800 is about the lrint inline giving spurious FE_INEXACT exceptions.
    The previous change for PR81800 didn't fix this: when lrint is disabled
    in the backend, the midend will simply use llrint.  This actually makes
    things worse since llrint now also ignores FE_INVALID exceptions!
    The fix is to disable lrint/llrint on double if the size of a long is
    smaller (ie. ilp32).
    
        gcc/
            PR target/81800
            * gcc/config/aarch64/aarch64.md (lrint): Disable lrint pattern if GPF
            operand is larger than a long int.
    
        testsuite/
            PR target/81800
            * gcc.target/aarch64/no-inline-lrint_3.c: New test.
    
    From-SVN: r275374

commit 0857a77e6bb295214c8193edc2afd90b4e79128c
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Sep 4 00:16:24 2019 +0000

    Daily bump.
    
    From-SVN: r275360

commit 5ef0b3665166612353aa0af3f02f25a1a14c9da9
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Tue Sep 3 18:56:04 2019 +0000

    [c-family] Backport fix for PCH / PR61250.
    
    When we are parsing a source file, the very first token might
    be a PRAGMA_GCC_PCH_PREPROCESS. This indicates that we are going
    read in a PCH file (named as the value of the pragma). If we don't
    see this pragma, then we know that it's OK to release any resources
    that the host might have set aside for the PCH file.
    
    There is a thinko in the current implementation, in that the decision
    to release resources is happening unconditionally right after the first
    token is extracted but before it's been checked or acted upon.
    
    This leads to the pch bug on Darwin, because we actually do release
    resources - which are subsequently (reasonably) assumed to be available
    when reading a PCH file. We then get random crashes or hangs depending
    on the interaction between unmmap and malloc.
    
    The bug is present everywhere but doesn't show on (say) Linux, since
    the release of PCH resources is a NOP there.
    
    This effects all the c-family front ends, because they all use
    c_lex_with_flags () to implement this.
    
    The solution is to check for the PRAGMA_GCC_PCH_PREPROCESS and only call
    c_common_no_more_pch () when that is not the first token.
    
    A secondary effect of the collection is that the name of the PCH file
    can be collected during the ggc_pch_read() reset of state. Therefore
    we should issue any diagnostic that might name the file before the
    collections are triggered.
    
    gcc/
    
    2019-09-03  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline
            2019-08-23  Iain Sandoe  <iain@sandoe.co.uk>
    
            PR pch/61250
            * ggc-page.c (ggc_pch_read): Read the ggc_pch_ondisk structure
            and issue any diagnostics needed before collecting the pre-PCH
            state.
    
    gcc/c-family/
    
    2019-09-03  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline
            2019-08-23  Iain Sandoe  <iain@sandoe.co.uk>
    
            PR pch/61250
            * c-lex.c (c_lex_with_flags):  Don't call
            c_common_no_more_pch () from here.
    
    gcc/c/
    
    2019-09-03  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-08-23  Iain Sandoe  <iain@sandoe.co.uk>
    
            PR pch/61250
            * c-parser.c (c_parse_file): Call c_common_no_more_pch ()
            after determining that the first token is not
            PRAGMA_GCC_PCH_PREPROCESS.
    
    gcc/cp/
    
    2019-09-03  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backported from mainline
            2019-08-23  Iain Sandoe  <iain@sandoe.co.uk>
    
            PR pch/61250
            * parser.c (cp_parser_initial_pragma): Call c_common_no_more_pch ()
            after determining that the first token is not
            PRAGMA_GCC_PCH_PREPROCESS.
    
    From-SVN: r275346

commit 3652c21835a77fdb8bd82b8c5e21fad9e62c14a3
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Sep 3 00:16:31 2019 +0000

    Daily bump.
    
    From-SVN: r275326

commit 9087360a6a41b52893924559ca9d7ad81591de7b
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Mon Sep 2 11:34:02 2019 +0100

    Regenerate libstdc++ HTML docs
    
            * doc/html/*: Regenerate.
    
    From-SVN: r275305

commit 9fb5ff2787b84ce8ecee10c6e59114b2add0ee72
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Mon Sep 2 09:12:42 2019 +0100

    Fix recent unique_ptr regressions
    
    These test changes should have been committed with r275193.
    
            * testsuite/20_util/unique_ptr/assign/48635_neg.cc: Replace dg-error
            with dg-prune-output for enable_if failure.
            * testsuite/20_util/unique_ptr/cons/cv_qual_neg.cc: Add
            dg-prune-output for enable_if failure.
    
    From-SVN: r275296

commit 6c10a9362671068a1c281e013708be4dedd366bf
Author: Richard Biener <rguenther@suse.de>
Date:   Mon Sep 2 07:12:11 2019 +0000

    re PR testsuite/91619 (New test case gcc.dg/vect/pr81740-2.c fails on powerpc64 power7 BE)
    
    2019-09-02  Richard Biener  <rguenther@suse.de>
    
            PR testsuite/91619
            * gcc.dg/vect/pr81740-2.c: Restrict to vect_hw_misalign.
    
    From-SVN: r275294

commit 6d31cf4a224995c987fb1cbc1f9aa9d231a8d9f4
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Sep 2 00:16:28 2019 +0000

    Daily bump.
    
    From-SVN: r275288

commit bbd9fa5733b1f8f6cfb8e427facfd713db90d561
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Sun Sep 1 19:43:33 2019 +0000

    [Ada, Darwin, PPC] PPC Darwin has stack check probes.
    
    On PPC, Darwin uses the same code as other parts of the port
    
    2019-09-01  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-07-02  Iain Sandoe  <iain@sandoe.co.uk>
    
            * libgnat/system-darwin-ppc.ads: Set Stack_Check_Probes True for
            PPC Darwin.
    
    From-SVN: r275283

commit 7ec3fe9a08386fe7d98ee0f6ee6692132bd0a54d
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Sun Sep 1 19:37:44 2019 +0000

    [PATCH, Ada] Push -shared-libgcc where needed.
    
    Gnatlink has code that checks for duplicate '-shared-libgcc’ switches (but not
    duplicate ‘static-libgcc’) and also pushes ’static-libgcc' onto the link line for
    targets that default to static linking, provided '-shared-libgcc' is not present.
    
    For targets that should use a shared libgcc we need the same process to be
    applied (in inverse), in the event that they do not default to providing the
    shared flag implicitly.
    
    So this adds the complementary set of tests for the shared case and pushes
    the shared flag as needed. As a minor tidy-up there’s no need push duplicates
    of the libgcc switch onto the link line when one has already been seen (given by
    the user).
    
    The patch does not alter any of the platform defaults for static/shared libgcc,
    but it ensures that the intent of the link is explicit.
    
    2019-09-01  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-06-30  Iain Sandoe  <iain@sandoe.co.uk>
    
            * gnatlink.adb (Link_Step): Push -shared-libgcc explicitly, when it
            is the target default (unless overidden by the static flag).
            When the user has put an instance of shared/static-libgcc do not push
            a duplicate of this.
    
    From-SVN: r275282

commit 45d58738140eb84d6802e53371af40f58c98940a
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Sun Sep 1 19:30:35 2019 +0000

    [objective-c/c++, testsuite] Workaround for PR90709.
    
    Since we cannot parse the current NeXT headers, because of PR90709 and its
    dependents, we have a large amount of testsuite noise for Darwin platforms.
    In order to restore the usefulness of the testsuite, we are going add headers
    without the modern syntax elements that trigger the bug, and use these for
    test runs on newer Darwin.
    
    The headers are imported from GNUStep, with some local modifications to make
    sure that __BLOCKS__ is honoured as a gate for Apple-style blocks closures.
    
    CF-CFString.h, F-NS*.h are proxy headers that use the installed CoreFoundation
    or Foundation headers on systems <= Darwin12 and the GNUStep headers for newer.
    
    Use the CF-CFString.h, F-NS*.h proxy headers where needed in the objective-c
    testsuite. Make minor adjustments to tests as required, providing that those
    do not alter the test intent.
    
    2019-09-01  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-06-15  Iain Sandoe  <iain@sandoe.co.uk>
    
            PR objc/90709
            * obj-c++.dg/proto-lossage-7.mm: Use proxy headers.
            * obj-c++.dg/strings/const-cfstring-2.mm: Likewise.
            * obj-c++.dg/strings/const-cfstring-5.mm: Likewise
            * obj-c++.dg/strings/const-str-12.mm: Likewise.
            * obj-c++.dg/syntax-error-1.mm: Likewise.
            * obj-c++.dg/torture/strings/const-cfstring-1.mm: Likewise.
            * obj-c++.dg/torture/strings/const-str-10.mm: Likewise.
            * obj-c++.dg/torture/strings/const-str-11.mm: Likewise.
            * obj-c++.dg/torture/strings/const-str-9.mm: Likewise.
            * obj-c++.dg/cxx-ivars-3.mm: Skip on later Darwin, where the 10.4 API
            in no longer supported, also on m64 where there's no meaning to it.
            * obj-c++.dg/isa-field-1.mm: Suppress unwanted warning, add comment why.
            * obj-c++.dg/objc-gc-3.mm: Skip for Darwin > 16, the API use is an error
            there.
            * obj-c++.dg/qual-types-1.mm: Prune a spurious l64 warning.
            * obj-c++.dg/stubify-1.mm: Tidy up after better compiler warnings.
            * obj-c++.dg/stubify-2.mm: Likewise.
            * obj-c++.dg/try-catch-1.mm: Likewise.
            * obj-c++.dg/try-catch-3.mm: Likewise.
    
            Backport from mainline.
            2019-06-15  Iain Sandoe  <iain@sandoe.co.uk>
    
            PR objc/90709
            * objc.dg/encode-7-next-64bit.m: Use proxy headers.
            * objc.dg/image-info.m: Likewise.
            * objc.dg/method-6.m: Likewise.
            * objc.dg/no-extra-load.m: Likewise.
            * objc.dg/objc-foreach-4.m: Likewise.
            * objc.dg/objc-foreach-5.m: Likewise.
            * objc.dg/proto-lossage-7.m: Likewise.
            * objc.dg/strings/const-cfstring-2.m: Likewise.
            * objc.dg/strings/const-cfstring-5.m: Likewise.
            * objc.dg/strings/const-str-12b.m: Likewise.
            * objc.dg/symtab-1.m: Likewise.
            * objc.dg/torture/strings/const-cfstring-1.m: Likewise.
            * objc.dg/torture/strings/const-str-10.m: Likewise.
            * objc.dg/torture/strings/const-str-11.m: Likewise.
            * objc.dg/torture/strings/const-str-9.m: Likewise.
            * objc.dg/zero-link-1.m: Likewise.
            * objc.dg/zero-link-2.m: Likewise.
            * objc.dg/zero-link-3.m: Likewise.
            * objc.dg/isa-field-1.m: Suppress unwanted warning, add comment why.
            * objc.dg/headers.m: XFAIL for Darwin14-19.
            * objc.dg/objc-gc-4.m: Skip for Darwin > 16, the API use is an error
            there.
    
            Backport from mainline.
            2019-06-15  Iain Sandoe  <iain@sandoe.co.uk>
    
            PR objc/90709
            * objc-obj-c++-shared/CF-CFString.h: New.
            * objc-obj-c++-shared/F-NSArray.h: New.
            * objc-obj-c++-shared/F-NSAutoreleasePool.h: New.
            * objc-obj-c++-shared/F-NSObject.h: New.
            * objc-obj-c++-shared/F-NSString.h: New.
            * objc-obj-c++-shared/F-NSValue.h: New.
            * objc-obj-c++-shared/GNUStep/CoreFoundation/CFArray.h: New.
            * objc-obj-c++-shared/GNUStep/CoreFoundation/CFAvailability.h: New.
            * objc-obj-c++-shared/GNUStep/CoreFoundation/CFBase.h: New.
            * objc-obj-c++-shared/GNUStep/CoreFoundation/CFCharacterSet.h: New.
            * objc-obj-c++-shared/GNUStep/CoreFoundation/CFData.h: New.
            * objc-obj-c++-shared/GNUStep/CoreFoundation/CFDictionary.h: New.
            * objc-obj-c++-shared/GNUStep/CoreFoundation/CFLocale.h: New.
            * objc-obj-c++-shared/GNUStep/CoreFoundation/CFString.h: New.
            * objc-obj-c++-shared/GNUStep/Foundation/NSArray.h: New.
            * objc-obj-c++-shared/GNUStep/Foundation/NSAutoreleasePool.h: New.
            * objc-obj-c++-shared/GNUStep/Foundation/NSDate.h: New.
            * objc-obj-c++-shared/GNUStep/Foundation/NSEnumerator.h: New.
            * objc-obj-c++-shared/GNUStep/Foundation/NSGeometry.h: New.
            * objc-obj-c++-shared/GNUStep/Foundation/NSObjCRuntime.h: New.
            * objc-obj-c++-shared/GNUStep/Foundation/NSObject.h: New.
            * objc-obj-c++-shared/GNUStep/Foundation/NSRange.h: New.
            * objc-obj-c++-shared/GNUStep/Foundation/NSString.h: New.
            * objc-obj-c++-shared/GNUStep/Foundation/NSValue.h: New.
            * objc-obj-c++-shared/GNUStep/Foundation/NSZone.h: New.
            * objc-obj-c++-shared/GNUStep/GNUstepBase/GNUstep.h: New.
            * objc-obj-c++-shared/GNUStep/GNUstepBase/GSBlocks.h: New.
            * objc-obj-c++-shared/GNUStep/GNUstepBase/GSConfig.h: New.
            * objc-obj-c++-shared/GNUStep/GNUstepBase/GSObjCRuntime.h: New.
            * objc-obj-c++-shared/GNUStep/GNUstepBase/GSVersionMacros.h: New.
            * objc-obj-c++-shared/GNUStep/GNUstepBase/NSArray+GNUstepBase.h: New.
            * objc-obj-c++-shared/GNUStep/GNUstepBase/NSMutableString+GNUstepBase.h:
            New.
            * objc-obj-c++-shared/GNUStep/GNUstepBase/NSNumber+GNUstepBase.h: New.
            * objc-obj-c++-shared/GNUStep/GNUstepBase/NSObject+GNUstepBase.h: New.
            * objc-obj-c++-shared/GNUStep/GNUstepBase/NSString+GNUstepBase.h: New.
    
    From-SVN: r275281

commit d76c281bfaab1ba1b45577af9dafe371e4b936bf
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Sun Sep 1 19:21:39 2019 +0000

    [Darwin, PPC, testsuite] Fix fail for bmi2-bzhi64-1a.c
    
    This test is failing with older cpus because the included header needs both
    altivec and vsx to be enabled to succeed in compiling. Without this (if these
    are not defaults for the cpu) there are errors like:
    
    In file included from ... x86intrin.h:41,
    from ... bmi2-bzhi64-1a.c:6:
    ... xmmintrin.h: In function '_mm_loadu_ps':
    ... xmmintrin.h:122:11:
    error: incompatible types when returning type 'int' but '__m128' {aka '__vector(4) float'} was expected
    <snip>
    ... xmmintrin.h: In function '_mm_cvtps_pi32':
    ... xmmintrin.h:996:3:
    error: use of 'long long' in AltiVec types is invalid without '-mvsx'
    <snip>
    
    Fixed by adding -maltivec -mvsx to the options.
    
    2019-09-01  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-07-27  Iain Sandoe  <iain@sandoe.co.uk>
    
            * gcc.target/powerpc/bmi2-bzhi64-1a.c: Add options to enable altivec
            and vsx.
    
    From-SVN: r275280

commit 2340b7205e7c0d8ee9da951b460dca1ce307370a
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Sun Sep 1 19:17:16 2019 +0000

    [Darwin, testsuite] Address PR91087 - XFAIL parts of pr16855.C.
    
    The testcase is failing to instrument part of the source because of a bug
    in the ordering of static DTORs. It seems unlikely that this is generically
    fixable in the toolchain (and given that it's likely to be a dynamic loader
    change would not be expected to be applied retrospectively to OS versions
    that are out of support). To avoid the testsuite noise, xfail the count lines
    that don't match (we can adjust the xfails as/when the upstream bug is fixed).
    
    dejagnu xfails do not seem to work when embedded in a line like:
    ~Test (void) { .... /* count(1) { xfail ... } */ }
    the closing brace seems to confuse the parser. The solution is to exapnd the
    text onto three lines.
    
    2019-09-01  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-07-25  Iain Sandoe  <iain@sandoe.co.uk>
    
            PR gcov-profile/91087
            * g++.dg/gcov/pr16855.C: Xfail the count lines for the DTORs and the
            "final" line for the failure summaries.  Adjust source layout so that
            dejagnu xfail expressions work.
    
    From-SVN: r275279

commit 945b96720c32d93d1b2be0582c6dabbe14ab37ad
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Sun Sep 1 19:13:39 2019 +0000

    [Darwin, PPC, testsuite] Require stabs support for a test.
    
    The test fails if the assembler doesn't support stabs.
    
    2019-09-01  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-07-13  Iain Sandoe  <iain@sandoe.co.uk>
    
            * gcc.target/powerpc/stabs-attrib-vect-darwin.c: Require stabs
            support.
    
    From-SVN: r275278

commit dac20118ca13fd9f1b1ba7ca755f96a3f0ae4b7d
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Sun Sep 1 19:09:45 2019 +0000

    [Darwin, PPC, testsuite] Skip tests for unimplemented functionality.
    
    The -mno-speculate-indirect-jumps functionality is not implemented for
    Darwin.
    
    2019-09-01  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-06-24  Iain Sandoe  <iain@sandoe.co.uk>
    
            * gcc.target/powerpc/safe-indirect-jump-1.c: Skip for Darwin.
            * gcc.target/powerpc/safe-indirect-jump-7.c: Likewise.
    
    From-SVN: r275277

commit 91dc02d5bb0ce951abe08fd2534c867184c2cd5e
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Sun Sep 1 18:57:42 2019 +0000

    [Darwin, testsuite] Backport fix for fails of pr90020.c.
    
    To allow weak references to be undefined at link-time, Darwin needs
    -Wl,-undefined,dynamic_lookup.  For them to work at runtime on older,
    Darwin versions, the lookup needs to use 'flat' namespace (i.e. ignore
    the two-level library naming).
    
    2019-09-01  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-04-15  Dominique d'Humieres  <dominiq@gcc.gnu.org>
    
            PR tree-optimization/90020
            * gcc.dg/torture/pr90020.c: Add linker options for Darwin.
    
    From-SVN: r275276

commit 8501ea6d93de644b8a5157d5f7323837f02973b0
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Sun Sep 1 18:53:13 2019 +0000

    [Darwin, X86, testsuite] Provide an asm shim for AVX512F tests.
    
    Allow the tests to run on Darwin
    
    2019-09-01  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-05-10  Iain Sandoe  <iain@sandoe.co.uk>
    
            * gcc.target/x86_64/abi/avx512f/abi-avx512f.exp: Darwin is
            now tested.
            * gcc.target/x86_64/abi/avx512f/asm-support-darwin.s: New.
    
    From-SVN: r275275

commit f2c5528f81d81520014cda1591764ea10635598d
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Sun Sep 1 12:59:09 2019 +0000

    re PR target/91472 (gmp testsuite segfaults with gcc-8 and gcc-9, works fine with gcc-7)
    
            PR target/91472
            * config/sparc/sparc.c (sparc_cannot_force_const_mem): Return true
            during LRA/reload in PIC mode if the PIC register hasn't been used yet.
            (sparc_pic_register_p): Test reload_in_progress for consistency's sake.
    
    From-SVN: r275273

commit e82da98a7cc93e242f52a3f5e55209888fa3c438
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Sep 1 00:16:35 2019 +0000

    Daily bump.
    
    From-SVN: r275262

commit 52bf2395654423761eb5a6546a2d8920430d43b6
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Sat Aug 31 20:13:57 2019 +0000

    [Darwin, PPC, testsuite] Fix spec-barr-1.c for Darwin.
    
    We just needed to adjust the regex to accept Darwin's register names.
    
    2019-08-31  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-06-24  Iain Sandoe  <iain@sandoe.co.uk>
    
            * gcc.target/powerpc/spec-barr-1.c: Adjust scan assembler regex
            to recognise Darwin's register names.
    
    From-SVN: r275257

commit fa84b06ae5a5a9779bf0e7bb5acb94450ee26693
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Sat Aug 31 20:10:28 2019 +0000

    [Darwin, testsuite] Fix isysroot-1.c.
    
    For the test to succeed there needs to be some header that is to be found in
    the 'expected' place i.e. <sysroot>/usr/include/. It's important that it is
    not the name of a header for which fixincludes have been applied, since such
    headers will be found in the gcc include-fixed dir and, in general, reference
    additional headers. The dummy sysroot will prevent the additional headers
    from being found, resulting in a failed test. The fix is to use a header name
    that isn't expected to be present in a real sysroot.
    
    2019-08-31  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-06-24  Iain Sandoe  <iain@sandoe.co.uk>
    
            * gcc.dg/cpp/isysroot-1.c: Use <example.h> as the test header.
            * gcc.dg/cpp/usr/include/stdio.h: Rename...
            * gcc.dg/cpp/usr/include/example.h: ... to this.
    
    From-SVN: r275256

commit 80303c0403126d8dee3f940fe604cb01c1fed325
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Sat Aug 31 20:05:29 2019 +0000

    [Darwin, PPC, testsuite] Fix builtins-2 Darwin.
    
    This cannot pass for current Darwin, since it requires VSX and we
    don't have any hardware supporting that. Add a dg-requires clause
    for this.
    
    2019-08-31  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-06-23  Iain Sandoe  <iain@sandoe.co.uk>
    
            * gcc.target/powerpc/builtins-2.c: Require VSX hardware support.
    
    From-SVN: r275255

commit d8eade765ba057c58c58a20950ac1e42877fce8a
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Sat Aug 31 19:59:46 2019 +0000

    [Darwin, PPC, testsuite] Fix pr80125 testcase for Darwin.
    
    Darwin (unlike most of the members of the PowerPC port family)
    defaults to signed chars, so the test was failing to compile with
    a "mismatched parameters" error.
    
    2019-08-31  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-06-23  Iain Sandoe  <iain@sandoe.co.uk>
    
            * gcc.target/powerpc/pr80125.c (foo): Use an unsigned char
            vector explicitly for the vec_perm.
    
    From-SVN: r275254

commit fa1499bdde5cc600d580fd78d6f15332a59fa8b4
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Sat Aug 31 19:55:44 2019 +0000

    [Darwin, PPC, testsuite] Fix pr71785 testcase for Darwin.
    
    Firstly, we adjust the test conditions to use non-PIC code for Darwin.
    Secondly, we have to account for out-of-line GPR restores which gives
    a false positive on one of the scan-assembler-not. Lastly, we make the
    test a bit more specific for Darwin - that it looks for absence of
    branches to local labels.
    
    2019-08-31  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-06-23  Iain Sandoe  <iain@sandoe.co.uk>
    
            * gcc.target/powerpc/pr71785.c: For Darwin, make test non-PIC,
            expect the out-of-line GPR restore, and test specifically for
            absence of branches to local labels.
    
    From-SVN: r275253

commit 0bf2f0510d782a4dfbe35331132b6ba3460191e8
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Sat Aug 31 19:48:25 2019 +0000

    [Darwin, PPC, testsuite] Add requires for DFP to two tests.
    
    The two tests use decimal floating point, add the relevant dg-requires
    so that they are unsupported on platforms without DFP.
    
    2019-08-31  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-06-22  Iain Sandoe  <iain@sandoe.co.uk>
    
            * gcc.target/powerpc/pr64205.c: Require effective target dfp.
            * gcc.target/powerpc/pr79909.c: Likewise.
    
    From-SVN: r275252

commit e439f1fab949ae7533578eb0a741dca6fcbfa05e
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Sat Aug 31 19:43:40 2019 +0000

    [Darwin, PPC, testsuite] Fix darwin-bool-1.c.
    
    This test is failing because of a pedantic warning that is unrelated to
    the purpose of the test. Fixed by suppressing that warning.
    
    2019-08-31  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-06-22  Iain Sandoe  <iain@sandoe.co.uk>
    
            * gcc.target/powerpc/darwin-bool-1.c: Suppress the pedantic
            warning about _Bool.
    
    From-SVN: r275251

commit 46f3de2fe8f5a5daa0c81f6fd04eb4442a88b85e
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Sat Aug 31 19:39:58 2019 +0000

    [Darwin, testsuite] Fix pr71694 fail for m32.
    
    This test fails for Darwin m32 because it's scanning for absence
    of an instruction that's validly used in PIC code. Fixed, in this
    case, by using non-PIC codegen.
    
    2019-08-31  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-06-13  Iain Sandoe  <iain@sandoe.co.uk>
    
            * g++.dg/pr71694.C: Use non-PIC codegen for Darwin m32.
    
    From-SVN: r275250

commit 51c34aba64d42feca77ac7c73d334e74885bb850
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Sat Aug 31 19:35:54 2019 +0000

    [Darwin, testsuite] Adjust two tests for newer OS versions.
    
    Newer OS versions (10.14+) do not provide some of the CRTs that are used
    for older ones (e.g. 10.5), and thus link tests that specify targeting
    such a revision fail. We retain the testing of the correct defined OS
    version number but switch to compile-only testing for these two tests.
    
    We have already introduced a replacement test for this with the updated
    processing of -mmacosx-version-min=.
    
    2019-08-31  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-06-13  Iain Sandoe  <iain@sandoe.co.uk>
    
            * gcc.dg/darwin-minversion-1.c: Use compile rather than link/run.
            * gcc.dg/darwin-minversion-2.c: Likewise.
    
    From-SVN: r275249

commit d54946306c2d0d5f7741a157619a59bc90befb12
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Sat Aug 31 19:23:54 2019 +0000

    [Darwin, testsuite] Fix PR 65364 (uninit-19.c).
    
    This test currently fails on Darwin, because the port inlines fn2 for
    both PIC (and non-pic for m32). Fixed by adjusting the target condition.
    
    2019-08-31  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-06-11  Iain Sandoe  <iain@sandoe.co.uk>
    
            PR testsuite/65364
            * gcc.dg/uninit-19.c (fn1): Adjust target condition for Darwin.
            (fn2): Likewise.
    
    From-SVN: r275248

commit 52a081cca3cc4b55a865294183e65b079481e42f
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Sat Aug 31 19:19:45 2019 +0000

    [Darwin, c++, testsuite] Adjust alignas4.C for Darwin's asm syntax.
    
    Darwin produces aligned zerofill directives for the objects represented.
    We can scan for these using lp64 and ilp32 to catch operation on both
    X86 and PowerPC ports (the test is for the alignment which is the trailing
    value in the zerofill directive, as a power of two).
    
    2019-08-31  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-06-06  Iain Sandoe  <iain@sandoe.co.uk>
    
            * g++.dg/cpp0x/alignas4.C: Amend test to check for zerofill syntax
            on Darwin.
    
    From-SVN: r275247

commit 710d6269e1d93d6da1fdf2952f746e35a0a02365
Author: Segher Boessenkool <segher@kernel.crashing.org>
Date:   Sat Aug 31 20:58:04 2019 +0200

    rs6000: Fix darn-3.c for GCC 8 and GCC 7
    
    Apparently I didn't properly test the testcase backport to GCC 8 and
    GCC 7.  This makes it not fail there.
    
    
            PR target/91481
            * gcc.target/powerpc/darn-3.c: Fix testcase.
    
    From-SVN: r275244

commit 1bbdc7f3392a9c847612315eadfb6c4da014109e
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Aug 31 00:16:40 2019 +0000

    Daily bump.
    
    From-SVN: r275233

commit f04118956e58e7caac126a4ccd31551cc31fd28d
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Fri Aug 30 20:02:13 2019 +0000

    [Darwin, X86, testsuite] Add xfails for PR90698.
    
    We don't have support for -mcmodel={medium, large, kernel} so don't
    expect tests for those things to work.
    
    For now mark them as xfail where possible and skip where that isn't.
    These changes will be logged onto the PR and therefore can be backed
    out when the facility is implemented.
    
    2019-08-30  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-06-01  Iain Sandoe  <iain@sandoe.co.uk>
    
            PR target/90698
            * gcc.target/i386/pr49866.c: XFAIL for Darwin.
            * gcc.target/i386/pr63538.c: Likewise.
            * gcc.target/i386/pr61599-1.c: Skip for Darwin.
    
    From-SVN: r275224

commit 8c33d9350008dba04c03df53715144c82d4cfafd
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Fri Aug 30 19:57:49 2019 +0000

    [c++, testsuite] Require alias support for a test.
    
    The test for pr84497 uses a facility that requires alias support from
    the target, and therefore fails on targets without. Add a suitable
    dg-require statement.
    
    2019-08-30  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-05-31  Iain Sandoe  <iain@sandoe.co.uk>
    
            * g++.dg/cpp0x/pr84497.C: Require alias support.
    
    From-SVN: r275222

commit 8162d9d6f9dc73d64d9dcaff01f9dac063e53ae8
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Fri Aug 30 19:53:51 2019 +0000

    [X86, testsuite] Require native TLS where it's used.
    
    2019-08-30  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-05-30  Iain Sandoe  <iain@sandoe.co.uk>
    
            * gcc.target/i386/stack-prot-sym.c: Require native TLS support.
    
    From-SVN: r275221

commit 773fa068865dae6fbab2afd34e3d4c7485d47bf0
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Fri Aug 30 19:48:34 2019 +0000

    [Darwin, X86, testsuite] Arrange to match Linux codegen.
    
    For this test, we can match the codegen expected in the scan-asms
    by avoiding the extra indirection that's mandated by the ABI for
    common access and by using -mdynamic-no-pic for the 32b case.
    
    2019-08-30  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-05-27  Iain Sandoe  <iain@sandoe.co.uk>
    
            * gcc.target/i386/pr22076.c: Adjust options to
            match codegen expected by the scan-asms.
    
    From-SVN: r275220

commit 1330f874e38d3cd95a38c2f74e9fe531bdf872c9
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Fri Aug 30 19:36:24 2019 +0000

    [Darwin, X86, testsuite] Backport fixes for three PIE tests.
    
    Darwin requires PIC code in order to support PIE, amend the test scan-asms
    to match this.
    
    2019-08-30  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-05-26  Iain Sandoe  <iain@sandoe.co.uk>
    
            * gcc.target/i386/pr39013-1.c: Adjust scan-asms for PIE to
            account for PIC code on Darwin.
            * gcc.target/i386/pr39013-2.c: Likewise.
            * gcc.target/i386/pr64317.c: Likewise.
    
    From-SVN: r275219

commit 7a109b2fcc966fdabfa51babd89f3cf23bff5cc2
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Fri Aug 30 19:33:08 2019 +0000

    [Darwin, X86, testsuite] Amend popcnt spelling for Darwin.
    
    Darwin uses a different spelling for popcnt (popcnt instead of popcntw).
    Check for this in the test.
    
    2019-08-30  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-05-25  Iain Sandoe  <iain@sandoe.co.uk>
    
            * gcc.target/i386/pr59874-3.c: Use the spelling of popcnt
            expected for Darwin.
    
    From-SVN: r275218

commit faa959d9a190112c13d8462f5cc52fc75d0c9082
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Fri Aug 30 19:24:45 2019 +0000

    [Darwin, X86, testsuite] Require alias support on a test.
    
    2019-08-30  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-05-25  Iain Sandoe  <iain@sandoe.co.uk>
    
            * gcc.target/i386/pr82659-3.c: Require alias support.
    
    From-SVN: r275217

commit 38d6655d3d1eb38cdb4e00fbc662832c249d9bc0
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Fri Aug 30 19:19:59 2019 +0000

    [Darwin/Linux, X86, testsuite] Adjust match strings.
    
    Some of the i386.exp tests fail on Darwin (and at least one passes
    incorrectly on Linux) because their scan-asm match strings are too
    general.  In some cases the strings also match instances in the .file
    and size directives or in comment output. This patch makes the match
    strings more specific.
    
    
    2019-08-30  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-05-24  Iain Sandoe  <iain@sandoe.co.uk>
    
            * gcc.target/i386/pconfig-1.c: Scan for the string in the generated
            code, not in comments or miscellaneous directives.
            * gcc.target/i386/wbinvd-1.c: Likewise.
            * gcc.target/i386/wbnoinvd-1.c: Likewise.
            * gcc.target/i386/pr66819-3.c: Specifically, check that there is no
            call to "bar".
            * gcc.target/i386/pr66819-4.c: Likewise.
            * gcc.target/i386/pr82662.c
    
    From-SVN: r275216

commit 9235c907c2e618b901a948d8b1c99ca842dcd213
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Fri Aug 30 19:12:36 2019 +0000

    [Darwin, X86, testsuite] Adjust test labels.
    
    A couple of the i386.exp tests fail because the label spelling used
    is different between ELF and Mach-O targets. Adjusted here.
    
    2019-08-30  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-05-24  Iain Sandoe  <iain@sandoe.co.uk>
    
            * gcc.target/i386/pr67985-2.c: Adjust label checks for
            Darwin.
            * gcc.target/i386/pr77881.c: Likewise.
    
    From-SVN: r275215

commit e1beb396fb58ab823c6ed58a06b832d9752a7b7e
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Fri Aug 30 19:07:54 2019 +0000

    [Darwin, X86, testsuite] Disable two tests that cannot pass.
    
    Several of the i386.exp target tests cannot pass on Darwin
    because either the port doesn't support a feature, or the
    ABI demands sufficiently different codegen that matching
    the output with scan-asms would require a different test.
    
    Disabling those tests here.
    
    2019-08-30  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-05-24  Iain Sandoe  <iain@sandoe.co.uk>
    
            * gcc.target/i386/pr70738-7.c: Likewise.
            * gcc.target/i386/pr24414.c: Likewise.
    
    From-SVN: r275214

commit b2d89e6b96457c47aef6bd3157a62fa75adb2cb2
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Fri Aug 30 19:00:44 2019 +0000

    [Darwin, testsuite] Backport fix for 64895 XPASSes.
    
    These tests don't fail on Darwin.
    
    2019-08-30  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-05-23  Iain Sandoe  <iain@sandoe.co.uk>
    
            PR rtl-optimisation/64895
            * gcc.target/i386/fuse-caller-save-rec.c: Remove XFAILs.
            * gcc.target/i386/fuse-caller-save.c: Likewise.
            * gcc.target/i386/fuse-caller-save-xmm.c: Adjust tests for
            PIC cases, remove XFAILs.
    
    From-SVN: r275213

commit 91bf768010394a342fb331a5fc6b6dbac236c448
Author: Richard Biener <rguenther@suse.de>
Date:   Fri Aug 30 16:37:43 2019 +0000

    backport: [multiple changes]
    
    2019-08-30  Richard Biener  <rguenther@suse.de>
    
            Backport from mainline
            2019-05-27  Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/90637
            * tree-ssa-sink.c (statement_sink_location): Honor the
            computed sink location for single-uses.
    
            2019-06-21  Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/90930
            * tree-ssa-reassoc.c (rewrite_expr_tree_parallel): Set visited
            flag on new stmts to avoid re-processing them.
    
    From-SVN: r275207

commit 6f663cb994cfab4572003409eae58e2304e0b017
Author: Richard Biener <rguenther@suse.de>
Date:   Fri Aug 30 16:33:05 2019 +0000

    backport: re PR tree-optimization/91108 (Fails to pun through unions)
    
    2019-08-30  Richard Biener  <rguenther@suse.de>
    
            Backport from mainline
            2019-07-08  Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/91108
            * tree-ssa-sccvn.c: Include builtins.h.
            (vn_reference_lookup_3): Use only alignment constraints to
            verify same-valued store disambiguation.
    
            * gcc.dg/tree-ssa/pr91091-1.c: New testcase.
            * gcc.dg/tree-ssa/ssa-fre-78.c: Likewise.
    
    From-SVN: r275206

commit fd3887b34fff4636b34bc9d7da758fb58488daf7
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Fri Aug 30 17:12:37 2019 +0100

    Avoid redundant runtime checks in std::visit
    
    Calling std::get will check some static assertions and also do a runtime
    check for a valid index before calling __detail::__variant::__get. The
    std::visit function already handles the case where any variant has an
    invalid index, so __get can be used directly in __visit_invoke.
    
    Backport from mainline
    2018-10-02  Jonathan Wakely  <jwakely@redhat.com>
    
            * include/std/variant (__gen_vtable_impl::__visit_invoke): Call __get
            directly instead of get, as caller ensures correct index is used.
            (holds_alternative, get, get_if): Remove redundant inline specifiers.
            (_VARIANT_RELATION_FUNCTION_TEMPLATE): Likewise.
    
    From-SVN: r275202

commit 6c2ff5c0329fcf76c5493ab67431fac424504a69
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Fri Aug 30 17:12:33 2019 +0100

    Avoid deprecation warning with -Wsystem-headers
    
    C++17 says to use std::uncaught_exceptions() here instead of
    std::uncaught_exception() but since we only care whether the result is
    non-zero (and we aren't planning to remove the deprecated version) we
    can just keep using std::uncaught_exception() and suppress the warning.
    
            * include/std/ostream (basic_ostream::sentry::~sentry): Suppress
            deprecation warnings for using uncaught_exception().
    
    From-SVN: r275201

commit 81a90960015cdd02dc7a265befa488ae23b8c3e3
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Fri Aug 30 16:01:15 2019 +0100

    PR libstdc++/91308 fix constraints on unique_ptr assignment
    
    Backport from mainline
    2019-07-31  Jonathan Wakely  <jwakely@redhat.com>
    
            PR libstdc++/91308
            * include/bits/unique_ptr.h (unique_ptr::__safe_conversion_up): Remove
            constraints on deleter that should only apply to the constructor.
            (unique_ptr<T[], D>::__safe_conversion_up): Likewise.
            (unique_ptr<T[], D>::unique_ptr(unique_ptr<U, D>&&)): Restore
            constraints on deleter here.
            * testsuite/20_util/unique_ptr/assign/91308.cc: New test.
    
    From-SVN: r275193

commit 19db4570ce43153a3b578ef45caae7d248348412
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Fri Aug 30 16:01:10 2019 +0100

    PR libstdc++/51333 Define recursive_init_error constructor non-inline
    
    The recursive_init_error class is defined in a header, with an inline
    constructor, but the definition of the vtable and destructor are not
    exported from the shared library. With -fkeep-inline-functions the
    constructor gets emitted in user code, and requires the (non-exported)
    vtable. This fails to link.
    
    As far as I can tell, the recursive_init_error class definition was
    moved into <cxxabi.h> so it could be documented with Doxygen, not for
    any technical reason. But now it's there (and documented), somebody
    could be relying on it, by catching that type and possibly performing
    derived-to-base conversions to the std::exception base class. So the
    conservative fix is to leave the class definition in the header but make
    the constructor non-inline. This still allows the type to be caught and
    still defines its base class.
    
    Backport from mainline
    2019-07-29  Jonathan Wakely  <jwakely@redhat.com>
    
            PR libstdc++/51333
            * libsupc++/cxxabi.h (__gnu_cxx::recursive_init_error): Do not define
            constructor inline.
            * libsupc++/guard_error.cc (__gnu_cxx::recursive_init_error): Define
            constructor.
            * testsuite/18_support/51333.cc: New test.
    
    From-SVN: r275192

commit 2f88d55091b2767a6c66d1d38200208daa8bbd17
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Fri Aug 30 15:39:22 2019 +0100

    Backport documentation fixes
    
    Backport from mainline
    2019-05-21  Jonathan Wakely  <jwakely@redhat.com>
    
            * doc/xml/manual/shared_ptr.xml: Fix names of lock policy constants.
    
    Backport from mainline
    2019-06-20  Jonathan Wakely  <jwakely@redhat.com>
    
            * doc/xml/manual/status_cxx2017.xml: Fix outdated reference to
            C++17 working draft.
    
    Backport from mainline
    2019-05-23  Jonathan Wakely  <jwakely@redhat.com>
    
            * doc/xml/manual/status_cxx2017.xml: Add feature test macro for
            P0040R3.
            * doc/html/*: Regenerate.
    
    From-SVN: r275189

commit 5db806a65d4a60eb209970033d6d89745e3f952b
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Fri Aug 30 15:17:41 2019 +0100

    PR libstdc++/78179 fix std::hypot failures due to excessive tolerance
    
    Backport from mainline
    2018-09-21  Jonathan Wakely  <jwakely@redhat.com>
    
            PR libstdc++/78179
            * testsuite/26_numerics/headers/cmath/hypot.cc: Use lower tolerance
            when sizeof(long double) == sizeof(double).
    
    From-SVN: r275183

commit ff12f8b9ae10bf7270ec7ead28a479f6105058eb
Author: Segher Boessenkool <segher@kernel.crashing.org>
Date:   Fri Aug 30 16:17:20 2019 +0200

    backport: re PR target/91481 (POWER9 "DARN" RNG intrinsic produces repeated output (CVE-2019-15847))
    
            Backport from trunk
            2019-08-23  Segher Boessenkool  <segher@kernel.crashing.org>
    
    gcc/testsuite/
            PR target/91481
            * gcc.target/powerpc/darn-3.c: New testcase.
    
    From-SVN: r275182

commit c2894790640da2c0761924ff1b06efddbdfa031e
Author: Segher Boessenkool <segher@kernel.crashing.org>
Date:   Fri Aug 30 16:15:39 2019 +0200

    backport: re PR target/91481 (POWER9 "DARN" RNG intrinsic produces repeated output (CVE-2019-15847))
    
            Backport from trunk
            2019-08-22  Segher Boessenkool  <segher@kernel.crashing.org>
    
            PR target/91481
            * config/rs6000/rs6000.md (unspec): Delete UNSPEC_DARN, UNSPEC_DARN_32,
            and UNSPEC_DARN_RAW.
            (unspecv): New enumerator values UNSPECV_DARN, UNSPECV_DARN_32, and
            UNSPECV_DARN_RAW.
            (darn_32): Use an unspec_volatile, and UNSPECV_DARN_32.
            (darn_raw): Use an unspec_volatile, and UNSPECV_DARN_RAW.
            (darn): Use an unspec_volatile, and UNSPECV_DARN.
    
    From-SVN: r275181

commit 8358562298cf72905c128c2c96526b7fdccf742c
Author: Segher Boessenkool <segher@kernel.crashing.org>
Date:   Fri Aug 30 16:13:51 2019 +0200

    backport: altivec.md (unspec): Delete UNSPEC_DARN...
    
            Backport from trunk
            2019-08-22  Segher Boessenkool  <segher@kernel.crashing.org>
    
            * config/rs6000/altivec.md (unspec): Delete UNSPEC_DARN, UNSPEC_DARN_32,
            UNSPEC_DARN_RAW, UNSPEC_CMPRB, UNSPEC_CMPRB2, UNSPEC_CMPEQB; move to...
            * config/rs6000/rs6000.md (unspec): ... here.
            * config/rs6000/altivec.md (darn_32, darn_raw, darn, cmprb,
            *cmprb_internal, setb_signed, setb_unsigned, cmprb2, *cmprb2_internal,
            cmpeqb, *cmpeqb_internal): Delete, move to...
            * config/rs6000/rs6000.md (darn_32, darn_raw, darn, cmprb,
            *cmprb_internal, setb_signed, setb_unsigned, cmprb2, *cmprb2_internal,
            cmpeqb, *cmpeqb_internal): ... here.
    
    From-SVN: r275180

commit 67894260a9d4affac511faaecd9e099fa7b86b59
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Fri Aug 30 14:50:05 2019 +0100

    Avoid -Wconversion warnings when -Wsystem-headers is used
    
    Backport from mainline
    2019-03-22  Jonathan Wakely  <jwakely@redhat.com>
    
            * include/bits/stl_algobase.h (__lg): Do arithmetic on type int to
            avoid -Wconversion warnings.
    
    From-SVN: r275173

commit 10c5f52e808ededde732bab45cfd133f822c44bc
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Fri Aug 30 14:50:01 2019 +0100

    PR libstdc++/90770 fix missing src/debug/Makefile
    
    Backport from mainline
    2019-06-07  Jonathan Wakely  <jwakely@redhat.com>
    
            PR libstdc++/90770
            * src/Makefile.am (stamp-debug): Also test for missing makefile.
            * src/Makefile.in: Regenerate.
    
    From-SVN: r275172

commit 4f0e197755c43293735c5961821896b9a0e1454f
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Fri Aug 30 14:49:48 2019 +0100

    Fix uses of non-reserved names for template parameters
    
    Backport from mainline
    2019-05-17  Jonathan Wakely  <jwakely@redhat.com>
    
            * include/bits/random.h (seed_seq::param): Fix non-reserved name.
            * include/experimental/type_traits (is_detected_exact)
            (is_detected_exact_v): Likewise.
            * include/pstl/execution_defs.h (is_execution_policy)
            (is_execution_policy_v, __enable_if_execution_policy): Likewise.
            * include/pstl/execution_impl.h (__policy_traits): Likewise.
            * testsuite/17_intro/names.cc: Check for more non-reserved names.
            * testsuite/experimental/names.cc: New test.
    
    From-SVN: r275171

commit 9ff115ff06170e6a6215fd152a3cf6c12546bb0d
Author: Richard Biener <rguenther@suse.de>
Date:   Fri Aug 30 13:19:23 2019 +0000

    backport: [multiple changes]
    
    2019-08-30  Richard Biener  <rguenther@suse.de>
    
            Backport from mainline
            2019-01-07  Richard Sandiford  <richard.sandiford@arm.com>
    
            PR middle-end/88567
            * tree-vect-loop.c (get_initial_defs_for_reduction): Pass the
            output vector directly to duplicate_and_interleave instead of
            going through a temporary.  Postpone insertion of ctor_seq to
            the end of the loop.
    
            2018-12-04  Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/88315
            * tree-vect-loop.c (get_initial_defs_for_reduction): Simplify
            and fix initialization vector for SAD and DOT_PROD SLP reductions.
    
            * gcc.dg/vect/slp-reduc-sad.c: Adjust to provide non-trivial
            initial value.
    
    From-SVN: r275168

commit 337719729c7e6b5accf6a1e2d1b8ab3a95133acb
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Fri Aug 30 14:09:42 2019 +0100

    PR libstdc++/85965 move is_invocable assertions again
    
    This is another attempt to reduce how often the assertions are
    evaluated, so that code which doesn't try to use the function objects
    doesn't need them to be invocable.
    
    For _Rb_tree we access the _M_key_compare object directly, so can't put
    the assertions in an accessor function for it. However, every invocation
    of _M_key_compare is accompanied by a use of _S_key, so the assertions
    can be put in there.  For _Hashtable there are member functions that are
    consistently used to obtain a hash code or test for equality, so the
    assertions can go in those members.
    
    Backport from mainline
    2019-05-17  Jonathan Wakely  <jwakely@redhat.com>
    
            PR libstdc++/85965
            * include/bits/hashtable.h (_Hashtable::~_Hashtable()): Remove static
            assertions from the destructor.
            * include/bits/hashtable_policy.h (_Hash_code_base::_M_hash_code):
            Move static_assert for hash function to here.
            (_Hash_table_base::_M_equals): Move static_assert for equality
            predicate to here.
            * include/bits/stl_tree.h (_Rb_tree::_S_key(_Const_Link_type)): Move
            assertions here. Access the value directly instead of calling _S_value.
            (_Rb_tree::_S_key(_Const_Base_ptr)): Do downcast and forward to
            _S_key(_Const_Link_type).
            * testsuite/23_containers/set/85965.cc: Check construction,
            destruction, assignment and size() do not trigger the assertions.
            * testsuite/23_containers/unordered_set/85965.cc: Likewise.
            * testsuite/23_containers/map/48101_neg.cc: Call find and adjust
            expected errors.
            * testsuite/23_containers/multimap/48101_neg.cc: Likewise.
            * testsuite/23_containers/multiset/48101_neg.cc: Likewise.
            * testsuite/23_containers/set/48101_neg.cc: Likewise.
            * testsuite/23_containers/unordered_map/48101_neg.cc: Likewise.
            * testsuite/23_containers/unordered_multimap/48101_neg.cc: Likewise.
            * testsuite/23_containers/unordered_multiset/48101_neg.cc: Likewise.
            * testsuite/23_containers/unordered_set/48101_neg.cc: Likewise.
    
    From-SVN: r275166

commit 7c1bfb4cde0de22e7ddff33117dd803272344c2c
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Fri Aug 30 14:09:36 2019 +0100

    Fix vector::_Temporary_value::_M_ptr
    
    The pointer argument to allocator_traits::construct and
    allocator_traits::destroy should be a raw pointer, not the allocator's
    pointer type. _Temporary_value::_M_ptr was returning the wrong type.
    
    Backport from mainline
    2018-09-03  Jonathan Wakely  <jwakely@redhat.com>
    
            * include/bits/stl_vector.h (vector::_Temporary_value::_M_ptr):
            Return raw pointer not allocator's pointer type.
            (vector::_Temporary_value::_M_val): Use _M_ptr.
    
    From-SVN: r275165

commit 4096f954c42aee48a144914e5670a879261f6232
Author: Richard Biener <rguenther@suse.de>
Date:   Fri Aug 30 11:43:33 2019 +0000

    Backport PRs 90194, 90278, 90474, 90900
    
    2019-08-30  Richard Biener  <rguenther@suse.de>
    
            Backport from mainline
            2019-06-18  Richard Biener  <rguenther@suse.de>
    
            PR debug/90900
            * cfgexpand.c (expand_debug_expr): Treat NOTE_P DECL_RTL
            as if optimized away.
    
            * gcc.dg/gomp/pr90900.c: New testcase.
    
            2019-05-15  Richard Biener  <rguenther@suse.de>
    
            PR c/90474
            * c-common.c (c_common_mark_addressable_vec): Also mark
            a COMPOUND_LITERAL_EXPR_DECL addressable similar to
            c_mark_addressable.
    
            2019-04-29  Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/90278
            * tree-ssa-forwprop.c (pass_forwprop::execute): Transfer/clean
            EH on comparison simplification.
    
            * gcc.dg/torture/pr90278.c: New testcase.
    
            2019-04-25  Richard Biener  <rguenther@suse.de>
    
            PR middle-end/90194
            * match.pd: Add pattern to simplify view-conversion of an
            empty constructor.
    
            * g++.dg/torture/pr90194.C: New testcase.
    
    From-SVN: r275103

commit d48cadb9f2597add86d271bb58834cee5c90e59d
Author: Richard Biener <rguenther@suse.de>
Date:   Fri Aug 30 11:39:19 2019 +0000

    Backport PRs 91126, 91131, 91162, 91200, 91280, 91293, 91375
    
    2019-08-30  Richard Biener  <rguenther@suse.de>
    
            Backport from mainline
            2019-08-12  Richard Biener  <rguenther@suse.de>
    
            PR lto/91375
            * tree.c (free_lang_data_in_type): Do not free TYPE_BINFO dependent on
            flag_devirtualize.
    
            2019-07-31  Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/91293
            * tree-vect-slp.c (vect_build_slp_tree_2): Do not swap operands
            of reduction stmts.
    
            * gcc.dg/vect/pr91293-1.c: New testcase.
            * gcc.dg/vect/pr91293-2.c: Likewise.
            * gcc.dg/vect/pr91293-3.c: Likewise.
    
            2019-07-31  Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/91280
            * tree-ssa-structalias.c (get_constraint_for_component_ref):
            Decompose MEM_REF manually for offset handling.
    
            * g++.dg/torture/pr91280.C: New testcase.
    
            2019-07-19  Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/91200
            * tree-ssa-phiopt.c (cond_store_replacement): Check we have
            no PHI nodes in middle-bb.
    
            * gcc.dg/torture/pr91200.c: New testcase.
    
            2019-07-15  Richard Biener  <rguenther@suse.de>
    
            PR middle-end/91162
            * tree-cfg.c (move_block_to_fn): When releasing a virtual PHI
            node make sure to replace all uses with something valid.
    
            * gcc.dg/autopar/pr91162.c: New testcase.
    
            2019-07-11  Richard Biener  <rguenther@suse.de>
    
            PR middle-end/91131
            * gimplify.c (gimplify_compound_literal_expr): Force a temporary
            when the object is volatile and we have not cleared it even though
            there are no nonzero elements.
    
            * gcc.target/i386/pr91131.c: New testcase.
    
            2019-07-10  Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/91126
            * tree-ssa-sccvn.c (vn_reference_lookup_3): Adjust
            native encoding offset for BYTES_BIG_ENDIAN.
    
            * gcc.dg/torture/pr91126.c: New testcase.
    
    From-SVN: r275100

commit d19188032afbbea1854ff5439482fa63f00d4906
Author: Richard Biener <rguenther@suse.de>
Date:   Fri Aug 30 11:11:01 2019 +0000

    backport: [multiple changes]
    
    2019-08-30  Richard Biener  <rguenther@suse.de>
    
            * lto-streamer.h (LTO_minor_version): Bump.
    
            Backport from mainline
            2019-05-06  Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/90328
            * tree-data-ref.h (dr_may_alias_p): Pass in the actual loop nest.
            * tree-data-ref.c (dr_may_alias_p): Check whether the clique
            is valid in the loop nest before using it.
            (initialize_data_dependence_relation): Adjust.
            * graphite-scop-detection.c (build_alias_set): Pass the SCOP enclosing
            loop as loop-nest to dr_may_alias_p.
    
            * gcc.dg/torture/pr90328.c: New testcase.
    
            2019-03-08  Richard Biener  <rguenther@suse.de>
    
            PR middle-end/89578
            * cfgloop.h (struct loop): Add owned_clique field.
            * cfgloopmanip.c (copy_loop_info): Copy it.
            * tree-cfg.c (gimple_duplicate_bb): Do not remap owned_clique
            cliques.
            * tree-inline.c (copy_loops): Remap owned_clique.
            * lto-streamer-in.c (input_cfg): Stream owned_clique.
            * lto-streamer-out.c (output_cfg): Likewise.
    
            2019-02-22  Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/87609
            * tree-cfg.c (gimple_duplicate_bb): Only remap inlined cliques.
    
            2019-02-22  Richard Biener  <rguenther@suse.de>
    
            PR middle-end/87609
            * cfghooks.h (dependence_hash): New typedef.
            (struct copy_bb_data): New type.
            (cfg_hooks::duplicate_block): Adjust to take a copy_bb_data argument.
            (duplicate_block): Likewise.
            * cfghooks.c (duplicate_block): Pass down copy_bb_data.
            (copy_bbs): Create and pass down copy_bb_data.
            * cfgrtl.c (cfg_layout_duplicate_bb): Adjust.
            (rtl_duplicate_bb): Likewise.
            * tree-cfg.c (gimple_duplicate_bb): If the copy_bb_data arg is not NULL
            remap dependence info.
    
            * gcc.dg/torture/restrict-7.c: New testcase.
    
            2019-02-22  Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/87609
            * tree-core.h (tree_base): Document special clique values.
            * tree-inline.c (remap_dependence_clique): Do not use the
            special clique value of one.
            (maybe_set_dependence_info): Use clique one.
            (clear_dependence_clique): New callback.
            (compute_dependence_clique): Clear clique one from all refs
            before assigning it (again).
    
    From-SVN: r275069

commit 09f1bd959287894eeaeb6ab12ce85c6051d0e31a
Author: Bin Cheng <bin.cheng@linux.alibaba.com>
Date:   Fri Aug 30 11:02:48 2019 +0000

    backport: re PR tree-optimization/91137 (Wrong code with -O3)
    
            Backport from mainline
            2019-07-18  Bin Cheng  <bin.linux@linux.alibaba.com>
    
            PR tree-optimization/91137
            * tree-ssa-loop-ivopts.c (struct ivopts_data): New field.
            (tree_ssa_iv_optimize_init, alloc_iv, tree_ssa_iv_optimize_finalize):
            Init, use and fini the above new field.
            (determine_base_object_1): New function.
            (determine_base_object): Reimplement using walk_tree.
    
            2019-07-18  Bin Cheng  <bin.linux@linux.alibaba.com>
    
            PR tree-optimization/91137
            * gcc.c-torture/execute/pr91137.c: New test.
    
    From-SVN: r275064

commit 3d1012e6fc1db8f2220ee71cf3ad0735f78a370c
Author: Richard Biener <rguenther@suse.de>
Date:   Fri Aug 30 08:02:02 2019 +0000

    Backport PRs 81740, 89392, 89725, 90006
    
    2019-08-30  Richard Biener  <rguenther@suse.de>
    
            Backport from mainline
            2019-04-09  Richard Sandiford  <richard.sandiford@arm.com>
    
            * tree-vect-data-refs.c (vect_get_smallest_scalar_type): Always
            use gimple_expr_type for load and store calls.  Skip over the
            condition argument in a conditional internal function.
            Protect use of TREE_INT_CST_LOW.
    
            2019-04-08  Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/90006
            * tree-vect-data-refs.c (vect_get_smallest_scalar_type): Handle
            calls like lrint.
    
            * gcc.dg/vect/bb-slp-pr90006.c: New testcase.
    
            2019-04-01  Bin Cheng  <bin.cheng@linux.alibaba.com>
    
            PR tree-optimization/89725
            * tree-chrec.c (chrec_contains_symbols): New parameter.  Handle outer
            loop's chrec as invariant symbol.
            * tree-chrec.h (chrec_contains_symbols): New parameter.
            * tree-data-ref.c (analyze_miv_subscript): Pass new argument.
            (build_classic_dist_vector_1, add_other_self_distances): Bypass access
            function of loops not in DDR's loop_nest.
    
            * gcc.dg/tree-ssa/pr89725.c: New test.
    
            2019-03-26  Bin Cheng  <bin.cheng@linux.alibaba.com>
    
            PR tree-optimization/81740
            * tree-vect-data-refs.c (vect_analyze_data_ref_dependence):
            In case of outer loop vectorization, check for backward dependence
            at the inner loop if outer loop dependence is reversed.
    
            * gcc.dg/vect/pr81740-1.c: New testcase.
            * gcc.dg/vect/pr81740-2.c: Likewise.
    
            2019-02-21  Richard Biener  <rguenther@suse.de>
    
            PR middle-end/89392
            cp/
            * vtable-class-hierarchy.c (vtv_generate_init_routine): Do not
            make symtab process new functions here.
    
    From-SVN: r275061

commit 9d9a8828c69f4421071820cac228f2a213e2677d
Author: Richard Biener <rguenther@suse.de>
Date:   Fri Aug 30 07:57:47 2019 +0000

    backport: [multiple changes]
    
    2019-08-30  Richard Biener  <rguenther@suse.de>
    
            Backport from mainline
            2019-04-24  Richard Biener  <rguenther@suse.de>
    
            PR middle-end/90213
            * gimple-fold.c (fold_const_aggregate_ref_1): Do multiplication
            by size and BITS_PER_UNIT on poly-wide-ints.
    
            2019-04-11  Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/90020
            * tree-ssa-sccvn.c (vn_reference_may_trap): New function.
            * tree-ssa-sccvn.h (vn_reference_may_trap): Declare.
            * tree-ssa-pre.c (compute_avail): Use it to not put
            possibly trapping references after a call that might not
            return into EXP_GEN.
            * gcse.c (compute_hash_table_work): Do not elide
            marking a block containing a call if the call might not
            return.
    
            * gcc.dg/torture/pr90020.c: New testcase.
    
    From-SVN: r275060

commit c07ab320669c0407cc5df8885250807fcca540eb
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Aug 30 00:16:09 2019 +0000

    Daily bump.
    
    From-SVN: r275057

commit aa6bd4abbd67608ce545d4ca773c75a9157bf48c
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Thu Aug 29 19:36:50 2019 +0000

    [Darwin, testsuite] Backport fix for PR27221.
    
    2019-08-29  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-05-22  Iain Sandoe  <iain@sandoe.co.uk>
    
            PR testsuite/27221
            * g++.dg/ext/alignof2.C: XFAIL for 32bit Darwin.
    
    From-SVN: r275054

commit 0587d00bdccb7366dfb71002f4c44c0422d72db4
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Thu Aug 29 19:32:25 2019 +0000

    [Darwin, testsuite] Backport fix for PR67958.
    
    2019-08-29  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-05-21  Iain Sandoe  <iain@sandoe.co.uk>
    
            PR testsuite/67958
            * gcc.target/i386/pr32219-1.c: Adjust scan-asms for Darwin, comment
            the differences.
            * gcc.target/i386/pr32219-2.c: Likewise.
            * gcc.target/i386/pr32219-3.c: Likewise.
            * gcc.target/i386/pr32219-4.c: Likewise.
            * gcc.target/i386/pr32219-5.c: Likewise.
            * gcc.target/i386/pr32219-6.c: Likewise.
            * gcc.target/i386/pr32219-7.c: Likewise.
            * gcc.target/i386/pr32219-8.c: Likewise.
    
    From-SVN: r275053

commit 7ced293f0b67a8b6f81a6e8031db4690e014873e
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Thu Aug 29 19:26:45 2019 +0000

    [Darwin] Fix PR87030 and tidy config fragments.
    
    This is about 32/64b host and multilib support across the range of Darwin
    systems.
    
    Prior to Darwin8 (OS X 10.4), the toolchains support only PowerPC and only 32b.
    
    On Darwin8 it is possible to target a 64b multilib, but with support limited
    to a few of the main libraries on the system (not a recommended configuration).
    
    From Darwin9 to Darwin17 (OSX 10.5 to 10.13) it is possible to have either
    32 or 64b hosted toolchains, with support for a 64 or 32b multilib respectively.
    
    On Darwin9 the kernel is 32b, but with support for 64b executables, so it's
    conventional to build a 32b host toolchain supporting a 64b multilib. However
    this is not enforced (merely a convention).
    
    There is also some platform hardware supporting Darwin10/11 which is only 32b
    and for which the same situation applies. However, from Darwin10 to Darwin17,
    the majority of platform hardware supports a 64b kernel and it's conventional
    to build a 64b host toolchain with support for a 32b multilib.
    
    On/from Darwin18 (OS X 10.14), the development headers (in the SDK) no longer
    expose the interfaces for the 32b multilib support (although sufficient runtime
    support remains installed that the testsuite can be run for a 32b multilib).
    
    The PR is raised against this latter situation since the absence of exposed
    interfaces causes a 'default' bootstrap fail regardless of the availability of
    the runtimes. Given the number of permutations, I felt it warranted a general
    solution, especially since the current scheme of target headers and t-make
    fragments has become somewhat messy.
    
    The changes here enforce the single 32b PowerPC multilib for Darwin < 8 and the
    single X86 64b multilib for Darwin >= 18. This means that there is no longer
    any need to configure Darwin18+ '--disable-multilib', but also that if you want
    to use the ability to continue to test the compiler's 32b multilib there, you
    need to make a configuration targeting an earlier OS version (and using the
    SDK from that).
    
    2019-08-29  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline
            2019-07-24  Iain Sandoe  <iain@sandoe.co.uk>
    
            PR bootstrap/87030
            * config/i386/darwin.h (REAL_LIBGCC_SPEC): Revert change from r273749.
    
            PR bootstrap/87030
            * config/i386/darwin.h (REAL_LIBGCC_SPEC): Move from here...
            * config/i386/darwin32-biarch.h .. to here.
            * config/i386/darwin64-biarch.h: Adjust comments.
            * config/rs6000/darwin32-biarch.h: Likewise.
            * config/rs6000/darwin64-biarch.h: Likewise.
            * config.gcc: Missed commit from r273746
            (*-*-darwin*): Don't include CPU t-darwin here.
            (i[34567]86-*-darwin*): Adjust to use biarch files. Produce
            an error message if i686-darwin configuration is attempted for
            Darwin >= 18.
    
            Backport from mainline
            2019-07-23  Iain Sandoe  <iain@sandoe.co.uk>
    
            PR bootstrap/87030
            * config.gcc (*-*-darwin*): Don't include CPU t-darwin here.
            (i[34567]86-*-darwin*): Adjust to use biarch files. Produce
            an error message if i686-darwin configuration is attempted for
            Darwin >= 18.
            (x86_64-*-darwin*): Switch to single multilib for Darwin >= 18.
            (powerpc-*-darwin*): Use biarch files where needed.
            (powerpc64-*-darwin*): Likewise.
            * config/i386/darwin.h (REAL_LIBGCC_SPEC): Move to new biarch file.
            (DARWIN_ARCH_SPEC, DARWIN_SUBARCH_SPEC): Revise for default single
            arch case.
            * config/i386/darwin32-biarch.h: New.
            * config/i386/darwin64.h: Rename.
            * gcc/config/i386/darwin64-biarch.h: To this.
            * config/i386/t-darwin: Rename.
            * gcc/config/i386/t-darwin32-biarch: To this.
            * config/i386/t-darwin64: Rename.
            * gcc/config/i386/t-darwin64-biarch: To this.
            * config/rs6000/darwin32-biarch.h: New.
            * config/rs6000/darwin64.h: Rename.
            * config/rs6000/darwin64-biarch.h: To this.
            (DARWIN_ARCH_SPEC, DARWIN_SUBARCH_SPEC): Revise for default single
            arch case.
            * config/rs6000/t-darwin8: Rename.
            * config/rs6000/t-darwin32-biarch: To this.
            * config/rs6000/t-darwin64 Rename.
            * config/rs6000/t-darwin64-biarch: To this.
    
    From-SVN: r275052

commit 5033c027d2cfcd9b0d120e8b9a6924c9c96b3c92
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Aug 29 17:05:47 2019 +0200

    backport: re PR target/91150 (wrong code with -O -mavx512vbmi due to wrong writemask)
    
            Backported from mainline
            2019-07-30  Jakub Jelinek  <jakub@redhat.com>
    
            PR target/91150
            * config/i386/i386.c (expand_vec_perm_blend): Change mask type
            from unsigned to unsigned HOST_WIDE_INT.  For E_V64QImode cast
            comparison to unsigned HOST_WIDE_INT before shifting it left.
    
            * gcc.target/i386/avx512bw-pr91150.c: New test.
    
    From-SVN: r275046

commit 1fe750f42ddc1d98df72cb8dd930c5d5cf17a21a
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Aug 29 17:05:01 2019 +0200

    backport: re PR middle-end/78884 ([7/8] ICE when gimplifying VLA in OpenMP SIMD region)
    
            Backported from mainline
            2019-07-04  Jakub Jelinek  <jakub@redhat.com>
    
            PR middle-end/78884
            * gimplify.c (struct gimplify_omp_ctx): Add add_safelen1 member.
            (gimplify_bind_expr): If seeing TREE_ADDRESSABLE VLA inside of simd
            loop body, set ctx->add_safelen1 instead of making it GOVD_PRIVATE.
            (gimplify_adjust_omp_clauses): Add safelen (1) clause if
            ctx->add_safelen1 is set.
    
            * gcc.dg/gomp/pr78884.c: New test.
    
    From-SVN: r275045

commit ee5115b09adb79d3e76fafed0a860430ce11c56e
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Aug 29 17:04:19 2019 +0200

    backport: re PR rtl-optimization/90756 (g++ ICE in convert_move, at expr.c:218 on i686 and s390x)
    
            Backported from mainline
            2019-07-04  Jakub Jelinek  <jakub@redhat.com>
    
            PR rtl-optimization/90756
            * explow.c (promote_ssa_mode): Always use TYPE_MODE, don't bypass it
            for VECTOR_TYPE_P.
    
            * gcc.dg/pr90756.c: New test.
    
    From-SVN: r275044

commit 4de4d274c365312fb183798da30fd9ab72ae825d
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Aug 29 17:03:31 2019 +0200

    backport: re PR sanitizer/90954 (ICE: combining undefined behavior sanitizer with openmp)
    
            Backported from mainline
            2019-06-25  Jakub Jelinek  <jakub@redhat.com>
    
            PR sanitizer/90954
            * c-omp.c (c_finish_omp_atomic): Allow tree_invariant_p in addition
            to SAVE_EXPR in first operand of a COMPOUND_EXPR.
    
            * c-c++-common/gomp/pr90954.c: New test.
    
    From-SVN: r275043

commit 8c6003381661efebcaf1a7f93ec21a6ec4644dff
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Aug 29 17:02:44 2019 +0200

    backport: re PR c++/90950 (OpenMP clause handling rejecting references to incomplete types in templates)
    
            Backported from mainline
            2019-06-21  Jakub Jelinek  <jakub@redhat.com>
    
            PR c++/90950
            * semantics.c (finish_omp_clauses): Don't reject references to
            incomplete types if processing_template_decl.
    
            * g++.dg/gomp/lastprivate-1.C: New test.
    
    From-SVN: r275042

commit 7cb4d6483f37116c2d7d683eda077eecb1e51fd4
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Aug 29 17:01:54 2019 +0200

    backport: re PR c/90760 (ICE on attributes section and alias in set_section, at symtab.c:1573)
    
            Backported from mainline
            2019-06-12  Jakub Jelinek  <jakub@redhat.com>
    
            PR c/90760
            * symtab.c (symtab_node::set_section): Allow being called on aliases
            as long as they aren't analyzed yet.
    
            * gcc.dg/pr90760.c: New test.
    
    From-SVN: r275041

commit e25cfbd12ae1c9960cda5c38ee72375708c93e01
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Aug 29 17:01:10 2019 +0200

    backport: re PR debug/90733 (ICE in simplify_subreg, at simplify-rtx.c:6440)
    
            Backported from mainline
            2019-06-05  Jakub Jelinek  <jakub@redhat.com>
    
            PR debug/90733
            * var-tracking.c (vt_expand_loc_callback): Don't create raw subregs
            with VOIDmode inner operands.
    
            * gcc.dg/pr90733.c: New test.
    
    From-SVN: r275040

commit 041da0672ea5365f63fce376aba79498d336dd10
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Aug 29 17:00:20 2019 +0200

    backport: re PR libgomp/90585 (libgomp hsa plugin ftbfs in the x32 multilib variant)
    
            Backported from mainline
            2019-05-24  Jakub Jelinek  <jakub@redhat.com>
    
            PR libgomp/90585
            * plugin/plugin-hsa.c (print_kernel_dispatch, run_kernel): Use PRIu64
            macro instead of "lu".
            (release_kernel_dispatch): Likewise.  Cast shadow->debug to uintptr_t
            before casting to void *.
    
    From-SVN: r275039

commit 0b0de287a0f91dd3c550d509486ca748e8096c2d
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Aug 29 16:59:48 2019 +0200

    backport: re PR debug/90197 (Cannot step through simple loop at -O -g)
    
            Backported from mainline
            2019-05-15  Jakub Jelinek  <jakub@redhat.com>
    
            PR debug/90197
            * cp-gimplify.c (genericize_cp_loop): Emit a DEBUG_BEGIN_STMT
            before the condition (or if missing or constant non-zero at the end
            of the loop.  Emit a DEBUG_BEGIN_STMT before the increment expression
            if any.  Don't call protected_set_expr_location on incr if it already
            has a location.
    
    From-SVN: r275038

commit a7e8dbf8c60efa99c9a3eea6e70c694003c6c009
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Aug 29 16:59:18 2019 +0200

    backport: re PR pch/90326 (Using any precompiled header breaks definition of FLT_MAX)
    
            Backported from mainline
            2019-05-10  Jakub Jelinek  <jakub@redhat.com>
    
            PR pch/90326
    cp/
            * config-lang.in (gtfiles): Remove c-family/c-lex.c, add
            c-family/c-cppbuiltin.c.
    objc/
            * config-lang.in (gtfiles): Add c-family/c-format.c.
    objcp/
            * config-lang.in (gtfiles): Don't add c-family/c-cppbuiltin.c.
    testsuite/
            * g++.dg/pch/pr90326.C: New test.
            * g++.dg/pch/pr90326.Hs: New file.
    
    From-SVN: r275037

commit 69402b29af19159d0e301cd38bfe3df78eb75041
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Aug 29 16:57:56 2019 +0200

    backport: re PR debug/90197 (Cannot step through simple loop at -O -g)
    
            Backported from mainline
            2019-04-26  Jakub Jelinek  <jakub@redhat.com>
    
            PR debug/90197
            * c-tree.h (c_finish_loop): Add 2 further location_t arguments.
            * c-parser.c (c_parser_while_statement): Adjust c_finish_loop caller.
            (c_parser_do_statement): Likewise.
            (c_parser_for_statement): Likewise.  Formatting fixes.
            * c-typeck.c (c_finish_loop): Add COND_LOCUS and INCR_LOCUS arguments,
            emit DEBUG_BEGIN_STMTs if needed.
    
    From-SVN: r275036

commit 419da4f83bf50c7937918369f06b13dd074ac571
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Aug 29 16:57:18 2019 +0200

    backport: re PR middle-end/90139 (ICE in emit_block_move_hints, at expr.c:1601)
    
            Backported from mainline
            2019-04-19  Jakub Jelinek  <jakub@redhat.com>
    
            PR middle-end/90139
            * tree-outof-ssa.c (get_temp_reg): If reg_mode is BLKmode, return
            assign_temp instead of gen_reg_rtx.
    
            * gcc.c-torture/compile/pr90139.c: New test.
    
    From-SVN: r275035

commit 86d59e1b61634b9df65dba2300117db43611ed93
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Aug 29 00:16:09 2019 +0000

    Daily bump.
    
    From-SVN: r275019

commit fa4a1386dcd23bd88befcdd83bff7e1586381a72
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Wed Aug 28 19:32:18 2019 +0000

    [Darwin, testsuite] BAckport fix PR83891 (darwin-weakimport-3).
    
    gcc/testsuite/
    
    2019-08-28  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-05-21  Iain Sandoe  <iain@sandoe.co.uk>
    
            PR target/63891
            * gcc.dg/darwin-weakimport-3.c: Adjust options and explain
            the reasons.
    
    From-SVN: r275003

commit e0d217ca5139f87ac6358e8cdab8c1bd4e7f3a1a
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Wed Aug 28 19:27:06 2019 +0000

    [Darwin, testsuite ] Backport fix for PR58321.
    
    gcc/testsuite/
    
    2019-08-28  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-05-20  Iain Sandoe  <iain@sandoe.co.uk>
    
            PR testsuite/58321
            * gcc.target/i386/memcpy-strategy-3.c: Adjust count for Darwin and
            add a comment as to the reason for the difference.
            * gcc.target/i386/memset-strategy-1.c: Likewise.
    
    From-SVN: r275002

commit d098d5b487cf4f892c7e670cc9b4c849b75c4b16
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Wed Aug 28 19:21:33 2019 +0000

    [ObjC] Recognise 'instancetype' as equivalent to 'id'.
    
    This is primarily about fixing a number of testsuite fails, it
    implements the parsing of 'instancetype' but doesn't alter the
    code gen (relative to using id in the same position).  It is
    part of the work-arounds for PR90709.
    
    gcc/objc/
    
    2019-08-28  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-05-18  Iain Sandoe  <iain@sandoe.co.uk>
    
            * objc/objc-act.h (OCTI_INSTANCE_TYPE, OCTI_INSTANCETYPE_NAME): New.
            (objc_global_trees): Add instance type and name.
            (INSTANCE_TYPEDEF_NAME): New.
            * objc/objc-act.c (synth_module_prologue): Build decls for
            objc_instancetype_type and objc_instancetype_name.
    
    gcc/testsuite/
    
    2019-08-28  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-05-18  Iain Sandoe  <iain@sandoe.co.uk>
    
            * objc.dg/instancetype-0.m: New.
    
    From-SVN: r275001

commit 86a03e9cc6c2b80339b24d3bdd148a8f8e520507
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Aug 28 00:16:14 2019 +0000

    Daily bump.
    
    From-SVN: r274978

commit b4990d3e732267bdd24ead51bdb9f79c1c58c9b1
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Tue Aug 27 19:54:41 2019 +0000

    [Darwin] Make a final check on PIC options.
    
    Final check on PCI options; for Darwin these are not dependent on the PIE
    ones, although PIE does require PIC to support it. Specifically, for Darwin,
    "fPIC fno-PIE" should result in the same as "-fno-PIE -fPIC".
    
    This is a workaround for the situation in which a 'stock-built' GCC is
    unable to bootstrap m32 Darwin unless it's done "-mdynamic-no-pic".  So
    this fixes a bootstrap fail in that case.
    
    2019-08-27  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline
            2019-07-07  Iain Sandoe  <iain@sandoe.co.uk>
    
            * config/darwin.c (darwin_override_options): Make a final check on PIC
            options.
    
    From-SVN: r274972

commit cfa0114b4f38960698829b7aad20efaf136b1095
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Tue Aug 27 19:50:04 2019 +0000

    [Darwin] Don't jam symbol stubs on for kernel code.
    
    Fix wrong code.
    Symbol stubs are needed only for m32 PPC, code and that is handled in
    rs6000.c.
    Symbol stubs should never have been generated for any X86 kernel-mode
    case.
    
    2019-08-27  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline
            2019-07-07  Iain Sandoe  <iain@sandoe.co.uk>
    
            * config/darwin.c (darwin_override_options): Don't jam symbol stubs
            on for kernel code.
    
    From-SVN: r274971

commit 7844d1760104d03962c13e9662a46f644c176f20
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Tue Aug 27 19:41:21 2019 +0000

    [Darwin, PPC] Do not use longcall for 64b code.
    
    Fix wrong codegen; the 'native' tools do no emit the longcall in this
    position.
    
    2019-08-27  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline
            2019-06-27  Iain Sandoe  <iain@sandoe.co.uk>
    
            * config/rs6000/rs6000.c (darwin_rs6000_override_options): Do not
            use longcall for 64b code.
    
    From-SVN: r274970

commit 4b3127a043fab122fb52c35011a8d4da32dce979
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Tue Aug 27 19:33:37 2019 +0000

    [Darwin, PPC, libgcc] Ensure unwinder is built with altivec enabled.
    
    Fix bootstrap fail when building for 10.4.
    
    When libgcc is built on Darwin, it is usually built for the earliest potential
    target (Darwin8, 10.4). Build for that revision default to assuming that the
    processor might be G3 (without vector ops) and there is an outlined function
    used for save/restore that checks whether the processor is G3 or G4+ at run-
    time. However, the unwinder itself needs to be built with the assumption of
    vector usage so that the relevant outlined functions are called.
    
    2019-08-27  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-06-06  Iain Sandoe  <iain@sandoe.co.uk>
    
            * config/rs6000/t-darwin: Ensure that the unwinder is built with
            altivec enabled.
    
    From-SVN: r274969

commit db26ca4e867899fd9e8cd2eb61992ffdcd428cc4
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Tue Aug 27 19:27:29 2019 +0000

    [Darwin, PPC] Fix fail of cpp/assert4.c
    
    This test needs the cpu and machine asserts to be implemented
    which hadn't been done for PPC Darwin. We also need to emit
    __PPC__ for 32/64b and __PPC64__, __powerpc64__  (64bit) as per
    the other members of the PowerPC port.
    
    2019-08-27 Iain Sandoe <iain@sandoe.co.uk>
    
            Backport from mainline
            2019-08-18 Iain Sandoe <iain@sandoe.co.uk>
    
            * config/rs6000/darwin.h (TARGET_OS_CPP_BUILTINS): Add asserts
            for cpu and machine. Factor 64/32b builtins.
    
            Backport from mainline
            2019-06-23 Iain Sandoe <iain@sandoe.co.uk>
    
            * config/rs6000/darwin.h: (__PPC__, __PPC64__): New.
    
    From-SVN: r274968

commit acdd1258f01fb0a70d43896a8baad7e33f4f1c45
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Aug 27 00:16:18 2019 +0000

    Daily bump.
    
    From-SVN: r274942

commit 2c73edc62e36847d7fd1e2b8139393cb813c05a6
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Aug 26 00:16:15 2019 +0000

    Daily bump.
    
    From-SVN: r274917

commit 24af2da537153b11e5d8e454d11a50643e900b78
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Sun Aug 25 19:31:47 2019 +0000

    [Darwin, fixincludes] Backport fix for PR83531
    
    There is no reasonable chance that the SDKs in question will be re-
    issued, so the only viable solution is a fixincludes.
    
    2019-08-24  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-08-18  C.G. Dogan  <gcc+cgdogan.00@gmail.com>
                        Iain Sandoe  <iain@sandoe.co.uk>
    
            PR target/83531
            * inclhack.def (darwin_api_availability): New; strip leading
            underscores from API_XXXX defines.
            * fixincl.x: Regenerate.
            * tests/base/os/availability.h: New file.
    
    From-SVN: r274913

commit ff6110fd82f60654761fa3c561b3ec10f4c1209a
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Sun Aug 25 19:27:04 2019 +0000

    [Darwin, Driver] Fix driver crashes with valid command line input.
    
    Backport Improve processing of macosx-version-min=
    
    For PR target/63810 some improvements were made in the parsing of
    the version string at the point it's used to define the built-in
    __ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__. This is fine, but the
    specs processing also uses the version, and specs version-compare
    doesn't like leading zeros on components. This means that while we
    succeed in processing -mmacosx-version-min=010.00002.000099 on compile
    lines, it fails for any other line that uses the value as part of a spec
    (in particular, link lines fail).
    
    To fix this, we need to apply a bit of clean-up to the version that's
    presented to the driver, and push that back into the command line opts.
    
    The value can come from four places:
    1. User-entered on the command line
    2. User-entered as MACOSX_DEPLOYMENT_TARGET= environment var.
    3. Absent those two
    3a For self-hosting systems, look-up from the kernel
    3b For cross-compilers, as a default supplied at configure time.
    
    We apply the clean-up to all 4 (although it shouldn't really be needed
    for the cases under 3).
    
    We also supply a test-case that adapts to the target-version of the
    system, so that the link requirements are met by the SDK in use (if you
    try to link i686-darwin9 on an x86-64-darwin18 SDK, it will fail).
    
    gcc/
    
    2019-08-25 Iain Sandoe <iain@sandoe.co.uk>
    
            Backport from mainline
            2019-06-19 Iain Sandoe <iain@sandoe.co.uk>
    
            * config/darwin-driver.c (darwin_driver_init): Fix off-by-one errors
            in computing the number of options to be moved.
    
            Backport from mainline
            2019-06-13 Iain Sandoe <iain@sandoe.co.uk>
    
            * config/darwin-driver.c (validate_macosx_version_min): New.
            (darwin_default_min_version): Cleanup and validate supplied version.
            (darwin_driver_init): Likewise and push cleaned version into opts.
    
    gcc/testsuite/
    
    2019-08-25 Iain Sandoe <iain@sandoe.co.uk>
    
            2019-06-13 Iain Sandoe <iain@sandoe.co.uk>
    
            * gcc.dg/darwin-minversion-link.c: New test.
    
    From-SVN: r274912

commit 1b57e4a02ec987a8f15b84740bd607369c3cb14e
Author: Uros Bizjak <ubizjak@gmail.com>
Date:   Sun Aug 25 20:24:01 2019 +0200

    re PR target/91533 (abs pattern generates MMX instructions but fails to call EMMS)
    
            PR target/91533
            Backport from mainline
            2019-06-30  Uroš Bizjak  <ubizjak@gmail.com>
    
            * config/i386/sse.md (ssse3_abs<mode>2): Rename from abs<mode>2.
            * config/i386/i386-builtin.def (__builtin_ia32_pabsb):
            Use CODE_FOR_ssse3_absv8qi2.
            (__builtin_ia32_pabsw): Use CODE_FOR_ssse3_absv4hi2.
            (__builtin_ia32_pabsd): Use CODE_FOR_ssse3_absv2si2.
    
    From-SVN: r274911

commit 0566d5d8698e7bf9ac841222fbaacc58b9b2a5a6
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Aug 25 00:16:39 2019 +0000

    Daily bump.
    
    From-SVN: r274905

commit ff696305329067c168a317e71ee3261b841ec568
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Sat Aug 24 14:51:26 2019 +0000

    [Darwin, fixincludes] Backport fix for Darwin9/10 TR1 test fails.
    
    Darwin has had long long functions for some considerable time and these are
    exposed in Darwin8 and Darwin11+ headers. However, for some reason it was
    elected to hide them behind __STRICT_ANSI__ and __STDC_VERSION__ on Darwin9
    and Darwin10. This is a problem for G++/libstdc++ that expects the functions
    to be available for strict ansi (-std=c++14, for example) and without
    defining __STDC_VERSION__. The fix here follows the pattern used in
    Darwin11+ headers where the functions may be explicitly hidden by defining
    __DARWIN_NO_LONG_LONG.
    
    2019-08-24  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-06-21  Iain Sandoe  <iain@sandoe.co.uk>
    
            * inclhack.def: Replace the complex test using __STRICT_ANSI__ and
            __STDC_VERSION__ with a test using __DARWIN_NO_LONG_LONG.
            Ensure that the top level math.h uses <> to wrap included headers
            rather than "".
            * fixincl.x: Regenerated.
            * tests/base/architecture/ppc/math.h: Update test to include the
            __DARWIN_NO_LONG_LONG case.
    
    From-SVN: r274900

commit 061bb14ce3f7f0b0222b890b42a2cbd977ce00ea
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Sat Aug 24 14:41:25 2019 +0000

    [Darwin, fixincludes] Backport fixes Darwin14 header issues.
    
    There are two issues with the Darwin14 (SDK) headers in which unguarded
    advanced syntax elements causes any code including these headers to fail.
    This fixes build fails on Darwin14 systems.
    
    2019-08-24  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-06-21  Iain Sandoe  <iain@sandoe.co.uk>
    
            * inclhack.def: Guard __has_attribute and __has_extension in
            os/base.h.
            Guard Apple blocks syntax in dispatch/object.h.
            * fixincl.x: Regenerate.
            * tests/base/dispatch/object.h: New file.
            * tests/base/os/base.h: New file.
    
    From-SVN: r274899

commit 5e17fcc54423efbfc7b995759c922c7bb1be70fb
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Aug 24 00:16:29 2019 +0000

    Daily bump.
    
    From-SVN: r274896

commit 0adb328614f2ea068ec977da25f2178b2bb1111a
Author: Mihailo Stojanovic <mistojanovic@wavecomp.com>
Date:   Fri Aug 23 19:10:58 2019 +0000

    mips.md (mips_get_fcsr, [...]): Use SI machine mode for unspec_volatile operand.
    
            * config/mips/mips.md (mips_get_fcsr, *mips_get_fcsr): Use SI
            machine mode for unspec_volatile operand.
    
            * gcc.target/mips/get-fcsr-3.c: New test.
    
    From-SVN: r274866

commit ff133ce2d0969bd7bd31769c77917aaffd855844
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Aug 23 00:16:45 2019 +0000

    Daily bump.
    
    From-SVN: r274841

commit 263c9e24272c2f97a543c8e1839bed7a3122afca
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Thu Aug 22 18:52:53 2019 +0000

    [Darwin, X86] Backport fix for .ident tests.
    
    The c-c++-common tests fail (or XPASS depending on which) on Darwin
    because if doesn't  emit a.ident marker.  For X86 Darwin, this is a
    trivial oversight; the assembler supports the directive.  We can
    therefore use the default target hook there.
    
    2019-08-22  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline
            2018-12-23  Iain Sandoe  <iain@sandoe.co.uk>
    
            * config/i386/darwin.h (TARGET_ASM_OUTPUT_IDENT): New.
    
    From-SVN: r274833

commit d3f41b5d06104d7bd6c7e4012b88bdbd20c41c40
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Thu Aug 22 18:37:27 2019 +0000

    [Darwin, X86] Backport fix for tests using .p2align.
    
    This fixes a number of testcases that expect use of .p2align, which
    was somehow omitted from the darwin X86 port (but is available in all
    assemblers used with it).
    
    2019-08-22  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline
            2019-05-31  Iain Sandoe  <iain@sandoe.co.uk>
    
            * config/i386/darwin.h (ASM_OUTPUT_MAX_SKIP_ALIGN): New.
    
    From-SVN: r274831

commit fd7505345dac8af42e822fc064fb39e8ec46c30e
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Thu Aug 22 18:32:18 2019 +0000

    [Darwin, Objective-C]  Don't prepend a sysroot for the gnu-objc headers.
    
    Darwin is able to use two runtimes for objective-c; the
    default is its native NeXT runtime, but also it can build
    code using the gnu-runtime. In order to do this, we have to
    be able to find the gnu-runtime headers (which are installed
    into the compiler's tree).
    
    The process to do this was erroneously prepending the sysroot
    to this when a sysroot is in force. The gnu-runtime headers have
    never been installed in a Darwin (macOS) SDK so we must make
    sure that they are found local to the compiler.
    
    2019-08-22  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline
            2019-05-18  Iain Sandoe  <iain@sandoe.co.uk>
    
            * config/darwin-c.c (darwin_register_objc_includes): Do not
            prepend the sysroot when building gnu-runtime header search
            paths.
    
    From-SVN: r274830

commit f12ae096d25c7ce7ea8f1a437aaa27e20ef791dd
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Thu Aug 22 18:26:14 2019 +0000

    [Darwin, Objective-C] Backport, switch Objective-C meta-data sections properly.
    
    We were emitting the directives to switch, but not recording the change
    in varasm.  This means that subsequent switches might be omitted (since
    varasm incorrectly concludes that the wrong section is current).
    
    2019-08-22  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline
            2019-05-18  Iain Sandoe  <iain@sandoe.co.uk>
    
            * config/darwin.c (darwin_file_end): Use switch_to_section ()
            instead of direct output of the asm.
    
    From-SVN: r274829

commit 12bf63f3a4e40c7f8b6f30fc912eba8bbebd345d
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Aug 22 00:16:09 2019 +0000

    Daily bump.
    
    From-SVN: r274814

commit fb0575baaba4771c4042b0ec8219ea4510fe0a40
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Aug 21 00:16:09 2019 +0000

    Daily bump.
    
    From-SVN: r274761

commit e5feb9a4d7df8a147ecd62ee7ddc594b746884ee
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Tue Aug 20 09:15:27 2019 +0000

    re PR rtl-optimization/91347 (hppa: wrong code generated with tail call optimisation)
    
            PR rtl-optimization/91347
            * dse.c (scan_insn): Call add_wild_read for non-const/memset tail calls
            before reload if HARD_FRAME_POINTER_IS_ARG_POINTER.
    
    From-SVN: r274710

commit 37ae03d891b32a5f2a4183f91d467db98a1ba9d0
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Aug 20 00:16:14 2019 +0000

    Daily bump.
    
    From-SVN: r274687

commit 1f10862ec9f496e906f2bcc2b91c1a873b093ffa
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Aug 19 00:16:09 2019 +0000

    Daily bump.
    
    From-SVN: r274627

commit 939a0b9a0dc391f87bbb08d612221ca6416c325e
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Aug 18 00:16:11 2019 +0000

    Daily bump.
    
    From-SVN: r274616

commit 8ab96953c5ae764108b9ec1ffe7ccb51ff316d04
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Aug 17 00:16:09 2019 +0000

    Daily bump.
    
    From-SVN: r274593

commit 40aeaa8d78b14d690eb48ab3e18ceed18accd62a
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Fri Aug 16 19:26:25 2019 +0000

    [darwin, ppc] backport Fix .machine directive in vecsave asm.
    
    The asm file fails to build if we use a modern assembler
    which checks that the machine is consistent with the
    filetype.  Fixed by adjusting in a similar manner to
    other assembler.
    
    libgcc/
    
    2019-08-16  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-05-12  Iain Sandoe  <iain@sandoe.co.uk>
    
            * config/rs6000/darwin-vecsave.S: Set .machine appropriately.
    
    From-SVN: r274584

commit de0e17d94f3ce834a7c5c83845ed1a72704f21bd
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Fri Aug 16 19:22:14 2019 +0000

    [darwin, ppc] Backport 270480 fix for speculation barrier insns
    
    The current implementation of “speculation_barrier” and
    “group_end_nop” insns emit hard-wired register names which
    causes tests using them to fail on Darwin, at least, which uses
    “rNN” instead of “NN”.
    
    The patch makes the register names for these insns use the
    operand output mechanism to substitute the appropriate variant
    when needed.
    
    2019-08-16  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline
            2019-04-21 Iain Sandoe <iain@sandoe.co.uk>
    
    
            * config/rs6000/rs6000.md (group_end_nop): Emit insn register
            names using operand format, rather than hard-wired.
            (speculation_barrier): Likewise.
    
    From-SVN: r274583

commit e3fdc13c24e42d26eaa861f208d85635a11be048
Author: Uros Bizjak <ubizjak@gmail.com>
Date:   Fri Aug 16 14:06:28 2019 +0200

    test_summary: Do not escape "=".
    
            * test_summary: Do not escape "=".
    
    From-SVN: r274567

commit 09cc060f352b9617a6a607220ee25ab8cf53b879
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Aug 16 00:16:09 2019 +0000

    Daily bump.
    
    From-SVN: r274553

commit 588df1c56f0304f4a6871ad7666742e3ce5ffc4c
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Thu Aug 15 12:35:58 2019 +0100

    PR c++/91436 fix C++ dialect for std::make_unique fix-it hint
    
    The std::make_unique function wasn't added until C++14, and neither was
    the std::complex_literals namespace.
    
    Backport from mainline.
    2019-08-14  Jonathan Wakely  <jwakely@redhat.com>
    
    gcc/cp:
    
            PR c++/91436
            * name-lookup.c (get_std_name_hint): Fix min_dialect field for
            complex_literals and make_unique entries.
    
    gcc/testsuite:
    
            PR c++/91436
            * g++.dg/lookup/missing-std-include-5.C: Limit test to C++14 and up.
            * g++.dg/lookup/missing-std-include-6.C: Don't check make_unique in
            test that runs for C++11.
            * g++.dg/lookup/missing-std-include-8.C: Check make_unique here.
    
    From-SVN: r274530

commit 7298281f0b08413e981609d609d459decfc1d368
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Aug 15 00:16:18 2019 +0000

    Daily bump.
    
    From-SVN: r274499

commit ff670e906881ea1585a5686ce27d992cd2e87062
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Wed Aug 14 16:19:24 2019 +0000

    [Darwin] Fix lto options.
    
    These had been changed in gcc/gcc.c without being synchronised
    to config/darwin.h leading to some fails.
    
    2019-08-14  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline
            2018-08-22 Iain Sandoe <iain@sandoe.co.uk>
    
            * config/darwin.h (LINK_COMMAND_SPEC_A): Update lto options
            to match gcc/gcc.c.
    
    From-SVN: r274485

commit af02992a939a4e03ddea275529432f94cb7e32b2
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Wed Aug 14 16:08:29 2019 +0000

    [Darwin, testsuite] Fix instantiate2 fail.
    
    The instantiate2.C test started to fail since Darwin's impl. of
    this part of the ABI was fixed. It now emits the same output as
    other platforms (and clang).
    
    2019-08-14  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-05-02  Iain Sandoe  <iain@sandoe.co.uk>
    
            * g++.dg/ext/instantiate2.C: Remove special-casing for Darwin.
    
    From-SVN: r274484

commit 40929bfee09bf3dfd72113265c289188142bd0a8
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Aug 14 00:16:12 2019 +0000

    Daily bump.
    
    From-SVN: r274408

commit 6b49a765ac4d0a9ef8111e1b0494d5cdc67e1143
Author: Thomas Koenig <tkoenig@gcc.gnu.org>
Date:   Tue Aug 13 22:57:31 2019 +0000

    backport: re PR fortran/90563 (Out of bounds error when compiling with -Wextra)
    
    2013-08-13  Thomas Koenig  <tkoenig@gcc.gnu.org>
    
            Backport from trunk
            PR fortran/90563
            * frontend-passes.c (insert_index): Suppress errors while
            simplifying the resulting expression.
    
    2013-08-13  Thomas Koenig  <tkoenig@gcc.gnu.org>
    
            Backport from trunk
            PR fortran/90563
            * gfortran.dg/do_subscript_5.f90: New test.
    
    From-SVN: r274406

commit 7e40396b5b37fdd83764f9d9f059af1fa76e0d99
Author: Janne Blomqvist <jb@gcc.gnu.org>
Date:   Tue Aug 13 12:00:46 2019 +0300

    PR fortran/91414 Improve initialization of PRNG
    
    As part of PR 91414 an improved PRNG was contributed to trunk. This is
    a partial backport of some related changes to the PRNG. Namely when
    seeding the PRNG, it needs only 8 bytes of randomness from the OS, and
    uses a simple splitmix64 PRNG to fill in the rest of the state,
    instead of getting all the state from the OS. This can be useful for
    operating systems that can run out of entropy.
    
    libgfortran/ChangeLog:
    
    2019-08-13  Janne Blomqvist  <jb@gcc.gnu.org>
    
            Partial backport from trunk
            PR fortran/91414
            * intrinsics/random.c (lcg_parkmiller): Replace with splitmix64.
            (splitmix64): New function.
            (getosrandom): Fix return value, simplify.
            (init_rand_state): Use getosrandom only to get 8 bytes, splitmix64
            to fill rest of state.
    
    From-SVN: r274363

commit 610a9a382254e583a028fa0677226d9607148863
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Aug 13 00:16:08 2019 +0000

    Daily bump.
    
    From-SVN: r274325

commit 5179b8d10d01abd9a9d8f6464e64dc1fe655e549
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Aug 12 00:16:17 2019 +0000

    Daily bump.
    
    From-SVN: r274270

commit 1f11b2276bcc2822dcd10b272eb21a2502457245
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Aug 11 00:16:17 2019 +0000

    Daily bump.
    
    From-SVN: r274259

commit 76deaee0544344c12bacccb8ffadb4e0667f23cb
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Aug 10 00:16:12 2019 +0000

    Daily bump.
    
    From-SVN: r274246

commit c16f5e373829a3616fe846494b98529665a84d5c
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Aug 9 00:16:08 2019 +0000

    Daily bump.
    
    From-SVN: r274222

commit 8ffbd22ec0479e41257a506d69e513b22f749b41
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Aug 8 00:16:09 2019 +0000

    Daily bump.
    
    From-SVN: r274203

commit 0096b18bab855d7a43a01c46169601b69399cda8
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Aug 7 00:16:17 2019 +0000

    Daily bump.
    
    From-SVN: r274153

commit 43f2ac98b3d76161cd15e978b88bb26e2871358a
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Aug 6 00:16:10 2019 +0000

    Daily bump.
    
    From-SVN: r274132

commit 065a7088021a68c835f7936f19dc102945ac28d5
Author: Kito Cheng <kito.cheng@sifive.com>
Date:   Mon Aug 5 10:44:19 2019 +0000

    RISC-V: Promote type correctly for libcalls
    
     - argument and return value for libcall won't promote at
       default_promote_function_mode_always_promote, however we expect it
       should sign-extend as normal function.
    
     - Witout this patch, this test case will fail at -march=rv64i -mabi=lp64.
    
     - The implementation of riscv_promote_function_mode is borrowed from MIPS.
    
    gcc/ChangeLog
    
            * config/riscv/riscv.c (riscv_promote_function_mode): New.
            (TARGET_PROMOTE_FUNCTION_MODE): Use riscv_promote_function_mode.
    
    gcc/testsuite/ChangeLog
    
            * gcc.target/riscv/promote-type-for-libcall.c: New.
    
    From-SVN: r274113

commit 8bfa58bd08fa99d8917ca2c9c52363e8222eac9a
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Aug 5 00:16:15 2019 +0000

    Daily bump.
    
    From-SVN: r274101

commit 09ca8576cdc0b405eac346b8970149ff9a313e0d
Author: Segher Boessenkool <segher@kernel.crashing.org>
Date:   Sun Aug 4 21:25:47 2019 +0200

    backport: rs6000.c (rs6000_dbx_register_number): Return the correct numbers for TFHAR, TFIAR, TEXASR.
    
            Backport from trunk
            2019-05-02  Segher Boessenkool  <segher@kernel.crashing.org>
    
            * config/rs6000/rs6000.c (rs6000_dbx_register_number): Return the
            correct numbers for TFHAR, TFIAR, TEXASR.
    
    From-SVN: r274098

commit d9af2b0b8e2ea8ac986d857e142b913b722586cb
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Aug 4 00:16:08 2019 +0000

    Daily bump.
    
    From-SVN: r274052

commit 1be472f3641ebf6efe86c2b8297aa0b3e91606a5
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Aug 3 00:16:08 2019 +0000

    Daily bump.
    
    From-SVN: r274035

commit 47479548327b992777d424dc20978b5c5d594fd4
Author: Thomas Koenig <tkoenig@gcc.gnu.org>
Date:   Fri Aug 2 17:51:45 2019 +0000

    backport: re PR fortran/90786 (ICE on procedure pointer assignment to function with class pointer result)
    
    2019-08-02  Thomas Koenig  <tkoenig@gcc.gnu.org>
            Paul Thomas <pault@gcc.gnu.org>
    
            Backport from trunk
            PR fortran/90786
            PR fortran/90813
            * trans-expr.c (pointer_assignment_is_proc_pointer) Remove as
            it is very simple and only called from one place.
            (gfc_trans_pointer_assignment): Rename non_proc_pointer_assign
            as non_proc_ptr_assign. Assign to it directly, rather than call
            to above, deleted function and use gfc_expr_attr instead of
            only checking the reference chain.
            * trans-decl.c (sym_identifier): New function.
            (mangled_identifier): New function, doing most of the work
            of gfc_sym_mangled_identifier.
            (gfc_sym_mangled_identifier): Use mangled_identifier.  Add mangled
            identifier to global symbol table.
            (get_proc_pointer_decl): Use backend decl from global identifier
            if present.
    
    2019-08-02  Thomas Koenig  <tkoenig@gcc.gnu.org>
            Paul Thomas <pault@gcc.gnu.org>
    
            Backport from trunk
            PR fortran/90786
            PR fortran/90813
            * gfortran.dg/proc_ptr_51.f90: New test.
    
    
    Co-Authored-By: Paul Thomas <pault@gcc.gnu.org>
    
    From-SVN: r274026

commit 8a9c75da819ca62added58bc0b576067fdd090fb
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Aug 2 00:16:08 2019 +0000

    Daily bump.
    
    From-SVN: r273991

commit 20792b17f0e4672cdffd06209ddd330cd72d84a4
Author: Marek Polacek <polacek@redhat.com>
Date:   Thu Aug 1 14:37:08 2019 +0000

    PR c++/89906 - ICE with template placeholder for TTP.
    
            PR c++/86098 - ICE with template placeholder for TTP.
            * typeck.c (structural_comptypes) [TEMPLATE_TYPE_PARM]: Check
            CLASS_PLACEHOLDER_TEMPLATE.
    
    From-SVN: r273974

commit fd394c10b56cf5b1398c49992da88ab1db534637
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Aug 1 00:16:11 2019 +0000

    Daily bump.
    
    From-SVN: r273958

commit d4c19ccb3212e49fef41c1797db6e7e10c37eaf2
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Jul 31 00:16:15 2019 +0000

    Daily bump.
    
    From-SVN: r273918

commit ead96a5af8b8cb9705ef9ec67acd50ddc97c0d7c
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Jul 30 00:16:08 2019 +0000

    Daily bump.
    
    From-SVN: r273894

commit 8351d70d0455fa8d58d06b543f7ad45b767d4594
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Jul 29 00:16:11 2019 +0000

    Daily bump.
    
    From-SVN: r273862

commit a3b7e2970476832cbea66736c8f98e0f315095bf
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Jul 28 00:16:50 2019 +0000

    Daily bump.
    
    From-SVN: r273848

commit 77b147d25d34e3c14c16ba0c97a19ccbd8a557b2
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Jul 27 00:16:22 2019 +0000

    Daily bump.
    
    From-SVN: r273841

commit a74628988978fc41eca3825bdae81827259fab63
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Jul 26 00:16:17 2019 +0000

    Daily bump.
    
    From-SVN: r273821

commit ec6f592c5cfb1d2115d65841d59703cf0985bf02
Author: Richard Biener <rguenther@suse.de>
Date:   Thu Jul 25 10:48:26 2019 +0000

    re PR plugins/90924 (lto-plugin/lto-plugin.c heap memory corruption due to insufficient sanitization.)
    
    2019-07-25  Richard Biener  <rguenther@suse.de>
    
            PR lto/90924
            Backport from mainline
            2019-07-12  Ren Kimura  <rkx1209dev@gmail.com>
    
            * simple-object-elf.c (simple_object_elf_match): Check zero value
            shstrndx.
    
    From-SVN: r273794

commit 30b99e501def6824bb1d2787765bd9e7dbdc872b
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Jul 25 00:16:09 2019 +0000

    Daily bump.
    
    From-SVN: r273780

commit 26615571cc2f1e816e1c0c8813f884904a0b91a2
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Jul 24 00:16:16 2019 +0000

    Daily bump.
    
    From-SVN: r273751

commit 476d631ab7053763890f9c72d38b1e8bed4c8714
Author: Matthew Beliveau <mbelivea@redhat.com>
Date:   Tue Jul 23 15:52:48 2019 +0000

    re PR rtl-optimization/91173 (ICE: in int_mode_for_mode, at stor-layout.c:403)
    
    PR rtl-optimization/91173
    
            Backported from mainline
            2019-07-16  Jeff Law  <law@redhat.com>
    
            PR rtl-optimization/91173
            * tree-ssa-address.c (addr_for_mem_ref): If the base is an
            SSA_NAME with a constant value, fold its value into the offset
            and clear the base before calling gen_addr_rtx.
            * g++.dg/pr91173.C: New test.
    
    From-SVN: r273740

commit d2e94a212e4fc32c5d72d8229b23da65b77c4e43
Author: Richard Biener <rguenther@suse.de>
Date:   Tue Jul 23 12:14:27 2019 +0000

    re PR debug/91231 (ICE in dwarf2out_inline_entry, at dwarf2out.c:27642)
    
    2019-07-23  Richard Biener  <rguenther@suse.de>
    
            PR debug/91231
            * lto-streamer-in.c (input_function): Drop inline-entry markers
            that ended up with an unknown location block.
    
    From-SVN: r273736

commit 77f77c8064d718272f421632c0a01cda788c1d9a
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Jul 23 00:16:10 2019 +0000

    Daily bump.
    
    From-SVN: r273710

commit 6de37e6b0b0f22054b695bc5ae75bbc1f30d7aa2
Author: Martin Liska <mliska@suse.cz>
Date:   Mon Jul 22 11:38:01 2019 +0200

    Backport r273660
    
    2019-07-22  Martin Liska  <mliska@suse.cz>
    
            Backport from mainline
            2019-07-22  Martin Liska  <mliska@suse.cz>
    
            PR driver/91172
            * opts-common.c (decode_cmdline_option): Decode
            argument of -Werror and check it for a wrong language.
            * opts-global.c (complain_wrong_lang): Remove such case.
    2019-07-22  Martin Liska  <mliska@suse.cz>
    
            Backport from mainline
            2019-07-22  Martin Liska  <mliska@suse.cz>
    
            PR driver/91172
            * gcc.dg/pr91172.c: New test.
    
    From-SVN: r273665

commit 6f95714378e39a65aeb22a96e813831751d34146
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Jul 22 00:16:15 2019 +0000

    Daily bump.
    
    From-SVN: r273654

commit 4756ef53d9b20b3a6cfee03ca866bedafabd9a00
Author: Richard Sandiford <richard.sandiford@arm.com>
Date:   Sun Jul 21 09:42:41 2019 +0000

    Fix -Wreturn-type for static naked functions in C
    
    This patch extends the fix for PR53633 to include static functions,
    which were giving a bogus -Wreturn-type warning for C but not for C++.
    
    2019-07-21  Richard Sandiford  <richard.sandiford@arm.com>
    
    gcc/c/
            Backport from mainline
            2019-07-18  Richard Sandiford  <richard.sandiford@arm.com>
    
            PR c/53633
            * c-decl.c (finish_function): Check targetm.warn_func_return
            before issuing a -Wreturn-type warning.
    
    gcc/testsuite/
            Backport from mainline
            2019-07-18  Richard Sandiford  <richard.sandiford@arm.com>
    
            * c-c++-common/pr53633-2.c: New test.
    
    From-SVN: r273642

commit 9ba7831723596e95d1767ff79d7b9193eca40d17
Author: Richard Sandiford <richard.sandiford@arm.com>
Date:   Sun Jul 21 09:42:21 2019 +0000

    Fix folding of vector EQ/NE
    
    For vector1 != vector2, we returned false if any elements were equal,
    rather than if all elements were equal.
    
    2019-07-21  Richard Sandiford  <richard.sandiford@arm.com>
    
    gcc/
            Backport from mainline
            2019-07-10  Richard Sandiford  <richard.sandiford@arm.com>
    
            * fold-const.c (fold_relational_const): Fix folding of
            vector-to-scalar NE_EXPRs.
            (test_vector_folding): Add more tests.
    
    From-SVN: r273641

commit 9606c5ee71f288a2cf18a1831b9b3598fac7c389
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Jul 21 00:16:09 2019 +0000

    Daily bump.
    
    From-SVN: r273638

commit 50557c47e44b4a8485e84478dae0d98331dfc39d
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Jul 20 00:16:07 2019 +0000

    Daily bump.
    
    From-SVN: r273613

commit dedd54d97d82c4c97ba6e9ad2505fcd926e86876
Author: Jason Merrill <jason@redhat.com>
Date:   Fri Jul 19 07:53:41 2019 -0400

    PR c++/82081 - tail call optimization breaks noexcept
    
    If a noexcept function calls a function that might throw, doing the tail
    call optimization means that an exception thrown in the called function
    will propagate out, breaking the noexcept specification.  So we need to
    prevent the optimization in that case.
    
            * tree-tailcall.c (find_tail_calls): Don't turn a call from a
            nothrow function to a might-throw function into a tail call.
    
    From-SVN: r273601

commit 5a56bd472c3a36f7ee1dba45cf89131596625213
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Jul 19 00:16:19 2019 +0000

    Daily bump.
    
    From-SVN: r273588

commit ef4b1da40ff254737026e789342869bd4739ae99
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Jul 18 00:16:29 2019 +0000

    Daily bump.
    
    From-SVN: r273560

commit be4c767f2e23083aa2f4385d7133ded01cc106bc
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Jul 17 00:16:10 2019 +0000

    Daily bump.
    
    From-SVN: r273539

commit 03051e2c019750db06b1ff79e14747bf0b603496
Author: Wilco Dijkstra <wdijkstr@arm.com>
Date:   Tue Jul 16 12:37:14 2019 +0000

    [ARM] Fix PR89222
    
    The GCC optimizer can generate symbols with non-zero offset from simple
    if-statements. Bit zero is used for the Arm/Thumb state bit, so relocations
    with offsets fail if it changes bit zero and the relocation forces bit zero
    to true.  The fix is to disable offsets on function pointer symbols.
    
        gcc/
            PR target/89222
            * config/arm/arm.md (movsi): Use targetm.cannot_force_const_mem
            to decide when to split off a non-zero offset from a symbol.
            * config/arm/arm.c (arm_cannot_force_const_mem): Disallow offsets
            in function symbols.
    
        testsuite/
            PR target/89222
            * gcc.target/arm/pr89222.c: Add new test.
    
    From-SVN: r273526

commit 1a088bcf0da4960c88835893fa73325178231824
Author: Wilco Dijkstra <wdijkstr@arm.com>
Date:   Tue Jul 16 12:00:42 2019 +0000

    [ARM] Fix Thumb-1 ldm (PR89190)
    
    This patch fixes an ICE in the Thumb-1 LDM peepholer.  Thumb-1 LDMs
    always update the base register except if the base is loaded.
    The current implementation rejects LDMs where the base is not dead,
    however this doesn't exclude the case where the base is loaded as
    well as dead.  Fix this by explicitly checking whether the base is
    loaded.  Also enable LDMs which load the first register.
    
        gcc/
            PR target/89190
            * config/arm/arm.c (ldm_stm_operation_p) Set
            addr_reg_in_reglist correctly for first register.
            (load_multiple_sequence): Remove dead base check.
            (gen_ldm_seq): Correctly set write_back for Thumb-1.
    
        testsuite/
            PR target/89190
            * gcc.target/arm/pr89190.c: New test.
    
    From-SVN: r273523

commit bc9e70c51013c96cf33ddf6b97a8d68bc540e0bd
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Jul 16 00:16:40 2019 +0000

    Daily bump.
    
    From-SVN: r273503

commit f8335c5a1741fe7d284e7feb58804072ae227c5e
Author: Andreas Krebbel <krebbel@linux.ibm.com>
Date:   Mon Jul 15 14:27:16 2019 +0000

    S/390: Fix vector shift count operand
    
    We currently use subst definitions to handle the different variants of shift
    count operands. Unfortunately, in the vector shift pattern the shift count
    operand is used directly. Without it being adjusted for the 'subst' variants the
    displacement value is omitted resulting in a wrong shift count being applied.
    
    This patch needs to be applied to older branches as well.
    
    gcc/ChangeLog:
    
    2019-07-15  Andreas Krebbel  <krebbel@linux.ibm.com>
    
            Backport from mainline
            2019-07-01  Andreas Krebbel  <krebbel@linux.ibm.com>
    
            * config/s390/vector.md: Fix shift count operand printing.
    
    gcc/testsuite/ChangeLog:
    
    2019-07-15  Andreas Krebbel  <krebbel@linux.ibm.com>
    
            Backport from mainline
            2019-07-01  Andreas Krebbel  <krebbel@linux.ibm.com>
    
            * gcc.target/s390/vector/vec-shift-2.c: New test.
    
    From-SVN: r273493

commit 70f362d5a2c5e6ea7efceb11ede21d3c5e32f281
Author: Wilco Dijkstra <wdijkstr@arm.com>
Date:   Mon Jul 15 11:00:48 2019 +0000

    Backport fix for PR85711
    
            Backport from mainline
            2019-01-23  Bin Cheng  <bin.cheng@arm.com>
                        Steve Ellcey  <sellcey@marvell.com>
    
            PR target/85711
            * recog.c (address_operand): Return false on wrong mode for address.
            (constrain_operands): Check for mode with 'p' constraint.
    
    From-SVN: r273491

commit 363ca4fa83ae653c809e9383f854d80fd3b10615
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Jul 15 00:16:09 2019 +0000

    Daily bump.
    
    From-SVN: r273486

commit 6dbc92d107534a94fa17e291dba02738feae8904
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Jul 14 00:16:10 2019 +0000

    Daily bump.
    
    From-SVN: r273472

commit 9be008e4a4a5418d71c6da0e6392b2fe4d11ebbc
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Jul 13 00:16:16 2019 +0000

    Daily bump.
    
    From-SVN: r273461

commit 987e3076e1169d4cab973d9eb1313d2ffefa42e4
Author: Wilco Dijkstra <wdijkstr@arm.com>
Date:   Fri Jul 12 16:41:01 2019 +0000

    Turn off ipa-ra in builtins test (PR91059)
    
    The gcc.c-torture/execute/builtins/lib directory contains a reimplementation
    of many C library string functions, which causes non-trivial register allocation
    bugs with LTO and static linked libraries.  To fix this long-standing test issue,
    turn off ipa-ra which avoids the register corruption across calls.  All builtin
    torture tests now pass on aarch64-none-elf.  Committed as obvious.
    See PR78529 for more details.
    
        testsuite/
            PR testsuite/78529
            * gcc.c-torture/execute/builtins/builtins.exp: Add -fno-ipa-ra.
    
    From-SVN: r273450

commit 4369ef74dc8ed2a8f13fca8ece08444f5ecc2955
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Fri Jul 12 10:16:51 2019 +0000

    re PR rtl-optimization/91136 (incorrect move of instruction to delay slot causes application crash in exception handling)
    
            PR rtl-optimization/91136
            * df-core.c (ACCESSING REFS): Fix typos in comment.
            * resource.c (mark_target_live_reg): Add artificial defs that occur at
            the beginning of the block to the initial set of live registers.
    
    From-SVN: r273438

commit e15605a04c6e2c30e941d60812bcd84456ee7a2f
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Jul 12 00:16:09 2019 +0000

    Daily bump.
    
    From-SVN: r273427

commit bfd1e2b2caca4960c0195d2659ae56d5be4e858b
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Jul 11 00:16:08 2019 +0000

    Daily bump.
    
    From-SVN: r273373

commit 15e0c8d949cda847e2ce32e61615912b7f968404
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Jul 10 00:16:12 2019 +0000

    Daily bump.
    
    From-SVN: r273319

commit f74b3443089d7fa183cf089d26078a401933a1ca
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Jul 9 00:16:09 2019 +0000

    Daily bump.
    
    From-SVN: r273258

commit 5dfdd8205e121681408a5c8b36053c7b39245f67
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Jul 8 00:16:15 2019 +0000

    Daily bump.
    
    From-SVN: r273188

commit 137585eacdd9613976e609a1ea1b18d2b8d88ddd
Author: Paul Thomas <pault@gcc.gnu.org>
Date:   Sun Jul 7 14:50:53 2019 +0000

    re PR fortran/91077 (Wrong indexing when using a pointer)
    
    2019-07-07  Paul Thomas  <pault@gcc.gnu.org>
    
            PR fortran/91077
            * trans-array.c (gfc_conv_scalarized_array_ref) Delete code
            that gave symbol backend decl for subref arrays.
    
    2019-07-07  Paul Thomas  <pault@gcc.gnu.org>
    
            PR fortran/91077
            * gfortran.dg/pointer_array_11.f90 : New test.
    
    From-SVN: r273178

commit 1fc94424e26c61b9341e304c8ad1a8b60b79cc60
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Jul 7 00:16:14 2019 +0000

    Daily bump.
    
    From-SVN: r273171

commit 5e8f574c59857fd641109f00e11d61f42839faa0
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Jul 6 00:16:14 2019 +0000

    Daily bump.
    
    From-SVN: r273152

commit d03340c7655838c5b214c8a3b4d431b6f16627d2
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Jul 5 00:16:09 2019 +0000

    Daily bump.
    
    From-SVN: r273098

commit 9263ca1142c5ccd2b07b69417649711e8cc4cdd2
Author: Chenghua Xu <paul.hua.gm@gmail.com>
Date:   Thu Jul 4 09:29:17 2019 +0000

    [MIPS][Testsuite] Specify msa-fmadd.c abis.
    
    gcc/testsuite/
    
            Backported from mainline.
            * gcc.target/mips/mips-fmadd.c: Rename to ...
            * gcc.target/mips/mips-fmadd-o32.c: ... Here; add abi=32.
            * gcc.target/mips/mips-fmadd-n64.c: New.
    
    From-SVN: r273076

commit 3f9b2409c395a76ec17486816a0d89d364f0577e
Author: Martin Liska <mliska@suse.cz>
Date:   Thu Jul 4 11:24:32 2019 +0200

    Backport r272992
    
    2019-07-04  Martin Liska  <mliska@suse.cz>
    
            Backport from mainline
            2019-07-03  Martin Liska  <mliska@suse.cz>
    
            PR middle-end/90899
            * multiple_target.c (create_dispatcher_calls): Add to comdat
            group only if set for ifunc.
    2019-07-04  Martin Liska  <mliska@suse.cz>
    
            Backport from mainline
            2019-07-03  Martin Liska  <mliska@suse.cz>
    
            PR middle-end/90899
            * gcc.target/i386/pr90899.c: New test.
    
    From-SVN: r273075

commit 1ef5054261486ff89ce9c736d0bcbe84da6b44fd
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Jul 4 00:16:13 2019 +0000

    Daily bump.
    
    From-SVN: r273029

commit a6613081d2c20dbe3fc7c2cbdcffb1fd7885473b
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Jul 3 00:16:08 2019 +0000

    Daily bump.
    
    From-SVN: r272951

commit 69ebcd1b4c923373c3b5ac128a41f7222422f9c1
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Jul 2 00:16:13 2019 +0000

    Daily bump.
    
    From-SVN: r272914

commit 8434f7ae2060d3fbbfdce27ae5f8899e81840280
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Jul 1 00:16:10 2019 +0000

    Daily bump.
    
    From-SVN: r272837

commit 057eadab6cd4f162f96bb21a0e40583c067ebe24
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Jun 30 00:16:18 2019 +0000

    Daily bump.
    
    From-SVN: r272829

commit 5a009804928bca0e9ada2415c2d33dc69586a423
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Sat Jun 29 09:08:05 2019 +0000

    decl.c (gnat_to_gnu_entity): Beep up comment on SAVED...
    
            * gcc-interface/decl.c (gnat_to_gnu_entity): Beep up comment on SAVED,
            and tweak comment on the assertion about the scopes of Itypes.  Do not
            skip the regular processing for Itypes that are E_Record_Subtype with
            a Cloned_Subtype.  Get the Cloned_Subtype for every E_Record_Subtype
            if the type is dummy and hasn't got its own freeze node.
            <E_Record_Subtype>: Save again the DECL of the Cloned_Subtype, if any.
            <E_Access_Subtype>: Save again the DECL of the equivalent type.
            (Gigi_Equivalent_Type) <E_Access_Subtype>: New case.
    
    From-SVN: r272824

commit 523439f170933f6e2f282b585b2eece06858a4a2
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Sat Jun 29 07:38:40 2019 +0000

    trans.c (mark_visited_r): Set TYPE_SIZES_GIMPLIFIED on the main variant of a type, if any.
    
            * gcc-interface/trans.c (mark_visited_r): Set TYPE_SIZES_GIMPLIFIED on
            the main variant of a type, if any.
    
    From-SVN: r272817

commit d0c254c31aeb685eca60934edd54410931bcea19
Author: Eric Botcazou <ebotcazou@gcc.gnu.org>
Date:   Sat Jun 29 07:31:43 2019 +0000

    decl.c (set_nonaliased_component_on_array_type): Add missing guard for the presence of TYPE_CANONICAL.
    
            * gcc-interface/decl.c (set_nonaliased_component_on_array_type): Add
            missing guard for the presence of TYPE_CANONICAL.
            (set_reverse_storage_order_on_array_type): Likewise.
    
    From-SVN: r272813

commit 511486886317560ef10497707a7d3c8ca4374fc8
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Jun 29 00:16:09 2019 +0000

    Daily bump.
    
    From-SVN: r272806

commit 6f022d351e6c6b112dcace175958247f56aae458
Author: Jeff Law <law@redhat.com>
Date:   Fri Jun 28 14:58:42 2019 -0600

    re PR tree-optimization/90949 (null pointer check removed)
    
            PR tree-optimization/90949
            * tree-ssa-copy.c (fini_copy_prop): Use reset_flow_sensitive_info.
            * tree-ssanames.c (reset_flow_sensitive_info): Reset non-null state.
    
            * gcc.c-torture/execute/pr90949.c: New test.
    
    From-SVN: r272797

commit 68679e5aefbf4a3f055556c757f2fd0876eecbb6
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Jun 28 00:16:08 2019 +0000

    Daily bump.
    
    From-SVN: r272772

commit dbdbb785560706279e67c2d8b7cd54067bb5c5d7
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Jun 27 00:16:15 2019 +0000

    Daily bump.
    
    From-SVN: r272721

commit 8cfbecf65c178c66c1b06f286891ce544ef6213b
Author: Martin Jambor <mjambor@suse.cz>
Date:   Wed Jun 26 18:30:23 2019 +0200

    [PR 90939] Remove outdated assert in ipcp_bits_lattice::meet_with
    
    2019-06-26  Martin Jambor  <mjambor@suse.cz>
    
            PR ipa/90939
            * ipa-cp.c (ipcp_bits_lattice::meet_with): Remove assert.
    
    From-SVN: r272700

commit 612306401425945a45a6f580750b66ffd116124e
Author: Rainer Orth <ro@CeBiTec.Uni-Bielefeld.DE>
Date:   Wed Jun 26 09:21:02 2019 +0000

    Remove support for alternative Solaris 11.4 ld -V output
    
            Backport from mainline
            2019-06-17  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>
    
            * configure.ac (ld_vers) <*-*-solaris2*>: Remove support for
            alternative Solaris 11.4 format.
            * configure: Regenerate.
    
    From-SVN: r272677

commit f27a3594bd6a708bed2dd112e7f163f3fba07c74
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Jun 26 00:16:14 2019 +0000

    Daily bump.
    
    From-SVN: r272663

commit a6283a87277a21ba49db39d64f9699357f009c71
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Jun 25 00:16:09 2019 +0000

    Daily bump.
    
    From-SVN: r272630

commit 2a08565c83023ade3db5e3d33bf3dd37e690034e
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Jun 24 00:16:09 2019 +0000

    Daily bump.
    
    From-SVN: r272611

commit 78ef5b3b5e9d3b5960ecff410750bd4ef2a5587d
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Jun 23 00:16:08 2019 +0000

    Daily bump.
    
    From-SVN: r272597

commit f4a27149cebb301716e91872413795daace9b9de
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Jun 22 00:16:10 2019 +0000

    Daily bump.
    
    From-SVN: r272581

commit 5704920420bbba6c537004454e4d2baee7701f8f
Author: Thomas Koenig <tkoenig@gcc.gnu.org>
Date:   Fri Jun 21 19:30:51 2019 +0000

    backport: re PR fortran/90937 (ICE: in gfc_get_symbol_decl, at fortran/trans-decl.c:1538)
    
    2019-06-21  Thomas Koenig  <tkoenig@gcc.gnu.org>
    
            Backport from trunk
            PR fortran/90937
            * trans-types.c (get_formal_from_actual_arglist): Get symbol from
            current namespace so it will be freed later.  If symbol is of type
            character, get an empty character length.
    
    2019-06-21  Thomas Koenig  <tkoenig@gcc.gnu.org>
    
            Backport from trunk
            PR fortran/90937
            * gfortran.dg/external_procedure_4.f90: New test.
    
    From-SVN: r272565

commit 22055b76589fe4c813196b37c27a7cb0f350eaf4
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Jun 21 00:16:13 2019 +0000

    Daily bump.
    
    From-SVN: r272536

commit d019893073b6bc4e099467fe9b269b6e68a8c7ad
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Jun 20 00:16:07 2019 +0000

    Daily bump.
    
    From-SVN: r272493

commit a4129b73805738e56e00a9229418cb68aeac72ea
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Jun 19 00:16:31 2019 +0000

    Daily bump.
    
    From-SVN: r272462

commit aa0ff17cc2cdd1a7adecc1d69f3e01bc04240ca2
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Jun 18 00:16:08 2019 +0000

    Daily bump.
    
    From-SVN: r272402

commit b40060e6e6fc14c211c433d0fcd505a13efd367e
Author: Jeff Law <law@redhat.com>
Date:   Mon Jun 17 11:29:22 2019 -0600

    mips.c (mips_expand_builtin_insn): Swap the 1st and 3rd operands of the fmadd/fmsub/maddv builtin.
    
            * config/mips/mips.c (mips_expand_builtin_insn): Swap the 1st
            and 3rd operands of the fmadd/fmsub/maddv builtin.
    
            * gcc.target/mips/msa-fmadd.c: New.
    
    From-SVN: r272393

commit 4377697857f48456b328f1a146dc2f2be1922f79
Author: Arnaud Charlet <charlet@adacore.com>
Date:   Mon Jun 17 07:34:04 2019 +0000

    re PR ada/80590 (non-bootstrap build failure of Ada runtime)
    
    PR ada/80590
    
            * exp_ch9.adb (Expand_N_Delay_Relative_Statement): Swap the two
            conditions to avoid a unnecessary exception propagation in the default
            case.
    
    From-SVN: r272373

commit 5c03522f0c343eae40bff82b8d530883325c321c
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Jun 17 00:16:16 2019 +0000

    Daily bump.
    
    From-SVN: r272368

commit 0c4979123e5605e58acaebd86472b007179bd3a4
Author: John David Anglin <danglin@gcc.gnu.org>
Date:   Sun Jun 16 21:46:47 2019 +0000

    re PR middle-end/64242 (Longjmp expansion incorrect)
    
            PR middle-end/64242
            * config/pa/pa.md (nonlocal_goto): Restore frame pointer last.  Add
            frame clobbers and schedule block.
            (builtin_longjmp): Likewise.
    
    From-SVN: r272363

commit 98db52a314de2caaa141500482303f1268a36160
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Jun 16 00:16:08 2019 +0000

    Daily bump.
    
    From-SVN: r272335

commit 78ea3968cca2656b34d306faab817cc8f3dc1800
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Jun 15 00:16:09 2019 +0000

    Daily bump.
    
    From-SVN: r272316

commit 915d9fa7b3216da01b76f9bc38fa07a18479d215
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Jun 14 00:16:09 2019 +0000

    Daily bump.
    
    From-SVN: r272278

commit 10e3145ab2edf87c2e4d21bced81e3ca6aa116ad
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Jun 13 00:16:08 2019 +0000

    Daily bump.
    
    From-SVN: r272226

commit 1177e83358170910ae6db6d6b1946f3136ebeb38
Author: Thomas Koenig <tkoenig@gcc.gnu.org>
Date:   Wed Jun 12 19:54:34 2019 +0000

    backport: re PR fortran/90744 (Bogus length for character temporaries passed to external procedures since r268992)
    
    2019-06-12  Thomas Koenig  <tkoenig@gcc.gnu.org>
        Tomáš Trnka  <trnka@scm.com>
    
        Backport from trunk
        PR fortran/90744
        * trans-types.c (get_formal_from_actual_arglist): Unset typespec
        flags which make no sense for procedures without explicit
        interface.
    
    2019-06-12  Thomas Koenig  <tkoenig@gcc.gnu.org>
        Tomáš Trnka  <trnka@scm.com>
    
        Backport from trunk
        PR fortran/90744
        * gfortran.dg/deferred_character_33.f90: New test.
        * gfortran.dg/deferred_character_33a.f90: New test.
    
    
    Co-Authored-By: Tomáš Trnka <trnka@scm.com>
    
    From-SVN: r272213

commit 5ed26fb10bc34dbb53d3cd23f995b24d7c49f560
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Jun 12 00:16:08 2019 +0000

    Daily bump.
    
    From-SVN: r272175

commit 8629b324492a8b67a4ce76ddff747583a9260d56
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Jun 11 18:44:41 2019 +0200

    re PR target/90811 ([nvptx] ptxas error on OpenMP offloaded code)
    
            PR target/90811
            * config/nvptx/nvptx.c (nvptx_output_softstack_switch): Use and.b%d
            instead of and.u%d.
    
            * testsuite/libgomp.c/pr90811.c: New test.
    
    From-SVN: r272163

commit 1dea3dfd355615e7bc7f9a369f019fd6bfa13a6e
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Jun 11 15:42:07 2019 +0200

    re PR c++/90810 (Different intrinsics behavior on G++ 7.4 and G++ 8.3)
    
            PR c++/90810
            * init.c (constant_value_1): Handle VECTOR_CST DECL_INITIAL for
            !DECL_INITIALIZED_BY_CONSTANT_EXPRESSION_P decls like CONSTRUCTOR.
    
            * g++.dg/ext/vector37.C: New test.
    
    From-SVN: r272155

commit dc8db24e951fdb4319123330baa347c8243b4282
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Jun 11 00:16:09 2019 +0000

    Daily bump.
    
    From-SVN: r272139

commit 9231c89797156e1b06005c7b97ce8fdd19c2002a
Author: Paul Thomas <pault@gcc.gnu.org>
Date:   Mon Jun 10 05:48:44 2019 +0000

    backport: re PR fortran/90498 (ICE with select type/associate and derived type argument containing class(*))
    
    2019-06-10  Paul Thomas  <pault@gcc.gnu.org>
    
            Backport from trunk
            PR fortran/90498
            * trans-stmt.c (trans_associate_var) Do not use the saved
            descriptor if the expression is a COMPONENT_REF.
    
    2019-06-10  Paul Thomas  <pault@gcc.gnu.org>
    
            Backport from trunk
            PR fortran/90498
            * gfortran.dg/associate_48.f90 : New test.
    
    From-SVN: r272103

commit db208360766207c328ddf4973a4400b41fa751c6
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Jun 10 00:16:14 2019 +0000

    Daily bump.
    
    From-SVN: r272100

commit 5f5181721a883af79b1dd24b8dfffb2c5773b25f
Author: Paul Thomas <pault@gcc.gnu.org>
Date:   Sun Jun 9 18:31:58 2019 +0000

    backport: re PR fortran/57284 ([OOP] ICE with find_array_spec for polymorphic arrays)
    
    2019-06-09  Paul Thomas  <pault@gcc.gnu.org>
    
            Backport from trunk
            PR fortran/57284
            * resolve.c (find_array_spec): If this is a class expression
            and the symbol and component array specs are the same, this is
            not an error.
            *trans-intrinsic.c (gfc_conv_intrinsic_size): If a class symbol
            argument, has no namespace, it has come from the interface
            mapping and the _data component must be accessed directly.
            * trans-array.c (gfc_trans_create_temp_array): Compute elemsize
            in all cases and use to set span field.
            (gfc_is_reallocatable_lhs): Pick up class allocatable exprs
            that do not have a _data component ref before the array ref.
    
    2019-06-09  Paul Thomas  <pault@gcc.gnu.org>
    
            Backport from trunk
            PR fortran/57284
            * gfortran.dg/class_70.f03: New test
            * gfortran.dg/assign_10.f90: Bump up counts of "atmp".
            * gfortran.dg/transpose_optimization_2.f90: Ditto
    
    From-SVN: r272095

commit b6f119f3bced1e76acc3ec83231e27f113857b53
Author: Paul Thomas <pault@gcc.gnu.org>
Date:   Sun Jun 9 18:31:11 2019 +0000

    backport: re PR fortran/57284 ([OOP] ICE with find_array_spec for polymorphic arrays)
    
    2019-06-09  Paul Thomas  <pault@gcc.gnu.org>
    
            Backport from trunk
            PR fortran/57284
            * resolve.c (find_array_spec): If this is a class expression
            and the symbol and component array specs are the same, this is
            not an error.
            *trans-intrinsic.c (gfc_conv_intrinsic_size): If a class symbol
            argument, has no namespace, it has come from the interface
            mapping and the _data component must be accessed directly.
            * trans-array.c (gfc_trans_create_temp_array): Compute elemsize
            in all cases and use to set span field.
            (gfc_is_reallocatable_lhs): Pick up class allocatable exprs
            that do not have a _data component ref before the array ref.
    
    2019-06-09  Paul Thomas  <pault@gcc.gnu.org>
    
            Backport from trunk
            PR fortran/57284
            * gfortran.dg/class_70.f03: New test
            * gfortran.dg/assign_10.f90: Bump up counts of "atmp".
            * gfortran.dg/transpose_optimization_2.f90: Ditto
    
    From-SVN: r272094

commit 8c4c45a6a4d3324a86586bf2e4924487785fe543
Author: Paul Thomas <pault@gcc.gnu.org>
Date:   Sun Jun 9 18:26:33 2019 +0000

    backport: re PR fortran/57284 ([OOP] ICE with find_array_spec for polymorphic arrays)
    
    2019-06-09  Paul Thomas  <pault@gcc.gnu.org>
    
            Backport from trunk
            PR fortran/57284
            * resolve.c (find_array_spec): If this is a class expression
            and the symbol and component array specs are the same, this is
            not an error.
            *trans-intrinsic.c (gfc_conv_intrinsic_size): If a class symbol
            argument, has no namespace, it has come from the interface
            mapping and the _data component must be accessed directly.
            * trans-array.c (gfc_trans_create_temp_array): Compute elemsize
            in all cases and use to set span field.
            (gfc_is_reallocatable_lhs): Pick up class allocatable exprs
            that do not have a _data component ref before the array ref.
    
    2019-06-09  Paul Thomas  <pault@gcc.gnu.org>
    
            Backport from trunk
            PR fortran/57284
            * gfortran.dg/class_70.f03
    
    From-SVN: r272093

commit d77108dbfbebd91a58c6a0f5883a61bf468c6f7a
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Jun 9 00:16:11 2019 +0000

    Daily bump.
    
    From-SVN: r272087

commit 1b00b83119e4eec3427a488a9b1e5b7ce595c35d
Author: John David Anglin <danglin@gcc.gnu.org>
Date:   Sat Jun 8 00:17:46 2019 +0000

    scanasm.exp (dg-function-on-line): Add pattern for hppa*-*-linux*.
    
            * lib/scanasm.exp (dg-function-on-line): Add pattern for hppa*-*-linux*.
    
    From-SVN: r272069

commit fee42ae3b496da5cb682cec81de55b1097567511
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Jun 8 00:16:10 2019 +0000

    Daily bump.
    
    From-SVN: r272065

commit 2c53bec3c2fa0413e7edd22e085c39bfbd2feb3a
Author: John David Anglin <danglin@gcc.gnu.org>
Date:   Sat Jun 8 00:15:45 2019 +0000

    re PR target/90751 (-fpatchtable-function-entry  broken on hppa-linux-gnu-gcc/hppa64-linux-gnu-gcc)
    
            PR target/90751
            * config/pa/pa-linux.h (ASM_DECLARE_FUNCTION_NAME): Update comment.
            Call pa_output_function_label.
            (TARGET_ASM_FUNCTION_PROLOGUE): define.
            * config/pa/pa-protos.h (pa_output_function_label): Declare.
            * config/pa/pa.c (pa_output_function_prologue): Add ATTRIBUTE_UNUSED
            to declaration.
            (pa_linux_output_function_prologue): Declare.
            (TARGET_ASM_FUNCTION_PROLOGUE): Delete define.
            (pa_output_function_label): New.
            (pa_output_function_prologue): Revise to use pa_output_function_label.
            (pa_linux_output_function_prologue): New.
            * config/pa/pa.h (TARGET_ASM_FUNCTION_PROLOGUE): Define.
    
    From-SVN: r272063

commit 15ba94f5a8bd549b8e0d7d96692c8ddd175b2e02
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Fri Jun 7 07:54:20 2019 +0000

    Darwin, x86, fix three testcases for pr82920 only on 8 branch.
    
    As part of the backport for pr82920, the following three testcases
    that are only present on the 8 branch, also needed amendment.
    
    gcc/testsuite/
    
    2019-06-07  Iain Sandoe  <iain@sandoe.co.uk>
    
            PR target/82920
            * gcc.target/i386/indirect-thunk-bnd-1.c: Adjust scan-asms for Darwin,
            do not use -fno-pic on Darwin.
            * gcc.target/i386/indirect-thunk-bnd-2.c: Likewise.
            * gcc.target/i386/ret-thunk-25.c: Skip for Darwin, which has a
            different ABI for returning this category of complex value.
    
    From-SVN: r272035

commit 6fadb6c344e69ff6792e476f2aaa3ed6a2fe1de9
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Fri Jun 7 07:48:32 2019 +0000

    Darwin, x86, backport fix for PR82920 part 3 (testsuite changes)
    
    gcc/testsuite/
    
    2019-06-07  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-05-15  Iain Sandoe  <iain@sandoe.co.uk>
    
            PR target/82920
            * g++.dg/cet-notrack-1.C: Adjust scan assembler for Darwin.
            * gcc.target/i386/cet-notrack-5a.c: Likewise.
            * gcc.target/i386/cet-notrack-5b.c: Likewise.
            * gcc.target/i386/cet-notrack-6b.c: Likewise.
            * gcc.target/i386/cet-notrack-icf-1.c: Likewise.
            * gcc.target/i386/cet-notrack-icf-2.c: Likewise.
            * gcc.target/i386/cet-notrack-icf-3.c: Likewise.
            * gcc.target/i386/cet-notrack-icf-4.c: Likewise.
            * gcc.target/i386/cet-sjlj-3.c: Likewise.
            * gcc.target/i386/cet-sjlj-5.c: Likewise.
    
    From-SVN: r272034

commit 848969577d6a61627db8d11f59f1dfade157ab4e
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Fri Jun 7 07:42:55 2019 +0000

    Darwin, x86, backport fix for PR82920 (part 2 no mx32 for Darwin)
    
    gcc/
    
    2019-06-07  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-05-12  Iain Sandoe  <iain@sandoe.co.uk>
    
            PR target/82920
            * config/i386/darwin.h (CC1_SPEC): Report -mx32 as an error for
            Darwin.
    
    gcc/tstsuite/
    
    2019-06-07  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-05-14  Iain Sandoe  <iain@sandoe.co.uk>
    
            PR target/82920
            * gcc.target/i386/cet-sjlj-6b.c: Require effective target x32.
            * gcc.target/i386/pr52146.c: Likewise.
            * gcc.target/i386/pr52698.c: Likewise.
            * gcc.target/i386/pr52857-1.c: Likewise.
            * gcc.target/i386/pr52857-2.c: Likewise.
            * gcc.target/i386/pr52876.c: Likewise.
            * gcc.target/i386/pr53698.c: Likewise.
            * gcc.target/i386/pr54157.c: Likewise.
            * gcc.target/i386/pr55049-1.c: Likewise.
            * gcc.target/i386/pr55093.c: Likewise.
            * gcc.target/i386/pr55116-1.c: Likewise.
            * gcc.target/i386/pr55116-2.c: Likewise.
            * gcc.target/i386/pr55597.c: Likewise.
            * gcc.target/i386/pr59929.c: Likewise.
            * gcc.target/i386/pr66470.c: Likewise.
    
    From-SVN: r272033

commit 302341dbc88e878d913b156469d072e798bff55a
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Fri Jun 7 07:36:18 2019 +0000

    Darwin, x86, backport fix for PR82920 (part1 code changes)
    
    gcc/
    2019-06-07  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-05-12  Iain Sandoe  <iain@sandoe.co.uk>
    
            PR target/82920
            * config/i386/i386.c (ix86_output_jmp_thunk_or_indirect): New.
            (ix86_output_indirect_branch_via_reg): Use output mechanism
            accounting for __USER_LABEL_PREFIX__.
            (ix86_output_indirect_branch_via_push): Likewise.
            (ix86_output_function_return): Likewise.
            (ix86_output_indirect_function_return): Likewise.
    
    gcc/testsuite/
    
    2019-06-07  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-05-12  Iain Sandoe  <iain@sandoe.co.uk>
                Dominique d'Humieres  <dominiq@gcc.gnu.org>
    
            PR target/82920
            * gcc.target/i386/indirect-thunk-1.c: Adjust scan-asms for Darwin,
            do not use -fno-pic on Darwin.
            * gcc.target/i386/indirect-thunk-2.c: Likewise.
            * gcc.target/i386/indirect-thunk-3.c: Likewise.
            * gcc.target/i386/indirect-thunk-4.c: Likewise.
            * gcc.target/i386/indirect-thunk-7.c: Likewise.
            * gcc.target/i386/indirect-thunk-attr-1.c: Likewise.
            * gcc.target/i386/indirect-thunk-attr-2.c: Likewise.
            * gcc.target/i386/indirect-thunk-attr-3.c: Likewise.
            * gcc.target/i386/indirect-thunk-attr-4.c: Likewise.
            * gcc.target/i386/indirect-thunk-attr-5.c: Likewise.
            * gcc.target/i386/indirect-thunk-attr-6.c: Likewise.
            * gcc.target/i386/indirect-thunk-attr-7.c: Likewise.
            * gcc.target/i386/indirect-thunk-attr-8.c: Likewise.
            * gcc.target/i386/indirect-thunk-extern-1.c: Likewise.
            * gcc.target/i386/indirect-thunk-extern-2.c: Likewise.
            * gcc.target/i386/indirect-thunk-extern-3.c: Likewise.
            * gcc.target/i386/indirect-thunk-extern-4.c: Likewise.
            * gcc.target/i386/indirect-thunk-extern-7.c: Likewise.
            * gcc.target/i386/indirect-thunk-inline-1.c: Likewise.
            * gcc.target/i386/indirect-thunk-inline-2.c: Likewise.
            * gcc.target/i386/indirect-thunk-inline-3.c: Likewise.
            * gcc.target/i386/indirect-thunk-inline-4.c: Likewise.
            * gcc.target/i386/indirect-thunk-inline-7.c: Likewise.
            * gcc.target/i386/indirect-thunk-register-1.c: Likewise.
            * gcc.target/i386/indirect-thunk-register-2.c: Likewise.
            * gcc.target/i386/indirect-thunk-register-3.c: Likewise.
            * gcc.target/i386/indirect-thunk-register-4.c: Likewise.
            * gcc.target/i386/ret-thunk-1.c: Likewise.
            * gcc.target/i386/ret-thunk-10.c: Likewise.
            * gcc.target/i386/ret-thunk-11.c: Likewise.
            * gcc.target/i386/ret-thunk-12.c: Likewise.
            * gcc.target/i386/ret-thunk-13.c: Likewise.
            * gcc.target/i386/ret-thunk-14.c: Likewise.
            * gcc.target/i386/ret-thunk-15.c: Likewise.
            * gcc.target/i386/ret-thunk-16.c: Likewise.
            * gcc.target/i386/ret-thunk-2.c: Likewise.
            * gcc.target/i386/ret-thunk-22.c: Likewise.
            * gcc.target/i386/ret-thunk-23.c: Likewise.
            * gcc.target/i386/ret-thunk-24.c: Likewise.
            * gcc.target/i386/ret-thunk-3.c: Likewise.
            * gcc.target/i386/ret-thunk-4.c: Likewise.
            * gcc.target/i386/ret-thunk-5.c: Likewise.
            * gcc.target/i386/ret-thunk-6.c: Likewise.
            * gcc.target/i386/ret-thunk-7.c: Likewise.
            * gcc.target/i386/ret-thunk-8.c: Likewise.
            * gcc.target/i386/ret-thunk-9.c: Likewise.
    
    From-SVN: r272031

commit f456070a02c0d5baa2be53fc5304be7149bc40ff
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Jun 7 00:16:11 2019 +0000

    Daily bump.
    
    From-SVN: r272025

commit 7b413e08b0613354b1669e0bb2aeff9010cd745d
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Jun 6 00:16:10 2019 +0000

    Daily bump.
    
    From-SVN: r271980

commit 7cbb3aae852e3992e14ffa6caa802939d9c66e2d
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Jun 5 00:16:09 2019 +0000

    Daily bump.
    
    From-SVN: r271942

commit d8c5ee01a96a941e654dd837539515d0dd653b07
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Jun 4 00:16:09 2019 +0000

    Daily bump.
    
    From-SVN: r271897

commit 657eb099c5b6ca5cf4b2d6fc3e68a829a6905ef4
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Jun 3 00:16:09 2019 +0000

    Daily bump.
    
    From-SVN: r271850

commit c5cb10b01d57065568580dbf5179b4477414a1fc
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Jun 2 00:16:13 2019 +0000

    Daily bump.
    
    From-SVN: r271841

commit 9e43082cd9740659b0b542b0884de9aa48572f72
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Sat Jun 1 07:41:06 2019 +0000

    Darwin - backport fix for PR bootstrap/89864
    
    2019-06-01  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline.
            2019-05-11  Iain Sandoe  <iain@sandoe.co.uk>
    
            PR bootstrap/89864
            * inclhack.def (darwin_ucred__Atomic): Do not supply test_text
            for wrap fixes.
            * fixincl.x: Regenerated.
    
            Backport from mainline.
            2019-04-18  Erik Schnetter  <schnetter@gmail.com>
                        Jakub Jelinek  <jakub@redhat.com>
                        Iain Sandoe  <iain@sandoe.co.uk>
    
            PR bootstrap/89864
            * inclhack.def (darwin_ucred__Atomic): New, work around _Atomic keyword
            use in headers included by C++.
            * fixincl.x: Regenerated.
    
    From-SVN: r271834

commit ab2d66a83dbc23b87d4326da1b9015dae1f9a8e1
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Sat Jun 1 07:27:19 2019 +0000

    Darwin, backport fix for powerpc-darwin long double symbol exports.
    
    During 8.x, the rs6000 target-specific mangling was reorganised which uncovered
    a long-standing bug in Darwin’s mangling for ‘IBM’ long double. Now the symbols
    are correctly mangled, and we end up with a bunch of test link fails.
    
    This patch adds the necessary subset of the Linux long double exports to Darwin’s
    export table.
    
    2019-06-01   Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline
            2018-12-22 Iain Sandoe <iain@sandoe.co.uk>
    
            * /config/os/bsd/darwin/ppc-extra.ver: Append long double symbols.
    
    From-SVN: r271833

commit 0de30e04af9d60ef00e1cb2ffb79e6d70ae3593c
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Jun 1 00:16:09 2019 +0000

    Daily bump.
    
    From-SVN: r271830

commit 335ab2c839f2d2ac62e66b0096f257d75153a34a
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri May 31 00:16:09 2019 +0000

    Daily bump.
    
    From-SVN: r271793

commit 14af4afe89f71ca3ba08f4501972f2fde7fb5d37
Author: Marek Polacek <polacek@redhat.com>
Date:   Thu May 30 12:21:11 2019 +0000

    * lang.opt (ftail-call-workaround): Fix a typo.
    
    From-SVN: r271779

commit af2b7d1c17b207c27e62884e1cf2be658709cb5e
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Thu May 30 11:36:25 2019 +0100

    Fix typo in libstdc++ documentation
    
            * doc/xml/manual/status_cxx2017.xml: Fix typo in documentation of
            implementation-defined support for [fs.conform.9945].
            * doc/html/*: Regenerate.
    
    From-SVN: r271776

commit c39e37a5396d2ec51052404989741285e4d21102
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu May 30 11:35:27 2019 +0200

    tree-predcom.c (is_inv_store_elimination_chain): Fix a typo - lenght to length.
    
            * tree-predcom.c (is_inv_store_elimination_chain): Fix a typo - lenght
            to length.
    
            * lang.opt (ftail-call-workaround=): Fix a typo - lenghts to lengths.
    
    From-SVN: r271772

commit abe9b3a002798dbb16310e4cccbe297573d0d782
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu May 30 00:16:10 2019 +0000

    Daily bump.
    
    From-SVN: r271758

commit 7fa35a4b9bb13c4b7e326156dc9bf64e3795b0ae
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Wed May 29 18:02:56 2019 +0200

    re PR fortran/90329 (Incompatibility between gfortran and C lapack calls)
    
            PR fortran/90329
            * lto-streamer.h (LTO_minor_version): Bump to 2.
    
            Backported from mainline
            2019-05-29  Jakub Jelinek  <jakub@redhat.com>
    
            PR fortran/90329
            * lang.opt (fbroken-callers): Remove.
            (ftail-call-workaround, ftail-call-workaround=): New options.
            * gfortran.h (struct gfc_namespace): Add implicit_interface_calls.
            * interface.c (gfc_procedure_use): Set implicit_interface_calls
            for calls to implicit interface procedures.
            * trans-decl.c (create_function_arglist): Use flag_tail_call_workaround
            instead of flag_broken_callers.  If it is not 2, also require
            sym->ns->implicit_interface_calls.
            * invoke.texi (fbroken-callers): Remove documentation.
            (ftail-call-workaround, ftail-call-workaround=): Document.
    
            2019-05-19  Thomas Koenig  <tkoenig@gcc.gnu.org>
    
            PR fortran/90329
            * invoke.texi: Document -fbroken-callers.
            * lang.opt: Add -fbroken-callers.
            * trans-decl.c (create_function_arglist): Only set
            DECL_HIDDEN_STRING_LENGTH if flag_broken_callers is set.
    
            2019-05-16  Jakub Jelinek  <jakub@redhat.com>
    
            PR fortran/90329
            * tree-core.h (struct tree_decl_common): Document
            decl_nonshareable_flag for PARM_DECLs.
            * tree.h (DECL_HIDDEN_STRING_LENGTH): Define.
            * calls.c (expand_call): Don't try tail call if caller
            has any DECL_HIDDEN_STRING_LENGTH PARM_DECLs that are or might be
            passed on the stack and callee needs to pass any arguments on the
            stack.
            * tree-streamer-in.c (unpack_ts_decl_common_value_fields): Use
            else if instead of series of mutually exclusive ifs.  Handle
            DECL_HIDDEN_STRING_LENGTH for PARM_DECLs.
            * tree-streamer-out.c (pack_ts_decl_common_value_fields): Likewise.
    
            * trans-decl.c (create_function_arglist): Set
            DECL_HIDDEN_STRING_LENGTH on hidden string length PARM_DECLs if
            len is constant.
    
    From-SVN: r271744

commit 37e2f58bf189d0d1231c5dd3741d776482e792ab
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed May 29 00:16:10 2019 +0000

    Daily bump.
    
    From-SVN: r271724

commit a822a692723b7cc6d0f81e31703727f89c147ac6
Author: John David Anglin <danglin@gcc.gnu.org>
Date:   Tue May 28 23:31:25 2019 +0000

    pa.c (hppa_profile_hook): Remove offset adjustment.
    
            * config/pa/pa.c (hppa_profile_hook): Remove offset adjustment.
    
    From-SVN: r271722

commit 3b1bfd6d86582d8c9d77c2ca2843d1d426dcfaf1
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Tue May 28 17:08:51 2019 +0100

    Fix check for root-directory path and add tests
    
            PR libstdc++/90634
            * src/filesystem/path.cc (path::_M_split_cmpts()): Fix check for "/".
            * testsuite/27_io/filesystem/path/construct/90634.cc: New test.
            * testsuite/experimental/filesystem/path/construct/90634.cc: New test.
    
    From-SVN: r271712

commit 9a679dbcfe2b2f8c642971306ef68111bf4b8b6c
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Tue May 28 15:57:35 2019 +0100

    PR libstdc++/90634 reduce allocations in filesystem::path construction
    
            PR libstdc++/90634
            * include/bits/fs_path.h (path::path(path&&)): Only call
            _M_split_cmpts() for a path with multiple components.
            (path::_S_is_dir_sep()): Add missing 'static' keyword to function.
            * include/experimental/bits/fs_path.h: Likewise.
            * src/filesystem/path.cc (path::_M_split_cmpts()): Count number of
            components and reserve space in vector. Return early when there is
            only one component.
            * src/filesystem/std-path.cc (path::_M_split_cmpts()): Likewise.
    
    From-SVN: r271710

commit 8b3d64b55c16f44947068817cff33a1052abc107
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Tue May 28 08:06:48 2019 +0000

    trans.c (walk_nesting_tree): New static function.
    
    2019-05-28  Eric Botcazou  <ebotcazou@adacore.com>
    
            * gcc-interface/trans.c (walk_nesting_tree): New static function.
            (finalize_nrv): Use it to walk the entire nesting tree.
    
    From-SVN: r271687

commit c10ba1e61c3c23e5644039e39202a42c4dae0eb8
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue May 28 00:16:12 2019 +0000

    Daily bump.
    
    From-SVN: r271675

commit c8500b6313ea644bffb6ae196dfb554244d0fade
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Mon May 27 16:15:54 2019 +0000

    dwarf2out.c (resolve_args_picking_1): Deal with DW_OP_GNU_addr_index and DW_OP_GNU_const_index opcodes.
    
            * dwarf2out.c (resolve_args_picking_1): Deal with DW_OP_GNU_addr_index
            and DW_OP_GNU_const_index opcodes.
    
    From-SVN: r271666

commit d43c66249ec4c432e16a29cecfe48ab96704f223
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Mon May 27 11:13:23 2019 +0000

    utils.c (maybe_pad_type): Issue the warning for the specific case of component types preferably.
    
            * gcc-interface/utils.c (maybe_pad_type): Issue the warning for the
            specific case of component types preferably.
    
    From-SVN: r271657

commit bfb6d4f2762dd2d70d18924f11ce92efc963b59b
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Mon May 27 10:26:24 2019 +0000

    trans.c (Call_to_gnu): Use the unpadded type when putting back an intermediate conversion the type of...
    
            * gcc-interface/trans.c (Call_to_gnu): Use the unpadded type when
            putting back an intermediate conversion the type of the actuals.
    
    From-SVN: r271649

commit 01afc07837152070452e7e5e1536bc39bf10f7f3
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon May 27 00:16:11 2019 +0000

    Daily bump.
    
    From-SVN: r271642

commit 9d5c0a94d14a0532ab9186cbc8a3b5ace6218c34
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun May 26 00:16:08 2019 +0000

    Daily bump.
    
    From-SVN: r271625

commit fd08b6065d3a3bf472cfb853dd9c9736fd99c13d
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat May 25 00:16:10 2019 +0000

    Daily bump.
    
    From-SVN: r271616

commit e4fef445e6e258182b37f8c86629dcda7ffaec69
Author: John David Anglin <danglin@gcc.gnu.org>
Date:   Fri May 24 23:17:09 2019 +0000

    re PR target/90530 (Invalid SUBREG insn generated by reload)
    
            PR target/90530
            * config/pa/pa.c (pa_can_change_mode_class): Accept mode changes from
            DImode to SImode in floating-point registers on 64-bit target.
            * config/pa/pa.md (umulsidi3): Change nonimmediate_operand to
            register_operand in xmpyu patterns.
    
    From-SVN: r271613

commit be6f2307c45d2c903a45c3585bddf9eb40efe2fa
Author: Martin Liska <mliska@suse.cz>
Date:   Fri May 24 09:44:15 2019 +0200

    Backport r271548
    
    2019-05-24  Martin Liska  <mliska@suse.cz>
    
            Backport from mainline
            2019-05-23  Martin Liska  <mliska@suse.cz>
    
            PR sanitizer/90570
            * gimplify.c (gimplify_target_expr): Skip TREE_STATIC target
            expression similarly to gimplify_decl_expr.
    2019-05-24  Martin Liska  <mliska@suse.cz>
    
            Backport from mainline
            2019-05-23  Martin Liska  <mliska@suse.cz>
    
            PR sanitizer/90570
            * g++.dg/asan/pr90570.C: New test.
    
    From-SVN: r271594

commit d8cd3d7707a138a4da0259f0d13b284abbbc8abf
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri May 24 00:16:17 2019 +0000

    Daily bump.
    
    From-SVN: r271586

commit c743bb6abdef09e58b15bf3d330d5cc71ddeb5b4
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Thu May 23 16:34:25 2019 +0100

    PR libstdc++/89466 avoid slow xsltproc command in configure
    
    Certain broken versions of xsltproc ignore the --nonet option and will
    attempt to fetch the docbook stylesheet from the WWW when it isn't in
    the local XML catalog.
    
    This patch checks for the local stylesheet directory first, and doesn't
    use xsltproc if no local stylesheets are found. Checking for the local
    directory is done using xmlcatalog if available, only checking the
    hardcoded list of directories if xmlcatalog fails. The right directory
    for Suse is added to the hardcoded list.
    
    This should avoid doing an xsltproc check that would need to download
    the stylesheet, so no network connection is made even if a broken
    xsltproc is present.
    
    Backport from mainline
    2019-02-27  Jonathan Wakely  <jwakely@redhat.com>
    
            PR libstdc++/89466
            * acinclude.m4 (GLIBCXX_CONFIGURE_DOCBOOK): Reorder check for local
            stylesheet directories before check for xsltproc. Try to use
            xmlcatalog to find local stylesheet directory before trying hardcoded
            paths. Add path used by suse to hardcoded paths. Adjust xsltproc
            check to look for the same stylesheet as doc/Makefile.am uses. Don't
            use xsltproc if xmlcatalog fails to find a local stylesheet.
            * configure.ac: Check for xmlcatalog.
            * Makefile.in: Regenerate.
            * configure: Likewise.
            * doc/Makefile.in: Likewise.
            * include/Makefile.in: Likewise.
            * libsupc++/Makefile.in: Likewise.
            * po/Makefile.in: Likewise.
            * python/Makefile.in: Likewise.
            * src/Makefile.in: Likewise.
            * src/c++11/Makefile.in: Likewise.
            * src/c++17/Makefile.in: Likewise.
            * src/c++98/Makefile.in: Likewise.
            * src/filesystem/Makefile.in: Likewise.
            * testsuite/Makefile.in: Likewise.
    
    From-SVN: r271568

commit fada20c5d71281f9219da335e41246a862eacacc
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Thu May 23 16:06:30 2019 +0100

    Regenerate libstdc++ docs
    
            * doc/html/*: Regenerate.
    
    From-SVN: r271563

commit 5ac04258f50fb4c5e2e82d86868bf239c67d50e0
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Thu May 23 15:49:21 2019 +0100

    Make any_cast compare typeinfo as well as function pointers
    
    It's possible for the function pointer comparison to fail even though
    the type is correct, because the function could be defined multiple
    times with different addresses when shared libraries are in use.
    
    Retain the function pointer check for the common case where the check
    succeeds, but compare typeinfo (if RTTI is enabled) if the first check
    fails.
    
    Backport from mainline
    2019-05-23  Jonathan Wakely  <jwakely@redhat.com>
    
            * include/experimental/any (__any_caster): Use RTTI if comparing
            addresses fails, to support non-unique addresses in shared libraries.
            * include/std/any (__any_caster): Likewise.
            * testsuite/experimental/any/misc/any_cast_neg.cc: Use 0 for dg-error
            line number.
    
    From-SVN: r271562

commit 12af16891928649a432213197c00c3c200e64903
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Thu May 23 15:49:15 2019 +0100

    PR libstdc++/90220 Fix any_cast for non-object types
    
    Backport from mainline
    2019-04-24  Jonathan Wakely  <jwakely@redhat.com>
    
            PR libstdc++/90220 (partial)
            * include/std/any (any_cast<T>(any*), any_cast<T>(const any*)): Do
            not attempt ill-formed static_cast to pointers to non-object types.
            * testsuite/20_util/any/misc/any_cast.cc: Test std::any_cast with
            function types.
    
    Backport from mainline
    2019-04-24  Jonathan Wakely  <jwakely@redhat.com>
    
            PR libstdc++/90220
            * include/std/any (__any_caster): Use remove_cv_t instead of decay_t.
            Avoid a runtime check for types that can never be stored in std::any.
            * testsuite/20_util/any/misc/any_cast.cc: Test std::any_cast with
            array types.
    
    Backport from mainline
    2019-05-23  Jonathan Wakely  <jwakely@redhat.com>
    
            PR libstdc++/90220
            * include/experimental/any (__any_caster): Constrain to only be
            callable for object types. Use remove_cv_t instead of decay_t.
            If the type decays or isn't copy constructible, compare the manager
            function to a dummy specialization.
            (__any_caster): Add overload constrained for non-object types.
            (any::_Manager_internal<_Op>): Add dummy specialization.
            * testsuite/experimental/any/misc/any_cast.cc: Test function types
            and array types.
    
    From-SVN: r271561

commit fd0dc80bf5b6bc57ea27842772d5b27240a0a824
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Thu May 23 15:49:10 2019 +0100

    Fix missing or incorrect feature test macros
    
    Backported from mainline
    2019-01-15  Jonathan Wakely  <jwakely@redhat.com>
    
            * doc/xml/manual/status_cxx2017.xml: Document P0032R3 and P0307R2
            status.
            * include/bits/stl_uninitialized.h (__cpp_lib_raw_memory_algorithms):
            Define.
            * include/std/any (__cpp_lib_any): Define as 201606L, because P0032R3
            changes are supported.
            * include/std/optional (__cpp_lib_optional): Likewise.
            * include/std/variant (__cpp_lib_variant): Likewise.
            * libsupc++/exception (__cpp_lib_uncaught_exceptions): Define as long
            integer.
    
    From-SVN: r271560

commit 7712ecd5093d24183384675a1e929be46ee74577
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Thu May 23 09:51:39 2019 +0000

    * gnat.dg/opt78.ad[sb]: New test.
    
    From-SVN: r271547

commit 9a84283a0c9bbed255baf43e4d63513007061988
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu May 23 00:16:08 2019 +0000

    Daily bump.
    
    From-SVN: r271532

commit 980c8afc0961da4b4567a5abe85b6048d501a1ad
Author: Uros Bizjak <ubizjak@gmail.com>
Date:   Thu May 23 00:50:39 2019 +0200

    backport: re PR target/90547 (ICE in gen_lowpart_general, at rtlhooks.c:63)
    
            Backported from mainline
            2019-05-21  Uroš Bizjak  <ubizjak@gmail.com>
    
            * config/i386/cpuid.h (__cpuid): For 32bit targets, zero
            %ebx and %ecx bafore calling cpuid with leaf 1 or
            non-constant leaf argument.
    
            2019-05-21  Uroš Bizjak  <ubizjak@gmail.com>
    
            PR target/90547
            * config/i386/i386.md (anddi_1 to andsi_1_zext splitter):
            Avoid calling gen_lowpart with CONST operand.
    
    testsuite/ChangeLog:
    
            Backported from mainline
            2019-05-21  Uroš Bizjak  <ubizjak@gmail.com>
    
            PR target/90547
            * gcc.target/i386/pr90547.c: New test.
    
    From-SVN: r271529

commit ec4f305a02b2c8ee7dc22fae85a606d896b69406
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Wed May 22 07:42:52 2019 +0000

    backport: re PR c++/85400 (invalid Local Dynamic TLS relaxation for symbol defined in method)
    
    c-family/
            Backport from mainline
            2018-05-10  Eric Botcazou  <ebotcazou@adacore.com>
    
            PR c++/85400
            * c-attribs.c (handle_visibility_attribute): Do not set no_add_attrs.
    cp/
            Backport from mainline
            2018-05-10  Eric Botcazou  <ebotcazou@adacore.com>
    
            PR c++/85400
            * decl2.c (adjust_var_decl_tls_model): New static function.
            (comdat_linkage): Call it on a variable.
            (maybe_make_one_only): Likewise.
    
    From-SVN: r271502

commit f1f1339119666f70a1354bbf70bd4325d815319f
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed May 22 00:16:15 2019 +0000

    Daily bump.
    
    From-SVN: r271494

commit ce0d4b937e4f2a2551df1b33947d9b447f109df6
Author: Sebastian Huber <sebastian.huber@embedded-brains.de>
Date:   Tue May 21 04:43:06 2019 +0000

    [RTEMS] Change multilibs for ARM
    
    Account for Cortex-M3 Errata 602117.  The -mfix-cortex-m3-ldrd option is
    enabled by default, if -mcpu=cortex-m3 is used.
    
    gcc/
    
            * config/arm/t-rtems: Replace ARMv7-M multilibs with Cortex-M
            multilibs.
    
    From-SVN: r271453

commit 0203587e26b4178a1e99f61a4a8197dd3c7185ff
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue May 21 00:16:09 2019 +0000

    Daily bump.
    
    From-SVN: r271447

commit fb723db24423f851edb3735b6c4174f0e0f7d1e9
Author: Jeff Law <law@redhat.com>
Date:   Mon May 20 13:10:27 2019 -0600

    mips.c (mips_dwarf_frame_reg_mode): Replace TARGET_FLOAT64 with !TARGET_FLOAT32, thus handling both fp64 and fpxx modes.
    
            * config/mips/mips.c (mips_dwarf_frame_reg_mode): Replace
            TARGET_FLOAT64 with !TARGET_FLOAT32, thus handling both fp64
            and fpxx modes.
    
            * g++.dg/eh/o32-fp.C: New.
            * gcc.target/mips/dwarfregtable-1.c: New.
            * gcc.target/mips/dwarfregtable-2.c: New.
            * gcc.target/mips/dwarfregtable-3.c: New.
            * gcc.target/mips/dwarfregtable-4.c: New.
            * gcc.target/mips/dwarfregtable.h: New.
    
    From-SVN: r271434

commit b29058e84b0f4ec6b9ef8a86a26e52755a5d4f9d
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Mon May 20 14:04:39 2019 +0100

    PR c++/90532 Ensure __is_constructible(T[]) is false
    
    An array of an unknown bound is an incomplete type, so no object of such
    a type can be constructed. This means __is_constructible should always
    be false for an array of unknown bound.
    
    This patch also changes the std::is_default_constructible trait to use
    std::is_constructible, which now gives the right answer for arrays of
    unknown bound.
    
    gcc/cp:
    
            Backported from mainline
            2019-05-20  Jonathan Wakely  <jwakely@redhat.com>
    
            PR c++/90532 Ensure __is_constructible(T[]) is false
            * method.c (is_xible_helper): Return error_mark_node for construction
            of an array of unknown bound.
    
    gcc/testsuite:
    
            Backported from mainline
            2019-05-20  Jonathan Wakely  <jwakely@redhat.com>
    
            PR c++/90532 Ensure __is_constructible(T[]) is false
            * g++.dg/ext/90532.C: New test.
    
    libstdc++-v3:
    
            Backported from mainline
            2019-05-20  Jonathan Wakely  <jwakely@redhat.com>
    
            PR c++/90532 Ensure __is_constructible(T[]) is false
            * include/std/type_traits (__do_is_default_constructible_impl)
            (__is_default_constructible_atom, __is_default_constructible_safe):
            Remove.
            (is_default_constructible): Use is_constructible.
            * testsuite/20_util/is_constructible/value.cc: Check int[] case.
            * testsuite/20_util/is_default_constructible/value.cc: Likewise.
            * testsuite/20_util/is_trivially_constructible/value.cc: Likewise.
            * testsuite/20_util/is_trivially_default_constructible/value.cc:
            Likewise.
    
    From-SVN: r271418

commit f89e5906916b416fdab3d21057228c03d4666329
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon May 20 00:16:37 2019 +0000

    Daily bump.
    
    From-SVN: r271392

commit 12d6f357491e0ff527ed62f72e9b70c8db736dfa
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun May 19 00:16:08 2019 +0000

    Daily bump.
    
    From-SVN: r271373

commit 176bb672f027738c4690aba395704bab7eeeebe8
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat May 18 00:16:08 2019 +0000

    Daily bump.
    
    From-SVN: r271366

commit f023af49cc387e07dd17b0479f949bb36ed2b999
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri May 17 00:16:08 2019 +0000

    Daily bump.
    
    From-SVN: r271305

commit 3d7f8f3bb17c88717097efb3bb9a020e5ebc113e
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Fri May 17 00:09:51 2019 +0100

    PR libstdc++/90299 make filesystem::absolute overloads consistent
    
    In this implementation it is an error to pass the empty path to absolute,
    because the empty path doesn't represent any file in the filesystem so
    the function cannot meet its postcondition.
    
    Currently the absolute(const path&, error_code&) overload reports an
    error for the empty path, but using errc::no_such_file_or_directory, and
    the other overload does not report an error. This patch makes them
    consistntly report an errc::invalid_argument error for the empty path.
    
    Backport from mainline
    2019-05-04  Jonathan Wakely  <jwakely@redhat.com>
    
            PR libstdc++/90299
            * src/filesystem/std-ops.cc (absolute(const path&)): Report an error
            if the argument is an empty path.
            (absolute(const path&, error_code&)): Use invalid_argument as error
            code instead of no_such_file_or_directory.
            * testsuite/27_io/filesystem/operations/absolute.cc: Check handling
            of non-existent paths and empty paths with both overloads of absolute.
    
    From-SVN: r271302

commit 2e47e5b380794ca8c89fc67c8138ad527d0fff7c
Author: Kelvin Nilsen <kelvin@gcc.gnu.org>
Date:   Thu May 16 21:10:32 2019 +0000

    backport: re PR middle-end/89765 (Multiple problems with vec-insert implementation on PowerPC)
    
    gcc/ChangeLog:
    
    2019-05-16  Kelvin Nilsen  <kelvin@gcc.gnu.org>
    
            Backport from mainline.
            2019-05-07  Kelvin Nilsen  <kelvin@gcc.gnu.org>
    
            PR target/89765
            * config/rs6000/rs6000-c.c (altivec_resolve_overloaded_builtin):
            In handling of ALTIVEC_BUILTIN_VEC_INSERT, use modular arithmetic
            to compute vector element selector for both constant and variable
            operands.
    
    gcc/testsuite/ChangeLog:
    
    2019-05-16  Kelvin Nilsen  <kelvin@gcc.gnu.org>
    
            Backport from mainline.
            2019-05-07  Kelvin Nilsen  <kelvin@gcc.gnu.org>
    
            PR target/89765
            * gcc.target/powerpc/pr89765-mc.c: New test.
            * gcc.target/powerpc/vsx-builtin-10c.c: New test.
            * gcc.target/powerpc/vsx-builtin-10d.c: New test.
            * gcc.target/powerpc/vsx-builtin-11c.c: New test.
            * gcc.target/powerpc/vsx-builtin-11d.c: New test.
            * gcc.target/powerpc/vsx-builtin-12c.c: New test.
            * gcc.target/powerpc/vsx-builtin-12d.c: New test.
            * gcc.target/powerpc/vsx-builtin-13c.c: New test.
            * gcc.target/powerpc/vsx-builtin-13d.c: New test.
            * gcc.target/powerpc/vsx-builtin-14c.c: New test.
            * gcc.target/powerpc/vsx-builtin-14d.c: New test.
            * gcc.target/powerpc/vsx-builtin-15c.c: New test.
            * gcc.target/powerpc/vsx-builtin-15d.c: New test.
            * gcc.target/powerpc/vsx-builtin-16c.c: New test.
            * gcc.target/powerpc/vsx-builtin-16d.c: New test.
            * gcc.target/powerpc/vsx-builtin-17c.c: New test.
            * gcc.target/powerpc/vsx-builtin-17d.c: New test.
            * gcc.target/powerpc/vsx-builtin-18c.c: New test.
            * gcc.target/powerpc/vsx-builtin-18d.c: New test.
            * gcc.target/powerpc/vsx-builtin-19c.c: New test.
            * gcc.target/powerpc/vsx-builtin-19d.c: New test.
            * gcc.target/powerpc/vsx-builtin-20c.c: New test.
            * gcc.target/powerpc/vsx-builtin-20d.c: New test.
            * gcc.target/powerpc/vsx-builtin-9c.c: New test.
            * gcc.target/powerpc/vsx-builtin-9d.c: New test.
    
    From-SVN: r271297

commit 79f52d02405983dd46d651e3f59c241bbdda3661
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu May 16 00:16:10 2019 +0000

    Daily bump.
    
    From-SVN: r271273

commit 18116ab1480baf7996d112fafa39b2052e06861a
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Wed May 15 21:27:50 2019 +0100

    Fix filesystem::path tests
    
    The root_path.cc test had some debugging macros left in accidentally, so
    didn't FAIL correctly if an assertion failed.
    
    Backport from mainline
    2019-04-30  Jonathan Wakely  <jwakely@redhat.com>
    
            * testsuite/27_io/filesystem/path/decompose/root_path.cc: Remove
            macros accidentally left in.
    
    From-SVN: r271266

commit 18189c83cb209d84ca0393ccdc7f09a1c55ab9f2
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Wed May 15 21:27:45 2019 +0100

    PR libstdc++/90454.cc path construction from void*
    
    Make the filesystem::path constructors SFINAE away for void* arguments,
    instead of giving an error due to iterator_traits<void*>::reference.
    
    Backport from mainline
    2019-05-13  Jonathan Wakely  <jwakely@redhat.com>
    
            PR libstdc++/90454.cc path construction from void*
            * include/bits/fs_path.h (path::_Path): Use remove_pointer so that
            pointers to void are rejected as well as void.
            * include/experimental/bits/fs_path.h (path::_Path): Likewise.
            * testsuite/27_io/filesystem/path/construct/80762.cc: Also check
            pointers to void.
            * testsuite/experimental/filesystem/path/construct/80762.cc: Likewise.
    
    From-SVN: r271265

commit 1adb7de48a7ca351b579184084740180b540157c
Author: David Edelsohn <dje@gcc.gnu.org>
Date:   Wed May 15 13:06:22 2019 -0400

    Correct ChangeLog formatting.
    
    From-SVN: r271256

commit b6c95858ab70a6bbe2cfa227369326e70b8b343c
Author: David Edelsohn <dje.gcc@gmail.com>
Date:   Wed May 15 17:01:42 2019 +0000

    re PR target/61976 (aix64: Data corruption in struct passed by value)
    
            * xcoffout.h (xcoff_private_rodata_section_name): Declare.
            * xcoffout.c (xcoff_private_rodata_section_name): Define.
            * config/rs6000/rs6000.c (rs6000_xcoff_asm_init_sections): Create
            read_only_private_data_section using coff_private_rodata_section_name.
            (rs6000_xcoff_file_start): Generate coff_private_rodata_section_name.
    
            PR target/61976
            * config/rs6000/rs6000.c (rs6000_function_arg): Don't pass aggregates
            in FPRs on AIX. Ensure type is non-NULL.
            (rs6000_arg_partial_bytes): Same.
    
    From-SVN: r271255

commit e76abfeb225ffe54140b5d143c13bde0c9ab6c05
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed May 15 00:16:08 2019 +0000

    Daily bump.
    
    From-SVN: r271195

commit 59fb40a4cb653c695e0fa2637bc2f118f364c595
Author: Martin Liska <mliska@suse.cz>
Date:   Tue May 14 11:12:47 2019 +0200

    Backport r271117
    
    2019-05-14  Martin Liska  <mliska@suse.cz>
    
            Backport from mainline
            2019-05-13  Martin Liska  <mliska@suse.cz>
    
            PR gcov-profile/90380
            * gcov.c (handle_cycle): Do not support zero cycle count,
            it should not be possible.
            (path_contains_zero_cycle_arc): New function.
            (circuit): Ignore zero cycle arc counts.
    
    From-SVN: r271155

commit a24142c579041f2329c07397b59d8fb8e5977270
Author: Martin Liska <mliska@suse.cz>
Date:   Tue May 14 11:12:35 2019 +0200

    Backport r271116
    
    2019-05-14  Martin Liska  <mliska@suse.cz>
    
            Backport from mainline
            2019-05-13  Martin Liska  <mliska@suse.cz>
    
            PR gcov-profile/90380
            * gcov.c (enum loop_type): Remove the enum and
            the operator.
            (handle_cycle): Assert that we should not reach
            a negative count.
            (circuit): Use loop_found instead of a tri-state loop_type.
            (get_cycles_count): Do not handle NEGATIVE_LOOP as it can't
            happen.
    
    From-SVN: r271154

commit a1722fe6afd57485e0ea80e96cbd9625a494aa4d
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue May 14 00:16:08 2019 +0000

    Daily bump.
    
    From-SVN: r271142

commit 21172ba4192c3866aa4fa7f0b2d76214fc73d2ac
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon May 13 00:16:15 2019 +0000

    Daily bump.
    
    From-SVN: r271113

commit 7ba54f21af045a9bc7dfcdcd9439dab93ca027e6
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun May 12 00:16:11 2019 +0000

    Daily bump.
    
    From-SVN: r271103

commit 1ead9c4f779b4fda504c69da5954d2fd32c7735e
Author: Andreas Tobler <andreast@gcc.gnu.org>
Date:   Sat May 11 22:56:33 2019 +0200

    backport: freebsd64.h: Add bits for 32-bit multilib support.
    
    2019-05-11  Andreas Tobler <andreast@gcc.gnu.org>
    
            Backport from mainline.
            2019-04-25  Andreas Tobler  <andreast@gcc.gnu.org>
    
            * config/i386/freebsd64.h: Add bits for 32-bit multilib support.
            * config/i386/t-freebsd64: New file.
            * config.gcc: Add the t-freebsd64 for multilib support.
    
    From-SVN: r271100

commit 1bb96fc9b9d0ada740afd05664b167f12dcbf976
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Sat May 11 12:38:51 2019 +0100

    PR libstdc++/81266 fix std::thread::native_handle_type test
    
    The test uses remove_pointer because in most cases native_handle_type is
    a pointer to the actual type that the C++ class contains. However, for
    std::thread, native_handle_type is the same type as the type contained
    in std::thread, and so remove_pointer is not needed. On targets where
    pthread_t is a pointer type remove_pointer<native_handle_type> is not a
    no-op, instead it transforms pthread_t and causes the test to fail.
    
    The fix is to not apply remove_pointer when testing std::thread.
    
    Backport from mainline
    2019-05-10  Jonathan Wakely  <jwakely@redhat.com>
    
            PR libstdc++/81266
            * testsuite/util/thread/all.h: Do not use remove_pointer for
            std::thread::native_handle_type.
    
    From-SVN: r271095

commit 9d8e87e17cd29b0dde08bd722c75a5af97d7a61d
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat May 11 00:16:11 2019 +0000

    Daily bump.
    
    From-SVN: r271085

commit 413947854a0e5757c95309268370afcd090e19be
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri May 10 00:16:08 2019 +0000

    Daily bump.
    
    From-SVN: r271049

commit 047c34ae1a2f61ba049b238694ced12b35a5f734
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu May 9 00:16:09 2019 +0000

    Daily bump.
    
    From-SVN: r271024

commit f4957b80ea18af76da497244623741419007d2f5
Author: Kelvin Nilsen <kelvin@gcc.gnu.org>
Date:   Wed May 8 22:23:11 2019 +0000

    backport: re PR target/89424 (__builtin_vec_ext_v1ti (v, i) results in ICE with variable i (RS6000))
    
    gcc/ChangeLog:
    
    2019-05-08  Kelvin Nilsen  <kelvin@gcc.gnu.org>
    
            Backport from mainline.
            2019-05-06  Kelvin Nilsen  <kelvin@gcc.gnu.org>
    
            PR target/89424
            * config/rs6000/rs6000.c (rs6000_expand_vector_extract): Add
            handling of V1TImode.
    
    gcc/testsuite/ChangeLog:
    
    2019-05-08  Kelvin Nilsen  <kelvin@gcc.gnu.org>
    
            Backport from mainline.
            2019-05-06  Kelvin Nilsen  <kelvin@gcc.gnu.org>
    
            PR target/89424
            * gcc.target/powerpc/pr89424-0.c: New test.
            * gcc.target/powerpc/vsx-builtin-13a.c: Define macro PR89424 to
            enable testing of newly patched capability.
            * gcc.target/powerpc/vsx-builtin-13b.c: Likewise.
            * gcc.target/powerpc/vsx-builtin-20a.c: Likewise.
            * gcc.target/powerpc/vsx-builtin-20b.c: Likewise.
    
    From-SVN: r271020

commit 5a4374224c1278514ce3c4fc5d133d5880c5e973
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed May 8 00:16:09 2019 +0000

    Daily bump.
    
    From-SVN: r270995

commit 59ed6c58cf3ab87cb09557b3a2897e1cfad2f307
Author: Marek Polacek <polacek@redhat.com>
Date:   Tue May 7 16:29:39 2019 +0000

    PR c++/89876 - ICE with deprecated conversion.
    
            * call.c (convert_like_real): Only give warnings with tf_warning.
    
    From-SVN: r270974

commit 36069bc4ee1288f00971f4abd45034d7f4d79cee
Author: Marek Polacek <polacek@redhat.com>
Date:   Tue May 7 16:28:11 2019 +0000

    PR c++/89705 - ICE with reference binding with conversion function.
    
            * call.c (reference_binding): If the result of the conversion function
            is a prvalue of non-class type, use the cv-unqualified type.
    
    From-SVN: r270973

commit a417d6541582d183b6b283ab8f7c45a476d7c50a
Author: Marek Polacek <polacek@redhat.com>
Date:   Tue May 7 16:26:38 2019 +0000

    PR c++/89511 - ICE with using-declaration and unscoped enumerator.
    
            * parser.c (cp_parser_using_declaration): For an unscoped enum
            only use its context if it's not a function declaration.
    
    From-SVN: r270972

commit 6cf384a8fb2323cd5d66ea77d0c46527d3deba4a
Author: Marek Polacek <polacek@redhat.com>
Date:   Tue May 7 16:25:26 2019 +0000

    PR c++/89214 - ICE when initializing aggregates with bases.
    
            * typeck2.c (digest_init_r): Warn about object slicing instead of
            crashing.
    
    From-SVN: r270971

commit 2d972f43891e5e16aca371c733a38db2d4481450
Author: Marek Polacek <polacek@redhat.com>
Date:   Tue May 7 16:23:19 2019 +0000

    PR c++/88857 - ICE with value-initialization of argument in template.
    
            * call.c (convert_like_real): Don't call build_value_init in template.
    
    From-SVN: r270970

commit 2a67be078a491a3f28897af53881b0c872669562
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Tue May 7 16:46:44 2019 +0100

    PR libstdc++/89102 fix common_type<> and common_type<T> specializations
    
    This is a partial implementation of the revised std::common_type rules
    from P0435R1.
    
    Backport from mainline
    2019-02-06  Jonathan Wakely  <jwakely@redhat.com>
    
            PR libstdc++/89102 (partial)
            * include/std/type_traits (common_type<>): Define.
            (common_type<T>): Derive from common_type<T, T>.
            * testsuite/20_util/common_type/requirements/explicit_instantiation.cc:
            Test zero-length template argument list.
            * testsuite/20_util/common_type/requirements/sfinae_friendly_1.cc:
            Test additional single argument cases.
            * testsuite/20_util/common_type/requirements/sfinae_friendly_2.cc:
            Adjust expected error.
    
    From-SVN: r270968

commit ea6f0ec4f3b9408762ed8131bf479ed82b8d580a
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Tue May 7 16:46:40 2019 +0100

    PR libstdc++/88740 Print assertion messages to stderr
    
    Backport from mainline
    2019-01-22  Jonathan Wakely  <jwakely@redhat.com>
    
            PR libstdc++/88740
            * testsuite/util/testsuite_hooks.h [stderr] (VERIFY): Use fprintf to
            write to stderr instead of using printf.
    
    From-SVN: r270967

commit 35511d3a3603f4a050cf0eee8ba4df46fca1704e
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Tue May 7 16:46:36 2019 +0100

    PR libstdc++/90165 constrain variant(T&&) constructor
    
    Backport from mainline
    2019-04-23  Jonathan Wakely  <jwakely@redhat.com>
    
            PR libstdc++/90165
            * include/std/variant (variant::__is_in_place_tag)
            (variant::__not_in_place_tag): New helpers for variant(T&&)
            constructor constraint.
            (variant::variant(T&&)): Use __not_in_place_tag in constraints.
            * testsuite/20_util/variant/compile.cc: Check variant(T&&) constructor
            isn't used for in_place_type or in_place_index arguments.
    
    From-SVN: r270966

commit f29f9dc77df43105021f857285ca48b06ae50fd0
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Tue May 7 16:46:32 2019 +0100

    PR libstdc++/90105 make forward_list::sort stable
    
    While testing the fix I also discovered that operator== assumes the
    elements are comparable with operator!= which is not required.
    
    Backport from mainline
    2019-04-17  Jonathan Wakely  <jwakely@redhat.com>
    
            PR libstdc++/90105
            * include/bits/forward_list.tcc (operator==): Do not use operator!= to
            compare elements.
            (forward_list<T, A>::sort(Comp)): When elements are equal take the one
            earlier in the list, so that sort is stable.
            * testsuite/23_containers/forward_list/operations/90105.cc: New test.
            * testsuite/23_containers/forward_list/comparable.cc: Test with
            types that meet the minimum EqualityComparable and LessThanComparable
            requirements. Remove irrelevant comment.
    
    From-SVN: r270965

commit 2eee445b3f971f4f5a46b89cb3ebe607ae635fe1
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Tue May 7 16:46:21 2019 +0100

    Add constexpr to std::optional::value_or(U&&)&&
    
    In C++1z drafts up to N4606 the constexpr keyword was missing from the
    detailed description of this function, despite being shown in the class
    synopsis.  That was fixed editorially for N4618, but our implementation
    was not corrected to match.
    
    Backport from mainline
    2019-04-17  Jonathan Wakely  <jwakely@redhat.com>
    
            * include/std/optional (optional::value_or(U&&) &&): Add missing
            constexpr specifier.
            * testsuite/20_util/optional/constexpr/observers/4.cc: Check value_or
            for disengaged optionals and rvalue optionals.
            * testsuite/20_util/optional/observers/4.cc: Likewise.
    
    From-SVN: r270964

commit 05a66966eac93b6080057267ef618c02f1afb4d5
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Tue May 7 16:46:17 2019 +0100

    Update documentation regarding bogus memory leaks in libstdc++
    
    Backport from mainline
    2019-04-10  Jonathan Wakely  <jwakely@redhat.com>
    
            * doc/xml/faq.xml: Add information about emergency EH pool.
            * doc/xml/manual/debug.xml: Update list of memory debugging tools.
            Move outdated information on mt_allocator to a separate section.
            * doc/xml/manual/evolution.xml: Clarify that GLIBCXX_FORCE_NEW
            doesn't affect the default allocator.
    
    From-SVN: r270963

commit 616922ab55f606c00892e952ae1af2257696257c
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Tue May 7 16:46:13 2019 +0100

    Fix directory_iterator handling of DT_UNKNOWN
    
    We need to handle DT_UNKNOWN earlier, not only during directory
    recursion, so that the cached file_type value in the directory_entry
    won't be used.
    
    Backport from mainline
    2019-04-05  Jonathan Wakely  <jwakely@redhat.com>
    
            * src/filesystem/std-dir.cc (_Dir::advance(bool, error_code&)): Handle
            d_type == DT_UNKNOWN immediately.
            (_Dir::should_recurse(bool, error_code&)): Remove file_type::unknown
            handling here.
            * testsuite/27_io/filesystem/iterators/caching.cc: New test.
    
    From-SVN: r270962

commit d4300b6170a2874db0e65895fadf63bc5cf902b6
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Tue May 7 16:46:09 2019 +0100

    Make filesystem::path safe for self assignment
    
    The standard says "If *this and p are the same object, has no effect."
    Previously we ended up clearing the path.
    
    Backport from mainline
    2019-04-05  Jonathan Wakely  <jwakely@redhat.com>
    
            * include/bits/fs_path.h (path::operator=(path&&)): Check for self
            assignment.
            * testsuite/27_io/filesystem/path/assign/copy.cc: Test self
            assignment.
    
    From-SVN: r270961

commit 0ca11bbb0835aa1d799800a35e74e661eb7bbd9a
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Tue May 7 16:46:05 2019 +0100

    PR libstdc++/85965 delay static assertions until types are complete
    
    The static assertions added for PR libstdc++/48101 were at class scope
    and so were evaluated too eagerly, when it might not be possible to
    determine whether the function objects are invocable with the key types.
    The problematic cases are where the key type is not known to be
    convertible to the argument type(s) of the function object until later,
    after a type has been completed. Specifically, if the key type is a
    pointer to a derived class and the function object's argument type is a
    pointer to a base class, then the derived-to-base conversion is only
    valid once the derived type is complete.
    
    By moving the static assertions to the destructor they will only be
    evaluated when the destructor is instantiated, at which point whether
    the key type can be passed to the function object should be knowable.
    The ideal place to do the checks would be only when the function objects
    are actually invoked, but that would mean adding the checks in numerous
    places, so the destructor is used instead.
    
    The tests need to be adjusted because the "required from here" line is
    now the location of the destructor, not the point of instantiation in
    the test file. For the map and multimap tests which check two
    specializations, the dg-error matching the assertion text matches both
    cases. Also check the diagnostic output for the template arguments, to
    ensure both specializations trigger the assertion.
    
    Backport from mainline
    2019-03-26  Jonathan Wakely  <jwakely@redhat.com>
    
            PR libstdc++/85965
            * include/bits/hashtable.h (_Hashtable): Move static assertions to
            destructor so they are not evaluated until the _Key type is complete.
            * include/bits/stl_tree.h (_Rb_tree): Likewise.
            * testsuite/23_containers/set/85965.cc: New test.
            * testsuite/23_containers/unordered_set/85965.cc: New test.
            * testsuite/23_containers/map/48101_neg.cc: Replace "here" errors
            with regexp matching the corresponding _Rb_tree specialization.
            * testsuite/23_containers/multimap/48101_neg.cc: Likewise.
            * testsuite/23_containers/multiset/48101_neg.cc: Remove "here" error.
            * testsuite/23_containers/set/48101_neg.cc: Likewise.
            * testsuite/23_containers/unordered_map/48101_neg.cc: Likewise.
            * testsuite/23_containers/unordered_multimap/48101_neg.cc: Likewise.
            * testsuite/23_containers/unordered_multiset/48101_neg.cc: Likewise.
            * testsuite/23_containers/unordered_set/48101_neg.cc: Likewise.
    
    From-SVN: r270960

commit 8b29272c632b25aaacb2d909d06b402331f52dc6
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Tue May 7 16:45:59 2019 +0100

    PR libstdc++/89629 fix _Hash_bytes for lengths > INT_MAX
    
    Backport from mainline
    2019-03-11  Jonathan Wakely  <jwakely@redhat.com>
    
            PR libstdc++/89629
            * libsupc++/hash_bytes.cc [__SIZEOF_SIZE_T__ == 8] (_Hash_bytes):
            Use correct type for len_aligned.
            * testsuite/20_util/hash/89629.cc: New test.
    
    From-SVN: r270959

commit f0d8a7ae10d92e9f8e39c34e222731dc0b14b460
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Tue May 7 16:45:55 2019 +0100

    Fix text of hyperlink in manual
    
    Backport from mainline
    2019-03-08  Jonathan Wakely  <jwakely@redhat.com>
    
            * doc/xml/manual/using.xml: Use link element instead of xref.
    
    From-SVN: r270958

commit 9b6b263e992803b7bc39b5eea6b70bbe183f0876
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Tue May 7 16:45:51 2019 +0100

    DR 2586 fix value category in uses-allocator checks
    
    Because uses-allocator construction is invariably done with a const
    lvalue the __uses_alloc helper should use a const lvalue for the
    is_constructible checks. Otherwise, it can detect that the type can be
    constructed from an rvalue, and then an error happens when a const
    lvalue is passed to the constructor instead.
    
    Prior to LWG DR 2586 scoped_allocator_adaptor incorrectly used an rvalue
    type in the is_constructible check and then used a non-const lvalue for
    the actual construction. The other components using uses-allocator
    construction (tuple and polymorphic_allocator) have always done so with
    a const lvalue allocator, although the use of __use_alloc in our
    implementation meant they behaved the same as scoped_allocator_adaptor
    and incorrectly used rvalues for the is_constructible checks.
    
    In C++20 the P0591R4 changes mean that all uses-allocator construction
    is defined in terms of the new uses_allocator_construction_args
    functions, which always use a const lvalue allocator.
    
    The changes in this patch ensure that the __use_alloc helper correctly
    matches the requirements in the standard, consistently using a const
    lvalue allocator for the is_constructible checks and the actual
    constructor arguments.
    
    Backport from mainline
    2019-02-14  Jonathan Wakely  <jwakely@redhat.com>
    
            * doc/xml/manual/intro.xml: Document LWG 2586 status.
            * include/bits/uses_allocator.h (__uses_alloc): Use const lvalue
            allocator type in is_constructible checks.
            * testsuite/20_util/scoped_allocator/69293_neg.cc: Adjust dg-error.
            * testsuite/20_util/scoped_allocator/dr2586.cc: New test.
            * testsuite/20_util/tuple/cons/allocators.cc: Add test using
            problematic type from LWG 2586 discussion.
            * testsuite/20_util/uses_allocator/69293_neg.cc: Adjust dg-error.
            * testsuite/20_util/uses_allocator/cons_neg.cc: Likewise.
    
    From-SVN: r270957

commit 65e8f1ec45b9d93e637bdd56796e9d83b0a2e55d
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Tue May 7 16:45:42 2019 +0100

    LWG 2537 fix priority_queue constructors to establish invariant
    
    This change is safe to make ion the branch, because the constructors
    are currently incorrect and unusable (unless the supplied container
    already contains a heap, in which case the new make_heap calls are
    redundant but harmless).
    
    Backport from mainline
    2019-02-14  Jonathan Wakely  <jwakely@redhat.com>
    
            * doc/xml/manual/intro.xml: Document LWG 2537 status.
            * include/bits/stl_queue.h
            (priority_queue(const Compare&, const Container&, const Alloc&))
            (priority_queue(const Compare&, Container&&, const Alloc&)): Call
            make_heap.
            * testsuite/23_containers/priority_queue/dr2537.cc: New test.
    
    From-SVN: r270956

commit 9a79b4ce266153f3e5dd4d4201f1685ee62c3792
Author: Rainer Orth <ro@CeBiTec.Uni-Bielefeld.DE>
Date:   Tue May 7 15:23:00 2019 +0000

    Fix make install-gcc-specs with empty GCC_SPECS_FILES
    
            * gcc-interface/Makefile.in (install-gcc-specs): Use foreach.
            Honor DESTDIR.
    
    From-SVN: r270949

commit a7f9080b0f9645dedac845d0fd6dfb435e4765a6
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue May 7 00:16:27 2019 +0000

    Daily bump.
    
    From-SVN: r270931

commit 86f34ccb3941d9c0a212b6aa41be28c25184a57a
Author: Richard Biener <rguenther@suse.de>
Date:   Mon May 6 12:40:18 2019 +0000

    re PR target/90359 (profiled bootstrap fails on aarch64-linux-gnu)
    
    2019-05-06  Richard Biener  <rguenther@suse.de>
    
            PR bootstrap/90359
            Backport from mainline
            2019-03-11  Jakub Jelinek  <jakub@redhat.com>
    
            PR middle-end/89655
            PR bootstrap/89656
            * vr-values.c (vr_values::update_value_range): If
            old_vr->varying_p (), don't update it, make new_vr also VARYING
            and return false.
    
            * gcc.c-torture/compile/pr89655.c: New test.
    
    From-SVN: r270907

commit 9ffdc126e5ba7b938d3f7b58386d4205d494928e
Author: Richard Biener <rguenth@gcc.gnu.org>
Date:   Mon May 6 09:40:15 2019 +0000

    Backport PRs 86984, 89595, 89698, 89710, 89711, 90071
    
    2019-05-03  Richard Biener  <rguenther@suse.de>
    
            Backport from mainline
            2019-03-14  Richard Biener  <rguenther@suse.de>
    
            PR middle-end/89698
            * fold-const.c (operand_equal_p): For INDIRECT_REF check
            that the access types are similar.
    
            * g++.dg/torture/pr89698.C: New testcase.
    
            2019-03-07  Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/89595
            * tree-ssa-dom.c (dom_opt_dom_walker::optimize_stmt): Take
            stmt iterator as reference, take boolean output parameter to
            indicate whether the stmt was removed and thus the iterator
            already advanced.
            (dom_opt_dom_walker::before_dom_children): Re-iterate over
            stmts created by folding.
    
            * gcc.dg/torture/pr89595.c: New testcase.
    
            2019-03-14  Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/89710
            * tree-ssa-loop-ch.c (should_duplicate_loop_header_p): Use
            safe_dyn_cast.
    
            * gcc.dg/torture/pr89710.c: New testcase.
    
            2019-04-15  Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/90071
            * tree-ssa-reassoc.c (init_range_entry): Do not pick up
            abnormal operands from def stmts.
    
            * gcc.dg/torture/pr90071.c: New testcase.
    
            2018-08-20  Bernd Edlinger  <bernd.edlinger@hotmail.de>
    
            PR target/86984
            * expr.c (expand_assignment): Assert that bitpos is positive.
            (store_field): Likewise
            (expand_expr_real_1): Make sure that bitpos is positive.
            * config/alpha/alpha.h (CONSTANT_ADDRESS_P): Avoid signed
            integer overflow.
    
            * gcc.target/alpha/pr86984.c: New test.
    
            2019-03-14  Richard Biener  <rguenther@suse.de>
    
            PR target/89711
            * config/i386/i386.c (make_resolver_func): Properly set
            DECL_CONTEXT on the RESULT_DECL.
            * config/rs6000/rs6000.c (make_resolver_func): Likewise.
    
    From-SVN: r270904

commit a2b107b7f28fce1b0340a37706541dd3e1e4af6e
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon May 6 00:16:09 2019 +0000

    Daily bump.
    
    From-SVN: r270890

commit 6eb9b70906c019c942c295863ea398623fd86b25
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun May 5 00:16:12 2019 +0000

    Daily bump.
    
    From-SVN: r270879

commit 56bd436fb8832d71eda85393bddd7e62f073b3f3
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat May 4 00:16:09 2019 +0000

    Daily bump.
    
    From-SVN: r270865

commit a09b7f1441cda1392c535293d0e73b3525d8f94e
Author: Richard Biener <rguenther@suse.de>
Date:   Fri May 3 08:18:48 2019 +0000

    Backport PRs 86984, 89595, 89698, 89710, 89711, 90071
    
    2019-05-03  Richard Biener  <rguenther@suse.de>
    
            Backport from mainline
            2019-03-14  Richard Biener  <rguenther@suse.de>
    
            PR middle-end/89698
            * fold-const.c (operand_equal_p): For INDIRECT_REF check
            that the access types are similar.
    
            * g++.dg/torture/pr89698.C: New testcase.
    
            2019-03-07  Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/89595
            * tree-ssa-dom.c (dom_opt_dom_walker::optimize_stmt): Take
            stmt iterator as reference, take boolean output parameter to
            indicate whether the stmt was removed and thus the iterator
            already advanced.
            (dom_opt_dom_walker::before_dom_children): Re-iterate over
            stmts created by folding.
    
            * gcc.dg/torture/pr89595.c: New testcase.
    
            2019-03-14  Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/89710
            * tree-ssa-loop-ch.c (should_duplicate_loop_header_p): Use
            safe_dyn_cast.
    
            * gcc.dg/torture/pr89710.c: New testcase.
    
            2019-04-15  Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/90071
            * tree-ssa-reassoc.c (init_range_entry): Do not pick up
            abnormal operands from def stmts.
    
            * gcc.dg/torture/pr90071.c: New testcase.
    
            2018-08-20  Bernd Edlinger  <bernd.edlinger@hotmail.de>
    
            PR target/86984
            * expr.c (expand_assignment): Assert that bitpos is positive.
            (store_field): Likewise
            (expand_expr_real_1): Make sure that bitpos is positive.
            * config/alpha/alpha.h (CONSTANT_ADDRESS_P): Avoid signed
            integer overflow.
    
            * gcc.target/alpha/pr86984.c: New test.
    
            2019-03-14  Richard Biener  <rguenther@suse.de>
    
            PR target/89711
            * config/i386/i386.c (make_resolver_func): Properly set
            DECL_CONTEXT on the RESULT_DECL.
            * config/rs6000/rs6000.c (make_resolver_func): Likewise.
    
    From-SVN: r270841

commit e50bb4fe73bb7e1c5c2a4d938f8f9678a3614e86
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri May 3 00:16:13 2019 +0000

    Daily bump.
    
    From-SVN: r270829

commit 826ce5a9740cad752677bbdadd04cadc1a59234a
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu May 2 00:16:09 2019 +0000

    Daily bump.
    
    From-SVN: r270784

commit 30ce75420b8fb8981fcb8c3508ef5152fce53d9f
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed May 1 00:16:07 2019 +0000

    Daily bump.
    
    From-SVN: r270761

commit 01aaac6d0ce3d8d45613c62998b0c2e3b5ad03e7
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Apr 30 23:11:06 2019 +0200

    backport: re PR target/90193 (asm goto with TLS "m" input operand generates incorrect assembler in O1 and O2)
    
            Backported from mainline
            2019-04-24  Jakub Jelinek  <jakub@redhat.com>
    
            PR target/90193
            * rtl.c (classify_insn): Return JUMP_INSN for asm goto.
            * emit-rtl.c (try_split): Copy over REG_LABEL_TARGET.
    
            * gcc.target/i386/pr90193.c: New test.
    
    From-SVN: r270757

commit b6ff847652eb19f21b734e8dc1dc1aaf25ff53e3
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Apr 30 23:09:20 2019 +0200

    backport: re PR target/90187 (ICE in extract_insn, at recog.c:2304 x86_64)
    
            Backported from mainline
            2019-04-24  Jakub Jelinek  <jakub@redhat.com>
    
            PR target/90187
            * config/i386/i386.c (ix86_expand_sse_fp_minmax): Force if_true into
            a register if both if_true and if_false are MEMs.
    
            * g++.dg/opt/pr90187.C: New test.
    
    From-SVN: r270756

commit b331042cb62ce72a8b1b4c1ecbfb18d9793cac0b
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Apr 30 23:08:27 2019 +0200

    backport: re PR tree-optimization/90208 (error: EH landing pad label)
    
            Backported from mainline
            2019-04-24  Jakub Jelinek  <jakub@redhat.com>
    
            PR tree-optimization/90208
            * tree-cfg.c (remove_bb): Move forced labels from removed bbs
            after labels of new_bb, not before them.
    
            * gcc.dg/tsan/pr90208-2.c: New test.
    
    From-SVN: r270755

commit 29a08f8341822c264f29efff79a4923ade601e89
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Apr 30 23:07:37 2019 +0200

    backport: re PR c++/90108 (ICE: Segmentation fault (in c_tree_chain_next))
    
            Backported from mainline
            2019-04-19  Jakub Jelinek  <jakub@redhat.com>
    
            PR c++/90108
            * c-decl.c (merge_decls): If remove is main variant and
            DECL_ORIGINAL_TYPE is some other type, remove a DECL_ORIGINAL_TYPE
            variant that has newdecl as TYPE_NAME if any.
    
            * decl.c (duplicate_decls): If remove is main variant and
            DECL_ORIGINAL_TYPE is some other type, remove a DECL_ORIGINAL_TYPE
            variant that has newdecl as TYPE_NAME if any.
    
            * c-c++-common/pr90108.c: New test.
    
    From-SVN: r270754

commit 32140d16eace19de0bf76edd2baf781336b43cff
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Apr 30 23:06:33 2019 +0200

    backport: re PR rtl-optimization/90082 (ICE in delete_unmarked_insns, at dce.c:653)
    
            Backported from mainline
            2019-04-16  Jakub Jelinek  <jakub@redhat.com>
    
            PR rtl-optimization/90082
            * dce.c (can_delete_call): New function.
            (deletable_insn_p, mark_insn): Use it.
    
            * gcc.dg/pr90082.c: New test.
    
    From-SVN: r270753

commit b2b875977dcd10385cab9174835647ab6d10148c
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Apr 30 23:05:39 2019 +0200

    backport: re PR tree-optimization/90090 (ICE in mark_reachable_handlers, at tree-eh.c:3938 since r219202)
    
            Backported from mainline
            2019-04-16  Jakub Jelinek  <jakub@redhat.com>
    
            PR tree-optimization/90090
            * tree-ssa-math-opts.c (is_division_by): Ignore divisions that can
            throw internally.
            (is_division_by_square): Likewise.  Formatting fix.
    
            * g++.dg/opt/pr90090.C: New test.
    
    From-SVN: r270752

commit fe4f91e807d96de569861689b28676914d246aca
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Apr 30 23:05:00 2019 +0200

    backport: re PR c/89933 (ICE in merge_decls, at c/c-decl.c:2517)
    
            Backported from mainline
            2019-04-12  Jakub Jelinek  <jakub@redhat.com>
    
            PR c/89933
            * c-decl.c (merge_decls): When newdecl's type is its main variant,
            don't try to remove it from the variant list, but instead assert
            it has no variants.
    
            * decl.c (duplicate_decls): When newdecl's type is its main variant,
            don't try to remove it from the variant list, but instead assert
            it has no variants.
    
            * c-c++-common/pr89933.c: New test.
    
    From-SVN: r270751

commit 07a72023dc5b3ac6b76b6939b2c8fd4d26dae23d
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Apr 30 23:03:56 2019 +0200

    backport: re PR rtl-optimization/89965 (wrong code with -O -mtune=nano-x2 -fcaller-saves -fexpensive-optimizations -fno-tree-dce -fno-tree-ter)
    
            Backported from mainline
            2019-04-12  Jakub Jelinek  <jakub@redhat.com>
    
            PR rtl-optimization/89965
            * dce.c: Include rtl-iter.h.
            (struct check_argument_load_data): New type.
            (check_argument_load): New function.
            (find_call_stack_args): Check for loads from stack slots still tracked
            in sp_bytes and punt if any is found.
    
            * gcc.target/i386/pr89965.c: New test.
    
    From-SVN: r270750

commit 69462a4c7d0f22c1294358945f02b2e850e9504a
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Apr 30 23:03:11 2019 +0200

    backport: re PR c/89946 (ICE in assemble_start_function, at varasm.c:1871)
    
            Backported from mainline
            2019-04-12  Jakub Jelinek  <jakub@redhat.com>
    
            PR c/89946
            * varasm.c (assemble_start_function): Don't use tree_fits_uhwi_p
            and gcc_unreachable if it fails, just call tree_to_uhwi which
            verifies that too.  Test TREE_CHAIN instead of list_length > 1.
            Start warning message with a lower-case letter.  Formatting fixes.
    
            * c-attribs.c (handle_patchable_function_entry_attribute): Add
            function comment.  Warn if arguments of the attribute are not positive
            integer constants.
    
            * c-c++-common/pr89946.c: New test.
    
    From-SVN: r270749

commit 7f89a089a18825dfab15d9d418350ac02a928e54
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Apr 30 23:02:08 2019 +0200

    backport: re PR rtl-optimization/90026 (ICE: verify_flow_info failed (error: missing barrier after block 2))
    
            Backported from mainline
            2019-04-12  Jakub Jelinek  <jakub@redhat.com>
    
            PR rtl-optimization/90026
            * cfgcleanup.c (try_optimize_cfg): When removing empty bb with no
            successors, look for BARRIERs inside of the whole BB_FOOTER chain
            rather than just at the start of it.  If e->src BB_FOOTER is not NULL
            in cfglayout mode, use emit_barrier_after_bb.
    
            * g++.dg/opt/pr90026.C: New test.
    
    From-SVN: r270748

commit 23250eed8aa69bf8093680903ee912cedea53e6d
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Apr 30 23:01:23 2019 +0200

    backport: re PR rtl-optimization/89965 (wrong code with -O -mtune=nano-x2 -fcaller-saves -fexpensive-optimizations -fno-tree-dce -fno-tree-ter)
    
            Backported from mainline
            2019-04-11  Jakub Jelinek  <jakub@redhat.com>
    
            PR rtl-optimization/89965
            * dce.c (sp_based_mem_offset): New function.
            (find_call_stack_args): Use sp_based_mem_offset.
    
    From-SVN: r270747

commit 9cf5b93a71f73613e42e1297679915434a2e800c
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Apr 30 23:00:42 2019 +0200

    re PR c++/90010 (valgrind error with snprintf and -Wall)
    
            2019-04-10  Jakub Jelinek  <jakub@redhat.com>
    
            PR c++/90010
            * gimple-ssa-sprintf.c (target_to_host): Fix handling of targstr
            with strlen in between hostsz-3 and hostsz-1 inclusive when no
            translation is needed, and when translation is needed, only append
            ... if the string length is hostsz or more bytes long.  Avoid using
            strncpy or strcat.
    
            * gcc.dg/pr90010.c: New test.
    
    From-SVN: r270746

commit 2c32bb992ebd7745d9648273d80fdf7e9202515f
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Apr 30 22:58:00 2019 +0200

    backport: re PR middle-end/89998 (ICE: verify_gimple failed in printf-return-value)
    
            Backported from mainline
            2019-04-09  Jakub Jelinek  <jakub@redhat.com>
    
            PR tree-optimization/89998
            * gimple-ssa-sprintf.c (try_substitute_return_value): Use lhs type
            instead of integer_type_node if possible, don't add ranges if return
            type is not compatible with int.
            * gimple-fold.c (gimple_fold_builtin_sprintf,
            gimple_fold_builtin_snprintf): Use lhs type instead of hardcoded
            integer_type_node.
    
            * gcc.c-torture/compile/pr89998-1.c: New test.
            * gcc.c-torture/compile/pr89998-2.c: New test.
    
    From-SVN: r270745

commit 610fa54083c31bbbd160adeff22dc09fbedd25bf
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Apr 30 22:56:40 2019 +0200

    backport: re PR sanitizer/89869 (-fsanitize=undefined miscompilation)
    
            Backported from mainline
            2019-03-29  Jakub Jelinek  <jakub@redhat.com>
    
            PR sanitizer/89869
            * typeck.c: Include gimplify.h.
            (cp_build_modify_expr) <case COND_EXPR>: Unshare rhs before using it
            for second time.  Formatting fixes.
    
            * g++.dg/ubsan/vptr-14.C: New test.
    
    From-SVN: r270744

commit 7df238f67bb1607af5d3529964823adf451d1a72
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Apr 30 22:55:58 2019 +0200

    backport: re PR c/89872 (GCC does not generate read access to volatile compound literal)
    
            Backported from mainline
            2019-03-29  Jakub Jelinek  <jakub@redhat.com>
    
            PR c/89872
            * gimplify.c (gimplify_compound_literal_expr): Don't optimize a
            non-addressable complit into its initializer if it is volatile.
    
            * gcc.dg/tree-ssa/pr89872.c: New test.
    
    From-SVN: r270743

commit 2bb0cf7fe378e0b68bd1264b985436d75468136b
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Apr 30 22:55:14 2019 +0200

    backport: re PR middle-end/89621 (ICE with allocatable character and openmp)
    
            Backported from mainline
            2019-03-28  Jakub Jelinek  <jakub@redhat.com>
    
            PR middle-end/89621
            * tree-inline.h (struct copy_body_data): Add
            dont_remap_vla_if_no_change flag.
            * tree-inline.c (remap_type_3, remap_type_2): New functions.
            (remap_type): Don't remap vla types if id->dont_remap_vla_if_no_change
            and remap_type_2 returns false.
            * omp-low.c (new_omp_context): Set ctx->cb.dont_remap_vla_if_no_change.
    
            * gfortran.dg/gomp/pr89621.f90: New test.
    
    From-SVN: r270742

commit 3e453ffc7f3274966b7dad22aef986a4a0c1afc4
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Apr 30 22:54:16 2019 +0200

    backport: re PR c++/89796 (Incorrect warning generated with OpenMP atomic capture)
    
            Backported from mainline
            2019-03-26  Jakub Jelinek  <jakub@redhat.com>
    
            PR c++/89796
            * semantics.c (finish_omp_atomic): Add warning_sentinel for
            -Wunused-value around finish_expr_stmt call.
    
            * g++.dg/gomp/pr89796.C: New test.
            * gcc.dg/gomp/pr89796.c: New test.
    
    From-SVN: r270741

commit 22e58009bb2b82368c0ab70d3f4d04ce3257706f
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Apr 30 22:53:29 2019 +0200

    backport: re PR c++/60702 (thread_local initialization)
    
            Backported from mainline
            2019-03-25  Jakub Jelinek  <jakub@redhat.com>
    
            PR c++/60702
            * g++.dg/tls/thread_local11.C: Remove scan-tree-dump-times directives
            for _ZTH* calls.
            * g++.dg/tls/thread_local11a.C: New test.
    
    From-SVN: r270740

commit e2e1796d8dff652592896ef7eb5ac2c67960a879
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Apr 30 22:52:54 2019 +0200

    backport: re PR c++/60702 (thread_local initialization)
    
            Backported from mainline
            2019-03-22  Jakub Jelinek  <jakub@redhat.com>
    
            PR c++/60702
            * cp-tree.h (get_tls_wrapper_fn): Remove declaration.
            (maybe_get_tls_wrapper_call): Declare.
            * decl2.c (get_tls_wrapper_fn): Make static.
            (maybe_get_tls_wrapper_call): New function.
            * typeck.c (build_class_member_access_expr): Handle accesses to TLS
            variables.
            * semantics.c (finish_qualified_id_expr): Likewise.
            (finish_id_expression_1): Use maybe_get_tls_wrapper_call.
            * pt.c (tsubst_copy_and_build): Likewise.
    
            * g++.dg/tls/thread_local11.C: New test.
            * g++.dg/tls/thread_local11.h: New test.
            * g++.dg/tls/thread_local12a.C: New test.
            * g++.dg/tls/thread_local12b.C: New test.
            * g++.dg/tls/thread_local12c.C: New test.
            * g++.dg/tls/thread_local12d.C: New test.
            * g++.dg/tls/thread_local12e.C: New test.
            * g++.dg/tls/thread_local12f.C: New test.
            * g++.dg/tls/thread_local12g.C: New test.
            * g++.dg/tls/thread_local12h.C: New test.
            * g++.dg/tls/thread_local12i.C: New test.
            * g++.dg/tls/thread_local12j.C: New test.
            * g++.dg/tls/thread_local12k.C: New test.
            * g++.dg/tls/thread_local12l.C: New test.
    
    From-SVN: r270739

commit 6b91deb03433ae8682a053a5c843ffa4f53359ea
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Apr 30 22:51:42 2019 +0200

    backport: re PR c++/89767 (ICE with tuple and optimization)
    
            Backported from mainline
            2019-03-21  Jakub Jelinek  <jakub@redhat.com>
    
            PR c++/89767
            * parser.c (cp_parser_lambda_introducer): Add ids and first_capture_id
            variables, check for duplicates in this function.
            * lambda.c (add_capture): Don't check for duplicates nor use
            IDENTIFIER_MARKED.
            (register_capture_members): Don't clear IDENTIFIER_MARKED here.
    
            * g++.dg/cpp1y/lambda-init18.C: New test.
            * g++.dg/cpp1y/lambda-init19.C: New test.
            * g++.dg/cpp1y/pr89767.C: New test.
    
    From-SVN: r270738

commit 2bd0c779f785a098065bcfbd8eb8db8219fcccc0
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Apr 30 22:50:48 2019 +0200

    backport: re PR target/89752 (ICE in emit_move_insn, at expr.c:3723)
    
            Backported from mainline
            2019-03-20  Jakub Jelinek  <jakub@redhat.com>
    
            PR target/89752
            * lra-constraints.c (process_alt_operands) <reg>: For BLKmode, don't
            update this_alternative nor this_alternative_set.
    
    From-SVN: r270737

commit e72ce04bb8efb4c57c0bafd6fa60dd03ada754b4
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Apr 30 22:50:18 2019 +0200

    backport: re PR rtl-optimization/89768 (ICE in compare_and_jump_seq at loop-unroll.c:838)
    
            Backported from mainline
            2019-03-19  Jakub Jelinek  <jakub@redhat.com>
    
            PR rtl-optimization/89768
            * loop-unroll.c (unroll_loop_constant_iterations): Use gen_int_mode
            instead of GEN_INT.
            (unroll_loop_runtime_iterations): Likewise.
    
    From-SVN: r270736

commit 5c5e8bd45145bd87d6e59c34afd080b83d0f7819
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Apr 30 22:49:38 2019 +0200

    backport: re PR target/89752 (ICE in emit_move_insn, at expr.c:3723)
    
            Backported from mainline
            2019-03-19  Jakub Jelinek  <jakub@redhat.com>
    
            PR target/89752
            * gimplify.c (gimplify_asm_expr): For output argument with
            TREE_ADDRESSABLE type, clear allows_reg if it allows memory, otherwise
            diagnose error.
    
            * g++.dg/ext/asm15.C: Check for particular diagnostic wording.
            * g++.dg/ext/asm16.C: Likewise.
            * g++.dg/ext/asm17.C: New test.
    
    From-SVN: r270735

commit c4fba277c4ce26c335f771f510c7616f70a7b1b5
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Apr 30 22:47:52 2019 +0200

    backport: re PR target/89726 (Incorrect inlined version of 'ceil' for 32bit)
    
            Backported from mainline
            2019-03-19  Jakub Jelinek  <jakub@redhat.com>
    
            PR target/89726
            * config/i386/i386.c (ix86_expand_floorceildf_32): In ceil
            compensation use x2 += 1 instead of x2 -= -1 and when honoring
            signed zeros, do another copysign after the compensation.
    
            * gcc.target/i386/fpprec-1.c (x): Add 6 new constants.
            (expect_round, expect_rint, expect_floor, expect_ceil, expect_trunc):
            Add expected results for them.
    
    From-SVN: r270734

commit 73a66cd1a53245a12c59f63b37dda4eb9431ccb8
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Apr 30 22:46:59 2019 +0200

    backport: re PR c/89734 (const qualifier on return type not erased inside __typeof__)
    
            Backported from mainline
            2019-03-19  Jakub Jelinek  <jakub@redhat.com>
    
            PR c/89734
            * c-decl.c (grokdeclarator): Call c_build_qualified_type on function
            return type even if quals_used is 0.  Formatting fixes.
    
            * gcc.dg/pr89734.c: New test.
    
    From-SVN: r270733

commit bc07127ce4c6e36641648a4cc14a907b4390598d
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Apr 30 22:46:09 2019 +0200

    backport: re PR debug/89704 (ICE in add_const_value_attribute, at dwarf2out.c:19685)
    
            Backported from mainline
            2019-03-15  Jakub Jelinek  <jakub@redhat.com>
    
            PR debug/89704
            * dwarf2out.c (add_const_value_attribute): Return false for MINUS,
            SIGN_EXTEND and ZERO_EXTEND.
    
            * gcc.dg/debug/pr89704.c: New test.
    
    From-SVN: r270732

commit fc301b8f4e7ed41f3b419a4efd165e1de5984357
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Apr 30 22:45:28 2019 +0200

    backport: re PR ipa/89684 (ICE in gsi_for_stmt, at gimple-iterator.c:613)
    
            Backported from mainline
            2019-03-14  Jakub Jelinek  <jakub@redhat.com>
    
            PR ipa/89684
            * multiple_target.c (create_dispatcher_calls): Change
            references_to_redirect from vector of ipa_ref * to vector of ipa_ref.
            In the node->iterate_referring loop, push *ref rather than ref, call
            ref->remove_reference () and always pass 0 to iterate_referring.
    
            * gcc.target/i386/pr89684.c: New test.
    
    From-SVN: r270731

commit 87e0abde567a490b0f5b81dd1a677b5d97456e96
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Apr 30 22:44:48 2019 +0200

    backport: re PR rtl-optimization/89679 (wrong code with -Og -frerun-cse-after-loop -fno-tree-fre)
    
            Backported from mainline
            2019-03-14  Jakub Jelinek  <jakub@redhat.com>
    
            PR rtl-optimization/89679
            * expmed.c (expand_mult_const): Don't add a REG_EQUAL note if it
            would contain a paradoxical SUBREG.
    
            * gcc.dg/pr89679.c: New test.
    
    From-SVN: r270730

commit 212037c74c7dbf6b8d07553aee1671b25812bf6e
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Apr 30 22:43:58 2019 +0200

    backport: re PR tree-optimization/89703 (ICE in compare_values_warnv, at tree-vrp.c:997)
    
            Backported from mainline
            2019-03-14  Jakub Jelinek  <jakub@redhat.com>
    
            PR tree-optimization/89703
            * tree-ssa-strlen.c (valid_builtin_call): Punt if stmt call types
            aren't compatible also with builtin_decl_explicit.  Check pure
            or non-pure status of BUILT_IN_STR{{,N}CMP,N{LEN,{CAT,CPY}{,_CHK}}}
            and BUILT_IN_STPNCPY{,_CHK}.
    
            * gcc.c-torture/compile/pr89703-1.c: New test.
            * gcc.c-torture/compile/pr89703-2.c: New test.
    
    From-SVN: r270729

commit 64913a1610971605e971ff39ec9882a207b93c62
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Apr 30 22:43:07 2019 +0200

    backport: re PR c++/89512 (ICE in get_expr_operands, at tree-ssa-operands.c:882)
    
            Backported from mainline
            2019-03-14  Jakub Jelinek  <jakub@redhat.com>
    
            PR c++/89512
            * semantics.c (finish_qualified_id_expr): Reject variable templates.
    
            * g++.dg/cpp1y/var-templ61.C: New test.
    
    From-SVN: r270728

commit 3a350264d925efc513e3d1361973c56378b84fd0
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Apr 30 22:42:20 2019 +0200

    backport: re PR debug/89498 (ICE in AT_loc_list, at dwarf2out.c:4871)
    
            Backported from mainline
            2019-03-13  Jakub Jelinek  <jakub@redhat.com>
    
            PR debug/89498
            * dwarf2out.c (size_of_die): For dw_val_class_view_list always use
            DWARF_OFFSET_SIZE.
            (value_format): For dw_val_class_view_list never use DW_FORM_loclistx.
    
    From-SVN: r270727

commit a8d7d977a3c78b5bb316677c1d50722cd9830576
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Apr 30 22:41:49 2019 +0200

    backport: re PR middle-end/88588 (ICE in make_decl_rtl, at varasm.c:1329)
    
            Backported from mainline
            2019-03-13  Jakub Jelinek  <jakub@redhat.com>
    
            PR middle-end/88588
            * omp-simd-clone.c (ipa_simd_modify_stmt_ops): Handle PHI args.
            (ipa_simd_modify_function_body): Handle PHIs.
    
            * c-c++-common/gomp/pr88588.c: New test.
    
    From-SVN: r270726

commit a9d815253e7bddf06546812f7fd372898df36e14
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Apr 30 22:41:09 2019 +0200

    backport: re PR middle-end/89663 (ICE in expand_builtin_int_roundingfn_2, at builtins.c:2831)
    
            Backported from mainline
            2019-03-12  Jakub Jelinek  <jakub@redhat.com>
    
            PR middle-end/89663
            * builtins.c (expand_builtin_int_roundingfn,
            expand_builtin_int_roundingfn_2): Return NULL_RTX instead of
            gcc_unreachable if validate_arglist fails.
    
            * gcc.c-torture/compile/pr89663-1.c: New test.
            * gcc.c-torture/compile/pr89663-2.c: New test.
    
    From-SVN: r270725

commit 44864753b176ef6b01f8bf9cb90bce10cd791121
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Apr 30 22:40:17 2019 +0200

    backport: re PR fortran/89651 (OpenMP private array uninitialized warning with -O flag)
    
            Backported from mainline
            2019-03-11  Jakub Jelinek  <jakub@redhat.com>
    
            PR fortran/89651
            * trans-openmp.c (gfc_omp_clause_default_ctor): Set TREE_NO_WARNING
            on decl if adding COND_EXPR for allocatable.
            (gfc_omp_clause_copy_ctor): Set TREE_NO_WARNING on dest.
    
            * gfortran.dg/gomp/pr89651.f90: New test.
    
    From-SVN: r270724

commit 6fd6acf1b11b8fbbbd2f3c377f54caf0eb64f631
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Apr 30 22:39:17 2019 +0200

    backport: re PR c/88568 ('dllimport' no longer implies 'extern' in C)
    
            Backported from mainline
            2019-03-09  Jakub Jelinek  <jakub@redhat.com>
    
            PR c/88568
            * attribs.c (handle_dll_attribute): Don't clear TREE_STATIC for
            dllimport on VAR_DECLs with RECORD_TYPE or UNION_TYPE DECL_CONTEXT.
    
            * g++.dg/other/pr88568.C: New test.
    
    From-SVN: r270723

commit a640a833f2c0f6898e8e0b66d2ae363877dcd597
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Apr 30 22:38:32 2019 +0200

    backport: re PR c++/82075 (structured binding fails with empty base class)
    
            Backported from mainline
            2019-03-08  Jakub Jelinek  <jakub@redhat.com>
    
            PR c++/82075
            * g++.dg/cpp1z/decomp49.C: New test.
    
    From-SVN: r270722

commit b0f7aee9f8efadcbd7f1a093a630a2a2f2ff932f
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Apr 30 22:38:01 2019 +0200

    backport: re PR c++/87148 (backward compatibility issue  to take char [] as incomplete type)
    
            Backported from mainline
            2019-03-06  Jakub Jelinek  <jakub@redhat.com>
    
            PR c++/87148
            * init.c (build_value_init_noctor): Ignore flexible array members.
    
            * g++.dg/ext/flexary34.C: New test.
    
    From-SVN: r270721

commit 6d456103696b68a15cba130e94abe5fdc44a9544
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Apr 30 22:37:12 2019 +0200

    backport: re PR target/89587 (gcc's rs6000 configuration unconditionally sets MULTIARCH_DIRNAME, even when multiarch is disabled)
    
            Backported from mainline
            2019-03-05  Jakub Jelinek  <jakub@redhat.com>
    
            PR target/89587
            * config/rs6000/t-linux (MULTIARCH_DIRNAME): Set to non-empty only
            if_multiarch.
    
    From-SVN: r270720

commit 6851de3f1212d5d6be2eed563d521c9c6114750b
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Apr 30 22:36:17 2019 +0200

    backport: re PR middle-end/89590 (ICE in maybe_emit_free_warning)
    
            Backported from mainline
            2019-03-05  Jakub Jelinek  <jakub@redhat.com>
    
            PR middle-end/89590
            * builtins.c (maybe_emit_free_warning): Punt if free doesn't have
            exactly one argument.
    
            * gcc.dg/pr89590.c: New test.
    
    From-SVN: r270719

commit fb99674798c7c8d723ec767cda6f3c3e0fdd8337
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Apr 30 22:34:49 2019 +0200

    backport: re PR c/89521 (ICE in expand_builtin_int_roundingfn, at builtins.c:2697)
    
            Backported from mainline
            2019-02-28  Jakub Jelinek  <jakub@redhat.com>
    
            PR c/89521
            * gcc.dg/pr89521-1.c: New test.
            * gcc.dg/pr89521-2.c: New test.
    
    From-SVN: r270718

commit 7861d4706b23cb53df4789ea750f0900d38d085e
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Apr 30 22:33:24 2019 +0200

    backport: re PR c/89520 (ICE tree check: accessed operand 4 of call_expr with 3 operands in convert_to_integer_1, at convert.c:668)
    
            Backported from mainline
            2019-02-28  Jakub Jelinek  <jakub@redhat.com>
    
            PR c/89520
            * convert.c (convert_to_real_1, convert_to_integer_1): Punt for
            builtins if they don't have a single scalar floating point argument.
            Formatting fixes.
    
            * gcc.dg/pr89520-1.c: New test.
            * gcc.dg/pr89520-2.c: New test.
    
    From-SVN: r270717

commit 89daeee2531091202e4950ea4f1173769149101c
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Apr 30 22:32:14 2019 +0200

    backport: re PR c++/89403 (ICE in maybe_clone_body, at cp/optimize.c:693)
    
            Backported from mainline
            2019-02-20  Jakub Jelinek  <jakub@redhat.com>
    
            PR c++/89403
            * decl2.c (c_parse_final_cleanups): Move TREE_ASM_WRITTEN setting
            for flag_syntax_only from here...
            * semantics.c (expand_or_defer_fn_1): ... here.
    
            * g++.dg/cpp0x/pr89403.C: New test.
    
    From-SVN: r270716

commit e622e833a441fdf842f4e6fe5ecffccadf53f663
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Apr 30 22:31:26 2019 +0200

    backport: re PR c++/89405 (ICE in import_export_decl, at cp/decl2.c:2959)
    
            Backported from mainline
            2019-02-20  Jakub Jelinek  <jakub@redhat.com>
    
            PR c++/89405
            * decl.c (maybe_commonize_var): When clearing TREE_PUBLIC and
            DECL_COMMON, set DECL_INTERFACE_KNOWN.
    
            * g++.dg/cpp1z/inline-var5.C: New test.
    
    From-SVN: r270715

commit 75250bbccec596a7bb9209adb8d9c4060e20b116
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Apr 30 22:30:27 2019 +0200

    backport: re PR middle-end/89412 (gcc ICE in simplify_subreg, at simplify-rtx.c:6273 on i686-linux-gnu)
    
            Backported from mainline
            2019-02-20  Jakub Jelinek  <jakub@redhat.com>
    
            PR middle-end/89412
            * expr.c (expand_assignment): If result is a MEM, use change_address
            instead of simplify_gen_subreg.
    
            * gcc.c-torture/compile/pr89412.c: New test.
    
    From-SVN: r270714

commit c70a015d522fab2db90dbfcace39c7935ca34541
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Apr 30 22:29:44 2019 +0200

    backport: re PR middle-end/89091 (ICE: Segmentation fault (in tree_class_check))
    
            Backported from mainline
            2019-02-20  Jakub Jelinek  <jakub@redhat.com>
                        David Malcolm  <dmalcolm@redhat.com>
    
            PR middle-end/89091
            * fold-const.c (decode_field_reference): Return NULL_TREE if
            lang_hooks.types.type_for_size returns NULL.  Check it before
            overwriting *exp_.  Use return NULL_TREE instead of return 0.
    
            * gcc.dg/torture/pr89091.c: New test.
    
    From-SVN: r270713

commit 7ba160e6bdc1831c8d7df9bfbb4d63675761b151
Author: Jakub Jelinek <jakub@gcc.gnu.org>
Date:   Tue Apr 30 22:28:56 2019 +0200

    backport: re PR tree-optimization/88074 (g++ hangs on math expression)
    
            Backported from mainline
            2019-02-20  Jakub Jelinek  <jakub@redhat.com>
    
            PR middle-end/88074
            PR middle-end/89415
            * toplev.c (do_compile): Double the emin/emax exponents to workaround
            buggy mpc_norm.
    
            * gcc.dg/pr88074-2.c: New test.
    
            2019-02-19  Richard Biener  <rguenther@suse.de>
    
            PR middle-end/88074
            * toplev.c (do_compile): Initialize mpfr's exponent range
            based on available float modes.
    
            * gcc.dg/pr88074.c: New testcase.
    
    From-SVN: r270712

commit e683ec8602ec4e1050277d4e5b39b0fc13f0a700
Author: Ramana Radhakrishnan <ramana.radhakrishnan@arm.com>
Date:   Tue Apr 30 14:57:50 2019 +0000

    [Patch AArch64] Add __ARM_FEATURE_ATOMICS
    
    
    
    This keeps coming up repeatedly and the ACLE has finally added
    __ARM_FEATURE_ATOMICS for the LSE feature in GCC. This is now part of
    the latest ACLE release
    (https://developer.arm.com/docs/101028/latest/5-feature-test-macros)
    
    I know it's late for GCC-9 but this is a simple macro which need not
    wait  for another year.
    
    Ok for trunk and to backport to all release branches ?
    
    Tested with a simple build and a smoke test.
    
    Backport from mainline.
    PR target/86538
    * config/aarch64/aarch64-c.c (aarch64_update_cpp_builtins): Define
    __ARM_FEATURE_ATOMICS
    
    From-SVN: r270702

commit 718720fec305d5e6429307193ca012603737dc79
Author: Srinath Parvathaneni <srinath.parvathaneni@arm.com>
Date:   Tue Apr 30 09:25:31 2019 +0000

    PR target/90075 Prefer bsl/bit/bif for copysignf. (backport GCC-8)
    
    This patch is to fix the ICE caused in expand pattern of copysignf
    builtin. This is a back port to r267019 of trunk.
    
    gcc:
    
    2019-04-29  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>
    
            Backport from mainline
            2018-12-11  Richard Earnshaw <Richard.Earnshaw@arm.com>
    
            PR target/37369
            * config/aarch64/iterators.md (sizem1): Add sizes for
            SFmode and DFmode.
            (Vbtype): Add SFmode mapping.
            * config/aarch64/aarch64.md (copysigndf3, copysignsf3): Delete.
            (copysign<GPF:mode>3): New expand pattern.
            (copysign<GPF:mode>3_insn): New insn pattern.
    
    testsuite:
    
    2019-04-29  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>
    
            PR target/90075
            * gcc.target/aarch64/pr90075.c: New test.
    
    From-SVN: r270683

commit 3db48e9c27bddef5d38e107142a75a32d402183e
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Apr 30 00:16:07 2019 +0000

    Daily bump.
    
    From-SVN: r270670

commit 05240a1e42221286f3f0e324696eb853c83afc35
Author: Richard Sandiford <richard.sandiford@arm.com>
Date:   Mon Apr 29 08:32:27 2019 +0000

    Fix output_constructor_bitfield handling of wide bitfields (PR89037)
    
    The testcase was failing because we were trying to access
    TREE_INT_CST_ELT (x, 1) of a 128-bit integer that was small enough
    to need only a single element.
    
    2019-04-29  Richard Sandiford  <richard.sandiford@arm.com>
    
    gcc/
            Backport from mainline:
            2019-01-25  Richard Sandiford  <richard.sandiford@arm.com>
    
            PR middle-end/89037
            * varasm.c (output_constructor_bitfield): Use wi::extract_uhwi
            instead of accessing TREE_INT_CST_ELT directly.
    
    gcc/testsuite/
            Backport from mainline:
            2019-01-25  Richard Sandiford  <richard.sandiford@arm.com>
    
            PR middle-end/89037
            * gcc.dg/pr89037.c: New test.
    
    From-SVN: r270643

commit e342c8e59934b475355fb4728e310c8cd44a7a71
Author: Richard Sandiford <richard.sandiford@arm.com>
Date:   Mon Apr 29 07:56:02 2019 +0000

    Fix aarch64_evpc_tbl guard (PR 85910)
    
    2018-04-29  Richard Sandiford  <richard.sandiford@arm.com>
    
    gcc/
            Backport from mainline:
            2018-08-23  Richard Sandiford  <richard.sandiford@arm.com>
    
            PR target/85910
            * config/aarch64/aarch64.c (aarch64_expand_vec_perm_const_1): Fix
            aarch64_evpc_tbl guard.
    
    From-SVN: r270642

commit e7b38aef3a6e0368b5931fb1ab32de085950390d
Author: Richard Sandiford <richard.sandiford@arm.com>
Date:   Mon Apr 29 07:54:34 2019 +0000

    Fix POLY_INT_CST/CONST_POLY_INT typo (PR 89631)
    
    2019-04-29  Richard Sandiford  <richard.sandiford@arm.com>
    
    gcc/
            Backport from mainline:
            2019-03-08  Richard Sandiford  <richard.sandiford@arm.com>
    
            PR debug/89631
            * dwarf2cfi.c (dwarf2out_frame_debug_expr): Use CONST_POLY_INT
            instead of POLY_INT_CST.
    
    From-SVN: r270641

commit f0d81a20883e00625e6706649729b6a19cd4a26b
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Apr 29 00:16:10 2019 +0000

    Daily bump.
    
    From-SVN: r270635

commit 8d648deb8c1bfad65fe63b5cd20fa5bbb9aec8cb
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Apr 28 00:16:13 2019 +0000

    Daily bump.
    
    From-SVN: r270628

commit 032425cebaa4c796b6a659d1bd9a2207aedd8009
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Apr 27 00:16:24 2019 +0000

    Daily bump.
    
    From-SVN: r270618

commit 2ea40d0de7938b4d26388f63779ab33be36ddbc7
Author: Roman Zhuykov <zhroma@gcc.gnu.org>
Date:   Fri Apr 26 16:04:54 2019 +0000

    Backport modulo-sched fixes from mainline
    
    2019-04-23  Roman Zhuykov  <zhroma@ispras.ru>
    
    modulo-sched: prevent division by zero (PR87979)
    
            PR rtl-optimization/87979
            * modulo-sched.c (sms_schedule): Start ii value "mii" should
            not equal zero.
    
    modulo-sched: fix branch scheduling issue (PR84032)
    
            PR rtl-optimization/84032
            * modulo-sched.c (ps_insn_find_column): Change condition so that
            branch will always be the last insn in a row inside partial
            schedule.
    
    gcc/testsuite:
    
            PR rtl-optimization/87979
            * gcc.dg/pr87979.c: New test.
    
            PR rtl-optimization/84032
            * gcc.dg/pr84032.c: New test.
    
    From-SVN: r270609

commit d83e2783c2e344d73dc5457b9a17aa99bbd5ac71
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Apr 26 00:16:08 2019 +0000

    Daily bump.
    
    From-SVN: r270590

commit 02503fd013593525f31785cd70b29bccbbd721aa
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Apr 25 00:16:08 2019 +0000

    Daily bump.
    
    From-SVN: r270562

commit d08d99eae048d23a807db9c3672630604bc62f92
Author: Paul Thomas <pault@gcc.gnu.org>
Date:   Wed Apr 24 07:27:42 2019 +0000

    re PR fortran/87127 (External function not recognised from within an associate block)
    
    2019-04-24  Paul Thomas  <pault@gcc.gnu.org>
    
            PR fortran/87127
            * resolve.c (check_host_association): If an external function
            is typed but not declared explicitly to be external, change the
            old symbol from a variable to an external function.
    
    2019-04-24  Paul Thomas  <pault@gcc.gnu.org>
    
            PR fortran/87127
            * gfortran.dg/external_procedures_4.f90: New test.
    
    From-SVN: r270532

commit 8d758e6fa931d24479d533fda1a3207c0016ee46
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Apr 24 00:16:14 2019 +0000

    Daily bump.
    
    From-SVN: r270529

commit 3edcf1e5aac3086ebb85f446c10add39fbc7e3f5
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Apr 23 00:16:10 2019 +0000

    Daily bump.
    
    From-SVN: r270497

commit 5dcbc6dccb244b0b69c6a35c59bed9540c1cb2c9
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Apr 22 00:16:12 2019 +0000

    Daily bump.
    
    From-SVN: r270487

commit 9c3d780756de79f87258480441f77a3d3415831c
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Apr 21 00:16:08 2019 +0000

    Daily bump.
    
    From-SVN: r270474

commit 7ee7c409cc7e60e291cb873837d8a68f028cefb7
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Apr 20 00:16:14 2019 +0000

    Daily bump.
    
    From-SVN: r270465

commit 1e416f0846b300b0e16213a79c3331b873f0dbba
Author: Pat Haugen <pthaugen@us.ibm.com>
Date:   Fri Apr 19 17:14:57 2019 +0000

    backport: re PR target/84369 (test case gcc.dg/sms-10.c fails on power9)
    
            Backport from mainline:
            2019-04-16  Pat Haugen  <pthaugen@us.ibm.com>
    
            PR target/84369
            * config/rs6000/power9.md: Add store forwarding bypass.
    
    From-SVN: r270461

commit a83fc1b6d8fb0953b3839ba33685685468056acc
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Apr 19 00:16:15 2019 +0000

    Daily bump.
    
    From-SVN: r270450

commit 580b924acbe3f261523c289364c1ef1ec62aad76
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Apr 18 00:16:09 2019 +0000

    Daily bump.
    
    From-SVN: r270429

commit 2eb51addabfdc07bdc8a9d9fb55623f934c406cf
Author: Martin Jambor <mjambor@suse.cz>
Date:   Wed Apr 17 17:52:16 2019 +0200

    backport: re PR tree-optimization/85762 (range-v3 abstraction overhead not optimized away)
    
    2019-04-17  Martin Jambor  <mjambor@suse.cz>
    
            Backport from mainline
            2019-03-10  Martin Jambor  <mjambor@suse.cz>
    
            PR tree-optimization/85762
            PR tree-optimization/87008
            PR tree-optimization/85459
            * tree-sra.c (contains_vce_or_bfcref_p): New parameter, set the bool
            it points to if there is a type changing MEM_REF.  Adjust all callers.
            (build_accesses_from_assign): Disable total scalarization if
            contains_vce_or_bfcref_p returns true through the new parameter, for
            both rhs and lhs.
    
            testsuite/
            * g++.dg/tree-ssa/pr87008.C: New test.
            * gcc.dg/guality/pr54970.c: Xfail tests querying a[0] everywhere.
    
    From-SVN: r270414

commit 2e6a370be2c7ed1f7aefc064e7560f43ab079147
Author: Kelvin Nilsen <kelvin@gcc.gnu.org>
Date:   Wed Apr 17 15:40:12 2019 +0000

    backport: re PR target/87532 (bad results from vec_extract(unsigned char, foo) dependent upon function inline)
    
    gcc/ChangeLog:
    
    2019-04-17  Kelvin Nilsen  <kelvin@gcc.gnu.org>
    
            Backport from mainline
            2019-03-15  Kelvin Nilsen  <kelvin@gcc.gnu.org>
    
            PR target/87532
            * config/rs6000/rs6000-c.c (altivec_resolve_overloaded_builtin):
            When handling vec_extract, use modular arithmetic to allow
            constant selectors greater than vector length.
            * config/rs6000/rs6000.c (rs6000_expand_vector_extract): Allow
            V1TImode vectors to have constant selector values greater than 0.
            Use modular arithmetic to compute vector index.
            (rs6000_split_vec_extract_var): Use modular arithmetic to compute
            index for in-memory vectors.  Correct code generation for
            in-register vectors.  Use inner mode of vector rather than mode of
            destination for move instruction.
            (altivec_expand_vec_ext_builtin): Use modular arithmetic to
            compute index.
    
            2019-04-12  Kelvin Nilsen  <kelvin@gcc.gnu.org>
    
            PR target/87532
            * config/rs6000/vsx.md (*vsx_extract_<mode>_<VS_scalar>mode_var):
            Use QI inner mode with V16QI vector mode.
    
    gcc/testsuite/ChangeLog:
    
    2019-04-17  Kelvin Nilsen  <kelvin@gcc.gnu.org>
    
            Backport from mainline
            2019-03-15  Kelvin Nilsen  <kelvin@gcc.gnu.org>
    
            PR target/87532
            * gcc.target/powerpc/pr87532.c: New test.
            * gcc.target/powerpc/vec-extract-v16qiu-v2.h: New test.
            * gcc.target/powerpc/vec-extract-v16qiu-v2a.c: New test.
            * gcc.target/powerpc/vec-extract-v16qiu-v2b.c: New test.
            * gcc.target/powerpc/vsx-builtin-10a.c: New test.
            * gcc.target/powerpc/vsx-builtin-10b.c: New test.
            * gcc.target/powerpc/vsx-builtin-11a.c: New test.
            * gcc.target/powerpc/vsx-builtin-11b.c: New test.
            * gcc.target/powerpc/vsx-builtin-12a.c: New test.
            * gcc.target/powerpc/vsx-builtin-12b.c: New test.
            * gcc.target/powerpc/vsx-builtin-13a.c: New test.
            * gcc.target/powerpc/vsx-builtin-13b.c: New test.
            * gcc.target/powerpc/vsx-builtin-14a.c: New test.
            * gcc.target/powerpc/vsx-builtin-14b.c: New test.
            * gcc.target/powerpc/vsx-builtin-15a.c: New test.
            * gcc.target/powerpc/vsx-builtin-15b.c: New test.
            * gcc.target/powerpc/vsx-builtin-16a.c: New test.
            * gcc.target/powerpc/vsx-builtin-16b.c: New test.
            * gcc.target/powerpc/vsx-builtin-17a.c: New test.
            * gcc.target/powerpc/vsx-builtin-17b.c: New test.
            * gcc.target/powerpc/vsx-builtin-18a.c: New test.
            * gcc.target/powerpc/vsx-builtin-18b.c: New test.
            * gcc.target/powerpc/vsx-builtin-19a.c: New test.
            * gcc.target/powerpc/vsx-builtin-19b.c: New test.
            * gcc.target/powerpc/vsx-builtin-20a.c: New test.
            * gcc.target/powerpc/vsx-builtin-20b.c: New test.
            * gcc.target/powerpc/vsx-builtin-9a.c: New test.
            * gcc.target/powerpc/vsx-builtin-9b.c: New test.
    
            2019-03-19  Kelvin Nilsen  <kelvin@gcc.gnu.org>
    
            PR target/89736
            * gcc.target/powerpc/pr87532-mc.c: Modify dejagnu directives to
            restrict this test to vsx targets.
    
    From-SVN: r270413

commit 126919cbb2b45a16181b1adb683a0ef021e33c26
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Apr 17 00:16:08 2019 +0000

    Daily bump.
    
    From-SVN: r270400

commit 4aaab76311c151b3131660a07d5de259976e38f5
Author: John David Anglin <danglin@gcc.gnu.org>
Date:   Tue Apr 16 23:21:13 2019 +0000

    re PR libfortran/79540 (FAIL: gfortran.dg/fmt_fw_d.f90   -O0  execution test)
    
            PR libgfortran/79540
            * io/write_float.def (build_float_string): Don't copy digits when
            ndigits is negative.
    
    From-SVN: r270398

commit 54f2e7003a2863505eccce9b6726acfc55ea2681
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Apr 16 00:16:08 2019 +0000

    Daily bump.
    
    From-SVN: r270375

commit bb0e17cb256b0b70abae20ad07c0d4995479782c
Author: Martin Jambor <mjambor@suse.cz>
Date:   Mon Apr 15 16:31:57 2019 +0200

    Reorganize cgraph_node::clone_of_p
    
    2019-04-15  Martin Jambor  <mjambor@suse.cz>
    
            PR ipa/89693
            * cgraph.c (clone_of_p): Loop over clone chain for each step in
            the thunk chain.
    
            testsuite/
            * g++.dg/ipa/pr89693.C: New test.
    
    From-SVN: r270371

commit 01a0bcbc39eafc16c3da163b2a70fe7d336307b2
Author: Martin Liska <mliska@suse.cz>
Date:   Mon Apr 15 10:53:24 2019 +0200

    Backport r268060
    
    2019-04-15  Martin Liska  <mliska@suse.cz>
    
            Backport from mainline
            2019-01-18  Martin Liska  <mliska@suse.cz>
                        Richard Biener  <rguenther@suse.de>
    
            PR middle-end/88587
            * cgraph.h (create_version_clone_with_body): Add new argument
            with attributes.
            * cgraphclones.c (cgraph_node::create_version_clone): Add
            DECL_ATTRIBUTES to a newly created decl.  And call
            valid_attribute_p so that proper cl_target_optimization_node
            is set for the newly created declaration.
            * multiple_target.c (create_target_clone): Set DECL_ATTRIBUTES
            for declaration.
            (expand_target_clones): Do not call valid_attribute_p, it must
            be already done.
            * tree-inline.c (copy_decl_for_dup_finish): Reset mode for
            vector types.
    2019-04-15  Martin Liska  <mliska@suse.cz>
    
            Backport from mainline
            2019-01-18  Martin Liska  <mliska@suse.cz>
    
            PR middle-end/88587
            * g++.target/i386/pr88587.C: New test.
            * gcc.target/i386/mvc13.c: New test.
    
    From-SVN: r270365

commit 2c11c80a4eae9c7e2d5f9e1a572ed49ce0f44146
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Apr 15 00:16:13 2019 +0000

    Daily bump.
    
    From-SVN: r270357

commit 4db13ae70bb628d6d7543955078a2f608e863337
Author: Thomas Koenig <tkoenig@gcc.gnu.org>
Date:   Sun Apr 14 12:17:42 2019 +0000

    re PR fortran/87352 (Large stack usage with new gfortran)
    
    2019-04-14  Thomas Koenig  <tkoenig@gcc.gnu.org>
    
            PR fortran/87352
            Backport from trunk
            * gfortran.h (gfc_component): Add finalized field.
            * class.c (finalize_component): If the component is already
            finalized, return early.  Set component->finalized on exit.
    
    2019-04-14  Thomas Koenig  <tkoenig@gcc.gnu.org>
    
            Backport from trunk
            PR fortran/87352
            * gfortran.dg/finalize_28.f90: Adjust count of __builtin_free.
            * gfortran.dg/finalize_34.f90: New test.
    
    From-SVN: r270351

commit f64c618542b150f878b2489333c9d04f27aa3c55
Author: Thomas Koenig <tkoenig@gcc.gnu.org>
Date:   Sun Apr 14 11:26:18 2019 +0000

    backport: re PR fortran/89981 (gfortran -pedantic rejects code in 8.3.1 that is accepted with 8.3.0)
    
    2019-04-14  Thomas Koenig  <tkoenig@gcc.gnu.org>
    
        Backport from trunk
        PR fortran/89981
        * resolve.c (resolve_global_procedure): If the global symbol is an
        ENTRY, also look up its name among the entries.
    
    2019-04-14  Thomas Koenig  <tkoenig@gcc.gnu.org>
    
        Backport from trunk
        PR fortran/89981
        * gfortran.dg/entry_22.f90: New test.
    
    From-SVN: r270350

commit 06454ab969a04afe67643901abec6e73be0b922b
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Apr 14 00:16:12 2019 +0000

    Daily bump.
    
    From-SVN: r270343

commit 53a3543802e9d6605228cc07ab61751c5789e356
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Apr 13 00:16:30 2019 +0000

    Daily bump.
    
    From-SVN: r270334

commit cac9c744f35d9589a6bf62c1c9a98ffc41699b36
Author: Matthew Malcomson <matmal01@gcc.gnu.org>
Date:   Fri Apr 12 13:09:17 2019 +0000

    Revert r270279
    
    This patch was applied on the wrong branch.
    
    From-SVN: r270315

commit 27d48c25f919f58577846cc641eacbad65debcf9
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Apr 12 00:16:27 2019 +0000

    Daily bump.
    
    From-SVN: r270298

commit 1caa5cc4397da862c14bb139feb0330a56b84131
Author: Matthew Malcomson <matthew.malcomson@arm.com>
Date:   Thu Apr 11 10:12:50 2019 +0000

    [testsuite][arm] Update warning prune regex
    
    r269586 changed the format of some warning messages.
    
    Each switch in the warning message is now surrounded by single quotes.
    
    This commit updates the regex's in arm.exp dejagnu files to match the
    new format and remove the extra 20+ FAILs on excess errors that are
    introduced on certain variations (e.g.
    arm-eabi-aem/-marm/-march=armv7-a/-mfpu=vfpv3-d16/-mfloat-abi=softfp).
    
    Regtested arm.exp with cross-compiler arm-none-eabi
    
    gcc/testsuite/ChangeLog:
    
    2019-04-11  Matthew Malcomson  <matthew.malcomson@arm.com>
    
            * g++.target/arm/arm.exp: Change format of default prune regex.
            * gcc.target/arm/arm.exp: Change format of default prune regex.
    
    From-SVN: r270279

commit fd64e33c768d67cbaa2e03e6f0ce8fc08ac92f9e
Author: Richard Biener <rguenther@suse.de>
Date:   Thu Apr 11 07:31:58 2019 +0000

    re PR tree-optimization/90018 (r265453 miscompiled 527.cam4_r in SPEC CPU 2017)
    
    2019-04-11  Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/90018
            * tree-vect-data-refs.c (vect_preserves_scalar_order_p):
            Test both SLP and interleaving variants.
    
            * gcc.dg/vect/pr90018.c: New testcase.
    
    From-SVN: r270274

commit 3a20bc2dde898e48b36b1a19d0edaa0dbd8ff3af
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Apr 11 00:16:24 2019 +0000

    Daily bump.
    
    From-SVN: r270270

commit a744809bf34777ef363f90ddb93fb93f054b3a5f
Author: Harald Anlauf <anlauf@gmx.de>
Date:   Wed Apr 10 20:26:44 2019 +0000

    backport: re PR fortran/89904 (ICE in gfortran starting with r270045)
    
    2019-04-10  Harald Anlauf  <anlauf@gmx.de>
    
            Backport from trunk
            PR fortran/89904
            * check.c (gfc_check_transfer): Reject procedures as actual
            arguments for SOURCE and MOLD of TRANSFER intrinsic.
    
            PR fortran/89904
            * gfortran.dg/pr85797.f90: Adjust testcase.
    
    From-SVN: r270265

commit f32e9be185b618750217e593583373dd31ea7fe2
Author: Matthew Malcomson <matthew.malcomson@arm.com>
Date:   Wed Apr 10 13:41:21 2019 +0000

    Backport of r270226 from mainline to gcc-8-branch
    
    
    The "*neon_mov<mode>" patterns for 128 bit sized quantities uses the "Dn"
    constraint to match vmov.f32 and vmov.i<vec-width> patterns.
    This constraint boils down to using the `neon_immediate_valid` function.
    Once the constraint has matched, the output C statement asserts that function
    passes.
    
    The output C statement calls `neon_immediate_valid` with the mode taken from the
    iterator, while the constraint takes the mode from the operand.
    This can cause a discrepency when the operand is a CONST_INT, as the constraint
    passes VOIDmode which `neon_immediate_valid` treats as DImode, while the C
    statement passes the mode of the iterator which can be TImode.
    When this happens, the `neon_immediate_valid` can fail in the second call (if
    e.g. the CONST_INT is a valid immediate in DImode but not TImode) which would
    trigger the assertion.
    
    The testcase added with this patch triggers this when compiled with an arm cross
    compiler using the command line below.
    gcc -march=armv8-a -c neon-immediate-timode.c -O1 -mfloat-abi=hard -mfpu=neon-fp-armv8
    
    This patch splits the original "Dn" constraint into three new constraints, "DN"
    for TImode CONST_INT, "Dn" for DImode CONST_INT, and "Dm" for CONST_VECTOR.
    Splitting things up this way requires using one extra alternative in the
    "*neon_mov<mode>" patterns, but makes it clear from the constraint what mode is
    being used.
    
    We also remove the behaviour of treating VOIDmode as DImode in
    `neon_valid_immediate` since the original "Dn" constraint was the only place
    that functionality was used.  VOIDmode is now never passed to that function.
    An assertion has been added to the function to ensure this problem is caught
    earlier on.
    
    bootstrapped and regtested on arm-none-linux-gnueabihf
    
    gcc/ChangeLog:
    
    2019-04-10  Matthew Malcomson  <matthew.malcomson@arm.com>
    
            PR target/90024
            * config/arm/arm.c (neon_valid_immediate): Disallow VOIDmode parameter.
            * config/arm/constraints.md (Dm, DN, Dn): Split previous Dn constraint
            into three.
            * config/arm/neon.md (*neon_mov<mode>): Account for TImode and DImode
            differences directly.
            (*smax<mode>3_neon, vashl<mode>3, vashr<mode>3_imm): Use Dm constraint.
    
    gcc/testsuite/ChangeLog:
    
    2019-04-10  Matthew Malcomson  <matthew.malcomson@arm.com>
    
            PR target/90024
            * gcc.dg/torture/neon-immediate-timode.c: New test.
    
    From-SVN: r270254

commit 4207a467e5f7fcde16a543c94846aecdcd801c06
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Apr 10 00:16:10 2019 +0000

    Daily bump.
    
    From-SVN: r270244

commit a4ba8ee9c372058a0413638be25a5847adeb5255
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Tue Apr 9 19:29:49 2019 +0000

    c-ada-spec.c (print_destructor): Deal with deleting destructors.
    
            * c-ada-spec.c (print_destructor): Deal with deleting destructors.
            (dump_ada_declaration) <FUNCTION_DECL>: Likewise.
    
    From-SVN: r270240

commit 3f170e2fbd6b32fafa91dd541cc8d424c33972ad
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Apr 9 00:16:15 2019 +0000

    Daily bump.
    
    From-SVN: r270218

commit 1380678b5d0ab4d59f29b01ef22a1253c282c072
Author: Claudiu Zissulescu <claziss@synopsys.com>
Date:   Mon Apr 8 09:49:41 2019 +0200

    Backport ARC patch.
    
    From-SVN: r270200

commit b7f408b52260e098d6ec042575c7e7fe24b35938
Author: Uros Bizjak <ubizjak@gmail.com>
Date:   Mon Apr 8 05:59:50 2019 +0200

    re PR target/89945 (ICE in gen_lowpart_general, at rtlhooks.c:63)
    
            PR target/89945
            * config/i386/i386.md (anddi_1 to andsi_1_zext splitter):
            Avoid calling gen_lowpart with SYMBOL_REF and LABEL_REF operand.
    
    testsuite/ChangeLog:
    
            PR target/89945
            * gcc.target/i386/pr89945.c: New test.
    
    From-SVN: r270196

commit 4ffc196bf5b0756bc44994f6414c152705b0f583
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Apr 8 00:16:10 2019 +0000

    Daily bump.
    
    From-SVN: r270194

commit 746dd4c34c8d4b576536a072f2596c545becca85
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Apr 7 00:16:13 2019 +0000

    Daily bump.
    
    From-SVN: r270186

commit 08581920b2e8ca6f1e78a51abc68d361b93f11f5
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Apr 6 00:16:14 2019 +0000

    Daily bump.
    
    From-SVN: r270180

commit b0890954e7b7f8150f323aa49259b64b9f0d1bef
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Apr 5 00:16:09 2019 +0000

    Daily bump.
    
    From-SVN: r270157

commit d28f8c851f7596fcc4bb76879768dcb95773ed1f
Author: Martin Sebor <msebor@redhat.com>
Date:   Thu Apr 4 22:16:11 2019 +0000

    backport: PR middle-end/89934 - ICE on a call with fewer arguments to strncpy declared without prototype
    
    Backport from 9.0.
    
    PR middle-end/89934 - ICE on a call with fewer arguments to strncpy declared without prototype
    
    gcc/ChangeLog:
    
            PR middle-end/89934
            * gimple-ssa-warn-restrict.c (builtin_access::builtin_access): Bail
            out if the number of arguments is less than expected.
    
    gcc/testsuite/ChangeLog:
    
            PR middle-end/89934
            * gcc.dg/Wrestrict-19.c: New test.
            * gcc.dg/Wrestrict-5.c: Add comment.  Remove unused code.
    
    From-SVN: r270153

commit 8c0f65b78c602bf2836a48693bd079ffc3e9126c
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Apr 4 00:16:08 2019 +0000

    Daily bump.
    
    From-SVN: r270140

commit 615e45be73b78a6a406fd40ac5566e97266ecf6f
Author: Richard Biener <rguenther@suse.de>
Date:   Wed Apr 3 08:46:35 2019 +0000

    re PR lto/89896 (-flto=4 is confused by presence of 'all.c' in a local directory. -flto=1 is not.)
    
    2019-04-03  Richard Biener  <rguenther@suse.de>
    
            PR lto/89896
            * lto-wrapper.c (run_gcc): Avoid implicit rules making
            the all target phony.
    
    From-SVN: r270113

commit 022b7173b7c51a95975892f7d54b6fd848ef0c12
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Apr 3 00:16:08 2019 +0000

    Daily bump.
    
    From-SVN: r270109

commit 27318dce16b8078a9b02d5dea56dc41f6c994ba9
Author: Uros Bizjak <ubizjak@gmail.com>
Date:   Tue Apr 2 20:37:14 2019 +0200

    re PR target/89902 (ICE: in extract_insn, at recog.c:2310: unrecognizable insn with -mavx512bitalg)
    
            PR target/89902
            PR target/89903
            * config/i386/i386.c (dimode_scalar_to_vector_candidate_p):
            Return false for variable DImode shifts.
            (dimode_scalar_chain::compute_convert_gain): Do not handle
            register count operand in variable DImode shifts.
            (dimode_scalar_chain::make_vector_copies): Remove support to copy
            count argument of a variable shift instruction to a vector register.
            (dimode_scalar_chain::convert_reg): Remove support to convert
            count argument of a variable shift instruction.
    
    testsuite/ChangeLog:
    
            PR target/89902
            PR target/89903
            * gcc.target/i386/pr70799-4.c: Remove.
            * gcc.target/i386/pr70799-5.c: Remove.
            * gcc.target/i386/pr89902.c: New test.
            * gcc.target/i386/pr89903.c: Ditto.
    
    From-SVN: r270104

commit fa5f699ffd682f482863ba18abcd7fbe9ab0c10b
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Apr 2 00:16:18 2019 +0000

    Daily bump.
    
    From-SVN: r270071

commit 7ab0e4cddbe11f63d1504b39e6314e0ff9635b47
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Apr 1 00:16:15 2019 +0000

    Daily bump.
    
    From-SVN: r270050

commit ad6c554d83b82906d176a35ca74104cc53e13678
Author: Harald Anlauf <anlauf@gmx.de>
Date:   Sun Mar 31 19:08:23 2019 +0000

    re PR fortran/83515 (ICE: Invalid expression in gfc_element_size)
    
    2019-03-31  Harald Anlauf  <anlauf@gmx.de>
    
            PR fortran/83515
            PR fortran/85797
            * trans-types.c (gfc_typenode_for_spec): Handle conversion for
            procedure pointers.
            * target-memory.c (gfc_element_size): Handle size determination
            for procedure pointers.
    
            PR fortran/83515
            PR fortran/85797
            * gfortran.dg/pr85797.f90: New test.
    
    From-SVN: r270046

commit e51549b7d27603fd7754407cd02bf3384b91e529
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Mar 31 00:16:13 2019 +0000

    Daily bump.
    
    From-SVN: r270040

commit 6c4523304dd8078bcf253e02cbabbaf0aec5740b
Author: Thomas Koenig <tkoenig@gcc.gnu.org>
Date:   Sat Mar 30 13:45:47 2019 +0000

    re PR fortran/89866 ([F08] wrong-code problem with POINTER, INTENT(IN) argument)
    
    2019-03-30  Thomas Koenig  <tkoenig@gcc.gnu.org>
    
            PR fortran/89866
            * gfortran.dg/pointer_intent_8.f90: New test.
    
    From-SVN: r270035

commit 04fa57cc9e7f09cba3a0a6171edcfdb701e113bf
Author: Thomas Koenig <tkoenig@gcc.gnu.org>
Date:   Sat Mar 30 13:23:38 2019 +0000

    re PR fortran/78865 (ICE in create_tmp_var, at gimple-expr.c:473)
    
    2019-03-30  Thomas Koenig  <tkoenig@gcc.gnu.org>
    
            PR fortran/78865
            Backport from trunk
            * interface.c (compare_actual_formal): Change errors about
            missing or extra to gfc_error_now to make sure they are issued.
            Change "spec" to "specifier" in message.
            * resolve.c (resolve_global_procedure): Also check for mismatching
            interface with global symbols if the namespace has already been
            resolved.
    
    2019-03-30  Thomas Koenig  <tkoenig@gcc.gnu.org>
    
            PR fortran/78865
            Backport from trunk
            * gfortran.dg/altreturn_10.f90: New test.
            * gfortran.dg/whole_file_3.f90: Change dg-warning to dg-error.
    
    From-SVN: r270032

commit f0af53ecca0d5c3fa6bbcba7e31b8190b5d0ecca
Author: Kugan Vivekanandarajah <kuganv@linaro.org>
Date:   Sat Mar 30 04:28:51 2019 +0000

    backport: re PR rtl-optimization/89862 (LTO bootstrap fails for ARM)
    
    
    2019-03-29  Kugan Vivekanandarajah  <kuganv@linaro.org>
    
            Backport from mainline
            2019-03-29  Kugan Vivekanandarajah  <kuganv@linaro.org>
                        Eric Botcazou  <ebotcazou@adacore.com>
    
            PR rtl-optimization/89862
            * rtl.h (word_register_operation_p): Exclude CONST_INT from operations
            that operates on the full registers for WORD_REGISTER_OPERATIONS
            architectures.
    
    From-SVN: r270031

commit a00205ea9371a5dd767f9504ef8f947741a94f66
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Mar 30 00:16:14 2019 +0000

    Daily bump.
    
    From-SVN: r270028

commit 0af75065af75943c86ee9e49d7f3bedb820ddba8
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Mar 29 00:16:27 2019 +0000

    Daily bump.
    
    From-SVN: r270011

commit abc14cd3ce0aed09426193c8e0a2b706950bdfe3
Author: Uros Bizjak <ubizjak@gmail.com>
Date:   Thu Mar 28 22:38:44 2019 +0100

    re PR target/89848 (ICE: in convert_op, at config/i386/i386.c:2099 with -O2 -msse2 -mtune=pentium3m)
    
            PR target/89848
            * config/i386/i386.c (dimode_scalar_chain::make_vector_copies):
            Also process XEXP (src, 0) of a shift insn.
    
    testsuite/ChangeLog:
    
            PR target/89848
            * gcc.target/i386/pr89848.c: New test.
    
    From-SVN: r270008

commit 727ed09ac018a5c1de53b47936242a09449b7613
Author: Martin Liska <mliska@suse.cz>
Date:   Thu Mar 28 09:51:46 2019 +0100

    Backport r265786
    
    2019-03-28  Martin Liska  <mliska@suse.cz>
    
            Backport from mainline
            2018-11-05  Martin Liska  <mliska@suse.cz>
    
            PR web/87829
            * doc/invoke.texi: Remove options that are
            not disabled with -Os.
    
    From-SVN: r269986

commit e57986893119f5e90280cbadfd0ae3f012839d32
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Mar 28 00:16:10 2019 +0000

    Daily bump.
    
    From-SVN: r269982

commit b3d59cf6b226d1aa672c671acda62251ffbf0985
Author: Uros Bizjak <ubizjak@gmail.com>
Date:   Wed Mar 27 20:14:35 2019 +0100

    re PR target/89827 (ICE: in convert_op, at config/i386/i386.c:2098 with -Os -maes)
    
            PR target/89827
            * config/i386/i386.c (dimode_scalar_chain::convert_reg):
            Also process XEXP (src, 0) of a shift insn.
    
    testsuite/ChangeLog:
    
            PR target/89827
            * gcc.target/i386/pr89827.c: New test.
    
    From-SVN: r269975

commit ecbe1853c0583267374c0aa815889c53a631a16b
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Mar 27 00:16:11 2019 +0000

    Daily bump.
    
    From-SVN: r269957

commit f8522a47d956eeadeff568123103b30ed0258bc0
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Mar 26 00:16:15 2019 +0000

    Daily bump.
    
    From-SVN: r269930

commit a2f7471f0f2d5dc284efe285b37e3bff792f24b4
Author: Andreas Krebbel <krebbel@gcc.gnu.org>
Date:   Mon Mar 25 10:18:57 2019 +0000

    S/390: Fix PR89775. Stackpointer save/restore instructions removed
    
    Even if a global register is being clobbered in a function we usually
    do not save and restore it. However, we still have to do this if it is
    a special register. Most of the places in the backend handle this
    correctly but not the prologue/epilogue optimization.
    
    gcc/ChangeLog:
    
    2019-03-25  Andreas Krebbel  <krebbel@linux.ibm.com>
    
            Backport from mainline
            2019-03-20  Andreas Krebbel  <krebbel@linux.ibm.com>
    
            PR target/89775
            * config/s390/s390.c (global_not_special_regno_p): Move to make it
            available to ...
            (s390_optimize_register_info): Use global_not_special_regno_p to
            check for global regs.
    
    2019-03-25  Andreas Krebbel  <krebbel@linux.ibm.com>
    
            Backport from mainline
            2019-03-20  Jakub Jelinek  <jakub@redhat.com>
    
            PR target/89775
            * gcc.target/s390/pr89775-1.c: New test.
            * gcc.target/s390/pr89775-2.c: New test.
    
    From-SVN: r269910

commit 393336c3083e8716f09a5a2fcae7d3fb870de31c
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Mar 25 00:16:37 2019 +0000

    Daily bump.
    
    From-SVN: r269904

commit f06a521de6bcc604937a61c11d982c2630e9c1cc
Author: Janus Weil <janus@gcc.gnu.org>
Date:   Sun Mar 24 19:08:10 2019 +0100

    re PR fortran/71861 ([F03] ICE in write_symbol(): bad module symbol)
    
    fix PR 71861
    
    2019-03-24  Janus Weil  <janus@gcc.gnu.org>
    
            PR fortran/71861
            * symbol.c (check_conflict): ABSTRACT attribute conflicts with
            INTRINSIC attribute.
    
    2019-03-24  Janus Weil  <janus@gcc.gnu.org>
    
            PR fortran/71861
            * gfortran.dg/interface_abstract_5.f90: New test case.
    
    From-SVN: r269898

commit b84746705e4227f151113ca1c16ad6e242fd2bb9
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Mar 24 00:16:11 2019 +0000

    Daily bump.
    
    From-SVN: r269893

commit a69d724d924f39cdeb1828afbbbe5d9352b1cc13
Author: Thomas Koenig <tkoenig@gcc.gnu.org>
Date:   Sat Mar 23 15:58:25 2019 +0000

    re PR fortran/68009 (prototype for gfortran_runtime_error with inline matmul)
    
    2019-03-23  Thomas Koenig  <tkoeng@gcc.gnu.org>
    
        PR fortran/68009
        Backport from trunk
        * iresolve.c: Include trans.h.
        (gfc_resolve_fe_runtine_error): Set backend_decl on
        resolved_sym.
    
    From-SVN: r269889

commit 4803134cb2c7484e43eae4242a8018ea7d81a37e
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Mar 23 00:16:21 2019 +0000

    Daily bump.
    
    From-SVN: r269884

commit 2103666b2f9e790b9e319ee55cc3857fe670f764
Author: William Schmidt <wschmidt@gcc.gnu.org>
Date:   Fri Mar 22 13:58:10 2019 +0000

    2019-03-22 Backport from mainline
    
    [gcc]
    
    2019-03-22  Backport from mainline
    
            2019-03-22  Bill Schmidt  <wschmidt@linux.ibm.com>
    
            * config/rs6000/mmintrin.h (_mm_sub_pi32): Fix typo.
    
    [gcc/testsuite]
    
    2019-03-22  Backport from mainline
    
            2019-03-22  Bill Schmidt  <wschmidt@linux.ibm.com>
    
            * gcc.target/powerpc/mmx-psubd-2.c: Test _m_psubd.
    
    From-SVN: r269872

commit b09f744438c4b6b28656f2af675cab9e79f01ec9
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Mar 22 00:16:11 2019 +0000

    Daily bump.
    
    From-SVN: r269865

commit 2c315207c4099ee235218d3ef8b4c9b0903790e1
Author: Thomas Schwinge <thomas@codesourcery.com>
Date:   Thu Mar 21 20:31:09 2019 +0100

    [testsuite] Fix 'dg-compile-aux-modules' diagnostic
    
            gcc/testsuite/
            PR fortran/56408
            * gcc.target/powerpc/ppc-fortran/ppc-fortran.exp
            (dg-compile-aux-modules): Fix diagnostic.
            * gfortran.dg/coarray/caf.exp (dg-compile-aux-modules): Likewise.
            * gfortran.dg/dg.exp (dg-compile-aux-modules): Likewise.
    
    trunk r269851
    
    From-SVN: r269852

commit 3d1087e8976e18dd390da91d5864361e00fb5503
Author: Thomas Schwinge <thomas@codesourcery.com>
Date:   Thu Mar 21 20:16:54 2019 +0100

    [testsuite, Fortran] Apply DejaGnu 1.4.4 work-around also to 'gfortran.dg/coarray/caf.exp:dg-compile-aux-modules'
    
    See trunk r215293.  This unifies all 'dg-compile-aux-modules' instances.
    
            gcc/testsuite/
            PR fortran/56408
            * gfortran.dg/coarray/caf.exp (dg-compile-aux-modules): Workaround
            missing nexted dg-test call support in dejaGNU 1.4.4.
    
    trunk r269848
    
    From-SVN: r269849

commit a79a49d423a4a134fe5041cd3246c20cdad43e30
Author: Thomas Schwinge <thomas@codesourcery.com>
Date:   Thu Mar 21 19:57:39 2019 +0100

    [testsuite, Fortran] Consistently set 'DEFAULT_FFLAGS'
    
    In the same 'runtest' instance, 'global' variables persist from one '*.exp'
    file to another.
    
    All other '*.exp' files are using " -pedantic-errors" instead of the empty
    string as the default for 'DEFAULT_FFLAGS'.  Thus this setting of
    'DEFAULT_FFLAGS' is not idempotent, depends on whether
    'gfortran.dg/ieee/ieee.exp', or an other defining '*.exp' file is executed
    first.
    
            gcc/testsuite/
            PR fortran/29383
            * gfortran.dg/ieee/ieee.exp (DEFAULT_FFLAGS): Set the same as in
            other '*.exp' files.
    
    trunk r269845
    
    From-SVN: r269846

commit 6fb4307a997faf4bddf1ed4fc35bf63614e6b6ea
Author: Bill Schmidt <wschmidt@linux.ibm.com>
Date:   Thu Mar 21 17:04:54 2019 +0000

    backport: rs6000-p8swap.c (rs6000_analyze_swaps): Rebuild ud- and du-chains between phases.
    
    2019-03-21  Bill Schmidt  <wschmidt@linux.ibm.com>
    
            Backport from mainline
            2019-03-08  Bill Schmidt  <wschmidt@linux.ibm.com>
    
            * config/rs6000/rs6000-p8swap.c (rs6000_analyze_swaps): Rebuild
            ud- and du-chains between phases.
    
    From-SVN: r269842

commit ccad8ad6eef9a7ba529028f77a0c5d4f45fae078
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Mar 21 00:16:08 2019 +0000

    Daily bump.
    
    From-SVN: r269830

commit 203a4e446b9a0927991bca61cfc5725ee7de744b
Author: Florian Weimer <fweimer@redhat.com>
Date:   Wed Mar 20 11:42:35 2019 +0100

    PR libgcc/60790: x86: Do not assume ELF constructors run before IFUNC resolvers
    
            * config/x86/host-config.h (libat_feat1_ecx, libat_feat1_edx):
            Remove declarations.
            (__libat_feat1, __libat_feat1_init): Declare.
            (FEAT1_REGISTER): Define.
            (load_feat1): New function.
            (IFUNC_COND_1): Adjust.
            * config/x86/init.c (libat_feat1_ecx, libat_feat1_edx)
            (init_cpuid): Remove definitions.
            (__libat_feat1): New variable.
            (__libat_feat1_init): New function.
    
    From-SVN: r269818

commit fc13a7c55327e41ddbb29a3e8dd3e8b9c40dfd77
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Mar 20 00:16:12 2019 +0000

    Daily bump.
    
    From-SVN: r269816

commit 984b0e5f8589e443f6251ec00bb02b70d111a088
Author: Richard Biener <rguenther@suse.de>
Date:   Tue Mar 19 17:46:22 2019 +0000

    re PR debug/88389 (-flto -g -gsplit-dwarf is broken)
    
    2019-03-19  Richard Biener  <rguenther@suse.de>
    
            PR debug/88389
            * opts.c (finish_options): Disable -gsplit-dwarf when doing LTO.
    
    From-SVN: r269808

commit 0d4a6e5eb12140d1bb53c7ab58bac26a3c4f97e4
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Tue Mar 19 08:10:08 2019 +0000

    re PR rtl-optimization/89753 (ICE in unroll_loop_constant_iterations, at loop-unroll.c:498)
    
            PR rtl-optimization/89753
            * loop-unroll.c (decide_unroll_constant_iterations): Make guard for
            explicit unrolling factor even more robust.
    
    From-SVN: r269792

commit d9995d061f3cdcd7780a8724b8d0e88b6215ab9b
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Mar 19 00:16:08 2019 +0000

    Daily bump.
    
    From-SVN: r269787

commit b90874c743b2ec4abe7db0a88299ca242d46bd15
Author: Martin Sebor <msebor@redhat.com>
Date:   Mon Mar 18 19:44:02 2019 +0000

    backport: PR middle-end/88273 - [8/9 Regression] warning: 'memcpy' offset [-527, -529]
    
    Backport from mainline:
    
    PR middle-end/88273 - [8/9 Regression] warning: 'memcpy' offset [-527, -529]
    is out of the bounds [0, 16]
    
    gcc/ChangeLog:
    
            PR middle-end/88273
            * gimple-ssa-warn-restrict.c (builtin_memref::extend_offset_range):
            Handle anti-ranges the same as no range at all.
    
    gcc/testsuite/ChangeLog:
    
            PR middle-end/88273
            * gcc.dg/Warray-bounds-38.c: New test.
    
    From-SVN: r269778

commit 340ea86dd20a8fec64aa5eb24375057598b297ca
Author: Martin Jambor <mjambor@suse.cz>
Date:   Mon Mar 18 12:31:52 2019 +0100

    Add forgotten requeing in propagate_subaccesses_across_link
    
    2019-03-18  Martin Jambor  <mjambor@suse.cz>
    
            PR tree-optimization/89546
            * tree-sra.c (propagate_subaccesses_across_link): Requeue new_acc if
            any propagation to its children took place.
    
            testsuite/
            * gcc.dg/tree-ssa/pr89546.c: New test.
    
    From-SVN: r269762

commit caec5068d81fac366e5bedb78b06fae5e4a4c78b
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Mar 18 00:16:13 2019 +0000

    Daily bump.
    
    From-SVN: r269748

commit 66716547b4667744ad29f8f02ad092a00acf6a89
Author: Thomas Koenig <tkoenig@gcc.gnu.org>
Date:   Sun Mar 17 12:45:33 2019 +0000

    re PR fortran/84394 (compiler error when using modules with derived types in block data subprograms)
    
    2019-03-17  Thomas Koenig  <tkoenig@gcc.gnu.org>
    
            PR fortran/84394
            Backport from trunk
            * symbol.c (gfc_add_subroutine): If we are encountering a
            subrtoutine within a BLOCK DATA and the name starts with an
            underscore, do not check.
    
    2019-03-17  Thomas Koenig  <tkoenig@gcc.gnu.org>
    
            PR fortran/84394
            Backport from trunk
            * gfortran.dg/blockdata_11.f90: New test.
    
    From-SVN: r269740

commit 91ae6985cc3a19e03ee5345877d19a7c412c56b8
Author: H.J. Lu <hongjiu.lu@intel.com>
Date:   Sun Mar 17 09:11:22 2019 +0000

    x32: Add addr32 prefix to VSIB address
    
    32-bit indices in VSIB address are sign-extended to 64 bits.  In x32,
    when 32-bit indices are used as addresses, like in
    
    vgatherdps %ymm7, 0(,%ymm9,1), %ymm6
    
    32-bit indices, 0xf7fa3010, is sign-extended to 0xfffffffff7fa3010 which
    is invalid address.  Add addr32 prefix to UNSPEC_VSIBADDR instructions
    for x32 if there is no base register nor symbol.
    
    This fixes 175.vpr and 254.gap in SPEC CPU 2000 on x32 with
    
    -Ofast -funroll-loops -march=haswell
    
    gcc/
    
            Backport from mainline
            2019-03-14  H.J. Lu  <hongjiu.lu@intel.com>
    
            PR target/89523
            * config/i386/i386.c (ix86_print_operand): Handle 'M' to add
            addr32 prefix to VSIB address for X32.
            * config/i386/sse.md (*avx512pf_gatherpf<mode>sf_mask): Prepend
            "%M2" to opcode.
            (*avx512pf_gatherpf<mode>df_mask): Likewise.
            (*avx512pf_scatterpf<mode>sf_mask): Likewise.
            (*avx512pf_scatterpf<mode>df_mask): Likewise.
            (*avx2_gathersi<mode>): Prepend "%M3" to opcode.
            (*avx2_gathersi<mode>_2): Prepend "%M2" to opcode.
            (*avx2_gatherdi<mode>): Prepend "%M3" to opcode.
            (*avx2_gatherdi<mode>_2): Prepend "%M2" to opcode.
            (*avx2_gatherdi<mode>_3): Prepend "%M3" to opcode.
            (*avx2_gatherdi<mode>_4): Prepend "%M2" to opcode.`
            (*avx512f_gathersi<mode>): Prepend "%M4" to opcode.
            (*avx512f_gathersi<mode>_2): Prepend "%M3" to opcode.
            (*avx512f_gatherdi<mode>): Prepend "%M4" to opcode.
            (*avx512f_gatherdi<mode>_2): Prepend "%M3" to opcode.
            (*avx512f_scattersi<mode>): Prepend "%M0" to opcode.
            (*avx512f_scatterdi<mode>): Likewise.
    
    gcc/testsuite/
    
            Backport from mainline
            2019-03-14  H.J. Lu  <hongjiu.lu@intel.com>
    
            PR target/89523
            * gcc.target/i386/pr89523-1a.c: New test.
            * gcc.target/i386/pr89523-1b.c: Likewise.
            * gcc.target/i386/pr89523-2.c: Likewise.
            * gcc.target/i386/pr89523-3.c: Likewise.
            * gcc.target/i386/pr89523-4.c: Likewise.
            * gcc.target/i386/pr89523-5.c: Likewise.
            * gcc.target/i386/pr89523-6.c: Likewise.
            * gcc.target/i386/pr89523-7.c: Likewise.
            * gcc.target/i386/pr89523-8.c: Likewise.
            * gcc.target/i386/pr89523-9.c: Likewise.
    
    From-SVN: r269738

commit 5c70de32ee25f494bab2283dc1961b8c2a063a76
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Mar 17 00:16:09 2019 +0000

    Daily bump.
    
    From-SVN: r269736

commit 322201c852bbb73cbb89c025d13d84742ac4dd8d
Author: Thomas Koenig <tkoenig@gcc.gnu.org>
Date:   Sat Mar 16 13:52:19 2019 +0000

    re PR fortran/66089 (elemental dependency mishandling when class array are involved)
    
    2019-03-16  Thomas Koenig  <tkoenig@gcc.gnu.org>
    
            PR fortran/66089
            Backport from trunk
            * trans-array.c (gfc_scalar_elemental_arg_saved_as_reference):
            Return false if a scalar tempoary is needed.
            (gfc_walk_variable_expr): Fix up class refs.
    
    2019-03-16  Thomas Koenig  <tkoenig@gcc.gnu.org>
    
            PR fortran/66089
            Backport from trunk
            * gfortran.dg/dependency_53.f90: New test.
            * gfortran.dg/assumed_type_2.f90: Adapted tree dumps.
            * gfortran.dg/no_arg_check_2.f90: Likewise.
    
    From-SVN: r269724

commit f93af96808e316a05e8771ebb6f4b87ea401a1b9
Author: Thomas Koenig <tkoenig@gcc.gnu.org>
Date:   Sat Mar 16 13:16:11 2019 +0000

    re PR fortran/66695 ([F03] ICE with binding-name equal to the name of a use-associated procedure)
    
    2019-03-16  Thomas Koenig  <tkoenig@gcc.gnu.org>
    
            PR fortran/66695
            PR fortran/77746
            PR fortran/79485
            Backport from trunk
            * gfortran.h (gfc_symbol): Add bind_c component.
            (gfc_get_gsymbol): Add argument bind_c.
            * decl.c (add_global_entry): Add bind_c argument to
            gfc_get_symbol.
            * parse.c (parse_block_data): Likewise.
            (parse_module): Likewise.
            (add_global_procedure): Likewise.
            (add_global_program): Likewise.
            * resolve.c (resolve_common_blocks): Likewise.
            (resolve_global_procedure): Likewise.
            (gfc_verify_binding_labels): Likewise.
            * symbol.c (gfc_get_gsymbol): Add argument bind_c. Set bind_c
            in gsym.
            * trans-decl.c (gfc_get_module_backend_decl): Add bind_c argument
            to gfc_get_symbol.
            (gfc_get_extern_function_decl): If the sym has a binding label
            and it cannot be found in the global symbol tabel, it is the wrong
            one and vice versa.
    
    2019-03-16 Thomas Koenig  <tkoenig@gcc.gnu.org>
    
            PR fortran/66695
            PR fortran/77746
            PR fortran/79485
            Backport from trunk
            * gfortran.dg/binding_label_tests_30.f90: New test.
            * gfortran.dg/binding_label_tests_31.f90: New test.
            * gfortran.dg/binding_label_tests_32.f90: New test.
            * gfortran.dg/binding_label_tests_33.f90: New test.
    
    From-SVN: r269722

commit 7163dd05275c2a9be6899260a645a9495b9b2a22
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Mar 16 00:16:18 2019 +0000

    Daily bump.
    
    From-SVN: r269719

commit 8d935c414edaddc3cc4fd937f754ecb24c6ee0a9
Author: Richard Biener <rguenther@suse.de>
Date:   Fri Mar 15 11:07:53 2019 +0000

    backport: [multiple changes]
    
    2019-03-15  Richard Biener  <rguenther@suse.de>
    
            Backport from mainline
            2019-03-06  Richard Biener  <rguenther@suse.de>
    
            PR testsuite/89551
            * gcc.dg/uninit-pred-8_b.c: Force logical-op-non-short-circuit
            the way that makes the testcase PASS.
    
            2018-11-30  Jakub Jelinek  <jakub@redhat.com>
    
            PR testsuite/85368
            * params.def (PARAM_LOGICAL_OP_NON_SHORT_CIRCUIT): New param.
            * tree-ssa-ifcombine.c (ifcombine_ifandif): If
            --param logical-op-non-short-circuit is present, override
            LOGICAL_OP_NON_SHORT_CIRCUIT value from the param.
            * fold-const.c (fold_range_test, fold_truth_andor): Likewise.
    
    From-SVN: r269704

commit be90492bf75cebdb1d92fa13fcb20b9be28e2647
Author: Martin Liska <mliska@suse.cz>
Date:   Fri Mar 15 09:36:15 2019 +0100

    Subject: Backport r269684
    
    2019-03-15  Martin Liska  <mliska@suse.cz>
    
            PR other/89712
            * doc/invoke.texi: Remove -fdump-class-hierarchy option.
    
    From-SVN: r269701

commit be55c1c8d46ee9008c6fe3c08c68eaa81d0f5b13
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Mar 15 00:16:07 2019 +0000

    Daily bump.
    
    From-SVN: r269697

commit 8715f89295364e14d6b41b6ec0d1a665c02ae292
Author: Martin Jambor <mjambor@suse.cz>
Date:   Thu Mar 14 17:50:50 2019 +0100

    Zero local estimated benefit for cloning extern inline function
    
    2019-03-14  Martin Jambor  <mjambor@suse.cz>
    
            Backport from mainline
            2019-03-07  Martin Jambor  <mjambor@suse.cz>
    
            PR lto/87525
            * ipa-cp.c (perform_estimation_of_a_value): Account zero time benefit
            for extern inline functions.
    
            testsuite/
            * gcc.dg/ipa/ipcp-5.c: New test.
    
    From-SVN: r269687

commit 2552fb9d979782d5265e32f5362850e973afe380
Author: Richard Biener <rguenther@suse.de>
Date:   Thu Mar 14 09:14:30 2019 +0000

    re PR tree-optimization/89572 (ICE in dyn_cast<gcond*, gimple>(gimple*) / get_loop_exit_condition(loop const*))
    
    2019-03-14  Richard Biener  <rguenther@suse.de>
    
            PR middle-end/89572
            * tree-scalar-evolution.c (get_loop_exit_condition): Use
            safe_dyn_cast.
            * tree-ssa-loop-ivcanon.c (canonicalize_loop_induction_variables):
            Use gimple_location_safe.
    
            * gcc.dg/torture/pr89572.c: New testcase.
    
    From-SVN: r269675

commit 29363afdc38a9f1367bd50984540134a8cf76c72
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Mar 14 00:16:16 2019 +0000

    Daily bump.
    
    From-SVN: r269669

commit 76d9bf53fe6be13a51c02725f8d1d6106ef7e000
Author: Thomas Koenig <tkoenig@gcc.gnu.org>
Date:   Wed Mar 13 22:05:59 2019 +0000

    re PR fortran/87673 (Errors caused by using function for character length in allocate with typespec)
    
    2019-03-13  Thomas Koenig  <tkoenig@gcc.gnu.org>
    
            PR fortran/87673
            Backport from trunk
            * match.c (gfc_match_type_spec): Remove call to
            gfc_resolve_expr for character length.
    
    2019-03-13  Thomas Koenig  <tkoenig@gcc.gnu.org>
    
            PR fortran/87673
            Backport from trunk
            * gfortran.dg/charlen_17.f90: New test.
    
    From-SVN: r269665

commit 1bda8b5661e4786c70d890263dc4af34a7868763
Author: Vladimir Makarov <vmakarov@redhat.com>
Date:   Wed Mar 13 20:44:50 2019 +0000

    re PR target/85860 (ICE: in lra_split_hard_reg_for, at lra-assigns.c:1810: unable to find a register to spill with -flive-range-shrinkage -mbmi2)
    
    2019-03-13  Vladimir Makarov  <vmakarov@redhat.com>
    
            PR target/85860
            * lra-constraints.c (inherit_in_ebb): Update
            potential_reload_hard_regs along with live_hard_regs.
    
    2019-03-13  Vladimir Makarov  <vmakarov@redhat.com>
    
            PR target/85860
            * gcc.target/i386/pr85860.c: New.
    
    From-SVN: r269663

commit fbbfed2085940bbd2822d7ae55d96e8351127c35
Author: Richard Biener <rguenther@suse.de>
Date:   Wed Mar 13 14:08:07 2019 +0000

    backport: [multiple changes]
    
    2019-03-14  Richard Biener  <rguenther@suse.de>
    
            Backport from mainline
            2019-03-13  Richard Biener  <rguenther@suse.de>
    
            PR middle-end/89677
            * tree-scalar-evolution.c (simplify_peeled_chrec): Do not
            throw FP expressions at tree-affine.
    
            * gcc.dg/torture/pr89677.c: New testcase.
    
            2019-03-01  Richard Biener  <rguenther@suse.de>
    
            PR middle-end/89497
            * tree-cfgcleanup.h (cleanup_tree_cfg): Add SSA update flags
            argument, defaulted to zero.
            * passes.c (execute_function_todo): Pass down SSA update flags
            to cleanup_tree_cfg.
            * tree-cfgcleanup.c: Include tree-into-ssa.h and tree-cfgcleanup.h.
            (cleanup_tree_cfg_1): After cleanup_control_flow_pre update SSA
            form if requested.
            (cleanup_tree_cfg_noloop): Pass down SSA update flags.
            (cleanup_tree_cfg): Get and pass down SSA update flags.
    
            * gcc.dg/tree-ssa/reassoc-43.c: Avoid false match in regex.
            * g++.dg/tree-prof/devirt.C: Scan tracer dump for foldings
            that happen now earlier.
    
            2019-02-18  Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/89296
            * tree-ssa-loop-ch.c (ch_base::copy_headers): Restrict setting
            of no-warning flag to cases that might emit the bogus warning.
    
            * gcc.dg/uninit-pr89296.c: New testcase.
    
    From-SVN: r269650

commit f5eb41ce2d72f465fe53a33461c635f66be04a0f
Author: Andreas Krebbel <krebbel@linux.ibm.com>
Date:   Wed Mar 13 09:51:38 2019 +0000

    S/390: Fix immediate vector operands for some builtins.
    
    This fixes a problem with vec_add/sub_u128 builtins.  The
    s390_expand_builtin backend function is supposed to convert the
    operand to TImode *AND* load it into a vector register.  The current
    implementation did only the conversion and gave up then.
    
    gcc/ChangeLog:
    
    2019-03-13  Andreas Krebbel  <krebbel@linux.ibm.com>
    
            Backport from mainline
            2019-03-11  Andreas Krebbel  <krebbel@linux.ibm.com>
    
            * config/s390/s390.c (s390_expand_builtin): Do the copy_to_reg not
            only on the else branch.
    
    gcc/testsuite/ChangeLog:
    
    2019-03-13  Andreas Krebbel  <krebbel@linux.ibm.com>
    
            Backport from mainline
            2019-03-11  Andreas Krebbel  <krebbel@linux.ibm.com>
    
            * gcc.target/s390/zvector/vec-addc-u128.c: New test.
    
    From-SVN: r269643

commit 4344ab1c80fe364488ecb01021a07259df0ae5ef
Author: Andreas Krebbel <krebbel@linux.ibm.com>
Date:   Wed Mar 13 09:50:21 2019 +0000

    S/390: Fix the vec_xl / vec_xst style builtins
    
    This patch fixes several problems with the vec_xl/vec_xst builtins:
    
    - vec_xl/vec_xst needs to use the alignment of the scalar memory
      operand for the vector type reference. This is required to emit the
      proper vl/vst alignment hints.
    - vec_xl / vec_xld2 / vec_xlw4 should accept const pointer source operands
    - vec_xlw4 / vec_xstw4 needs to accept float memory operands
    
    gcc/ChangeLog:
    
    2019-03-13  Andreas Krebbel  <krebbel@linux.ibm.com>
    
            Backport from mainline
            2019-02-07  Andreas Krebbel  <krebbel@linux.ibm.com>
    
            * config/s390/s390-builtin-types.def: Add new types.
            * config/s390/s390-builtins.def: (s390_vec_xl, s390_vec_xld2)
            (s390_vec_xlw4): Make the memory operand into a const pointer.
            (s390_vec_xld2, s390_vec_xlw4): Add a variant for single precision
            float.
            * config/s390/s390-c.c (s390_expand_overloaded_builtin): Generate
            a new vector type with the alignment of the scalar memory operand.
    
    gcc/testsuite/ChangeLog:
    
    2019-03-13  Andreas Krebbel  <krebbel@linux.ibm.com>
    
            Backport from mainline
            2019-02-07  Andreas Krebbel  <krebbel@linux.ibm.com>
    
            * gcc.target/s390/zvector/xl-xst-align-1.c: New test.
            * gcc.target/s390/zvector/xl-xst-align-2.c: New test.
    
    From-SVN: r269642

commit 507c09de6df6a72306768c6a5d1cce95e79ccc1a
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Mar 13 00:16:09 2019 +0000

    Daily bump.
    
    From-SVN: r269630

commit b4f40cbff0207fe854a8f0eb36524b30a95e69cc
Author: Richard Biener <rguenther@suse.de>
Date:   Tue Mar 12 16:15:47 2019 +0000

    re PR tree-optimization/89664 (ICE in free_bb, at tree-ssa-math-opts.c:522)
    
    2019-03-12  Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/89664
            * tree-ssa-math-opts.c (execute_cse_reciprocals_1): Properly
            free the occurance tree after the early out.
    
            * gfortran.dg/pr89664.f90: New testcase.
    
    From-SVN: r269618

commit 36c4067807a4dc7cb337bf8ea35b329b98e8bd66
Author: Andre Vieira <andre.simoesdiasvieira@arm.com>
Date:   Tue Mar 12 14:52:02 2019 +0000

    Backport of r269499 and related testism fix r269596.
    
    gcc/ChangeLog:
    2019-03-12  Andre Vieira  <andre.simoesdiasvieira@arm.com>
    
            Backport from mainline
            2019-03-08  Andre Vieira  <andre.simoesdiasvieira@arm.com>
    
            * config/arm/arm.h (TARGET_FP16_TO_DOUBLE): Add TARGET_VFP_DOUBLE
            requirement.
    
    
    gcc/testsuite/ChangeLog:
    2019-03-12  Andre Vieira  <andre.simoesdiasvieira@arm.com>
    
            Backport from mainline
            2019-03-08  Andre Vieira  <andre.simoesdiasvieira@arm.com>
    
            * gcc.target/arm/f16_f64_conv_no_dp.c: New test.
    
            Backport from mainline
            2019-03-11  Christophe Lyon  <christophe.lyon@linaro.org>
    
            * gcc.target/arm/f16_f64_conv_no_dp.c: Add arm_fp16_ok effective
            target.
    
    From-SVN: r269613

commit 67e75a6dd237990b112eb5cc29f75ef6c646eac5
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Mar 12 00:16:08 2019 +0000

    Daily bump.
    
    From-SVN: r269600

commit 02f1e01af18fcbb8a3ee166a2da9e286b250fa90
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Mon Mar 11 11:40:11 2019 +0000

    re PR rtl-optimization/89588 (ICE in unroll_loop_constant_iterations, at loop-unroll.c:498)
    
            PR rtl-optimization/89588
            * loop-unroll.c (decide_unroll_constant_iterations): Make guard for
            explicit unrolling factor more robust.
    
    From-SVN: r269580

commit 6831e9e618da5a8d445c0f6051bf1d82a13ed04a
Author: Martin Liska <mliska@suse.cz>
Date:   Mon Mar 11 10:38:18 2019 +0100

    Backport r269558
    
    2019-03-11  Martin Liska  <mliska@suse.cz>
    
            Backport from mainline
            2019-03-10  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>
    
            * gcc.target/i386/indirect-thunk-extern-7.c: Add -fjump-tables to
            dg-options.
    
    From-SVN: r269573

commit 452d9af84c1674d9de78f6f6a5072bbbb9f9c0c5
Author: Martin Liska <mliska@suse.cz>
Date:   Mon Mar 11 10:38:06 2019 +0100

    Backport r269492
    
    2019-03-11  Martin Liska  <mliska@suse.cz>
    
            Backport from mainline
            2019-03-08  Martin Liska  <mliska@suse.cz>
    
            PR target/86952
            * config/i386/i386.c (ix86_option_override_internal): Disable
            jump tables when retpolines are used.
    2019-03-11  Martin Liska  <mliska@suse.cz>
    
            Backport from mainline
            2019-03-08  Martin Liska  <mliska@suse.cz>
    
            PR target/86952
            * gcc.target/i386/indirect-thunk-7.c: Use jump tables to match
            scanned pattern.
            * gcc.target/i386/indirect-thunk-inline-7.c: Likewise.
    
    From-SVN: r269572

commit 78d5083cce898d375de8cc7db3c7eda5fa62f843
Author: Martin Liska <mliska@suse.cz>
Date:   Mon Mar 11 10:37:52 2019 +0100

    Backport r268981
    
    2019-03-11  Martin Liska  <mliska@suse.cz>
    
            Backport from mainline
            2019-02-18  Martin Liska  <mliska@suse.cz>
    
            PR c++/89383
            * line-map.c (linemap_line_start): Use 1UL in order
            to not overflow.
    
    From-SVN: r269571

commit bfda391bdbd38d916e9007d35ed27abdaf7e39af
Author: Martin Liska <mliska@suse.cz>
Date:   Mon Mar 11 10:37:41 2019 +0100

    Backport r268789
    
    2019-03-11  Martin Liska  <mliska@suse.cz>
    
            Backport from mainline
            2019-02-11  David Malcolm  <dmalcolm@redhat.com>
    
            PR lto/88147
            * input.c (selftest::test_line_offset_overflow): New selftest.
            (selftest::input_c_tests): Call it.
    2019-03-11  Martin Liska  <mliska@suse.cz>
    
            Backport from mainline
            2019-02-11  Martin Liska  <mliska@suse.cz>
    
            PR lto/88147
            * line-map.c (linemap_line_start): Don't reuse the existing line
            map if the line offset is sufficiently large to cause overflow
            when computing location_t values.
    
    From-SVN: r269570

commit b9ce7ea14f9d5482b2a46b921649956563606a44
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Mar 11 00:16:09 2019 +0000

    Daily bump.
    
    From-SVN: r269564

commit 8cf9a9b7995b0a3ef5fda16fa3177f18d503ba92
Author: Thomas Koenig <tkoenig@gcc.gnu.org>
Date:   Sun Mar 10 11:19:58 2019 +0000

    re PR fortran/71544 (gfortran compiler optimization bug when dealing with c-style pointers)
    
    2019-03-10  Thomas Koenig  <tkoenig@gcc.gnu.org>
    
            PR fortran/71544
            Backport from trunk
            * trans-types.c (gfc_typenode_for_spec) Set ts->is_c_interop of
            C_PTR and C_FUNPTR.
            (create_fn_spec): Mark argument as escaping if ts->is_c_interop is set.
    
    2019-03-10  Thomas Koenig  <tkoenig@gcc.gnu.org>
    
            PR fortran/71544
            Backport from trunk
            * gfortran.dg/c_ptr_tests_19.f90: New test.
    
    From-SVN: r269551

commit 9a8c5d2d7d4ce515a961f19f8012f165044ebbe8
Author: Thomas Koenig <tkoenig@gcc.gnu.org>
Date:   Sun Mar 10 10:28:14 2019 +0000

    re PR fortran/87734 (ICE in is_illegal_recursion check for character len= parameter)
    
    2019-03-10  Thomas Koenig  <tkoenig@gcc.gnu.org>
            Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/87734
            Backort from trunk
            * symbol.c (gfc_add_procedure): Only throw an error if the
            procedure has not been declared either PUBLIC or PRIVATE.
            * resolve.c (is_illegal_recursion): Remove an assert().
    
    2019-03-10  Thomas Koenig  <tkoenig@gcc.gnu.org>
    
            PR fortran/87734
            Backport from trunk
            * gfortran.dg/public_private_module_10.f90: New test.
    
    
    Co-Authored-By: Steven G. Kargl <kargl@gcc.gnu.org>
    
    From-SVN: r269548

commit f0d6dfbb8a5862515a32ddffad5dbbaf6e34bd72
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Mar 10 00:16:12 2019 +0000

    Daily bump.
    
    From-SVN: r269544

commit d5e73e463b06234453c31acc994b5eb0cbedd4d7
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Mar 9 00:16:10 2019 +0000

    Daily bump.
    
    From-SVN: r269519

commit a64007374962f8381dafe7564c754a6b7c236723
Author: Martin Jambor <mjambor@suse.cz>
Date:   Fri Mar 8 23:55:20 2019 +0100

    Relax cgraph_node::clone_of_p to also look through former clones
    
    2019-03-08  Martin Jambor  <mjambor@suse.cz>
    
            Backport from mainline
            2019-03-07  Martin Jambor  <mjambor@suse.cz>
    
            PR ipa/88235
            * cgraph.h (cgraph_node): New inline method former_thunk_p.
            * cgraph.c (cgraph_node::dump): Dump a note if node is a former thunk.
            (clone_of_p): Treat expanded thunks like thunks, be optimistic if they
            have multiple callees.  At the end check if declarations match as
            opposed to cgraph_nodes.
    
            testsuite/
            * g++.dg/ipa/pr88235.C: New test.
    
    From-SVN: r269517

commit 57b68cdf90fb40b6fb87df251f43f69d8d758dd7
Author: Jason Merrill <jason@redhat.com>
Date:   Fri Mar 8 16:40:28 2019 -0500

    PR c++/88820 - ICE with CTAD and member template used in DMI.
    
    Here the problem was that in order to form a FUNCTION_DECL for foo<int> in
    the uninstantiated template, we were trying to deduce template args for S
    from the template parm itself, and failing.
    
            * pt.c (do_class_deduction): Handle parm used as its own arg.
    
    From-SVN: r269514

commit d069e671e92daf3b7942c9dee81aa09521b76dce
Author: Jason Merrill <jason@redhat.com>
Date:   Fri Mar 8 16:40:21 2019 -0500

    PR c++/88869 - C++17 ICE with CTAD and explicit specialization.
    
    The members of an explicit specialization of a class template don't have the
    template parameters of that class template, so we shouldn't try to provide
    arguments for them.  Only set outer_args when the class is an instantiation.
    
            * pt.c (do_class_deduction): Don't include explicit specialization
            args in outer_args.
    
    From-SVN: r269513

commit e31ca283a2971752110966fb11d1d8617520c74d
Author: Jason Merrill <jason@redhat.com>
Date:   Fri Mar 8 16:40:15 2019 -0500

    PR c++/88419 - C++17 ICE with class template arg deduction.
    
    Just like in make_constrained_auto, we need to defer setting TYPE_CANONICAL
    until we've set fields that will affect structural_comptypes.
    
            * pt.c (make_template_placeholder): Set TYPE_CANONICAL after
            CLASS_PLACEHOLDER_TEMPLATE.
    
    From-SVN: r269512

commit 26dbff45300b30c5ed1f9d6e59d5f0e2fbb43729
Author: Jason Merrill <jason@redhat.com>
Date:   Fri Mar 8 16:40:10 2019 -0500

    PR c++/88690 - C++17 ICE with empty base in aggregate.
    
            * typeck2.c (process_init_constructor_record): Skip trivial
            initialization of an empty base.
    
    From-SVN: r269511

commit cf69731d7de8763251bf20f5e90984ee3157388c
Author: Jason Merrill <jason@redhat.com>
Date:   Fri Mar 8 16:40:04 2019 -0500

    PR c++/87921 - wrong error with inline static data member.
    
    An instantiation of an inline variable isn't defined until it's
    instantiated, so don't treat it as defined just because it's inline.
    
            * decl2.c (c_parse_final_cleanups): Don't force out uninstantiated
            inline static data members.
    
    From-SVN: r269510

commit c57b58a0a6054e568fb1df2898bab7ba72910dfa
Author: Jason Merrill <jason@redhat.com>
Date:   Fri Mar 8 16:39:58 2019 -0500

    PR c++/89381 - implicit copy and using-declaration.
    
    Here the used base<int>::operator= gets into the list of foo's bindings for
    operator=, but it shouldn't make the copy ctor deleted.
    
            * class.c (classtype_has_move_assign_or_move_ctor_p): Don't consider
            op= brought in by a using-declaration.
    
    From-SVN: r269509

commit 4e42f051fcb1dc4a0fe5c6a53a6318d47ee2700d
Author: Jason Merrill <jason@redhat.com>
Date:   Fri Mar 8 15:50:31 2019 -0500

    PR c++/89576 - if constexpr of lambda capture.
    
    Now that we're doing implicit lambda capture in templates, we see x here as
    the lambda capture.  maybe_convert_cond was doing nothing in a template, so
    we never called mark_rvalue_use on x.  As part of the broad move toward
    doing more processing of non-dependent expressions, let's do this
    conversion.
    
            * semantics.c (maybe_convert_cond): Do convert a non-dependent
            condition in a template.
            * typeck.c (condition_conversion): Handle being called in a
            template.
    
    From-SVN: r269506

commit aecd7a389adde47715937811d98d61d2f4a6249c
Author: Jason Merrill <jason@redhat.com>
Date:   Fri Mar 8 13:22:20 2019 -0500

    PR c++/89422 - ICE with -g and lambda in default arg in template.
    
    Here, we were trying to instantiate the default argument before setting
    DECL_FRIEND_CONTEXT, so that the instantiated lambda ended up being treated
    as part of the S template, which confused dwarf2out.
    
            * pt.c (tsubst_function_decl): SET_DECL_FRIEND_CONTEXT sooner.
    
    From-SVN: r269503

commit 4bfbf3be2a957fedb59ac0a106ce9542aaf7d57a
Author: Jason Merrill <jason@redhat.com>
Date:   Fri Mar 8 13:21:02 2019 -0500

    PR c++/87513 - 'sorry' mangling PMF template-id.
    
    Here build_offset_ref calls build_qualified_name to make a SCOPE_REF because
    the dependent template arguments make type_dependent_expression_p (member)
    true.  We could probably work hard to prevent this, but it doesn't seem
    necessary, and it's easy to fix write_expression to handle the result.
    
            * mangle.c (write_expression): Handle SCOPE_REF to BASELINK.
    
    From-SVN: r269502

commit b6d92be113a01155634dbe185abf1173452331ed
Author: Jason Merrill <jason@redhat.com>
Date:   Fri Mar 8 13:19:55 2019 -0500

    PR c++/88183 - ICE with .* fold-expression.
    
    build_m_component_ref can't handle type-dependent operands, so let's use the
    default case; tsubst_copy_and_build also uses build_x_binary_op for
    substituting a DOTSTAR_EXPR.
    
            * pt.c (fold_expression) [DOTSTAR_EXPR]: Remove special handling.
    
    From-SVN: r269501

commit 26c36c5186ea1a32d69e4fce0132ce7854911ab5
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Mar 8 00:16:26 2019 +0000

    Daily bump.
    
    From-SVN: r269475

commit 5ae5921e677619b2f73e3ba4fc5516a2dccdd785
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Mar 7 09:32:09 2019 +0100

    re PR c++/89585 (GCC 8.3: asm volatile no longer accepted at file scope)
    
            PR c++/89585
            * parser.c (cp_parser_asm_definition): Parse asm qualifiers even
            at toplevel, but diagnose them.
    
            * g++.dg/asm-qual-3.C: Adjust expected diagnostics.
    
    From-SVN: r269452

commit c6ea75f778bbce63f0e032c69ac5f428b3dab022
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Mar 7 00:16:16 2019 +0000

    Daily bump.
    
    From-SVN: r269447

commit 7c08452f71f5575c940046f91357a531fb42f296
Author: Harald Anlauf <anlauf@gmx.de>
Date:   Wed Mar 6 21:16:00 2019 +0000

    backport: re PR fortran/71203 (ICE in add_init_expr_to_sym, at fortran/decl.c:1512 and :1564)
    
    2019-03-06  Harald Anlauf  <anlauf@gmx.de>
    
            Backport from trunk
            PR fortran/71203
            * expr.c (simplify_const_ref): Avoid null pointer dereference.
    
            PR fortran/71203
            * gfortran.dg/substr_8.f90: New test.
    
    From-SVN: r269445

commit 1e83b120856455652a598dd67d49f62e6448b1f3
Author: Thomas Koenig <tkoenig@gcc.gnu.org>
Date:   Wed Mar 6 20:12:06 2019 +0000

    re PR fortran/72714 ([Coarray] ICE in gfc_array_init_size, at fortran/trans-array.c:5235)
    
    2019-03-06  Thomas Koenig  <tkoenig@gcc.gnu.org>
    
            PR fortran/72714
            Backport from trunk
            * resolve.c (resolve_allocate_expr): Add some tests for coarrays.
    
    2019-03-06  Thomas Koenig  <tkoenig@gcc.gnu.org>
    
            PR fortran/72714
            Backport from trunk
            * gfortran.dg/coarray_allocate_11.f90: New test.
    
    From-SVN: r269440

commit e695c1cdd1b2eeddd4ef4069c5292c7f6f3ae9d1
Author: Tamar Christina <tamar.christina@arm.com>
Date:   Wed Mar 6 09:49:00 2019 +0000

    AArch64: Fix command line options canonicalization version.
    
    Commandline options on AArch64 don't get canonicalized into the smallest
    possible set before output to the assembler. This means that overlapping feature
    sets are emitted with superfluous parts.
    
    Normally this isn't an issue, but in the case of crypto we have retro-actively
    split it into aes and sha2. We need to emit only +crypto to the assembler
    so old assemblers continue to work.
    
    Because of how -mcpu=native and -march=native work they end up enabling all
    feature bits. Instead we need to get the smallest possible set, which would also
    fix the problem with older the assemblers and the retro-active split.
    
    The function that handles this is called quite often.  It is called for any
    push/pop options or attribute that changes arch, cpu etc.  In order to not make
    this search for the smallest set too expensive we sort the options based on the
    number of features (bits) they enable.  This allows us to process the list
    linearly instead of quadratically (Once we have enabled a feature, we know that
    anything else that enables it can be ignored.  By sorting we'll get the biggest
    groups first and thus the smallest combination of commandline flags).
    
    The Option handling structures have been extended to have a boolean to indicate
    whether the option is synthetic, with that I mean if the option flag itself
    enables a new feature.
    
    e.g. +crypto isn't an actual feature, it just enables other features, but others
    like +rdma enable multiple dependent features but is itself also a feature.
    
    There are two ways to solve this.
    
    1) Either have the options that are feature bits also turn themselves on, e.g.
       change rdma to turn on FP, SIMD and RDMA as dependency bits.
    
    2) Make a distinction between these two different type of features and have the
       framework handle it correctly.
    
    Even though it's more code I went for the second approach, as it's the one
    that'll be less fragile (people can't forget it) and gives the least surprises.
    
    Effectively this patch changes the following:
    
    The values before the => are the old compiler and after the => the new code.
    
    -march=armv8.2-a+crypto+sha2 => -march=armv8.2-a+crypto
    -march=armv8.2-a+sha2+aes => -march=armv8.2-a+crypto
    
    The remaining behaviors stay the same.
    
    gcc/ChangeLog:
    
            Backport from trunk.
            2019-02-25  Tamar Christina  <tamar.christina@arm.com>
    
            PR target/88530
            * common/config/aarch64/aarch64-common.c
            (struct aarch64_option_extension): Add is_synthetic.
            (all_extensions): Use it.
            (TARGET_OPTION_INIT_STRUCT): Define hook.
            (struct gcc_targetm_common): Moved to end.
            (all_extensions_by_on): New.
            (opt_ext_cmp, typedef opt_ext): New.
            (aarch64_option_init_struct): New.
            (aarch64_contains_opt): New.
            (aarch64_get_extension_string_for_isa_flags): Output smallest set.
            * config/aarch64/aarch64-option-extensions.def
            (AARCH64_OPT_EXTENSION): Explicitly include AES and SHA2 in crypto.
            (fp, simd, crc, lse, fp16, rcpc, rdma, dotprod, aes, sha2, sha3,
            sm4, fp16fml, sve):
            Set is_synthetic to false.
            (crypto): Set is_synthetic to true.
            * config/aarch64/driver-aarch64.c (AARCH64_OPT_EXTENSION): Add
            SYNTHETIC.
    
    gcc/testsuite/ChangeLog:
    
            Backport from trunk.
            2019-02-25  Tamar Christina  <tamar.christina@arm.com>
    
            PR target/88530
            * gcc.target/aarch64/options_set_1.c: New test.
            * gcc.target/aarch64/options_set_2.c: New test.
            * gcc.target/aarch64/options_set_3.c: New test.
            * gcc.target/aarch64/options_set_4.c: New test.
            * gcc.target/aarch64/options_set_5.c: New test.
            * gcc.target/aarch64/options_set_6.c: New test.
            * gcc.target/aarch64/options_set_7.c: New test.
            * gcc.target/aarch64/options_set_8.c: New test.
            * gcc.target/aarch64/options_set_9.c: New test.
    
    From-SVN: r269413

commit 21aefd5cbd2902678c615c4445a563d8be2409d0
Author: Tamar Christina <tamar.christina@arm.com>
Date:   Wed Mar 6 09:34:04 2019 +0000

    AArch64: Have empty HWCAPs string ignored during native feature detection.
    
    This patch makes the feature detection code for AArch64 GCC not add features
    automatically when the feature had no hwcaps string to match against.
    
    This means that -mcpu=native no longer adds feature flags such as +profile.
    The behavior wasn't noticed before because at the time +profile was added a bug
    was preventing any feature bits from being added by native detections.
    
    The loop has also been changed as Jakub specified in order to avoid a memory
    leak that was present in the existing code and to be slightly more efficient.
    
    gcc/ChangeLog:
    
            Backport from trunk.
            2019-02-28  Tamar Christina  <tamar.christina@arm.com>
    
            PR target/88530
            * config/aarch64/aarch64-option-extensions.def: Document it.
            * config/aarch64/driver-aarch64.c (host_detect_local_cpu): Skip feature
            if empty hwcaps.
    
    gcc/testsuite/ChangeLog:
    
            Backport from trunk.
            2019-02-28  Tamar Christina  <tamar.christina@arm.com>
    
            PR target/88530
            * gcc.target/aarch64/options_set_10.c: New test.
    
    From-SVN: r269412

commit 35573079dc937364c0d84a54e9cbb234826bdf1d
Author: Xiong Hu Luo <luoxhu@linux.ibm.com>
Date:   Wed Mar 6 02:19:35 2019 +0000

    backport r268834 from mainline to gcc-8-branch
    
    Backport r268834 of "Add support for the vec_sbox_be, vec_cipher_be etc."
    from mainline to gcc-8-branch.
    
    gcc/ChangeLog:
    2019-03-06  Xiong Hu Luo  <luoxhu@linux.ibm.com>
    
            Backport of r268834 from mainline to gcc-8-branch.
            2019-02-13  Xiong Hu Luo  <luoxhu@linux.vnet.ibm.com>
    
            * config/rs6000/altivec.h (vec_sbox_be, vec_cipher_be,
            vec_cipherlast_be, vec_ncipher_be, vec_ncipherlast_be): New #defines.
            * config/rs6000/crypto.md (CR_vqdi): New define_mode_iterator.
            (crypto_vsbox_<mode>, crypto_<CR_insn>_<mode>): New define_insns.
            * config/rs6000/rs6000-builtin.def (VSBOX_BE): New BU_CRYPTO_1.
            (VCIPHER_BE, VCIPHERLAST_BE, VNCIPHER_BE, VNCIPHERLAST_BE):
            New BU_CRYPTO_2.
            * config/rs6000/rs6000.c (builtin_function_type)
            <CRYPTO_BUILTIN_VSBOX_BE, CRYPTO_BUILTIN_VCIPHER_BE,
            CRYPTO_BUILTIN_VCIPHERLAST_BE, CRYPTO_BUILTIN_VNCIPHER_BE,
            CRYPTO_BUILTIN_VNCIPHERLAST_BE>: New switch options.
            * doc/extend.texi (vec_sbox_be, vec_cipher_be, vec_cipherlast_be,
            vec_ncipher_be, vec_ncipherlast_be): New builtin functions.
    
    gcc/testsuite/ChangeLog:
    2019-03-06  Xiong Hu Luo  <luoxhu@linux.ibm.com>
    
            Backport of r268834 from mainline to gcc-8-branch.
            2019-01-23  Xiong Hu Luo  <luoxhu@linux.vnet.ibm.com>
    
            * gcc.target/powerpc/crypto-builtin-1.c
            (crypto1_be, crypto2_be, crypto3_be, crypto4_be, crypto5_be):
            New testcases.
    
    From-SVN: r269410

commit 27e4dec343cd93cd7cf85f82c4c6a3c1ec09d196
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Mar 6 00:16:09 2019 +0000

    Daily bump.
    
    From-SVN: r269408

commit a5df78803ec4e08efab8cf6e6d76e72be412bd88
Author: Richard Biener <rguenther@suse.de>
Date:   Tue Mar 5 08:26:32 2019 +0000

    backport: re PR tree-optimization/89505 (LibreOffice miscompilation starting with r260383)
    
    2019-03-05  Richard Biener  <rguenther@suse.de>
    
            Backport from mainline
            2019-02-26  Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/89505
            * tree-ssa-structalias.c (compute_dependence_clique): Make sure
            to handle restrict pointed-to vars with multiple subvars
            correctly.
    
            * gcc.dg/torture/pr89505.c: New testcase.
    
    From-SVN: r269383

commit 932d76c1e0a1af8b36cc0fa3780a9e59e822f77c
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Mar 5 00:16:22 2019 +0000

    Daily bump.
    
    From-SVN: r269380

commit f7c63ee01efb57793c2f517923fb58e63747fb47
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Mar 4 00:16:24 2019 +0000

    Daily bump.
    
    From-SVN: r269359

commit c867f6584884047dae7506d1b4c286839a1553ed
Author: Harald Anlauf <anlauf@gmx.de>
Date:   Sun Mar 3 22:24:00 2019 +0000

    backport: re PR fortran/89077 (ICE using * as len specifier for character parameter)
    
    2019-03-03  Harald Anlauf  <anlauf@gmx.de>
    
            Backport from trunk
            PR fortran/89077
            * decl.c (gfc_set_constant_character_len): Clear original string
            representation after padding has been performed to target length.
            * resolve.c (gfc_resolve_substring_charlen): Check substring
            length for constantness prior to general calculation of length.
    
            Backport from trunk
            PR fortran/89077
            * gfortran.dg/transfer_simplify_12.f90: New test.
            * gfortran.dg/substr_simplify.f90: New test.
    
    From-SVN: r269357

commit 8546491eee28ee34738857b193998be7023c1bcb
Author: Harald Anlauf <anlauf@gmx.de>
Date:   Sun Mar 3 20:30:44 2019 +0000

    backport: re PR fortran/77583 (ICE in pp_quoted_string, at pretty-print.c:966)
    
    2019-03-03  Harald Anlauf  <anlauf@gmx.de>
                Steven G. Kargl  <kargl@gcc.gnu.org>
    
            Backport from trunk
            PR fortran/77583
            * symbol.c (check_conflict): Check for valid procedure name
            passed to error reporting routine.
    
            PR fortran/77583
            * gfortran.dg/pr77583.f90: New test.
    
    
    Co-Authored-By: Steven G. Kargl <kargl@gcc.gnu.org>
    
    From-SVN: r269354

commit e9d862201d68db60407291b70468d5f6caac1edc
Author: Thomas Koenig <tkoenig@gcc.gnu.org>
Date:   Sun Mar 3 10:09:32 2019 +0000

    re PR fortran/89174 (Allocation segfault with CLASS(*) MOLD)
    
    2019-03-03  Thomas Koenig  <tkoenig@gcc.gnu.org>
    
            PR fortran/89174
            Backport from trunk
            * trans-expr.c (gfc_find_and_cut_at_last_class_ref): Add is_mold
            to garguments. If we are dealing with a MOLD, call
            gfc_expr_to_initialize().
            * trans-stmt.c (gfc_trans_allocate): For MOLD, pass is_mold=true
            to gfc_find_and_cut_at_last_class_ref.
            * trans.h (gfc_find_and_cut_at_last_class_ref): Add optional
            argument is_mold with default false.
    
    2019-03-03  Thomas Koenig  <tkoenig@gcc.gnu.org>
    
            PR fortran/89174
            Backport from trunk
            * gfortran.dg/allocate_with_mold_3.f90: New test.
    
    From-SVN: r269351

commit 8517f286e20feb9d0ca0ac002891c95c5c3ec806
Author: Thomas Koenig <tkoenig@gcc.gnu.org>
Date:   Sun Mar 3 09:04:23 2019 +0000

    re PR fortran/87689 (PowerPC64 ELFv2 function parameter passing violation)
    
    2019-03-03  Thomas Koenig  <tkoenig@gcc.gnu.org>
    
            PR fortran/87689
            Backport from trunk
            * trans-decl.c (gfc_get_extern_function_decl): Add argument
            actual_args and pass it through to gfc_get_function_type.
            * trans-expr.c (conv_function_val): Add argument actual_args
            and pass it on to gfc_get_extern_function_decl.
            (conv_procedure_call): Pass actual arguments to conv_function_val.
            * trans-types.c (get_formal_from_actual_arglist): New function.
            (gfc_get_function_type): Add argument actual_args.  Generate
            formal args from actual args if necessary.
            * trans-types.h (gfc_get_function_type): Add optional argument.
            * trans.h (gfc_get_extern_function_decl): Add optional argument.
    
    2019-03-03  Thomas Koenig  <tkoenig@gcc.gnu.org>
    
            PR fortran/87689
            Backport from trunk
            * gfortran.dg/lto/20091028-1_0.f90: Add -Wno-lto-type-mismatch to
            options.
            * gfortran.dg/lto/20091028-2_0.f90: Likewise.
            * gfortran.dg/lto/pr87689_0.f: New file.
            * gfortran.dg/lto/pr87689_1.f: New file.
            * gfortran.dg/altreturn_9_0.f90: New file.
            * gfortran.dg/altreturn_9_1.f90: New file.
    
    From-SVN: r269349

commit 70a671cd4a871ca8f5afd39793248b8c2a793195
Author: Jerry DeLisle <jvdelisle@gcc.gnu.org>
Date:   Sun Mar 3 05:10:14 2019 +0000

    backport: re PR fortran/84387 (Defined output does not work for a derived type that has no components)
    
    2019-03-02  Jerry DeLisle <jvdelisle@gcc.gnu.org>
    
            Backport from trunk
            PR fortran/84387
            * trans-io.c (transfer_expr): Do not return if there are no
            components to the derived type or class.
    
            * gfortran.dg/dtio_34.f90: New test.
    
    From-SVN: r269348

commit 7aa6148b8f1b04497c2d910eb331d1a1ea27e209
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Mar 3 00:16:17 2019 +0000

    Daily bump.
    
    From-SVN: r269346

commit bc3a2c28587531c24ec88507bc914fbf21b36548
Author: Jerry DeLisle <jvdelisle@gcc.gnu.org>
Date:   Sat Mar 2 23:21:11 2019 +0000

    re PR libfortran/89020 (close(status='DELETE') does not remove file)
    
    2019-03-02  Jerry DeLisle  <jvdelisle@gcc.gnu.org>
    
            PR libfortran/89020
            * io/close.c (st_close): Generate error if calls to 'remove' return
            an error.
    
    From-SVN: r269344

commit 8eecc0e4229c51b5114a08a1cedc9ba7481845b1
Author: Harald Anlauf <anlauf@gmx.de>
Date:   Sat Mar 2 16:08:03 2019 +0000

    Backport PRs 88326, 89266, 89492, 89516
    
    2019-03-02  Harald Anlauf  <anlauf@gmx.de>
    
            Backport from trunk
            PR fortran/89516
            * check.c (gfc_calculate_transfer_sizes): Correct checks for cases
            where storage size of elements of MOLD is 0.
    
            PR fortran/89492
            * check.c (gfc_calculate_transfer_sizes): Handle cases where
            storage size of elements of MOLD is 0.
    
            PR fortran/89266
            PR fortran/88326
            * target-memory.c (gfc_element_size): Return false if element size
            cannot be determined; element size is returned separately.
            (gfc_target_expr_size): Return false if expression size cannot be
            determined; expression size is returned separately.
            * target-memory.h: Adjust prototypes.
            * check.c (gfc_calculate_transfer_sizes): Adjust references to
            gfc_target_expr_size, gfc_element_size.
            * arith.c (hollerith2representation): Likewise.
            * class.c (find_intrinsic_vtab): Likewise.
            * simplify.c (gfc_simplify_sizeof): Likewise.
    
            Backport from trunk
            PR fortran/89516
            * gfortran.dg/pr89492.f90: Adjust testcase.
            * gfortran.dg/transfer_check_5.f90: New test.
    
            PR fortran/89492
            * gfortran.dg/pr89492.f90: New test.
    
            PR fortran/89266
            PR fortran/88326
            * gfortran.dg/pr89266.f90: New test.
            * gfortran.dg/pr88326.f90: New test.
    
    From-SVN: r269342

commit 499000ea4dde2a536a104684489b8dee900bcd71
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Mar 2 00:16:14 2019 +0000

    Daily bump.
    
    From-SVN: r269335

commit 4ec47cc71b008f2dff63cc67d82fa7ca97037d34
Author: Tamar Christina <tamar.christina@arm.com>
Date:   Fri Mar 1 14:07:38 2019 +0000

    AArch64: Make every option in options.def one line (GCC-8).
    
    Due to config.gcc all the options need to be on one line because of the grep
    lines which would select only the first line of the option.
    
    This causes it not to select the right bits on options that are spread over
    multiple lines when the --with-arch configure option is used.  The issue happens
    silently and you just get a compiler with an incorrect set of default flags.
    
    This solution just collapses everything back to one line as they were in GCC7.
    Unfortunately this does make some lines quite long.
    
    gcc/ChangeLog:
    
            PR target/89517
            * config/aarch64/aarch64-option-extensions.def (fp, simd, crypto,
            fp16): Collapse line.
    
    From-SVN: r269313

commit 7bd8b41c7009d281a2fd935de857c8a90fd876a2
Author: Richard Biener <rguenther@suse.de>
Date:   Fri Mar 1 12:38:38 2019 +0000

    backport: [multiple changes]
    
    2019-03-01  Richard Biener  <rguenther@suse.de>
    
            Backport from mainline
            2019-03-01  Jakub Jelinek  <jakub@redhat.com>
    
            PR bootstrap/89539
            * dwarf2out.c (output_comdat_type_unit): Add ATTRIBUTE_UNUSED to
            early_lto_debug argument.
    
            2019-02-27  Richard Biener  <rguenther@suse.de>
    
            PR debug/88878
            * dwarf2out.c (use_debug_types): Disable when in_lto_p.
    
            2019-02-27  Richard Biener  <rguenther@suse.de>
    
            PR debug/88878
            * dwarf2out.c (output_comdat_type_unit): Add early_lto_debug
            parameter, prefix section name with .gnu.debuglto_ if true.
            (dwarf2out_finish): Pass false to output_comdat_type_unit.
            (dwarf2out_early_finish): Pass true to output_comdat_type_unit.
    
            2019-02-27  Richard Biener  <rguenther@suse.de>
    
            PR debug/89514
            * dwarf2out.c (size_of_die): Key on AT_ref (a)->comdat_type_p
            rather than on use_debug_types, doing what output_die does.
            (value_format): Likewise.
    
    From-SVN: r269305

commit fe2329dc76083d52e856825ad7da7cadfd0f8148
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Mar 1 00:16:29 2019 +0000

    Daily bump.
    
    From-SVN: r269296

commit c408d4717a3c65e1d2f4b65cf07a4c82bc6645c3
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Thu Feb 28 23:06:15 2019 +0000

    re PR tree-optimization/89536 (wrong code at -Os and above on x86_64-linux-gnu)
    
            PR tree-optimization/89536
            * tree-ssa-dom.c (edge_info::derive_equivalences) <BIT_NOT_EXPR>: Test
            only whether bit #0 of the value is 0 instead of the entire value.
    
    From-SVN: r269290

commit 1314b7f71827a3f5978873b095b2e7b850c9d64d
Author: Li Jia He <helijia@linux.ibm.com>
Date:   Thu Feb 28 06:24:57 2019 +0000

    backport: re PR target/88100 (no warning reported when value for vec_splat_{su}{8,16} would overflow)
    
            Backport from trunk
            2019-02-20  Li Jia He  <helijia@linux.ibm.com>
    
            PR target/88100
            * gcc/config/rs6000/rs6000.c (rs6000_gimple_fold_builtin)
            <case ALTIVEC_BUILTIN_VSPLTISB, ALTIVEC_BUILTIN_VSPLTISH,
            ALTIVEC_BUILTIN_VSPLTISW>: Don't convert the operand before
            range checking it.
    
            * gcc/testsuite/gcc.target/powerpc/pr88100.c: New testcase.
    
    From-SVN: r269272

commit 58103804d57048c1661c7f02965f076fa69b87ba
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Feb 28 00:16:10 2019 +0000

    Daily bump.
    
    From-SVN: r269269

commit 145b015e4e98e5b3a9201c66539a3366c29b0e3d
Author: Uros Bizjak <ubizjak@gmail.com>
Date:   Wed Feb 27 16:56:04 2019 +0100

    re PR target/89397 (ICE in build_call_expr_loc_array at gcc/tree.c:11563 since r229082)
    
            PR target/89397
            * config/i386/i386.c (ix86_atomic_assign_expand_fenv): Check
            TARGET_SSE in addition to TARGET_SSE_MATH.
    
            (ix86_excess_precision): Ditto.
            (ix86_float_exceptions_rounding_supported_p): Ditto.
            (use_rsqrt_p): Ditto.
            * config/i386/sse.md (rsqrt<mode>2): Ditto.
    
    From-SVN: r269259

commit 5287dec92829077bdfa28fa4f8959da8fc0c31d6
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Wed Feb 27 10:48:04 2019 +0100

    backport: re PR target/89361 (s390 broken without S390_USE_TARGET_ATTRIBUTE, likely since r257489)
    
            Backported from mainline
            2019-02-18  Jakub Jelinek  <jakub@redhat.com>
    
            PR target/89361
            * config/s390/s390.c (s390_indirect_branch_attrvalue,
            s390_indirect_branch_settings): Define unconditionally.
            (s390_set_current_function): Likewise, but guard the whole body except
            the s390_indirect_branch_settings call with
            #if S390_USE_TARGET_ATTRIBUTE.
            (TARGET_SET_CURRENT_FUNCTION): Redefine unconditionally.
    
    From-SVN: r269244

commit 7e59d6428550f1797f5bcb97b22e3f081ee01ec3
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Feb 27 00:16:31 2019 +0000

    Daily bump.
    
    From-SVN: r269238

commit 20f1bbe9a272349ca0d534cc440f39b5ed36e73d
Author: Marek Polacek <polacek@redhat.com>
Date:   Tue Feb 26 18:00:41 2019 +0000

    PR c++/89212 - ICE converting nullptr to pointer-to-member-function.
    
            * pt.c (tsubst_copy_and_build) <case CONSTRUCTOR>: Return early for
            null member pointer value.
    
    From-SVN: r269222

commit 1f6ebacba81bf95f8aeb2ca91487684122633312
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Tue Feb 26 11:06:28 2019 +0000

    backport: rtlanal.c (get_initial_register_offset): Fall back to the estimate as long as the epilogue isn't completed.
    
            Backport from mainline
            2019-02-19  Eric Botcazou  <ebotcazou@adacore.com>
    
            * rtlanal.c (get_initial_register_offset): Fall back to the estimate
            as long as the epilogue isn't completed.
    
    From-SVN: r269211

commit 6ba8201bcebe1ba0601f336e82dd5a151e065273
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Tue Feb 26 11:00:00 2019 +0000

    tree-ssa-dom.c (edge_info::derive_equivalences): Fix and move around comment.
    
            * tree-ssa-dom.c (edge_info::derive_equivalences) <BIT_IOR_EXPR>: Fix
            and move around comment.
            <BIT_AND_EXPR>: Likewise.
            <BIT_NOT_EXPR>: Add specific handling for boolean types.
    
    From-SVN: r269209

commit 0bf48b0a39babc8f4cc11b5693cda474dff96850
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Feb 26 00:16:17 2019 +0000

    Daily bump.
    
    From-SVN: r269200

commit ec9a17e20e7d68c631632572950b23f3f7c4a0a5
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Feb 25 00:16:10 2019 +0000

    Daily bump.
    
    From-SVN: r269182

commit a9c182fe3bf8a295af7cd00d3c38dfdae596b482
Author: Alan Modra <amodra@gmail.com>
Date:   Sun Feb 24 12:31:05 2019 +1030

    [RS6000] Fix <bd>_<mode> and <bd>tf_<mode> splitters
    
    This patch fixes a bug that can result in "insn does not satisfy its
    constraints" if these splitters fire due to not getting ctr for the
    jump insn.  Since the jump insn can have any of r,m,d,wi,c,l as the
    decremented count output, it's not sufficient to check for
    gpc_reg_operand (which matches VSX regs for example).  Seen after
    correcting register_move_cost when the cost of gpr <-> vsx is much
    lower.  Since this is a prerequisite to fixing PR89271, I'm mentioning
    that PR in the ChangeLog.
    
    The <bd>tf_<mode> split had a further bug in that it wouldn't match
    if the count output was m,d,wi, or l.
    
            PR target/89271
            * config/rs6000/rs6000.md (<bd>_<mode> split): Check for an int
            output reg on add insn.
            (<bd>tf_<mode> split): Likewise.  Match predicates with insn.
    
    From-SVN: r269174

commit 65ff80d5bca2e0d035474c3abd8612a2faba86de
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Feb 24 00:16:22 2019 +0000

    Daily bump.
    
    From-SVN: r269172

commit ec020ecf5922e9f468c404d7ec7392fe5d8f25db
Author: Thomas Koenig <tkoenig@gcc.gnu.org>
Date:   Sat Feb 23 22:16:29 2019 +0000

    re PR fortran/86119 (Intrinsic len has wrong type if used within select type for a class(*) string)
    
    2019-02-23  Thomas Koenig  <tkoenig@gcc.gnu.org>
    
        PR fortran/86119
        Backport from trunk
        * class.c (gfc_get_len_component): Add argument k for kind.
        If the kind of the resulting expression is not equal to k,
        convert it.
        * gfortran.h (gfc_len_component): Adjust prototype.
        * simplify.c (gfc_simplify_len): Pass kind to
        gfc_get_len_component.
    
    2019-02-23  Thomas Koenig  <tkoenig@gcc.gnu.org>
    
        PR fortran/86119
        Backport from trunk
        * gfortran.dg/warn_conversion_11.f90: New test.
    
    From-SVN: r269170

commit da1ea87307393d35d779ab9d27781f1271265f7c
Author: Paul Thomas <pault@gcc.gnu.org>
Date:   Sat Feb 23 14:59:50 2019 +0000

    backport: re PR fortran/88117 (ICE in gimplify_var_or_parm_decl, at gimplify.c:2697)
    
    2019-02-23  Paul Thomas  <pault@gcc.gnu.org>
    
            Backport from trunk
            PR fortran/88117
            * resolve.c (deferred_op_assign): Return if the lhs expression
            has the pointer attribute.
    
    2019-02-23  Paul Thomas  <pault@gcc.gnu.org>
    
            Backport from trunk
            PR fortran/88117
            * gfortran.dg/deferred_character_32.f90 : New test
    
    From-SVN: r269160

commit c5d49cb71a778ce74b8265a075a9c3536c2989ad
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Sat Feb 23 10:04:23 2019 +0000

    re PR ada/89349 (segfault when building GCC 7 & 8 branch with GCC master)
    
            PR ada/89349
            Backport from mainline
            2018-05-25  Arnaud Charlet  <charlet@adacore.com>
    
            * osint.ads (Unknown_Attributes): No longer pretend this is a constant.
            (No_File_Info_Cache): Initialize separately.
            * osint.adb (No_File_Info_Cache): Update initializer.
    
    From-SVN: r269153

commit c0f8533ee1a4f64f115f3e1aa0f4de3a35f8b653
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Sat Feb 23 01:02:05 2019 +0000

    PR libstdc++/89446 fix null pointer dereference in char_traits
    
            PR libstdc++/89446
            * include/bits/char_traits.h (__constant_char_array): Check index is
            in range before dereferencing.
            * testsuite/21_strings/basic_string_view/operators/char/89446.cc:
            New test.
    
    From-SVN: r269144

commit c0f893f82994d94f5f1da219740fa802b44f3494
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Feb 23 00:16:24 2019 +0000

    Daily bump.
    
    From-SVN: r269141

commit d4a611384337609a8a13d2f9731d96d6e6c3bb60
Author: Thomas Koenig <tkoenig@gcc.gnu.org>
Date:   Fri Feb 22 21:02:40 2019 +0000

    re PR fortran/71066 (ICE in set_loop_bounds, at fortran/trans-array.c:4680)
    
    2019-02-22  Thomas Koenig  <tkoenig@gcc.gnu.org>
    
            PR fortran/71066
            Backport from trunk
            * trans-decl.c (generate_coarray_sym_init):  For an array
            constructor in a DATA statement of a coarray variable, set the
            rank to 1 to avoid confusion later on.  If the constructor
            contains only one value, use that for initiailizig.
    
    2019-02-12  Thomas Koenig  <tkoenig@gcc.gnu.org>
    
            PR fortran/71066
            Backport from trunk
            * gfortran.dg/coarray_data_1.f90: New test.
    
    From-SVN: r269135

commit 4bf29aa9499142956f59206355c86e29e86ca2c7
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Fri Feb 22 15:57:21 2019 +0100

    * BASE-VER: Set to 8.3.1.
    
    From-SVN: r269118

commit 4c44b708f11eec6fc02456e8577708d01ca92327
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Feb 22 14:20:37 2019 +0000

    Update ChangeLog and version files for release
    
    From-SVN: r269116

commit 774770fd35f7df38df4e66fc8864c82ad4c64790
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Feb 22 00:16:15 2019 +0000

    Daily bump.
    
    From-SVN: r269084

commit 98fc0b24299b84f426fc7d8e4480c688c6b113ca
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Feb 21 00:16:41 2019 +0000

    Daily bump.
    
    From-SVN: r269061

commit 544c6afb50c796e772d5c814ff26d87f81c5f8bd
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Feb 20 00:16:42 2019 +0000

    Daily bump.
    
    From-SVN: r269030

commit d992e566b9426c7e14af57c24ce753c507ba41a8
Author: Uros Bizjak <uros@gcc.gnu.org>
Date:   Tue Feb 19 17:14:34 2019 +0100

    unwind-dw2.c (_Unwind_GetGR): Compare regno instead of index to DWARF_ZERO_REG.
    
            * unwind-dw2.c (_Unwind_GetGR) [DWARF_ZERO_REG]: Compare
            regno instead of index to DWARF_ZERO_REG.
    
    From-SVN: r269022

commit b5a0a1ab5145eeecec95337a35dc06f804b49af8
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Feb 19 09:59:21 2019 +0100

    re PR middle-end/89303 (memory leak with shared_ptr and enable_shared_from_this)
    
            PR middle-end/89303
            * g++.dg/torture/pr89303.C: Move everything from std namespace to my
            namespace.
    
    From-SVN: r269011

commit fd7540d2afd44bf51c76078d5f8d25999ffe5936
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Feb 19 00:16:10 2019 +0000

    Daily bump.
    
    From-SVN: r269001

commit ed1f36c1425808aeb1d0a9546b4c707491077af0
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Feb 18 00:17:03 2019 +0000

    Daily bump.
    
    From-SVN: r268976

commit 96fbe585c27993f1786441392fb3fc94d8050eb5
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Feb 17 00:16:24 2019 +0000

    Daily bump.
    
    From-SVN: r268966

commit 30624d4e3b102a1d10d43e6fca2b7ff5fcb70fd3
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Sat Feb 16 14:41:26 2019 +0000

    patchable_function_entry-decl.c: Add -fno-pie on SPARC.
    
            * c-c++-common/patchable_function_entry-decl.c: Add -fno-pie on SPARC.
            * c-c++-common/patchable_function_entry-default.c: Likewise.
            * c-c++-common/patchable_function_entry-definition.c: Likewise.
    
    From-SVN: r268959

commit 423725319fc233c68fec81ff3562ebd99e4b8dc3
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Feb 16 00:16:27 2019 +0000

    Daily bump.
    
    From-SVN: r268954

commit d0e318183f66ea3997b78d97b8b7652a76fb0b55
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Fri Feb 15 10:56:04 2019 +0000

    * gcc.target/sparc/struct-ret-check-1.c: Add -fno-pie option.
    
    From-SVN: r268935

commit ef9ab66b9d98bc2670386f609fba6712411dc934
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Fri Feb 15 10:51:03 2019 +0000

    patchable_function_entry-decl.c: Do not run on Visium.
    
            * c-c++-common/patchable_function_entry-decl.c: Do not run on Visium.
            * c-c++-common/patchable_function_entry-default.c: Likewise.
            * c-c++-common/patchable_function_entry-definition.c: Likewise.
            * gcc.dg/tree-ssa/pr84859.c: Add -ftree-cselim switch.
    
    From-SVN: r268933

commit 939eade01b9bcf109b3b7c6bad9a100cecff1a55
Author: Richard Biener <rguenther@suse.de>
Date:   Fri Feb 15 07:50:26 2019 +0000

    re PR tree-optimization/89278 (ICE in gimplify_modify_expr, at gimplify.c:5821)
    
            PR tree-optimization/89278
            * tree-loop-distribution.c: Include tree-eh.h.
            (generate_memset_builtin, generate_memcpy_builtin): Call
            rewrite_to_non_trapping_overflow on builtin->size before passing it
            to force_gimple_operand_gsi.
    
            * gcc.dg/pr89278.c: New test.
    
    Co-Authored-By: Jakub Jelinek <jakub@redhat.com>
    
    From-SVN: r268928

commit 3b5a7cf7b838db772ad86d5b222fc6bca6f5ccee
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Fri Feb 15 08:36:23 2019 +0100

    re PR other/89342 (ICE in maybe_default_option, at opts.c:347)
    
            PR other/89342
            * optc-save-gen.awk: Handle optimize_fast like optimize_size or
            optimize_debug.
            * opth-gen.awk: Likewise.
    
            * gcc.dg/pr89342.c: New test.
    
    From-SVN: r268925

commit a4cfdcc0dab9c388b995f0cb708e7b6ca8520988
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Feb 15 00:16:37 2019 +0000

    Daily bump.
    
    From-SVN: r268919

commit de0fecd9241bc91dca5b2115561df4775091d987
Author: David Malcolm <dmalcolm@redhat.com>
Date:   Thu Feb 14 23:17:51 2019 +0000

    C++ concepts: fix ICE with requires on dtors (PR c++/89036)
    
    PR c++/89036 reports an ICE due to this assertion failing
    
    1136      /* A class should never have more than one destructor.  */
    1137      gcc_assert (!current_fns || via_using || !DECL_DESTRUCTOR_P (method));
    
    on this template with a pair of dtors, with
    mutually exclusive "requires" clauses:
    
    template<typename T>
    struct Y {
        ~Y() requires(true) = default;
        ~Y() requires(false) {}
    };
    
    Nathan introduced this assertion as part of:
    
      ca9219bf18c68a001d62ecb981bc9176b0feaf12 (aka r251340):
        2017-08-24  Nathan Sidwell  <nathan@acm.org>
           Conversion operators kept on single overload set
    
    which, amongst other changes to add_method had this:
         /* A class should never have more than one destructor.  */
      -  if (current_fns && DECL_MAYBE_IN_CHARGE_DESTRUCTOR_P (method))
      -    return false;
      +  gcc_assert (!current_fns || !DECL_DESTRUCTOR_P (method));
    
    The following patch drops the assertion.
    
    gcc/cp/ChangeLog:
            2019-02-13  David Malcolm  <dmalcolm@redhat.com>
            Backport of r268847 from trunk.
    
            PR c++/89036
            * class.c (add_method): Drop destructor assertion.
    
    gcc/testsuite/ChangeLog:
            2019-02-13  David Malcolm  <dmalcolm@redhat.com>
            Backport of r268847 from trunk.
    
            PR c++/89036
            * g++.dg/concepts/pr89036.C: New test.
    
    From-SVN: r268916

commit 2a6473c6004f24b3b65576c4e4b6095609f3d5ba
Author: David Malcolm <dmalcolm@redhat.com>
Date:   Thu Feb 14 23:14:56 2019 +0000

    Fix ICE on class-template argument deduction (PR c++/88795)
    
    PR c++/88795 reports an ICE building a function_type for a deduction guide
    when the substitution into the function signature fails, due to an
    error_mark_node being returned from tsubst_arg_types but not being checked
    for.  This error_mark_node gets used as the TYPE_ARG_TYPES, leading to
    ICEs in various places that assume this is a TREE_LIST.
    
    This patch checks the result of tsubst_arg_types and propagates the failure
    if it returns error_mark_node.  It also adds an assertion to
    build_function_type, to fail faster if passed in error_mark_node.
    
    gcc/cp/ChangeLog:
            Backport of r267957 from trunk.
            2019-01-15  David Malcolm  <dmalcolm@redhat.com>
    
            PR c++/88795
            * pt.c (build_deduction_guide): Bail out if tsubst_arg_types
            fails.
    
    gcc/testsuite/ChangeLog:
            Backport of r267957 from trunk.
            2019-01-15  David Malcolm  <dmalcolm@redhat.com>
    
            PR c++/88795
            * g++.dg/template/pr88795.C: New test.
    
    gcc/ChangeLog:
            Backport of r267957 from trunk.
            2019-01-15  David Malcolm  <dmalcolm@redhat.com>
    
            PR c++/88795
            * tree.c (build_function_type): Assert that arg_types is not
            error_mark_node.
    
    From-SVN: r268915

commit b375be6b197801549ab9ec89417bdb23a4dd9a61
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Fri Feb 15 00:12:26 2019 +0100

    re PR rtl-optimization/89354 (Combine pass yields wrong code with -O2 and -msse2 for 32bit target)
    
            PR rtl-optimization/89354
            * combine.c (make_extraction): Punt if extraction_mode is narrower
            than len bits.
    
            * gcc.dg/pr89354.c: New test.
    
    From-SVN: r268914

commit 3cbf0ab88468ea6d8b7f04667398e47d2bd7c95f
Author: David Malcolm <dmalcolm@redhat.com>
Date:   Thu Feb 14 23:10:00 2019 +0000

    Fix memory leak in selftest::test_expansion_to_rtl
    
    "make selftest-valgrind" shows:
    
    187 bytes in 1 blocks are definitely lost in loss record 567 of 669
        at 0x4A081D4: calloc (in /usr/lib64/valgrind/vgpreload_memcheck-amd64-linux.so)
        by 0x1F08260: xcalloc (xmalloc.c:162)
        by 0xB24F32: init_emit() (emit-rtl.c:5843)
        by 0xC10080: prepare_function_start() (function.c:4803)
        by 0xC10254: init_function_start(tree_node*) (function.c:4877)
        by 0x1CDF92A: selftest::test_expansion_to_rtl() (function-tests.c:595)
        by 0x1CE007C: selftest::function_tests_c_tests() (function-tests.c:676)
        by 0x1E010E7: selftest::run_tests() (selftest-run-tests.c:98)
        by 0x1062D1E: toplev::run_self_tests() (toplev.c:2225)
        by 0x1062F40: toplev::main(int, char**) (toplev.c:2303)
        by 0x1E5B90A: main (main.c:39)
    
    The allocation in question is:
    
      crtl->emit.regno_pointer_align
        = XCNEWVEC (unsigned char, crtl->emit.regno_pointer_align_length);
    
    This patch fixes this leak (and makes the output of
    "make selftest-valgrind" clean) by calling free_after_compilation at the
    end of the selftest in question.
    
    gcc/ChangeLog:
            Backport of r263339 from trunk.
            2018-08-06  David Malcolm  <dmalcolm@redhat.com>
    
            * function-tests.c (selftest::test_expansion_to_rtl): Call
            free_after_compilation.
    
    From-SVN: r268912

commit 533594b50a5221a45276f0d7cbce899d2e5bfef3
Author: David Malcolm <dmalcolm@redhat.com>
Date:   Thu Feb 14 23:08:18 2019 +0000

    docs: fix stray duplicated words
    
    gcc/ChangeLog:
            Backport of r263295 from trunk.
            2018-08-03  David Malcolm  <dmalcolm@redhat.com>
    
            * doc/gcov.texi (-x): Remove duplicate "to".
            * doc/invoke.texi (-Wnoexcept-type): Remove duplicate "calls".
            (-Wif-not-aligned): Remove duplicate "is".
            (-flto): Remove duplicate "the".
            (MicroBlaze Options): In examples of "-mcpu=cpu-type", remove
            duplicate "v5.00.b".
            (MSP430 Options): Remove duplicate "and" from the description
            of "-mgprel-sec=regexp".
            (x86 Options): Remove duplicate copies of "vmldLog102" and
            vmlsLog104 from description of "-mveclibabi=type".
    
    From-SVN: r268911

commit 873b9e02648f28c9cf14c81ec7f23ba7592d4469
Author: David Malcolm <dmalcolm@redhat.com>
Date:   Thu Feb 14 23:06:09 2019 +0000

    Fix memory leak of pretty_printer prefixes
    
    We were rather sloppy about handling the ownership of prefixes for
    pretty_printer, and this lead to a memory leak for any time a
    diagnostic_show_locus call emits multiple line spans.
    
    This showed up in "make selftest-valgrind" as:
    
    3,976 bytes in 28 blocks are definitely lost in loss record 632 of 669
       at 0x4A0645D: malloc (in /usr/lib64/valgrind/vgpreload_memcheck-amd64-linux.so)
       by 0x1F08227: xmalloc (xmalloc.c:147)
       by 0x1F083E6: xvasprintf (xvasprintf.c:58)
       by 0x1E7EC7D: build_message_string(char const*, ...) (diagnostic.c:78)
       by 0x1E7F438: diagnostic_get_location_text(diagnostic_context*, expanded_location) (diagnostic.c:328)
       by 0x1E7FD54: default_diagnostic_start_span_fn(diagnostic_context*, expanded_location) (diagnostic.c:626)
       by 0x1EB3508: selftest::test_diagnostic_context::start_span_cb(diagnostic_context*, expanded_location) (selftest-diagnostic.c:57)
       by 0x1E89215: diagnostic_show_locus(diagnostic_context*, rich_location*, diagnostic_t) (diagnostic-show-locus.c:1992)
       by 0x1E8ECAD: selftest::test_fixit_insert_containing_newline_2(selftest::line_table_case const&) (diagnostic-show-locus.c:3044)
       by 0x1EB0606: selftest::for_each_line_table_case(void (*)(selftest::line_table_case const&)) (input.c:3525)
       by 0x1E8F3F5: selftest::diagnostic_show_locus_c_tests() (diagnostic-show-locus.c:3164)
       by 0x1E010BF: selftest::run_tests() (selftest-run-tests.c:88)
    
    4,004 bytes in 28 blocks are definitely lost in loss record 633 of 669
       at 0x4A0645D: malloc (in /usr/lib64/valgrind/vgpreload_memcheck-amd64-linux.so)
       by 0x1F08227: xmalloc (xmalloc.c:147)
       by 0x1F083E6: xvasprintf (xvasprintf.c:58)
       by 0x1E7EC7D: build_message_string(char const*, ...) (diagnostic.c:78)
       by 0x1E7F438: diagnostic_get_location_text(diagnostic_context*, expanded_location) (diagnostic.c:328)
       by 0x1E7FD54: default_diagnostic_start_span_fn(diagnostic_context*, expanded_location) (diagnostic.c:626)
       by 0x1EB3508: selftest::test_diagnostic_context::start_span_cb(diagnostic_context*, expanded_location) (selftest-diagnostic.c:57)
       by 0x1E89215: diagnostic_show_locus(diagnostic_context*, rich_location*, diagnostic_t) (diagnostic-show-locus.c:1992)
       by 0x1E8B373: selftest::test_diagnostic_show_locus_fixit_lines(selftest::line_table_case const&) (diagnostic-show-locus.c:2500)
       by 0x1EB0606: selftest::for_each_line_table_case(void (*)(selftest::line_table_case const&)) (input.c:3525)
       by 0x1E8F3B9: selftest::diagnostic_show_locus_c_tests() (diagnostic-show-locus.c:3159)
       by 0x1E010BF: selftest::run_tests() (selftest-run-tests.c:88)
    
    This patch fixes the leaks by ensuring that the pretty_printer "owns"
    the prefix if it's non-NULL, freeing it in the dtor and in pp_set_prefix.
    
    gcc/cp/ChangeLog:
            Backport of r263275 from trunk.
            2018-08-02  David Malcolm  <dmalcolm@redhat.com>
    
            * error.c (cxx_print_error_function): Duplicate "file" before
            passing it to pp_set_prefix.
            (cp_print_error_function): Use pp_take_prefix when saving the
            existing prefix.
    
    gcc/ChangeLog:
            Backport of r263275 from trunk.
            2018-08-02  David Malcolm  <dmalcolm@redhat.com>
    
            * diagnostic-show-locus.c (diagnostic_show_locus): Use
            pp_take_prefix when saving the existing prefix.
            * diagnostic.c (diagnostic_append_note): Likewise.
            * langhooks.c (lhd_print_error_function): Likewise.
            * pretty-print.c (pp_set_prefix): Drop the "const" from "prefix"
            param's type.  Free the existing prefix.
            (pp_take_prefix): New function.
            (pretty_printer::pretty_printer): Drop the prefix parameter.
            Rename the length parameter to match the comment.
            (pretty_printer::~pretty_printer): Free the prefix.
            * pretty-print.h (pretty_printer::pretty_printer): Drop the prefix
            parameter.
            (struct pretty_printer): Drop the "const" from "prefix" field's
            type and clarify memory management.
            (pp_set_prefix): Drop the "const" from the 2nd param.
            (pp_take_prefix): New decl.
    
    From-SVN: r268910

commit 96ca9b2f645df5fc71ef001d470224563f7adf1d
Author: David Malcolm <dmalcolm@redhat.com>
Date:   Thu Feb 14 23:02:45 2019 +0000

    C++: don't offer bogus "._0" suggestions (PR c++/86329)
    
    PR c++/86329 reports that the C++ frontend can offer bogus suggestions like:
    
      #include <string>
    
      int compare()
      {
        return __n1 - __n2;
      }
    
    suggested.cc: In function 'int compare()':
    suggested.cc:5:10: error: '__n1' was not declared in this scope
       return __n1 - __n2;
              ^~~~
    suggested.cc:5:10: note: suggested alternative: '._61'
       return __n1 - __n2;
              ^~~~
              ._61
    suggested.cc:5:17: error: '__n2' was not declared in this scope
       return __n1 - __n2;
                     ^~~~
    suggested.cc:5:17: note: suggested alternative: '._72'
       return __n1 - __n2;
                     ^~~~
                     ._72
    
    The dot-prefixed names are an implementation detail of how we implement
    anonymous enums found in the header files, generated via
    anon_aggrname_format in make_anon_name.
    
    This patch uses anon_aggrname_p to filter them out when considering
    which names to suggest.
    
    gcc/cp/ChangeLog:
            Backport of r262199 from trunk.
            2018-06-27  David Malcolm  <dmalcolm@redhat.com>
    
            PR c++/86329
            * name-lookup.c (consider_binding_level): Filter out names that
            match anon_aggrname_p.
    
    gcc/testsuite/ChangeLog:
            Backport of r262199 from trunk.
            2018-06-27  David Malcolm  <dmalcolm@redhat.com>
    
            PR c++/86329
            * g++.dg/lookup/pr86329.C: New test.
    
    From-SVN: r268909

commit 8d705c025e7a740c98a2f39185df30a519618d37
Author: David Malcolm <dmalcolm@redhat.com>
Date:   Thu Feb 14 22:57:34 2019 +0000

    Don't offer suggestions for compiler-generated variables (PR c++/85515)
    
    gcc/cp/ChangeLog:
            Backport of r259720 from trunk.
            2018-04-27  David Malcolm  <dmalcolm@redhat.com>
    
            PR c++/85515
            * name-lookup.c (consider_binding_level): Skip compiler-generated
            variables.
            * search.c (lookup_field_fuzzy_info::fuzzy_lookup_field): Flatten
            nested if statements into a series of rejection tests.  Reject
            lambda-ignored entities as suggestions.
    
    gcc/testsuite/ChangeLog:
            Backport of r259720 from trunk.
            2018-04-27  David Malcolm  <dmalcolm@redhat.com>
    
            PR c++/85515
            * g++.dg/pr85515-1.C: New test.
            * g++.dg/pr85515-2.C: New test.
    
    From-SVN: r268908

commit 346de905e1a7923dd6069d115ee49eab6606b798
Author: Segher Boessenkool <segher@kernel.crashing.org>
Date:   Thu Feb 14 20:03:54 2019 +0100

    backport: re PR target/86684 (ICE in extract_insn, at recog.c:2304 on ppc64le)
    
            Backport from trunk
            2018-08-31  Segher Boessenkool  <segher@kernel.crashing.org>
    
            PR target/86684
            PR target/87149
            * config/rs6000/rs6000.md (lround<mode>di2): Gate on TARGET_FPRND.
    
    From-SVN: r268890

commit e469964f0bda90a1d99da086aa666a5f4e45bc93
Author: Segher Boessenkool <segher@kernel.crashing.org>
Date:   Thu Feb 14 19:57:54 2019 +0100

    backport: re PR target/88892 (Double-to-float conversion uses wrong rounding mode when followed by memcpy)
    
            Backport from trunk
            2019-01-18  Segher Boessenkool  <segher@kernel.crashing.org>
    
            PR target/88892
            * config/rs6000/rs6000.md (*movsi_from_df): Allow only register
            operands.
    
    From-SVN: r268889

commit aecd55e22723f6962ba4f05a18d60b96bb287dc1
Author: Segher Boessenkool <segher@kernel.crashing.org>
Date:   Thu Feb 14 19:46:18 2019 +0100

    backport: re PR rtl-optimization/85805 (Wrong code for 64 bit comparisons on avr-gcc)
    
            Backport from trunk
            2018-07-26  Segher Boessenkool  <segher@kernel.crashing.org>
    
            PR rtl-optimization/85805
            * combine.c (reg_nonzero_bits_for_combine): Only use the last set
            value for hard registers if that was written in the same mode.
    
    From-SVN: r268888

commit 247a829309883d24da7c52bdbd249c3ba9e21f21
Author: Martin Liska <mliska@suse.cz>
Date:   Thu Feb 14 14:57:52 2019 +0100

    Backport r268873
    
    2019-02-14  Martin Liska  <mliska@suse.cz>
    
            Backport from mainline
            2019-02-14  Martin Liska  <mliska@suse.cz>
    
            PR rtl-optimization/89242
            * dce.c (delete_unmarked_insns): Call free_dominance_info we
            process a transformation.
    2019-02-14  Martin Liska  <mliska@suse.cz>
    
            Backport from mainline
            2019-02-14  Martin Liska  <mliska@suse.cz>
    
            PR rtl-optimization/89242
            * g++.dg/pr89242.C: New test.
    
    From-SVN: r268876

commit a142f0b7cc8818cc37f670f9423256bbf0e9ca14
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Thu Feb 14 11:53:57 2019 +0000

    PR middle-end/89303 add testcase for std::enable_shared_from_this
    
            * testsuite/20_util/enable_shared_from_this/89303.cc: New test.
    
    From-SVN: r268874

commit 3ede27b716687d91a2d1473ce654113ba21d0b7b
Author: Martin Liska <mliska@suse.cz>
Date:   Thu Feb 14 12:25:18 2019 +0100

    Backport r268835
    
    2019-02-14  Martin Liska  <mliska@suse.cz>
    
            Backport from mainline
            2019-02-13  Martin Liska  <mliska@suse.cz>
    
            PR lto/88858
            * cfgrtl.c (remove_barriers_from_footer): New function.
            (try_redirect_by_replacing_jump): Use it.
            (cfg_layout_redirect_edge_and_branch): Likewise.
    
    From-SVN: r268872

commit 46facf7c135bc22517c46db422447b4fcbf6f580
Author: Martin Liska <mliska@suse.cz>
Date:   Thu Feb 14 12:24:45 2019 +0100

    Backport r268762
    
    2019-02-14  Martin Liska  <mliska@suse.cz>
    
            Backport from mainline
            2019-02-11  Martin Liska  <mliska@suse.cz>
    
            PR ipa/89009
            * ipa-cp.c (build_toporder_info): Remove usage of a param.
            * ipa-inline.c (inline_small_functions): Likewise.
            * ipa-pure-const.c (propagate_pure_const): Likewise.
            (propagate_nothrow): Likewise.
            * ipa-reference.c (propagate): Likewise.
            * ipa-utils.c (struct searchc_env): Remove unused field.
            (searchc): Always search across AVAIL_INTERPOSABLE.
            (ipa_reduced_postorder): Always allow AVAIL_INTERPOSABLE as
            the only called IPA pure const can properly not propagate
            across interposable boundary.
            * ipa-utils.h (ipa_reduced_postorder): Remove param.
    2019-02-14  Martin Liska  <mliska@suse.cz>
    
            Backport from mainline
            2019-02-11  Martin Liska  <mliska@suse.cz>
    
            PR ipa/89009
            * g++.dg/ipa/pr89009.C: New test.
    
    From-SVN: r268871

commit 3fc33cd495cff112460932738b40d4a3f062f931
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Feb 14 11:04:35 2019 +0100

    re PR tree-optimization/89314 (ICE in wide_int_to_tree_1, at tree.c:1561)
    
            PR tree-optimization/89314
            * fold-const.c (fold_binary_loc): Cast strlen argument to
            const char * before dereferencing it.  Formatting fixes.
    
            * gcc.dg/pr89314.c: New test.
    
    From-SVN: r268870

commit 3319162ed5bbe3cb2d1adf675e76dbd9ee4ad378
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Feb 14 08:41:51 2019 +0100

    backport: re PR middle-end/89303 (memory leak with shared_ptr and enable_shared_from_this)
    
            Backported from mainline
            2019-02-13  Jakub Jelinek  <jakub@redhat.com>
    
            PR middle-end/89303
            * tree-ssa-structalias.c (set_uids_in_ptset): Or in vi->is_heap_var
            into pt->vars_contains_escaped_heap instead of setting
            pt->vars_contains_escaped_heap to it.
    
            2019-02-13  Jonathan Wakely  <jwakely@redhat.com>
                        Jakub Jelinek  <jakub@redhat.com>
    
            PR middle-end/89303
            * g++.dg/torture/pr89303.C: New test.
    
    From-SVN: r268866

commit a6f2048f43fec1f591185cb1925c6d787083c28c
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Feb 14 08:40:33 2019 +0100

    backport: re PR middle-end/89281 (gcc/optabs.c:3901:30: runtime error: shift exponent 32 is too large for 32-bit type 'int')
    
            Backported from mainline
            2019-02-13  Jakub Jelinek  <jakub@redhat.com>
    
            PR middle-end/89281
            * optabs.c (prepare_cmp_insn): Use UINTVAL (size) instead of
            INTVAL (size), compare it to GET_MODE_MASK instead of
            1 << GET_MODE_BITSIZE.
    
    From-SVN: r268865

commit 2c1b2a9f5976542e39f16744ae0443e621e5dc6b
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Feb 14 08:39:46 2019 +0100

    backport: re PR target/89290 (ICE in change_address_1, at emit-rtl.c:2286)
    
            Backported from mainline
            2019-02-13  Jakub Jelinek  <jakub@redhat.com>
    
            PR target/89290
            * config/i386/predicates.md (x86_64_immediate_operand): Allow
            TLS UNSPECs offsetted by signed 32-bit CONST_INT even with
            -mcmodel=large.
    
            * gcc.target/i386/pr89290.c: New test.
    
    From-SVN: r268864

commit bdaf4885d8ab58a684fba69c39f32543bb9aada6
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Feb 14 08:38:52 2019 +0100

    backport: re PR middle-end/89246 (LTO produces references to cloned symbols which the compiler failed to clone)
    
            Backported from mainline
            2019-02-09  Jakub Jelinek  <jakub@redhat.com>
    
            PR middle-end/89246
            * config/i386/i386.c (ix86_simd_clone_compute_vecsize_and_simdlen):
            If !node->definition and TYPE_ARG_TYPES is non-NULL, use
            TYPE_ARG_TYPES instead of DECL_ARGUMENTS.
    
            * gcc.dg/gomp/pr89246-1.c: New test.
            * gcc.dg/gomp/pr89246-2.c: New test.
    
    From-SVN: r268863

commit 986d687f153e2432163f65b77388263c64a04c84
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Feb 14 00:16:30 2019 +0000

    Daily bump.
    
    From-SVN: r268858

commit 25fd8e016a86169058d41cea596c62d6f3f0bab9
Author: Bill Schmidt <wschmidt@linux.ibm.com>
Date:   Wed Feb 13 19:20:56 2019 +0000

    backport: rs6000.c (rs6000_gimple_fold_builtin): Shift-right and shift-left vector built-ins need to include a TRUNC_MOD_EXPR...
    
    [gcc]
    
    2019-02-13  Bill Schmidt  <wschmidt@linux.ibm.com>
    
            Backport from mainline
            2019-02-11  Bill Schmidt  <wschmidt@linux.ibm.com>
    
            * config/rs6000/rs6000.c (rs6000_gimple_fold_builtin): Shift-right
            and shift-left vector built-ins need to include a TRUNC_MOD_EXPR
            for correct semantics.
    
    [gcc/testsuite]
    
    2019-02-13  Bill Schmidt  <wschmidt@linux.ibm.com>
    
            Backport from mainline
            2019-02-11  Bill Schmidt  <wschmidt@linux.ibm.com>
    
            * gcc.target/powerpc/vec-sld-modulo.c: New.
            * gcc.target/powerpc/vec-srad-modulo.c: New.
            * gcc.target/powerpc/vec-srd-modulo.c: New.
    
            2018-01-12  Bill Schmidt  <wschmidt@linux.ibm.com>
    
            * gcc.target/powerpc/vec-sld-modulo.c: Require p8vector_hw.
            * gcc.target/powerpc/vec-srad-modulo.c: Likewise.
            * gcc.target/powerpc/vec-srd-modulo.c: Likewise.
    
    From-SVN: r268852

commit 95eddce8bf09b762ddc10641b49765e649e8fc53
Author: Richard Biener <rguenther@suse.de>
Date:   Wed Feb 13 14:22:06 2019 +0000

    backport: re PR middle-end/86554 (Incorrect code generation with signed/unsigned comparison)
    
    2019-02-13  Richard Biener  <rguenther@suse.de>
    
            Backport from mainline
            2019-01-08  Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/86554
            * tree-ssa-sccvn.c (visit_nary_op): When value-numbering to
            expressions with different overflow behavior make sure there's an
            available expression on the path.
    
            * gcc.dg/torture/pr86554-1.c: New testcase.
            * gcc.dg/torture/pr86554-2.c: Likewise.
    
    From-SVN: r268846

commit 624dae6ac59e1b37d5505a9fbb36c9f0d4bbd2a5
Author: Martin Liska <mliska@suse.cz>
Date:   Wed Feb 13 12:24:28 2019 +0100

    Bump LTO_minor_version on GCC-8 branch (PR lto/89260).
    
    2019-02-13  Martin Liska  <mliska@suse.cz>
    
            PR lto/89260
            * lto-streamer.h (LTO_minor_version): Bump version due
            to r268698.
    
    From-SVN: r268840

commit b5236e4a6c9a30d61ad9026e2abc6d3c81e88875
Author: Richard Biener <rguenther@suse.de>
Date:   Wed Feb 13 10:02:47 2019 +0000

    backport: [multiple changes]
    
    2019-02-13  Richard Biener  <rguenther@suse.de>
    
            Backport from mainline
            2019-02-12  Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/89253
            * tree-ssa-loop-split.c (tree_ssa_split_loops): Check we can
            duplicate the loop.
    
            * gfortran.dg/pr89253.f: New testcase.
    
            2019-02-08  Richard Biener  <rguenther@suse.de>
    
            PR middle-end/89223
            * tree-data-ref.c (initialize_matrix_A): Fail if constant
            doesn't fit in HWI.
            (analyze_subscript_affine_affine): Handle failure from
            initialize_matrix_A.
    
            * gcc.dg/torture/pr89223.c: New testcase.
    
            2019-01-28  Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/88739
            * tree-ssa-sccvn.c (vn_reference_lookup_3): Avoid generating
            BIT_FIELD_REFs of non-mode-precision integral operands.
    
            * gcc.c-torture/execute/pr88739.c: New test.
    
    From-SVN: r268838

commit 7a5a8d219e21d106192b946bd96368d6e39b12f7
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Feb 13 00:16:08 2019 +0000

    Daily bump.
    
    From-SVN: r268832

commit 26c3e6e6948cf309446e91a618fe9f1e43a661ed
Author: Jan Hubicka <hubicka@ucw.cz>
Date:   Tue Feb 12 16:27:59 2019 +0100

    backport: ipa-visibility.c (localize_node): Also do not localize LDPR_PREVAILING_DEF_IRONLY_EXP.
    
    
            Backport from mainline:
            2019-02-09  Jan Hubicka  <hubicka@ucw.cz>
    
            * ipa-visibility.c (localize_node): Also do not localize
            LDPR_PREVAILING_DEF_IRONLY_EXP.
    
    From-SVN: r268799

commit 9ed7a5fe9f74706238a119c0818f36d51f19198d
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Feb 12 00:16:16 2019 +0000

    Daily bump.
    
    From-SVN: r268787

commit 77636ddc13d9c46971840cedeab03b7eab562725
Author: Jason Merrill <jason@redhat.com>
Date:   Mon Feb 11 16:49:37 2019 -0500

    Revert "        PR c++/88752 - ICE with lambda and constexpr if."
    
    This reverts commit 2a97dfc988a695e44f759099f74e4a18c01fa9a5.
    
    From-SVN: r268783

commit c736248c79133c6077cbe2350b470cbf24c6612b
Author: Jason Merrill <jason@redhat.com>
Date:   Mon Feb 11 12:57:41 2019 -0500

    PR c++/89267 - change of error location.
    
            * pt.c (tsubst_copy_and_build): Do still clear expr location
            for instantiated thunk calls.
    
    From-SVN: r268776

commit 9f2c8cf5b177b516f514a9a50801d07beb117710
Author: Stefan Agner <stefan@agner.ch>
Date:   Mon Feb 11 10:26:31 2019 +0100

    ARM: fix -masm-syntax-unified (PR88648)
    
            Backport from mainline.
            2019-01-10  Stefan Agner  <stefan@agner.ch>
    
            PR target/88648
            * config/arm/arm.c (arm_option_override_internal): Force
            opts->x_inline_asm_unified to true only if TARGET_THUMB2_P.
    
            * gcc.target/arm/pr88648-asm-syntax-unified.c: Add test to
            check if -masm-syntax-unified gets applied properly.
    
    From-SVN: r268764

commit ad19a0865dba7397fc57c53d4585af790e027f88
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Feb 11 00:16:08 2019 +0000

    Daily bump.
    
    From-SVN: r268757

commit d8ead5d158f858e2a7c12410643cd299e05946ab
Author: Harald Anlauf <anlauf@gmx.de>
Date:   Sun Feb 10 20:01:15 2019 +0000

    backport: re PR fortran/89077 (ICE using * as len specifier for character parameter)
    
    2019-02-10  Harald Anlauf  <anlauf@gmx.de>
    
            Backport from trunk
            PR fortran/89077
            * decl.c (add_init_expr_to_sym): Copy length of string initializer
            to declared symbol.
    
            PR fortran/89077
            * gfortran.dg/pr89077.f90: New test.
    
    From-SVN: r268752

commit 49c45748e747a2ccad0ed00db88b47f23d4bd5b5
Author: Thomas Koenig <tkoenig@gcc.gnu.org>
Date:   Sun Feb 10 18:30:01 2019 +0000

    re PR fortran/71723 ([F08] ICE on invalid pointer initialization)
    
    2019-02-10  Thomas Koenig  <tkoenig@gcc.gnu.org>
    
            PR fortran/71237
            Backport from trunk
            * expr.c (gfc_check_assign): Add argument is_init_expr.  If we are
            looking at an init expression, issue error if the target is not a
            TARGET and we are not looking at a procedure pointer.
            * gfortran.h (gfc_check_assign): Add optional argument
            is_init_expr.
    
    2019-02-10  Thomas Koenig  <tkoenig@gcc.gnu.org>
    
            PR fortran/71237
            Backport from trunk
            * gfortran.dg/pointer_init_2.f90: Adjust error messages.
            * gfortran.dg/pointer_init_6.f90: Likewise.
            * gfortran.dg/pointer_init_9.f90: New test.
    
    From-SVN: r268750

commit d3d6b2c5e440c27ab901a777e258bf7fac2b3d7c
Author: Jan Hubicka <hubicka@ucw.cz>
Date:   Sun Feb 10 13:55:24 2019 +0100

    backport: re PR tree-optimization/86020 (Performance regression in Eigen geometry.cpp test starting with r248334)
    
    
            Backport from mainline:
            2019-01-05  Jan Hubicka  <hubicka@ucw.cz>
    
            PR tree-opt/86020
            Revert:
            2017-05-22  Jan Hubicka  <hubicka@ucw.cz>
    
            * ipa-inline.c (edge_badness): Use inlined_time instead of
            inline_summaries->get.
    
    From-SVN: r268745

commit 4963af8c664eb9e59c151f5a8d04794669ee0e33
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Feb 10 00:16:30 2019 +0000

    Daily bump.
    
    From-SVN: r268734

commit fe658b4f572710e451ef039219b8c34313357e73
Author: Thomas Koenig <tkoenig@gcc.gnu.org>
Date:   Sat Feb 9 20:07:28 2019 +0000

    re PR fortran/71860 ([OOP] ICE on pointing to null(mold), verify_gimple failed)
    
    2019-02-09  Thomas Koenig  <tkoenig@gcc.gnu.org>
    
        PR fortran/71860
        Backport from trunk
        * gfortran.dg/null_10.f90: New test.
    
    From-SVN: r268730

commit f45063ace1b262e5b44cd922ce171d6bd03ef171
Author: Aaron Sawdey <acsawdey@linux.ibm.com>
Date:   Sat Feb 9 17:11:06 2019 +0000

    backport: [multiple changes]
    
    2019-02-09  Aaron Sawdey  <acsawdey@linux.ibm.com>
    
            Backported from mainline
            2019-02-05  Aaron Sawdey  <acsawdey@linux.ibm.com>
    
            PR target/89112
            * config/rs6000/rs6000.md (<bd>tf_<mode>): Generate a local label
            for the long branch case.
    
            2019-02-05  Aaron Sawdey  <acsawdey@linux.ibm.com>
    
            PR target/89112
            * config/rs6000/rs6000-string.c (do_ifelse, expand_cmp_vec_sequence,
            expand_compare_loop, expand_block_compare_gpr,
            expand_strncmp_align_check, expand_strncmp_gpr_sequence): Insert
            REG_BR_PROB notes in inline expansion of memcmp/strncmp. Add
            #include "profile-count.h" and "predict.h" for types and functions
            needed to work with REG_BR_PROB notes.
    
            2019-02-09  Aaron Sawdey  <acsawdey@linux.ibm.com>
    
            * config/rs6000/rs6000-string.c (expand_compare_loop,
            expand_block_compare): Insert REG_BR_PROB notes in inline expansion of
            memcmp/strncmp.
    
    From-SVN: r268725

commit 25030590b128f579d91f266b5a1eaeb7d50f0c89
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Sat Feb 9 09:51:41 2019 +0100

    re PR middle-end/89243 (ICE in new test case g++.dg/opt/pr89188.C from r268647)
    
            PR middle-end/89243
            * g++.dg/opt/pr89188.C: Include ../torture/pr88861.C.
    
            Backported from mainline
            2019-01-16  David Malcolm  <dmalcolm@redhat.com>
    
            PR target/88861
            * combine.c (delete_noop_moves): Convert to "bool" return,
            returning true if any edges are eliminated.
            (combine_instructions): Also return true if delete_noop_moves
            returns true.
    
            * g++.dg/torture/pr88861.C: New test.
    
    From-SVN: r268717

commit 888059bb48250c1ebd59429f17333d93f5a69a1a
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Sat Feb 9 09:50:05 2019 +0100

    backport: re PR rtl-optimization/89234 (ICE in get_eh_region_and_lp_from_rtx at gcc/except.c:1824)
    
            Backported from mainline
            2019-02-08  Jakub Jelinek  <jakub@redhat.com>
    
            PR rtl-optimization/89234
            * except.c (copy_reg_eh_region_note_forward): Return if note_or_insn
            is a NOTE, CODE_LABEL etc. - rtx_insn * other than INSN_P.
            (copy_reg_eh_region_note_backward): Likewise.
    
            * g++.dg/ubsan/pr89234.C: New test.
    
    From-SVN: r268716

commit 36709d674f19e80c8c13ffa945c9952f55b185a0
Author: Alan Modra <amodra@gmail.com>
Date:   Sat Feb 9 19:09:58 2019 +1030

    [RS6000] Correct save_reg_p
    
            PR target/88343
            * config/rs6000/rs6000.c (save_reg_p): Match logic in
            rs6000_emit_prologue emitting pic_offset_table setup.
    
    From-SVN: r268715

commit e04242801c92d16ebbd69ca53e6cbf21307cded6
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Sat Feb 9 00:40:31 2019 +0000

    PR libstdc++/88066 use <> for includes not ""
    
    Using #include "..." to include a header in the same directory fails if
    the user compiles with -I-, so always use something like <bits/...> for
    internal headers.
    
    I haven't added tests for this, because dg-options adds options to the
    end, and the position of -I- matters (if it's at the end then the tests
    won't find any headers in the build tree, as they're specified by -I
    options earlier in the flags). It's been manually tested though.
    
            PR libstdc++/88066
            * include/bits/locale_conv.h: Use <> for includes not "".
            * include/ext/random: Likewise.
            * include/ext/vstring.h: Likewise.
    
    From-SVN: r268714

commit 2c222f30dfca3e98aca242c6878563a4c98bfc8b
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Feb 9 00:16:27 2019 +0000

    Daily bump.
    
    From-SVN: r268711

commit e0aaac64eca7fa8b45947062294106ee21e45fbd
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Fri Feb 8 23:16:19 2019 +0000

    Regenerate libstdc++ HTML pages
    
            * doc/html/*: Regenerate.
    
    From-SVN: r268709

commit c88550026b80a8e868222f5422fcaa2cc0b023fe
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Fri Feb 8 20:30:00 2019 +0000

    Backport small improvement to filesystem::absolute
    
            * src/c++17/fs_ops.cc (absolute(const path&, error_code&)): Do nothing
            if the path is already absolute.
            [!_GLIBCXX_FILESYSTEM_IS_WINDOWS]: Pass error_code to current_path.
    
    From-SVN: r268707

commit 22368b497156cb0e795e8b7da4a190e237670b58
Author: Jason Merrill <jason@redhat.com>
Date:   Fri Feb 8 09:50:03 2019 -0500

    PR c++/88761 - ICE with reference capture of constant.
    
    Here, we capture nf, then the use of the proxy decays to a constant during
    semantic processing of +nf.  Since we saw some decay from proxy to constant,
    we walk through the lambda body to see which proxies are still used, but we
    weren't walking into subtrees of DECL_EXPR at all, so we missed the use of
    &nf in the initializer of y, and removed the capture.  But then at
    instantiation time we try to use nf, don't have a proxy anymore, and ICE.
    
            * lambda.c (mark_const_cap_r): Do walk subtrees of DECL_EXPR for
            non-proxy decls.
    
    From-SVN: r268702

commit ed409b949fc90643f69e71119ec44d3b0e85e0fe
Author: Jason Merrill <jason@redhat.com>
Date:   Fri Feb 8 09:49:58 2019 -0500

    PR c++/88752 - ICE with lambda and constexpr if.
    
            * cp-tree.h (LAMBDA_EXPR_INSTANTIATED): New.
            * pt.c (tsubst_lambda_expr): Set it.
            (instantiated_lambda_fn_p): Check it.
            (enclosing_instantiation_of): Use it.
    
    From-SVN: r268701

commit 060cc678829c4a12cc4cf79735dc918d125860ea
Author: Jason Merrill <jason@redhat.com>
Date:   Fri Feb 8 09:49:43 2019 -0500

    PR c++/86943 - wrong code converting generic lambda to pointer.
    
            * pt.c (tsubst_copy_and_build): Don't propagate CALL_FROM_THUNK_P.
    
    From-SVN: r268700

commit 1681089aa4625e42a2c0dfc7228bdb1e88f21ca0
Author: Richard Biener <rguenther@suse.de>
Date:   Fri Feb 8 14:38:31 2019 +0000

    backport: re PR tree-optimization/86991 (ICE in vectorizable_reduction, at tree-vect-loop.c:6919)
    
    2019-02-08  Richard Biener  <rguenther@suse.de>
    
            Backport from mainline
            2018-11-13  Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/86991
            * tree-vect-loop.c (vect_is_slp_reduction): Delay reduction
            group building until we have successfully detected the SLP
            reduction.
            (vect_is_simple_reduction): Remove fixup code here.
    
            * gcc.dg/pr86991.c: New testcase.
    
    From-SVN: r268699

commit c15ac92cfd92c9db3e609cd96aba74f7806bf4e3
Author: Richard Biener <rguenther@suse.de>
Date:   Fri Feb 8 14:34:49 2019 +0000

    Backport PRs 86736, 87187, 87229, 87295, 88046, 88112
    
    2019-02-08  Richard Biener  <rguenther@suse.de>
    
            Backport from mainline
            2019-02-03  Richard Biener  <rguenther@suse.de>
    
            PR debug/87295
            * dwarf2out.c (copy_ancestor_tree): Register non-stubs as
            orig.
    
            * g++.dg/debug/dwarf2/pr87295.C: New testcase.
    
            2019-01-29  Richard Biener  <rguenther@suse.de>
    
            PR debug/87295
            * dwarf2out.c (collect_skeleton_dies): New helper.
            (copy_decls_for_unworthy_types): Call it.
            (build_abbrev_table): Do not try to replace
            DW_AT_signature refs with local refs.
    
            * g++.dg/lto/pr87295_0.C: New testcase.
    
            2019-01-17  Richard Biener  <rguenther@suse.de>
    
            PR lto/86736
            * dwarf2out.c (want_pubnames): Never generate pubnames sections
            and friends for the LTO part of debug info.
    
            2019-01-24  Richard Biener  <rguenther@suse.de>
    
            PR lto/87187
            * tree-streamer-out.c (write_ts_decl_common_tree_pointers):
            When in "legacy" debug mode make sure to reset self-origins.
    
            2019-01-15  Richard Biener  <rguenther@suse.de>
    
            PR debug/88046
            * dwarf2out.c (gen_member_die): Do not generate inheritance
            DIEs late.
    
            * g++.dg/lto/pr88046_0.C: New testcase.
    
            2018-11-22  Richard Biener  <rguenther@suse.de>
    
            PR lto/87229
            PR lto/88112
            * lto-streamer-out.c (lto_is_streamable): Allow CALL_EXPRs
            which can appear in size expressions.
            * tree-streamer-in.c (unpack_ts_base_value_fields): Stream
            CALL_EXPR_BY_DESCRIPTOR.
            (streamer_read_tree_bitfields): Stream CALL_EXPR_IFN.
            * tree-streamer-out.c (pack_ts_base_value_fields): Stream
            CALL_EXPR_BY_DESCRIPTOR.
            (streamer_write_tree_bitfields): Stream CALL_EXPR_IFN.
    
    From-SVN: r268698

commit 62441f104eafe755f44e6e53edca9920ad91e6a0
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Fri Feb 8 14:16:33 2019 +0000

    P0972R0 <chrono> zero(), min(), and max() should be noexcept
    
    This paper has been included in the C++20 draft, but the changes to add
    noexcept can be made unconditionally, to apply for C++11 too.
    
    Backport from mainline
    2019-01-11  Jonathan Wakely  <jwakely@redhat.com>
    
            * include/std/chrono (duration_values::zero(), duration_values::min())
            (duration_values::max()): Add noexcept.
            (duration::zero(), duration::min(), duration::max()): Likewise.
            (time_point::zero(), time_point::min(), time_point::max()): Likewise.
            * testsuite/20_util/duration/requirements/noexcept.cc: New test.
            * testsuite/20_util/time_point/requirements/noexcept.cc: New test.
    
    From-SVN: r268695

commit fedf0cc02af106d9f10d76e92bea8830674890bc
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Fri Feb 8 14:16:28 2019 +0000

    PR libstdc++/87787 avoid undefined null args to memcpy and memmove
    
    The C++ char_traits and ctype APIs do not disallow null pointer
    arguments, so we need explicit checks to ensure we don't forward null
    pointers to memcpy or memmove.
    
    Backport from mainline
    2019-01-07  Jonathan Wakely  <jwakely@redhat.com>
    
            PR libstdc++/87787
            * include/bits/char_traits.h (char_traits::move): Do not pass null
            pointers to memmove.
            * include/bits/locale_facets.h
            (ctype<char>::widen(const char*, const char*, char*)): Do not
            pass null pointers to memcpy.
            (ctype<char>::narrow(const char*, const char*, char, char*)):
            Likewise.
            (ctype<char>::do_widen(const char*, const char*, char*)):
            Likewise.
            (ctype<char>::do_narrow(const char*, const char*, char, char*)):
            Likewise.
    
    From-SVN: r268694

commit 5bc6f82e708c3d26c79c77a831aefed7b7d2ab0d
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Fri Feb 8 14:16:09 2019 +0000

    PR libstdc++/65229 fix pretty printer for std::bitset<0>
    
    Backport from mainline
    2018-11-23  Martin Sebor  <msebor@redhat.com>
                Jonathan Wakely  <jwakely@redhat.com>
    
            PR libstdc++/65229
            * python/libstdcxx/v6/printers.py (StdBitsetPrinter): Handle
            exception thrown for std::bitset<0>.
            * testsuite/libstdc++-prettyprinters/simple.cc: Test std::bitset<0>.
    
    From-SVN: r268693

commit 9a605956f1ade2500050abbb14c845e4675d5559
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Fri Feb 8 14:15:36 2019 +0000

    PR libstdc++/87308 adjust regex used in std::any pretty printer
    
    The regex used in the backported patch is simpler than the one in trunk,
    because it appears that LTO mangles the debug info on the branch,
    causing it to fail to match sometimes. The new test is also omitted from
    the branch, because it fails for the same reason.
    
    Backport from mainline
    2018-11-23  Jonathan Wakely  <jwakely@redhat.com>
    
            PR libstdc++/87308 (partial)
            * python/libstdcxx/v6/printers.py (StdExpAnyPrinter): Adjust regex to
            work around PR 88166.
    
    From-SVN: r268692

commit 56d7d6795c560811e24f8312ee608b05d77ae24b
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Fri Feb 8 14:15:03 2019 +0000

    PR libstdc++/89128 add deduction guides for container adaptors
    
    Backport from mainline
    2019-02-05  Jonathan Wakely  <jwakely@redhat.com>
    
            PR libstdc++/89128
            * include/bits/stl_queue.h (queue, priority_queue): Add deduction
            guides.
            * include/bits/stl_stack.h (stack): Likewise.
            * testsuite/23_containers/priority_queue/deduction.cc: New test.
            * testsuite/23_containers/queue/deduction.cc: New test.
            * testsuite/23_containers/stack/deduction.cc: New test.
    
    From-SVN: r268691

commit 06a43d8f33933dff4638ee7a6355988b5ba3dfe4
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Fri Feb 8 14:14:57 2019 +0000

    PR libstdc++/88119 use alignof in std::alignment_of, not __alignof__
    
    Now that __alignof__ and alignof sometimes disagree it matters which one
    we use. The standard says that std::alignment_of<T>::value equals
    alignof(T), so we need to use that.
    
    Change the only uses of alignment_of to use __alignof__ to avoid a
    change in alignment.
    
    Backport from mainline
    2018-11-29  Jonathan Wakely  <jwakely@redhat.com>
    
            PR libstdc++/88119
            * include/ext/aligned_buffer.h (__aligned_membuf): Add comment.
            (__aligned_buffer): Use __alignof__ instead of std::alignment_of.
            * include/std/type_traits (alignment_of): Use alignof instead of
            __alignof__.
            * testsuite/20_util/alignment_of/value.cc: Fix test to check values
            match alignof not __alignof__, as required by the standard.
    
    From-SVN: r268690

commit a24f25cb800e4deac3d286824e0f2c56b7b78df5
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Fri Feb 8 12:38:42 2019 +0000

    PR libstdc++/83511 add default argument to basic_string_view::substr
    
    Backport from mainline
    2018-11-28  Jonathan Wakely  <jwakely@redhat.com>
    
            PR libstdc++/83511
            * include/std/string_view (basic_string_view::substr): Add default
            argument to first parameter.
            * include/experimental/string_view (basic_string_view::substr):
            Likewise.
            * testsuite/21_strings/basic_string_view/operations/substr/char/
            83511.cc: New test.
            * testsuite/21_strings/basic_string_view/operations/substr/wchar_t/
            83511.cc: New test.
            * testsuite/experimental/string_view/operations/substr/char/83511.cc:
            New test.
            * testsuite/experimental/string_view/operations/substr/wchar_t/83511.cc:
            New test.
    
    From-SVN: r268687

commit 7db334e642037d38a2c6c3f3d5101c7a9cbbebd9
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Fri Feb 8 12:38:35 2019 +0000

    PR libstdc++/88084 - Implement LWG 2777
    
    Backport from mainline
    2018-11-19  Jonathan Wakely  <jwakely@redhat.com>
    
            * include/std/string_view (basic_string_view::copy): Use traits to
            copy.
            * testsuite/21_strings/basic_string_view/operations/copy/char/2.cc:
            New test.
            * testsuite/21_strings/basic_string_view/operations/copy/wchar_t/2.cc:
            New test.
    
    From-SVN: r268686

commit 80d1fe2f62681fd2e892395c86fa210d97475149
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Fri Feb 8 12:20:22 2019 +0000

    PR libstdc++/86910 fix filesystem::create_directories
    
    Implement the proposed semantics from P1164R0, which reverts the changes
    of LWG 2935. This means that failure to create a directory because a
    non-directory already exists with that name will be reported as an
    error.
    
    While rewriting the function, also fix PR 87846, which is a result of
    the C++17 changes to how a trailing slash on a path affects the last
    component of a path.
    
    Backport from mainline
    2018-11-29  Jonathan Wakely  <jwakely@redhat.com>
    
            PR libstdc++/86910
            PR libstdc++/87846
            * src/filesystem/ops.cc (experimental::create_directories): Report
            an error when the path resolves to an existing non-directory (P1164).
            * src/filesystem/std-ops.cc (create_directories): Likewise. Handle
            empty filenames due to trailing slashes.
            * testsuite/27_io/filesystem/operations/create_directories.cc: Test
            when some component of the path exists and is not a directory. Test
            trailing slashes.
            * testsuite/experimental/filesystem/operations/create_directories.cc:
            Likewise.
    
    From-SVN: r268685

commit a1caaf870eaa65e9346553bfee642bdbd842727e
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Fri Feb 8 12:20:17 2019 +0000

    Apply resolution for LWG DR 3096
    
    Add fix for "path::lexically_relative is confused by trailing slashes".
    
    Backport from mainline
    2018-11-28  Jonathan Wakely  <jwakely@redhat.com>
    
            * doc/xml/manual/intro.xml: Document LWG 3096 change.
            * src/filesystem/std-path.cc (path::lexically_relative(const path&)):
            Treat a final empty element equivalently to a final dot element.
            * testsuite/27_io/filesystem/path/generation/relative.cc: Add checks
            for the examples in the DR.
    
    From-SVN: r268684

commit 6028d60c305276cd4f91cff748b7796d2e69f938
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Fri Feb 8 12:20:12 2019 +0000

    PR libstdc++/86595 add missing noexcept
    
    Backport from mainline
    2018-07-20  Jonathan Wakely  <jwakely@redhat.com>
    
            PR libstdc++/86595
            * include/bits/fs_dir.h (directory_entry::refresh(error_code&)): Add
            noexcept.
    
    From-SVN: r268683

commit 4445963e8014b34994a1f10995918079935aa946
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Fri Feb 8 12:20:08 2019 +0000

    Fix std::filesystem::absolute for empty paths
    
    Backport from mainline
    2018-05-21  Jonathan Wakely  <jwakely@redhat.com>
    
            * src/filesystem/std-ops.cc (absolute): Report an error for empty
            paths.
            (weakly_canonical(const path&)): Do not call canonical on empty path.
            (weakly_canonical(const path&, error_code&)): Likewise.
            * testsuite/27_io/filesystem/operations/absolute.cc: Check for errors.
    
    From-SVN: r268682

commit 2d931ad926bf4b0483f4729c0b686110daaa19c3
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Fri Feb 8 12:20:03 2019 +0000

    PR libstdc++/89117 backport path::replace_extension("") fix
    
    Although the reported bug isn't present on the branch, adjusting the
    final component avoids leaving a broken invariant in case of an
    exception.
    
    Backport from mainline
    2019-01-30  Jonathan Wakely  <jwakely@redhat.com>
    
            PR libstdc++/89117
            * src/c++17/fs_path.cc (path::replace_extension): Erase extension from
            final component as well as from _M_pathname.
            * testsuite/27_io/filesystem/path/modifiers/replace_extension.cc:
            Add more test cases.
    
    From-SVN: r268681

commit 289852850077aa3353674abd3734b4f739a45ee3
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Fri Feb 8 11:20:57 2019 +0000

    utils.c (max_size): Be prepared for an operand with VOID_TYPE.
    
            * gcc-interface/utils.c (max_size) <tcc_unary>: Be prepared for an
            operand with VOID_TYPE.
    
    From-SVN: r268676

commit c5b2cb79dfdf27b147f368ad230af8b59673d42a
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Fri Feb 8 11:07:36 2019 +0000

    trans.c (Regular_Loop_to_gnu): Replace tests on individual flag_unswitch_loops and flag_tree_loop_vectorize...
    
            * gcc-interface/trans.c (Regular_Loop_to_gnu): Replace tests on
            individual flag_unswitch_loops and flag_tree_loop_vectorize switches
            with test on global optimize switch.
            (Raise_Error_to_gnu): Likewise.
    
    From-SVN: r268672

commit 623ad3a42ad0506437918bfa70db549342a11d6b
Author: Christophe Lyon <christophe.lyon@linaro.org>
Date:   Fri Feb 8 09:05:40 2019 +0000

    PR target/85596 Add --with-multilib-list doc for aarch64
    
    2019-02-08  Christophe Lyon  <christophe.lyon@linaro.org>
    
            Backport from mainline
            2019-01-07  Christophe Lyon  <christophe.lyon@linaro.org>
    
            PR target/85596
            * doc/install.texi (with-multilib-list): Document for aarch64.
    
    From-SVN: r268667

commit dabc2afc703eb40509fc4d399cfaa095b34917a2
Author: Richard Biener <rguenther@suse.de>
Date:   Fri Feb 8 07:40:31 2019 +0000

    backport: [multiple changes]
    
    2019-02-08  Richard Biener  <rguenther@suse.de>
    
            Backport from mainline
            2018-12-10  Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/88427
            * vr-values.c (vr_values::extract_range_from_phi_node):
            Handle symbolic ranges conservatively when trying to drop
            to Inf +- 1.
    
            * gcc.dg/pr88427.c: New testcase.
    
            2018-11-28  Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/88217
            * vr-values.c (vr_values::extract_range_from_phi_node): Make
            sure to handle results > +INF and < -INF correctly when
            trying to drop down to +INF - 1 or -INF + 1.
    
            * g++.dg/pr88217.C: New testcase.
    
            2018-11-23  Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/88149
            * tree-vect-slp.c (vect_slp_analyze_node_operations): Detect
            the case where there are two different def types for the
            same operand at different operand position in the same stmt.
    
            * g++.dg/torture/pr88149.C: New testcase.
    
    From-SVN: r268665

commit e2c3509a5e65d50cc733440149e22e40fc87a945
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Feb 8 00:16:13 2019 +0000

    Daily bump.
    
    From-SVN: r268661

commit fc7dbddb75c6afe915876a6c5a41f85ed90d4c01
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Thu Feb 7 16:29:11 2019 +0000

    * libgnarl/s-linux__sparc.ads (ETIMEDOUT): Set to correct value.
    
    From-SVN: r268653

commit 35c5ae474a5ab118de5ed3694b5449ecf6228248
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Feb 7 15:58:21 2019 +0100

    backport: re PR c/89211 (ICE in int_mode_for_mode, at stor-layout.c:403)
    
            Backported from mainline
            2019-02-06  Jakub Jelinek  <jakub@redhat.com>
    
            PR c/89211
            * c-parser.c (c_parser_declaration_or_fndef): Don't update
            DECL_ARGUMENTS of d if it has been defined already.  Use a single if
            instead of 3 nested ifs.
    
            * gcc.dg/pr89211.c: New test.
    
    From-SVN: r268650

commit 785557f163b30c4df2a5d7ca71b1aec91c87ca88
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Feb 7 15:57:29 2019 +0100

    backport: re PR c++/89187 (ICE in initialize_argument_information, at calls.c:2023)
    
            Backported from mainline
            2019-02-05  Jakub Jelinek  <jakub@redhat.com>
    
            PR c++/89187
            * optimize.c (maybe_thunk_body): Clear TREE_ADDRESSABLE on
            PARM_DECLs of the thunk.
            * lambda.c (maybe_add_lambda_conv_op): Likewise.
    
            * g++.dg/opt/pr89187.C: New test.
    
    From-SVN: r268649

commit 8f9de623abdd7d6549d350fdd6f410c39113ff04
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Feb 7 15:56:24 2019 +0100

    backport: re PR rtl-optimization/11304 (Wrong code production with -fomit-frame-pointer)
    
            Backported from mainline
            2019-02-05  Jakub Jelinek  <jakub@redhat.com>
    
            PR rtl-optimization/11304
            * gcc.target/i386/call-1.c (set_eax): Add "eax" clobber.
            * gcc.target/i386/call-2.c: New test.
    
    From-SVN: r268648

commit 41e4219b6a3818c1f2d8233bd76fb9334900625a
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Feb 7 15:55:50 2019 +0100

    backport: re PR target/89188 (ICE in pre_and_rev_post_order_compute, at cfganal.c:1055)
    
            Backported from mainline
            2019-02-05  Jakub Jelinek  <jakub@redhat.com>
    
            PR target/89188
            * dce.c (delete_unmarked_insns): Don't remove no-op moves if they
            can throw, non-call exceptions are enabled and we can't delete
            dead exceptions or alter cfg.  Set must_clean if
            delete_insn_and_edges returns true, don't set it blindly for calls.
    
            * g++.dg/opt/pr89188.C: New test.
    
    From-SVN: r268647

commit 89fca7f8e3a676202451bbbe3fd773c4c6a90fa9
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Feb 7 15:55:04 2019 +0100

    backport: re PR rtl-optimization/89195 (Corrupted stack offset after combine)
    
            Backported from mainline
            2019-02-05  Jakub Jelinek  <jakub@redhat.com>
    
            PR rtl-optimization/89195
            * combine.c (make_extraction): For MEMs, don't extract bytes outside
            of the original MEM.
    
            * gcc.c-torture/execute/pr89195.c: New test.
    
    From-SVN: r268646

commit e390abb5f0ab3df808f85dd9c8cfa044b7ac8b7f
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Feb 7 15:54:16 2019 +0100

    backport: re PR target/89186 (ICE in mark_addressable at gcc/gimple-expr.c:894 since r268138)
    
            Backported from mainline
            2019-02-05  Jakub Jelinek  <jakub@redhat.com>
    
            PR target/89186
            * optabs.c (prepare_cmp_insn): Pass x and y to
            emit_block_comp_via_libcall rather than XEXP (x, 0) and XEXP (y, 0).
    
            * g++.dg/ext/vector36.C: New test.
    
    From-SVN: r268645

commit df80e25c96b8d5676e51b333a155d07a955ea3b4
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Feb 7 15:53:33 2019 +0100

    backport: re PR middle-end/87887 (ICE in make_ssa_name_fn, at tree-ssanames.c:269)
    
            Backported from mainline
            2019-02-02  Jakub Jelinek  <jakub@redhat.com>
    
            PR middle-end/87887
            * config/i386/i386.c (ix86_simd_clone_compute_vecsize_and_simdlen):
            Punt with warning on aggregate return or argument types.  Ignore
            type/mode checking for uniform arguments.
    
            * gcc.dg/gomp/pr87887-1.c: New test.
            * gcc.dg/gomp/pr87887-2.c: New test.
    
    From-SVN: r268643

commit fd0e6668b876fc39cd009d4c8d24e7bea1a3666b
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Feb 7 15:52:41 2019 +0100

    backport: re PR fortran/83246 (internal compiler error or loader problem might be related to a PARAMETER statement being in a BLOCK)
    
            Backported from mainline
            2019-02-01  Jakub Jelinek  <jakub@redhat.com>
    
            PR fortran/83246
            PR fortran/89084
            * trans-decl.c (generate_local_decl): Add referenced FL_PARAMETERs
            if sym->ns->construct_entities rather than if
            sym->ns->parent->code->op == EXEC_BLOCK.
    
            * gfortran.dg/pr89084.f90: New test.
            * gfortran.dg/lto/pr89084_0.f90: New test.
            * gfortran.dg/pr83246.f90: New test.
    
    From-SVN: r268642

commit f94146a4a630aba0de587dd9e66e0b251128cefc
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Feb 7 15:51:41 2019 +0100

    backport: re PR tree-optimization/88107 (ICE in find_outermost_region_in_block, at tree-cfg.c:7157)
    
            Backported from mainline
            2019-02-01  Jakub Jelinek  <jakub@redhat.com>
    
            PR tree-optimization/88107
            * tree-cfg.c (find_outermost_region_in_block): Add ALL argument,
            instead of assertion that eh_region_outermost is non-NULL, if it
            is NULL, set *ALL to true and return NULL.
            (move_sese_region_to_fn): Adjust caller, if all is set, call
            duplicate_eh_regions with NULL region.
    
            * gcc.dg/gomp/pr88107.c: New test.
    
    From-SVN: r268640

commit 1771d73d982534d8253a1ec1e5ac9d4cead26fee
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Feb 7 15:48:43 2019 +0100

    backport: re PR sanitizer/89124 (__attribute__((no_sanitize_address)) interferes with __attribute__((target(xxx))))
    
            Backported from mainline
            2019-01-31  Jakub Jelinek  <jakub@redhat.com>
    
            PR sanitizer/89124
            * ipa-inline.c (sanitize_attrs_match_for_inline_p): Allow inlining
            always_inline callees into no_sanitize_address callers.
    
            * c-c++-common/asan/pr89124.c: New test.
    
    From-SVN: r268639

commit 51ba7218f778f1b7e86f10972d209074a83ea7d4
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Feb 7 15:47:18 2019 +0100

    backport: re PR c++/88988 (ICE: Segmentation fault (in lookup_name_real_1))
    
            Backported from mainline
            2019-01-30  Jakub Jelinek  <jakub@redhat.com>
    
            PR c++/88988
            * lambda.c (is_capture_proxy): Don't return true for
            DECL_OMP_PRIVATIZED_MEMBER artificial vars.
    
            * testsuite/libgomp.c++/pr88988.C: New test.
    
    From-SVN: r268638

commit 00df075841311e752ac11464cb5a9ce169c34f80
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Feb 7 15:46:32 2019 +0100

    backport: re PR c++/89105 (-Wabi warns for functions with internal linkage)
    
            Backported from mainline
            2019-01-30  Jakub Jelinek  <jakub@redhat.com>
    
            PR c++/89105
            * config/i386/i386.c (ix86_warn_parameter_passing_abi): Don't warn
            for arguments to functions that are TU-local and shouldn't be
            referenced by assembly.
    
            * g++.dg/abi/pr89105.C: New test.
    
    From-SVN: r268637

commit 8c06e39a6f32ab7087fa7fc221356bc26905728d
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Feb 7 15:45:41 2019 +0100

    backport: re PR c++/66676 (pragma omp simd aligned(x) results in "internal compiler error: Segmentation fault")
    
            Backported from mainline
            2019-01-29  Jakub Jelinek  <jakub@redhat.com>
    
            PR c++/66676
            PR ipa/89104
            * omp-simd-clone.c (simd_clone_clauses_extract)
            <case OMP_CLAUSE_ALIGNED>: Ignore clauses with NULL
            OMP_CLAUSE_ALIGNED_ALIGNMENT.
    
            * gcc.dg/gomp/pr89104.c: New test.
    
    From-SVN: r268636

commit 3792bdb6165f904447cf043aaaa8f183b8403764
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Feb 7 15:44:31 2019 +0100

    backport: re PR middle-end/89002 (ICE in scan_omp_1_op, at omp-low.c:3166)
    
            Backported from mainline
            2019-01-28  Jakub Jelinek  <jakub@redhat.com>
    
            PR middle-end/89002
            * gimplify.c (gimplify_omp_for): When adding OMP_CLAUSE_*_GIMPLE_SEQ
            for lastprivate/linear IV, push gimplify context around gimplify_assign
            and, if it needed any temporaries, pop it into a gimple bind around the
            sequence.
    
            * testsuite/libgomp.c/pr89002.c: New test.
    
    From-SVN: r268635

commit dcf3598d52154638c1ace242ea866ea439bf36cc
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Feb 7 15:43:41 2019 +0100

    backport: re PR target/89073 (x86 __attribute__ ((target("sha"))) not documented)
    
            Backported from mainline
            2019-01-28  Jakub Jelinek  <jakub@redhat.com>
    
            PR target/89073
            * doc/invoke.texi (-mclwb, -mprfchw, -mrdpid, -mrdseed, -msgx,
            -madx, -mhle, -mavx5124fmaps, -mavx512vnni, -mavx5124vnniw): Document
            x86 ISA options.
            (bmi2): Add missing @opindex.
            * doc/extend.texi (x86 target attribute): Move fma4, lwp, ssse3
            options alphabetically.  Add missing 3dnow, 3dnowa, adx, avx, avx2,
            avx5124fmaps, avx5124vnniw, avx512bitalg, avx512bw, avx512cd,
            avx512dq, avx512er, avx512f, avx512ifma, avx512pf, avx512vbmi,
            avx512vbmi2, avx512vl, avx512vnni, avx512vpopcntdq, bmi, bmi2,
            clflushopt, clwb, clzero, crc32, cx16, f16c, fma, fsgsbase,
            fxsr, gfni, hle, lzcnt, movbe, movdir64b, movdiri, mwaitx, pconfig,
            pku, prefetchwt1, prfchw, rdpid, rdrnd, rdseed, rtm, sahf,
            sgx, sha, shstk, tbm, vaes, vpclmulqdq, wbnoinvd, xsave,
            xsavec, xsaveopt and xsaves options.
    
    From-SVN: r268634

commit be86155893167a8b14f494414a536945a785751b
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Feb 7 15:42:54 2019 +0100

    backport: re PR target/87214 (r263772 miscompiled 520.omnetpp_r in SPEC CPU 2017)
    
            Backported from mainline
            2019-01-27  Jakub Jelinek  <jakub@redhat.com>
    
            PR target/87214
            * config/i386/sse.md
            (<mask_codefor>avx512dq_shuf_<shuffletype>64x2_1<mask_name>,
            avx512f_shuf_<shuffletype>64x2_1<mask_name>): Ensure the
            first constants in pairs are multiples of 2.  Formatting fixes.
            (avx512vl_shuf_<shuffletype>32x4_1<mask_name>,
            avx512vl_shuf_<shuffletype>32x4_1<mask_name>): Ensure the
            first constants in each quadruple are multiples of 4.  Formatting fixes.
    
            * gcc.target/i386/avx512vl-pr87214-1.c: New test.
            * gcc.target/i386/avx512vl-pr87214-2.c: New test.
    
    From-SVN: r268633

commit 9a791babab24f4bc5dac3d85b21a40ee29da7a1c
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Feb 7 15:40:50 2019 +0100

    backport: re PR tree-optimization/88964 (ICE in wide_int_to_tree_1, at tree.c:1561)
    
            Backported from mainline
            2019-01-24  Jakub Jelinek  <jakub@redhat.com>
    
            PR tree-optimization/88964
            * gimple-loop-interchange.cc (loop_cand::analyze_induction_var): Also
            punt if HONOR_SNANS (chrec).
    
    From-SVN: r268632

commit 660d245f38852ec25c146b110192ce44f1afef59
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Feb 7 15:40:13 2019 +0100

    backport: re PR c++/88976 (ICE in fold_convert_loc, at fold-const.c:2552)
    
            Backported from mainline
            2019-01-24  Jakub Jelinek  <jakub@redhat.com>
    
            PR c++/88976
            * semantics.c (finish_omp_cancel): Use maybe_convert_cond when not in
            template or build_x_binary_op otherwise.
    
            * c-c++-common/gomp/cancel-2.c: New test.
            * gcc.dg/gomp/cancel-1.c: New test.
            * g++.dg/gomp/cancel-1.C: New test.
            * g++.dg/gomp/cancel-2.C: New test.
            * g++.dg/gomp/cancel-3.C: New test.
    
    From-SVN: r268631

commit cbd946647c003655a2c28b81ef6ae4b93b52985d
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Feb 7 15:39:13 2019 +0100

    backport: re PR tree-optimization/88964 (ICE in wide_int_to_tree_1, at tree.c:1561)
    
            Backported from mainline
            2019-01-23  Jakub Jelinek  <jakub@redhat.com>
    
            PR tree-optimization/88964
            * gimple-loop-interchange.cc (loop_cand::analyze_induction_var): Use
            build_zero_cst instead of build_int_cst.  Return false for loop
            invariants which honor signed zeros.
    
            * gfortran.dg/pr88964.f90: New test.
    
    From-SVN: r268630

commit 9393350c64460c49db5f1dae4475fe31e865f4f4
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Feb 7 15:38:15 2019 +0100

    backport: re PR target/88965 (powerpc64le vector builtin hits ICE in verify_gimple)
    
            Backported from mainline
            2019-01-22  Jakub Jelinek  <jakub@redhat.com>
    
            PR target/88965
            * config/rs6000/rs6000.c: Include tree-vrp.h and tree-ssanames.h.
            (rs6000_gimple_fold_builtin): If MEM_REF address doesn't satisfy
            is_gimple_mem_ref_addr predicate, force it into a SSA_NAME first.
    
            * gcc.target/powerpc/pr88965.c: New test.
    
    From-SVN: r268629

commit 26c835d0d72bef35e825599f82b55499dfe3f215
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Feb 7 15:37:26 2019 +0100

    backport: re PR middle-end/88968 (Stack overflow in gimplify_expr)
    
            Backported from mainline
            2019-01-22  Jakub Jelinek  <jakub@redhat.com>
    
            PR middle-end/88968
            * gimplify.c (gimplify_omp_atomic): Handle bitfield atomics with
            non-integral DECL_BIT_FIELD_REPRESENTATIVEs.
    
            * c-omp.c (c_finish_omp_atomic): For bitfield atomics, update type
            variable after using BIT_FIELD_REF.
    
            * c-c++-common/gomp/atomic-23.c: New test.
    
    From-SVN: r268628

commit c986d93bb31070c25a068225b3a11e19008d63b5
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Feb 7 15:36:20 2019 +0100

    backport: re PR target/88905 (ICE: in decompose, at rtl.h:2253 with -mabm and __builtin_popcountll)
    
            Backported from mainline
            2019-01-22  Jakub Jelinek  <jakub@redhat.com>
    
            PR target/88905
            * optabs.c (add_equal_note): Add op0_mode argument, use it instead of
            GET_MODE (op0).
            (expand_binop_directly, expand_doubleword_clz,
            expand_doubleword_popcount, expand_ctz, expand_ffs,
            expand_unop_direct, maybe_emit_unop_insn): Adjust callers.
    
            * gcc.dg/pr88905.c: New test.
    
    From-SVN: r268627

commit f9c4d1fd5f71ce6c03e62739202f1bb413ed0624
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Feb 7 15:35:30 2019 +0100

    Backport PRs 49429, 49454, 86334, 88906
    
            Backported from mainline
            2019-01-22  Jakub Jelinek  <jakub@redhat.com>
    
            PR rtl-optimization/49429
            PR target/49454
            PR rtl-optimization/86334
            PR target/88906
            * expr.c (emit_block_move_hints): Move marking of MEM_EXPRs
            addressable from here...
            (emit_block_op_via_libcall): ... to here.
    
            * gcc.target/i386/pr86334.c: New test.
            * gcc.target/i386/pr88906.c: New test.
    
    From-SVN: r268626

commit 5723fed6e13b9b9921810427b82bfd5beb596fa9
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Feb 7 15:34:32 2019 +0100

    backport: re PR c++/88949 (ICE in expand_expr_real_1, at expr.c:10001 with -fopenmp)
    
            Backported from mainline
            2019-01-21  Jakub Jelinek  <jakub@redhat.com>
    
            PR c++/88949
            * optimize.c (cxx_copy_decl): New function.
            (clone_body): Use it instead of copy_decl_no_change.
    
            * g++.dg/gomp/pr88949.C: New test.
    
    From-SVN: r268625

commit 7bdc0c02d83038e80cae2e62adebd4c6a9d82f59
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Feb 7 15:33:51 2019 +0100

    backport: re PR sanitizer/88901 (ICE when using -fsanitize=pointer-compare)
    
            Backported from mainline
            2019-01-21  Jakub Jelinek  <jakub@redhat.com>
    
            PR sanitizer/88901
            * typeck.c (cp_build_binary_op): Don't instrument
            SANITIZE_POINTER_COMPARE if processing_template_decl.
            (pointer_diff): Similarly for SANITIZE_POINTER_SUBTRACT.
    
            * g++.dg/asan/pr88901.C: New test.
    
    From-SVN: r268624

commit 151a3e4ec6602157fcffde220701ced2194ebc84
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Feb 7 15:33:07 2019 +0100

    backport: re PR fortran/88902 (ICE: Segmentation fault (in DFS::DFS_write_tree_body))
    
            Backported from mainline
            2019-01-19  Jakub Jelinek  <jakub@redhat.com>
    
            PR fortran/88902
            * trans-decl.c (gfc_get_symbol_decl): Don't add length to function
            or parent function if it has been added there already.
    
            * gfortran.dg/pr88902.f90: New test.
    
    From-SVN: r268623

commit 149f5ab78cb334a1a5619c97bc459908a1b216d8
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Feb 7 15:30:48 2019 +0100

    backport: re PR target/88734 (AArch64's ACLE intrinsics give an ICE instead of compile error when option mismatch.)
    
            Backported from mainline
            2019-01-17  Jakub Jelinek  <jakub@redhat.com>
    
            PR target/88734
            * config/aarch64/arm_neon.h: Fix #pragma GCC target syntax - replace
            (("..."))) with ("...").  Use arch=armv8.2-a+sha3 instead of
            arch=armv8.2-a+crypto for vsha512hq_u64 etc. intrinsics.
    
    From-SVN: r268622

commit 2381a4b2fcef2e2ac3a38e808875e6ce2c88b6af
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Feb 7 15:29:14 2019 +0100

    backport: re PR rtl-optimization/88870 (ICE: Segmentation fault (in df_worklist_propagate_backward))
    
            Backported from mainline
            2019-01-17  Jakub Jelinek  <jakub@redhat.com>
    
            PR rtl-optimization/88870
            * dce.c (deletable_insn_p): Never delete const/pure calls that can
            throw if we can't alter the cfg or delete dead exceptions.
            (mark_insn): Don't call find_call_stack_args for such calls.
    
            * gcc.dg/pr88870.c: New test.
    
    From-SVN: r268621

commit 290f5b4b96c64491d9e40b2cba0a354051db0d64
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Feb 7 15:28:09 2019 +0100

    backport: c-cppbuiltin.c (c_cpp_builtin): Define __cpp_guaranteed_copy_elision and __cpp_nontype_template_parameter_auto.
    
            Backported from mainline
            2019-01-14  Jakub Jelinek  <jakub@redhat.com>
    
            * c-cppbuiltin.c (c_cpp_builtin): Define __cpp_guaranteed_copy_elision
            and __cpp_nontype_template_parameter_auto.  Add a comment that
            __cpp_template_auto is deprecated.
    
            * g++.dg/cpp1z/feat-cxx1z.C: Add tests for
            __cpp_guaranteed_copy_elision and __cpp_nontype_template_parameter_auto
            feature test macros.
    
    From-SVN: r268620

commit 06cfbe103868e9e9881b32e19d15bce617e17dbc
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Feb 7 15:27:09 2019 +0100

    backport: re PR bootstrap/88714 (bootstrap comparison failure on armv7l since r265398)
    
            Backported from mainline
            2019-01-11  Jakub Jelinek  <jakub@redhat.com>
    
            PR bootstrap/88714
            * passes.c (finish_optimization_passes): Call print_combine_total_stats
            inside of pass_combine_1 dump rather than pass_profile_1.
    
    From-SVN: r268619

commit d4668c14663cae365497900542f5c101db72eece
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Feb 7 15:26:06 2019 +0100

    backport: re PR c/88568 ('dllimport' no longer implies 'extern' in C)
    
            Backported from mainline
            2019-01-10  Jakub Jelinek  <jakub@redhat.com>
    
            PR c/88568
            * attribs.c (handle_dll_attribute): Clear TREE_STATIC after setting
            DECL_EXTERNAL.
    
            * gcc.dg/pr88568.c: New test.
    
    From-SVN: r268618

commit 132e175677cd05f44306ac75df6fc268743395d4
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Feb 7 15:25:01 2019 +0100

    backport: re PR debug/88723 (PR debug/88635 patch breaks testsuite_shared.cc compilation)
    
            Backported from mainline
            2019-01-07  Jakub Jelinek  <jakub@redhat.com>
    
            PR debug/88723
            * dwarf2out.c (const_ok_for_output_1): Remove redundant call to
            const_not_ok_for_debug_p target hook.
            (mem_loc_descriptor) <case UNSPEC>: Only call const_ok_for_output_1
            on UNSPEC and subexpressions thereof if all subexpressions of the
            UNSPEC are CONSTANT_P.
    
            2019-01-05  Jakub Jelinek  <jakub@redhat.com>
    
            PR debug/88635
            * dwarf2out.c (const_ok_for_output_1): Reject MINUS that contains
            SYMBOL_REF, CODE_LABEL or UNSPEC in subexpressions of second argument.
            Reject PLUS that contains SYMBOL_REF, CODE_LABEL or UNSPEC in
            subexpressions of both operands.
            (mem_loc_descriptor): Handle UNSPEC if target hook acks it and all the
            subrtxes are CONSTANT_P.
    
            * gcc.dg/debug/dwarf2/pr88635.c: New test.
    
    From-SVN: r268617

commit 171a1fc50005a6302c5dc55ac006a4f24a911efd
Author: Christophe Lyon <christophe.lyon@linaro.org>
Date:   Thu Feb 7 10:21:11 2019 +0000

    [testsuite] Fix g++.dg/cpp0x/enum37.C testcase.
    
    2019-02-07  Christophe Lyon  <christophe.lyon@linaro.org>
    
            Backport from mainline
            2019-01-28  Marek Polacek  <polacek@redhat.com>
    
            PR c++/89024 - ICE with incomplete enum type.
            * g++.dg/cpp0x/enum37.C: Add dg-error.
    
    From-SVN: r268613

commit c531ef49ad76e709c552c7626305eb3d4806fe88
Author: Richard Biener <rguenther@suse.de>
Date:   Thu Feb 7 08:22:01 2019 +0000

    backport: [multiple changes]
    
    2019-02-07  Richard Biener  <rguenther@suse.de>
    
            Backport from mainline
            2018-11-20  Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/88105
            * tree-ssa-dom.c (pass_dominator::execute): Do not walk
            backedges.
    
            * gcc.dg/gomp/pr88105.c: New testcase.
    
            2018-11-28  Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/88223
            * tree-ssa-sccvn.c (vn_reference_lookup_3): When skipping
            over a stored-same value may-alias store make sure to consider
            partial overlaps which are valid when TBAA reasonings do not
            apply and byte-granular overlaps are possible at all.
    
            * gcc.dg/torture/pr88223.c: New testcase.
    
    From-SVN: r268609

commit bef546e211e6d58044345086032f0655319a3af6
Author: Richard Biener <rguenther@suse.de>
Date:   Thu Feb 7 08:16:07 2019 +0000

    Backport PRs 87929, 88030, 88415, 88448
    
    2019-02-07  Richard Biener  <rguenther@suse.de>
    
            Backport from mainline
            2018-12-11  Richard Biener  <rguenther@suse.de>
    
            PR middle-end/88448
            PR middle-end/88415
            * tree-complex.c (update_complex_assignment): Properly transfer
            or clean EH info around gimple_assign_set_rhs_with_ops.
    
            * gcc.dg/gomp/pr88415.c: New testcase.
    
            2018-11-15  Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/88030
            * tree-complex.c (need_eh_cleanup): New global.
            (update_complex_assignment): Mark blocks that need EH update.
            (expand_complex_comparison): Likewise.
            (tree_lower_complex): Allocate and deallocate need_eh_cleanup,
            perform EH cleanup and schedule CFG cleanup if that did anything.
    
            * gcc.dg/tsan/pr88030.c: New testcase.
    
            2018-11-08  Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/87929
            * tree-complex.c (expand_complex_comparison): Clean EH.
    
            * gcc.dg/pr87929.c: New testcase.
    
    From-SVN: r268608

commit dbb5fc9a833f9844737d9f70630a9ef7fba6c5fe
Author: Richard Biener <rguenther@suse.de>
Date:   Thu Feb 7 08:09:58 2019 +0000

    backport: PR/tree-optimization 88903
    
    2019-02-07  Richard Biener  <rguenther@suse.de>
    
            Backport from mainline
            2019-01-22  Tamar Christina  <tamar.christina@arm.com>
    
            PR/tree-optimization 88903
            * gcc.dg/vect/pr88903-1.c: Add explicit &.
    
    From-SVN: r268607

commit 10ec3450b14b7b2ce23672f833011856e8a9d448
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Feb 7 00:16:20 2019 +0000

    Daily bump.
    
    From-SVN: r268600

commit 5dcf027a6cae61fa6c04fcea1638706bee42baaa
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Wed Feb 6 21:06:17 2019 +0000

    i386.c (ix86_expand_prologue): Emit a memory blockage after restoring registers saved to allocate the frame on...
    
            * config/i386/i386.c (ix86_expand_prologue): Emit a memory blockage
            after restoring registers saved to allocate the frame on Windows.
    
    From-SVN: r268594

commit 700d495a50b0ee8ad5232c809f58f29010510a0b
Author: Marek Polacek <polacek@redhat.com>
Date:   Wed Feb 6 15:36:20 2019 +0000

    PR c++/89024 - ICE with incomplete enum type.
    
            * call.c (standard_conversion): When converting an
            ARITHMETIC_TYPE_P to an incomplete type, return NULL.
    
    From-SVN: r268583

commit 5b112d251c02d6a6dccc57261abdf3d18a3d79f5
Author: Marek Polacek <polacek@redhat.com>
Date:   Wed Feb 6 15:33:18 2019 +0000

    PR c++/89119 - ICE with value-initialization in template.
    
            * pt.c (tsubst_copy_and_build): Handle RANGE_EXPR.
    
    From-SVN: r268582

commit 54555d6b823983950f45f59c85ba99b907723e11
Author: Marek Polacek <polacek@redhat.com>
Date:   Wed Feb 6 15:29:14 2019 +0000

    PR c++/88983 - ICE with switch in constexpr function.
    
            * constexpr.c (cxx_eval_switch_expr): Use SWITCH_COND and SWITCH_BODY.
            (cxx_eval_constant_expression) <case COND_EXPR>: Don't look for the
            label in the else branch if we found it in the then branch.
    
    From-SVN: r268581

commit 1911f8bae98d513c76782f2fa4f8c64bdd0edf8a
Author: Marek Polacek <polacek@redhat.com>
Date:   Wed Feb 6 15:26:24 2019 +0000

    PR c++/89158 - by-value capture of constexpr variable broken.
    
            * call.c (convert_like_real) <case ck_user>: Call mark_exp_read
            instead of mark_rvalue_use.
    
    From-SVN: r268580

commit 292ea7060058deb7fecdc2aaba5a3b4b20bd431b
Author: Richard Biener <rguenther@suse.de>
Date:   Wed Feb 6 12:56:02 2019 +0000

    backport: [multiple changes]
    
    2019-02-06  Richard Biener  <rguenther@suse.de>
    
            Backport from mainline
            2019-01-31  Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/89135
            * tree-ssa-phiprop.c (pass_phiprop::execute): Skip blocks
            with abnormal preds.
    
            * gcc.dg/torture/pr89135.c: New testcase.
    
            2019-01-18  Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/88903
            * tree-vect-stmts.c (vectorizable_shift): Verify we see all
            scalar stmts a SLP shift amount is composed of when detecting
            shifts by scalars.
    
            * gcc.dg/vect/pr88903-1.c: New testcase.
            * gcc.dg/vect/pr88903-2.c: Likewise.
    
    From-SVN: r268578

commit 109b557ac4b575b9a5afec8aac94c78f8a78328b
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Feb 6 00:16:09 2019 +0000

    Daily bump.
    
    From-SVN: r268569

commit cc04395dfe751fdf3561c1b4aadfbfc6c127f76f
Author: Thomas Koenig <tkoenig@gcc.gnu.org>
Date:   Tue Feb 5 21:12:41 2019 +0000

    re PR fortran/67679 (-Wunitialized reports on compiler-generated variables)
    
    2019-02-05  Thomas Koenig  <tkoenig@gcc.gnu.org>
    
            PR fortran/67679
            Backport from trunk
            * trans-array.c (gfc_array_allocate):  For setting the bounds on
            the new array, add a condition for a not previously allocated
            variable.
    
    2019-02-05  Thomas Koenig  <tkoenig@gcc.gnu.org>
    
            PR fortran/67679
            Backport from trunk
            * gfortran.dg/warn_undefined_1.f90: New test.
            * gfortran.dg/coarray_lock_7.f90: Fix patterns in test.
    
    From-SVN: r268559

commit 6df7c3ed3172dd4ccd94dbf5f073c8a1be116b7d
Author: Kelvin Nilsen <kelvin@gcc.gnu.org>
Date:   Tue Feb 5 19:42:57 2019 +0000

    backport: rs6000-c.c (altivec-resolve_overloaded_builtin): Change handling of ALTIVEC_BUILTIN_VEC_EXTRACT.
    
    gcc/ChangeLog:
    
    2019-02-05  Kelvin Nilsen  <kelvin@gcc.gnu.org>
    
            Backport from mainline.
            2019-01-30  Kelvin Nilsen  <kelvin@gcc.gnu.org>
            * config/rs6000/rs6000-c.c (altivec-resolve_overloaded_builtin):
            Change handling of ALTIVEC_BUILTIN_VEC_EXTRACT.  Coerce result to
            type of vector element when vec_extract is implemented by direct
            move.
    
    gcc/testsuite/ChangeLog:
    
    2019-02-05  Kelvin Nilsen  <kelvin@gcc.gnu.org>
    
            2019-02-05  Kelvin Nilsen  <kelvin@gcc.gnu.org>
            * gcc.target/powerpc/vec-extract-slong-1.c: Require p8 execution
            hardware.
            * gcc.target/powerpc/vec-extract-schar-1.c: Likewise.
            * gcc.target/powerpc/vec-extract-sint128-1.c: Likewise.
            * gcc.target/powerpc/vec-extract-sshort-1.c: Likewise.
            * gcc.target/powerpc/vec-extract-ulong-1.c: Likewise.
            * gcc.target/powerpc/vec-extract-uchar-1.c: Likewise.
            * gcc.target/powerpc/vec-extract-sint-1.c: Likewise.
            * gcc.target/powerpc/vec-extract-uint128-1.c: Likewise.
            * gcc.target/powerpc/vec-extract-ushort-1.c: Likewise.
            * gcc.target/powerpc/vec-extract-uint-1.c: Likewise.
    
            Backport from mainline.
            2019-01-30  Kelvin Nilsen  <kelvin@gcc.gnu.org>
            * gcc.target/powerpc/vec-extract-schar-1.c: New test.
            * gcc.target/powerpc/vec-extract-sint-1.c: New test.
            * gcc.target/powerpc/vec-extract-sint128-1.c: New test.
            * gcc.target/powerpc/vec-extract-slong-1.c: New test.
            * gcc.target/powerpc/vec-extract-sshort-1.c: New test.
            * gcc.target/powerpc/vec-extract-uchar-1.c: New test.
            * gcc.target/powerpc/vec-extract-uint-1.c: New test.
            * gcc.target/powerpc/vec-extract-uint128-1.c: New test.
            * gcc.target/powerpc/vec-extract-ulong-1.c: New test.
            * gcc.target/powerpc/vec-extract-ushort-1.c: New test.
    
    From-SVN: r268556

commit 725e5bdc8526efa226f63904ca87276b05dc62a7
Author: Marek Polacek <polacek@redhat.com>
Date:   Tue Feb 5 18:57:26 2019 +0000

    PR c++/89083, c++/80864 - ICE with list initialization in template.
    
            * decl.c (reshape_init_r): Don't reshape a digested initializer.
            Return the initializer for COMPOUND_LITERAL_P.
    
    From-SVN: r268555

commit f444e108c72d08f2cb0f3a2bad664cb744f87bcb
Author: Andreas Krebbel <krebbel@linux.ibm.com>
Date:   Tue Feb 5 17:17:00 2019 +0000

    S/390: Remove load and test fp splitter
    
    gcc/ChangeLog:
    
    2019-02-05  Andreas Krebbel  <krebbel@linux.ibm.com>
    
            Backport from mainline
            2019-02-05  Andreas Krebbel  <krebbel@linux.ibm.com>
    
            PR target/88856
            * config/s390/s390.md: Remove load and test FP splitter.
    
    From-SVN: r268551

commit 14efc908d83804b8bc00e97ed8fd9a9a1825eb33
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Feb 5 00:16:11 2019 +0000

    Daily bump.
    
    From-SVN: r268527

commit ddb309d403e42db589c37a0114d5c5488f0c125c
Author: Bill Schmidt <wschmidt@linux.ibm.com>
Date:   Mon Feb 4 16:47:12 2019 +0000

    backport: [multiple changes]
    
    2019-02-04  Bill Schmidt  <wshmidt@linux.ibm.com>
    
            PR target/87064
            Backport from mainline
    
            2019-01-30  Bill Schmidt  <wschmidt@linux.ibm.com>
    
            PR target/87064
            * config/rs6000/vsx.md (*vsx_reduc_<VEC_reduc_name>_v4sf_scalar):
            Disable for little-endian.
    
            2019-01-22  Jakub Jelinek  <jakub@redhat.com>
    
            PR target/87064
            * config/rs6000/vsx.md (*vsx_reduc_<VEC_reduc_name>_v2df_scalar):
            Disable for little endian.
    
    From-SVN: r268523

commit 72be00a9cbd48317eeed7f7c033f6364717f3132
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Mon Feb 4 11:14:05 2019 +0000

    sparc.h: Remove superfluous blank lines.
    
            * config/sparc/sparc.h: Remove superfluous blank lines.
            * config/sparc/sparc.c (global_offset_table_rtx): Rename into...
            (got_register_rtx): ...this.
            (sparc_got): Adjust to above renaming.
            (sparc_tls_got): Likewise.
            (sparc_output_mi_thunk): Likewise.
            (sparc_init_pic_reg): Likewise.
            (save_local_or_in_reg_p): Fix test on the GOT register.
            (USE_HIDDEN_LINKONCE): Move around.
            (get_pc_thunk_name): Likewise.
            (gen_load_pcrel_sym): Likewise.
            (load_got_register): Likewise.
    
    From-SVN: r268515

commit f6eae6ee5dd747a759df968fff3bfc7cf3ddc9dc
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Feb 4 00:16:24 2019 +0000

    Daily bump.
    
    From-SVN: r268506

commit 2077d54fd7dfe6037d21042f455a1c86284ad642
Author: Uros Bizjak <uros@gcc.gnu.org>
Date:   Sun Feb 3 17:19:36 2019 +0100

    re PR fortran/88678 (Many gfortran.dg/ieee/ieee_X.f90 test cases fail starting with r267465)
    
    2019-02-03  Uroš Bizjak  <ubizjak@gmail.com>
    
            PR libfortran/88678
            Revert:
            2016-11-16  Szabolcs Nagy  <szabolcs.nagy@arm.com>
    
            PR libfortran/78314
            * config/fpu-glibc.h (support_fpu_trap): Use feenableexcept.
    
    2019-02-03  Uroš Bizjak  <ubizjak@gmail.com>
    
            PR libfortran/88678
            * config/fpu-glibc.h (set_fpu_trap_exceptions): Clear stalled
            exception flags before changing trap mode.  Optimize to call
            feenableexcept and fedisableexcept only once.
    
    From-SVN: r268492

commit 625185efedc610c6d934c55e739d9b0fe8802193
Author: Paul Thomas <pault@gcc.gnu.org>
Date:   Sun Feb 3 14:50:07 2019 +0000

    backport: re PR fortran/88393 ([OOP] Segfault with type-bound assignment)
    
    2019-02-03  Paul Thomas  <pault@gcc.gnu.org>
    
            Backport from trunk
            PR fortran/88393
            * trans-expr.c (gfc_conv_procedure_call): For derived entities,
            passed in parentheses to class formals, invert the order of
            copying allocatable components to taking the _data of the
            class expression.
    
    2019-02-03  Paul Thomas  <pault@gcc.gnu.org>
    
            Backport from trunk
            PR fortran/88393
            * gfortran.dg/alloc_comp_assign_16.f03 : New test.
    
    From-SVN: r268489

commit 1ff97ef8c8b8cdf5dfde1d11fe73fb69b55fbe4c
Author: Paul Thomas <pault@gcc.gnu.org>
Date:   Sun Feb 3 14:44:19 2019 +0000

    backport: re PR fortran/88980 (segfault on allocatable string member assignment)
    
    2019-02-02  Paul Thomas  <pault@gcc.gnu.org>
    
            Backport from trunk
            PR fortran/88980
            * trans-array.c (gfc_array_init_size): Add element_size to the
            arguments.
            (gfc_array_allocate): Remove the recalculation of the size of
            the element and use element_size from the call to the above.
            Unconditionally set the span field of the descriptor.
    
    2019-02-02  Paul Thomas  <pault@gcc.gnu.org>
    
            Backport from trunk
            PR fortran/88980
            * gfortran.dg/realloc_on_assign_32.f90 : New test.
    
    From-SVN: r268488

commit 242e097875a7e1ec8b3a6108e4effc30ff5e7f54
Author: Paul Thomas <pault@gcc.gnu.org>
Date:   Sun Feb 3 14:40:17 2019 +0000

    backport: re PR fortran/88685 (pointer class array argument indexing)
    
    2019-02-03  Paul Thomas  <pault@gcc.gnu.org>
    
            Backport from trunk
            PR fortran/88685
            * expr.c (is_subref_array): Move the check for class pointer
            dummy arrays to after the reference check. If we haven't seen
            an array reference other than an element and a component is not
            class or derived, return false.
    
    2019-02-03  Paul Thomas  <pault@gcc.gnu.org>
    
            Backport from trunk
            PR fortran/88685
            * gfortran.dg/pointer_array_component_3.f90 : New test.
    
    From-SVN: r268487

commit 00f51671f5f5693eeb638d9154bf495fe5427676
Author: Paul Thomas <pault@gcc.gnu.org>
Date:   Sun Feb 3 14:37:08 2019 +0000

    re PR fortran/88685 (pointer class array argument indexing)
    
    2019-02-02  Paul Thomas  <pault@gcc.gnu.org>
    
            PR fortran/88685
            * expr.c (is_subref_array): Move the check for class pointer
            dummy arrays to after the reference check. If we haven't seen
            an array reference other than an element and a component is not
            class or derived, return false.
    
    2019-02-02  Paul Thomas  <pault@gcc.gnu.org>
    
            PR fortran/88685
            * gfortran.dg/pointer_array_component_3.f90 : New test.
    
    From-SVN: r268486

commit 8fc04f2fa94fc522d882827a052de80e06cb9970
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Feb 3 00:16:08 2019 +0000

    Daily bump.
    
    From-SVN: r268482

commit a7c0dded0f270ed032f27ec870ed73880c915caa
Author: Thomas Koenig <tkoenig@gcc.gnu.org>
Date:   Sat Feb 2 16:53:28 2019 +0000

    re PR fortran/88298 (Bogus conversion warning for CSHIFT with -fno-range-check -m64)
    
    2019-02-02  Thomas Koenig  <tkoenig@gcc.gnu.org>
    
            PR fortran/88298
            Backport from trunk
            * arith.c (gfc_int2int): Do not warn if src->do_not_warn is set.
            * gfortran.h (gfc_expr): Add flag do_not_warn.
            * intrinsic.c (gfc_convert_type_warn): Set expr->do_not_warn if
            no warning is desired.
    
    2019-02-02  Thomas Koenig  <tkoenig@gcc.gnu.org>
    
            PR fortran/88298
            Backport from trunk
            * gfortran.dg/warn_conversion_10.f90: New test.
    
    From-SVN: r268477

commit 08cc146f841a436446751b36ca6c636107e47493
Author: Thomas Koenig <tkoenig@gcc.gnu.org>
Date:   Sat Feb 2 16:35:47 2019 +0000

    re PR fortran/57048 (Handling of C_PTR and C_FUNPTR leads to reject valid)
    
    2019-02-02  Thomas Koenig  <tkoenig@gcc.gnu.org>
    
            PR fortran/57048
            Backport from trunk
            * interface.c (gfc_compare_types): If a derived type and an
            integer both have a derived type, and they are identical,
            this is a C binding type and compares equal.
    
    2019-02-02  Thomas Koenig  <tkoenig@gcc.gnu.org>
    
            PR fortran/57048
            Backport from trunk
            * gfortran.dg/c_funptr_1.f90: New file.
            * gfortran.dg/c_funptr_1_mod.f90: New file.
    
    From-SVN: r268476

commit 384735fd01032bad6d568085f2a316ea5754b96b
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Feb 2 00:16:08 2019 +0000

    Daily bump.
    
    From-SVN: r268468

commit 624638350e76bb1822074081b524c5a42ee902aa
Author: Bin Cheng <bin.cheng@linux.alibaba.com>
Date:   Fri Feb 1 03:11:08 2019 +0000

    backport: re PR tree-optimization/87022 (miscompilation with -ftree-loop-distribution)
    
            Backport from mainline
            2018-10-15  Bin Cheng  <bin.cheng@linux.alibaba.com>
    
            PR tree-optimization/87022
            * tree-loop-distribution.c (pg_add_dependence_edges): Check all
            bits in dist vector rather than the first one.
    
            gcc/testsuite
            2018-10-15  Bin Cheng  <bin.cheng@linux.alibaba.com>
    
            PR tree-optimization/87022
            * gcc.dg/tree-ssa/pr87022.c: New test.
    
    From-SVN: r268441

commit cf70d69d2beed60d77131e5f3df4b3ea9827fa2c
Author: Bin Cheng <bin.cheng@linux.alibaba.com>
Date:   Fri Feb 1 02:56:41 2019 +0000

    backport: re PR tree-optimization/88932 (ICE: verify_ssa failed (Error: definition in block 29 does not dominate use in block 25))
    
            Backport from mainline
            2019-02-01  Bin Cheng  <bin.cheng@linux.alibaba.com>
    
            PR tree-optimization/88932
            * tree-predcom.c (try_combine_chains): Get loop bbs in dom order.
    
            gcc/testsuite
            2019-02-01  Bin Cheng  <bin.cheng@linux.alibaba.com>
    
            PR tree-optimization/88932
            * gfortran.dg/pr88932.f90: New test.
    
    From-SVN: r268440

commit 6261bf04f37e6b9a302861205dc63d82eaed1fb1
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Feb 1 00:16:15 2019 +0000

    Daily bump.
    
    From-SVN: r268436

commit 58d50cdc9a7b3f5627163234c10e92ebfa759c92
Author: Bill Schmidt <wschmidt@linux.ibm.com>
Date:   Thu Jan 31 17:14:36 2019 +0000

    backport: re PR middle-end/89008 (O2 and O1 results differ for simple test)
    
    2018-01-31  Bill Schmidt  <wschmidt@linux.ibm.com>
    
            Backport from mainline
            2018-01-31  Bill Schmidt  <wschmidt@linux.ibm.com>
    
            PR tree-optimization/89008
            * gimple-ssa-strength-reduction.c (slsr_process_mul): Don't
            process anything of the form X * 0.
    
    From-SVN: r268425

commit a5bd315d58a3c1dbaf3acf3ff2a47b5a3d785438
Author: Richard Biener <rguenther@suse.de>
Date:   Thu Jan 31 10:00:26 2019 +0000

    backport: [multiple changes]
    
    2019-01-31  Richard Biener  <rguenther@suse.de>
    
            Backport from mainline
            2019-01-31  Richard Biener  <rguenther@suse.de>
    
            PR rtl-optimization/89115
            * lra.c (lra_rtx_hash): Properly hash CONST_INT values.
    
            2019-01-30  Richard Biener  <rguenther@suse.de>
    
            PR rtl-optimization/89115
            * opts.c (default_options_optimization): Reduce
            PARAM_MAX_DSE_ACTIVE_LOCAL_STORES by a factor of 10 at -O1.
            Make PARAM_LOOP_INVARIANT_MAX_BBS_IN_LOOP reduction relative
            to the default.
    
    From-SVN: r268416

commit 0fff69fe2e78ecc0c15e6d776dac37ce5ae1b8e9
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Jan 31 00:16:21 2019 +0000

    Daily bump.
    
    From-SVN: r268409

commit 56a86e32f935378e72516c6761f8fc9ed1c2b1a6
Author: Manfred Schwarb <manfred99@gmx.ch>
Date:   Wed Jan 30 14:56:30 2019 +0100

    newunit_5.f90.f90: Moved to
    
    2019-01-30  Manfred Schwarb  <manfred99@gmx.ch>
    
            * gfortran.dg/newunit_5.f90.f90: Moved to
            * gfortran.dg/newunit_5.f90: here and fix a dg directive.
    
    From-SVN: r268389

commit eeda23f208db4785bd64f2a2ef987720eea83c07
Author: Kewen Lin <linkw@gcc.gnu.org>
Date:   Wed Jan 30 06:37:20 2019 +0000

    backport: [multiple changes]
    
    2019-01-30  Kewen Lin  <linkw@gcc.gnu.org>
        Backport from mainline.
        gcc/
    
            2019-01-17  Kewen Lin  <linkw@gcc.gnu.org>
            * doc/extend.texi: Add four new prototypes for vec_ld and seven new
            prototypes for vec_st.
            * config/rs6000/rs6000-c.c (altivec_overloaded_builtins): Add entries
            for scalar address type variants of altivec_vec_ld/altivec_vec_st,
            mainly on signed/unsigned long long and double.
    
        gcc/testsuite/
    
            2019-01-20  Kewen Lin  <linkw@gcc.gnu.org>
            * gcc.target/powerpc/altivec_vld_vst_addr.c: Remove, split into
            altivec_vld_vst_addr-1.c and altivec_vld_vst_addr-2.c.
            * gcc.target/powerpc/altivec_vld_vst_addr-1.c: New test.
            * gcc.target/powerpc/altivec_vld_vst_addr-2.c: Ditto.
    
            2019-01-17  Kewen Lin  <linkw@gcc.gnu.org>
            * gcc.target/powerpc/altivec_vld_vst_addr.c: New test.
    
    From-SVN: r268379

commit 4bb650d015e7adce9ac63c95751384634d295f8c
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Jan 30 00:16:25 2019 +0000

    Daily bump.
    
    From-SVN: r268374

commit a0796da3affb61718bffade07e870f79f1763ed7
Author: Vineet Gupta <vgupta@synopsys.com>
Date:   Tue Jan 29 15:31:10 2019 +0000

    Backport ARC patches.
    
    From-SVN: r268367

commit 2a0e32d3fbc86684db5f3fa6887a0e827270464e
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Jan 29 00:16:27 2019 +0000

    Daily bump.
    
    From-SVN: r268352

commit 4063a1754255586ceacbfe9044a838aca452806b
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Jan 28 00:16:14 2019 +0000

    Daily bump.
    
    From-SVN: r268329

commit 2055facb004affd3c905537439ff4456e3c61be1
Author: Uros Bizjak <ubizjak@gmail.com>
Date:   Sun Jan 27 21:48:51 2019 +0100

    re PR fortran/70696 ([Coarray] ICE on EVENT POST of host-associated EVENT_TYPE coarray)
    
            PR fortran/70696
            * gfortran.dg/coarray/event_3.f0: Add save attribue to x.
    
    From-SVN: r268326

commit 27c1e33493b006fcb94a47e5ebfc7f173e3caa97
Author: Jason Merrill <jason@redhat.com>
Date:   Sun Jan 27 15:31:37 2019 -0500

    PR c++/86740, ICE with constexpr if and nested generic lambdas.
    
    When we partially instantiate the constexpr if, we walk through its body to
    see what it uses from the enclosing local_specializations.  That walk was
    overlooking the use of 'count' in the captures of the innermost lambda,
    because we weren't walking into the capture list.
    
            * tree.c (cp_walk_subtrees): Handle LAMBDA_EXPR.
    
    From-SVN: r268324

commit 54063478a966339b8a406571171416de78d73a6d
Author: Jason Merrill <jason@redhat.com>
Date:   Sun Jan 27 15:31:32 2019 -0500

    PR c++/87075 - ICE with constexpr array initialization.
    
    My patch of 2016-08-26 to avoid calling a trivial default constructor
    introduced TARGET_EXPRs initialized with void_node to express trivial
    initialization.  But when this shows up in a VEC_INIT_EXPR, we weren't
    prepared to handle it.  Fixed by handling it explicitly in
    cxx_eval_vec_init_1.
    
            * constexpr.c (cxx_eval_vec_init_1): Handle trivial initialization.
    
    From-SVN: r268323

commit 4e7f79c61ab7dc3fce87d3bd7dae1b5f752650f9
Author: Jason Merrill <jason@redhat.com>
Date:   Sun Jan 27 15:31:25 2019 -0500

    * pt.c (tsubst) [TEMPLATE_TYPE_PARM]: Use TEMPLATE_PARM_DESCENDANTS.
    
    From-SVN: r268322

commit 4af2c380ca183b2629b652a252ed4dea191c3f4b
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Sun Jan 27 18:10:46 2019 +0000

    decl.c (array_type_has_nonaliased_component): Return the same value for every dimension of a multidimensional array type.
    
            * gcc-interface/decl.c (array_type_has_nonaliased_component): Return
            the same value for every dimension of a multidimensional array type.
    
    From-SVN: r268315

commit bfb5990c4dfbedb89f0d9cf5703c88571d9a2fa9
Author: Paul Thomas <pault@gcc.gnu.org>
Date:   Sun Jan 27 18:02:17 2019 +0000

    Backport PRs 56386, 58906, 77385, 80260, 82077
    
    2019-01-27  Paul Thomas  <pault@gcc.gnu.org>
    
            Backport from trunk
            PR fortran/56386
            PR fortran/58906
            PR fortran/77385
            PR fortran/80260
            PR fortran/82077
            * resolve.c (resolve_variable): Fix up expressions with array
            associate names, where the parser did not detect that this is
            array and there was no array part_ref in the expression.
            * trans-expr.c (gfc_find_and_cut_at_last_class_ref): base_expr
            should be a copy of e and not the initialization expr.
    
    2019-01-27  Paul Thomas  <pault@gcc.gnu.org>
    
            Backport from trunk
            PR fortran/56386
            PR fortran/58906
            PR fortran/77385
            * gfortran.dg/associate_44.f90 : New test.
    
            PR fortran/80260
            * gfortran.dg/select_type_45.f90 : New test.
    
            PR fortran/82077
            * gfortran.dg/select_type_46.f90 : New test.
    
    From-SVN: r268313

commit 5cc5d25c084ad3a3064015c9e5a55bd612d879cf
Author: Uros Bizjak <ubizjak@gmail.com>
Date:   Sun Jan 27 18:36:30 2019 +0100

    re PR rtl-optimization/88948 (ICE in elimination_costs_in_insn, at reload1.c:3640 since r264148)
    
            PR target/88948
            * rtl.h (prepare_copy_insn): New prototype.
            * gcse.c (prepare_copy_insn): New function, split out from
            process_insert_insn.
            (process_insert_insn): Use prepare_copy_insn.
            * store-motion.c (replace_store_insn): Use prepare_copy_insn
            instead of gen_move_insn.
    
    testsuite/ChangeLog:
    
            PR target/88948
            * gcc.target/i386/pr88948.c: New test.
    
    From-SVN: r268311

commit b40ae806ff846c9a71910b8fb18e592c80cb13af
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Jan 27 00:16:26 2019 +0000

    Daily bump.
    
    From-SVN: r268307

commit 9bd59fff7e7f8983e544c3798d9ab43e25141c3e
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Sat Jan 26 16:02:16 2019 +0000

    trans.c (gnat_to_gnu): Use DECL_SIZE_UNIT instead of TYPE_SIZE_UNIT for the size to be assigned by a...
    
            * gcc-interface/trans.c (gnat_to_gnu) <N_Assignment_Statement>: Use
            DECL_SIZE_UNIT instead of TYPE_SIZE_UNIT for the size to be assigned
            by a call to memset if the LHS is a DECL.
    
    From-SVN: r268297

commit 3a64ae6e4716f3f3a503cb43634f9f722459ddb4
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Sat Jan 26 12:03:02 2019 +0000

    trans.c (struct loop_info_d): Remove artificial field.
    
            * gcc-interface/trans.c (struct loop_info_d): Remove artificial field.
            (Loop_Statement_to_gnu): Do not set it.
    
    From-SVN: r268291

commit 858fe2db41813e5deeee51e778ada8b2d24b8082
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Sat Jan 26 11:35:23 2019 +0000

    decl.c (annotate_value): Use test on the sign bit instead of on the sign of the value.
    
            * gcc-interface/decl.c (annotate_value) <INTEGER_CST>: Use test on
            the sign bit instead of on the sign of the value.
            <PLUS_EXPR>: Turn addition of negative constant into subtraction.
            <MULT_EXPR>: Add test for degenerate case.
            <BIT_AND_EXPR>: Simplify.
    
    From-SVN: r268287

commit 2f5bf14da43ac373ce328d1ca06e96253d1bfcb1
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Jan 26 00:16:23 2019 +0000

    Daily bump.
    
    From-SVN: r268283

commit ece827833fac533adc09a04720c891526a5995b3
Author: Paul Thomas <pault@gcc.gnu.org>
Date:   Fri Jan 25 20:08:58 2019 +0000

    re PR fortran/87336 (wrong output for pointer dummy assiocated to target actual argument)
    
    2019-01-25  Paul Thomas  <pault@gcc.gnu.org>
    
            PR fortran/87336
            * trans-array.c (gfc_get_array_span): Try to get the element
            length of incomplete types. Return NULL_TREE otherwise.
            (gfc_conv_expr_descriptor): Only set the 'span' field if the
            above does not return NULL_TREE. Set 'span' field if possible
            for all new descriptors.
    
    2019-01-25  Paul Thomas  <pault@gcc.gnu.org>
    
            PR fortran/87336
            * gfortran.dg/pointer_array_10.f90 : New test.
            * gfortran.dg/assign_10.f90 : Increase 'parm' count to 20.
            * gfortran.dg/transpose_optimization_2.f90 : Increase 'parm'
            count to 72.
    
    From-SVN: r268279

commit 619f509410b18d74122f086c2ee019b8faa6c647
Author: Richard Biener <rguenther@suse.de>
Date:   Fri Jan 25 10:12:37 2019 +0000

    re PR tree-optimization/86865 (Wrong code w/ -O2 -floop-parallelize-all -fstack-reuse=none -fwrapv -fno-tree-ch -fno-tree-dce -fno-tree-dominator-opts -fno-tree-loop-ivcanon)
    
    2019-01-25  Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/86865
            * graphite-scop-detection.c (scop_detection::can_represent_loop):
            Reject non-do-while loops.
    
            * gcc.dg/graphite/pr86865.c: New testcase.
            * gcc.dg/graphite/pr69728.c: XFAIL.
            * gcc.dg/graphite/scop-21.c: Likewise.
    
            libgomp/
            * testsuite/libgomp.graphite/force-parallel-5.c: XFAIL.
    
    From-SVN: r268260

commit 3a8bbe2f0ecaa51ae08e390807c187115516b682
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Jan 25 00:16:29 2019 +0000

    Daily bump.
    
    From-SVN: r268255

commit e6407c2ecdc167adcce3013c7f5926622bebcf25
Author: Uros Bizjak <ubizjak@gmail.com>
Date:   Thu Jan 24 20:12:55 2019 +0100

    re PR target/88998 (bad codegen with mmx instructions for unordered_map)
    
            PR target/88998
            * config/i386/sse.md (sse2_cvtpi2pd): Add SSE alternatives.
            Disparage MMX alternative.
            (sse2_cvtpd2pi): Ditto.
            (sse2_cvttpd2pi): Ditto.
    
    testsuite/ChangeLog:
    
            PR target/88998
            * g++.dg/pr88998.c: New test.
    
    From-SVN: r268242

commit b331b3badbb57486ed16b573b3e1c3a956c3304d
Author: Richard Earnshaw <rearnsha@arm.com>
Date:   Thu Jan 24 16:10:06 2019 +0000

    Mitigation for PR target/88469 on arm-based systems bootstrapping with gcc-6/7/8
    
    This patch, for gcc 8/9 is a mitigation patch for PR target/88469
    where gcc-6/7/8 miscompile a structure whose alignment is dominated by
    a 64-bit bitfield member.  Since the PCS rules for such a type must
    ignore any overalignment of the base type we cannot address this by
    simply adding a larger alignment to the class.  We can, however, force
    the alignment of the bit-field itself and GCC will handle that as
    desired.
    
            PR target/88469
            * profile-count.h (profile_count): On ARM systems using GCC 6/7/8
            force the alignment of m_val.
    
    From-SVN: r268241

commit 9d0bd9d1ba370e903528a6aee5a73d141637ba12
Author: Richard Biener <rguenther@suse.de>
Date:   Thu Jan 24 09:31:51 2019 +0000

    backport: re PR middle-end/89008 (O2 and O1 results differ for simple test)
    
    2019-01-24  Richard Biener  <rguenther@suse.de>
    
            Backport from mainline
            2019-01-23  Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/89008
            * tree-ssa-reassoc.c (eliminate_using_constants): For * 0 do
            not leave another stray operand.
    
            * gcc.dg/torture/pr89008.c: New testcase.
    
    From-SVN: r268234

commit e6f1ebce4d956ae4acc38e3971fbd3222a78e73d
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Jan 24 00:16:13 2019 +0000

    Daily bump.
    
    From-SVN: r268224

commit c9f3093d06ea5d30d36263e0922dabcdd72857e2
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Jan 23 00:16:12 2019 +0000

    Daily bump.
    
    From-SVN: r268173

commit 84cf7f8006c781f4ec409cc75e8b12cb67204927
Author: Manfred Schwarb <manfred99@gmx.ch>
Date:   Tue Jan 22 17:39:09 2019 +0100

    array_function_5.f90: : Fix a dg directive.
    
    2019-01-22  Manfred Schwarb  <manfred99@gmx.ch>
    
            * gfortran.dg/array_function_5.f90: : Fix a dg directive.
            * gfortran.dg/class_66.f90: Likewise.
            * gfortran.dg/dec_structure_12.f90: Likewise.
            * gfortran.dg/dec_structure_14.f90: Likewise.
            * gfortran.dg/dec_structure_15.f90: Likewise.
            * gfortran.dg/dtio_31.f03: Likewise.
            * gfortran.dg/dtio_32.f03: Likewise.
            * gfortran.dg/extends_11.f03: Likewise.
            * gfortran.dg/integer_plus.f90: Likewise.
            * gfortran.dg/matmul_const.f90: Likewise.
            * gfortran.dg/namelist_96.f90: Likewise.
            * gfortran.dg/pdt_25.f03: Likewise.
            * gfortran.dg/pdt_28.f03: Likewise.
            * gfortran.dg/pr58968.f: Likewise.
            * gfortran.dg/pr78259.f90: Likewise.
            * gfortran.dg/debug/pr35154-stabs.f: Likewise.
            * gfortran.dg/vect/vect-2.f90: Likewise.
    
    From-SVN: r268158

commit 2c550dba5bbf541d782aaa7dc55c27a6f070c7b6
Author: Uros Bizjak <uros@gcc.gnu.org>
Date:   Tue Jan 22 17:32:47 2019 +0100

    re PR target/88938 (ICE in extract_insn, at recog.c:2304)
    
            PR target/88938
            * config/i386/i386.c (ix86_expand_builtin) [case IX86_BUILTIN_BEXTRI32,
            case IX86_BUILTIN_BEXTRI64]: Sanitize operands.
    
    testsuite/ChangeLog:
    
            PR target/88938
            * gcc.target/i386/pr88938.c: New test.
    
    From-SVN: r268156

commit ddbd3a34ca21660cf66095218f88334a53938a22
Author: Nidal Faour <nidal.faour@wdc.com>
Date:   Tue Jan 22 09:49:27 2019 +0000

    re PR lto/88422 (collect2.exe: fatal error: lto-wrapper returned 1 exit status: file not recognized: file truncated)
    
    2019-01-22  Nidal Faour  <nidal.faour@wdc.com>
    
            PR lto/88422
            * simple-object.c (O_BINARY): Define if not already defined.
            (simple_object_copy_lto_debug_sections): Create file in binary
            mode.
    
    From-SVN: r268142

commit 6cddb12d0006448ea51bf3c1e2124396ba983281
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Jan 22 00:16:32 2019 +0000

    Daily bump.
    
    From-SVN: r268133

commit b0e8118fa8cc6f7b4642a8ac25c94727700b9a3f
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Mon Jan 21 13:16:25 2019 +0000

    PR libstdc++/88782 avoid ODR problems in std::make_shared
    
    The old version of _Sp_counted_ptr_inplace::_M_get_deleter (up to GCC
    8.2.0) expects to be passed a real std::typeinfo object, so mixing that
    with the new definition of the __shared_ptr constructor (which always
    passes the fake tag) leads to accessing the fake object as a real
    std::typeinfo. Instead of trying to make it safe to mix the old and new
    definitions, just stop using that function. By passing a reference to
    __shared_ptr::_M_ptr to the __shared_count constructor it can be set
    directly, without needing to obtain the pointer via the _M_get_deleter
    back-channel. This avoids a virtual dispatch (which fixes PR 87514).
    
    This means that code built against new libstdc++ headers doesn't use
    _M_get_deleter at all, and so make_shared works the same whether RTTI is
    enabled or not.
    
    Unlike on trunk, where _M_get_deleter calls a new library function that
    can detect the real type_info object even when RTTI is disabled, this
    commit for gcc-8-branch cannot add a new symbol to the shared library.
    That means _M_get_deleter still returns null if compiled without RTTI
    and it gets called from a translation unit that was compiled with RTTI.
    
    If linking to objects built against older versions of libstdc++ then if
    all objects use -frtti or all use -fno-rtti, then the caller of
    _M_get_deleter and the definition of _M_get_deleter will be consistent
    and it will work. If mixing -frtti with -fno-rtti it can still fail if
    the linker picks an old definition of _M_get_deleter and an old
    __shared_ptr constructor that are incompatible. In that case some or all
    objects might need to be recompiled (or just relinked in a different
    order).
    
    Backport from mainline
    2019-01-18  Jonathan Wakely  <jwakely@redhat.com>
    
            PR libstdc++/87514
            PR libstdc++/87520
            PR libstdc++/88782
            * config/abi/pre/gnu.ver (GLIBCXX_3.4.26): Export new symbol.
            * include/bits/shared_ptr.h
            (shared_ptr(_Sp_make_shared_tag, const Alloc&, Args&&...))
            (allocate_shared): Change to use new tag type.
            * include/bits/shared_ptr_base.h (_Sp_make_shared_tag::_S_eq):
            Declare new member function.
            (_Sp_alloc_shared_tag): Define new type.
            (_Sp_counted_ptr_inplace): Declare __shared_count<_Lp> as a friend.
            (_Sp_counted_ptr_inplace::_M_get_deleter) [!__cpp_rtti]: Use
            _Sp_make_shared_tag::_S_eq to check type_info.
            (__shared_count(Ptr, Deleter),__shared_count(Ptr, Deleter, Alloc)):
            Constrain to prevent being called with _Sp_alloc_shared_tag.
            (__shared_count(_Sp_make_shared_tag, const _Alloc&, Args&&...)):
            Replace constructor with ...
            (__shared_count(Tp*&, _Sp_alloc_shared_tag<_Alloc>, Args&&...)): Use
            reference parameter so address of the new object can be returned to
            the caller. Obtain the allocator from the tag type.
            (__shared_ptr(_Sp_make_shared_tag, const Alloc&, Args&&...)): Replace
            constructor with ...
            (__shared_ptr(_Sp_alloc_shared_tag<Alloc>, Args&&...)): Pass _M_ptr
            to the __shared_count constructor.
            (__allocate_shared): Change to use new tag type.
            * src/c++11/shared_ptr.cc (_Sp_make_shared_tag::_S_eq): Define.
    
    From-SVN: r268114

commit 4494ec42ab0a189a189bc7ac22133194d25b9125
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Jan 21 00:16:31 2019 +0000

    Daily bump.
    
    From-SVN: r268109

commit 1cf68540940194be09077eefb97096322e547af0
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Jan 20 00:16:22 2019 +0000

    Daily bump.
    
    From-SVN: r268100

commit c9e1e772d19eea34d5f90e71672d7f3fed739af4
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Jan 19 00:16:30 2019 +0000

    Daily bump.
    
    From-SVN: r268088

commit e245e8ed2ad77be78d15d4a7c0e888ca5c45f407
Author: Richard Earnshaw <rearnsha@arm.com>
Date:   Fri Jan 18 13:25:37 2019 +0000

    [arm] PR target/88799 Add +mp and +sec extensions to ARMv7-a (gcc-8 backport)
    
    Most armv7-a implementations support a number of basic extensions to
    the architecture which are not particularly important to the compiler,
    but can matter if code contains inline assembly.  This patch adds
    support for these extensions, based on the capabilities that GAS
    already provides for the appropriate CPUs.  For the purposes of
    multilib selection we ignore these extensions entirely and map the
    extended architecture versions down to the base versions we have
    already support for.
    
    gcc:
            PR target/88799
            * config/arm/arm-cpus.in (mp): New feature.
            (sec): New feature.
            (fgroup ARMv7ve): Add mp and sec features.
            (arch armv7-a): Add options to allow mp and sec extensions.
            (cpu generic-armv7-a): Add options to allow mp and sec extensions.
            (cpu cortex-a5, cpu cortex-7, cpu cortex-a9): Add mp and sec
            extenstions to the base architecture.
            (cpu cortex-a8): Add sec extension to the base architecture.
            (cpu marvell-pj4): Add mp and sec extensions to the base architecture.
            * config/arm/t-aprofile (MULTILIB_MATCHES): Map all armv7-a arch
            variants down to the base v7-a varaint.
            * config/arm/t-multilib (v7_a_arch_variants): New variable.
            * doc/invoke.texi (ARM Options): Add +mp and +sec to the list
            of permitted extensions for -march=armv7-a and for
            -mcpu=generic-armv7-a.
    
    testsuite:
            * gcc.target/arm/multilib.exp (config "aprofile"): Add tests for
            mp and sec extensions to armv7-a.
    
    From-SVN: r268077

commit 3e134a19ae2d5a4a1c5c5eaf22d10869a039e1bb
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Jan 18 00:16:39 2019 +0000

    Daily bump.
    
    From-SVN: r268052

commit deb359576f1b0d043cba06123644e370a075ebe0
Author: Uros Bizjak <ubizjak@gmail.com>
Date:   Thu Jan 17 18:37:52 2019 +0100

    alpha.c (alpha_gimplify_va_arg): Handle split indirect COMPLEX_TYPE arguments.
    
            * config/alpha/alpha.c (alpha_gimplify_va_arg):
            Handle split indirect COMPLEX_TYPE arguments.
    
    From-SVN: r268042

commit 9e9acea9c0a089ee88b5f3b605d02b7fda14e351
Author: Nathan Sidwell <nathan@acm.org>
Date:   Thu Jan 17 12:58:50 2019 +0000

    [PR c++/86610] lambda captures in templates
    
    https://gcc.gnu.org/ml/gcc-patches/2019-01/msg00948.html
            PR c++/86610
            * semantics.c (process_outer_var_ref): Only skip dependent types
            in templates.
    
            PR c++/86610
            * g++.dg/cpp0x/pr86610.C: New.
    
    From-SVN: r268029

commit cdec1a043aec943901f9e04e3c408c0b2d6256f1
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Thu Jan 17 12:14:31 2019 +0000

    gimple-ssa-isolate-paths.c (stmt_uses_name_in_undefined_way): Replace flag_non_call_exceptions with cfun->can_throw_non_call_exceptions.
    
            * gimple-ssa-isolate-paths.c (stmt_uses_name_in_undefined_way): Replace
            flag_non_call_exceptions with cfun->can_throw_non_call_exceptions.
            (stmt_uses_0_or_null_in_undefined_way): Likewise.
            * tree-ssa-alias.c (same_addr_size_stores_p): Likewise.
    
    From-SVN: r268019

commit 0f22d3dc3a725164186a1586879d66626234a115
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Jan 17 00:16:22 2019 +0000

    Daily bump.
    
    From-SVN: r267998

commit eff0528cf50902e500ffd180b09ee665fc900a90
Author: Aaron Sawdey <acsawdey@linux.ibm.com>
Date:   Wed Jan 16 17:08:40 2019 +0000

    backport: rs6000-string.c (expand_block_move): Don't use unaligned vsx and avoid lxvd2x/stxvd2x.
    
    2019-01-16  Aaron Sawdey  <acsawdey@linux.ibm.com>
    
            Backported from mainline
    
            2019-01-03  Aaron Sawdey  <acsawdey@linux.ibm.com>
            * config/rs6000/rs6000-string.c (expand_block_move): Don't use
            unaligned vsx and avoid lxvd2x/stxvd2x.
            (gen_lvx_v4si_move): New function.
    
    From-SVN: r267979

commit 3eec45857f66183f192385707aa498264bf1a906
Author: Martin Jambor <mjambor@suse.cz>
Date:   Wed Jan 16 16:37:33 2019 +0100

    [PR 88214] Check that an argument is a pointer
    
    2019-01-16  Martin Jambor  <mjambor@suse.cz>
    
            Backported from mainline
            2018-12-10  Martin Jambor  <mjambor@suse.cz>
    
            PR ipa/88214
            * ipa-prop.c (determine_locally_known_aggregate_parts): Make sure
            we check pointers against pointers.
    
            testsuite/
            * gcc.dg/ipa/pr88214.c: New test.
    
    From-SVN: r267974

commit 98ec71d3fbc3fb5eed2b6b2e31905ca15836ad91
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Jan 16 00:16:13 2019 +0000

    Daily bump.
    
    From-SVN: r267960

commit e79f85179855da366360840f1a2c2bafc8d1390e
Author: Steven G. Kargl <kargl@gcc.gnu.org>
Date:   Tue Jan 15 20:45:43 2019 +0000

    re PR fortran/81849 (Size of automatic array argument specified by host-associated  variable.)
    
    2019-01-15  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/81849
            * resolve.c (resolve_symbol): Host associated varaibles can appear
            in the specification statement of a RESULT array.
    
    2019-01-15  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/81849
            * gfortran.dg/pr81849.f90: New test.
    
    From-SVN: r267951

commit 4b0d5c276176c912ad0327ae87487a52b8899b71
Author: Joseph Myers <joseph@codesourcery.com>
Date:   Tue Jan 15 20:32:00 2019 +0000

    Fix diagnostics for never-defined inline and nested functions (PR c/88720, PR c/88726).
    
    Bugs 88720 and 88726 report issues where a function is declared inline
    in an inner scope, resulting in spurious diagnostics about it being
    declared but never defined when that scope is left (possibly in some
    cases also wrongly referring to the function as a nested function).
    These are regressions that were introduced with the support for C99
    inline semantics in 4.3 (they don't appear with 4.2; it's possible
    some aspects of the bugs might have been introduced later than 4.3).
    
    For the case of functions being wrongly referred to as nested,
    DECL_EXTERNAL was not the right condition for a function being
    non-nested; TREE_PUBLIC is appropriate for the case of non-nested
    functions with external linkage, while !b->nested means this is the
    outermost scope in which the function was declared and so avoids
    catching the case of a file-scope static being redeclared inline
    inside a function.
    
    For the non-nested, external-linkage case, the code attempts to avoid
    duplicate diagnostics by diagnosing only when scope != external_scope,
    but actually scope == external_scope is more appropriate, as it's only
    when the file and external scopes are popped that the code can
    actually tell whether a function ended up being defined, and all such
    functions will appear in the (GCC-internal) external scope.
    
    Bootstrapped with no regressions on x86_64-pc-linux-gnu.
    
    gcc/c:
            Backport from mainline
            2019-01-07  Joseph Myers  <joseph@codesourcery.com>
    
            PR c/88720
            PR c/88726
            * c-decl.c (pop_scope): Use TREE_PUBLIC and b->nested to determine
            whether a function is nested, not DECL_EXTERNAL.  Diagnose inline
            functions declared but never defined only for external scope, not
            for other scopes.
    
    gcc/testsuite:
            Backport from mainline
            2019-01-07  Joseph Myers  <joseph@codesourcery.com>
    
            PR c/88720
            PR c/88726
            * gcc.dg/inline-40.c, gcc.dg/inline-41.c: New tests.
    
    From-SVN: r267949

commit b6fa56ee56c9c3cc95e67e4e399b5f20ea15b672
Author: Dominique d'Humieres <dominiq@gcc.gnu.org>
Date:   Tue Jan 15 19:26:07 2019 +0100

    re PR fortran/88803 (gfortran documentation warning: '.' or ',' must follow @xref)
    
    2019-01-15  Dominique d'Humieres  <dominiq@gcc.gnu.org>
    
            PR fortran/88803
            * gfortran.texi: Replace @xref with @ref and adjust the sentence.
    
    From-SVN: r267943

commit f539d86b36ba815bb20474ec4972cdc8ee42c77a
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Jan 15 00:16:18 2019 +0000

    Daily bump.
    
    From-SVN: r267928

commit da329bf661e79a3c819f572458c8c9ae85bb2de8
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Mon Jan 14 11:30:47 2019 +0000

    PR libstdc++/80762 add missing dg-require-filesystem-ts
    
            PR libstdc++/80762
            * testsuite/experimental/filesystem/path/construct/80762.cc: Add
            dg-require-filesystem-ts directive.
    
    From-SVN: r267915

commit 11a3ef0052cc3e123ec0e1bc97753a0a645ab5eb
Author: Jerry DeLisle <jvdelisle@gcc.gnu.org>
Date:   Mon Jan 14 02:03:34 2019 +0000

    backport: re PR libfortran/88776 (Namelist read from stdin: loss of data)
    
    2019-01-13  Jerry DeLisle  <jvdelisle@gcc.gnu.org>
    
            Backport from trunk
            PR libfortran/88776
            * io/list_read.c (namelist_read): Use nml_err_ret path on read error
            not based on stdin_unit.
            * io/open.c (newunit): Free format buffer if the unit specified is for
            stdin, stdout, or stderr.
    
            * gfortran.dg/namelist_96.f90: New test.
    
    From-SVN: r267912

commit 08844687ca85c318276056e69dc79bc1ab22687c
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Jan 14 00:16:09 2019 +0000

    Daily bump.
    
    From-SVN: r267908

commit 8a5f11bca0db78f49702b2e7b3e76d60f415b5fb
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Jan 13 00:16:24 2019 +0000

    Daily bump.
    
    From-SVN: r267900

commit c1dc1cf414d8be80404c6d0303b11d01240043fb
Author: Dominique d'Humieres <dominiq@gcc.gnu.org>
Date:   Sat Jan 12 15:23:16 2019 +0100

    plugindir1.c: Adjust dg-prune-output for Darwin.
    
    2019-01-12  Dominique d'Humieres  <dominiq@gcc.gnu.org>
    
            * gcc.dg/plugin/plugindir1.c: Adjust dg-prune-output for Darwin.
            * gcc.dg/plugin/plugindir2.c: Likewise.
            * gcc.dg/plugin/plugindir3.c: Likewise.
            * gcc.dg/plugin/plugindir4.c: Likewise.
    
    From-SVN: r267880

commit 1f6406306a010878904322fabaef59c977c9071f
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Jan 12 00:16:14 2019 +0000

    Daily bump.
    
    From-SVN: r267871

commit d8ddd1be8c6f8ed9956389ce39b3c3bad66cb4b5
Author: Steven G. Kargl <kargl@gcc.gnu.org>
Date:   Sat Jan 12 00:14:55 2019 +0000

    re PR fortran/35031 (ELEMENTAL procedure with BIND(C))
    
    2019-01-11  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/35031
            * decl.c (gfc_match_entry): Check for F2018:C1546.  Fix nearby
            mis-indentation.
    
    2019-01-11  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/35031
            * gfortran.dg/pr35031.f90: new test.
    
    From-SVN: r267869

commit dcb3d91db5384dfdf39a5d92aec42759a0639d3b
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Jan 11 00:16:15 2019 +0000

    Daily bump.
    
    From-SVN: r267827

commit 60f4f08bd9c51d09c99457749ca1fd70e9f51cc7
Author: Jan Hubicka <hubicka@ucw.cz>
Date:   Thu Jan 10 20:56:47 2019 +0100

    backport: ipa-devirt.c (polymorphic_call_target_d): Add n_odr_types.
    
    
            Backported from mainline
    
            2018-12-27  Jan Hubicka  <hubicka@ucw.cz>
            * ipa-devirt.c (polymorphic_call_target_d): Add n_odr_types.
            (polymorphic_call_target_hasher::hash): Hash it.
            (polymorphic_call_target_hasher::equal): Compare it.
            (possible_polymorphic_call_targets): Set it.
            * tree.c (free_lang_data): Rebuild type inheritance graph even on
            non-LTO path.
    
    From-SVN: r267822

commit 7306424168715ba99af1e10be5ab1aa53001dce7
Author: Wilco Dijkstra <wdijkstr@arm.com>
Date:   Thu Jan 10 18:40:43 2019 +0000

    The testcase for PR62178 has been failing for a while due to the pass conditions being too tight...
    
    The testcase for PR62178 has been failing for a while due to the pass
    conditions being too tight, resulting in failures with -mcmodel=tiny:
    
            ldr     q2, [x0], 124
            ld1r    {v1.4s}, [x1], 4
            cmp     x0, x2
            mla     v0.4s, v2.4s, v1.4s
            bne     .L7
    
    -mcmodel=small generates the slightly different:
    
            ldr     q1, [x0], 124
            ldr     s2, [x1, 4]!
            cmp     x0, x2
            mla     v0.4s, v1.4s, v2.s[0]
            bne     .L7
    
    This is due to Combine merging a DUP instruction with either a load
    or MLA - we can't force it to prefer one over the other.  However the
    generated vector loop is fast either way since it generates MLA and
    merges the DUP either with a load or MLA.  So relax the conditions
    slightly and check we still generate MLA and there is no DUP or FMOV.
    
        testsuite/
            * gcc.target/aarch64/pr62178.c: Relax scan-assembler checks.
    
    From-SVN: r267819

commit e9d5ead26cbe5124b581efeda265a0da00f59659
Author: Jan Hubicka <hubicka@ucw.cz>
Date:   Thu Jan 10 17:53:39 2019 +0100

    backport: re PR lto/85574 (LTO bootstapped binaries differ)
    
    
            Backported from mainline
    
            2019-01-02  Richard Biener  <rguenther@suse.de>
            PR ipa/85574
            * ipa-icf.h (sem_item_optimizer::sort_congruence_split): Declare.
            * ipa-icf.c (sem_item_optimizer::sort_congruence_split): New
            function.
            (sem_item_optimizer::do_congruence_step_f): Sort the congruence
            set after UIDs before splitting them.
    
    From-SVN: r267817

commit ce3a73d7122d9bddb26c4eae16a8e91254e9b2d4
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Thu Jan 10 16:37:44 2019 +0000

    Fix bugs in filesystem::path::lexically_normal()
    
    Using path::_List::erase(const_iterator) to remove a non-final component
    in path::lexically_normal() is a bug, because it leaves the following
    component with an incorrect _M_pos value.
    
    The buggy erase call is replaced by calls to pop_back() and/or clearing
    the last component to leave it as an empty final filename.
    
    Also replace the "???" comment in lexically_normal() to document when
    that branch is taken.
    
    Backport from mainline
    2019-01-04  Jonathan Wakely  <jwakely@redhat.com>
    
            (path::lexically_normal()): Use std::vector iterators instead of
            path::iterator. Use pop_back to remove components from the end. Clear
            trailing filename, instead of using erase(const_iterator) to remove
            a non-final component.
            * testsuite/27_io/filesystem/path/generation/normal.cc: Test
            additional cases.
            * testsuite/27_io/filesystem/path/generation/normal2.cc: New test.
    
    From-SVN: r267816

commit 20cdb0277381ca8f80a9ca7b833fa28d44b95c42
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Thu Jan 10 16:06:49 2019 +0000

    PR libstdc++/80762 avoid ambiguous __constructible_from<void, void>
    
    Ensure we don't try to instantiate __is_constructible_from<void, void>,
    because there are two partial specializations that are equally good
    matches.
    
    Backport from mainline
    2018-12-12  Jonathan Wakely  <jwakely@redhat.com>
    
            PR libstdc++/80762
            * include/bits/fs_path.h (path::_Path): Use remove_cv_t and is_void.
            * include/experimental/bits/fs_path.h (path::_Path): Likewise.
            * testsuite/27_io/filesystem/path/construct/80762.cc: New test.
            * testsuite/experimental/filesystem/path/construct/80762.cc: New test.
    
    From-SVN: r267815

commit 3aa56ff7b8c2e98096fa691528cb8213ea92964d
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Thu Jan 10 16:02:02 2019 +0000

    Fix handling of an empty filename at end of a path
    
    The C++17 std::filesystem::path grammar allows an empty filename as the
    last component (to signify a trailing slash). The existing code does not
    handle this consistently, sometimes an empty filename has type _Multi
    and sometimes it has type _Filename. This can result in a non-empty
    iterator range for an empty filename component.
    
    This change ensures that empty paths always have type _Filename and will
    yield an empty iterator range.
    
    Backport from mainline
    2018-05-23  Jonathan Wakely  <jwakely@redhat.com>
    
            * include/bits/fs_path.h (path::_M_type): Change default member
            initializer to _Filename.
            (path::begin): Create past-the-end iterator for empty path.
            (path::has_relative_path()): Return false for empty filenames.
            (path::_M_split_cmpts): Set _M_type to _Filename for empty paths.
            Fix offset of empty final component.
            * testsuite/27_io/filesystem/path/itr/components.cc: New.
            * testsuite/27_io/filesystem/path/itr/traversal.cc: Add new inputs.
    
    From-SVN: r267814

commit e2bb8c533d0a1fbffad354308b0b3e6d3759b5ad
Author: Jan Hubicka <hubicka@ucw.cz>
Date:   Thu Jan 10 12:54:26 2019 +0100

    re PR lto/85574 (LTO bootstapped binaries differ)
    
            PR tree-optimization/85574
    
    From-SVN: r267805

commit a727b8ef223f235b61fec6ca6a3db15bb48d5ee1
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Thu Jan 10 11:19:24 2019 +0000

    Include name of test in filesystem-test.XXXXXX filenames
    
    Also fix some tests that were not cleaning up after themselves, as
    identified by the change to nonexistent_path.
    
    Backport from mainline
    2019-01-10  Jonathan Wakely  <jwakely@redhat.com>
    
            * testsuite/util/testsuite_fs.h (nonexistent_path): Include name
            of the source file containing the caller.
            * testsuite/27_io/filesystem/iterators/directory_iterator.cc: Remove
            directories created by test.
            * testsuite/27_io/filesystem/iterators/recursive_directory_iterator.cc:
            Likewise.
            * testsuite/experimental/filesystem/iterators/directory_iterator.cc:
            Likewise.
            * testsuite/experimental/filesystem/iterators/
            recursive_directory_iterator.cc: Likewise.
    
    From-SVN: r267803

commit 06b1846e7e6e56317d9ff162227ffecc5961008f
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Thu Jan 10 11:19:18 2019 +0000

    Clean up temporary files created by std::filesystem testsuite
    
    Backport from mainline
    2018-11-27  Jonathan Wakely  <jwakely@redhat.com>
    
            * testsuite/27_io/filesystem/operations/canonical.cc: Remove
            directory created by test.
            * testsuite/27_io/filesystem/operations/symlink_status.cc: Remove
            symlink created by test.
    
    From-SVN: r267802

commit 064c75e8c2c6e0c466c7bf15b9545cb6195fe780
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Thu Jan 10 09:47:49 2019 +0000

    Remove bare 'throw' expression that breaks -fno-exceptions build
    
    This is debugging code that wasn't meant to be left in, and prevents
    building the filesystem TS library with -fno-exceptions. It was already
    removed from trunk months aog, this removes it from the branch too.
    
            * src/filesystem/std-path.cc (path::remove_filename()): Remove debug
            check that prevents building with -fno-exceptions.
    
    From-SVN: r267798

commit 89683469fcafafba178317e5f58a1855fc31c9f8
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Jan 10 00:16:33 2019 +0000

    Daily bump.
    
    From-SVN: r267791

commit 7ebe61b18d24041f3fccdc609e482b9f6e428a49
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Wed Jan 9 14:48:45 2019 +0000

    sparc.md (*tablejump_sp32): Merge into...
    
            * config/sparc/sparc.md (*tablejump_sp32): Merge into...
            (*tablejump_sp64): Likewise.
            (*tablejump<P:mode>): ...this.
            (*call_address_sp32): Merge into...
            (*call_address_sp64): Likewise.
            (*call_address<P:mode>): ...this.
            (*call_symbolic_sp32): Merge into...
            (*call_symbolic_sp64): Likewise.
            (*call_symbolic<P:mode>): ...this.
            (call_value): Remove constraint and add predicate.
            (*call_value_address_sp32): Merge into...
            (*call_value_address_sp64): Likewise.
            (*call_value_address<P:mode>): ...this.
            (*call_value_symbolic_sp32): Merge into...
            (*call_value_symbolic_sp64): Likewise.
            (*call_value_symbolic<P:mode>): ...this.
            (*sibcall_symbolic_sp32): Merge into...
            (*sibcall_symbolic_sp64): Likewise.
            (*sibcall_symbolic<P:mode>): ...this.
            (sibcall_value): Remove constraint and add predicate.
            (*sibcall_value_symbolic_sp32): Merge into...
            (*sibcall_value_symbolic_sp64): Likewise.
            (*sibcall_value_symbolic<P:mode>): ...this.
            (window_save): Minor tweak.
            (*branch_sp32): Merge into...
            (*branch_sp64): Likewise.
            (*branch<P:mode>): ...this.
    
    From-SVN: r267775

commit 71ba70ae2c9f5f663e0235a6d2e57a01a7a6d24d
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Wed Jan 9 14:39:18 2019 +0000

    re PR target/84010 (problematic TLS code generation on 64-bit SPARC)
    
            PR target/84010
            * config/sparc/sparc.c (sparc_legitimize_tls_address): Only use Pmode
            consistently in TLS address generation and adjust code to the renaming
            of patterns.  Mark calls to __tls_get_addr as const.
            * config/sparc/sparc.md (tgd_hi22): Turn into...
            (tgd_hi22<P:mode>): ...this and use Pmode throughout.
            (tgd_lo10): Turn into...
            (tgd_lo10<P:mode>): ...this and use Pmode throughout.
            (tgd_add32): Merge into...
            (tgd_add64): Likewise.
            (tgd_add<P:mode>): ...this and use Pmode throughout.
            (tldm_hi22): Turn into...
            (tldm_hi22<P:mode>): ...this and use Pmode throughout.
            (tldm_lo10): Turn into...
            (tldm_lo10<P:mode>): ...this and use Pmode throughout.
            (tldm_add32): Merge into...
            (tldm_add64): Likewise.
            (tldm_add<P:mode>): ...this and use Pmode throughout.
            (tldm_call32): Merge into...
            (tldm_call64): Likewise.
            (tldm_call<P:mode>): ...this and use Pmode throughout.
            (tldo_hix22): Turn into...
            (tldo_hix22<P:mode>): ...this and use Pmode throughout.
            (tldo_lox10): Turn into...
            (tldo_lox10<P:mode>): ...this and use Pmode throughout.
            (tldo_add32): Merge into...
            (tldo_add64): Likewise.
            (tldo_add<P:mode>): ...this and use Pmode throughout.
            (tie_hi22): Turn into...
            (tie_hi22<P:mode>): ...this and use Pmode throughout.
            (tie_lo10): Turn into...
            (tie_lo10<P:mode>): ...this and use Pmode throughout.
            (tie_ld64): Use DImode throughout.
            (tie_add32): Merge into...
            (tie_add64): Likewise.
            (tie_add<P:mode>): ...this and use Pmode throughout.
            (tle_hix22_sp32): Merge into...
            (tle_hix22_sp64): Likewise.
            (tle_hix22<P:mode>): ...this and use Pmode throughout.
            (tle_lox22_sp32): Merge into...
            (tle_lox22_sp64): Likewise.
            (tle_lox22<P:mode>): ...this and use Pmode throughout.
            (*tldo_ldub_sp32): Merge into...
            (*tldo_ldub_sp64): Likewise.
            (*tldo_ldub<P:mode>): ...this and use Pmode throughout.
            (*tldo_ldub1_sp32): Merge into...
            (*tldo_ldub1_sp64): Likewise.
            (*tldo_ldub1<P:mode>): ...this and use Pmode throughout.
            (*tldo_ldub2_sp32): Merge into...
            (*tldo_ldub2_sp64): Likewise.
            (*tldo_ldub2<P:mode>): ...this and use Pmode throughout.
            (*tldo_ldsb1_sp32): Merge into...
            (*tldo_ldsb1_sp64): Likewise.
            (*tldo_ldsb1<P:mode>): ...this and use Pmode throughout.
            (*tldo_ldsb2_sp32): Merge into...
            (*tldo_ldsb2_sp64): Likewise.
            (*tldo_ldsb2<P:mode>): ...this and use Pmode throughout.
            (*tldo_ldub3_sp64): Use DImode throughout.
            (*tldo_ldsb3_sp64): Likewise.
            (*tldo_lduh_sp32): Merge into...
            (*tldo_lduh_sp64): Likewise.
            (*tldo_lduh<P:mode>): ...this and use Pmode throughout.
            (*tldo_lduh1_sp32): Merge into...
            (*tldo_lduh1_sp64): Likewise.
            (*tldo_lduh1<P:mode>): ...this and use Pmode throughout.
            (*tldo_ldsh1_sp32): Merge into...
            (*tldo_ldsh1_sp64): Likewise.
            (*tldo_ldsh1<P:mode>): ...this and use Pmode throughout.
            (*tldo_lduh2_sp64): Use DImode throughout.
            (*tldo_ldsh2_sp64): Likewise.
            (*tldo_lduw_sp32): Merge into...
            (*tldo_lduw_sp64): Likewise.
            (*tldo_lduw<P:mode>): ...this and use Pmode throughout.
            (*tldo_lduw1_sp64): Use DImode throughout.
            (*tldo_ldsw1_sp64): Likewise.
            (*tldo_ldx_sp64): Likewise.
            (*tldo_stb_sp32): Merge into...
            (*tldo_stb_sp64): Likewise.
            (*tldo_stb<P:mode>): ...this and use Pmode throughout.
            (*tldo_sth_sp32): Merge into...
            (*tldo_sth_sp64): Likewise.
            (*tldo_sth<P:mode>): ...this and use Pmode throughout.
            (*tldo_stw_sp32): Merge into...
            (*tldo_stw_sp64): Likewise.
            (*tldo_stw<P:mode>): ...this and use Pmode throughout.
            (*tldo_stx_sp64): Use DImode throughout.
    
    Co-Authored-By: James Clarke <jrtc27@jrtc27.com>
    
    From-SVN: r267772

commit fb58dd63ec011f6c506a9633310c4b6c2eab39af
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Wed Jan 9 10:17:10 2019 +0000

    PR libstdc++/87855 fix optional for types with non-trivial copy/move
    
    Backport both parts of the fix for PR libstdc++/87855, as well as a test
    tweak from r263657 to avoid having to adjust dg-error line numbers.
    
            * testsuite/20_util/optional/cons/value_neg.cc: Change dg-error to
            dg-prune-output. Remove unused header.
    
    Backport from mainline
    2019-01-08  Jonathan Wakely  <jwakely@redhat.com>
    
    When the contained value is not trivially copy (or move) constructible
    the union's copy (or move) constructor will be deleted, and so the
    _Optional_payload delegating constructors are invalid. G++ fails to
    diagnose this because it incorrectly performs copy elision in the
    delegating constructors. Clang does diagnose it (llvm.org/PR40245).
    
    The solution is to avoid performing any copy (or move) when the
    contained value's copy (or move) constructor isn't trivial. Instead the
    contained value can be constructed by calling _M_construct. This is OK,
    because the relevant constructor doesn't need to be constexpr when the
    contained value isn't trivially copy (or move) constructible.
    
    Additionally, this patch removes a lot of code duplication in the
    _Optional_payload partial specializations and the _Optional_base partial
    specialization, by hoisting it into common base classes.
    
    The Python pretty printer for std::optional needs to be adjusted to
    support the new layout. Retain support for the old layout, and add a
    test to verify that the support still works.
    
            PR libstdc++/87855
            * include/std/optional (_Optional_payload_base): New class template
            for common code hoisted from _Optional_payload specializations. Use
            a template for the union, to allow a partial specialization for
            types with non-trivial destructors. Add constructors for in-place
            initialization to the union.
            (_Optional_payload(bool, const _Optional_payload&)): Use _M_construct
            to perform non-trivial copy construction, instead of relying on
            non-standard copy elision in a delegating constructor.
            (_Optional_payload(bool, _Optional_payload&&)): Likewise for
            non-trivial move construction.
            (_Optional_payload): Derive from _Optional_payload_base and use it
            for everything except the non-trivial assignment operators, which are
            defined as needed.
            (_Optional_payload<false, C, M>): Derive from the specialization
            _Optional_payload<true, false, false> and add a destructor.
            (_Optional_base_impl::_M_destruct, _Optional_base_impl::_M_reset):
            Forward to corresponding members of _Optional_payload.
            (_Optional_base_impl::_M_is_engaged, _Optional_base_impl::_M_get):
            Hoist common members from _Optional_base.
            (_Optional_base): Make all members and base class public.
            (_Optional_base::_M_get, _Optional_base::_M_is_engaged): Move to
            _Optional_base_impl.
            * python/libstdcxx/v6/printers.py (StdExpOptionalPrinter): Add
            support for new std::optional layout.
            * testsuite/libstdc++-prettyprinters/compat.cc: New test.
    
    Backport from mainline
    2018-11-19  Ville Voutilainen  <ville.voutilainen@gmail.com>
    
            PR libstdc++/87855
            Also implement P0602R4 (variant and optional
            should propagate copy/move triviality) for std::optional.
            * include/std/optional (_Optional_payload): Change
            the main constraints to check constructibility in
            addition to assignability.
            (operator=): Make constexpr.
            (_M_reset): Likewise.
            (_M_construct): Likewise.
            (operator->): Likewise.
            * testsuite/20_util/optional/assignment/8.cc: Adjust.
            * testsuite/20_util/optional/assignment/9.cc: New.
    
    From-SVN: r267759

commit d6a89f30eda52ecbd89ce38ffcfcfe3ee812a5db
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Wed Jan 9 08:25:37 2019 +0000

    invoke.texi (-Os): Add reference to -finline-functions.
    
            * doc/invoke.texi (-Os): Add reference to -finline-functions.
            (-finline-functions): Remove reference to -O2, add references
            to -fprofile-use and -fauto-profile.
    
    From-SVN: r267754

commit 9faeb4147c115e545215962d9f1345c22e881c27
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Jan 9 00:16:13 2019 +0000

    Daily bump.
    
    From-SVN: r267749

commit 54c6de2961999956c5ba75d0a7c780a1b50c5714
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Jan 8 11:34:14 2019 +0100

    backport: re PR middle-end/82564 (ICE at -O1 and above: in assign_stack_temp_for_type, at function.c:783)
    
            Backported from mainline
            2019-01-05  Jakub Jelinek  <jakub@redhat.com>
    
            PR middle-end/82564
            PR target/88620
            * expr.c (expand_assignment): For calls returning VLA structures
            if to_rtx is not a MEM, force it into a stack temporary.
    
            * gcc.dg/nested-func-12.c: New test.
            * gcc.c-torture/compile/pr82564.c: New test.
    
    From-SVN: r267720

commit 8a5d52a9cc7aecdea1f61d8e5265a37019cdee5d
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Jan 8 11:33:23 2019 +0100

    backport: re PR target/88594 (ICE in int_mode_for_mode, at stor-layout.c:403)
    
            Backported from mainline
            2019-01-04  Jakub Jelinek  <jakub@redhat.com>
    
            PR target/88594
            * config/i386/i386.c (ix86_expand_divmod_libfunc): Use mode instead
            of GET_MODE (opN) as modes of the libcall arguments.
    
            * gcc.dg/pr88594.c: New test.
    
    From-SVN: r267719

commit e13a3eb7872d92ce461e4939706483d4314ec608
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Jan 8 11:32:26 2019 +0100

    backport: re PR debug/88644 (Unexpected pub type info eliminated after r246973 (causes pubtypes-*.c to regress).)
    
            Backported from mainline
            2019-01-03  Jakub Jelinek  <jakub@redhat.com>
    
            PR debug/88644
            * dwarf2out.c (modified_type_die): If type is equal to sizetype,
            change it to qualified_type.
    
            * gcc.dg/debug/dwarf2/pr88644.c: New test.
    
            2019-01-03  Iain Sandoe  <iain@sandoe.co.uk>
    
            * gcc.dg/pubtypes-2.c: Adjust expected pubtypes length.
            * gcc.dg/pubtypes-3.c: Likewise.
            * gcc.dg/pubtypes-4.c: Likewise.
    
    From-SVN: r267718

commit 2d95c033801299bab0fe8fb25d90169c4c80c93a
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Jan 8 11:30:45 2019 +0100

    backport: re PR middle-end/85594 (ICE during expand when compiling with -fwrapv -fopenmp)
    
            Backported from mainline
            2018-12-21  Jakub Jelinek  <jakub@redhat.com>
    
            PR middle-end/85594
            PR middle-end/88553
            * omp-expand.c (extract_omp_for_update_vars): Regimplify the condition
            if needed.
            (expand_omp_for_generic): Don't clobber t temporary for ordered loops.
    
            * gcc.dg/gomp/pr85594.c: New test.
            * gcc.dg/gomp/pr88553.c: New test.
    
    From-SVN: r267716

commit f400126daba6920279133fac3475b0365cf1e627
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Jan 8 11:29:21 2019 +0100

    backport: re PR target/88522 (Error: operand size mismatch for `vpgatherqq')
    
            Backported from mainline
            2018-12-21  Jakub Jelinek  <jakub@redhat.com>
    
            PR target/88522
            * config/i386/sse.md (*avx512pf_gatherpf<mode>sf_mask,
            *avx512pf_gatherpf<mode>df_mask, *avx512pf_scatterpf<mode>sf_mask,
            *avx512pf_scatterpf<mode>df_mask): Use %X5 instead of %5 for
            -masm=intel.
            (gatherq_mode): Remove mode iterator.
            (*avx512f_gathersi<mode>, *avx512f_gathersi<mode>_2): Use X instead
            of <xtg_mode>.
            (*avx512f_gatherdi<mode>): Use X instead of <gatherq_mode>.
            (*avx512f_gatherdi<mode>_2, *avx512f_scattersi<mode>,
            *avx512f_scatterdi<mode>): Use %X5 for -masm=intel.
    
    From-SVN: r267715

commit 401fd4335d6122104d6e76f5c358adc605ae94d9
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Jan 8 11:26:39 2019 +0100

    backport: re PR rtl-optimization/88563 (wrong code with -O2 -fno-code-hoisting -fno-tree-ccp -fno-tree-dominator-opts -fno-tree-forwprop -fno-tree-fre -fno-tree-pre -fno-tree-vrp)
    
            Backported from mainline
            2018-12-21  Jakub Jelinek  <jakub@redhat.com>
    
            PR rtl-optimization/88563
            * expr.c (expand_expr_real_2) <case WIDEN_MULT_EXPR>: Swap innermode
            and mode arguments to convert_modes.  Likewise swap mode and word_mode
            arguments.  Handle both arguments with VOIDmode before convert_modes
            of one of them.  Formatting fixes.
    
            * gcc.dg/pr88563.c: New test.
    
    From-SVN: r267714

commit c81db67de9a83834ee49c9e40a361368d8f7c599
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Jan 8 11:25:54 2019 +0100

    backport: re PR c++/88180 (ICE in vec<tree_node*, va_gc, vl_embed>::quick_push(tree_node* const&))
    
            Backported from mainline
            2018-12-20  Jakub Jelinek  <jakub@redhat.com>
    
            PR c++/88180
            * parser.c (cp_parser_class_specifier_1): If
            cp_parser_check_type_definition fails, skip default arguments, NSDMIs,
            etc. like for erroneous template args.
    
            * g++.dg/parse/pr88180.C: New test.
            * g++.dg/pr85039-1.C: Don't expect diagnostics inside of the type
            definition's NSDMIs.
    
    From-SVN: r267713

commit 8604d903d6afa67a590c5dbd39ad71f5cdcebed5
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Jan 8 11:24:56 2019 +0100

    backport: re PR target/88541 (VPCLMULQDQ 256-bit inline function unavailable with optimization but without enabled AVX512VL support)
    
            Backported from mainline
            2018-12-19  Jakub Jelinek  <jakub@redhat.com>
    
            PR target/88541
            * config/i386/vpclmulqdqintrin.h (_mm256_clmulepi64_epi128): Enable
            for -mavx -mvpclmulqdq rather than just for -mavx512vl -mvpclmulqdq.
    
            * gcc.target/i386/avx-vpclmulqdq-1.c: New test.
    
    From-SVN: r267712

commit acf5583e612352ca915760e0b99b25cfccd1fe42
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Jan 8 11:23:32 2019 +0100

    backport: re PR c++/87934 (struct with NSDMI of enum makes initialization a non-constant expression)
    
            Backported from mainline
            2018-12-19  Jakub Jelinek  <jakub@redhat.com>
    
            PR c++/87934
            * constexpr.c (cxx_eval_constant_expression) <case CONSTRUCTOR>: Do
            re-process TREE_CONSTANT CONSTRUCTORs if they aren't reduced constant
            expressions.
    
            * g++.dg/cpp0x/constexpr-87934.C: New test.
    
    From-SVN: r267711

commit 3a822be94c2e7c64d5f92eaa5bb9cc0fe49aeb6f
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Jan 8 11:22:44 2019 +0100

    backport: re PR c++/88410 (internal compiler error: output_operand: invalid expression as operand)
    
            Backported from mainline
            2018-12-17  Jakub Jelinek  <jakub@redhat.com>
    
            PR c++/88410
            * cp-gimplify.c (cp_fold) <case ADDR_EXPR>: For offsetof-like folding,
            call maybe_constant_value on val to see if it is INTEGER_CST.
    
            * g++.dg/cpp0x/pr88410.C: New test.
    
    From-SVN: r267710

commit c53ca27776154de768d332593d0c14439deffcfa
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Jan 8 11:22:00 2019 +0100

    backport: re PR c++/82294 (Array of objects with constexpr constructors initialized from space-inefficient memory image)
    
            Backported from mainline
            2018-12-14  Jakub Jelinek  <jakub@redhat.com>
    
            PR c++/82294
            PR c++/87436
            * expr.h (categorize_ctor_elements): Add p_unique_nz_elts argument.
            * expr.c (categorize_ctor_elements_1): Likewise.  Compute it like
            p_nz_elts, except don't multiply it by mult.  Adjust recursive call.
            Fix up COMPLEX_CST handling.
            (categorize_ctor_elements): Add p_unique_nz_elts argument, initialize
            it and pass it through to categorize_ctor_elements_1.
            (mostly_zeros_p, all_zeros_p): Adjust categorize_ctor_elements callers.
            * gimplify.c (gimplify_init_constructor): Likewise.  Don't force
            ctor into readonly data section if num_unique_nonzero_elements is
            smaller or equal to 1/8 of num_nonzero_elements and size is >= 64
            bytes.
    
            * g++.dg/tree-ssa/pr82294.C: New test.
            * g++.dg/tree-ssa/pr87436.C: New test.
    
    From-SVN: r267709

commit 9268f311c3fa8942211d78bed861cf4ba85dd257
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Jan 8 11:20:57 2019 +0100

    backport: re PR c++/82294 (Array of objects with constexpr constructors initialized from space-inefficient memory image)
    
            Backported from mainline
            2018-12-14  Jakub Jelinek  <jakub@redhat.com>
    
            PR c++/82294
            PR c++/87436
            * init.c (build_vec_init): Change num_initialized_elts type from int
            to HOST_WIDE_INT.  Build a RANGE_EXPR if e needs to be repeated more
            than once.
    
    From-SVN: r267708

commit cce85ee29597f66d84b4b3c104f4069ebc277c98
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Jan 8 11:20:17 2019 +0100

    backport: re PR rtl-optimization/88470 (ICE in maybe_record_trace_start, at dwarf2cfi.c:2354)
    
            Backported from mainline
            2018-12-13  Jakub Jelinek  <jakub@redhat.com>
    
            PR rtl-optimization/88470
            * cfgcleanup.c (outgoing_edges_match): If the function is
            shrink-wrapped and bb1 ends with a JUMP_INSN with a single fake
            edge to EXIT, return false.
    
            * gcc.target/i386/pr88470.c: New test.
    
    From-SVN: r267707

commit 00d599c66599d761228e2d8f126fa459ed4d3d5c
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Jan 8 11:19:28 2019 +0100

    backport: re PR rtl-optimization/88416 (ICE in in df_uses_record, at df-scan.c:3013)
    
            Backported from mainline
            2018-12-13  Jakub Jelinek  <jakub@redhat.com>
    
            PR rtl-optimization/88416
            * valtrack.c (cleanup_auto_inc_dec): Handle pre/post-inc/dec/modify
            even if !AUTO_INC_DEC.
    
            * gcc.target/i386/pr88416.c: New test.
    
    From-SVN: r267706

commit cce88ff3d36c2fd637748cf6b5e32c4c89cfffa3
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Jan 8 11:18:34 2019 +0100

    backport: re PR fortran/88463 (Rejects conforming source, OpenMP Parallel region Default(None) reference to module parameter array, separate source)
    
            Backported from mainline
            2018-12-12  Jakub Jelinek  <jakub@redhat.com>
    
            PR fortran/88463
            * trans-openmp.c (gfc_omp_predetermined_sharing): Handle TREE_READONLY
            VAR_DECLs with DECL_EXTERNAL like those with TREE_STATIC.
    
            * testsuite/libgomp.fortran/pr88463-1.f90: New test.
            * testsuite/libgomp.fortran/pr88463-2.f90: New test.
    
    From-SVN: r267704

commit 2eba8539c0ff23b65022bacfe7dd4705eec23213
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Jan 8 11:17:32 2019 +0100

    backport: re PR sanitizer/88426 (Compiler crash if use special code with command line switch -fsanitize=float-cast-overflow)
    
            Backported from mainline
            2018-12-11  Jakub Jelinek  <jakub@redhat.com>
    
            PR sanitizer/88426
            * c-convert.c (convert): Call c_fully_fold before calling
            ubsan_instrument_float_cast.
    
            * c-c++-common/ubsan/float-cast-overflow-11.c: New test.
    
    From-SVN: r267703

commit 88e55d1ab17b05d74ada960fb2fd5a2b9699cb5d
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Jan 8 11:16:00 2019 +0100

    backport: re PR c++/86669 (Complete object constructor clone omits length for a c++11 braced initialiser)
    
            Backported from mainline
            2018-12-07  Jakub Jelinek  <jakub@redhat.com>
    
            PR c++/86669
            * call.c (make_temporary_var_for_ref_to_temp): Call pushdecl even for
            automatic vars.
    
            * g++.dg/cpp0x/initlist105.C: New test.
            * g++.dg/cpp0x/initlist106.C: New test.
            * g++.dg/other/pr86669.C: New test.
    
    From-SVN: r267702

commit 3af6e3e07bbf8977838421517acbd66002bf36c6
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Jan 8 11:14:12 2019 +0100

    backport: re PR target/85593 (GCC on ARM allocates R3 for local variable when calling naked function with O2 optimizations enabled)
    
            Backported from mainline
            2018-12-07  Jakub Jelinek  <jakub@redhat.com>
    
            PR target/85593
            * final.c (rest_of_handle_final): Don't call collect_fn_hard_reg_usage
            for functions with naked attribute.
    
            * gcc.target/i386/pr85593.c: New test.
    
    From-SVN: r267701

commit 71366bd6763c4d90bf0c5d9241e712b056275984
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Jan 8 11:13:07 2019 +0100

    backport: re PR fortran/88377 (ICE in gfc_omp_clause_copy_ctor, at fortran/trans-openmp.c:614)
    
            Backported from mainline
            2018-12-07  Jakub Jelinek  <jakub@redhat.com>
    
            PR fortran/88377
            * trans-openmp.c (gfc_omp_clause_default_ctor,
            gfc_omp_clause_copy_ctor, gfc_omp_clause_assign_op,
            gfc_omp_clause_linear_ctor, gfc_omp_clause_dtor): Only consider
            GFC_DECL_GET_SCALAR_ALLOCATABLE vars as scalar allocatables if they
            have pointer type.
    
            * gfortran.dg/gomp/pr88377.f90: New test.
    
    From-SVN: r267700

commit 1692b1492c3e0a1de11f0b5f9f1630f4722f1f48
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Jan 8 11:12:22 2019 +0100

    backport: re PR c++/87506 (ICE with inherited constexpr constructor with const argument)
    
            Backported from mainline
            2018-12-07  Jakub Jelinek  <jakub@redhat.com>
    
            PR c++/87506
            * constexpr.c (adjust_temp_type): Handle EMPTY_CLASS_EXPR.
    
            * g++.dg/cpp0x/constexpr-87506.C: New test.
    
    From-SVN: r267699

commit 3c968bdf2da3fb1e3c91d76df37a4602486362e0
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Jan 8 11:11:29 2019 +0100

    backport: re PR target/87598 (Rejects "%a0" with constant)
    
            Backported from mainline
            2018-12-06  Jakub Jelinek  <jakub@redhat.com>
    
            PR target/87598
            * config/aarch64/aarch64.c (aarch64_print_address_internal): Don't
            call output_operand_lossage on VOIDmode CONST_INTs.  After
            output_operand_lossage do return false.
    
            * gcc.target/aarch64/asm-5.c: New test.
    
    From-SVN: r267698

commit 44507df48b3370a853ee23b72f224ea803735a4a
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Jan 8 11:10:34 2019 +0100

    backport: re PR tree-optimization/87360 (ICE in remove_redundant_iv_tests at gcc/tree-ssa-loop-ivcanon.c:571 since r255467)
    
            Backported from mainline
            2018-12-05  Jakub Jelinek  <jakub@redhat.com>
    
            PR tree-optimization/87360
            * gimple-loop-jam.c (tree_loop_unroll_and_jam): On failure to analyze
            data dependencies, don't return false, just continue.
    
            * g++.dg/opt/pr87360.C: New test.
            * gfortran.dg/pr87360.f90: New test.
    
    From-SVN: r267697

commit 06a40dee6a57b4abde795f389cc2f8e799c88d3c
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Jan 8 11:09:05 2019 +0100

    backport: re PR tree-optimization/87320 (Last iteration of vectorized loop not executed when peeling for gaps)
    
            Backported from mainline
            2018-12-04  Jakub Jelinek  <jakub@redhat.com>
    
            PR tree-optimization/87320
            * gcc.dg/pr87320.c: New test.
    
    From-SVN: r267696

commit 6001aba1132f2b82bb413168f58767c16bc48dcf
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Jan 8 11:06:33 2019 +0100

    backport: re PR c++/88103 (Wrong value category when conditional expression result is used as object expression)
    
            Backported from mainline
            2018-12-04  Jakub Jelinek  <jakub@redhat.com>
    
            PR c++/88103
            * typeck.c (build_class_member_access_expr): If unary_complex_lvalue
            turned xvalue_p into non-xvalue_p, call move on it.
    
            * g++.dg/cpp0x/rv-cond3.C: New test.
    
    From-SVN: r267695

commit 8c015fb0e5c8f727edd459de3b7c1bcdcc3f27b2
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Jan 8 11:05:20 2019 +0100

    backport: re PR tree-optimization/71109 (gcc ICE at -O3 on valid code on x86_64-linux-gnu in "maybe_record_trace_start")
    
            Backported from mainline
            2018-12-03  Jakub Jelinek  <jakub@redhat.com>
    
            PR tree-optimization/71109
            * gcc.c-torture/compile/pr71109.c: New test.
    
    From-SVN: r267694

commit 905e0e23dcf97aef19b6deeb05f888143bd69bc6
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Jan 8 11:04:51 2019 +0100

    backport: re PR debug/85550 (-fdebug-types-section broken with DW_OP_addr in DW_AT_location)
    
            Backported from mainline
            2018-11-30  Jakub Jelinek  <jakub@redhat.com>
    
            PR debug/85550
            * g++.dg/debug/dwarf2/pr85550.C: New test.
    
    From-SVN: r267693

commit c86bcc4785961350f67f88eedf3e2bfe39ba0750
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Jan 8 11:03:34 2019 +0100

    backport: re PR target/88234 (UBsan and runtime error: signed integer overflow using unsigned vector)
    
            Backported from mainline
            2018-11-29  Jakub Jelinek  <jakub@redhat.com>
    
            PR target/88234
            * config/rs6000/rs6000.c (rs6000_gimple_fold_builtin): For
            vec_add and vec_sub builtins, perform PLUS_EXPR or MINUS_EXPR
            in unsigned_type_for instead of vector integral type where overflow
            doesn't wrap.
    
            * gcc.dg/ubsan/pr88234.c: New test.
    
    From-SVN: r267692

commit 7ad519cc463981c639958cf60a0a618ea430addb
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Jan 8 11:00:42 2019 +0100

    backport: re PR c++/87539 (internal compiler error when compiling project with Os optimization flag)
    
            Backported from mainline
            2018-11-29  Jakub Jelinek  <jakub@redhat.com>
    
            PR c++/87539
            * g++.dg/cpp0x/pr87539.C: New test.
    
    From-SVN: r267691

commit ead5cf30b849c7b2671b384aa6fcc0ba3feddde5
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Jan 8 10:59:34 2019 +0100

    backport: re PR sanitizer/88215 (UBSAN: Internal compiler error with attribute(unused))
    
            Backported from mainline
            2018-11-28  Jakub Jelinek  <jakub@redhat.com>
    
            PR c++/88215
            * c-ubsan.c: Include langhooks.h.
            (ubsan_instrument_division): Change gcc_assert that main variants
            of op0 and op1 types are equal to gcc_checking_assert that the
            main variants are compatible types.
    
            * c-c++-common/ubsan/pr88215.c: New test.
    
    From-SVN: r267690

commit 7fe9e5be6f04e299573a0d783473d37392245019
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Jan 8 10:58:48 2019 +0100

    backport: re PR c++/88181 (ICE: verify_type failed (error: type variant differs by TYPE_PACKED))
    
            Backported from mainline
            2018-11-27  Jakub Jelinek  <jakub@redhat.com>
    
            PR c++/88181
            * class.c (fixup_attribute_variants): Also propagate TYPE_PACKED
            to variants.
    
            * g++.dg/debug/pr88181.C: New test.
    
    From-SVN: r267689

commit e5023ab27e356ae3c753b0281b36cba983c4831d
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Jan 8 10:58:04 2019 +0100

    backport: re PR c++/86900 (-gdwarf-5 -O2 -ffunction-sections = assembler error)
    
            Backported from mainline
            2018-11-26  Jakub Jelinek  <jakub@redhat.com>
    
            PR c++/86900
            * dwarf2out.c (secname_for_decl): For functions with
            DECL_SECTION_NAME if in_cold_section_p, try to return
            current_function_section's name if it is a named section.
    
            * g++.dg/debug/dwarf2/pr86900.C: New test.
    
    From-SVN: r267688

commit 481576b470fc3173b2ad5c53ec439fc32ec5e80d
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Jan 8 10:57:10 2019 +0100

    backport: re PR tree-optimization/85794 ([AArch64] ICE in expand_vector_condition in GIMPLE pass: veclower2)
    
            Backported from mainline
            2018-11-22  Jakub Jelinek  <jakub@redhat.com>
    
            PR tree-optimization/85794
            * gcc.dg/vect/O3-pr85794.c: New test.
    
    From-SVN: r267687

commit fc738f235401aa955a1a569a83152c6c3678352d
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Jan 8 10:56:36 2019 +0100

    backport: re PR target/85644 (-fstack-protector generates invalid read to %fs:0x0 on mac)
    
            Backported from mainline
            2018-11-22  Jakub Jelinek  <jakub@redhat.com>
    
            PR target/85644
            PR target/86832
            * config/i386/i386.c (ix86_option_override_internal): Default
            ix86_stack_protector_guard to SSP_TLS only if TARGET_THREAD_SSP_OFFSET
            is defined.
            * config/i386/i386.md (stack_protect_set, stack_protect_set_<mode>,
            stack_protect_test, stack_protect_test_<mode>): Use empty condition
            instead of TARGET_SSP_TLS_GUARD.
    
    From-SVN: r267686

commit e5738716f0dc0908fd376b27c2670d240071e39c
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Jan 8 10:55:26 2019 +0100

    backport: re PR c++/88122 (g++ ICE: internal compiler error: Segmentation fault)
    
            Backported from mainline
            2018-11-21  Jakub Jelinek  <jakub@redhat.com>
    
            PR c++/88122
            * method.c (maybe_explain_implicit_delete): If
            FUNCTION_FIRST_USER_PARMTYPE (decl) is NULL, set const_p to false
            instead of ICEing.
    
            * g++.dg/cpp0x/implicit15.C: New test.
    
    From-SVN: r267685

commit 27b3c807841862087ce7f950f78cff84d3f35bd3
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Jan 8 10:54:36 2019 +0100

    backport: re PR tree-optimization/87895 (ICE in purge_dead_edges, at cfgrtl.c:3246)
    
            Backported from mainline
            2018-11-20  Jakub Jelinek  <jakub@redhat.com>
    
            PR tree-optimization/87895
            * omp-simd-clone.c (ipa_simd_modify_function_body): When removing
            or replacing GIMPLE_RETURN, set EDGE_FALLTHRU on the edge to EXIT.
            (simd_clone_adjust): Don't set EDGE_FALLTHRU here. In a loop that
            redirects edges to EXIT to edges to incr_bb, iterate while EXIT
            has any preds and always use EDGE_PRED (, 0).
    
            * gcc.dg/gomp/pr87895-1.c: New test.
            * gcc.dg/gomp/pr87895-2.c: New test.
            * gcc.dg/gomp/pr87895-3.c: New test.
    
    From-SVN: r267684

commit b931378096350f24d35ffa742a9c108a00ce7a6d
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Jan 8 10:53:35 2019 +0100

    backport: re PR tree-optimization/88071 (ICE: verify_gimple failed (error: dead STMT in EH table))
    
            Backported from mainline
            2018-11-19  Jakub Jelinek  <jakub@redhat.com>
    
            PR tree-optimization/88071
            * tree-vect-loop.c (vectorize_fold_left_reduction): Pass true instead
            of false as last argument to gsi_remove.
            * tree-vect-stmts.c (vect_finish_replace_stmt): Pass true instead of
            false as last argument to gsi_replace.
    
            * gcc.dg/pr88071.c: New test.
    
    From-SVN: r267682

commit eb9d9904a4db8e73a3f7e0d0fafb951e1f99e823
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Jan 8 10:52:44 2019 +0100

    backport: re PR c++/60994 (gcc does not recognize hidden/shadowed enumeration as valid nested-name-specifier)
    
            Backported from mainline
            2018-11-19  Jakub Jelinek  <jakub@redhat.com>
    
            PR c++/60994
            * g++.dg/lookup/pr60994.C: New test.
    
    From-SVN: r267681

commit 24c581ed210e48f00853e28accc8e3843dc03ae4
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Jan 8 10:51:19 2019 +0100

    backport: re PR debug/87039 (DW_OP_fbreg used without a frame base on a C++ code w/ -fopenmp)
    
            Backported from mainline
            2018-11-19  Jakub Jelinek  <jakub@redhat.com>
    
            PR debug/87039
            * omp-expand.c: Don't include debug.h.
            (adjust_context_and_scope): Add REGION argument.  Find DECL_CONTEXT
            from innermost outer parallel, task, or target that has a
            child_fn set, or, if there is no such outer region, use
            current_function_decl.  Do the DECL_CONTEXT adjustment regardless of
            whether a suitable BLOCK is found or not.
            (expand_parallel_call): Don't call adjust_context_and_scope here.
            (grid_expand_target_grid_body): Revert 2017-01-25 changes.
            (expand_omp_taskreg, expand_omp_target): Likewise.  Call
            adjust_context_and_scope.
            * dwarf2out.c (dwarf2out_early_global_decl): For
            decl_function_context recurse instead of calling dwarf2out_decl.
    
            * g++.dg/gomp/pr78363-4.C: New test.
            * g++.dg/gomp/pr78363-5.C: New test.
            * g++.dg/gomp/pr78363-6.C: New test.
            * g++.dg/gomp/pr78363-7.C: New test.
    
    From-SVN: r267679

commit b9c973554fce3cfbee1f02c880c85b91644a4548
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Jan 8 10:50:21 2019 +0100

    backport: re PR rtl-optimization/87475 (ICE in patch_jump_insn, at cfgrtl.c:1275)
    
            Backported from mainline
            2018-11-16  Jakub Jelinek  <jakub@redhat.com>
    
            PR rtl-optimization/87475
            * cfgrtl.c (patch_jump_insn): Allow redirection failure for
            CROSSING_JUMP_P insns.
            (cfg_layout_redirect_edge_and_branch): Don't ICE if ret is NULL.
    
            * g++.dg/opt/pr87475.C: New test.
    
    From-SVN: r267678

commit 38f437877eed5d31ac93bf1feb7bbcc296302433
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Jan 8 10:48:47 2019 +0100

    backport: re PR rtl-optimization/88018 (ICE in insert_insn_on_edge at cfgrtl.c:1952 since r255066)
    
            Backported from mainline
            2018-11-15  Jakub Jelinek  <jakub@redhat.com>
    
            PR rtl-optimization/88018
            * cfgrtl.c (fixup_abnormal_edges): Guard moving insns to fallthru edge
            on the presence of fallthru edge, rather than if it is a USE or not.
    
            * g++.dg/tsan/pr88018.C: New test.
    
    From-SVN: r267677

commit 7651470b57f4813b10444f6a7728c2f0d55b5b68
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Jan 8 10:47:03 2019 +0100

    backport: re PR tree-optimization/87898 (ICE in separate_decls_in_region_debug, at tree-parloops.c:961)
    
            Backported from mainline
            2018-11-13  Jakub Jelinek  <jakub@redhat.com>
    
            PR tree-optimization/87898
            * omp-simd-clone.c (ipa_simd_modify_function_body): Remove debug stmts
            where the first argument was changed into a non-decl.
    
            * gcc.dg/gomp/pr87898.c: New test.
    
    From-SVN: r267676

commit 17b1a136a16f183e1485626d040fb36bb90fee0b
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Jan 8 00:16:36 2019 +0000

    Daily bump.
    
    From-SVN: r267669

commit 0fbdb8ce84724ba30ead2ac4a308e17acab4fc3e
Author: Joseph Myers <joseph@codesourcery.com>
Date:   Mon Jan 7 22:33:18 2019 +0000

    * es.po: Update.
    
    From-SVN: r267664

commit 3b2fc25285cd39af39046214e7e43d68664f085b
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Jan 7 00:16:22 2019 +0000

    Daily bump.
    
    From-SVN: r267618

commit 559ad1e624bdc2603024da33d88dbb8437553458
Author: Jan Hubicka <hubicka@ucw.cz>
Date:   Sun Jan 6 21:11:15 2019 +0100

    backport: re PR lto/88130 (ICE in copy_function_or_variable, at lto-streamer-out.c:2315 since r260963)
    
    
            Backport from mainline
            2019-01-02  Jan Hubicka  <hubicka@ucw.cz>
    
            PR lto/88130
            * varpool.c (varpool_node::ctor_useable_for_folding_p): Also return
            false at WPA time when body was removed.
    
    From-SVN: r267613

commit 700efa31a80bebd6843ef92ecea4c23dff2eb252
Author: Jan Hubicka <hubicka@ucw.cz>
Date:   Sun Jan 6 16:51:45 2019 +0100

    re PR lto/86517 (relocation R_X86_64_32 against `.rodata.str1.1' can not be used when making a shared object with LTO)
    
    
            PR lto/86517
            PR lto/88185
            * lto-opts.c (lto_write_options): Always stream PIC/PIE mode.
            * lto-wrapper.c (merge_and_complain): Fix merging of PIC/PIE.
    
    From-SVN: r267610

commit 4ce8047468f798e92ed79e900a2d9ced2a7032c5
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Jan 6 00:16:32 2019 +0000

    Daily bump.
    
    From-SVN: r267605

commit 9aeb4d7cd0a87f14b1b988c9e500dc1b3580db84
Author: Dominique d'Humieres <dominiq@gcc.gnu.org>
Date:   Sat Jan 5 12:17:40 2019 +0100

    re PR target/60563 (FAIL: g++.dg/ext/sync-4.C on *-apple-darwin*)
    
    2019-01-05  Dominique d'Humieres  <dominiq@gcc.gnu.org>
    
            PR target/60563
            * g++.dg/ext/sync-4.C: Add dg-xfail-run-if for darwin.
    
    From-SVN: r267596

commit 193d1bbb3c53b8135535ea524cccfa707a6215b2
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Jan 5 00:16:24 2019 +0000

    Daily bump.
    
    From-SVN: r267587

commit 8ee925ab73f0db22ac82804e201f11b71d11de4f
Author: Aaron Sawdey <acsawdey@linux.ibm.com>
Date:   Fri Jan 4 16:37:08 2019 +0000

    backport: rs6000-string.c (expand_block_clear): Change how we determine if unaligned vsx is ok.
    
    2019-01-04  Aaron Sawdey  <acsawdey@linux.ibm.com>
            Backport from mainline
            2018-11-28  Aaron Sawdey  <acsawdey@linux.ibm.com>
    
            * config/rs6000/rs6000-string.c (expand_block_clear): Change how
            we determine if unaligned vsx is ok.
    
    From-SVN: r267580

commit 9f0fbb3b1c57c1b4068931094365a8a899943231
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Jan 4 00:16:28 2019 +0000

    Daily bump.
    
    From-SVN: r267567

commit 61add062d8d879e9f5364031f8ebc03504dbe35e
Author: Jan Hubicka <hubicka@ucw.cz>
Date:   Thu Jan 3 16:43:37 2019 +0100

    ipa-utils.c (scale_ipa_profile_for_fn): Break out from ...
    
    
            * ipa-utils.c (scale_ipa_profile_for_fn): Break out from ...
            (ipa_merge_profiles): ... here; do not ICE on thunks and aliases.
    
    From-SVN: r267560

commit 0ea5c6ae4491f2d8f2407c6b520b7264cb90244c
Author: Martin Liska <mliska@suse.cz>
Date:   Thu Jan 3 09:49:04 2019 +0100

    Backport r267507
    
    2019-01-03  Martin Liska  <mliska@suse.cz>
    
            Backport from mainline
            2019-01-02  Jakub Jelinek  <jakub@redhat.com>
    
            PR ipa/88561
            * g++.dg/tree-prof/devirt.C: Expect _ZThn16 only for lp64 and llp64
            targets and expect _ZThn8 for ilp32 targets.
    
    From-SVN: r267546

commit 15f85f2b402a605e52d5cf98782cb264778365d0
Author: Martin Liska <mliska@suse.cz>
Date:   Thu Jan 3 09:48:45 2019 +0100

    Backport r267495
    
    2019-01-03  Martin Liska  <mliska@suse.cz>
    
            Backport from mainline
            2019-01-01  Jan Hubicka  <hubicka@ucw.cz>
    
            * coverage.c (get_coverage_counts): Use current_function_decl.
            * profile.c (read_thunk_profile): New function.
            (branch_prob): Add THUNK parameter.
            * tree-profile.c (tree_profiling): Handle thunks.
            * value-prof.c (init_node_map): Handle thunks.
            * value-prof.h (branch_prob): Upate prototype.
            (read_thunk_profile): Declare.
    2019-01-03  Martin Liska  <mliska@suse.cz>
    
            Backport from mainline
            2019-01-01  Jan Hubicka  <hubicka@ucw.cz>
    
            * g++.dg/tree-prof/devirt.C: Update testcase.
    
    From-SVN: r267545

commit 851560785ac88ebbe81303d52ccb88cd5a9a1f01
Author: Martin Liska <mliska@suse.cz>
Date:   Thu Jan 3 09:48:24 2019 +0100

    Backport r267486
    
    2019-01-03  Martin Liska  <mliska@suse.cz>
    
            Backport from mainline
            2018-12-31  Martin Liska  <mliska@suse.cz>
    
            * g++.dg/tree-prof/devirt.C: Fix scan pattern and test options.
    
    From-SVN: r267544

commit 10c66a1de2b804a25ee073865dbcc19184f91a18
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Thu Jan 3 08:45:35 2019 +0000

    revert fix for pr88343
    
    This causes problems for soft-f on GLIBC, see pr comment 11.
    
    2019-01-03  Iain Sandoe  <iain@sandoe.co.uk>
    
            revert:
            2018-12-23  Iain Sandoe  <iain@sandoe.co.uk>
    
            backport from mainline.
            2018-12-12 Segher Boessenkool  <segher@kernel.crashing.org>
                       Iain Sandoe  <iain@sandoe.co.uk>
    
            PR target/88343
            * config/rs6000/rs6000.c (save_reg_p): Do not save the picbase reg
            unless it has been used.
            (first_reg_to_save): Remove dead code.
    
    From-SVN: r267543

commit 8887fa72eb56aa4783492cf06577c2b3e72f8e11
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Jan 3 00:16:40 2019 +0000

    Daily bump.
    
    From-SVN: r267539

commit dcf3f2fb516e8d417169e9d2c3edbe26fd881440
Author: Segher Boessenkool <segher@kernel.crashing.org>
Date:   Wed Jan 2 23:34:36 2019 +0100

    Backport of the "asm inline" patches
    
    From-SVN: r267534

commit d0ab08db468c6ad25d067080420b7d1f74f571ed
Author: Joseph Myers <joseph@codesourcery.com>
Date:   Wed Jan 2 18:39:32 2019 +0000

    * es.po: Update.
    
    From-SVN: r267522

commit 31f03de180a08375644180306a60441f621ed99e
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Jan 2 00:16:16 2019 +0000

    Daily bump.
    
    From-SVN: r267501

commit 4ef4d2c4269f5346e3d4bd21fae70e0329cfad3a
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Jan 1 00:16:11 2019 +0000

    Daily bump.
    
    From-SVN: r267490

commit 14dd2a71bc303f049a9be361fd979bfcb4811f4b
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Dec 31 00:16:08 2018 +0000

    Daily bump.
    
    From-SVN: r267480

commit 62c086f20ba1c4b4082f240a3b947d3114c4e19c
Author: Dominique d'Humieres <dominiq@gcc.gnu.org>
Date:   Sun Dec 30 11:57:22 2018 +0100

    key2.C: Silence the [-Wreturn-type] warning.
    
    2018-12-30  Dominique d'Humieres  <dominiq@gcc.gnu.org>
    
            * g++.dg/abi/key2.C: Silence the [-Wreturn-type] warning.
    
    From-SVN: r267475

commit 3b1e3dc3fcd9b159f7d9586dc3302f30eb6ac73e
Author: Dominique d'Humieres <dominiq@gcc.gnu.org>
Date:   Sun Dec 30 11:51:49 2018 +0100

    re PR tree-optimization/68356 (FAIL: gcc.dg/torture/pr68264.c   -O*  execution test on x86_64-apple-darwin1(0|4))
    
    2018-12-30  Dominique d'Humieres  <dominiq@gcc.gnu.org>
    
            PR tree-optimization/68356
            PR target/81210
            PR target/81693
            * gcc.dg/torture/pr68264.c: Skip on darwin.
            * gcc.dg/torture/pr68037-1.c: Likewise.
            * gcc.dg/torture/pr68037-2.c: Likewise.
            * gcc.dg/torture/pr68037-3.c: Likewise.
            * gcc.dg/torture/pr25967-1.c: Likewise.
            * gcc.dg/torture/pr25967-2.c: Likewise.
    
    From-SVN: r267474

commit 4cf4a4837e20a4db936f2f2df99c429e469bfc17
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Dec 30 00:16:12 2018 +0000

    Daily bump.
    
    From-SVN: r267472

commit a69fc612bd4e0d003569fb1a236b08f5a7c350ec
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Dec 29 00:16:22 2018 +0000

    Daily bump.
    
    From-SVN: r267459

commit 175591aace050f0146bcae4c94138fcc9f001780
Author: Thomas Schwinge <thomas@codesourcery.com>
Date:   Fri Dec 28 12:35:40 2018 +0100

    poly_int: get_inner_reference & co.: fix known_eq typo/bug
    
            gcc/
            * gimplify.c (gimplify_scan_omp_clauses): Fix known_eq typo/bug.
    
    trunk r267447
    
    Co-Authored-By: Julian Brown <julian@codesourcery.com>
    
    From-SVN: r267449

commit b0bdd9188f03069817e70ca035e8aa9bc501eaab
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Dec 28 00:16:08 2018 +0000

    Daily bump.
    
    From-SVN: r267440

commit 345622102ce2b6533e27e0759903fca7606b4dd3
Author: Martin Liska <mliska@suse.cz>
Date:   Thu Dec 27 13:33:00 2018 +0100

    Backport r267338
    
    2018-12-27  Martin Liska  <mliska@suse.cz>
    
            Backport from mainline
            2018-12-15  Jan Hubicka  <hubicka@ucw.cz>
    
            PR ipa/88561
            * ipa-polymorphic-call.c
            (ipa_polymorphic_call_context::ipa_polymorphic_call_context): Handle
            arguments of thunks correctly.
            (ipa_polymorphic_call_context::get_dynamic_context): Be ready for
            NULL instance pinter.
            * lto-cgraph.c (lto_output_node): Always stream thunk info.
    2018-12-27  Martin Liska  <mliska@suse.cz>
    
            Backport from mainline
            2018-12-15  Jan Hubicka  <hubicka@ucw.cz>
    
            PR ipa/88561
            * g++.dg/tree-prof/devirt.C: New testcase.
    
    From-SVN: r267433

commit 7200a801f1e02612ab8f8fc2aeba19de627ae6c0
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Dec 27 00:16:29 2018 +0000

    Daily bump.
    
    From-SVN: r267425

commit 6a222bc6037b4574be05bb9ee5d2db0b7e8dd361
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Dec 26 00:16:15 2018 +0000

    Daily bump.
    
    From-SVN: r267420

commit 666b2c6a7647e836b273e26ea463c58a07db0035
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Dec 25 00:16:31 2018 +0000

    Daily bump.
    
    From-SVN: r267417

commit 31e558b22c9a1582eb14da1cd8a9d619c79cfc74
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Mon Dec 24 09:16:25 2018 +0000

    Fix PR67974 for Darwin by adding an asm shim for AVX.
    
    The PR is about a set of tests that were not executed because of
    missing asm support.
    
    However, the assembler can handle the insns now, so the tests are
    attempted (but with a missing asm shim they fail).
    
    This adds the shim.
    
    In principle (bugs notwithstanding) Darwin’s x86_64 ABI is supposed
    to follow the sysv psABI so we can have essentially a copy of the
    Linux one.
    
    2018-12-24  Iain Sandoe  <iain@sandoe.co.uk>
    
            PR testsuite/67974
            * gcc.target/x86_64/abi/avx/asm-support-darwin.s: New.
    
    From-SVN: r267396

commit 78edbb16cda5b0912abfec22c6ce73f36eb754a0
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Dec 24 00:16:16 2018 +0000

    Daily bump.
    
    From-SVN: r267390

commit 0f8fd4e3c97b773f23cedc20f965c67a1fdfc27f
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Sun Dec 23 21:23:57 2018 +0000

    Fix Ada bootstrap for Darwin9 and earlier.
    
    2018-12-23  Iain Sandoe  <iain@sandoe.co.uk>
    
    gcc/ada/
    
            * adaint.c [__APPLE__] (__gnat_lwp_self): Ensure that the system
            interface used is available on the target.
    
    From-SVN: r267388

commit a9b11b0d10b037863e8f55ae86d6de8702817b51
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Sun Dec 23 21:17:46 2018 +0000

    fix PR target/88343 by backporting r267049
    
    The PR is about unnecessary saves of the pic base
    register, it shows on m32 Linux and m32/m64 Darwin.
    
    2018-12-23  Iain Sandoe  <iain@sandoe.co.uk>
    
            backport from mainline.
            2018-12-12 Segher Boessenkool  <segher@kernel.crashing.org>
                       Iain Sandoe  <iain@sandoe.co.uk>
    
            PR target/88343
            * config/rs6000/rs6000.c (save_reg_p): Do not save the picbase reg
            unless it has been used.
            (first_reg_to_save): Remove dead code.
    
    From-SVN: r267387

commit e2c3fb2a03af2c60c198ce47563b1a8327e14352
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Sun Dec 23 20:55:39 2018 +0000

    darwin, fix c++/87380 by backproting r266866.
    
    This was [intentionally] broken C++ ABI, that was catering for a
    tool problem that existed in a very old Darwin toolchain.
    
    It's no longer needed.
    
    2018-12-23  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline
            2018-12-06  Iain Sandoe  <iain@sandoe.co.uk>
    
            PR c++/87380
            * config/darwin.h (TARGET_WEAK_NOT_IN_ARCHIVE_TOC) Remove, use the
            default.
            * config/rs6000/darwin7.h (TARGET_WEAK_NOT_IN_ARCHIVE_TOC): New.
    
    From-SVN: r267386

commit 71581ff0bc5387c3bebeb7f7a6b99ecc49f6a0ed
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Sun Dec 23 20:44:29 2018 +0000

    darwin, libstdc++, don't try to export construction vtable symbols.
    
    The symbols are marked hidden in the objects; for Darwin that makes
    them also external (“private_extern” is Darwin’s hidden) which means
    that they show up in the list of possible symbols for export from
    libstdc++, and there are sufficiently relaxed match conditions that
    they reach the exports list.   When Darwin’s static linker encounters
    them it generates a warning that they cannot be exported.  This patch
    prunes them from the list of symbols to be considered, thus eliminating
    the warnings.
    
    2018-12-23  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline
            2018-12-06  Iain Sandoe  <iain@sandoe.co.uk>
    
            * scripts/make_exports.pl (check names): Don’t try to export
            construction vtable symbols.
    
    From-SVN: r267385

commit fac22391c2a102702f539c828374c4ece48c17ab
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Sun Dec 23 20:34:13 2018 +0000

    backport r266853 to fix PR target/78444.
    
    2018-12-23  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline
            2018-12-06  Iain Sandoe  <iain@sandoe.co.uk>
    
            PR target/78444
            * config/i386/darwin.h (STACK_BOUNDARY): Remove macro.
            * config/i386/i386.c (ix86_compute_frame_layout): Ensure at least 128b
            stack alignment in non-leaf functions.
    
    From-SVN: r267384

commit 3b6e3d87f6d4db9462ed5553f84219d791ed0383
Author: Paul Thomas <pault@gcc.gnu.org>
Date:   Sun Dec 23 18:35:50 2018 +0000

    re PR fortran/77703 (ICE on assignment to pointer function)
    
    2018-12-23  Paul Thomas  <pault@gcc.gnu.org>
    
            PR fortran/77703
            * resolve.c (get_temp_from_expr): Use the string length of
            constant character expressions.
    
    2018-12-23  Paul Thomas  <pault@gcc.gnu.org>
    
            PR fortran/77703
            * gfortran.dg/ptr_func_assign_5.f08 : New test.
    
    From-SVN: r267382

commit 6e5c3b82368b0207819ad21b743e19f78b71dc8e
Author: Paul Thomas <pault@gcc.gnu.org>
Date:   Sun Dec 23 09:33:43 2018 +0000

    backport: re PR fortran/77325 (ICE in gimplify_var_or_parm_decl, at gimplify.c:1933)
    
    2018-12-23  Paul Thomas  <pault@gcc.gnu.org>
    
            Backport from trunk
            PR fortran/77325
            * trans-array.c (gfc_alloc_allocatable_for_assignment): If the
            rhs has a charlen expression, convert that and use it.
            * trans-expr.c (gfc_trans_assignment_1): The rse.pre for the
            assignment of deferred character array vars to a realocatable
            lhs should not be added to the exterior block since vector
            indices, for example, generate temporaries indexed within the
            loop.
    
    2018-12-23  Paul Thomas  <pault@gcc.gnu.org>
    
            Backport from trunk
            PR fortran/77325
            * gfortran.dg/deferred_character_22.f90 : New test.
    
    From-SVN: r267368

commit c4005f30c3f0118626e941b0215e405873216467
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Dec 23 00:16:18 2018 +0000

    Daily bump.
    
    From-SVN: r267365

commit 38f6326177e0f5c52b9ed285517e57b02733af43
Author: Steven G. Kargl <kargl@gcc.gnu.org>
Date:   Sat Dec 22 19:54:18 2018 +0000

    re PR fortran/85798 (ICE in get_array_index, at fortran/data.c:69)
    
    2018-12-22  Steven G . Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/85798
            * decl.c (gfc_match_data): If a component of a derived type entity
            appears in data statement, check that does not have the allocatable
            attribute.
    
    2018-12-22  Steven G . Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/85798
            * gfortran.dg/pr85798.f90: New test.
    
    From-SVN: r267357

commit 803458db9dc73e5a080ef2f5824fe6118c2cee27
Author: Thomas Koenig <tkoenig@gcc.gnu.org>
Date:   Sat Dec 22 19:19:14 2018 +0000

    backport: re PR fortran/85544 (ICE in gfc_conv_scalarized_array_ref, at fortran/trans-array.c:3385)
    
    2018-12-22  Thomas Koenig  <tkoenig@gcc.gnu.org>
    
            Backport from trunk
            PR fortran/85544
            * frontend-passes.c (optimize_power): Remove.
            (optimize_op): Remove call to optimize_power.
            * trans-expr.c (gfc_conv_power_op): Handle cases of 1**integer,
            (2|4|8|16) ** integer and (-1) ** integer.
    
    2018-12-22  Thomas Koenig  <tkoenig@gcc.gnu.org>
    
            Backport from trunk
            PR fortran/85544
            * gfortran.dg/power_7.f90: New test.
    
    From-SVN: r267355

commit b198616b053e0157936379b7df961b0a57539037
Author: Steven G. Kargl <kargl@gcc.gnu.org>
Date:   Sat Dec 22 17:53:00 2018 +0000

    re PR fortran/88169 (Rejects USE rename of namelist group)
    
    2018-12-21  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/88169
            * module.c (mio_namelist): Remove an error condition/message that
            is contrary to the Fortran standard.
    
    2018-12-21  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/88169
            * gfortran.dg/pr88169_1.f90: new test.
            * gfortran.dg/pr88169_2.f90: Ditto.
            * gfortran.dg/pr88169_3.f90: Ditto.
    
    From-SVN: r267353

commit 0d220d7b636a0b9e9e994395985a29209e7410d7
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Sat Dec 22 17:50:45 2018 +0000

    Backport fix for PR libstdc++/64883.
    
            Backport from mainline
            2018-12-06  Jonathan Wakely  <jwakely@redhat.com>
                        Iain Sandoe  <iain@sandoe.co.uk>
    
            PR libstdc++/64883
            * testsuite/17_intro/headers/c++1998/all_attributes.cc: Don't test
            always_inline on Darwin.
            * testsuite/17_intro/headers/c++2011/all_attributes.cc: Likewise.
            * testsuite/17_intro/headers/c++2014/all_attributes.cc: Likewise.
            * testsuite/17_intro/headers/c++2017/all_attributes.cc: Likewise.
            * testsuite/17_intro/headers/c++2020/all_attributes.cc: Likewise.
    
    From-SVN: r267352

commit f2faf9617356a7d938abab9ca0302b7a53449412
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Sat Dec 22 16:18:44 2018 +0000

    backport r263585, to skip tests with pthread_barrier on Darwin.
    
    
            Backport from mainline
            2018-08-16  Iain Sandoe <iain@sandoe.co.uk>
    
            * c-c++-common/asan/pointer-subtract-3.c: Skip for Darwin.
            * c-c++-common/asan/pointer-subtract-4.c: Likewise.
            * g++.dg/torture/pr44295.C : Likewise.
    
    From-SVN: r267350

commit e6199951390c33bd8d6a6f1a054516e9cf061e66
Author: Iain Sandoe <iains@gcc.gnu.org>
Date:   Sat Dec 22 16:13:48 2018 +0000

    backport three fixes to the use of _USER_LABEL_PREFIX_
    
            Backport from mainline
            2018-08-22  Iain Sandoe  <iain@sandoe.co.uk>
    
            * gcc.dg/lto/pr85248_0.c (test_alias):
            Stringify __USER_LABEL_PREFIX__.
            (test_noreturn): Likewise.
    
            2018-08-16  Iain Sandoe <iain@sandoe.co.uk>
    
            * gcc.dg/memcmp-1.c (lib_memcmp): Apply __USER_LABEL_PREFIX__.
            (lib_strncmp): Likewise.
    
            2018-08-16  Iain Sandoe  <iain@sandoe.co.uk>
    
            * gcc.dg/asan/pr81923.c: Stringify __USER_LABEL_PREFIX__.
    
    From-SVN: r267349

commit ef80cbbb21d33593ddf5f7a8646fea36700d8e9b
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Dec 22 00:16:25 2018 +0000

    Daily bump.
    
    From-SVN: r267345

commit 31dc21ebe0233e46d92969e4842ee69e4fe8575c
Author: Paul Thomas <pault@gcc.gnu.org>
Date:   Fri Dec 21 20:58:59 2018 +0000

    re PR fortran/87359 (pointer being freed was not allocated)
    
    2018-12-21  Paul Thomas  <pault@gcc.gnu.org>
    
            PR fortran/87359
            * trans-array.c (gfc_is_reallocatable_lhs): Correct the problem
            introduced by r264358, which prevented components of associate
            names from being reallocated on assignment.
    
    
    2018-12-21  Paul Thomas  <pault@gcc.gnu.org>
    
            PR fortran/87359
            * gfortran.dg/associate_40.f90 : New test.
    
    From-SVN: r267342

commit a57db146d33c2e6de28c73ef1c4b9c3e7d916650
Author: Uros Bizjak <uros@gcc.gnu.org>
Date:   Fri Dec 21 19:12:27 2018 +0100

    * gcc.target/i386/pr88418.c (dg-options): Add -mno-avx.
    
    From-SVN: r267333

commit dbd63f6daec09786c249e8360dc03d988f088eed
Author: Uros Bizjak <uros@gcc.gnu.org>
Date:   Fri Dec 21 19:04:35 2018 +0100

    backport: re PR target/88418 (ICE in extract_insn, at recog.c:2305 (error: unrecognizable insn))
    
            Backport from mainline
            2018-12-10  Uros Bizjak  <ubizjak@gmail.com>
    
            PR target/88418
            * config/i386/i386.c (ix86_expand_sse_cmp): For vector modes,
            check operand 1 with vector_operand predicate.
            (ix86_expand_sse_movcc): For vector modes, check op_true with
            vector_operand, not nonimmediate_operand.
    
    testsuite/ChangeLog:
    
            Backport from mainline
            2018-12-10  Uros Bizjak  <ubizjak@gmail.com>
    
            PR target/88418
            * gcc.target/i386/pr88418.c: New test.
    
    From-SVN: r267331

commit cf7a05f5b4ab25d5cd939a367c9e212a9fc7d3c1
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Dec 21 00:16:28 2018 +0000

    Daily bump.
    
    From-SVN: r267316

commit f92023543b8e54dffd6849596cb51be32b46c737
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Dec 20 00:16:39 2018 +0000

    Daily bump.
    
    From-SVN: r267290

commit d0eaa114973f95e2a78fcb2510d23ca91fe0896d
Author: Bill Schmidt <wschmidt@linux.ibm.com>
Date:   Wed Dec 19 18:33:01 2018 +0000

    backport: extend.texi (PowerPC Altivec/VSX Built-in Functions): Describe when a typedef name can be used as the type specifier for a vector type...
    
    2018-12-19  Bill Schmidt  <wschmidt@linux.ibm.com>
    
            Backport from mainline
            2018-12-18  Bill Schmidt  <wschmidt@linux.ibm.com>
    
            * doc/extend.texi (PowerPC Altivec/VSX Built-in Functions):
            Describe when a typedef name can be used as the type specifier for
            a vector type, and when it cannot.
    
    From-SVN: r267283

commit 92d1f82e4a1aa71bca0d5a1576d8645c9678eb4e
Author: Segher Boessenkool <segher@kernel.crashing.org>
Date:   Wed Dec 19 15:02:52 2018 +0100

    backport: re PR target/88213 (ICE in change_address_1, at emit-rtl.c:2286)
    
            Backport from trunk
            2018-12-19  Segher Boessenkool  <segher@kernel.crashing.org>
    
            PR target/88213
            * config/rs6000/vsx.md (*vsx_extract_<P:mode>_<VSX_D:mode>_load):
            Require TARGET_POWERPC64.
    
    From-SVN: r267264

commit 4fb184b2e880342171ac23c5baa2851831714b9e
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Dec 19 00:16:19 2018 +0000

    Daily bump.
    
    From-SVN: r267247

commit dcfdebe9091eebfe3f9de231fb911b86cb2b5184
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Dec 18 00:16:28 2018 +0000

    Daily bump.
    
    From-SVN: r267224

commit 0d200484c5f4f49a4eafb0c0f37f3fb91dbad588
Author: Senthil Kumar Selvaraj <senthilkumar.selvaraj@microchip.com>
Date:   Mon Dec 17 12:07:26 2018 +0000

    backport: re PR rtl-optimization/88253 (Inlining of function incorrectly deletes volatile register access when using XOR in avr-gcc)
    
    2018-12-17  Senthil Kumar Selvaraj  <senthilkumar.selvaraj@microchip.com>
    
            Backport from trunk
            2018-12-17  Senthil Kumar Selvaraj  <senthilkumar.selvaraj@microchip.com>
    
            PR rtl-optimization/88253
            * combine.c (combine_simplify_rtx): Test for side-effects before
            substituting by zero.
    
    2018-12-17  Senthil Kumar Selvaraj  <senthilkumar.selvaraj@microchip.com>
    
            Backport from trunk
            2018-12-17  Senthil Kumar Selvaraj  <senthilkumar.selvaraj@microchip.com>
    
            PR rtl-optimization/88253
            * gcc.target/avr/pr88253.c: New test.
    
    From-SVN: r267199

commit 9075d2e48c0b9c3730d34099b575c173b14949e1
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Dec 17 00:16:46 2018 +0000

    Daily bump.
    
    From-SVN: r267194

commit a2bf1fd756d2da8c9b841f3057a1b90e1d74ac39
Author: Steven G. Kargl <kargl@gcc.gnu.org>
Date:   Sun Dec 16 17:00:33 2018 +0000

    re PR fortran/88116 (ICE in gfc_convert_constant(): Unexpected type)
    
    2018-12-16  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/88116
            PR fortran/88467
            * array.c (gfc_match_array_constructor): Check return value of
            gfc_convert_type().  Skip constructor elements with BT_UNKNOWN,
            which need to go through resolution.
            * intrinsic.c (gfc_convert_type_warn): Return early if the types
            martch (i.e., no conversion is required).
            * simplify.c (gfc_convert_constant): Remove a gfc_internal_error,
            and return gfc_bad_expr.
    
    2018-12-16  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/88116
            * gfortran.dg/pr88116_1.f90: New test.
            * gfortran.dg/pr88116_2.f90: Ditto.
    
            PR fortran/88467
            * gfortran.dg/pr88467.f90: New test.
    
    From-SVN: r267190

commit c9692d48f3e6bb7ab9f4f5bea142010d2df05106
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Dec 16 00:16:11 2018 +0000

    Daily bump.
    
    From-SVN: r267182

commit c0b003d0073b85ec461c737875d0c01eae13a80a
Author: Steven G. Kargl <kargl@gcc.gnu.org>
Date:   Sat Dec 15 23:30:50 2018 +0000

    re PR fortran/88138 (ICE in gfc_arith_concat, at fortran/arith.c:1007)
    
    2018-12-15  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/88138
            * decl.c (variable_decl): Check that a derived isn't being assigned
            an incompatible entity in an initialization.
    
    2018-12-15  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/88138
            * gfortran.dg/pr88138.f90: new test.
    
    From-SVN: r267178

commit 0ca03e489b94fe0e4cfaf08a8ce6daccece3c0b2
Author: Segher Boessenkool <segher@kernel.crashing.org>
Date:   Sat Dec 15 13:05:08 2018 +0100

    backport: re PR rtl-optimization/88001 (ASMCONS cannot handle properly UNSPEC(CONST))
    
            Backport from trunk
            2018-12-14  Segher Boessenkool  <segher@kernel.crashing.org>
    
            PR rtl-optimization/88001
            * function.c (match_asm_constraints_1): Don't invalidly share RTL.
    
    From-SVN: r267171

commit 60e42dfcfc9e2043f40d7b819b1a77c2d382b90f
Author: Jan Hubicka <jh@suse.cz>
Date:   Sat Dec 15 11:30:45 2018 +0100

    ipa.c (cgraph_build_static_cdtor_1): Add OPTIMIZATION and TARGET parameters.
    
    
            * ipa.c (cgraph_build_static_cdtor_1): Add OPTIMIZATION and TARGET
            parameters.
            (cgraph_build_static_cdtor): Update.
            (build_cdtor): Use OPTIMIZATION and TARGET of the first real cdtor
            callsed.
    
    From-SVN: r267167

commit 8ccbc049f8794bbe2f9c363ed8bf37523611bc6c
Author: Jan Hubicka <jh@suse.cz>
Date:   Sat Dec 15 11:29:13 2018 +0100

    backport: dwarf2out.c (build_abbrev_table): Guard lookup_external_ref call with is_type_die.
    
    
            Backport from mainline
            2018-11-02  Richard Biener  <rguenther@suse.de>
    
            * dwarf2out.c (build_abbrev_table): Guard lookup_external_ref call
            with is_type_die.
    
    From-SVN: r267166

commit f47821b7e324a76a61b4a5d9bcbd2f815a408c53
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Dec 15 00:16:16 2018 +0000

    Daily bump.
    
    From-SVN: r267162

commit 19b1f56a656f30273553379ec10c185d047c961b
Author: Kyrylo Tkachov <kyrylo.tkachov@arm.com>
Date:   Fri Dec 14 09:19:06 2018 +0000

    [AArch64][doc] Clarify -msve-vector-bits=128 behaviour
    
            Backport from mainline
            2018-12-13  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>
    
            * doc/invoke.texi (-msve-vector-bits): Clarify -msve-vector-bits=128
            behavior.
    
    From-SVN: r267125

commit a11c27754ca652918f42f9715f7a67a1c4068e92
Author: Andre Vieira <andre.simoesdiasvieira@arm.com>
Date:   Fri Dec 14 09:04:24 2018 +0000

    PR target/88224: Fix FPU configuration of Cortex-R7 and Cortex-R8
    
    gcc/
    2018-12-14  Andre Vieira  <andre.simoesdiasvieira@arm.com>
    
            Backport from mainline
            PR target/88224
            * config/arm/arm-cpus.in (armv7-r): Add FP16conv configurations.
            (cortex-r7, cortex-r8): Update fpu and add new configuration.
            * doc/invoke.texi (armv7-r): Add two new vfp options.
            (nofp.dp): Add cortex-r7 and cortex-r8 to the list of targets that
            support this option.
    
    From-SVN: r267124

commit 1293fdbad471d90edc264c794d5b2c6badffb020
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Dec 14 00:16:40 2018 +0000

    Daily bump.
    
    From-SVN: r267116

commit 98cf89d41a13875e9b0780ab433c7a05c2ae96b2
Author: Peter Bergner <bergner@linux.ibm.com>
Date:   Thu Dec 13 18:07:27 2018 +0000

    backport: target.h (htm_available): Add support for PPC_FEATURE2_HTM_NO_SUSPEND.
    
    libitm/
            Backport from mainline
            2018-12-13  Peter Bergner  <bergner@linux.ibm.com>
    
            * config/powerpc/target.h (htm_available):  Add support for
            PPC_FEATURE2_HTM_NO_SUSPEND.  Use __builtin_cpu_supports if available.
    
    From-SVN: r267102

commit a91409fcde10297abf47b8a6f81626d1c993f954
Author: Nathan Sidwell <nathan@acm.org>
Date:   Thu Dec 13 17:47:52 2018 +0000

    [PR c++/87531] Fix second bug
    
    https://gcc.gnu.org/ml/gcc-patches/2018-12/msg00929.html
            PR c++/87531
            * class.c (finish_struct): Set DECL_CONTEXT of template assign op.
            * name-lookup.c (get_class_binding_direct): Don't strip using-decl
            of overload here.
            * parser.c (cp_parser_postfix_expression): Cope with using decl in
            overload set.
            * semantics.c (finish_id_expr): Likewise.
    
            * g++.dg/lookup/pr87531-2.C: New.
    
    From-SVN: r267099

commit e5d35ca926ad0ef47f7283ed391e86a2c32cef88
Author: H.J. Lu <hongjiu.lu@intel.com>
Date:   Thu Dec 13 14:42:43 2018 +0000

    x86: Fix _mm_cmpgt_epi8 with -funsigned-char
    
            Backport from mainline
            2018-11-05  Xuepeng Guo  <xuepeng.guo@intel.com>
    
            PR target/87853
            * config/i386/emmintrin.h (__v16qs): New to cope with option
            -funsigned-char.
            (_mm_cmpeq_epi8): Replace __v16qi with __v16qs.
            (_mm_cmplt_epi8): Likewise.
            (_mm_cmpgt_epi8): Likewise.
    
    From-SVN: r267095

commit ca4d0adc9eb1f0c94535289541ed762f73fbcc63
Author: Andreas Krebbel <krebbel@linux.ibm.com>
Date:   Thu Dec 13 12:04:46 2018 +0000

    S/390: Fix zvector vec_double builtin
    
    The (unsigned) long int to double vector conversion instructions
    expect 2 immediate parameters. One for the inexact suppression
    control and another one for the rounding mode.  However, the
    vec_double builtin has just the vector source operand.  The 2
    addtional operands need to be added with an intermediate expander.
    The expanders were already there but unfortunately not wired up
    correctly to the builtin.
    
    gcc/ChangeLog:
    
    2018-12-13  Andreas Krebbel  <krebbel@linux.ibm.com>
    
            Backport from mainline
            2018-12-13  Andreas Krebbel  <krebbel@linux.ibm.com>
    
            * config/s390/s390-builtins.def (s390_vec_double_s64): Map to
            s390_vec_double_s64 instead of s390_vcdgb.
            (s390_vec_double_u64): Map to s390_vec_double_u64 instead of
            s390_vcdlgb.
    
    gcc/testsuite/ChangeLog:
    
    2018-12-13  Andreas Krebbel  <krebbel@linux.ibm.com>
    
            Backport from mainline
            2018-12-13  Andreas Krebbel  <krebbel@linux.ibm.com>
    
            * gcc.target/s390/zvector/vec-double-1.c: New test.
            * gcc.target/s390/zvector/vec-double-2.c: New test.
    
    From-SVN: r267086

commit 6210fbc6f775ea4b8042886c3b2f16d0ea16c711
Author: Andreas Krebbel <krebbel@linux.ibm.com>
Date:   Thu Dec 13 12:03:21 2018 +0000

    S/390: Use VEC_INEXACT/VEC_NOINEXACT instead of magic numbers.
    
    2018-12-13  Andreas Krebbel  <krebbel@linux.ibm.com>
    
            Backport from mainline
            2018-12-13  Andreas Krebbel  <krebbel@linux.ibm.com>
    
            * config/s390/vx-builtins.md ("vec_ctd_s64", "vec_ctd_u64")
            ("vec_ctsl", "vec_ctul"): Replace 0 with VEC_NOINEXACT.
            ("vec_double_s64", "vec_double_u64"): Replace 4 with VEC_INEXACT.
    
    From-SVN: r267085

commit 186e158431be657dd0b3f7246212084c5cef4935
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Thu Dec 13 07:38:31 2018 +0000

    backport: vxworks.h (RS6000_STARTING_FRAME_OFFSET): Define, accounting for STACK_BOUNDARY 128.
    
            Backport from mainline
            2018-12-11  Eric Botcazou  <ebotcazou@adacore.com>
    
            * config/rs6000/vxworks.h (RS6000_STARTING_FRAME_OFFSET): Define,
            accounting for STACK_BOUNDARY 128.
            (STACK_DYNAMIC_OFFSET): Likewise.
    
    From-SVN: r267075

commit f4c15a961841ef111f3e72d1f2d9ddbd3c105c90
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Dec 13 00:16:25 2018 +0000

    Daily bump.
    
    From-SVN: r267073

commit a0bb208bb9115f1f9feb3e47886558218f1edd73
Author: Peter Bergner <bergner@linux.ibm.com>
Date:   Wed Dec 12 17:14:13 2018 +0000

    backport: re PR target/87496 (ICE in aggregate_value_p at gcc/function.c:2046)
    
    gcc/
            Backport from mainline
            2018-12-07  Peter Bergner  <bergner@linux.ibm.com>
    
            PR target/87496
            * config/rs6000/rs6000.c (rs6000_option_override_internal): Disallow
            -mabi=ieeelongdouble and -mabi=ibmlongdouble without -mlong-double-128.
            Do not error for -mabi=ibmlongdouble and no ISA 2.06 support.
            * doc/invoke.texi: Document -mabi=ibmlongdouble and -mabi=ieeelongdouble
            require -mlong-double-128.
    
    gcc/testsuite/
            Backport from mainline
            2018-12-07  Peter Bergner  <bergner@linux.ibm.com>
    
            PR target/87496
            * gcc.target/powerpc/pr87496.c: Rename from this...
            * gcc.target/powerpc/pr87496-1.c: ...to this.  Update comment.
            * gcc.target/powerpc/pr87496-2.c: New test.
            * gcc.target/powerpc/pr87496-3.c: New test.
    
    From-SVN: r267061

commit 1e8efa75c96e88d84f76e40e1b276249b66e6492
Author: Steven G. Kargl <kargl@gcc.gnu.org>
Date:   Wed Dec 12 01:14:58 2018 +0000

    re PR fortran/88155 (ICE in gfc_format_decoder, at fortran/error.c:947)
    
    2018-12-11  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/88155
            * primary.c (gfc_match_structure_constructor):  Set the locus of
            an expression to avoid a NULL pointer dereference.
    
    2018-12-11  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/88155
            * gfortran.dg/pr70870_1.f90: Update testcase to use -std=gnu.
            * gfortran.dg/pr88155.f90: New test.
    
    From-SVN: r267042

commit f2fb3e8849f872a08c142a4cda3f7cdb955ad0d1
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Dec 12 00:16:13 2018 +0000

    Daily bump.
    
    From-SVN: r267039

commit 03897611825a9d3d5a99e1a909c3f73b4f64287a
Author: Steven G. Kargl <kargl@gcc.gnu.org>
Date:   Tue Dec 11 23:39:43 2018 +0000

    re PR fortran/88249 (ICE in gfc_resolve_filepos, at fortran/io.c:2853)
    
    2018-12-11  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/88249
            * gfortran.h: Update prototype for gfc_resolve_filepos().
            * io.c (gfc_resolve_filepos): Check for UNIT number if ERR= is present.
            Use passed in locus for error message.
            * resolve.c (gfc_resolve_code): Pass locus in gfc_resolve_filepos()
            call.
    
    2018-12-11  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/88249
            * gfortran.dg/pr88249.f90: New test.
    
    From-SVN: r267036

commit 6a87be764084f1d3119af3498e9ad96b08914c71
Author: Steven G. Kargl <kargl@gcc.gnu.org>
Date:   Tue Dec 11 02:34:44 2018 +0000

    re PR fortran/87922 (ICE in gfc_wide_strlen, at fortran/scanner.c:142)
    
    2018-12-10  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/87922
            * io.c (gfc_match_open): Additional checks on ASYNCHRONOUS.
    
    2018-12-10  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/87922
            * gfortran.dg/io_constraints_8.f90: Update error message.
            * gfortran.dg/pr87922.f90: New test.
    
    From-SVN: r266969

commit ce0a7155398660ca4a81661df4441127a31d02a0
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Dec 11 00:16:25 2018 +0000

    Daily bump.
    
    From-SVN: r266965

commit 64ea480824ffcccc075e19c6fafe3f58a8f24ac7
Author: Steven G. Kargl <kargl@gcc.gnu.org>
Date:   Mon Dec 10 19:26:43 2018 +0000

    re PR fortran/88269 (ICE in gfc_format_decoder, at fortran/error.c:947)
    
    2018-12-10  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/88269
            * io.c (io_constraint): Update macro. If locus line buffer is NULL,
            use gfc_current_locus in error messages.
            (check_io_constraints): Catch missing IO UNIT in write and read
            statements.  io_constraint macro is incompatible here.
    
    2018-12-10  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/88269
            * gfortran.dg/pr88269.f90: New test.
    
    From-SVN: r266960

commit f13d37c9bac86bbcf767045c71a4c898151d9d8a
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Mon Dec 10 11:17:04 2018 +0000

    patchable_function_entry-decl.c: Pass -mcpu=gr6 for Visium and remove other specific handling.
    
            * c-c++-common/patchable_function_entry-decl.c: Pass -mcpu=gr6 for
            Visium and remove other specific handling.
            * c-c++-common/patchable_function_entry-default.c: Likewise.
            * c-c++-common/patchable_function_entry-definition.c: Likewise.
    
    From-SVN: r266949

commit f5cf60599ef401051ba0099a3365bc2499313610
Author: Steven G. Kargl <kargl@gcc.gnu.org>
Date:   Mon Dec 10 01:01:01 2018 +0000

    re PR fortran/88205 (ICE in gfc_wide_strncasecmp, at fortran/scanner.c:249)
    
    2018-12-09  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/88205
            * io.c (gfc_match_open): Move NEWUNIT checks to after STATUS checks.
    
    2018-12-09  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/88205
            * gfortran.dg/pr88205.f90: New unit.
    
    From-SVN: r266940

commit bc1355d5f1a3afff9dc7737b46d3d92bebd51b9a
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Dec 10 00:16:43 2018 +0000

    Daily bump.
    
    From-SVN: r266938

commit 9537adfe36a790189afcc8f2476dd492764bf42d
Author: Steven G. Kargl <kargl@gcc.gnu.org>
Date:   Sun Dec 9 19:51:59 2018 +0000

    re PR fortran/88206 (ICE in gfc_match_type_spec, at fortran/match.c:2229)
    
    2018-12-09  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/88206
            * match.c (gfc_match_type_spec): REAL can be an intrinsic function.
    
    2018-12-09  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/88206
            * gfortran.dg/pr88206.f90: New test.
    
    From-SVN: r266932

commit 923d7e3970d2be1bc7024259cdb35ec76b93bc21
Author: Steven G. Kargl <kargl@gcc.gnu.org>
Date:   Sun Dec 9 17:09:15 2018 +0000

    [multiple changes]
    
    2018-12-09  Fritz Reese  <fritzoreese@gmail.com>
    
            PR fortran/88228
            * resolve.c (resolve_operator):  Do not call resolve_function.
            Break like other cases.
    
    2018-12-09  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/88228
            * gfortran.dg/pr88228.f90: New test.
    
    From-SVN: r266927

commit a6027f8c2c52b633d7c51643ebbfed55f96be4b3
Author: Steven G. Kargl <kargl@gcc.gnu.org>
Date:   Sun Dec 9 06:29:17 2018 +0000

    re PR fortran/88048 (ICE in check_data_variable, at fortran/resolve.c:15491)
    
    2018-12-08  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/88048
            * resolve.c (check_data_variable): Named constant cannot be a
            data object.
    
    2018-12-08  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/88048
            * gfortran.dg/pr88048.f90: New test.
    
    From-SVN: r266917

commit b3f5cadb321f64a5c2544d32d86934228c563730
Author: Steven G. Kargl <kargl@gcc.gnu.org>
Date:   Sun Dec 9 03:10:41 2018 +0000

    re PR fortran/88025 (ICE in gfc_apply_init, at fortran/expr.c:4468)
    
    2018-12-08  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/88025
            * expr.c (gfc_apply_init):  Remove asserts that cannot trigger.
            Check for a NULL pointer.
    
    2018-12-08  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/88025
            * gfortran.dg/pr88025.f90: New test.
    
    From-SVN: r266914

commit 5be05ec90841a565eef961a7084a4bedea7ed0f3
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Dec 9 00:16:29 2018 +0000

    Daily bump.
    
    From-SVN: r266911

commit 70134ad72cd90c994dc4f241a818aa86d9dd50f5
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Dec 8 00:16:27 2018 +0000

    Daily bump.
    
    From-SVN: r266902

commit 9cab9b4ac191807148d97c0beda92aaece081f52
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Dec 7 00:16:21 2018 +0000

    Daily bump.
    
    From-SVN: r266883

commit afc83641bafd5d8009881798e4ccea746efdd14e
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Thu Dec 6 08:54:13 2018 +0000

    backport r263583 to fix pr78544 on Darwin
    
    2018-12-06  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline
            2018-08-16  Iain Sandoe <iain@sandoe.co.uk>
    
            PR testsuite/78544
            * gcc.dg/tree-prof/section-attr-1.c: Add Darwin-specific section
            attributes and matching.
            * gcc.dg/tree-prof/section-attr-2.c: Likewise.
            * gcc.dg/tree-prof/section-attr-3.c: Likewise.
    
    From-SVN: r266843

commit dfc84793bb6b912c7375ff1d4ba5b12e04f3fc2d
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Thu Dec 6 08:45:58 2018 +0000

    backport r263580 to fix libstdc++ library symbol visibility on Darwin.
    
    2018-12-06  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline
            2018-08-25  Iain Sandoe  <iain@sandoe.co.uk>
    
            PR libstdc++/70694
            * configure.host (OPT_LDFLAGS): Don't append
            -fvisibility-inlines-hidden for newer Darwin.
    
    From-SVN: r266842

commit ae48a1ff6ba225bd770156cd4adb4caf29e201ef
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Dec 6 00:16:21 2018 +0000

    Daily bump.
    
    From-SVN: r266836

commit b938a73231d0b2dcdfdc1aad2704323dd8ab7c6f
Author: Richard Biener <rguenther@suse.de>
Date:   Wed Dec 5 12:19:32 2018 +0000

    backport: re PR target/87288 (Segfault after const_cast with "-O2 -ftree-loop-vectorize" but _without_ "-mavx")
    
    2018-12-05  Richard Biener  <rguenther@suse.de>
    
            Backport from mainline
            2018-09-20  Richard Sandiford  <richard.sandiford@arm.com>
    
            PR tree-optimization/87288
            * tree-vect-loop.c (vect_analyze_loop_2): Take PEELING_FOR_GAPS
            into account when determining PEELING_FOR_NITERS.
    
            * gcc.dg/vect/pr87288-1.c: New test.
            * gcc.dg/vect/pr87288-2.c: Likewise,
            * gcc.dg/vect/pr87288-3.c: Likewise.
    
    From-SVN: r266822

commit b100a4499313567e5ef8276d1f92d3e9b8dd1426
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Wed Dec 5 10:36:34 2018 +0000

    darwin - backport r263645, no support for split DWARF on Darwin.
    
    gcc/
    
            Backport from mainline
            2018-08-18  Iain Sandoe  <iain@sandoe.co.uk>
    
            * config/darwin.c (darwin_override_options): If -gsplit-dwarf is set,
            emit a diagnostic that it is not supported and reset the option.
            * config/darwin.h (DRIVER_SELF_SPECS): Note that gsplit-dwarf is not
            supported and consume the option.  (ASM_FINAL_SPEC): New.
    
    gcc/testsuite/
    
            Backport from mainline
            2018-08-18  Iain Sandoe  <iain@sandoe.co.uk>
    
            * g++.dg/debug/dwarf2/pr85302.C: Skip unsupported split DWARF
            test on Darwin.
            * g++.dg/debug/dwarf2/pr85302.C: Likewise.
            * gcc.dg/lto/pr83719_0.c: Likewise.
    
    From-SVN: r266819

commit 630d292ab6c872227ed4d9f7375507c7e72eb3dd
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Dec 5 00:16:14 2018 +0000

    Daily bump.
    
    From-SVN: r266809

commit 7d0a18a5643d3f9bbe5c7dcc97e0895fb582100a
Author: Marek Polacek <polacek@redhat.com>
Date:   Tue Dec 4 14:53:57 2018 +0000

    PR c++/88120 - ICE when calling save_expr in a template.
    
            * typeck.c (cp_build_binary_op): Call cp_save_expr instead of
            save_expr.
    
    From-SVN: r266783

commit c5b35787fbf15737c10b44c876c7f9eded33fa70
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Tue Dec 4 14:53:35 2018 +0000

    darwin - backport fix for DWAF5 section names.
    
    2018-08-12  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline
            2018-08-15  Iain Sandoe  <iain@sandoe.co.uk>
    
            PR target/81685
            * config/darwin.h: (DEBUG_STR_OFFSETS_SECTION, DEBUG_LOCLISTS_SECTION,
            DEBUG_RNGLISTS_SECTION) new macros.  (DEBUG_PUBNAMES_SECTION,
            DEBUG_PUBTYPES_SECTION) update to include GNU variant.
    
    From-SVN: r266782

commit 14dbeb2b12039a7b8fb253874fa3d2b8b58e90a7
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Dec 4 00:16:19 2018 +0000

    Daily bump.
    
    From-SVN: r266768

commit fa624cea9860a59b4a95cd68f5f588c5ad0754f0
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Dec 3 00:16:18 2018 +0000

    Daily bump.
    
    From-SVN: r266731

commit 89098c45fa878ffdd0fd2668dfd3c1de51317b72
Author: Janne Blomqvist <jb@gcc.gnu.org>
Date:   Sun Dec 2 17:14:51 2018 +0200

    Use atomic load/store to access static backtrace state pointer
    
    As the static backtrace state pointer can be accessed from multiple
    threads, use atomics to access it.
    
    Regtested on x86_64-pc-linux-gnu.
    
    libgfortran/ChangeLog:
    
    2018-12-02  Janne Blomqvist  <jb@gcc.gnu.org>
    
            Backport from trunk
            PR libfortran/88137
            * runtime/backtrace.c (show_backtrace): Use atomic load/store to
            access the static lbstate pointer.
    
    From-SVN: r266725

commit 6ea195fefc94f696eb1def72257d38f628fbbc15
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Dec 2 00:16:09 2018 +0000

    Daily bump.
    
    From-SVN: r266716

commit 973797d96b95d13da151d2355bb12588a370de2c
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Dec 1 00:16:36 2018 +0000

    Daily bump.
    
    From-SVN: r266704

commit 769871293e5b5d3a6af4055e000405b0866cc7ba
Author: Janne Blomqvist <jb@gcc.gnu.org>
Date:   Fri Nov 30 18:46:55 2018 +0200

    Initialize backtrace state once
    
    From backtrace.h for backtrace_create_state:
    
       Calling this function allocates resources that can not be freed.
       There is no backtrace_free_state function.  The state is used to
       cache information that is expensive to recompute.  Programs are
       expected to call this function at most once and to save the return
       value for all later calls to backtrace functions.
    
    So instead of calling backtrace_create_state every time we wish to
    show a backtrace, do it once and store the result in a static
    variable.  libbacktrace allows multiple threads to access the state,
    so no need to use TLS.
    
    Regtested on x86_64-pc-linux-gnu.
    
    Backport from trunk.
    
    libgfortran/ChangeLog:
    
    2018-11-30  Janne Blomqvist  <jb@gcc.gnu.org>
    
            PR libfortran/88137
            * runtime/backtrace.c (show_backtrace): Make lbstate a static
            variable, initialize once.
    
    From-SVN: r266678

commit e8dff683dc86f6b3b41b9dca8ac0b9aeda1a04a8
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Nov 30 00:16:25 2018 +0000

    Daily bump.
    
    From-SVN: r266656

commit 3b0f236ebfd3ce15fd35f168729114d17e6adcd9
Author: Peter Bergner <bergner@linux.ibm.com>
Date:   Thu Nov 29 22:02:36 2018 +0000

    backport: re PR target/87496 (ICE in aggregate_value_p at gcc/function.c:2046)
    
    gcc/
            Backport from mainline
            2018-11-29  Peter Bergner  <bergner@linux.ibm.com>
    
            PR target/87496
            * config/rs6000/rs6000.c (rs6000_option_override_internal): Disallow
            -mabi=ieeelongdouble without both -mpopcntd and -mvsx.
    
    gcc/testsuite/
            Backport from mainline
            2018-11-29  Peter Bergner  <bergner@linux.ibm.com>
    
            PR target/87496
            * gcc.target/powerpc/pr87496.c: New test.
    
    From-SVN: r266647

commit ffa7c342b587eeb3d8a2782d4ff9dbc04ec8a78f
Author: Nathan Sidwell <nathan@acm.org>
Date:   Thu Nov 29 12:50:45 2018 +0000

    [PR c++/87531] operator= lookup in templates
    
    https://gcc.gnu.org/ml/gcc-patches/2018-11/msg02301.html
            PR c++/87531
            * class.c (finish_struct): In a template, add artificial using
            decl for operator=.
    
            * g++.dg/lookup/pr87531.C: New.
    
    From-SVN: r266614

commit 3f8362f1c01f291ce2ed38289ad94f0bf83012d8
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Nov 29 00:16:10 2018 +0000

    Daily bump.
    
    From-SVN: r266596

commit 815e19d516910c377e19192ff1deca06c67cd2f8
Author: Aaron Sawdey <acsawdey@linux.ibm.com>
Date:   Wed Nov 28 19:33:04 2018 +0000

    backport: [multiple changes]
    
    2018-11-28  Aaron Sawdey  <acsawdey@linux.ibm.com>
    
            Backport from mainline
            2018-10-25  Aaron Sawdey  <acsawdey@linux.ibm.com>
    
            * config/rs6000/rs6000-string.c (expand_strncmp_gpr_sequence): Change to
            a shorter sequence with fewer branches.
            (emit_final_str_compare_gpr): Ditto.
    
            Backport from mainline to allow the above code to go in:
            2018-06-14  Aaron Sawdey  <acsawdey@linux.ibm.com>
    
            * config/rs6000/rs6000-string.c (do_and3, do_and3_mask,
            do_cmpb3, do_rotl3): New functions.
    
    From-SVN: r266578

commit 980891be9ee92c2a72263c52b4e3769f54daff93
Author: Richard Biener <rguenther@suse.de>
Date:   Wed Nov 28 12:13:04 2018 +0000

    re PR tree-optimization/79351 (Invalid tree PRE optimization around compound literal)
    
    2018-11-28  Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/79351
            * tree-ssa-sccvn.c (vn_reference_lookup_3): For assignments from
            empty CONSTRUCTORs ensure the store is at a constant position.
    
            * gcc.dg/torture/pr79351.c: New testcase.
    
    From-SVN: r266554

commit 5779718332ff8167d395d9c6cdf42962454f13e4
Author: Richard Biener <rguenther@suse.de>
Date:   Wed Nov 28 12:11:07 2018 +0000

    re PR fortran/88229 (ICE tree check: expected integer_cst, have nop_expr in get_len, at tree.h:5608)
    
    2018-11-28  Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/88229
            * tree-ssa.c (non_rewritable_mem_ref_base): Check DECL_SIZE_UNIT
            is an INTEGER_CST before accessing it so.
    
    From-SVN: r266553

commit 27a693d9c8365efa3284d4a3e2624cd83ce11a23
Author: François Dumont <fdumont@gcc.gnu.org>
Date:   Wed Nov 28 06:27:28 2018 +0000

    re PR libstdc++/88199 (memory leak on unordered container move assignment)
    
    2018-11-28  François Dumont  <fdumont@gcc.gnu.org>
    
            PR libstdc++/88199
            * include/bits/hashtable.h
            (_Hashtable<>::_M_move_assign(_Hashtable&&, false_type)): Deallocate
            former buckets after assignment.
            * testsuite/23_containers/unordered_set/allocator/move_assign.cc
            (test03): New.
    
    From-SVN: r266543

commit 0532bb4f515f0599c0c60a60e43d511192301cac
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Nov 28 00:16:17 2018 +0000

    Daily bump.
    
    From-SVN: r266539

commit 10ef9d294dae108440f3c39a3735b80134b1f2fe
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Nov 27 00:16:25 2018 +0000

    Daily bump.
    
    From-SVN: r266498

commit 3df49be20c861c771c88218c8fd082026c16e325
Author: Andreas Krebbel <krebbel@linux.ibm.com>
Date:   Mon Nov 26 15:15:57 2018 +0000

    S/390: Fix flogr RTX.
    
    The flogr instruction uses a 64 bit register pair target operand.  In
    the RTX we model this as a write to a TImode register.  Unfortunately
    the RTX's being assigned to the two parts of the target operand were
    swapped.  This is no problem if in the end the flogr instruction will
    be emitted since the instruction still does what the clzdi expander
    expects.  However, a problem arises when the RTX is used to optimize
    CLZ for a constant input operand.  Even then it matters only if the
    expression couldn't be folded on tree level already.
    
    In the testcase this happened thanks to loop unrolling on RTL level.
    The iteration variable is used as an argument to the clz
    builtin. Due to the loop unrolling it becomes a constant and after
    folding the broken RTX leads to a wrong assumption.
    
    gcc/ChangeLog:
    
    2018-11-26  Andreas Krebbel  <krebbel@linux.ibm.com>
    
            Backport from mainline
            2018-11-20  Andreas Krebbel  <krebbel@linux.ibm.com>
    
            * config/s390/s390.md ("clztidi2"): Swap the RTX's written to the
            DImode parts of the target operand.
    
    gcc/testsuite/ChangeLog:
    
    2018-11-26  Andreas Krebbel  <krebbel@linux.ibm.com>
    
            Backport from mainline
            2018-11-20  Andreas Krebbel  <krebbel@linux.ibm.com>
    
            * gcc.target/s390/flogr-1.c: New test.
    
    From-SVN: r266465

commit f66e388ad5ee396e3480033d63bb8866a0071189
Author: Andreas Krebbel <krebbel@linux.ibm.com>
Date:   Mon Nov 26 15:07:26 2018 +0000

    S/390: Document z14/arch12 -march option.
    
    gcc/ChangeLog:
    
    2018-11-26  Andreas Krebbel  <krebbel@linux.ibm.com>
    
            Backport from mainline
            2018-11-26  Andreas Krebbel  <krebbel@linux.ibm.com>
    
            * doc/invoke.texi: Document z14/arch12 -march option.
    
    From-SVN: r266463

commit e2cd7cde936a6ab62dde55a97eddbd5a86ae63f4
Author: Matthias Klose <doko@ubuntu.com>
Date:   Mon Nov 26 11:53:06 2018 +0000

    test-long-names.c: Fix build with -Wformat-security.
    
    2018-11-26  Matthias Klose  <doko@ubuntu.com>
    
            * jit.dg/test-long-names.c: Fix build with -Wformat-security.
    
    From-SVN: r266456

commit abaad66bbf64058734c134af6ebecf6f1076e9d4
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Nov 26 00:16:34 2018 +0000

    Daily bump.
    
    From-SVN: r266443

commit 74487f5c7577a7da0017e3662d33f48a7a81975d
Author: Thomas Koenig <tkoenig@gcc.gnu.org>
Date:   Sun Nov 25 15:19:29 2018 +0000

    backport: re PR fortran/88073 (Internal compiler error  compiling WHERE construct with -O or -O2)
    
    2018-11-25  Thomas Koenig  <tkoenig@gcc.gnu.org>
    
            Backport from trunk
            PR fortran/88073
            * frontend-passes.c (combine_array_constructor): Do not do
            anything if in a WHERE statement.
    
    2018-11-25  Thomas Koenig  <tkoenig@gcc.gnu.org>
    
            Backport from trunk
            PR fortran/88073
            * gfortran.dg/where_7.f90: New test.
    
    From-SVN: r266436

commit eadc8bcdb115c2613cde607f435e80dd9d39250a
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Nov 25 00:16:22 2018 +0000

    Daily bump.
    
    From-SVN: r266433

commit bbdef456d6c090e7c06a5a43b15984ad47d02602
Author: Paul Thomas <pault@gcc.gnu.org>
Date:   Sat Nov 24 18:08:59 2018 +0000

    re PR fortran/88143 (ICE in resolve_variable at gcc/fortran/resolve.c:5413 since r253077)
    
    2018-11-24  Paul Thomas  <pault@gcc.gnu.org>
    
            PR fortran/88143
            * resolve.c (resolve_variable): Check for associate names with
            NULL target.
    
    2018-11-24  Paul Thomas  <pault@gcc.gnu.org>
    
            PR fortran/88143
            * gfortran.dg/associate_46.f90: New test.
    
    From-SVN: r266430

commit ed72ce1a569b5e3b9e33f4f7ab3d4974db233c1b
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Nov 24 00:16:25 2018 +0000

    Daily bump.
    
    From-SVN: r266424

commit c89c14bc3b600d6bcdeb648aa1a9123109201939
Author: Tamar Christina <tamar.christina@arm.com>
Date:   Fri Nov 23 12:20:20 2018 +0000

    Arm: Fix subreg crash when FP16 and big-endian
    
    The original issue comes from the fact that the code does
    
    ... foo (... bar)
    {
      return bar;
    }
    
    The expansion of the return statement causes GCC to try to return the value in
    a register.  GCC will try to emit the move then, from MEM to REG (due to the SSA
    temporary.).  It checks for a mov optab for this which isn't available and
    then tries to do the move in bits using emit_move_multi_word.
    
    emit_move_multi_word will split the move into sub parts, but then needs to get
    the sub parts and does this using subregs, but it's told it can't do subregs!
    
    The compiler is now stuck in an infinite loop.
    
    The way this is worked around in the back-end is that we have move patterns in
    neon.md that usually just force the register instead of checking with the
    back-end. This prevents emit_move_multi_word from being needed.  However the
    pattern for V4HF and V8HF were guarded by TARGET_NEON && TARGET_FP16.
    
    I don't believe the TARGET_FP16 guard to be needed, because the pattern doesn't
    actually generate code and requires another pattern for that, and a reg to reg move
    should always be possible anyway. So allowing the force to register here is safe
    and it allows the compiler to generate a correct error instead of ICEing in an
    infinite loop.
    
    Regtested on armeb-none-eabi and no regressions.
    Bootstrapped on arm-none-linux-gnueabihf and no issues.
    
    Thanks,
    Tamar
    
    gcc/
    2018-11-23  Tamar Christina  <tamar.christina@arm.com>
    
            Backported from mainline.
            2018-08-16  Tamar Christina  <tamar.christina@arm.com>
    
            PR target/84711
            * config/arm/neon.md (movv4hf, movv8hf): Refactored to..
            (mov<mov>): ..this and enable unconditionally.
    
    From-SVN: r266405

commit d91607c42700bad0da618b02cba37163ef2c9b63
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Nov 23 00:16:31 2018 +0000

    Daily bump.
    
    From-SVN: r266399

commit f2ad205b7caedad5261625064abbc28ba5bc9cb5
Author: Uros Bizjak <uros@gcc.gnu.org>
Date:   Thu Nov 22 22:45:01 2018 +0100

    backport: re PR target/88051 (internal compiler error: in add_clobbers, at config/i386/sync.md:1762)
    
            Backport from mainline
            2018-11-16  Uros Bizjak  <ubizjak@gmail.com>
    
            PR target/88051
            * config/i386/sse.md (UNSPEC_MOVDI_TO_SSE): New UNSPEC.
            (movdi_to_sse): Rewrite using UNSPEC_MOVDI_TO_SSE unspec.
    
    From-SVN: r266392

commit 3734f8101a77598af1a3917600344f406d9b4617
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Thu Nov 22 16:29:29 2018 +0000

    backport: re PR rtl-optimization/85925 (compilation of masking with 257 goes wrong in combine at -02)
    
            Backport from mainline
            2018-11-21  Jakub Jelinek  <jakub@redhat.com>
    
            PR rtl-optimization/85925
            * gcc.c-torture/execute/20181120-1.c: Require effective target
            int32plus.
            (u): New variable.
            (main): Compare d against u.f1 rather than 0x101.  Use 0x4030201
            instead of 0x10101.
    
    From-SVN: r266383

commit 3078ce8b5baa966a63e7e299086c6dc571c1528f
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Thu Nov 22 15:02:46 2018 +0000

    PR libstdc++/87520 Always pass type-punned type_info reference
    
    The implementations of std::make_shared for -frtti and -fno-rtti are not
    compatible, because they pass different arguments to
    _Sp_counted_ptr_inplace::_M_get_deleter and so can't interoperate.
    Either the argument doesn't match the expected value, and so the
    shared_ptr::_M_ptr member is never set, or the type-punned reference is
    treated as a real std::type_info object and gets dereferenced.
    
    This patch removes the differences between -frtti and -fno-rtti, so that
    typeid is never used, and the type-punned reference is used in both
    cases. For backwards compatibility with existing code that passes
    typeid(_Sp_make_shared_tag) that still needs to be handled, but only
    after checking that the argument is not the type-punned reference (so
    it's safe to treat as a real std::type_info object). The reference is
    bound to an object of literal type, so that it doesn't need a guard
    variable to make its initialization thread-safe.
    
    This patch also fixes 87520 by ensuring that the type-punned reference
    is bound to "a region of storage of suitable size and alignment to
    contain an object of the reference's type" (as per the proposed
    resolution of Core DR 453).
    
    If all objects are built with the fixed version of GCC then -frtti and
    -fno-rtti can be mixed freely and std::make_shared will work correctly.
    If some objects are built with unfixed GCC versions then problems can
    still arise, depending on which template instantiations are kept by the
    linker.
    
            PR libstdc++/85930
            PR libstdc++/87520
            * include/bits/shared_ptr_base.h (_Sp_make_shared_tag::_S_ti)
            [__cpp_rtti]: Define even when RTTI is enabled. Use array of
            sizeof(type_info) so that type-punned reference binds to an object
            of the correct size as well as correct alignment.
            (_Sp_counted_ptr_inplace::_M_get_deleter) [__cpp_rtti]: Check for
            _S_ti() reference even when RTTI is enabled.
            (__shared_ptr(_Sp_make_shared_tag, const _Alloc&, _Args&&...))
            [__cpp_rtti]: Pass _S_ti() instead of typeid(_Sp_make_shared_tag).
    
    From-SVN: r266380

commit 3720809badcdcc6780bfc3129358f65595b6fe0f
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Nov 22 00:16:11 2018 +0000

    Daily bump.
    
    From-SVN: r266363

commit fc18e2f4e1ab4828c90a05a2b0f69b78cb1778cc
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Nov 21 00:16:48 2018 +0000

    Daily bump.
    
    From-SVN: r266331

commit b9998bcec31e5b0f5bcdf14e057574d3c444fe06
Author: Martin Liska <mliska@suse.cz>
Date:   Tue Nov 20 11:59:08 2018 +0100

    Backport r266277
    
    2018-11-20  Martin Liska  <mliska@suse.cz>
    
            Backport from mainline
            2018-11-19  Martin Liska  <mliska@suse.cz>
    
            PR lto/88077
            * lto-symtab.c (lto_symtab_merge): Transform the
            condition before r256989.
    2018-11-20  Martin Liska  <mliska@suse.cz>
    
            Backport from mainline
            2018-11-19  Martin Liska  <mliska@suse.cz>
    
            PR lto/88077
            * gcc.dg/lto/pr88077_0.c: New test.
            * gcc.dg/lto/pr88077_1.c: New test.
    
    From-SVN: r266311

commit 4de5886274cd508f97135f832a93f0dd14d9c3bc
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Tue Nov 20 09:03:03 2018 +0000

    re PR rtl-optimization/85925 (compilation of masking with 257 goes wrong in combine at -02)
    
            PR rtl-optimization/85925
            * rtl.h (word_register_operation_p): New predicate.
            * combine.c (record_dead_and_set_regs_1): Only apply specific handling
            for WORD_REGISTER_OPERATIONS targets to word_register_operation_p RTX.
            * rtlanal.c (nonzero_bits1): Likewise.  Adjust couple of comments.
            (num_sign_bit_copies1): Likewise.
    
    From-SVN: r266303

commit d6bc07d89f9cea0e6cd15669a56bf6f730391783
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Nov 20 00:16:33 2018 +0000

    Daily bump.
    
    From-SVN: r266292

commit d49d69083cd1e4f14a09e9c4ef59e9cd873c684e
Author: Martin Liska <mliska@suse.cz>
Date:   Mon Nov 19 09:16:30 2018 +0100

    Make a workaround for PR gcov-profile/88045.
    
    2018-11-19  Martin Liska  <mliska@suse.cz>
    
            PR gcov-profile/88045
            * coverage.c (coverage_begin_function): One can't relly on the
            fact that function ends on the same line it starts or later.
    2018-11-19  Martin Liska  <mliska@suse.cz>
    
            PR gcov-profile/88045
            * g++.dg/gcov/pr88045.C: New test.
    
    From-SVN: r266263

commit 86972ef9e43c6273a3bbaa690eef220b7de5185f
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Nov 19 00:16:40 2018 +0000

    Daily bump.
    
    From-SVN: r266258

commit d8ea23c7b9fa90b10dc9ed81baa8cf5e59e897e0
Author: Uros Bizjak <ubizjak@gmail.com>
Date:   Sun Nov 18 21:41:32 2018 +0100

    backport: re PR target/87928 (ICE in ix86_compute_frame_layout, at config/i386/i386.c:11161 since r228607)
    
            Backport from mainline
            2018-11-11  Uros Bizjak  <ubizjak@gmail.com>
    
            PR target/87928
            * config/i386/i386.h (STACK_BOUNDARY): Use TARGET_64BIT_MS_ABI
            instead of (TARGET_64BIT && ix86_abi == MS_ABI).
            * config/i386/darwin.h (STACK_BOUNDARY): Ditto.
            * config/i386/cygming.h (STACK_BOUNDARY): Remove.
    
    testsuite/ChangeLog:
    
            Backport from mainline
            2018-11-11  Uros Bizjak  <ubizjak@gmail.com>
    
            PR target/87928
            * gcc.target/i386/pr87928.c: New test.
    
    From-SVN: r266253

commit f14abb83a6b554ac851c6570d6077a21a5c6d0b2
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Nov 18 00:16:35 2018 +0000

    Daily bump.
    
    From-SVN: r266244

commit 2e1b22d9cb3ecf919155cff7cb3f009277586f82
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Nov 17 00:16:24 2018 +0000

    Daily bump.
    
    From-SVN: r266228

commit 802ef73113c8fd40898abc9aac4f08e518780d8a
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Fri Nov 16 16:28:27 2018 +0000

    tree-switch-conversion.c (emit_case_decision_tree): Pass location of switch statement to emit_case_nodes.
    
            * tree-switch-conversion.c (emit_case_decision_tree): Pass location
            of switch statement to emit_case_nodes.
            (do_jump_if_equal): Add LOC parameter and set it on the newly built
            GIMPLE comparison statement.
            (emit_cmp_and_jump_insns): Likewise.
            (emit_case_nodes): Add LOC parameter and pass it to do_jump_if_equal
            as well as recursive calls.
    
    From-SVN: r266215

commit 6ee744c5baa7d9a07d714c8f7a72c24f8a647a5f
Author: Nathan Sidwell <nathan@acm.org>
Date:   Fri Nov 16 11:51:51 2018 +0000

    [PR c++/86246] ICE tsubst explicit operator call
    
    https://gcc.gnu.org/ml/gcc-patches/2018-11/msg01405.html
            PR c++/86246
            PR c++/87989
            * typeck.c (finish_class_member_access_expr): Conversion operator
            to dependent type is dependent.
    
            * g++.dg/template/pr86246.C: New.
            * g++.dg/template/pr87989.C: New.
    
    From-SVN: r266204

commit 78207a426a0b1d81a03a5253aa2eab7f986d3585
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Nov 16 00:16:15 2018 +0000

    Daily bump.
    
    From-SVN: r266197

commit 5bad6f6d0b56489efba82655a95a4cd668a49247
Author: Nathan Sidwell <nathan@acm.org>
Date:   Thu Nov 15 13:23:23 2018 +0000

    [debug/88006] -fdebug-types-section gives undefined ref
    
    https://gcc.gnu.org/ml/gcc-patches/2018-11/msg01280.html
            PR debug/88006
            PR debug/87462
            * dwarf2out.c (dwarf2out_finish): Apply resolve_addr to comdat
            type list.
    
            * g++.dg/debug/dwarf2/pr87462.C: New.
            * g++.dg/debug/dwarf2/pr88006.C: New.
    
    From-SVN: r266181

commit 6c77fd76cd61fbadeecd57a636d58bb3897380b1
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Thu Nov 15 12:06:52 2018 +0000

    misc.c (gnat_init_gcc_eh): Do not override the switch -fnon-call-exceptions passed on the command line in...
    
            * gcc-interface/misc.c (gnat_init_gcc_eh): Do not override the switch
            -fnon-call-exceptions passed on the command line in -gnatp mode.
    
    From-SVN: r266177

commit 160afbd642fcb482d0654bc32eaeadf04af58163
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Nov 15 00:16:12 2018 +0000

    Daily bump.
    
    From-SVN: r266166

commit 8f84adcb5efb4b0c7dee18ce86d98962c445b525
Author: Paul A. Clarke <pc@us.ibm.com>
Date:   Wed Nov 14 19:14:10 2018 +0000

    Fix _mm_extract_pi16 for big-endian
    
    For compatibility implementation of x86 vector intrinsic, _mm_extract_pi16,
    adjust shift value for big-endian mode.
    
    gcc/ChangeLog:
    
    2018-11-14  Paul A. Clarke  <pc@us.ibm.com>
    
            * config/rs6000/xmmintrin.h (_mm_extract_pi16): Fix for big-endian.
    
    From-SVN: r266157

commit f425ccd7d2e6a00e1732e1468e586685c2ef07bd
Author: Claudiu Zissulescu <claziss@synopsys.com>
Date:   Wed Nov 14 12:31:12 2018 +0100

    [ARC] Backport form mainline PR target/85968
    
    [ARC] Backport form mainline
            PR target/85968
            * config/arc/arc.c (arc_return_address_register): Fix
            if-condition.
    
    From-SVN: r266107

commit 9f1b960036090d834539b474bd86a97cdbf807bf
Author: Claudiu Zissulescu <claziss@synopsys.com>
Date:   Wed Nov 14 12:22:55 2018 +0100

    [ARC] Backport from mainline
    
    [ARC] Backport from mainline
            * config/arc/arc.h (FUNCTION_PROFILER): Redefine to empty.
            * config/arc/elf.h (PROFILE_HOOK): Define.
            * config/arc/linux.h (PROFILE_HOOK): Likewise.
    
    From-SVN: r266106

commit 99b4cf9a923ef37eb5af26251c4330c0022b0ee3
Author: Claudiu Zissulescu <claziss@synopsys.com>
Date:   Wed Nov 14 12:08:33 2018 +0100

    [ARC] Backport from mainline
    
    [ARC] Backport from mainline
            * config/arc/arc.c (hwloop_optimize): Bailout when detecting a
            jump table data in the text section.
    
    From-SVN: r266104

commit 424402fb35704460b0cb7b5bb6a12419e8fc9a3f
Author: Claudiu Zissulescu <claziss@synopsys.com>
Date:   Wed Nov 14 11:51:16 2018 +0100

    [ARC] Backport from mainline
    
    [ARC] Backport from mainline
            * config/arc/arc.c (arc_eh_return_address_location): Repurpose it
            to fit the eh_return pattern.
            * config/arc/arc.md (eh_return): Define.
            (VUNSPEC_ARC_EH_RETURN): Likewise.
            * config/arc/arc-protos.h (arc_eh_return_address_location): Match
            new implementation.
            * config/arc/arc.h (EH_RETURN_HANDLER_RTX): Remove it.
    
    From-SVN: r266103

commit 0219a899f0635737d995b4ea943cb9865d40b946
Author: Claudiu Zissulescu <claziss@synopsys.com>
Date:   Wed Nov 14 11:45:00 2018 +0100

    [ARC]   Backport from mainline
            2018-09-17  Alexey Brodkin  <abrodkin@synopsys.com>
    
            * config/arc/linux.h (LINK_EH_SPEC): Add missing space.
    
    From-SVN: r266102

commit 5681bf99b8e27b6bde1ac679a3beb8951a43b72f
Author: Claudiu Zissulescu <claziss@synopsys.com>
Date:   Wed Nov 14 11:40:13 2018 +0100

    [ARC] Backport r259764
    
    From-SVN: r266101

commit 22ed655d8defa7f429ecacbd5b444b4064d1ea1a
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Nov 14 00:16:25 2018 +0000

    Daily bump.
    
    From-SVN: r266095

commit 2bea96cd2acdcabf83873316a5a95c8fccb56c86
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Tue Nov 13 09:03:05 2018 +0000

    misc.c (gnat_init_gcc_eh): Set -fnon-call-exceptions for the runtime on platforms where...
    
            * gcc-interface/misc.c (gnat_init_gcc_eh): Set -fnon-call-exceptions
            for the runtime on platforms where System.Machine_Overflow is true.
    
    From-SVN: r266058

commit e3b3785f9e52baddf28f56474a3dc9f56eabdbf3
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Nov 13 00:16:23 2018 +0000

    Daily bump.
    
    From-SVN: r266041

commit 51699f76ef10788b81d4e7bf3bfca7caa90c3c93
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Nov 12 00:16:22 2018 +0000

    Daily bump.
    
    From-SVN: r266022

commit 99c73229a7b6d8e13e4a0a1fef29062fbdb355f6
Author: Uros Bizjak <ubizjak@gmail.com>
Date:   Sun Nov 11 18:36:23 2018 +0100

    backport: re PR c++/58372 (internal compiler error: ix86_compute_frame_layout)
    
            Backport from mainline
            2018-11-04  Uros Bizjak  <ubizjak@gmail.com>
    
            PR middle-end/58372
            * cfgexpand.c (pass_expand::execute): Move the call to
            finish_eh_generation in front of the call to expand_stack_alignment.
    
    testsuite/ChangeLog:
    
            Backport from mainline
            2018-11-04  Uros Bizjak  <ubizjak@gmail.com>
    
            PR middle-end/58372
            * g++.dg/pr58372.C: New test.
    
    From-SVN: r266014

commit 18592fe9350c195a89ca8becfdbd2fe98fdc63fb
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Nov 11 00:16:25 2018 +0000

    Daily bump.
    
    From-SVN: r266006

commit c51759d420ced7dcfb443c6a379ded72acdf16b7
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Nov 10 00:16:42 2018 +0000

    Daily bump.
    
    From-SVN: r266000

commit 5e08ecc1e6f1fc892e13aaad75add9bf7af51d52
Author: Jerry DeLisle <jvdelisle@gcc.gnu.org>
Date:   Fri Nov 9 17:07:39 2018 +0000

    backport: re PR fortran/78351 (comma not terminating READ of formatted input field - ok in 4.1.7, not 4.4.7- maybe related to 25419?)
    
    2018-11-09  Jerry DeLisle  <jvdelisle@gcc.gnu.org>
    
            Backport from trunk
            PR libfortran/78351
            * io/transfer.c (read_sf_internal): Add support for early
            comma termination of internal unit formatted reads.
    
            Backported from mainline
            PR libfortran/78351
            * gfortran.dg/read_legacy_comma.f90: New test.
    
    From-SVN: r265976

commit 500e979bfb15ea832ed92d88ab05f77e9584d932
Author: Ian Lance Taylor <ian@gcc.gnu.org>
Date:   Fri Nov 9 15:29:52 2018 +0000

    syscall: change RLIM_INFINITY from 0xffffffffffffffff to -1
    
        For compatibility with the gc toolchain's syscall package.
    
        Fixes golang/go#28665
    
        Reviewed-on: https://go-review.googlesource.com/c/148697
    
    From-SVN: r265973

commit 44a0f3902a80a3fe8cf62d1df12fb8088ea2f3ed
Author: Ramana Radhakrishnan <ramana@gcc.gnu.org>
Date:   Fri Nov 9 12:50:51 2018 +0000

    [PATCH, arm] Backport -- Fix ICE during thunk generation with -mlong-calls
    
    For Mihail Ionescu.
    
    2018-11-09  Mihail Ionescu  <mihail.ionsecu@arm.com>
    
            PR target/87867
            Backport from mainline
            2018-09-17  Eric Botcazou  <ebotcazou@adacore.com>
    
            * g++.dg/other/thunk2a.C: New test.
            * g++.dg/other/thunk2b.C: Likewise.
    
    2018-11-09  Mihail Ionescu  <mihail.ionescu@arm.com>
    
            Backport from mainiline
            2018-09-17  Eric Botcazou  <ebotcazou@adacore.com>
    
            * g++.dg/other/thunk2a.C: New test.
            * g++.dg/other/thunk2b.C: Likewise.
            * g++.dg/other/vthunk1.C: Rename as thunk1.C
    
    From-SVN: r265965

commit 00fa5e7c9751cd92cf359f90bd3e49ff9f601117
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Nov 9 00:16:35 2018 +0000

    Daily bump.
    
    From-SVN: r265944

commit 52bc4c0afbb8852165635cb67a7d3948d081f12f
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Thu Nov 8 15:56:57 2018 +0000

    fe.h (Suppress_Checks): Declare.
    
            * fe.h (Suppress_Checks): Declare.
            * gcc-interface/misc.c (gnat_init_gcc_eh): Set -fnon-call-exceptions
            only if checks are not suppressed and -faggressive-loop-optimizations
            only if they are.
            * gcc-interface/trans.c (struct loop_info_d): Remove has_checks and
            warned_aggressive_loop_optimizations fields.
            (gigi): Do not clear warn_aggressive_loop_optimizations here.
            (Raise_Error_to_gnu): Do not set has_checks.
            (gnat_to_gnu) <N_Indexed_Component>: Remove support for aggressive
            loop optimizations.
    
    From-SVN: r265922

commit 3379f300cc3bfe52db52d9c006048a9699b2b9e0
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Nov 8 00:16:39 2018 +0000

    Daily bump.
    
    From-SVN: r265901

commit 6504e28db061a6179bb1badd36e91fa7f16c17e6
Author: Max Filippov <jcmvbkbc@gmail.com>
Date:   Wed Nov 7 20:52:02 2018 +0000

    gcc: xtensa: don't force PIC for uclinux target
    
    xtensa-uclinux uses bFLT executable file format that cannot relocate
    fields representing offsets from data to code. C++ objects built as PIC
    use offsets to encode FDE structures. As a result C++ exception handling
    doesn't work correctly on xtensa-uclinux. Don't use PIC by default on
    xtensa-uclinux.
    
    gcc/
    2018-11-07  Max Filippov  <jcmvbkbc@gmail.com>
    
            Backport from mainline
            2018-11-05  Max Filippov  <jcmvbkbc@gmail.com>
    
            * config/xtensa/uclinux.h (XTENSA_ALWAYS_PIC): Change to 0.
    
    From-SVN: r265888

commit 3f12b442de89f0bfac98258c8498385e633168c9
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Nov 7 00:17:14 2018 +0000

    Daily bump.
    
    From-SVN: r265855

commit 9902b417d404756f741fe10842efcc0f18c76232
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Tue Nov 6 08:43:10 2018 +0000

    re PR ada/81878 (--disable-bootstrap --enable-languages=ada fails)
    
            PR ada/81878
            Revert
            2018-11-02  Tamar Christina  <tamar.christina@arm.com>
    
            PR ada/81878
            * Makefile.in (TOOLS_FLAGS_TO_PASS_NATIVE): Add -B ../../.
    
            2017-08-17  Richard Biener  <rguenther@suse.de>
    
            PR ada/81878
            * Makefile.in (CXX_LFLAGS): Remove.
            (TOOLS_FLAGS_TO_PASS_NATIVE): Pass $(CXX) as CXX.
            (TOOLS_FLAGS_TO_PASS_RE): Likewise.
    
    From-SVN: r265831

commit 5ae8fff50cd17250f1a514cafe31e7d629deaf0b
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Nov 6 00:17:02 2018 +0000

    Daily bump.
    
    From-SVN: r265825

commit c9559a6773bc51d43e1edb8859f0e968e7f2d437
Author: Ian Lance Taylor <ian@gcc.gnu.org>
Date:   Mon Nov 5 21:01:19 2018 +0000

    compiler: handle abstract type in builtin numeric const value
    
        Builtin_call_expression::do_numeric_constant_value can be called by
        Array_type::verify_length before the determine types pass, so accept
        an abstract type.
    
        Test case is https://golang.org/cl/147537.
    
        Fixes golang/go#28601
    
        Reviewed-on: https://go-review.googlesource.com/c/147442
    
    From-SVN: r265819

commit 0e52f0daf3e009b74bfc4b713b3082fcce519a0f
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Mon Nov 5 15:12:15 2018 +0100

    re PR tree-optimization/87859 (store-merging miscompilation of mesa)
    
            PR tree-optimization/87859
            * gimple-ssa-store-merging.c (struct merged_store_group): Add
            first_nonmergeable_order member.
            (merged_store_group::merged_store_group): Initialize them.
            (imm_store_chain_info::coalesce_immediate_stores): Don't merge
            stores with order >= first_nonmergeable_order.
            Set merged_store->first_nonmergeable_order if we've skipped any
            stores.  Attempt to merge overlapping INTEGER_CST stores that
            we would otherwise skip.
    
            * gcc.dg/store_merging_24.c: New test.
            * gcc.dg/store_merging_25.c: New test.
    
    From-SVN: r265807

commit 97b638b9c0e67a81bd10fb64461f87fd32f1ef75
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Mon Nov 5 15:11:32 2018 +0100

    re PR sanitizer/87837 (-O2 -fsanitize=signed-integer-overflow misses overflows on x86-64)
    
            PR sanitizer/87837
            * match.pd (X + Y < X): Don't optimize if TYPE_OVERFLOW_SANITIZED.
    
            * c-c++-common/ubsan/pr87837.c: New test.
    
    From-SVN: r265806

commit 193492075eef95961b0ca96e297106ad0d95c611
Author: Jakub Jelinek <jakub@gcc.gnu.org>
Date:   Mon Nov 5 15:10:16 2018 +0100

    backport: re PR fortran/87725 (OpenMP 4.5 clause schedule(simd,monotonic:static) not understood)
    
            Backported from mainline
            2018-10-25  Jakub Jelinek  <jakub@redhat.com>
    
            PR fortran/87725
            * openmp.c (gfc_match_omp_clauses): Parse simd, monotonic and
            nonmonotonic modifiers regardless of if they have been parsed
            already or if the opposite one has.  Fix up check whether
            comma after modifier should be parsed.
            (resolve_omp_clauses): Diagnose schedule modifier restrictions.
    
            * c-c++-common/gomp/schedule-modifiers-1.c (bar): Separate modifier
            from kind with a colon rather than comma.
            * gfortran.dg/gomp/schedule-modifiers-1.f90: New test.
            * gfortran.dg/gomp/schedule-modifiers-2.f90: New test.
    
    From-SVN: r265805

commit 88d9906ad71920ae3f450e23542c072faabe21ff
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Mon Nov 5 15:09:10 2018 +0100

    backport: re PR c++/86288 (Recognize __gnu and/or __gnu__ as attribute-namespace)
    
            Backported from mainline
            2018-10-24  Jakub Jelinek  <jakub@redhat.com>
    
            PR c++/86288
            * parser.c (cp_parser_std_attribute): Canonicalize attr_ns, and when
            :: is not present and attr_ns non-NULL, canonicalize also attr_id.
            (cp_parser_attribute_spec): Fix comment typo.
    
            * g++.dg/cpp0x/gen-attrs-66.C: New test.
    
    From-SVN: r265803

commit 9546e9c11b00eee2d473412172fd539e09b58023
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Mon Nov 5 15:08:30 2018 +0100

    backport: re PR middle-end/87647 (ICE on valid code in decode_addr_const, at varasm.c:2958)
    
            Backported from mainline
            2018-10-20  Jakub Jelinek  <jakub@redhat.com>
    
            PR middle-end/87647
            * varasm.c (decode_addr_const): Handle COMPOUND_LITERAL_EXPR.
    
            * gcc.c-torture/compile/pr87647.c: New test.
    
    From-SVN: r265802

commit 7ca274b4b83fdc2c948db2039001f07726ef43e4
Author: Jakub Jelinek <jakub@gcc.gnu.org>
Date:   Mon Nov 5 15:07:47 2018 +0100

    backport: re PR middle-end/85488 (segmentation fault when compiling code using the ordered(n) clause in OpenMP 4.5)
    
            Backported from mainline
            2018-10-19  Jakub Jelinek  <jakub@redhat.com>
    
            PR middle-end/85488
            PR middle-end/87649
            * omp-low.c (check_omp_nesting_restrictions): Diagnose ordered without
            depend closely nested inside of loop with ordered clause with
            a parameter.
    
            * c-c++-common/gomp/doacross-2.c: New test.
            * c-c++-common/gomp/sink-3.c: Expect another error during error
            recovery.
    
    From-SVN: r265801

commit 6da34c523d4e03062bf19a3415c0a69f67274abe
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Nov 5 00:16:37 2018 +0000

    Daily bump.
    
    From-SVN: r265782

commit e040377f141871956a682977e8fb1631b0a3d1b6
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Nov 4 00:16:39 2018 +0000

    Daily bump.
    
    From-SVN: r265772

commit 2af2edf9c12255712f893c5621348bc9cdf7d0d8
Author: Tobias Burnus <burnus@net-b.de>
Date:   Sat Nov 3 13:16:34 2018 +0100

    backport: re PR fortran/87597 (wrong result with matmul inlining)
    
    2019-11-03  Tobias Burnus  <burnus@net-b.de>
            Thomas Koenig  <tkoenig@gcc.gnu.org>
    
            Backport from trunk
            PR fortran/87597
            * expr.c (gfc_simplify_expr): Avoid simplifying
            the 'array' argument to lbound/ubound/lcobound/
            ucobound.
    
    2018-11-03  Tobias Burnus  <burnus@net-b.de>
            Thomas Koenig  <tkoenig@gcc.gnu.org>
    
            Backport from trunk
            PR fortran/87597
            * gfortran.dg/inline_matmul_24.f90: New.
    
    
    
    Co-Authored-By: Thomas Koenig <tkoenig@gcc.gnu.org>
    
    From-SVN: r265768

commit b19aac6054ae643a3a6908831cf202fc05f06ae0
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Nov 3 00:17:38 2018 +0000

    Daily bump.
    
    From-SVN: r265765

commit d3f1c09416b79826eb51d244b39a383208abbe1a
Author: Tamar Christina <tamar.christina@arm.com>
Date:   Fri Nov 2 15:27:30 2018 +0000

    Fix mingw-w64 Ada native bootstrap (PR81878).
    
    Due to the changes in PR81878 builds of GCC8 and trunk are impossible
    with Ada enabled[1][2].
    
    The reason the patch breaks the bootstrap is due to how gnatlink receives it's
    arguments.
    
    gnatlink is usually invoked as
    
            $(GNATLINK) -v gnatcmd -o ../../gnat$(exeext) \
              --GCC="$(CC) $(ADA_INCLUDES)" --LINK="$(GCC_LINK)" $(TOOLS_LIBS)
    
    so it passes $(CC) and $(GCC_LINK) as quoted arguments to the program.
    Because of this quotation the msys2 shell does not translate any paths in
    $(CC) and $(GCC_LINK) from their Unix version to their Windows version.
    
    Furthermore because there are multiple paths in the values separated by space
    and because the paths often contain a prefix like -L (e.g. -L/f/foo) we can't
    use `fix_srcfile_path` to fix this.
    
    An alternative solution would have been to create a stub program that echos the
    commandline options it receives back, and calling this program with $(CC) and $(GCC_LINK)
    unquoted to get them translated.  However this was a bit more invasive.
    
    So instead for native compilations we add -B../../ such that it picks up the lto plugin
    from the previous built compiler.  Since it's native there shouldn't be a mismatch here.
    
    [1] https://github.com/Alexpux/MINGW-packages/pull/3877#issuecomment-408651809
    [2] https://gcc.gnu.org/ml/gcc/2018-07/msg00410.html
    
    gnattools/ChangeLog:
    
    2018-11-02  Tamar Christina  <tamar.christina@arm.com>
    
            Backport from mainline
            2018-10-29  Tamar Christina  <tamar.christina@arm.com>
    
            PR ada/81878
            * Makefile.in (TOOLS_FLAGS_TO_PASS_NATIVE): Add -B ../../.
    
    From-SVN: r265749

commit e2fb47babefbe41d3134ced077e70daf397a5048
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Nov 2 00:17:10 2018 +0000

    Daily bump.
    
    From-SVN: r265737

commit 12f9ae6f3aaf972f456b4e0ac0d4a16f8ed64136
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Nov 1 00:17:13 2018 +0000

    Daily bump.
    
    From-SVN: r265706

commit ec9b67e9704f8782eb6fd05d0171d8bc03ada333
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Wed Oct 31 13:03:25 2018 +0000

    PR libstdc++/87822 fix layout change for nested std::pair
    
    The introduction of the empty __pair_base base class for PR 86751
    changed the layout of std::pair<std::pair<...>, ...>. The outer pair and
    its first member both have a base class of the same type, which cannot
    exist at the same address. This causes the first member to be at a
    non-zero offset.
    
    The solution is to make the base class depend on the template
    parameters, so that each pair type has a different base class type,
    which allows the base classes of the outer pair and its first member to
    have the same address.
    
            PR libstdc++/87822
            * include/bits/stl_pair.h (__pair_base): Change to class template.
            (pair): Make base class type depend on template parameters.
            * testsuite/20_util/pair/87822.cc: New test.
    
    From-SVN: r265681

commit 8f4874eac1be98ce58ec1ec41fa4be4109f18e12
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Oct 31 00:17:08 2018 +0000

    Daily bump.
    
    From-SVN: r265651

commit 265de8f748cc9c5d7791e407a4884741db0b9060
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Tue Oct 30 15:15:56 2018 +0000

    PR libstdc++/87809 avoid invalid expressions in exception specifications
    
    If the allocator isn't default constructible then checking if the
    default constructor throws in an exception specification makes the
    declaration invalid. Use the type trait instead.
    
    Backport from mainline
    2018-10-30  Jonathan Wakely  <jwakely@redhat.com>
    
            PR libstdc++/87809
            * include/bits/forward_list.h (_Fwd_list_impl::_Fwd_list_impl()): Use
            trait in exception-specification instead of possibly invalid
            expression.
            * include/bits/stl_bvector.h (_Bvector_impl::_Bvector_impl()):
            Likewise.
            * include/bits/stl_list.h (_List_impl::_List_impl()): Likewise.
            * testsuite/23_containers/forward_list/cons/87809.cc: New test.
            * testsuite/23_containers/list/cons/87809.cc: New test.
            * testsuite/23_containers/vector/bool/cons/87809.cc: New test.
            * testsuite/23_containers/vector/cons/87809.cc: New test.
    
    From-SVN: r265629

commit b6d6e2ac1ceaebe2f7445e8ef0d8057524bcc5cd
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Oct 30 00:16:32 2018 +0000

    Daily bump.
    
    From-SVN: r265613

commit 1822cfb03239bc09a86e031e05c8c7021404f562
Author: Richard Biener <rguenther@suse.de>
Date:   Mon Oct 29 14:13:56 2018 +0000

    backport: re PR debug/87428 ("Missed" inline instances cause bogus DWARF to be emitted)
    
    2018-10-29  Richard Biener  <rguenther@suse.de>
    
            Backport from mainline
            2018-09-26  Richard Biener  <rguenther@suse.de>
    
            PR debug/87428
            PR debug/87362
            * tree-inline.c (expand_call_inline): When the location
            of the call is UNKNOWN_LOCATION use DECL_SOURCE_LOCATION
            or BUILTINS_LOCATION for the BLOCK_SOURCE_LOCATION of
            the inserted BLOCK to make inlined_function_outer_scope_p
            recognize it.
            * dwarf2out.c (add_call_src_coords_attributes): Do not add
            coords for reserved locations.
    
    From-SVN: r265590

commit 545b164fcdd971748f7f29f7aa1c86986517a2aa
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Oct 29 00:16:34 2018 +0000

    Daily bump.
    
    From-SVN: r265580

commit 684305c782fe7929e2fc9bce3b5ec14ee62963e8
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Sun Oct 28 22:56:02 2018 +0000

    fix PR81033 and associated.
    
    2018-10-28  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline
            2018-08-22  Iain Sandoe  <iain@sandoe.co.uk>
    
            PR bootstrap/81033
            PR target/81733
            PR target/52795
            * gcc/dwarf2out.c (FUNC_SECOND_SECT_LABEL): New.
            (dwarf2out_switch_text_section): Generate a local label for the second
            function sub-section and apply it as the second FDE start label.
            * gcc/final.c (final_scan_insn_1): Emit second FDE label after the second
            sub-section start.
    
    From-SVN: r265576

commit 51454a0efb2a9485fe94c07ab34287fb6da56f3a
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Sun Oct 28 11:22:17 2018 +0000

    darwin - remove unused target hook.
    
    2018-10-28  Iain Sandoe  <iain@sandoe.co.uk>
    
            Backport from mainline
            2018-08-15  Iain Sandoe  <iain@sandoe.co.uk>
    
            * config/darwin.c
            (darwin_function_switched_text_sections): Delete.
            * gcc/config/darwin.h
            (TARGET_ASM_FUNCTION_SWITCHED_TEXT_SECTIONS): Likewise.
    
    From-SVN: r265571

commit dda5fb00c47532d44a708f67c5a6f889f8138869
Author: Iain Sandoe <iain@sandoe.co.uk>
Date:   Sun Oct 28 10:02:06 2018 +0000

    darwin - fix powerpc-darwin stack alignment issue
    
    2018-10-28  Iain Sandoe  <iain@sandoe.co.uk>
    
            backport from mainline.
            2018-10-28  Iain Sandoe  <iain@sandoe.co.uk>
    
            PR target/85669
            * config/rs6000/darwin.h (STACK_BOUNDARY): New.
            (RS6000_STARTING_FRAME_OFFSET): Adjust to preserve 16byte alignment.
            (STACK_DYNAMIC_OFFSET): Likewise.
    
    From-SVN: r265569

commit 197fb1e45715f586a4975ba397d7d4d27e02892d
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Oct 28 00:16:38 2018 +0000

    Daily bump.
    
    From-SVN: r265563

commit c61692e32c2c84a2f5410dc900c99b1f55707e83
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Oct 27 00:16:37 2018 +0000

    Daily bump.
    
    From-SVN: r265553

commit 17d644f32f26f2c3625edac9ba58528ebc8dfe0c
Author: Bill Schmidt <wschmidt@linux.ibm.com>
Date:   Fri Oct 26 18:50:51 2018 +0000

    backport: re PR tree-optimization/87473 (ICE in create_add_on_incoming_edge, at gimple-ssa-strength-reduction.c:2344)
    
    [gcc]
    
    2018-10-26  Bill Schmidt  <wschmidt@linux.ibm.com>
    
            Backport from mainline
            2018-10-19  Bill Schmidt  <wschmidt@linux.ibm.com>
    
            PR tree-optimization/87473
            * gimple-ssa-strength-reduction.c (record_phi_increments_1): For
            phi arguments identical to the base expression of the phi
            candidate, record a phi-adjust increment of zero minus the index
            expression of the hidden basis.
            (phi_incr_cost_1): For phi arguments identical to the base
            expression of the phi candidate, the difference to compare against
            the increment is zero minus the index expression of the hidden
            basis, and there is no potential savings from replacing the (phi)
            statement.
            (ncd_with_phi): For phi arguments identical to the base expression
            of the phi candidate, the difference to compare against the
            increment is zero minus the index expression of the hidden basis.
            (all_phi_incrs_profitable_1): For phi arguments identical to the
            base expression of the phi candidate, the increment to be checked
            for profitability is zero minus the index expression of the hidden
            basis.
    
    [gcc/testsuite]
    
    2018-10-26  Bill Schmidt  <wschmidt@linux.ibm.com>
    
            Backport from mainline
            2018-10-19  Bill Schmidt  <wschmidt@linux.ibm.com>
    
            PR tree-optimization/87473
            * gcc.c-torture/compile/pr87473.c: New file.
    
    From-SVN: r265543

commit 43ccf4f0019781ec6a32a12a367ae829df6ae5b7
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Oct 26 00:17:01 2018 +0000

    Daily bump.
    
    From-SVN: r265513

commit 4b466771cdb3e01fdbb454ba84d0baccd6c59b72
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Thu Oct 25 17:21:19 2018 +0100

    PR libstdc++/87749 fix (and optimize) string move construction
    
    The move constructor for the SSO string uses assign(const basic_string&)
    when either:
    
    (1) the source string is "local" and so the contents of the small string
    buffer need to be copied, or
    
    (2) the allocator does not propagate and is_always_equal is false.
    
    Case (1) is suboptimal, because the assign member is not noexcept and
    the compiler isn't smart enough to see it won't actually throw in this
    case. This causes extra code in the move assignment operator so that any
    exception will be turned into a call to std::terminate. This can be
    fixed by copying small strings inline instead of calling assign.
    
    Case (2) is a bug, because the specific instances of the allocators
    could be equal even if is_always_equal is false. This can result in an
    unnecessary deep copy (and potentially-throwing allocation) when the
    storage should be moved. This can be fixed by simply checking if the
    allocators are equal.
    
            PR libstdc++/87749
            * include/bits/basic_string.h [_GLIBCXX_USE_CXX11_ABI]
            (basic_string::operator=(basic_string&&)): For short strings copy the
            buffer inline. Only fall back to using assign(const basic_string&) to
            do a deep copy when reallocation is needed.
            * testsuite/21_strings/basic_string/modifiers/assign/char/87749.cc:
            New test.
            * testsuite/21_strings/basic_string/modifiers/assign/char/
            move_assign_optim.cc: New test.
            * testsuite/21_strings/basic_string/modifiers/assign/wchar_t/87749.cc:
            New test.
            * testsuite/21_strings/basic_string/modifiers/assign/wchar_t/
            move_assign_optim.cc: New test.
    
    From-SVN: r265496

commit cf0fcec9cf9910ff42c699ad7c101fda930fd65a
Author: Richard Biener <rguenther@suse.de>
Date:   Thu Oct 25 13:46:20 2018 +0000

    re PR tree-optimization/87665 (gcc HEAD (svn: 265340) breaks elements on resize)
    
    2018-10-25  Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/87665
            PR tree-optimization/87745
            * tree-vectorizer.h (get_earlier_stmt): Remove.
            (get_later_stmt): Pick up UID from the original non-pattern stmt.
    
            * gfortran.dg/20181025-1.f: New testcase.
    
    From-SVN: r265487

commit 9563cc2660ab7aa2eff8e697270f7e211e55c55a
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Oct 25 00:16:30 2018 +0000

    Daily bump.
    
    From-SVN: r265477

commit aa9628b2f4fc0ac4c7ed8aaaa071ec2d940e09bd
Author: Richard Biener <rguenther@suse.de>
Date:   Wed Oct 24 06:53:57 2018 +0000

    re PR tree-optimization/87665 (gcc HEAD (svn: 265340) breaks elements on resize)
    
    2018-10-24  Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/87665
            * tree-vect-data-refs.c (vect_preserves_scalar_order_p): Adjust
            to reflect reality.
    
            * gcc.dg/torture/pr87665.c: New testcase.
    
    From-SVN: r265453

commit 87f4cb328bf727d9303f2dcf3052289c438b3a20
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Oct 24 00:16:50 2018 +0000

    Daily bump.
    
    From-SVN: r265447

commit 57a09c0038fb45db758dbdb0d8ac1383e3b05d77
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Tue Oct 23 16:29:03 2018 +0100

    PR libstdc++/87704 fix unique_ptr(nullptr_t) constructors
    
    Using a delegating constructor to implement these constructors means
    that they instantiate the destructor, which requires the element_type to
    be complete. In C++11 and C++14 they were specified to be delegating,
    but that was changed as part of LWG 2801 so in C++17 they don't require
    a complete type (as was intended all along).
    
            PR libstdc++/87704
            * include/bits/unique_ptr.h (unique_ptr::unique_ptr(nullptr_t)): Do
            not delegate to default constructor.
            (unique_ptr<T[], D>::unique_ptr(nullptr_t)): Likewise.
            * testsuite/20_util/unique_ptr/cons/incomplete.cc: New test.
    
    From-SVN: r265428

commit 0886c31ccc6a2ac274a47d11ff8c6a66223b1305
Author: Tom de Vries <tdevries@suse.de>
Date:   Tue Oct 23 15:01:12 2018 +0000

    backport "[c++] Fix DECL_BY_REFERENCE of clone parms"
    
    Consider test.C compiled at -O0 -g:
    ...
    class string {
    public:
      string (const char *p) { this->p = p ; }
      string (const string &s) { this->p = s.p; }
    
    private:
      const char *p;
    };
    
    class foo {
    public:
      foo (string dir_hint) {}
    };
    
    int
    main (void)
    {
      std::string s = "This is just a string";
      foo bar(s);
      return 0;
    }
    ...
    
    When parsing foo::foo, the dir_hint parameter gets a DECL_ARG_TYPE of
    'struct string & restrict'.  Then during finish_struct, we call
    clone_constructors_and_destructors and create clones for foo::foo, and
    set the DECL_ARG_TYPE in the same way.
    
    Later on, during finish_function, cp_genericize is called for the original
    foo::foo, which sets the type of parm dir_hint to DECL_ARG_TYPE, and sets
    DECL_BY_REFERENCE of dir_hint to 1.
    
    After that, during maybe_clone_body update_cloned_parm is called with:
    ...
    (gdb) call debug_generic_expr (parm.typed.type)
    struct string & restrict
    (gdb) call debug_generic_expr (cloned_parm.typed.type)
    struct string
    ...
    The type of the cloned_parm is then set to the type of parm, but
    DECL_BY_REFERENCE is not set.
    
    When doing cp_genericize for the clone later on,
    TREE_ADDRESSABLE (TREE_TYPE ()) is no longer true for the updated type for
    the parm, so DECL_BY_REFERENCE is not set there either.
    
    The missing DECL_BY_REFERENCE on cloned_parm causes incorrect debug info to be
    generated.
    
    This patch fixes the problem by copying DECL_BY_REFERENCE in update_cloned_parm.
    
    Bootstrapped and reg-tested on x86_64.
    
    2018-10-23  Tom de Vries  <tdevries@suse.de>
    
            backport from trunk:
            2018-07-31  Tom de Vries  <tdevries@suse.de>
    
            PR debug/86687
            * optimize.c (update_cloned_parm): Copy DECL_BY_REFERENCE.
    
            * g++.dg/guality/pr86687.C: New test.
    
    From-SVN: r265426

commit 06c0680abd6c8cfa529c974727d4c24eb269b8b3
Author: Richard Biener <rguenther@suse.de>
Date:   Tue Oct 23 09:59:38 2018 +0000

    backport: re PR other/86198 (Libbacktrace does not properly work with ".note.gnu.build-id" section)
    
    2018-10-23  Richard Biener  <rguenther@suse.de>
    
            Backport from mainline
            2018-06-21  Denis Khalikov <d.khalikov@partner.samsung.com>
    
            PR other/86198
            * elf.c (elf_add): Increase ".note.gnu.build-id" section size
            checking up to 36 bytes.
    
    From-SVN: r265419

commit e06e9a2309871a437b3babb31226a7019c65467b
Author: Richard Biener <rguenther@suse.de>
Date:   Tue Oct 23 09:35:31 2018 +0000

    re PR tree-optimization/87700 (Compile time hog w/ -O1)
    
    2018-10-23  Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/87700
            * tree-ssa-copy.c (set_copy_of_val): Fix change detection logic.
    
            * gcc.dg/torture/pr87700.c: New testcase.
    
    From-SVN: r265417

commit 5318d9f9806a0c0288a8c7080dbe22e56847ad4f
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Oct 23 00:16:59 2018 +0000

    Daily bump.
    
    From-SVN: r265407

commit 469cfe29f6aafbe6eaa1385163dd963fd42c2e8e
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Mon Oct 22 11:08:47 2018 +0000

    utils.c (unchecked_convert): Use local variables for the biased and reverse SSO attributes of both types.
    
            * gcc-interface/utils.c (unchecked_convert): Use local variables for
            the biased and reverse SSO attributes of both types.
            Further extend the processing of integral types in the presence of
            reverse SSO to all scalar types.
    
    From-SVN: r265382

commit dcdb8c73ac82a6ed58c4ecaf023deab23e68f6d6
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Mon Oct 22 10:44:56 2018 +0000

    trans.c (Pragma_to_gnu): Use a simple memory constraint in all cases.
    
            * gcc-interface/trans.c (Pragma_to_gnu) <Pragma_Inspection_Point>: Use
            a simple memory constraint in all cases.
    
    From-SVN: r265379

commit 885fd49458ae0cc546c5e8786c7aba9673d11183
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Oct 22 00:16:58 2018 +0000

    Daily bump.
    
    From-SVN: r265365

commit aa5b379dafc34027f2a93fb3abd023e379c65f2e
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Oct 21 00:16:29 2018 +0000

    Daily bump.
    
    From-SVN: r265348

commit abf96148ecaeb9b914d61c610a0f8923abde8767
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Oct 20 00:16:59 2018 +0000

    Daily bump.
    
    From-SVN: r265338

commit 099b5658108bbcdaf9e6903fafc61ad4f2a3189f
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Fri Oct 19 20:27:36 2018 +0100

    Fix compilation error with _GLIBCXX_PARALLEL
    
            * include/bits/regex_executor.tcc (_Backref_matcher::_M_apply): Use
            _GLIBCXX_STD_A to refer to normal mode algorithms.
            * testsuite/28_regex/headers/regex/parallel_mode.cc: New test.
            * testsuite/28_regex/headers/regex/std_c++0x_neg.cc: Remove empty
            whitespace.
    
    From-SVN: r265320

commit 9749125704fd8fe8f7aef65fb3b421455c96e72b
Author: Richard Biener <rguenther@suse.de>
Date:   Fri Oct 19 14:26:35 2018 +0000

    re PR tree-optimization/87645 (gcc hangs up on vr_values::vrp_visit_assignment_or_call)
    
    2018-10-19  Richard Biener  <rguenther@suse.de>
    
            PR middle-end/87645
            Backport from mainline
            2018-07-12  Richard Biener  <rguenther@suse.de>
    
            * tree-ssa-sccvn.c (mprts_hook_cnt): Remove.
            (vn_lookup_simplify_result): Remove recursion limit applied
            here.
            (vn_nary_build_or_lookup_1): Adjust.
            (try_to_simplify): Likewise.
            * gimple-match-head.c (gimple_resimplify1): Instead apply one
            here.
            (gimple_resimplify2): Likewise.
            (gimple_resimplify3): Likewise.
            (gimple_resimplify4): Likewise.
    
            * gcc.dg/torture/pr87645.c: New testcase.
    
    From-SVN: r265315

commit 55f5384c0197fac07c632f99bd5a40045c77a8ae
Author: Andreas Krebbel <krebbel@linux.ibm.com>
Date:   Fri Oct 19 08:53:39 2018 +0000

    S/390: Fix problem with vec_init expander
    
    gcc/ChangeLog:
    
    2018-10-19  Andreas Krebbel  <krebbel@linux.ibm.com>
    
            Backport from mainline
            2018-10-15  Andreas Krebbel  <krebbel@linux.ibm.com>
    
            * config/s390/s390.c (s390_expand_vec_init): Force vector element
            into reg if it isn't a general operand.
    
    gcc/testsuite/ChangeLog:
    
    2018-10-19  Andreas Krebbel  <krebbel@linux.ibm.com>
    
            Backport from mainline
            2018-10-15  Andreas Krebbel  <krebbel@linux.ibm.com>
    
            * g++.dg/vec-init-1.C: New test.
    
    From-SVN: r265308

commit 87806b46f06f74788e4004d223d63647ffd17460
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Oct 19 00:17:00 2018 +0000

    Daily bump.
    
    From-SVN: r265302

commit 117a15b30d01853070711b8f324ceb7fb024deb0
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Thu Oct 18 18:40:29 2018 +0100

    PR libstdc++/87641 correctly initialize accumulator in valarray::sum()
    
    Use the value of the first element as the initial value of the
    __valarray_sum accumulator. Value-initialization might not create the
    additive identity for the value type.
    
            PR libstdc++/87641
            * include/bits/valarray_array.h (__valarray_sum): Use first element
            to initialize accumulator instead of value-initializing it.
            * testsuite/26_numerics/valarray/87641.cc: New test.
    
    From-SVN: r265275

commit 39f7ea2368560f87a4b5f6a635f23814e58d8444
Author: Richard Biener <rguenther@suse.de>
Date:   Thu Oct 18 08:51:32 2018 +0000

    re PR tree-optimization/87087 (Optimization hangs up and consumes over 15Gb of memory)
    
    2018-10-18  Richard Biener  <rguenther@suse.de>
    
            PR middle-end/87087
            Revert
            2018-02-07  Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/84204
            * tree-chrec.c (chrec_fold_plus_1): Remove size limiting in
            this place.
    
            * gcc.dg/torture/pr87087.c: New testcase.
            * gcc.dg/graphite/pr84204.c: XFAIL.
            * gcc.dg/graphite/pr85935.c: Likewise.
    
    From-SVN: r265262

commit 4cb439c3ab595b5f33cf9b28e05aa8e3787ad683
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Oct 18 00:16:45 2018 +0000

    Daily bump.
    
    From-SVN: r265254

commit 9bc2eac754876837b5301b413c381ad758376796
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Wed Oct 17 17:52:10 2018 +0000

    re PR middle-end/87623 (bytes swapped in register when comparing cause fail when compiled with  -O1 or higher)
    
            PR middle-end/87623
            * fold-const.c (fold_truth_andor_1): If the right side is not constant,
            bail out if both sides do not have the same storage order.
    
    From-SVN: r265243

commit 29868972644e77733635ee63c2cfd25f7cf40f8c
Author: Richard Biener <rguenth@gcc.gnu.org>
Date:   Wed Oct 17 08:49:00 2018 +0000

    backport: [multiple changes]
    
    2018-10-16  Richard Biener  <rguenther@suse.de>
    
            Backport from mainline
            2018-10-08  Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/63155
            * tree-ssa-propagate.c (add_ssa_edge): Do cheap check first.
            (ssa_propagation_engine::ssa_propagate): Remove redundant
            bitmap bit clearing.
    
            2018-10-05  Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/63155
            * tree-ssa-ccp.c (ccp_propagate::visit_phi): Avoid excess
            vertical space in dumpfiles.
            * tree-ssa-propagate.h
            (ssa_propagation_engine::process_ssa_edge_worklist): Remove.
            * tree-ssa-propagate.c (cfg_blocks_back): New global.
            (ssa_edge_worklist_back): Likewise.
            (curr_order): Likewise.
            (cfg_blocks_get): Remove abstraction.
            (cfg_blocks_add): Likewise.
            (cfg_blocks_empty_p): Likewise.
            (add_ssa_edge): Add to current or next worklist based on
            RPO index.
            (add_control_edge): Likewise.
            (ssa_propagation_engine::process_ssa_edge_worklist): Fold
            into ...
            (ssa_propagation_engine::ssa_propagate): ... here.  Unify
            iteration from CFG and SSA edge worklist so we process
            everything in RPO order, prioritizing forward progress
            over iteration.
            (ssa_prop_init): Allocate new worklists, do not dump
            immediate uses.
            (ssa_prop_fini): Free new worklists.
    
            2018-09-24  Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/63155
            * tree-ssa-propagate.c (add_ssa_edge): Avoid adding PHIs to
            the worklist when the edge of the respective argument isn't
            executable.
    
    From-SVN: r265235

commit aa0713fccac9e040fa57ff967e7cbae03dfca538
Author: Richard Biener <rguenther@suse.de>
Date:   Wed Oct 17 07:01:28 2018 +0000

    backport: re PR middle-end/63155 (memory hog)
    
    2018-10-17  Richard Biener  <rguenther@suse.de>
    
            Backport from mainline
            2018-10-08  Richard Sandiford  <richard.sandiford@arm.com>
    
            PR middle-end/63155
            * gimple-ssa-backprop.c (backprop::intersect_uses): Use
            FOR_EACH_IMM_USE_FAST instead of FOR_EACH_IMM_USE_STMT.
    
    From-SVN: r265231

commit 2814b39a804c653d11560c3916bb1f263fb45a9c
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Oct 17 00:16:53 2018 +0000

    Daily bump.
    
    From-SVN: r265227

commit aa90684f7e253c0dd98b3254265acccabfb04371
Author: Joseph Myers <joseph@codesourcery.com>
Date:   Wed Oct 17 01:10:56 2018 +0100

    * es.po: Update.
    
    From-SVN: r265224

commit c94d7f27169b702da873f73efe0e98545ba403f1
Author: Richard Biener <rguenther@suse.de>
Date:   Tue Oct 16 13:25:43 2018 +0000

    re PR tree-optimization/87465 (Loop removal regression)
    
    2018-10-16  Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/87465
            * gcc.dg/tree-ssa/cunroll-15.c: Fix pattern.
    
    From-SVN: r265194

commit 526b5eab8122b5a62585416d8bb581445438f39c
Author: Richard Biener <rguenther@suse.de>
Date:   Tue Oct 16 13:23:56 2018 +0000

    backport: [multiple changes]
    
    2018-10-16  Richard Biener  <rguenther@suse.de>
    
            Backport from mainline
            2018-10-08  Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/63155
            * tree-ssa-propagate.c (add_ssa_edge): Do cheap check first.
            (ssa_propagation_engine::ssa_propagate): Remove redundant
            bitmap bit clearing.
    
            2018-10-05  Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/63155
            * tree-ssa-ccp.c (ccp_propagate::visit_phi): Avoid excess
            vertical space in dumpfiles.
            * tree-ssa-propagate.h
            (ssa_propagation_engine::process_ssa_edge_worklist): Remove.
            * tree-ssa-propagate.c (cfg_blocks_back): New global.
            (ssa_edge_worklist_back): Likewise.
            (curr_order): Likewise.
            (cfg_blocks_get): Remove abstraction.
            (cfg_blocks_add): Likewise.
            (cfg_blocks_empty_p): Likewise.
            (add_ssa_edge): Add to current or next worklist based on
            RPO index.
            (add_control_edge): Likewise.
            (ssa_propagation_engine::process_ssa_edge_worklist): Fold
            into ...
            (ssa_propagation_engine::ssa_propagate): ... here.  Unify
            iteration from CFG and SSA edge worklist so we process
            everything in RPO order, prioritizing forward progress
            over iteration.
            (ssa_prop_init): Allocate new worklists, do not dump
            immediate uses.
            (ssa_prop_fini): Free new worklists.
    
            2018-09-24  Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/63155
            * tree-ssa-propagate.c (add_ssa_edge): Avoid adding PHIs to
            the worklist when the edge of the respective argument isn't
            executable.
    
    From-SVN: r265193

commit a85b3aaca42d6e8213e8e3cec3c27b3179984e6b
Author: Wilco Dijkstra <wdijkstr@arm.com>
Date:   Tue Oct 16 12:26:00 2018 +0000

    [AArch64] Fix PR87511
    
    As mentioned in PR87511, the shift used in aarch64_mask_and_shift_for_ubfiz_p
    should be evaluated as a HOST_WIDE_INT rather than int.
    
    Backported from mainline
    
        gcc/
            PR target/87511
            * config/aarch64/aarch64.c (aarch64_mask_and_shift_for_ubfiz_p):
            Use HOST_WIDE_INT_1U for shift.
    
        testsuite/
            PR target/87511
            * gcc.target/aarch64/pr87511.c: Add new test.
    
    From-SVN: r265191

commit 94204fc0b7950a324591d2fe63dea801595d0b6f
Author: Richard Biener <rguenther@suse.de>
Date:   Tue Oct 16 11:23:22 2018 +0000

    backport: re PR middle-end/63155 (memory hog)
    
    2018-10-16  Richard Biener  <rguenther@suse.de>
    
            Backport from mainline
            2018-09-18  Richard Biener  <rguenther@suse.de>
    
            PR middle-end/63155
            * tree-ssa-coalesce.c (tree_int_map_hasher): Remove.
            (compute_samebase_partition_bases): Likewise.
            (coalesce_ssa_name): Always use compute_optimized_partition_bases.
            (gimple_can_coalesce_p): Simplify.
    
    From-SVN: r265189

commit 886622e6f84ad2b85d91e57a9cc7ddf1f8b2ed84
Author: Richard Biener <rguenther@suse.de>
Date:   Tue Oct 16 07:28:49 2018 +0000

    backport: [multiple changes]
    
    2018-10-16  Richard Biener  <rguenther@suse.de>
    
            Backport from mainline
            2018-10-15  Richard Biener  <rguenther@suse.de>
    
            PR middle-end/87610
            * tree-ssa-structalias.c (struct vls_data): Add escaped_p member.
            (visit_loadstore): When a used restrict tag escaped verify that
            the points-to solution of "other" pointers do not include
            escaped.
            (compute_dependence_clique): If a used restrict tag escaped
            communicated that down to visit_loadstore.
    
            * gcc.dg/torture/restrict-6.c: New testcase.
    
            2018-10-01  Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/87465
            * tree-ssa-loop-ivcanon.c (tree_estimate_loop_size): Fix typo
            causing branch miscounts.
    
            * gcc.dg/tree-ssa/cunroll-15.c: New testcase.
    
    From-SVN: r265185

commit 4f71f7313ff491144401010b78a40455d114297b
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Oct 16 00:16:55 2018 +0000

    Daily bump.
    
    From-SVN: r265182

commit 10e53d2c42bb9b774d349c11d99eaf293dbb41e9
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Mon Oct 15 15:00:02 2018 +0100

    Adjust test to pass with latest glibc
    
    Glibc changed the it_IT locales to use thousands separators,
    invalidating this test. Use nl_NL instead, as Dutch only uses grouping
    for money not numbers.
    
            * testsuite/22_locale/numpunct/members/char/3.cc: Adjust test to
            account for change to glibc it_IT localedata (glibc bz#10797).
    
    From-SVN: r265166

commit 15f6a5d05f3d60edcf0465f6298107a994df46c7
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Oct 15 00:16:48 2018 +0000

    Daily bump.
    
    From-SVN: r265154

commit 09b96ae10b6863084a2567c102ff3234e51b536d
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Oct 14 00:16:32 2018 +0000

    Daily bump.
    
    From-SVN: r265145

commit 67e4e4e815f3614abb0d291d1f888eeeec9e52ce
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Oct 13 00:16:32 2018 +0000

    Daily bump.
    
    From-SVN: r265138

commit d7230b2bd4dc70dbacbb42e370657e043a5ba865
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Fri Oct 12 13:28:54 2018 +0100

    PR libstdc++/86751 default assignment operators for std::pair
    
    The solution for PR 77537 causes ambiguities due to the extra copy
    assignment operator taking a __nonesuch_no_braces parameter. By making
    the base class non-assignable we don't need the extra deleted overload
    in std::pair. The copy assignment operator will be implicitly deleted
    (and the move assignment operator not declared) as needed. Without the
    additional user-provided operator in std::pair the ambiguity is avoided.
    
    Backport from mainline
    2018-07-31  Jonathan Wakely  <jwakely@redhat.com>
    
            PR libstdc++/86751
            * include/bits/stl_pair.h (__pair_base): New class with deleted copy
            assignment operator.
            (pair): Derive from __pair_base.
            (pair::operator=): Remove deleted overload.
            * python/libstdcxx/v6/printers.py (StdPairPrinter): New pretty printer
            so that new base class isn't shown in GDB.
            * testsuite/20_util/pair/86751.cc: New test.
            * testsuite/20_util/pair/ref_assign.cc: New test.
    
    From-SVN: r265089

commit c531fd682067225e991a4cf49ed9f422ad7b0856
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Fri Oct 12 13:28:48 2018 +0100

    PR libstdc++/78595 implement insertion into maps in terms of emplace
    
    C++14 simplified the specification of the generic insert function
    templates to be equivalent to calling emplace (or emplace_hint).
    Defining them in terms of emplace takes care of the problems described
    in PR 78595, ensuring a single conversion to value_type is done at the
    right time.
    
    Backport from mainline
    2018-09-03  Jonathan Wakely  <jwakely@redhat.com>
    
            PR libstdc++/78595
            * include/bits/stl_map.h (map::insert(_Pair&&))
            (map::insert(const_iterator, _Pair&&)): Do emplace instead of insert.
            * include/bits/stl_multimap.h (multimap::insert(_Pair&&))
            (multimap::insert(const_iterator, _Pair&&)): Likewise.
            * include/bits/unordered_map.h (unordered_map::insert(_Pair&&))
            (unordered_map::insert(const_iterator, _Pair&&))
            (unordered_multimap::insert(_Pair&&))
            (unordered_multimap::insert(const_iterator, _Pair&&)): Likewise.
            * include/std/type_traits (__enable_if_t): Define for C++11.
            * testsuite/23_containers/map/modifiers/insert/78595.cc: New test.
            * testsuite/23_containers/multimap/modifiers/insert/78595.cc: New test.
            * testsuite/23_containers/unordered_map/modifiers/78595.cc: New test.
            * testsuite/23_containers/unordered_multimap/modifiers/78595.cc: New
            test.
    
    From-SVN: r265088

commit 82c5c9db48af37202557584e35c7d52fe7b692bb
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Fri Oct 12 13:28:42 2018 +0100

    Fix __gnu_cxx::_Pointer_adapter for long long arithmetic
    
    Backport from mainline
    2018-08-30  Jonathan Wakely  <jwakely@redhat.com>
    
            * include/ext/pointer.h (_Pointer_adapter): Define operators for
            pointer arithmetic using long long offsets.
            * testsuite/ext/ext_pointer/1.cc: Test pointer arithmetic using
            long long values.
    
    From-SVN: r265087

commit aae522f1f09b9b01d021d5be8984c0c7c119ab86
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Fri Oct 12 13:28:36 2018 +0100

    Fix experimental::pmr typedefs and add tests
    
    The typedefs in <experimental/regex> and <experimental/string> don't
    need to be in the __cxx11 namespace, because they are only aliases and
    so will have the same mangled name as the underlying types.
    
    Backport from mainline
    2018-08-23  Jonathan Wakely  <jwakely@redhat.com>
    
            * testsuite/21_strings/basic_string/init-list.cc:
            Require cxx11-abi.
            * testsuite/experimental/polymorphic_allocator/pmr_typedefs_match.cc:
            Likewise.
            * testsuite/experimental/polymorphic_allocator/pmr_typedefs_string.cc:
            Likewise.
    
    Backport from mainline
    2018-08-22  Jonathan Wakely  <jwakely@redhat.com>
    
            PR libstdc++/87061
            * include/experimental/regex [!_GLIBCXX_USE_CXX11_ABI]
            (experimental::pmr::match_results, experimental::pmr::cmatch)
            (experimental::pmr::smatch, experimental::pmr::wcmatch)
            (experimental::pmr::wsmatch): Do not declare for gcc4-compatible ABI,
            because COW strings don't support C++11 allocator model.
            * include/experimental/string [!_GLIBCXX_USE_CXX11_ABI]
            (experimental::pmr::basic_string, experimental::pmr::string)
            (experimental::pmr::u16string, experimental::pmr::u32string)
            (experimental::pmr::wstring): Likewise.
    
    Backport from mainline
    2018-08-15  Jonathan Wakely  <jwakely@redhat.com>
    
            * include/experimental/regex: Remove begin/end macros for namespace.
            * include/experimental/string: Likewise.
            * testsuite/experimental/polymorphic_allocator/pmr_typedefs_deque.cc:
            New test.
            * testsuite/experimental/polymorphic_allocator/
            pmr_typedefs_forward_list.cc: New test.
            * testsuite/experimental/polymorphic_allocator/pmr_typedefs_list.cc:
            New test.
            * testsuite/experimental/polymorphic_allocator/pmr_typedefs_map.cc:
            New test.
            * testsuite/experimental/polymorphic_allocator/pmr_typedefs_match.cc:
            New test.
            * testsuite/experimental/polymorphic_allocator/
            pmr_typedefs_multimap.cc: New test.
            * testsuite/experimental/polymorphic_allocator/
            pmr_typedefs_multiset.cc: New test.
            * testsuite/experimental/polymorphic_allocator/pmr_typedefs_set.cc:
            New test.
            * testsuite/experimental/polymorphic_allocator/pmr_typedefs_string.cc:
            New test.
            * testsuite/experimental/polymorphic_allocator/
            pmr_typedefs_unordered_map.cc: New test.
            * testsuite/experimental/polymorphic_allocator/
            pmr_typedefs_unordered_multimap.cc: New test.
            * testsuite/experimental/polymorphic_allocator/
            pmr_typedefs_unordered_multiset.cc: New test.
            * testsuite/experimental/polymorphic_allocator/
            pmr_typedefs_unordered_set.cc: New test.
            * testsuite/experimental/polymorphic_allocator/pmr_typedefs_vector.cc:
            New test.
    
    From-SVN: r265086

commit 5a24f7ead4a5832503caf1e45a0a410875234002
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Fri Oct 12 13:28:30 2018 +0100

    PR libstdc++/70966 make pmr::new_delete_resource() immortal
    
    Construct the program-wide resource objects using placement new. This
    means they have dynamic storage duration and won't be destroyed during
    termination.
    
    Backport from mainline
    2018-07-24  Jonathan Wakely  <jwakely@redhat.com>
    
            PR libstdc++/70966
            * include/experimental/memory_resource (__get_default_resource): Use
            placement new to create an object with dynamic storage duration.
    
    Backport from mainline
    2018-06-20  Jonathan Wakely  <jwakely@redhat.com>
    
            PR libstdc++/70966
            * include/experimental/memory_resource (__resource_adaptor_imp): Add
            static assertions to enforce requirements on pointer types.
            (__resource_adaptor_imp::get_allocator()): Add noexcept.
            (new_delete_resource, null_memory_resource): Return address of an
            object with dynamic storage duration.
            (__null_memory_resource): Remove.
            * testsuite/experimental/memory_resource/70966.cc: New.
    
    From-SVN: r265085

commit d158016cba3ea7de205a9632c33173909d60a13a
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Fri Oct 12 12:35:03 2018 +0100

    PR libstdc++/77854 document size_type for containers
    
            PR libstdc++/77854
            * doc/xml/manual/status_cxx1998.xml: Document size_type and
            difference_type for containers.
            * doc/html/*: Regenerate.
    
    From-SVN: r265081

commit 228897f11ff470a446969f65fbdb29c3b50f49b9
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Oct 12 00:16:42 2018 +0000

    Daily bump.
    
    From-SVN: r265071

commit ac24d659b6894e3b98d547dee55b690fd7475145
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Oct 11 20:35:52 2018 +0200

    re PR c++/85070 (ICE on C++ code: in lazily_declare_fn, at cp/method.c:2409)
    
            PR c++/85070
            * g++.dg/cpp0x/pr85070.C: Change effective target for diagnostics from
            c++14_only to c++14.
    
    From-SVN: r265053

commit ab4cc7082d2e93e702f465052fc3dad9fb3ccaa5
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Oct 11 19:42:29 2018 +0200

    re PR c++/87582 (Returning a reference to a data member via structured bindings dangles)
    
            PR c++/87582
            * typeck.c (maybe_warn_about_returning_address_of_local): If
            whats_returned is a structured binding identifier and the structured
            binding is a reference, recurse on its initializer.
    
            * g++.dg/cpp1z/decomp48.C: New test.
    
    From-SVN: r265050

commit cf197aa969f4dbf33821c35717520d18aabff999
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Oct 11 19:41:33 2018 +0200

    backport: re PR target/87550 (Intrinsics for rdpmc (__rdpmc, __builtin_ia32_rdpmc) are interpreted as pure functions)
    
            Backported from mainline
            2018-10-10  Jakub Jelinek  <jakub@redhat.com>
    
            PR target/87550
            * config/i386/i386-builtin.def (IX86_BUILTIN_RDPMC): Move from args set
            to special_args set.
    
            * gcc.target/i386/pr87550.c: New test.
    
    From-SVN: r265049

commit e399430d1b329c1c2267f5f3b1674db6a9342467
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Oct 11 19:40:31 2018 +0200

    backport: re PR target/87414 (-mindirect-branch=thunk produces thunk with incorrect CFI on x86_64)
    
            Backported from mainline
            2018-09-26  Jakub Jelinek  <jakub@redhat.com>
    
            PR target/87414
            * config/i386/i386.c: Include debug.h and dwarf2out.h.
            (output_indirect_thunk): Emit DW_CFA_def_cfa_offset after the
            call.
    
    From-SVN: r265048

commit 18e4dfc92297aa93d327facd2e62bd3da0e58e1e
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Oct 11 19:39:46 2018 +0200

    backport: re PR tree-optimization/86844 (wrong code caused by store merging pass)
    
            Backported from mainline
            2018-09-12  Jakub Jelinek  <jakub@redhat.com>
                        Andreas Krebbel  <krebbel@linux.ibm.com>
    
            PR tree-optimization/86844
            * gimple-ssa-store-merging.c
            (imm_store_chain_info::coalesce_immediate): For overlapping stores, if
            there are any overlapping stores in between them, make sure they are
            also coalesced or we give up completely.
    
            * gcc.c-torture/execute/pr86844.c: New test.
            * gcc.dg/store_merging_22.c: New test.
            * gcc.dg/store_merging_23.c: New test.
    
    From-SVN: r265047

commit f2364da4cd21d4c653acd6147a350397bc8c14cf
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Oct 11 00:16:50 2018 +0000

    Daily bump.
    
    From-SVN: r265031

commit 66a364510c5f90bba6b776487851a7d25ff0b9a3
Author: Paolo Carlini <paolo.carlini@oracle.com>
Date:   Wed Oct 10 08:16:37 2018 +0000

    re PR c++/84940 (internal compiler error: in build_value_init_noctor, at cp/init.c:465)
    
    /cp
    2018-10-10  Paolo Carlini  <paolo.carlini@oracle.com>
    
            PR c++/84940
            * semantics.c (finish_unary_op_expr): Check return value of
            build_x_unary_op for error_mark_node.
    
    /testsuite
    2018-10-10  Paolo Carlini  <paolo.carlini@oracle.com>
    
            PR c++/84940
            * g++.dg/expr/unary4.C: New.
    
    From-SVN: r265005

commit 85fa7c18406ed8167c319f4d86f0dd4fd95d5063
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Oct 10 00:16:50 2018 +0000

    Daily bump.
    
    From-SVN: r265002

commit 5d17218136cbac84492783554c21412b7e8f6e3e
Author: Will Schmidt <will_schmidt@vnet.ibm.com>
Date:   Tue Oct 9 20:55:25 2018 +0000

    backport: re PR target/86731 (Miscompiles vec_sl at -O3 with -fwrapv on ppc64el)
    
    
    [gcc]
    2018-10-09  Will Schmidt <will_schmidt@vnet.ibm.com>
    
            Backport from trunk.
            2018-09-06  Will Schmidt  <will_schmidt@vnet.ibm.com>
    
            PR target/86731
            * config/rs6000/rs6000.c (rs6000_gimple_fold_builtin): Update logic
            around folding of vec_sl to handle out of range shift values.
    
    [testsuite]
    
    2018-10-09  Will Schmidt <will_schmidt@vnet.ibm.com>
    
            Backport from trunk
            2018-09-06  Will Schmidt  <will_schmidt@vnet.ibm.com>
    
            PR target/86731
            * gcc.target/powerpc/pr86731.c: New test.
            * gcc.target/powerpc/pr86731-longlong.c: New test.
            * gcc.target/powerpc/pr86731-fwrapv.c: New test.
            * gcc.target/powerpc/pr86731-fwrapv-longlong.c: New test.
            * gcc.target/powerpc/pr86731-nogimplefold.c: New test.
            * gcc.target/powerpc/pr86731-nogimplefold-longlong.c: New test.
    
    From-SVN: r264994

commit 6e237bbb925b754226913e56c3a7b5f918a2226f
Author: H.J. Lu <hjl@gcc.gnu.org>
Date:   Tue Oct 9 10:22:27 2018 -0700

    Add the missing gcc.target/i386/pr87370.c
    
    From-SVN: r264988

commit bbf34fa4a5dc8f6c4e505775bb459bcd48908845
Author: H.J. Lu <hongjiu.lu@intel.com>
Date:   Tue Oct 9 17:17:41 2018 +0000

    i386: Use TImode for BLKmode values in 2 integer registers
    
    When passing and returning BLKmode values in 2 integer registers, use
    1 TImode register instead of 2 DImode registers. Otherwise, V1TImode
    may be used to move and store such BLKmode values, which prevent RTL
    optimizations.
    
    gcc/
    
            Backport from mainline
            PR target/87370
            * config/i386/i386.c (construct_container): Use TImode for
            BLKmode values in 2 integer registers.
    
    gcc/testsuite/
    
            Backport from mainline
            PR target/87370
            * gcc.target/i386/pr87370.c: New test.
    
    From-SVN: r264987

commit 0f5eb5b9406db060982e3898fd8a9b6c600dc37f
Author: Joseph Myers <joseph@codesourcery.com>
Date:   Tue Oct 9 12:35:48 2018 +0100

    Use -fno-show-column in libstdc++ installed testing.
    
    <https://gcc.gnu.org/ml/libstdc++/2016-08/msg00006.html> arranged for
    libstdc++ tests to use -fno-show-column by default, but only for
    build-tree testing.  This patch adds it to the options used for
    installed testing as well.
    
    Tested with installed testing for a cross to x86_64-linux-gnu, where
    it fixes various test failures.
    
            Backport from mainline
            2018-10-02  Joseph Myers  <joseph@codesourcery.com>
    
            * testsuite/lib/libstdc++.exp (libstdc++_init): Use
            -fno-show-column in default cxxflags.
    
    From-SVN: r264952

commit fe49d1617ecbf729dd9fa4726e3ffcffc9e7108d
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Oct 9 00:16:30 2018 +0000

    Daily bump.
    
    From-SVN: r264947

commit a8406f33ffdf0cd31c94a732c4de6c3e6356286b
Author: H.J. Lu <hongjiu.lu@intel.com>
Date:   Mon Oct 8 15:20:08 2018 +0000

    i386: Correct _mm512_mask3_fmaddsub_round_pd
    
    Define _mm512_mask3_fmaddsub_round_pd with
    __builtin_ia32_vfmaddsubpd512_mask, instead of
    __builtin_ia32_vfmaddpd512_mask.
    
            Backport from mainline
            PR target/87517
            * config/i386/avx512fintrin.h (_mm512_mask_fmaddsub_round_pd):
            Defined with __builtin_ia32_vfmaddsubpd512_mask.
    
    From-SVN: r264936

commit 4867d759d8d6e15ee89194ce490afa3de0c22d4c
Author: Paul Thomas <pault@gcc.gnu.org>
Date:   Mon Oct 8 14:20:40 2018 +0000

    re PR fortran/83999 (ICE in gfc_trans_assignment_1, at fortran/trans-expr.c:10233)
    
    2018-10-08  Paul Thomas  <pault@gcc.gnu.org>
    
            PR fortran/83999
            Backport from trunk
            * resolve.c (resolve_fl_procedure): Include class functions in
            the test that elemental function results be scalar.
    
    2018-10-08  Paul Thomas  <pault@gcc.gnu.org>
    
            PR fortran/83999
            Backport from trunk
            * gfortran.dg/elemental_function_4.f90 : New test.
    
    From-SVN: r264931

commit 7b6eeffdab88c06cad77fdc4f92452f12430e177
Author: Paul Thomas <pault@gcc.gnu.org>
Date:   Mon Oct 8 13:02:36 2018 +0000

    backport: re PR fortran/86372 (Segfault on ASSOCIATE statement with CHARACTER variable)
    
    2018-10-08  Paul Thomas  <pault@gcc.gnu.org>
    
            Backport from trunk
            PR fortran/86372
            * trans-stmt.c (trans_associate_var): Character associate names
            with variable string length do not have to be deferred length
            for the string length to be set, if variable.
    
    2018-10-08  Paul Thomas  <pault@gcc.gnu.org>
    
            Backport from trunk
            PR fortran/86372
            * gfortran.dg/associate_41.f90: New test.
    
    From-SVN: r264925

commit 09fddc665621ffed34fcee75168c7e7302559c78
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Mon Oct 8 13:54:41 2018 +0100

    PR libstdc++/87538 fix std::not_fn exception specifications
    
    Backport from mainline
    2018-10-08  Jonathan Wakely  <jwakely@redhat.com>
    
            PR libstdc++/87538
            * include/std/functional (_Not_fn::operator()): Check value of
            __is_nothrow_invocable as well.
            * testsuite/20_util/function_objects/not_fn/87538.cc: New test.
            * testsuite/experimental/functional/87538.cc: New test.
    
    From-SVN: r264924

commit 49df0999334451eae90a8209d96b4c092068848d
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Oct 8 00:16:34 2018 +0000

    Daily bump.
    
    From-SVN: r264909

commit 66e5459290a165844633dcc6f93fdcc9de75dd7e
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Oct 7 00:16:16 2018 +0000

    Daily bump.
    
    From-SVN: r264905

commit 4210502519001f4fdee185271c0521d52a2323c6
Author: Thomas Koenig <tkoenig@gcc.gnu.org>
Date:   Sat Oct 6 22:41:06 2018 +0000

    re PR fortran/86111 (ICE in gfc_arith_concat, at fortran/arith.c:985)
    
    2018-10-06  Thomas Koenig  <tkoenig@gcc.gnu.org>
    
            PR fortran/86111
            Backport from trunk
            * gfortran.h (enum arith): Add ARITH_WRONGCONCAT.
            * arith.h (gfc_arith_error): Issue error for ARITH_WRONGCONCAT.
            (gfc_arith_concat):  If the types of op1 and op2 are not
            character of if their kinds do not match, issue ARITH_WRONGCONCAT.
    
    2018-10-06  Thomas Koenig  <tkoenig@gcc.gnu.org>
    
            PR fortran/86111
            Backport from trunk
            * gfortran.dg/array_constructor_type_23.f90: New test.
    
    From-SVN: r264902

commit 6bae0fc798fdac7004a5be1cb7bcff877ad25981
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Oct 6 00:17:01 2018 +0000

    Daily bump.
    
    From-SVN: r264895

commit 07636bfa249a888fbc2172a60c1a0aa1fa1f4fbc
Author: Gerald Pfeifer <gerald@pfeifer.com>
Date:   Fri Oct 5 20:16:21 2018 +0000

    backport: close.c: Include <string.h>.
    
            Backport from trunk
            * io/close.c [!HAVE_UNLINK_OPEN_FILE]: Include <string.h>.
    
    From-SVN: r264891

commit 62b06971c80d3a6824c0473548290a0f2142fded
Author: H.J. Lu <hongjiu.lu@intel.com>
Date:   Fri Oct 5 11:31:45 2018 +0000

    i386: Don't pass -msse2avx to assembler for -mavx
    
    With
    
    gcc -O2 -fPIC -flto -g -c -o a.o a.c
    gcc -O2 -fPIC -flto -g -mavx   -c -o b.o b.c
    gcc -shared -O2 -fPIC -flto -g -o lib1.so a.o b.o
    
    LTO correctly generates AVX for b.o and SSE for a.o.  But the GCC driver
    passes -msse2avx to assembler, which encodes SSE instructions as AVX
    instructions.  We shouldn't pass -msse2avx to assembler for -mavx.
    
            Backport from mainline
            PR target/87522
            * config/i386/gnu-user.h (ASM_SPEC): Don't pass -msse2avx to
            assembler for -mavx.
            * config/i386/gnu-user64.h (ASM_SPEC): Likewise.
    
    From-SVN: r264865

commit f6ba3c5767895802ef1972264eb01c7ee27ed8ef
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Oct 5 00:16:29 2018 +0000

    Daily bump.
    
    From-SVN: r264859

commit 0f78ba22287ed9843b2e5afbcba169907bbf622b
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Oct 4 00:16:39 2018 +0000

    Daily bump.
    
    From-SVN: r264830

commit 3716df4eee747b4ea476d0236b947a0b5633d24c
Author: Uros Bizjak <ubizjak@gmail.com>
Date:   Wed Oct 3 22:31:49 2018 +0200

    backport: i386.h (SSE_REGNO): Fix check for FIRST_REX_SSE_REG.
    
            Backport from mainline
            2018-09-28  Uros Bizjak  <ubizjak@gmail.com>
    
            * config/i386/i386.h (SSE_REGNO): Fix check for FIRST_REX_SSE_REG.
            (GET_SSE_REGNO): Rename from SSE_REGNO.  Update all uses for rename.
    
    From-SVN: r264824

commit 8dbc89a849c364dcaa3c195fb7353d20eff20b6c
Author: H.J. Lu <hongjiu.lu@intel.com>
Date:   Wed Oct 3 16:55:06 2018 +0000

    i386: Remove _Unwind_Frames_Increment
    
    CET kernel has been changed to place a restore token on shadow stack for
    signal handler to enhance security.  It is usually transparent to user
    programs since kernel will pop the restore token when signal handler
    returns.  But when an exception is thrown from a signal handler, now
    we need to remove _Unwind_Frames_Increment to pop the the restore token
    from shadow stack.  Otherwise, we get
    
    FAIL: g++.dg/torture/pr85334.C   -O0  execution test
    FAIL: g++.dg/torture/pr85334.C   -O1  execution test
    FAIL: g++.dg/torture/pr85334.C   -O2  execution test
    FAIL: g++.dg/torture/pr85334.C   -O3 -g  execution test
    FAIL: g++.dg/torture/pr85334.C   -Os  execution test
    FAIL: g++.dg/torture/pr85334.C   -O2 -flto -fno-use-linker-plugin -flto-partition=none  execution test
    
            Backport from mainline
            2018-07-27  H.J. Lu  <hongjiu.lu@intel.com>
    
            PR libgcc/85334
            * config/i386/shadow-stack-unwind.h (_Unwind_Frames_Increment):
            Removed.
    
    From-SVN: r264814

commit f60e7b4535c07b0a424b7b2a774343956f4fb407
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Wed Oct 3 11:58:43 2018 +0100

    PR other/87353 fix formatting and grammar in manual
    
    The changes to invoke.texi in r242433 left some unwanted spaces that
    texi2pod.pl interprets as verbatim formatting. There are also some
    grammatical errors due to the removal of references to GCJ, where the
    G++ driver is referred to in the plural.
    
            PR other/87353
            * doc/invoke.texi (Link Options): Fix formatting and grammar.
    
    From-SVN: r264809

commit 2bd562368d297bc7b4251b80d4857c0e2470bf55
Author: Martin Liska <mliska@suse.cz>
Date:   Wed Oct 3 11:24:38 2018 +0200

    Backport r264806
    
    2018-10-03  Martin Liska  <mliska@suse.cz>
    
            Backport from mainline
            2018-10-03  Martin Liska  <mliska@suse.cz>
    
            PR gcov-profile/86109
            * coverage.c (coverage_begin_function): Do not
            mark lambdas as artificial.
            * tree-core.h (struct GTY): Remove tm_clone_flag
            and introduce new lambda_function.
            * tree.h (DECL_LAMBDA_FUNCTION): New macro.
    2018-10-03  Martin Liska  <mliska@suse.cz>
    
            Backport from mainline
            2018-10-03  Martin Liska  <mliska@suse.cz>
    
            PR gcov-profile/86109
            * parser.c (cp_parser_lambda_declarator_opt):
            Set DECL_LAMBDA_FUNCTION for lambdas.
    2018-10-03  Martin Liska  <mliska@suse.cz>
    
            Backport from mainline
            2018-10-03  Martin Liska  <mliska@suse.cz>
    
            PR gcov-profile/86109
            * g++.dg/gcov/pr86109.C: New test.
    
    From-SVN: r264807

commit 13e8ee4120ab9920185c086e917db35b95d7753c
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Oct 3 00:16:43 2018 +0000

    Daily bump.
    
    From-SVN: r264803

commit 5b458c33e257b81ed80c76133875665f9bdf3d3e
Author: H.J. Lu <hongjiu.lu@intel.com>
Date:   Tue Oct 2 12:12:18 2018 +0000

    i386: Insert ENDBR before the profiling counter call
    
    ENDBR must be the first instruction of a function.  This patch queues
    ENDBR if we need to put the profiling counter call before the prologue
    and generate ENDBR before the profiling counter call.
    
    i386: Compile pr82699-5.c and pr82699-6.c with -fno-pic
    
    Compile pr82699-5.c and pr82699-6.c with -fno-pic to avoid
    
    FAIL: gcc.target/i386/pr82699-5.c (test for excess errors)
    Excess errors:
    cc1: sorry, unimplemented: -mfentry isn't supported for 32-bit in combination with -fpic
    FAIL: gcc.target/i386/pr82699-6.c (test for excess errors)
    Excess errors:
    cc1: error: -mnop-mcount is not implemented for -fPIC
    cc1: sorry, unimplemented: -mfentry isn't supported for 32-bit in combination with -fpic
    
    when running GCC testsuite with --target_board='unix{-fpic\ -m32,-fpic}'.
    
    gcc/
    
            Backport from mainline
            PR target/82699
            * config/i386/i386.c (rest_of_insert_endbranch): Set
            endbr_queued_at_entrance to true and don't insert ENDBR if
            x86_function_profiler will be called.
            (x86_function_profiler): Insert ENDBR if endbr_queued_at_entrance
            is true.
            * config/i386/i386.h (machine_function): Add
            endbr_queued_at_entrance.
    
    gcc/testsuite/
    
            Backport from mainline
            PR target/82699
            * gcc.target/i386/pr82699-5.c: Add -fno-pic for ia32.
            * gcc.target/i386/pr82699-6.c: Add -fno-pic.
    
            PR target/82699
            * gcc.target/i386/pr82699-1.c: New file.
            * gcc.target/i386/pr82699-2.c: Likewise.
            * gcc.target/i386/pr82699-3.c: Likewise.
            * gcc.target/i386/pr82699-4.c: Likewise.
            * gcc.target/i386/pr82699-5.c: Likewise.
            * gcc.target/i386/pr82699-6.c: Likewise.
    
    From-SVN: r264782

commit da263fbfcd2c7e658f599034600718f24f65a56d
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Oct 2 00:16:31 2018 +0000

    Daily bump.
    
    From-SVN: r264776

commit 8ddc8b35aac13cb347068df35700141072692bd0
Author: Joseph Myers <joseph@codesourcery.com>
Date:   Mon Oct 1 18:12:08 2018 +0100

    * ru.po: Update.
    
    From-SVN: r264767

commit 3a0459c355d22bc74ce84658da6d8dc00529814e
Author: Kyrylo Tkachov <kyrylo.tkachov@arm.com>
Date:   Mon Oct 1 10:54:18 2018 +0000

    [arm] Avoid STRD with odd register for TARGET_ARM in output_move_double
    
    2018-10-01  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>
    
            Backport from mainline
            2018-06-29  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>
    
            * config/arm/arm.c (output_move_double): Don't allow STRD instructions
            if starting source register is not even.
    
            Backport from mainline
            2018-07-02  Christophe Lyon  <christophe.lyon@linaro.org>
    
            * gcc.target/arm/arm-soft-strd-even.c: Skip if -mfloat-abi is
            overriden.
            2018-06-29  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>
    
            * gcc.target/arm/arm-soft-strd-even.c: New test.
    
    From-SVN: r264742

commit edf5ec7812ef07e6446822b7b13f4c6570ba4ad1
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Oct 1 00:16:38 2018 +0000

    Daily bump.
    
    From-SVN: r264730

commit 36017ee2883648f8152e25c115a6979dde50b9be
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Sep 30 00:16:16 2018 +0000

    Daily bump.
    
    From-SVN: r264719

commit dd341e6b9a8254a6b41b146afce0917889f5bb6a
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Sat Sep 29 18:09:59 2018 +0200

    re PR target/87467 (Incorrect function parameter for _mm512_abs_pd in `include/avx512fintrin.h`)
    
            PR target/87467
            * config/i386/avx512fintrin.h (_mm512_abs_pd, _mm512_mask_abs_pd): Use
            __m512d type for __A argument rather than __m512.
    
            * gcc.target/i386/avx512f-abspd-1.c (SIZE): Divide by two.
            (CALC): Use double instead of float.
            (TEST): Adjust to test _mm512_abs_pd and _mm512_mask_abs_pd rather than
            _mm512_abs_ps and _mm512_mask_abs_ps.
    
    From-SVN: r264713

commit 119f15337fa27b1d54617025a33374717ef316ea
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Sep 29 00:16:14 2018 +0000

    Daily bump.
    
    From-SVN: r264708

commit cb8707ca9ce0897360b37750476c432e74714113
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Sep 28 00:16:39 2018 +0000

    Daily bump.
    
    From-SVN: r264684

commit 03f84be019a8672a31008a4b0248f0bdb4de7d32
Author: Michael Meissner <meissner@linux.ibm.com>
Date:   Thu Sep 27 21:31:04 2018 +0000

    Backport PR 87033
    
    From-SVN: r264679

commit 37fe8695fb879b88cbb8889cb4a0cd440a4a0b94
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Sep 27 00:16:50 2018 +0000

    Daily bump.
    
    From-SVN: r264660

commit 8ed8244d9192597a8a31378ef838e7e76db04e39
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Sep 26 00:16:53 2018 +0000

    Daily bump.
    
    From-SVN: r264591

commit 3d9a7559c1d836ffc8d65d2d1f493c83556f8ac6
Author: Martin Liska <mliska@suse.cz>
Date:   Tue Sep 25 08:50:30 2018 +0200

    Backport r264528
    
    2018-09-25  Martin Liska  <mliska@suse.cz>
    
            Backport from mainline
            2018-09-24  Martin Liska  <mliska@suse.cz>
    
            PR sanitizer/85774
            * asan.c: Make asan_handled_variables extern.
            * asan.h: Likewise.
            * cfgexpand.c (expand_stack_vars): Make sure
            a representative is unpoison if another
            variable in the partition is handled by
            use-after-scope sanitization.
    2018-09-25  Martin Liska  <mliska@suse.cz>
    
            Backport from mainline
            2018-09-24  Martin Liska  <mliska@suse.cz>
    
            PR sanitizer/85774
            * g++.dg/asan/pr85774.C: New test.
    
    From-SVN: r264557

commit f6c8c1790bb92ecb9b3f2f313da4e2040371093c
Author: Andrew Pinski <apinski@marvell.com>
Date:   Tue Sep 25 00:19:27 2018 +0000

    i2018-09-24  Andrew Pinski  <apinski@marvell.com>
    
            *  config/aarch64/aarch64.c (aarch_macro_fusion_pair_p): Don't
            access prev before checking it for NULLness in the
            AARCH64_FUSE_CMP_BRANCH case.
    
    From-SVN: r264553

commit 5b59927731d1db4c908822deddc2aac3d519aeeb
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Sep 25 00:16:33 2018 +0000

    Daily bump.
    
    From-SVN: r264551

commit af42a70741c4768ad5175c99caeaed92aee13fe6
Author: Paolo Carlini <paolo.carlini@oracle.com>
Date:   Mon Sep 24 17:44:02 2018 +0000

    re PR c++/85070 (ICE on C++ code: in lazily_declare_fn, at cp/method.c:2409)
    
    /cp
    2018-09-24  Paolo Carlini  <paolo.carlini@oracle.com>
    
            PR c++/85070
            * method.c (lazily_declare_fn): During error-recovery add_method
            may return false.
    
    /testsuite
    2018-09-24  Paolo Carlini  <paolo.carlini@oracle.com>
    
            PR c++/85070
            * g++.dg/cpp0x/pr85070.C: New.
    
    From-SVN: r264542

commit b8ab1a57178627b85ff7b8d2deb563774b64e454
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Sep 24 00:16:27 2018 +0000

    Daily bump.
    
    From-SVN: r264521

commit d84e599831ea4edba10b82c53f25db6614ac8e00
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Sep 23 00:16:15 2018 +0000

    Daily bump.
    
    From-SVN: r264509

commit 97b4e684a9ed74781c2628d0e351517e7e368dad
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Sep 22 00:16:45 2018 +0000

    Daily bump.
    
    From-SVN: r264499

commit 2c2f985ee4d2da599699fb69e3d5a10c87d26bfe
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Fri Sep 21 10:04:45 2018 +0000

    rs6000.c (rs6000_function_ok_for_sibcall): Return false if the call takes a static chain.
    
            * config/rs6000/rs6000.c (rs6000_function_ok_for_sibcall): Return false
            if the call takes a static chain.
    
    From-SVN: r264464

commit d9e83951472b6eabc8a7e3d91ef89bf7c95bd6fd
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Sep 21 00:16:52 2018 +0000

    Daily bump.
    
    From-SVN: r264455

commit c95c8717076a47427c7080903704eef193877624
Author: John David Anglin <danglin@gcc.gnu.org>
Date:   Thu Sep 20 01:07:42 2018 +0000

    pa.md (atomic_storeqi): Restore deleted expander.
    
            * config/pa/pa.md (atomic_storeqi): Restore deleted expander.
            (atomic_storehi): Likewise.
            (atomic_storesi): Likewise.
            (atomic_loaddi): Restore compare and swap exchange loop code.
    
    From-SVN: r264434

commit 6adc68d9f35e30f1ffe6ef3bf2d0ec1718719422
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Sep 20 00:16:28 2018 +0000

    Daily bump.
    
    From-SVN: r264431

commit 9b5173e0bf7925d47553262a94605cffe2114a09
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Sep 19 00:16:42 2018 +0000

    Daily bump.
    
    From-SVN: r264416

commit dd71307fdadf34e82c31d321ab21584b4ce3f0e1
Author: Janus Weil <janus@gcc.gnu.org>
Date:   Tue Sep 18 21:50:17 2018 +0200

    backport: re PR fortran/85395 ([F03] private clause contained in derived type acquires spurious scope)
    
    2018-09-18  Janus Weil  <janus@gcc.gnu.org>
    
            Backport from trunk
            PR fortran/85395
            * decl.c (match_binding_attributes): Use correct default accessibility
            for procedure pointer components.
    
    2018-09-18  Janus Weil  <janus@gcc.gnu.org>
    
            Backport from trunk
            PR fortran/85395
            * gfortran.dg/proc_ptr_comp_52.f90: New test case.
    
    From-SVN: r264410

commit fa2128cb3026b5cc53155a20b10a32145cc547b8
Author: Janus Weil <janus@gcc.gnu.org>
Date:   Tue Sep 18 21:16:24 2018 +0200

    backport: re PR fortran/86830 (Contiguous array pointer function result not recognized as contiguous)
    
    2018-09-18  Janus Weil  <janus@gcc.gnu.org>
    
            Backport from trunk
            PR fortran/86830
            * expr.c (gfc_is_simply_contiguous): Handle type-bound procedure calls
            with non-polymorphic objects.
    
    2018-09-18  Janus Weil  <janus@gcc.gnu.org>
    
            Backport from trunk
            PR fortran/86830
            * gfortran.dg/typebound_call_30.f90: New test case.
    
    From-SVN: r264407

commit 9856bb90cf19ac38f8151e6fc33c34efd4a8f552
Author: Paul Thomas <pault@gcc.gnu.org>
Date:   Tue Sep 18 17:54:20 2018 +0000

    re PR fortran/85954 (ICE in make_ssa_name_fn, at tree-ssanames.c:266)
    
    2018-09-18  Paul Thomas  <pault@gcc.gnu.org>
    
            PR fortran/85954
            * resolve.c (resolve_assoc_var): If the target expression is a
            deferred charlen dummy and the associate name shares the
            charlen, generate a new one. Make sure that new charlens are in
            the namespace list so that they get cleaned up.
            * trans-array.c (gfc_is_reallocatable_lhs): Associate names are
            not reallocatable.
            * trans-decl.c (gfc_get_symbol_decl): Put deferred character
            length dummy and result arrays on the deferred initialization
            list so that the variable length arrays can be correctly dealt
            with.
            * trans-expr.c (gfc_conv_string_length): Return if 'expr' is
            NULL rather than ICEing.
    
    2018-09-18  Paul Thomas  <pault@gcc.gnu.org>
    
            PR fortran/85954
            * gfortran.dg/deferred_character_21.f90 : New test.
    
    From-SVN: r264404

commit c840e35f13a384efa10638cd299ae8d4b9aea3c6
Author: Segher Boessenkool <segher@kernel.crashing.org>
Date:   Tue Sep 18 18:24:58 2018 +0200

    Backport PR86882 fix to 8
    
    
            PR rtl-optimization/86882
            * rtlanal.c (reg_overlap_mentioned_p): Handle CLOBBER.
    
    From-SVN: r264401

commit efab5f1a4e2e2c369b57317c8e7e0d312d3ced96
Author: Nathan Sidwell <nathan@acm.org>
Date:   Tue Sep 18 15:06:35 2018 +0000

    [PATCH c++/86881] -Wshadow-local-compatible ICE
    
    https://gcc.gnu.org/ml/gcc-patches/2018-09/msg00984.html
            PR c++/86881
            cp/
            * name-lookup.c (check_local_shadow): Ignore auto types.
    
            testsuite/
            * g++.dg/warn/pr86881.C: New.
    
    From-SVN: r264396

commit 18af29e70c3c2906d58aacb0042ddb6d2fe7d305
Author: Martin Liska <mliska@suse.cz>
Date:   Tue Sep 18 11:32:09 2018 +0200

    Backport r264363
    
    2018-09-18  Martin Liska  <mliska@suse.cz>
    
            Backport from mainline
            2018-09-17  Martin Liska  <mliska@suse.cz>
    
            PR gcov-profile/85871
            * gcov.c (output_intermediate_file): Fix out of bounds
            access.
    
    From-SVN: r264387

commit 4d471deb2622e634759105a4ca215d61bd936690
Author: Kyrylo Tkachov <kyrylo.tkachov@arm.com>
Date:   Tue Sep 18 08:48:28 2018 +0000

    [libgfortran] Fix uninitialized variable use in fallback_access
    
            Backport from trunk
            2018-09-14  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>
    
            * io/unix.c (fallback_access): Avoid calling close on
            uninitialized file descriptor.
    
    From-SVN: r264383

commit e1fb07808b4fd5f006569f46da0401bc5db23c84
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Sep 18 00:16:41 2018 +0000

    Daily bump.
    
    From-SVN: r264379

commit 5f6eac408685646071e95e8ed5eaae5f86ad6502
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Sep 17 00:16:27 2018 +0000

    Daily bump.
    
    From-SVN: r264354

commit 98a0e67e6f8b6d1a9dd06a0ec1f5959893101ef0
Author: Hans-Peter Nilsson <hp@bitrange.com>
Date:   Sun Sep 16 21:23:36 2018 +0000

    re PR target/85666 (gcc-8.0.1 fails to build mmix target: gcc/libgcc/libgcc2.h:203:20: internal compiler error: in leaf_function_p, at final.c:4488)
    
            PR target/85666
            * config/mmix/mmix.c (mmix_assemble_integer): Handle byte-size
            non-CONST_INT rtx:es using assemble_integer_with_op ".byte".
            (MMIX_CFUN_NEEDS_SAVED_EH_RETURN_ADDRESS): Don't call
            leaf_function_p, instead use has_hard_reg_initial_val.
    
    From-SVN: r264351

commit a415f23f217626af174f5c0032c7b4978cc81755
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Sep 16 00:16:38 2018 +0000

    Daily bump.
    
    From-SVN: r264345

commit 082538588d231fb5f1624c05728851355f1980ea
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Sep 15 00:16:22 2018 +0000

    Daily bump.
    
    From-SVN: r264340

commit c37173118af58bee498a6b95fcf73ffe05ff7428
Author: John David Anglin <danglin@gcc.gnu.org>
Date:   Fri Sep 14 23:30:32 2018 +0000

    re PR middle-end/87188 (Function pointer canonicalization optimized away)
    
            PR middle-end/87188
            * dojump.c (do_compare_and_jump): Canonicalize function pointers
            when one operand is a function pointer.  Use POINTER_TYPE_P and
            FUNC_OR_METHOD_TYPE_P.
            * expr.c (do_store_flag): Use POINTER_TYPE_P and FUNC_OR_METHOD_TYPE_P.
            * fold-const.c (build_range_check): Likewise.
            * match.pd (simple_comparison): Likewise.
    
    From-SVN: r264337

commit eaf62c8d09fe7658830598ef3d59c0beaaf1c21f
Author: Ian Lance Taylor <ian@gcc.gnu.org>
Date:   Fri Sep 14 19:42:27 2018 +0000

    re PR go/87260 (go fails to build a simple program on arm-linux-gnueabihf)
    
            PR go/87260
        cmd/go: correct gccgo buildid file on ARM
    
        Bring in https://golang.org/cl/135297 from the gc repository to fix a
        GCC bug report.
    
        Original CL description:
    
            The GNU assembler for ARM treats @ as a comment character, so section
            types must be written using % instead.
    
            Fixes https://gcc.gnu.org/PR87260.
    
        Reviewed-on: https://go-review.googlesource.com/135360
    
    From-SVN: r264331

commit 86552a263b2d55103366abbf2d338fb0c5be9b35
Author: Segher Boessenkool <segher@kernel.crashing.org>
Date:   Fri Sep 14 17:52:23 2018 +0200

    Backport PR87224 fix to 8
    
            Backport from trunk
            2018-09-14  Segher Boessenkool  <segher@kernel.crashing.org>
    
            PR target/87224
            * config/rs6000/rs6000.md (*mov<mode>_hardfloat64): Add Z to the Y
            alternatives.
    
    From-SVN: r264320

commit 3b0c68ae243c31bd95fcb355474189897c0e7d5a
Author: Carl Love <cel@us.ibm.com>
Date:   Fri Sep 14 15:43:35 2018 +0000

    backport: emmintrin.h: Add _MM_SHUFFLE2.
    
    2018-09-14  Carl Love  <cel@us.ibm.com>
    
            Backport from trunk
            2018-09-14  Carl Love  <cel@us.ibm.com>
    
            * config/rs6000/emmintrin.h: Add _MM_SHUFFLE2.
            * config/rs6000/xmmintrin.h: Add _MM_SHUFFLE.
    
    From-SVN: r264318

commit 51c95b854f1c7e65cc268a48ef496c4bafbfd966
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Sep 14 00:16:40 2018 +0000

    Daily bump.
    
    From-SVN: r264298

commit 49f1a1a3033b139133e18d6564817a6576c303cc
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Thu Sep 13 10:13:15 2018 +0000

    backport: s-osinte__solaris.ads (upad64_t): New private type.
    
            Backport from mainline
            2018-07-31  Eric Botcazou  <ebotcazou@adacore.com>
    
            * libgnarl/s-osinte__solaris.ads (upad64_t): New private type.
            (mutex_t): Use it for 'lock' and 'data' components.
            (cond_t): Likewise for 'data' and use single 'flags' component.
    
    From-SVN: r264265

commit c8f1c62ee77261dddf65f4289aff92931d903e06
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Sep 13 00:16:28 2018 +0000

    Daily bump.
    
    From-SVN: r264257

commit b94e18100a16514f0cc034fcc6fa8c4d5c86aee5
Author: Ville Voutilainen <ville.voutilainen@gmail.com>
Date:   Thu Sep 13 00:43:49 2018 +0300

    re PR c++/87093 (is_constructible (__is_constructible() instrinsic) explicitly instantiates conversion member function of source)
    
    PR c++/87093
    
    Backport from mainline
    2018-09-13  Ville Voutilainen  <ville.voutilainen@gmail.com>
    
    gcc/cp
    
    PR c++/87093
    * method.c (constructible_expr): We're in an unevaluated context
    in all cases, not just for class targets.
    
    testsuite/
    
    PR c++/87093
    * g++.dg/ext/is_constructible2.C: New.
    
    From-SVN: r264254

commit c09bc71562580f35bd31f351ae69188c12cc744f
Author: Paul Thomas <pault@gcc.gnu.org>
Date:   Wed Sep 12 18:53:50 2018 +0000

    re PR fortran/87284 (Allocation of class arrays with mold results in "conditional jump or move depends on uninitialised value")
    
    2018-09-12  Paul Thomas  <pault@gcc.gnu.org>
    
            PR fortran/87284
            * trans-expr.c (gfc_trans_class_init_assign): Access to
            to array elements of the dynamic type requires that the array
            reference be added to the class expression and not the _data
            component, unlike scalar expressions.
    
    2018-09-12  Paul Thomas  <pault@gcc.gnu.org>
    
            PR fortran/87284
            * gfortran.dg/allocate_with_mold_2.f90: New test.
    
    From-SVN: r264251

commit 9d4cd68bc473f1ee2fe1c88ebd241ba9adc8485b
Author: Segher Boessenkool <segher@kernel.crashing.org>
Date:   Wed Sep 12 19:58:31 2018 +0200

    Backport patch for PR86989 to 8
    
    2018-09-12  Segher Boessenkool  <segher@kernel.crashing.org>
    
            Backport from trunk
            2018-08-24  Segher Boessenkool  <segher@kernel.crashing.org>
    
            PR target/86989
            * config/rs6000/rs6000.c (toc_relative_expr_p): Check that the base is
            the TOC register.
    
    From-SVN: r264246

commit c99d3611e230d5bd73aba1a4d403b2098f75f096
Author: Segher Boessenkool <segher@kernel.crashing.org>
Date:   Wed Sep 12 18:23:01 2018 +0200

    Backport PR86771 fix to 8
    
    2018-09-12  Segher Boessenkool  <segher@kernel.crashing.org>
    
            Backport from trunk
            2018-08-22  Segher Boessenkool  <segher@kernel.crashing.org>
    
            PR rtl-optimization/86771
            * combine.c (try_combine): Do not allow splitting a resulting PARALLEL
            of two SETs into those two SETs, one to be placed at i2, if that SETs
            destination is modified between i2 and i3.
    
    From-SVN: r264245

commit 8345eba22cd208f06b34a256b8ca03d1fcde5bc6
Author: Andreas Krebbel <krebbel@linux.ibm.com>
Date:   Wed Sep 12 11:08:25 2018 +0000

    S/390: Use proper rounding mode for DFP to BFD conversions
    
    According to IEEE 754 2008 4.3 'Rounding-direction attributes' the
    rounding mode of the target format needs to be used. By not setting
    the value so far we have always used the DFP rounding mode.
    
    gcc/ChangeLog:
    
    2018-09-12  Andreas Krebbel  <krebbel@linux.ibm.com>
    
            Backport from mainline
            2018-09-12  Andreas Krebbel  <krebbel@linux.ibm.com>
    
            * config/s390/s390.md (PFPO_RND_MODE_DFP, PFPO_RND_MODE_BFP): New
            constants.
            ("trunc<BFP:mode><DFP_ALL:mode>2")
            ("trunc<DFP_ALL:mode><BFP:mode>2")
            ("extend<BFP:mode><DFP_ALL:mode>2")
            ("extend<DFP_ALL:mode><BFP:mode>2"): Set proper rounding mode
            according to the target operand type.
    
    gcc/testsuite/ChangeLog:
    
    2018-09-12  Andreas Krebbel  <krebbel@linux.ibm.com>
    
            Backport from mainline
            2018-09-12  Andreas Krebbel  <krebbel@linux.ibm.com>
    
            * gcc.target/s390/dfp_to_bfp_rounding.c: New test.
    
    From-SVN: r264235

commit 110af00e000e8509e62b0e44de19aa60dea726de
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Wed Sep 12 11:21:03 2018 +0200

    re PR middle-end/87248 (Bad code for masked operations involving signed ints)
    
            PR middle-end/87248
            * fold-const.c (fold_ternary_loc) <case COND_EXPR>: Verify also that
            BIT_AND_EXPR's second operand is a power of two.  Formatting fix.
    
            * c-c++-common/torture/pr87248.c: New test.
    
    From-SVN: r264231

commit 4a84e25e73a145acfe22022bd8607b45433f8003
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Sep 12 00:16:40 2018 +0000

    Daily bump.
    
    From-SVN: r264225

commit c4d38471cc51a65ebee3efda5e9e3ef86d38ca21
Author: Paul Thomas <pault@gcc.gnu.org>
Date:   Tue Sep 11 17:18:13 2018 +0000

    re PR fortran/87277 (Segfault on using array component of class scalar pointer as an actual argument)
    
    2018-09-11  Paul Thomas  <pault@gcc.gnu.org>
    
            PR fortran/87277
            * expr.c (is_subref_array): Add the check of dimensionality for
            class, dummy, pointer arrays.
    
    2018-09-11  Paul Thomas  <pault@gcc.gnu.org>
    
            PR fortran/87277
            * gfortran.dg/select_type_43.f90: New test.
    
    From-SVN: r264213

commit bf1456aa61eb4966174e793587ea948c5f0292e3
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Tue Sep 11 12:51:10 2018 +0100

    PR libstdc++/87278 restore support for std::make_shared<volatile T>()
    
            PR libstdc++/87278
            * include/bits/shared_ptr.h (make_shared): Use remove_cv instead of
            remove_const.
            * testsuite/20_util/shared_ptr/creation/87278.cc: New test.
    
    From-SVN: r264208

commit c3c59d00cee467ce464d826d45652468d0de1457
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Sep 11 00:16:29 2018 +0000

    Daily bump.
    
    From-SVN: r264199

commit a4c8f9de27d704e8b219fe2bcfb9c57e0c81b928
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Sep 10 00:16:37 2018 +0000

    Daily bump.
    
    From-SVN: r264188

commit 123ae561be81fb314c8720fd454217cedcfb7bbe
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Sep 9 00:16:48 2018 +0000

    Daily bump.
    
    From-SVN: r264175

commit 3a1ee3c6c62ca0f1b0150c2b40b4d16d9a95bb1e
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Sep 8 00:16:37 2018 +0000

    Daily bump.
    
    From-SVN: r264166

commit cc476c29c4e142d62c49b949c91f3a9fd49779d3
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Sep 7 00:16:40 2018 +0000

    Daily bump.
    
    From-SVN: r264154

commit 604dff40bf859d1e208f71d04597416b3152efa2
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Sep 6 00:16:37 2018 +0000

    Daily bump.
    
    From-SVN: r264137

commit a0fff4c460e03e262f03acc7d8e26596ad6ff7fa
Author: Janus Weil <janus@gcc.gnu.org>
Date:   Wed Sep 5 21:22:53 2018 +0200

    backport: re PR fortran/86116 (Ambiguous generic interface not recognised)
    
    2018-09-05  Janus Weil  <janus@gcc.gnu.org>
    
            Backported from trunk
            PR fortran/86116
            * interface.c (compare_type): Remove a CLASS/TYPE check.
            (compare_type_characteristics): New function that behaves like the old
            'compare_type'.
            (gfc_check_dummy_characteristics, gfc_check_result_characteristics):
            Call 'compare_type_characteristics' instead of 'compare_type'.
    
    2018-09-05  Janus Weil  <janus@gcc.gnu.org>
    
            Backported from trunk
            PR fortran/86116
            * gfortran.dg/generic_34.f90: New test case.
    
    From-SVN: r264131

commit 9dcc2236262380ebccd60b3e77877e9372145f21
Author: Pádraig Brady <p@draigbrady.com>
Date:   Wed Sep 5 17:32:26 2018 +0000

    [PR c++/87185] ICE in prune-lambdas
    
    https://gcc.gnu.org/ml/gcc-patches/2018-09/msg00249.html
            cp/
            PR c++/87185
            * lambda.c (prune_lambda_captures): Protect against const_vars.get
            returning NULL.
            testsuite/
            PR c++/87185
            * g++.dg/pr87185.C: New.
    
    From-SVN: r264129

commit 8783d33e323fbfc88f82c45f141562edbe21993e
Author: Nathan Sidwell <nathan@acm.org>
Date:   Wed Sep 5 10:42:59 2018 +0000

    [PR c++/87137] GCC-8 Fix
    
    https://gcc.gnu.org/ml/gcc-patches/2018-08/msg01966.html
            PR c++/87137
            * stor-layout.c (place_field): Scan forwards to check last
            bitfield when ms_bitfield_placement is in effect.
            gcc/testsuite/
            * g++.dg/abi/pr87137.C: New.
    
    From-SVN: r264123

commit c2153ea930620d73d8df375b2b8857c54ddf8b0c
Author: Richard Biener <rguenther@suse.de>
Date:   Wed Sep 5 09:40:35 2018 +0000

    re PR bootstrap/87225 (tree-vect-stmts.c:3748 error: converting to 'bool' from 'std::nullptr_t' requires direct-initialization [-fpermissive])
    
    2018-09-05  Richard Biener  <rguenther@suse.de>
    
            PR bootstrap/87225
            * tree-vect-stmts.c (vectorizable_simd_clone_call): Fix bogus
            return.
    
    From-SVN: r264117

commit 3ed01143f510fda490ce431f42f5e8145c837ae1
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Wed Sep 5 09:23:45 2018 +0200

    backport: re PR target/87198 (ICE in extract_insn, at recog.c:2304)
    
            Backported from mainline
            2018-09-04  Jakub Jelinek  <jakub@redhat.com>
    
            PR target/87198
            * common/config/i386/i386-common.c (OPTION_MASK_ISA_XSAVEOPT_SET,
            OPTION_MASK_ISA_XSAVES_SET, OPTION_MASK_ISA_XSAVEC_SET): Use
            OPTION_MASK_ISA_XSAVE_SET instead of OPTION_MASK_ISA_XSAVE.
            (OPTION_MASK_ISA_XSAVE_UNSET): Add OPTION_MASK_ISA_XSAVES_UNSET
            and OPTION_MASK_ISA_XSAVEC_UNSET.
    
            * gcc.target/i386/pr87198.c: New test.
    
    From-SVN: r264109

commit d4dbff9aad78b200307d42cbbb88118a839c902d
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Wed Sep 5 09:23:00 2018 +0200

    backport: re PR middle-end/87138 (wrong code with TI multiplication with -O -march=k8 -fno-tree-fre -mavx512bw)
    
            Backported from mainline
            2018-08-31  Jakub Jelinek  <jakub@redhat.com>
    
            PR middle-end/87138
            * expmed.c (expand_mult_const): Use immed_wide_int_const instead of
            gen_int_mode.  Formatting fixes.
    
            * gcc.target/i386/avx512bw-pr87138.c: New test.
    
    From-SVN: r264108

commit b63ff065cd0b2e6638ee68dcb77c335fccb3b905
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Wed Sep 5 09:22:07 2018 +0200

    backport: re PR sanitizer/87095 (UndefinedBehaviorSanitizer vptr false positive with virtual inheritance only with -fno-sanitize-recover)
    
            Backported from mainline
            2018-08-29  Jakub Jelinek  <jakub@redhat.com>
    
            PR c++/87095
            * decl.c (begin_destructor_body): If current_class_type has
            virtual bases and the primary base is nearly empty virtual base,
            voidify clearing of vptr and make it conditional on in-charge
            argument.
    
            * g++.dg/ubsan/vptr-13.C: New test.
    
    From-SVN: r264107

commit 8aabc5e0d7d159e8911dba0e8d0e51172240dbc4
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Wed Sep 5 09:21:15 2018 +0200

    backport: re PR tree-optimization/86835 (Bogus "is used uninitialized" warning with -ffast-math)
    
            Backported from mainline
            2018-08-11  Jakub Jelinek  <jakub@redhat.com>
    
            PR tree-optimization/86835
            * tree-ssa-math-opts.c (insert_reciprocals): Even when inserting
            new_stmt after def_gsi, make sure to insert new_square_stmt after
            that stmt, not 2 stmts before it.
    
            * gcc.dg/pr86835.c: New test.
    
    From-SVN: r264106

commit 619f2f13f0300fbd6234e6b34a3a6f5472b3b2c6
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Wed Sep 5 09:20:31 2018 +0200

    backport: re PR c++/86836 (internal compiler error on structured bindings with shadow parameter on templated function)
    
            Backported from mainline
            2018-08-08  Jakub Jelinek  <jakub@redhat.com>
    
            PR c++/86836
            * pt.c (tsubst_expr): For structured bindings, call tsubst_decomp_names
            before tsubst_init, not after it.
    
            * g++.dg/cpp1z/decomp46.C: New test.
    
    From-SVN: r264105

commit ddd2553b685078a37fdca7dee84db9b6fad394b2
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Wed Sep 5 09:19:27 2018 +0200

    backport: re PR c++/86738 (gcc 8.2: Internal compiler error memcpy)
    
            Backported from mainline
            2018-08-08  Jakub Jelinek  <jakub@redhat.com>
    
            PR c++/86738
            * constexpr.c (cxx_eval_binary_expression): For arithmetics involving
            NULL pointer set *non_constant_p to true.
            (cxx_eval_component_reference): For dereferencing of a NULL pointer,
            set *non_constant_p to true and return t.
    
            * g++.dg/opt/pr86738.C: New test.
    
    From-SVN: r264104

commit 59789edafe389f6e3d4152008b39b719cb7bc1f7
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Wed Sep 5 09:16:15 2018 +0200

    backport: re PR c++/86706 (ICE in build_base_path, at cp/class.c:294)
    
            Backported from mainline
            2018-08-03  Jason Merrill  <jason@redhat.com>
    
            PR c++/86706
            * class.c (build_base_path): Use currently_open_class.
    
            * g++.dg/template/pr86706.C: New test.
    
    From-SVN: r264103

commit afe13a4113d32de51575560b7e4ff563808d50c7
Author: Jerry DeLisle <jvdelisle@gcc.gnu.org>
Date:   Wed Sep 5 03:26:17 2018 +0000

    simplify.c (gfc_simplify_modulo): Re-arrange code to test whether 'P' is zero and issue an error if it is.
    
    2018-09-04  Jerry DeLisle  <jvdelisle@gcc.gnu.org>
    
            * simplify.c (gfc_simplify_modulo): Re-arrange code to test
            whether 'P' is zero and issue an error if it is.
            * gfortran.dg/modulo_check: New test.
    
    From-SVN: r264102

commit 412d66b9284e8989b58475693961dc65472abd02
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Sep 5 00:16:27 2018 +0000

    Daily bump.
    
    From-SVN: r264099

commit f57d41c54c9e0a94bab67367a4a2c049558ad35f
Author: Max Filippov <jcmvbkbc@gmail.com>
Date:   Tue Sep 4 17:53:22 2018 +0000

    gcc: xtensa: fix NAND code in xtensa_expand_atomic
    
    NAND is ~(a1 & a2), but xtensa_expand_atomic does ~a1 & a2.
    That fixes libatomic tests atomic-op-{1,2}.
    
    gcc/
    2018-09-04  Max Filippov  <jcmvbkbc@gmail.com>
    
            Backport from mainline
            2018-09-04  Max Filippov  <jcmvbkbc@gmail.com>
    
            * config/xtensa/xtensa.c (xtensa_expand_atomic): Reorder AND and
            XOR operations in NAND case.
    
    From-SVN: r264089

commit cbcffed92e42d37b72b0ee15535f0871b2e0e0a8
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Tue Sep 4 14:31:01 2018 +0100

    Add -Waligned-new to Option Summary
    
            * doc/invoke.texi (Option Summary): Add -Waligned-new.
    
    From-SVN: r264081

commit 2cff89bbc0b2d20dcc4b33452dce120cd370fdd6
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Sep 4 00:16:52 2018 +0000

    Daily bump.
    
    From-SVN: r264073

commit 7a8ad7efdb5d8a5efb87ca96db91dc5753be5f54
Author: Tom de Vries <tdevries@suse.de>
Date:   Mon Sep 3 09:43:46 2018 +0000

    backport "[tail-merge] Fix side-effect test in stmt_local_def"
    
    2018-09-03  Tom de Vries  <tdevries@suse.de>
    
            backport from trunk:
            2018-06-21  Tom de Vries  <tdevries@suse.de>
    
            PR tree-optimization/85859
            * tree-ssa-tail-merge.c (stmt_local_def): Copy gimple_is_call
            test with comment from bb_no_side_effects_p.
    
            * gcc.dg/pr85859.c: New test.
    
    From-SVN: r264053

commit 221cf32dc5305724977dd653816aec46e88fe1c9
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Sep 3 00:16:45 2018 +0000

    Daily bump.
    
    From-SVN: r264048

commit 256af0ba938700287a8ff7852d95302a03539e87
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Sep 2 00:16:19 2018 +0000

    Daily bump.
    
    From-SVN: r264036

commit 8540e8dc3f8ab2507695ac05f07ccce78c943a33
Author: Michael Matz <matz@suse.de>
Date:   Sat Sep 1 17:33:45 2018 +0000

    re PR tree-optimization/87074 (Unroll and jam bug: O3 result differ from O2)
    
    Fix PR87074
    
            Backport from mainline
            PR tree-optimization/87074
            * gimple-loop-jam.c (unroll_jam_possible_p): Check loop exit
            PHIs for outer-loop uses.
    
    testsuite/
            * gcc.dg/pr87074.c: New test.
    
    From-SVN: r264030

commit bc35aae086a17c6bec467c683fe79778e00b09bb
Author: Paul Thomas <pault@gcc.gnu.org>
Date:   Sat Sep 1 08:11:34 2018 +0000

    re PR fortran/86328 (Runtime segfault reading an allocatable class(*) object in allocate statements)
    
    2018-09-01  Paul Thomas  <pault@gcc.gnu.org>
    
            PR fortran/86328
            PR fortran/86760
            * trans-array.c (gfc_conv_scalarized_array_ref): Do not fix
            info->descriptor but pass it directly to gfc_build_array_ref.
            (gfc_conv_array_ref): Likewise for se->expr.
            * trans.c (gfc_build_array_ref): If 'decl' is a COMPONENT_REF
            obtain the span field directly from it.
    
    2018-09-01  Paul Thomas  <pault@gcc.gnu.org>
    
            PR fortran/86328
            PR fortran/86760
            * gfortran.dg/pr86328.f90 : New test.
            * gfortran.dg/pr86760.f90 : New test.
    
    From-SVN: r264027

commit 7fc1ef04a215f0f941a4dfa698bed8468d5fc050
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Sep 1 00:16:35 2018 +0000

    Daily bump.
    
    From-SVN: r264025

commit 6f78daad777030270584dbc8a91dd62c7d0bf270
Author: Nathan Sidwell <nathan@acm.org>
Date:   Fri Aug 31 12:57:45 2018 +0000

    [PR c++/87155] Anonymous namespace and
    
    https://gcc.gnu.org/ml/gcc-patches/2018-08/msg02031.html
            PR c++/87155
            PR c++/84707
            cp/
            * name-lookup.c (name_lookup::search_namespace): Don't look at
            inlines when searching for NULL names.
            testsuite/
            * g++.dg/cpp0x/pr87155.C: New.
            * g++.dg/cpp0x/inline-ns10.C: Adjust.
    
    From-SVN: r264017

commit e8c87481f85f8e21d36d5efd9a33607fc09bd889
Author: Richard Biener <rguenther@suse.de>
Date:   Fri Aug 31 08:33:14 2018 +0000

    Backport PRs 86456, 86505, 86816, 86927, 86945, 87024
    
    2018-08-31  Richard Biener  <rguenther@suse.de>
    
            Backport from mainline
            2018-08-27  Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/86927
            * tree-vect-loop.c (vect_create_epilog_for_reduction): Properly
            use const cond reduction code.
    
            * gcc.dg/vect/pr86927.c: New testcase.
    
            2018-08-23  Richard Biener  <rguenther@suse.de>
    
            PR middle-end/87024
            * tree-inline.c (copy_bb): Drop unused __builtin_va_arg_pack_len
            calls.
    
            * gcc.dg/pr87024.c: New testcase.
    
            2018-08-22  Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/86945
            * tree-cfg.c (generate_range_test): Use unsigned arithmetic.
    
            * gcc.dg/torture/pr86945.c: New testcase.
    
            2018-08-17  Richard Biener  <rguenther@suse.de>
    
            PR middle-end/86505
            * tree-inline.c (copy_bb): When inlining __builtin_va_arg_pack_len ()
            across a va-arg-pack using call adjust its return value accordingly.
    
            * gcc.dg/torture/pr86505.c: New testcase.
    
            2018-08-02  Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/86816
            * tree-ssa-tail-merge.c (tail_merge_valueize): New function
            which checks for value availability before querying it.
            (gvn_uses_equal): Use it.
            (same_succ_hash): Likewise.
            (gimple_equal_p): Likewise.
    
            * g++.dg/torture/pr86816.C: New testcase.
    
            2018-07-17  Richard Biener  <rguenther@suse.de>
    
            PR lto/86456
            * dwarf2out.c (init_sections_and_labels): Always generate
            a debug_line_str_section for early LTO debug.
            (dwarf2out_finish): Reset debug_line_str_hash output early.
            Bump counter for extra dwarf5 .debug_loc labels to not conflict
            with fat LTO part.
            (dwarf2out_early_finish): Output debug_line_str.
    
            * g++.dg/debug/dwarf2/pr86456.C: New testcase.
    
    From-SVN: r264010

commit 5d15eb9d8e7b43fda4fb17442f27a49d92b8e830
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Aug 31 00:16:44 2018 +0000

    Daily bump.
    
    From-SVN: r264005

commit 0b925018db00713968e7f21bbefa7afd4bb05d3c
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Aug 30 00:16:49 2018 +0000

    Daily bump.
    
    From-SVN: r263971

commit 47ab3b39b3c6a5525f394c433cd159157dc81b86
Author: Luis Machado <luis.machado@linaro.org>
Date:   Wed Aug 29 18:59:08 2018 +0000

    [AArch64, Falkor] Switch to using Falkor-specific vector costs.
    
    The adjusted vector costs give Falkor a reasonable boost in performance for FP
    benchmarks (both CPU2017 and CPU2006) and doesn't change INT benchmarks that
    much. There are some regressions that will be investigated as follow on work.
    
    Numbers from the CI run:
    
    CPU2017:
    
    (R) 605.mcf_s: -1.8%
    (R) 620.omnetpp_s: -2%
        623.xalancbmk_s: 2%
        654.roms_s: 7%
    
    (R) INT mean: -0.09%
        FP mean: 0.70%
    
    CPU2006:
    
    (R) 429.mc: -5%
    (R) 471.omnetpp: -9.5% (potentially noise/fluctuations)
        483.xalancbmk: 6.02%
        410.bwaves: 5.03%
        433.milc: 2%
        434.zeusmp: 10.5%
    (R) 436.cactusADM: -12.75%
        437.leslie3d: 5.94%
    (R) 453.povray: -0.82%
        459.GemsFDTD: 16.87%
        465.tonto: 1%
    
    (R) INT mean: -0.79%
        FP mean: 1.54%
    
    gcc/ChangeLog:
    
    2018-08-29  Luis Machado  <luis.machado@linaro.org>
    
            * config/aarch64/aarch64.c (qdf24xx_vector_cost): New static global.
            (qdf24xx_tunings): Set vector cost structure to qdf24xx_vector_cost.
    
    From-SVN: r263965

commit 69de0a84750aa143a66c7ca4bd2382c16eeb7957
Author: Luis Machado <luis.machado@linaro.org>
Date:   Wed Aug 29 18:56:02 2018 +0000

    [aarch64] Adjust Falkor's sign extend reg+reg address cost
    
    Adjust Falkor's register_sextend cost from 4 to 3.  This fixes a testsuite
    failure in gcc.target/aarch64/extend.c:ldr_sxtw where GCC was generating
    a sbfiz instruction rather than a load with sign extension.
    
    No performance changes.
    
    gcc/ChangeLog:
    
    2018-08-29  Luis Machado  <luis.machado@linaro.org>
    
            * config/aarch64/aarch64.c (qdf24xx_addrcost_table)
            <register_sextend>: Set to 3.
    
    From-SVN: r263964

commit 655ce7561548122466053116b6a36bdd92c069a0
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Wed Aug 29 14:32:13 2018 +0200

    re PR c++/87122 (ICE in tsubst_decomp_names)
    
            PR c++/87122
            * pt.c (tsubst_expr) <case RANGE_FOR_STMT>: If
            processing_template_decl and decl is structured binding decl, call
            cp_finish_decomp.
    
            * g++.dg/cpp1z/decomp47.C: New test.
    
    From-SVN: r263954

commit 3cb9c9a1c65e8e7ade9346125ac28861cc377094
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Aug 29 00:16:30 2018 +0000

    Daily bump.
    
    From-SVN: r263939

commit 2cffd90b3ec65ca647e581ac9e96decfc001757c
Author: Martin Sebor <msebor@redhat.com>
Date:   Tue Aug 28 16:43:58 2018 +0000

    PR tree-optimization/86914 - wrong code with strlen() of poor-man's flexible array member plus offset
    
    gcc/ChangeLog:
    
            PR tree-optimization/86914
            * tree-ssa-strlen.c (maybe_set_strlen_range): Avoid MEM_REF.
    
    gcc/testsuite/ChangeLog:
    
            PR tree-optimization/86914
            * gcc.dg/strlenopt-57.c: New test.
    
    From-SVN: r263925

commit c568c2714e24c7d7404c947e933a43f35aef8002
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Tue Aug 28 16:52:18 2018 +0100

    PR libstdc++/87116 fix path::lexically_normal() handling of dot-dot
    
    Previously the logic that turned "a/b/c/../.." into "a/" failed to
    preserve an empty path at the end of the iteration sequence, as required
    by the trailing slash. That meant the result didn't meet the class
    invariants, and that "a/b/c/d/../../.." would remove four components
    instead of the three that "../../.." should remove.
    
            PR libstdc++/87116
            * src/filesystem/std-path.cc (path::lexically_normal): When handling
            a dot-dot filename, preserve an empty final component in the iteration
            sequence.
            [_GLIBCXX_FILESYSTEM_IS_WINDOWS]: Use preferred-separator for
            root-directory.
            * testsuite/27_io/filesystem/path/generation/normal.cc: Add new tests
            for more than two adjacent dot-dot filenames.
            [_GLIBCXX_FILESYSTEM_IS_WINDOWS]: Replace slashes with
            preferred-separator in expected normalized strings.
    
    From-SVN: r263923

commit 7377ca9ed6eec0d3552409c858b32d13d42e3567
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Aug 28 13:43:22 2018 +0200

    re PR middle-end/87099 (internal compiler error: segmentation fault)
    
            PR middle-end/87099
            * calls.c (maybe_warn_nonstring_arg): Punt early if
            warn_stringop_overflow is zero.  Don't call get_range_strlen
            on 3rd argument, keep iterating until lenrng[1] is INTEGER_CST.
            Only use lenrng[1] if non-NULL and INTEGER_CST.  Don't uselessly
            increment lenrng[0].
    
            * gcc.dg/pr87099.c: New test.
    
    From-SVN: r263917

commit 5503fa4a1613cb8cc85e5a8032a54f8f0befea97
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Aug 28 00:16:32 2018 +0000

    Daily bump.
    
    From-SVN: r263903

commit 3c309f6192890e8abbf94041c5f6eedd995895b7
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Mon Aug 27 11:14:38 2018 +0200

    re PR rtl-optimization/87065 (combine causes ICE in trunc_int_for_mode)
    
            PR rtl-optimization/87065
            * combine.c (simplify_if_then_else): Formatting fix.
            (if_then_else_cond): Guard MULT optimization with SCALAR_INT_MODE_P
            check.
            (known_cond): Don't return const_true_rtx for vector modes.  Use
            CONST0_RTX instead of const0_rtx.  Formatting fixes.
    
            * gcc.target/i386/pr87065.c: New test.
    
    From-SVN: r263873

commit 9a38659a4863a2b6c2cc53fe7ab6b8bb1fabef09
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Aug 27 00:16:56 2018 +0000

    Daily bump.
    
    From-SVN: r263866

commit 33d94456d34deb4752c12a0c7f9a82f3213f82a1
Author: Thomas Koenig <tkoenig@gcc.gnu.org>
Date:   Sun Aug 26 12:02:28 2018 +0000

    backport: re PR fortran/86704 (Segmentation fault when using matmul in combination with transpose)
    
    2018-08-26  Thomas Koenig  <tkoenig@gcc.gnu.org>
    
            Backport from trunk
            PR libfortran/86704
            * m4/matmul_internal.m4: Correct calculation of needed buffer size
            for arrays of shape (1,n).
            * generated/matmul_c10.c: Regenerated
            * generated/matmul_c16.c: Regenerated
            * generated/matmul_c4.c: Regenerated
            * generated/matmul_c8.c: Regenerated
            * generated/matmul_i1.c: Regenerated
            * generated/matmul_i16.c: Regenerated
            * generated/matmul_i2.c: Regenerated
            * generated/matmul_i4.c: Regenerated
            * generated/matmul_i8.c: Regenerated
            * generated/matmul_r10.c: Regenerated
            * generated/matmul_r16.c: Regenerated
            * generated/matmul_r4.c: Regenerated
            * generated/matmul_r8.c: Regenerated
            * generated/matmulavx128_c10.c: Regenerated
            * generated/matmulavx128_c16.c: Regenerated
            * generated/matmulavx128_c4.c: Regenerated
            * generated/matmulavx128_c8.c: Regenerated
            * generated/matmulavx128_i1.c: Regenerated
            * generated/matmulavx128_i16.c: Regenerated
            * generated/matmulavx128_i2.c: Regenerated
            * generated/matmulavx128_i4.c: Regenerated
            * generated/matmulavx128_i8.c: Regenerated
            * generated/matmulavx128_r10.c: Regenerated
            * generated/matmulavx128_r16.c: Regenerated
            * generated/matmulavx128_r4.c: Regenerated
            * generated/matmulavx128_r8.c: Regenerated
    
    2018-08-26  Thomas Koenig  <tkoenig@gcc.gnu.org>
    
            Backport from trunk
            PR libfortran/86704
            * gfortran.dg/matmul_19.f90: New test.
    
    From-SVN: r263861

commit 4fe03fd23b1845c70302240683413f87750291e7
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Aug 26 00:16:48 2018 +0000

    Daily bump.
    
    From-SVN: r263859

commit e8c64160c5196d75cb9ac491697976fb934d3b53
Author: Jozef Lawrynowicz <jozef.l@mittosystems.com>
Date:   Sat Aug 25 12:10:28 2018 +0000

    backport: re PR target/86662 (msp430-elf segfault with -flto and -mlarge)
    
    Backport from mainline
    PR target/86662
    
            * gcc/tree.c (build_common_tree_nodes): Initialize integer_types array
            with all enabled __intN types.
    
            * gcc/testsuite/gcc.target/msp430/pr86662.c: New test.
    
    From-SVN: r263853

commit 2bd3f2867c9a3cecbf857fa189391822d2db9d51
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Aug 25 00:16:48 2018 +0000

    Daily bump.
    
    From-SVN: r263848

commit 3911571d6fb1b6432422af502ad4278444c4c1eb
Author: Thomas Koenig <tkoenig@gcc.gnu.org>
Date:   Fri Aug 24 22:08:48 2018 +0000

    backport: re PR fortran/86837 (Optimization breaks an unformatted read with implicit loop)
    
    2018-08-24  Thomas Koenig  <tkoenig@gcc.gnu.org>
    
            Backport from trunk
            PR fortran/86837
            * frontend-passes.c (var_in_expr_callback): New function.
            (var_in_expr): New function.
            (traverse_io_block): Use var_in_expr instead of
            gfc_check_dependency for checking if the variable depends on the
            previous interators.
    
    2018-08-24  Thomas Koenig  <tkoenig@gcc.gnu.org>
    
            Backport from trunk
            PR fortran/86837
            * gfortran.dg/implied_do_io_6.f90: New test.
    
    From-SVN: r263844

commit 05d8121dff2c5aeb905c762c5f01a611e8f38c5e
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Aug 24 00:16:44 2018 +0000

    Daily bump.
    
    From-SVN: r263826

commit 13ed5fdfb19be32d4c0c4b1de5339add5977ecde
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Aug 23 00:16:52 2018 +0000

    Daily bump.
    
    From-SVN: r263797

commit 6a462b648f1f61b77094375c66bc75b5d72a7f54
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Aug 22 00:16:25 2018 +0000

    Daily bump.
    
    From-SVN: r263757

commit 779857837109abde81a29dad49d30c514b9271be
Author: H.J. Lu <hongjiu.lu@intel.com>
Date:   Tue Aug 21 16:17:35 2018 +0000

    x86: Always update EH return address in word_mode
    
    On x86, return address is always popped in word_mode.  eh_return needs
    to put EH return address in word_mode on stack.
    
    gcc/
    
            Backport from mainline
            PR target/87014
            * config/i386/i386.md (eh_return): Always update EH return
            address in word_mode.
    
    gcc/testsuite/
    
            Backport from mainline
            PR target/87014
            * g++.dg/torture/pr87014.C: New file.
    
    From-SVN: r263743

commit c152ec259f08dbd6c8f4f608c6a787da92f1d706
Author: Szabolcs Nagy <szabolcs.nagy@arm.com>
Date:   Tue Aug 21 13:16:10 2018 +0000

    Restrict the pr86763 test to *-*-linux* targets
    
    clock_gettime is not available on some baremetal targets
    and may require -lrt on some non-linux targets.
    
    gcc/testsuite/ChangeLog:
    
            Backport from mainline
            2018-08-21  Szabolcs Nagy  <szabolcs.nagy@arm.com>
    
            * g++.dg/torture/pr86763.C: Restrict to *-*-linux*.
    
    From-SVN: r263700

commit 107f0bfd213c67ccdc05f78b18e10b10aa874182
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Aug 21 00:16:13 2018 +0000

    Daily bump.
    
    From-SVN: r263682

commit e36b4dc501a7b6b0e4574dab835b47e8eadc2e89
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Aug 20 00:16:21 2018 +0000

    Daily bump.
    
    From-SVN: r263655

commit 1de6285cb4d689cbbca6056e682dbe90043c05ea
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Aug 19 00:16:14 2018 +0000

    Daily bump.
    
    From-SVN: r263650

commit 5808b95ca8c630204c9d216e0fbeaf4b5e46350a
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Aug 18 00:16:21 2018 +0000

    Daily bump.
    
    From-SVN: r263643

commit facdac1332f4bb16b5bd7fa88db04313c146cf42
Author: John David Anglin <danglin@gcc.gnu.org>
Date:   Fri Aug 17 22:51:44 2018 +0000

    backport: pa.md (UNSPEC_MEMORY_BARRIER): New unspec enum.
    
            Backport from mainline
            2018-08-11  John David Anglin  <danglin@gcc.gnu.org>
    
            gcc
            * config/pa/pa.md (UNSPEC_MEMORY_BARRIER): New unspec enum.
            Update comment for atomic instructions.
            (atomic_storeqi, atomic_storehi, atomic_storesi, atomic_storesf,
            atomic_loaddf, atomic_loaddf_1, atomic_storedf, atomic_storedf_1):
            Remove.
            (atomic_loaddi): Revise fence expansion to only emit fence prior to
            load for __ATOMIC_SEQ_CST model.
            (atomic_loaddi_1): Remove float register target.
            (atomic_storedi): Handle CONST_INT values.
            (atomic_storedi_1): Remove float register source.  Add special case
            for zero value.
            (memory_barrier): New expander and insn.
    
            libgcc
            * config/pa/linux-atomic.c: Update comment.
            (FETCH_AND_OP_2, OP_AND_FETCH_2, FETCH_AND_OP_WORD, OP_AND_FETCH_WORD,
            COMPARE_AND_SWAP_2, __sync_val_compare_and_swap_4,
            SYNC_LOCK_TEST_AND_SET_2, __sync_lock_test_and_set_4): Use
            __ATOMIC_RELAXED for atomic loads.
            (SYNC_LOCK_RELEASE_1): New define.  Use __sync_synchronize() and
            unordered store to release lock.
            (__sync_lock_release_8): Likewise.
            (SYNC_LOCK_RELEASE_2): Remove define.
    
    From-SVN: r263637

commit 74b44b0e76cf1814c146f4b42450e2dcf38e277a
Author: Richard Biener <rguenther@suse.de>
Date:   Fri Aug 17 11:51:48 2018 +0000

    backport: re PR c++/86763 (Wrong code comparing member of copy of a 237 byte object with nontrivial default constructor on x86-64 arch)
    
    2018-08-17  Richard Biener  <rguenther@suse.de>
    
            Backport from mainline
            2018-08-02  Richard Biener  <rguenther@suse.de>
    
            PR c++/86763
            * class.c (layout_class_type): Copy TYPE_TYPELESS_STORAGE
            to the CLASSTYPE_AS_BASE.
    
            * g++.dg/torture/pr86763.C: New testcase.
    
    From-SVN: r263617

commit 5cde5eabde1c2b4e3ef0695e07c65cd9cad994ac
Author: Martin Liska <mliska@suse.cz>
Date:   Fri Aug 17 13:33:25 2018 +0200

    Fix wrong option declaration of fcilkplus (PR other/86992).
    
    2018-08-17  Martin Liska  <mliska@suse.cz>
    
            PR other/86992
            * c.opt: Fix declaration of cilkplus.
    
    From-SVN: r263616

commit 96603eef3b952864216173714729c1c1d3661422
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Aug 17 00:16:27 2018 +0000

    Daily bump.
    
    From-SVN: r263610

commit ad1c9329584dd4db16258a35b31c316017be2fb8
Author: Tamar Christina <tamar.christina@arm.com>
Date:   Thu Aug 16 14:32:18 2018 +0000

    Backporting two Arm fixes from mainline fixing PR86640
    
    
    gcc/testsuite/
    2018-07-31  Segher Boessenkool  <segher@kernel.crashing.org>
    
            PR target/86640
            * gcc.target/arm/pr86640.c: New testcase.
    
    gcc/
    2018-07-31  Segher Boessenkool  <segher@kernel.crashing.org>
    
            PR target/86640
            * gcc.target/arm/pr86640.c: New testcase.
    
    From-SVN: r263589

commit ab354715c4fde24411bb2926ba33a734ca89cbbc
Author: Martin Liska <mliska@suse.cz>
Date:   Thu Aug 16 12:16:32 2018 +0200

    Backport r263248
    
    2018-08-16  Martin Liska  <mliska@suse.cz>
    
            Backport from mainline
            2018-08-02  Martin Liska  <mliska@suse.cz>
    
            PR gcov-profile/86817
            * gcov.c (process_all_functions): New function.
            (main): Call it.
            (process_file): Move functions processing to
            process_all_functions.
    
    From-SVN: r263580

commit 083e95359cbd652f9bf6caeec38b3244c808da14
Author: Martin Liska <mliska@suse.cz>
Date:   Thu Aug 16 12:16:17 2018 +0200

    Backport r263246
    
    2018-08-16  Martin Liska  <mliska@suse.cz>
    
            Backport from mainline
            2018-08-02  Martin Liska  <mliska@suse.cz>
    
            PR sanitizer/86022
            * sanitizer_common/sanitizer_linux_libcdep.cc (ThreadDescriptorSize):
            Cherry-pick compiler-rt revision 338606.
    
    From-SVN: r263579

commit 0c9f0809e6afc3bed431ededf6a6593245134a33
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Aug 16 00:16:29 2018 +0000

    Daily bump.
    
    From-SVN: r263575

commit 9b5636861b4f16c84639f99ba221a3d00c2bd7a9
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Aug 15 00:16:35 2018 +0000

    Daily bump.
    
    From-SVN: r263546

commit ce43526c53d168d49f82c2d65740bf4f4d60e3a8
Author: Siddhesh Poyarekar <siddhesh@sourceware.org>
Date:   Tue Aug 14 14:33:20 2018 +0000

    [aarch64] Fix falkor pipeline description for dup<q>
    
    There was a typo in the pipeline description where DUP was assigned to
    the vector pipes for quad mode ops when it really only uses the VTOG
    pipes.  Fixing this does not show any noticeable difference in
    performance (there's a very small bump of 1.7% in x264 but that's
    about it) in my tests but is the more precise description of operations
    for falkor.
    
            * config/aarch64/falkor.md (falkor_am_1_vxvy_vxvy): Move
            neon_dup_q to...
            (falkor_am_1_gtov_gtov): ... a new insn reservation.
    
    From-SVN: r263538

commit 2fbac2fb139f505614b7aef3dca5053781c88387
Author: Liu Hao <lh_mouse@126.com>
Date:   Tue Aug 14 10:17:27 2018 +0000

    backport: pretty-print.c (eat_esc_sequence): Swap the foreground and background colors if...
    
    2018-08-13  Liu Hao  <lh_mouse@126.com>
    
            Backport from mainline
            2018-08-13  Liu Hao  <lh_mouse@126.com>
    
            * pretty-print.c (eat_esc_sequence): Swap the foreground and
            background colors if the COMMON_LVB_REVERSE_VIDEO flag is set,
            and clear it thereafter, as it only works for DBCS.
    
    From-SVN: r263533

commit fe4de7b543a52ed914763d54733aedde62dc3b10
Author: Liu Hao <lh_mouse@126.com>
Date:   Tue Aug 14 10:15:37 2018 +0000

    backport: pretty-print.c (mingw_ansi_fputs): Do not call _close() on the handle returned by _get_osf_handle().
    
    2018-08-13  Liu Hao  <lh_mouse@126.com>
    
            Backport from mainline
            2018-08-13  Liu Hao  <lh_mouse@126.com>
    
            * pretty-print.c (mingw_ansi_fputs): Do not call _close() on the
            handle returned by _get_osf_handle().
    
    From-SVN: r263532

commit 785f9a6cb3cfc02e731cd793909503d9c50b5c59
Author: Richard Sandiford <richard.sandiford@arm.com>
Date:   Tue Aug 14 09:24:45 2018 +0000

    Fix invalid assumption in vect_transform_stmt (PR 86871)
    
    The handling of outer-loop uses of inner-loop definitions assumed
    that anything that wasn't a PHI would be a gassign.  It's also
    possible for it to be a gcall.
    
    2018-08-14  Richard Sandiford  <richard.sandiford@arm.com>
    
    gcc/
            Backport from mainline
            2018-08-09  Richard Sandiford  <richard.sandiford@arm.com>
    
            PR tree-optimization/86871
            * tree-vect-stmts.c (vect_transform_stmt): Use gimple_get_lhs
            instead of gimple_assign_lhs.
    
    gcc/testsuite/
            Backport from mainline
            2018-08-09  Richard Sandiford  <richard.sandiford@arm.com>
    
            PR tree-optimization/86871
            * gcc.dg/vect/pr86871.c: New test.
    
    From-SVN: r263528

commit bd7082ee34b519c4845e56d1bc2d4955dc8db472
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Aug 14 00:16:35 2018 +0000

    Daily bump.
    
    From-SVN: r263526

commit cb1f00214eb57f3246739767a7308af399ce27d4
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Mon Aug 13 20:15:40 2018 +0100

    Revert "libstdc++-v3: Have aligned_alloc() on Newlib"
    
    This reverts commit r263462 / 61b760a78fdf9f5d87b0b626a61a3216bd1411fc
    because aligned_alloc is not defined for baremetal newlib targets, see
    https://gcc.gnu.org/ml/libstdc++/2018-08/msg00065.html
    
    Revert
    2018-08-10  Sebastian Huber  <sebastian.huber@embedded-brains.de>
    
            PR target/85904
            * configure.ac: Define HAVE_ALIGNED_ALLOC if building for
            Newlib.
            * configure: Regenerate.
    
    From-SVN: r263517

commit 8b0194f352e9a0e74263ad47d997d823f31cc59e
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Aug 13 00:16:14 2018 +0000

    Daily bump.
    
    From-SVN: r263502

commit 5efd6bceeb1419a2b29f805e415f2fa1f0ff5a51
Author: Paul Thomas <pault@gcc.gnu.org>
Date:   Sun Aug 12 15:35:53 2018 +0000

    re PR fortran/86906 (erroneous name clash with renaming in use statement)
    
    2018-08-12  Paul Thomas  <pault@gcc.gnu.org>
    
            PR fortran/86906
            * resolve.c (resolve_fl_variable_derived): Check if the derived
            type is use associated before checking for the host association
            error.
    
    2018-08-12  Paul Thomas  <pault@gcc.gnu.org>
    
            PR fortran/86906
            * gfortran.dg/use_rename_9.f90: New test.
    
    From-SVN: r263498

commit 7faa31f1adc9363c95761f7def879e1fc25a4c31
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Aug 12 00:16:14 2018 +0000

    Daily bump.
    
    From-SVN: r263491

commit fc65b4b245a27a53b45385eb558ce6089632d0b3
Author: Jason Merrill <jason@redhat.com>
Date:   Sat Aug 11 07:01:49 2018 -0400

    PR c++/86728 - C variadic generic lambda.
    
            * parser.c (cp_parser_parameter_declaration): Don't turn 'auto' into
            a pack if it's followed by a declarator-id.
    
    From-SVN: r263485

commit dfc5988a5c5e0f0428a96f436feb65753c89d723
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Aug 11 00:16:26 2018 +0000

    Daily bump.
    
    From-SVN: r263482

commit d69fb5d468dd93a4e704b0bdc4c4200f6efdb365
Author: Sebastian Huber <sebastian.huber@embedded-brains.de>
Date:   Fri Aug 10 06:29:58 2018 +0000

    libstdc++-v3: Have aligned_alloc() on Newlib
    
    While building for Newlib, some configure checks must be hard coded.
    The aligned_alloc() is supported since 2015 in Newlib.
    
    libstdc++-v3/
    
            PR target/85904
            * configure.ac: Define HAVE_ALIGNED_ALLOC if building for
            Newlib.
            * configure: Regenerate.
    
    From-SVN: r263462

commit f6d3c161d4f2f6334217fd7eb51943275dbe5142
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Aug 10 00:16:25 2018 +0000

    Daily bump.
    
    From-SVN: r263459

commit ab1ae2152eece6a4482480454cd93e18220b2d83
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Aug 9 00:16:27 2018 +0000

    Daily bump.
    
    From-SVN: r263438

commit a921fcb5c91bdf3902312e535924f343ba8ff869
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Wed Aug 8 16:33:36 2018 +0100

    Prevent internal aligned_alloc clashing with libc version
    
    If configure fails to detect aligned_alloc we will try to define our
    own in new_opa.cc but that could clash with the libc version in
    <stdlib.h>. Use a namespace to keep them distinct.
    
            * libsupc++/new_opa.cc (aligned_alloc): Declare inside namespace to
            avoid clashing with an ::aligned_alloc function that was not detected
            by configure.
    
    From-SVN: r263413

commit 362982b4fb389f24753e30f54462d76ba8a82cf7
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Wed Aug 8 16:33:32 2018 +0100

    PR libstdc++/86597 directory_entry observers should clear error_code
    
            PR libstdc++/86597
            * include/bits/fs_dir.h (directory_entry::_M_file_type(error_code&)):
            Clear error_code when cached type is used.
            * testsuite/27_io/filesystem/directory_entry/86597.cc: New test.
    
    From-SVN: r263412

commit 4b3b4204da73655f4f88212f408be59c3bc3c838
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Wed Aug 8 16:33:25 2018 +0100

    Remove C++2a headers from docs
    
    The C++2a headers are only on trunk.
    
            * doc/xml/manual/using.xml: Remove C++2a headers not on gcc-8-branch.
            * doc/html/*: Regenerate.
    
    From-SVN: r263411

commit d9a35a5e80ef74c3ba80cb4e731a229a3aacd857
Author: Marek Polacek <polacek@redhat.com>
Date:   Wed Aug 8 15:30:50 2018 +0000

    re PR c++/86767 (continue statements in constexpr functions causes unbounded looping)
    
            PR c++/86767
            * constexpr.c (cxx_eval_statement_list): Handle continue.
    
    From-SVN: r263410

commit 757aa3a1feb66f0be6808106141d80a39393f00c
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Wed Aug 8 14:34:44 2018 +0100

    Fix docs on C++17 and LFTS headers
    
            * doc/xml/manual/using.xml: Add missing header to table and fix typo.
            Remove C++17 headers not present on gcc-8-branch.
            * doc/html/*: Regenerate.
    
    From-SVN: r263400

commit 681b45bed376bfce1220f4b7fa4d1b623817b45e
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Wed Aug 8 14:34:38 2018 +0100

    Add missing <experimental/numeric> header to docs
    
            * doc/xml/manual/using.xml: Add missing header to table and fix typo.
            * doc/html/*: Regenerate.
    
    From-SVN: r263399

commit e8a35dfe9e3917513395aa47bb5d8a80be061c1d
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Aug 8 00:16:24 2018 +0000

    Daily bump.
    
    From-SVN: r263386

commit 2eb1d549528acf01a3a7d99e375aceceaa40a359
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Tue Aug 7 22:39:04 2018 +0100

    Improve libstdc++ docs w.r.t newer C++ standards
    
    Instead of repeating all the old headers for every new standard I've
    changed the docs to only list the new headers for each standard.
    
    Backport from mainline
    2018-07-31  Jonathan Wakely  <jwakely@redhat.com>
    
            * doc/xml/manual/test.xml: Improve documentation on writing tests for
            newer standards.
            * doc/xml/manual/using.xml: Document all headers for C++11 and later.
            * doc/html/*: Regenerate.
    
    From-SVN: r263371

commit d12152de03b4e4bed127a2d637d0f644c36b401b
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Tue Aug 7 22:38:59 2018 +0100

    PR libstdc++/84535 constrain std::thread constructor
    
    The standard requires that the std::thread constructor is constrained so
    it can't be called with a first argument of type std::thread. The
    current implementation only meets that requirement if the constructor is
    called with one argument, by using deleted overloads. This uses an
    enable_if constraint to enforce the requirement for any number of
    arguments.
    
    Also add a static assertion to give a more readable error for invalid
    arguments that cannot be invoked.
    
    Backport from mainline
    2018-05-03  Jonathan Wakely  <jwakely@redhat.com>
    
            PR libstdc++/84535
            * include/std/thread (thread::__not_same): New SFINAE helper.
            (thread::thread(_Callable&&, _Args&&...)): Add SFINAE constraint that
            first argument is not a std::thread. Add static assertion to check
            INVOKE expression is valid.
            (thread::thread(thread&), thread::thread(const thread&&)): Remove.
            * testsuite/30_threads/thread/cons/84535.cc: New.
    
    From-SVN: r263370

commit fb03b699e4b19f19256ea6e99d7da6b2f1043349
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Tue Aug 7 22:38:55 2018 +0100

    PR libstdc++/60555 std::system_category() should recognise POSIX errno values
    
    Backport from mainline
    2018-08-03  Jonathan Wakely  <jwakely@redhat.com>
    
            * src/c++11/system_error.cc
            (system_error_category::default_error_condition): Add workaround for
            ENOTEMPTY and EEXIST having the same value on AIX.
            * testsuite/19_diagnostics/error_category/system_category.cc: Add
            extra testcases for EDOM, EILSEQ, ERANGE, EEXIST and ENOTEMPTY.
    
    Backport from mainline
    2018-08-01  Jonathan Wakely  <jwakely@redhat.com>
    
            PR libstdc++/60555
            * src/c++11/system_error.cc
            (system_error_category::default_error_condition): New override to
            check for POSIX errno values.
            * testsuite/19_diagnostics/error_category/generic_category.cc: New
            * testsuite/19_diagnostics/error_category/system_category.cc: New
            test.
    
    From-SVN: r263369

commit e94bc17c29950dbfd4b680d65fe6489e80f69755
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Tue Aug 7 22:38:50 2018 +0100

    PR libstdc++/86874 fix std::variant::swap regression
    
    Backport from mainline
    2018-08-07  Jonathan Wakely  <jwakely@redhat.com>
    
            PR libstdc++/86874
            * include/std/variant (_Copy_ctor_base::_M_destructive_move): Define
            here instead of in _Move_assign_base.
            (_Copy_ctor_base<true, _Types...>::_M_destructive_move): Define.
            (_Copy_assign_base::operator=): Use _M_destructive_move when changing
            the contained value to another alternative.
            (_Move_assign_base::operator=): Likewise.
            (_Move_assign_base::_M_destructive_move): Remove.
            * testsuite/20_util/variant/86874.cc: New test.
    
    From-SVN: r263368

commit 32d4925a740dac2c824def09728ee0e83b124fdc
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Tue Aug 7 22:38:45 2018 +0100

    PR libstdc++/86861 Meet precondition for Solaris memalign
    
    Solaris memalign requires alignment to be at least sizeof(int), so
    increase it as needed.
    
    Also move the check for valid alignments from the fallback
    implementation of aligned_alloc into operator new, as it's required for
    all of aligned_alloc, memalign, posix_memalign and __aligned_malloc.
    
    Backport from mainline
    2018-08-07  Jonathan Wakely  <jwakely@redhat.com>
    
            PR libstdc++/86861
            * libsupc++/new_opa.cc [_GLIBCXX_HAVE_MEMALIGN] (aligned_alloc):
            Replace macro with inline function.
            [__sun]: Increase alignment to meet memalign precondition.
            [!HAVE__ALIGNED_MALLOC && !HAVE_POSIX_MEMALIGN && !HAVE_MEMALIGN]
            (aligned_alloc): Move check for valid alignment to operator new.
            Remove redundant check for non-zero size, it's enforced by the caller.
            (operator new): Move check for valid alignment here. Use
            __builtin_expect on check for zero size.
    
    From-SVN: r263367

commit 1db140b90606cb4369b0a9fff76632de4be0ef18
Author: H.J. Lu <hongjiu.lu@intel.com>
Date:   Tue Aug 7 15:06:01 2018 +0000

    i386: Set cfun->machine->max_used_stack_alignment if needed
    
    cfun->machine->max_used_stack_alignment is used to decide how stack frame
    should be aligned.  This is independent of any psABIs nor 32-bit vs 64-bit.
    It is always safe to compute max_used_stack_alignment.  We compute it only
    if 128-bit aligned load/store may be generated on misaligned stack slot
    which will lead to segfault.
    
    gcc/
    
            Backport from mainline
            PR target/86386
            * config/i386/i386.c (ix86_finalize_stack_frame_flags): Set
            cfun->machine->max_used_stack_alignment if needed.
    
    gcc/testsuite/
    
            Backport from mainline
            PR target/86386
            * gcc.target/i386/pr86386.c: New file.
    
    From-SVN: r263359

commit 2af14d719411a83954087b03ae71208322623398
Author: Steve Ellcey <sellcey@cavium.com>
Date:   Tue Aug 7 08:58:20 2018 +0000

    Fix gcc.dg/vect/no-section-anchors-vect-69.c on SPARC etc. (PR tree-optimization/80925)
    
    2018-08-07  Steve Ellcey  <sellcey@cavium.com>
                Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>
    
            PR tree-optimization/80925
            * gcc.dg/vect/no-section-anchors-vect-69.c: Expect 3 loops
            vectorized on !vect_hw_misalign targets.
    
    Co-Authored-By: Rainer Orth <ro@CeBiTec.Uni-Bielefeld.DE>
    
    From-SVN: r263353

commit 1c0f8eff66ae1c5f531f3e4a10c5fbd70cd21ba9
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Aug 7 00:16:25 2018 +0000

    Daily bump.
    
    From-SVN: r263349

commit 2ba259eaf8e736fc2f09b3e73389dc95382643d5
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Aug 6 00:16:26 2018 +0000

    Daily bump.
    
    From-SVN: r263323

commit 90061efca2b8811c28084b9ceab2f76513ceeeb2
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Aug 5 00:16:29 2018 +0000

    Daily bump.
    
    From-SVN: r263315

commit 2a6b231d8e2b8add2aa1dd62e4b84724bb531413
Author: Uros Bizjak <uros@gcc.gnu.org>
Date:   Sat Aug 4 12:09:21 2018 +0200

    re PR testsuite/86153 (test case g++.dg/pr83239.C fails starting with r261585)
    
            PR testsuite/86153
            * g++.dg/pr83239.C (dg-options): Add -finline-limit=500.
    
    From-SVN: r263307

commit aa67c0466b479d9d6b205cbb5e2dd1b76fd3a519
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Aug 4 00:16:24 2018 +0000

    Daily bump.
    
    From-SVN: r263304

commit 39935fc4bd82fce56cf85a6122eee385bedf9516
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Aug 3 00:16:13 2018 +0000

    Daily bump.
    
    From-SVN: r263283

commit 230fcab00451f399ec73c0c0c43393294cbf7207
Author: Jozef Lawrynowicz <jozef.l@mittosystems.com>
Date:   Thu Aug 2 20:54:02 2018 +0000

    backport: re PR middle-end/86705 (pr45678-2.c ICE with msp430-elf -mlarge)
    
    2018-08-02  Jozef Lawrynowicz  <jozef.l@mittosystems.com>
    
            Backport from mainline
            2018-07-31  Jozef Lawrynowicz  <jozef.l@mittosystems.com>
    
            PR middle-end/86705
            * gcc/cfgexpand.c (set_parm_rtl): Use the alignment of Pmode when
            MAX_SUPPORTED_STACK_ALIGNMENT would otherwise be exceeded by the
            requested variable alignment.
            (expand_one_ssa_partition): Likewise.
            (expand_one_var): Likewise.
    
    From-SVN: r263279

commit d2fc0fcc41cd11e8485e91d170c03ae56f880319
Author: Andreas Schwab <schwab@linux-m68k.org>
Date:   Thu Aug 2 17:23:13 2018 +0000

    Fix invalid cc_status after [const_][us]mulsi3_highpart
    
            Backport from mainline
            PR target/86820
            * config/m68k/m68k.md (umulsi3_highpart+1, const_umulsi3_highpart)
            (smulsi3_highpart+1, const_smulsi3_highpart): Add CC_STATUS_INIT.
    
    testsuite/:
            PR target/86820
            * gcc.target/m68k/mulsi_highpart.c: New test.
    
    From-SVN: r263269

commit eb4bd740b42e4248ea39f10ecd2e7fbeb0c7f202
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Aug 2 00:16:44 2018 +0000

    Daily bump.
    
    From-SVN: r263242

commit a44e26144bb905bc510d7b9f7fe0b0fb0726ea63
Author: Marek Polacek <polacek@redhat.com>
Date:   Wed Aug 1 20:06:54 2018 +0000

    PR c++/86190 - bogus -Wsign-conversion warning
    
            PR c++/86190 - bogus -Wsign-conversion warning
            * typeck.c (cp_build_binary_op): Add a warning sentinel.
    
    From-SVN: r263237

commit e3238b400f636aaafa208ff148cf469703541efe
Author: Marek Polacek <polacek@redhat.com>
Date:   Wed Aug 1 18:17:29 2018 +0000

    re PR sanitizer/86759 (ThreadSanitizer: unsupported VMA range on ppc64le)
    
            PR sanitizer/86759
            * tsan/tsan_platform.h: Cherry-pick compiler-rt revision 318044.
            * tsan/tsan_platform_linux.cc: Cherry-pick compiler-rt revision
            319180.
    
    From-SVN: r263231

commit b90a41e724b01703df0c910a1ad2df3ae44e28a6
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Wed Aug 1 11:35:34 2018 +0200

    re PR c/85704 (cc1 run out of memory when it compile)
    
            PR c/85704
            * c-typeck.c (init_field_decl_cmp): New function.
            (output_pending_init_elements): Use it for field comparisons
            instead of pure bit_position comparisons.
    
            * gcc.c-torture/compile/pr85704.c: New test.
    
    From-SVN: r263199

commit b1761565882ed6a171136c2c89e597bc4dd5b6bf
Author: Richard Biener <rguenther@suse.de>
Date:   Wed Aug 1 08:06:20 2018 +0000

    re PR tree-optimization/86724 (Compilation error with new isl 0.20 (missing includes))
    
    2018-08-01  Richard Biener  <rguenther@suse.de>
    
            PR bootstrap/86724
            * graphite.h: Include isl/id.h and isl/space.h to allow build
            with ISL 0.20.
    
    From-SVN: r263194

commit fbd5f023a03f9f60c6ae36133703af5a711842a3
Author: Jan Willem Jagersma <jwjagersma@gmail.com>
Date:   Wed Aug 1 06:53:34 2018 +0000

    re PR target/86651 (lto-wrapper.exe: fatal error: simple_object_copy_lto_debug_sections not implemented: Invalid argument)
    
    2018-08-01 Jan Willem Jagersma  <jwjagersma@gmail.com>
    
            PR target/86651
            * dwarf2out.c (dwarf2out_early_finish): Do not generate assembly in LTO
            mode for COFF targets.
            * defaults.h (TARGET_COFF): Define.
            * config/i386/djgpp.h (TARGET_ASM_LTO_START, TARGET_ASM_LTO_END,
            TARGET_COFF): Define.
            (i386_djgpp_asm_lto_start, i386_djgpp_asm_lto_end): Declare.
            * config/i386/djgpp.c (saved_debug_info_level): New static variable.
            (i386_djgpp_asm_lto_start, i386_djgpp_asm_lto_end): New functions.
    
    From-SVN: r263192

commit 7cdfe89e198ef08e3dd41b84eef7cffaa32f3a2e
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Aug 1 00:16:16 2018 +0000

    Daily bump.
    
    From-SVN: r263189

commit 3ee83830bc385b7c02ede6b9c0c8032fb36bd06d
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Tue Jul 31 11:15:38 2018 +0100

    Add workaround for aligned_alloc bug on AIX
    
    On AIX 7.2.0.0 aligned_alloc incorrectly requires the alignment to be a
    multiple of sizeof(void*).
    
    This adds a workaround to the operator new overload taking an alignment
    value, to increase the alignment (and size) if needed.
    
    Backport from mainline
    2018-07-30  Jonathan Wakely  <jwakely@redhat.com>
    
            * libsupc++/new_opa.cc (operator new(size_t, align_val_t)): Add
            workaround for aligned_alloc bug on AIX.
            * testsuite/18_support/new_aligned.cc: New test.
    
    From-SVN: r263109

commit e7a2ce4720284920b2fa895ae1fac0f86b5e7a9b
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Tue Jul 31 10:38:41 2018 +0100

    Use default visibility to work around clang -fvisibility-inlines-hidden bug
    
    Clang (including trunk and many older versions) incorrectly marks static
    local variables (__tag) hidden when -fvisibility-inlines-hidden is used.
    This can lead to multiple instances of __tag when shares objects are used.
    
    Backport from mainline
    2018-07-20  Fangrui Song  <maskray@google.com>
    
            * include/bits/shared_ptr_base.h (_Sp_make_shared_tag::_S_ti): Use
            _GLIBCXX_VISIBILITY(default).
    
    From-SVN: r263086

commit 6df96334cad44cb12f90903c09333c5b2bce4c3a
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Tue Jul 31 10:38:37 2018 +0100

    PR libstdc++/86734 use addressof in reverse_iterator::operator->
    
            PR libstdc++/86734
            * include/bits/stl_iterator.h (reverse_iterator::operator->): Use
            addressof (LWG 2188).
            * testsuite/24_iterators/reverse_iterator/dr2188.cc: New test.
    
    From-SVN: r263085

commit 88ed9687e37958edb5bca0b27b57d637aba5d69c
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Tue Jul 31 10:38:28 2018 +0100

    PR libstdc++/84654 Disable __float128 specializations for -mno-float128
    
    Backport from mainline
    2018-05-08  Jonathan Wakely  <jwakely@redhat.com>
    
            PR libstdc++/85672
            * include/Makefile.am [!ENABLE_FLOAT128]: Change c++config.h entry
            to #undef _GLIBCXX_USE_FLOAT128 instead of defining it to zero.
            * include/Makefile.in: Regenerate.
            * include/bits/c++config (_GLIBCXX_USE_FLOAT128): Move definition
            within conditional block.
    
    Backport from mainline
    2018-05-01  Tulio Magno Quites Machado Filho  <tuliom@linux.vnet.ibm.com>
    
            PR libstdc++/84654
            * acinclude.m4: Set ENABLE_FLOAT128 instead of _GLIBCXX_USE_FLOAT128.
            * config.h.in: Remove references to _GLIBCXX_USE_FLOAT128.
            * configure: Regenerate.
            * include/Makefile.am: Replace the value of _GLIBCXX_USE_FLOAT128
            based on ENABLE_FLOAT128.
            * include/Makefile.in: Regenerate.
            * include/bits/c++config: Define _GLIBCXX_USE_FLOAT128.
            [!defined(__FLOAT128__) && !defined(__SIZEOF_FLOAT128__)]: Undefine
            _GLIBCXX_USE_FLOAT128.
    
    From-SVN: r263084

commit 9ea10db84ac2a26c5b29ffaf3e11c4aa34fe5650
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Jul 31 00:16:30 2018 +0000

    Daily bump.
    
    From-SVN: r263079

commit 790103629bee941834522cf29bdb08d26b1e7283
Author: Joseph Myers <joseph@codesourcery.com>
Date:   Mon Jul 30 16:31:37 2018 +0100

    * de.po, sv.po: Update.
    
    From-SVN: r263071

commit 29e08097acfff71cdfdaf87857054e2cec229de3
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Jul 30 00:16:37 2018 +0000

    Daily bump.
    
    From-SVN: r263058

commit 0cbf5c57d659c078d1673f166c7ac389994e51f6
Author: Bernd Edlinger <bernd.edlinger@hotmail.de>
Date:   Sun Jul 29 16:44:24 2018 +0000

    backport: re PR c/86617 (Volatile qualifier is ignored sometimes for unsigned char)
    
    gcc:
    2018-07-29  Bernd Edlinger  <bernd.edlinger@hotmail.de>
    
            Backport from mainline
            2018-07-23  Bernd Edlinger  <bernd.edlinger@hotmail.de>
    
            PR c/86617
            * genmatch.c (dt_operand::gen_match_op): Avoid folding volatile values.
    
    testsuite:
    2018-07-29  Bernd Edlinger  <bernd.edlinger@hotmail.de>
    
            Backport from mainline
            2018-07-23  Bernd Edlinger  <bernd.edlinger@hotmail.de>
    
            PR c/86617
            * gcc.dg/pr86617.c: New test.
    
    From-SVN: r263055

commit 665fcf3386f81652eb0c9eaceaebda8247b1ae51
Author: John David Anglin <danglin@gcc.gnu.org>
Date:   Sun Jul 29 15:54:08 2018 +0000

    pa.c (pa_output_addr_vec): Align address table.
    
            * config/pa/pa.c (pa_output_addr_vec): Align address table.
            * config/pa/pa.h (JUMP_TABLES_IN_TEXT_SECTION): Revise comment.
            * config/pa/pa32-linux.h (JUMP_TABLES_IN_TEXT_SECTION): Define.
    
    From-SVN: r263052

commit 5dea6f0d9bd79b25943ca4b7eca8651622154a08
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Jul 29 00:16:19 2018 +0000

    Daily bump.
    
    From-SVN: r263049

commit f91916db4d94f23014af9a79cd63e14837f31f06
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Jul 28 00:16:27 2018 +0000

    Daily bump.
    
    From-SVN: r263044

commit c84b2ab907588d50ac9e970726474adb29d26c46
Author: Joseph Myers <joseph@codesourcery.com>
Date:   Fri Jul 27 20:47:58 2018 +0100

    Update .po files.
    
            * be.po, da.po, de.po, el.po, es.po, fi.po, fr.po, hr.po, id.po,
            ja.po, nl.po, ru.po, sr.po, sv.po, tr.po, uk.po, vi.po, zh_CN.po,
            zh_TW.po: Update.
    
    From-SVN: r263037

commit d1094c3e9f1440a2f5cfcbe5d2bad5584fd8b33a
Author: Uros Bizjak <ubizjak@gmail.com>
Date:   Fri Jul 27 19:41:14 2018 +0200

    backport: re PR middle-end/86511 (Traps are generated for non-trapping compares)
    
            Backport from mainline
            2018-07-16  Uros Bizjak  <ubizjak@gmail.com>
    
            PR target/86511
            * expmed.c (emit_store_flag): Do not emit setcc followed by a
            conditional move when trapping comparison was split to a
            non-trapping one (and vice versa).
    
    From-SVN: r263034

commit 4022cdcabfed2c0a2a43dcda10dc606358c1b05b
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Jul 27 00:16:22 2018 +0000

    Daily bump.
    
    From-SVN: r263026

commit 39c7f2702680e1dfc15e38a44360feeb9f55e0f3
Author: Marek Polacek <polacek@redhat.com>
Date:   Thu Jul 26 21:25:16 2018 +0000

    * testsuite/30_threads/condition_variable_any/cond.cc: New.
    
    From-SVN: r263023

commit a4a818a01f8c1bd29b08246c8af74bc180d96374
Author: Pat Haugen <pthaugen@us.ibm.com>
Date:   Thu Jul 26 20:47:37 2018 +0000

    re PR target/86612 (__strdup problem on power 9)
    
            PR target/86612
            * gcc.target/powerpc/pr58673-2.c: Call strdup.
    
    From-SVN: r263021

commit 71b166932c446ed0f7d20b2685dac6be4fcdf6a0
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Jul 26 18:38:11 2018 +0200

    backport: re PR middle-end/86627 (Signed 128-bit division by 2 no longer expanded to RTL)
    
            Backported from mainline
            2018-07-24  Jakub Jelinek  <jakub@redhat.com>
    
            PR middle-end/86627
            * expmed.c (expand_divmod): Punt if d == HOST_WIDE_INT_MIN
            and size > HOST_BITS_PER_WIDE_INT.  For size > HOST_BITS_PER_WIDE_INT
            and abs_d == d, do the power of two handling if profitable.
    
            * gcc.target/i386/pr86627.c: New test.
    
    From-SVN: r263017

commit d6a1dcd4bb0b45d9a157209ccc47598e14689274
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Jul 26 18:36:29 2018 +0200

    backport: re PR middle-end/86542 (wrong-code for collapsed taskloop which needs omp_cpyfn)
    
            Backported from mainline
            2018-07-17  Jakub Jelinek  <jakub@redhat.com>
    
            PR middle-end/86542
            * omp-low.c (create_task_copyfn): Copy over also fields corresponding
            to _looptemp_ clauses, other than the first two.
    
            * testsuite/libgomp.c++/pr86542.C: New test.
    
    From-SVN: r263015

commit 4fb557773caec2f3b18b3fc53d28520785cc0d8c
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Jul 26 18:32:51 2018 +0200

    backport: re PR middle-end/86539 (OpenMP wrong-code with taskloop and references)
    
            Backported from mainline
            2018-07-17  Jakub Jelinek  <jakub@redhat.com>
    
            PR middle-end/86539
            * gimplify.c (gimplify_omp_for): Ensure taskloop firstprivatized init
            and cond temporaries don't have reference type if iterator has
            pointer type.  For init use &for_pre_body instead of pre_p if
            for_pre_body is non-empty.
    
            * testsuite/libgomp.c++/pr86539.C: New test.
    
    From-SVN: r263014

commit b1f88ff238ea8512717aedd6195bc80ff93d5b97
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Jul 26 18:28:18 2018 +0200

    backport: re PR fortran/86421 (OpenMP declare simd linear ref in module causes gfortran to bail out)
    
            Backported from mainline
            2018-07-10  Jakub Jelinek  <jakub@redhat.com>
    
            PR fortran/86421
            * module.c (omp_declare_simd_clauses): Add LINEAR with _REF, _VAL and
            _UVAL suffixes.
            (mio_omp_declare_simd): Save and restore ref, val and uval modifiers
            on linear clauses.  Initialize n->where to gfc_current_locus.
    
            * gfortran.dg/vect/pr86421.f90: New test.
    
    From-SVN: r263013

commit aa7a30f38260793147eebfefdfdecd84b0b7c7fd
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Jul 26 18:16:33 2018 +0200

    re PR middle-end/86660 (libgomp.c++/for-15.C ICEs with nvptx offloading)
    
            PR middle-end/86660
            * omp-low.c (scan_sharing_clauses): Don't ignore map clauses for
            declare target to variables if they have always,{to,from,tofrom} map
            kinds.
    
            * testsuite/libgomp.c/pr86660.c: New test.
    
    From-SVN: r263012

commit 83b0f31fc1de36fd400746c51fcfee9fc17cf373
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Jul 26 12:34:07 2018 +0200

    * BASE-VER: Set to 8.2.1.
    
    From-SVN: r262995

commit ddeb81e76461fc0075542d436dc962f3cf6fac92
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Jul 26 09:47:20 2018 +0000

    Update ChangeLog and version files for release
    
    From-SVN: r262992

commit a787dfe21c21becea5c7180c4d6fe2c63957633f
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Jul 26 00:16:24 2018 +0000

    Daily bump.
    
    From-SVN: r262987

commit a421d0176cd5f1e27b728634a09981b66fb9ddd3
Author: Joseph Myers <joseph@codesourcery.com>
Date:   Wed Jul 25 22:38:03 2018 +0100

    * es.po, ja.po, sv.po: Update.
    
    From-SVN: r262983

commit 78feaa8c1970c7e99870f1c081008b13efc046e9
Author: Joseph Myers <joseph@codesourcery.com>
Date:   Wed Jul 25 15:27:05 2018 +0100

    * gcc.pot: Regenerate.
    
    From-SVN: r262968

commit 9a4c673ccc5b208e75eb7cbb431200c60183f422
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Jul 25 00:16:30 2018 +0000

    Daily bump.
    
    From-SVN: r262956

commit aa55670ded6feece03d6caa11bb5d82eb7104483
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Jul 24 00:16:29 2018 +0000

    Daily bump.
    
    From-SVN: r262939

commit 5f7ff59b5b6c50f14d1bd36c8238ed6350e21163
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Jul 23 00:16:15 2018 +0000

    Daily bump.
    
    From-SVN: r262926

commit 7e95927398bf7b2f6a980134fcfe69f70e5ab8fb
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Jul 22 00:16:14 2018 +0000

    Daily bump.
    
    From-SVN: r262920

commit a7f6bbffae2a9fcd0808e01ba263f32b780e5500
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Jul 21 00:16:26 2018 +0000

    Daily bump.
    
    From-SVN: r262916

commit 067ed6f4f32f0ce12a3d1fd1d148269e70c2c1a1
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Jul 20 00:16:12 2018 +0000

    Daily bump.
    
    From-SVN: r262896

commit 56da4138e0240c2bcd9bbbf0492f7fe5fd517fb9
Author: Eli Zaretskii <eliz@gnu.org>
Date:   Thu Jul 19 08:47:35 2018 +0000

    simple-object-elf.c (ENOTSUP): If not defined by errno.h, redirect to ENOSYS.
    
    2018-07-19  Eli Zaretskii  <eliz@gnu.org>
    
            * simple-object-elf.c (ENOTSUP): If not defined by errno.h, redirect
            to ENOSYS.
    
    From-SVN: r262873

commit 1b19247e67cf7dfc98dd7c433af5b6ace63cdff9
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Jul 19 00:16:13 2018 +0000

    Daily bump.
    
    From-SVN: r262869

commit 276a9bd24cfafea622ac9ae5c4f985df176a1352
Author: Carl Love <cel@us.ibm.com>
Date:   Wed Jul 18 22:12:20 2018 +0000

    backport: re PR target/86414 (AIX generates wrong for divide and multiply for KC mode)
    
    gcc/testsuite/ChangeLog:
    
    2018-07-18  Carl Love  <cel@us.ibm.com>
    
            Backport from mainline
            2018-07-16  Carl Love  <cel@us.ibm.com>
    
            PR target/86414
            * gcc.target/powerpc/divkc3-2.c: Add dg-require-effective-target
            longdouble128.
            * gcc.target/powerpc/divkc3-3.c: Ditto.
            * gcc.target/powerpc/mulkc3-2.c: Ditto.
            * gcc.target/powerpc/mulkc3-3.c: Ditto.
            * gcc.target/powerpc/fold-vec-mergehl-double.c: Update counts.
            * gcc.target/powerpc/pr85456.c: Make check Linux and AIX specific.
    
    From-SVN: r262865

commit 8e80c77020058651942dce8e7eebcc58d0b9369a
Author: Martin Sebor <msebor@redhat.com>
Date:   Wed Jul 18 17:20:05 2018 +0000

    backport: PR middle-end/85602 - -Wsizeof-pointer-memaccess for strncat with size of source
    
    Backport from trunk.
    
    PR middle-end/85602 - -Wsizeof-pointer-memaccess for strncat with size of source
    
    gcc/c-family/ChangeLog:
    
            PR middle-end/85602
            * c-warn.c (sizeof_pointer_memaccess_warning): Check for attribute
            nonstring.
    
    gcc/ChangeLog:
    
            PR middle-end/85602
            * calls.c (maybe_warn_nonstring_arg): Handle strncat.
            * tree-ssa-strlen.c (is_strlen_related_p): Make extern.
            Handle integer subtraction.
            (maybe_diag_stxncpy_trunc): Handle nonstring source arguments.
            * tree-ssa-strlen.h (is_strlen_related_p): Declare.
            * doc/invoke.texi (-Wstringop-truncation): Update.
    
    gcc/testsuite/ChangeLog:
    
            PR middle-end/85602
            * gcc.dg/attr-nonstring-2.c: Adjust text of expected warning.
            * c-c++-common/attr-nonstring-8.c: New test.
    
    From-SVN: r262859

commit 850da5e6e5d7df5ba0de317f6949cda3d1ca4b5b
Author: Jason Merrill <jason@redhat.com>
Date:   Wed Jul 18 09:42:02 2018 -0400

    PR c++/86480 - nested variadic lambda and constexpr if.
    
            * pt.c (find_parameter_packs_r) [IF_STMT]: Don't walk into
            IF_STMT_EXTRA_ARGS.
    
    From-SVN: r262858

commit 23faf16330defb819d3953f6445d6c6b8f336ea6
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Wed Jul 18 14:23:55 2018 +0100

    Add xfail-if to some tests that fail with COW strings
    
    These tests fail when run with -D_GLIBCXX_USE_CXX11_ABI=0
    
    Backport from mainline
    2018-07-05  Jonathan Wakely  <jwakely@redhat.com>
    
            * testsuite/21_strings/basic_string/cons/char/deduction.cc: XFAIL for
            COW strings.
            * testsuite/21_strings/basic_string/cons/wchar_t/deduction.cc:
            Likewise.
    
    From-SVN: r262857

commit c0547e8251010e11baa714b691640190776f485c
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Wed Jul 18 14:23:47 2018 +0100

    Add experimental::sample and experimental::shuffle from N4531
    
    The additions to <experimental/random> were added in 2015 but the new
    algorithms in <experimental/algorithm> were not. This adds them.
    
    Also define "random_device" effective target to fix testsuite failures
    on bare metal targets without std::random_device. The effective target
    currently only matches targets where _GLIBCXX_USE_RANDOM_TR1 is defined,
    which means /dev/random and /dev/urandom are usable.
    
    Backport from mainline
    2018-07-04  Jonathan Wakely  <jwakely@redhat.com>
    
            * testsuite/25_algorithms/make_heap/complexity.cc: Require effective
            target for std::random_device.
            * testsuite/26_numerics/random/random_device/cons/default.cc:
            Likewise.
            * testsuite/experimental/algorithm/sample-2.cc: Likewise.
            * testsuite/experimental/algorithm/shuffle.cc: Likewise.
            * testsuite/experimental/random/randint.cc: Likewise.
            * testsuite/lib/libstdc++.exp
            (check_effective_target_random_device): New proc.
    
    Backport from mainline
    2018-06-26  David Edelsohn  <dje.gcc@gmail.com>
    
            * testsuite/experimental/algorithm/sample-2.cc: Add TLS DejaGNU
            directives.
            * testsuite/experimental/algorithm/shuffle.cc: Likewise.
    
    Backport from mainline
    2018-06-25  Jonathan Wakely  <jwakely@redhat.com>
    
            * include/experimental/algorithm (sample, shuffle): Add new overloads
            using per-thread random number engine.
            * testsuite/experimental/algorithm/sample.cc: Simpify and reduce
            dependencies by using __gnu_test::test_container.
            * testsuite/experimental/algorithm/sample-2.cc: New.
            * testsuite/experimental/algorithm/shuffle.cc: New.
    
    From-SVN: r262856

commit 7c5f0eaf56b7ca83dfb0538ed1182990d56a3703
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Jul 18 00:16:26 2018 +0000

    Daily bump.
    
    From-SVN: r262845

commit 9311e7d5dded01124a857d691d17b989040bae93
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Tue Jul 17 10:09:46 2018 +0000

    decl.c (choices_to_gnu): Rename parameters.
    
            * gcc-interface/decl.c (choices_to_gnu): Rename parameters.  Deal with
            an operand of Character type.  Factor out range generation to the end.
            Check that the bounds are literals and convert them to the type of the
            operand before building the ranges.
            * gcc-interface/utils.c (make_dummy_type): Minor tweak.
            (make_packable_type): Propagate TYPE_DEBUG_TYPE.
            (maybe_pad_type): Likewise.
    
    From-SVN: r262813

commit 1870ae0806e68dee101f1282b9a6d9b2f977d187
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Tue Jul 17 09:22:47 2018 +0000

    decl.c (gnat_to_gnu_entity): Deal with more rvalues in the expression of a renaming.
    
            * gcc-interface/decl.c (gnat_to_gnu_entity) <E_Variable>: Deal with
            more rvalues in the expression of a renaming.
    
    From-SVN: r262808

commit 7c80cd9b55c27a0d6164b4454eb89d9b35b6a67c
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Jul 17 00:16:31 2018 +0000

    Daily bump.
    
    From-SVN: r262763

commit 71f3cbbf21707fb0d5031c29d44a806f0dd2c5b2
Author: Fritz Reese <fritzoreese@gmail.com>
Date:   Mon Jul 16 20:55:32 2018 +0000

    re PR fortran/83184 (Out of memory or ICE with option -fdec)
    
    2018-07-16  Fritz Reese  <fritzoreese@gmail.com>
    
      gcc/testsuite/ChangeLog:
    
            PR fortran/83184
            * gfortran.dg/dec_structure_23.f90: Oops, "un-fix" error messages.
    
    From-SVN: r262748

commit 0036d19392c2c998125a0eae2aff88ab114d1db6
Author: Fritz Reese <fritzoreese@gmail.com>
Date:   Mon Jul 16 19:10:39 2018 +0000

    re PR fortran/83184 (Out of memory or ICE with option -fdec)
    
    2018-07-16  Fritz Reese  <fritzoreese@gmail.com>
    
        gcc/testsuite/ChangeLog:
    
            PR fortran/83184
            Backport from trunk.
            * gfortran.dg/assumed_rank_14.f90: New testcase.
            * gfortran.dg/assumed_rank_15.f90: New testcase.
            * gfortran.dg/dec_structure_8.f90: Update error messages.
            * gfortran.dg/dec_structure_23.f90: Update error messages.
    
        gcc/fortran/ChangeLog:
    
            PR fortran/83184
            Backport from trunk.
            * decl.c (match_old_style_init): Initialize locus of variable expr when
            creating a data variable.
            (match_clist_expr): Verify array is explicit shape/size before
            attempting to allocate constant array constructor.
    
    From-SVN: r262747

commit 674c2cac43b6b93ff8e2d8c8f989bcb7196bff02
Author: Fritz Reese <fritzoreese@gmail.com>
Date:   Mon Jul 16 18:59:44 2018 +0000

    backport: re PR fortran/86417 (FAIL: libgomp.fortran/alloc-comp-3.f90   -O0  (test for excess errors))
    
    2018-07-16  Fritz Reese  <fritzoreese@gmail.com>
    
        Backport r262442 and r262743.
    
        gcc/fortran/ChangeLog:
    
            Backport from trunk:
    
            PR fortran/86417
            * module.c (mio_component): Set component->loc when loading from module.
    
            PR fortran/83183
            PR fortran/86325
            * expr.c (class_allocatable, class_pointer, comp_allocatable,
            comp_pointer): New helpers.
            (component_initializer): Generate EXPR_NULL for allocatable or pointer
            components. Do not generate initializers for components within BT_CLASS.
            Do not assign to comp->initializer.
            (gfc_generate_initializer): Use new helpers; move code to generate
            EXPR_NULL for class allocatable components into component_initializer().
    
        gcc/testsuite/ChangeLog:
    
            Backport from trunk:
    
            PR fortran/83183
            PR fortran/86325
            * gfortran.dg/init_flag_18.f90: New testcase.
            * gfortran.dg/init_flag_19.f03: New testcase.
    
    From-SVN: r262746

commit a4275fcbde01e80cac9c60a5842db86f0fa8d8bf
Author: Claudiu Zissulescu <claziss@synopsys.com>
Date:   Mon Jul 16 18:17:02 2018 +0200

    [ARC] Reimplement return padding
    
    2018-06-16  Claudiu Zissulescu  <claziss@synopsys.com>
    
            Backport from mainline
            2018-06-12  Claudiu Zissulescu  <claziss@synopsys.com>
    
            * config/arc/arc-protos.h (arc_pad_return): Remove.
            * config/arc/arc.c (machine_function): Remove force_short_suffix
            and size_reason.
            (arc_print_operand): Adjust printing of '&'.
            (arc_verify_short): Remove conditional printing of short suffix.
            (arc_final_prescan_insn): Remove reference to size_reason.
            (pad_return): New function.
            (arc_reorg): Call pad_return.
            (arc_pad_return): Remove.
            (arc_init_machine_status): Remove reference to force_short_suffix.
            * config/arc/arc.md (vunspec): Add VUNSPEC_ARC_BLOCKAGE.
            (attr length): When attribute iscompact is true force to 2
            regardless; in the case of maybe check if we want to force the
            instruction to have 4 bytes length.
            (nopv): Change it to generate 4 byte long nop as well.
            (blockage): New pattern.
            (simple_return): Remove call to arc_pad_return.
            (p_return_i): Likewise.
    
    From-SVN: r262738

commit 4853d7a116243f9487700c77c9e3e359af0d4498
Author: Richard Biener <rguenther@suse.de>
Date:   Mon Jul 16 11:57:10 2018 +0000

    backport: [multiple changes]
    
    2018-07-19  Richard Biener  <rguenther@suse.de>
    
            Backport from mainline
            2018-07-13  Richard Biener  <rguenther@suse.de>
    
            PR debug/86452
            * dwarf2out.c (gen_type_die_with_usage): Use scope_die_for
            instead of get_context_die.
    
            2018-07-12  Richard Biener  <rguenther@suse.de>
    
            PR c/86453
            * c-attribs.c (handle_packed_attribute): Do not build a variant
            type with TYPE_PACKED, instead ignore the attribute if we may
            not apply to the original type.
    
            * g++.dg/warn/pr86453.C: New testcase.
    
            2018-07-11  Richard Biener  <rguenther@suse.de>
    
            PR debug/86457
            * dwarf2out.c (init_sections_and_labels): Use
            output_asm_line_debug_info consistently.
            (dwarf2out_early_finish): Likewise.
            (dwarf2out_finish): Remove DW_AT_stmt_list from early generated
            type units.
    
    From-SVN: r262691

commit adbe37b0b72c563a764fa7d2e3583b531dbd6109
Author: Richard Biener <rguenther@suse.de>
Date:   Mon Jul 16 11:01:48 2018 +0000

    backport: [multiple changes]
    
    2018-07-16  Richard Biener  <rguenther@suse.de>
    
            Backport from mainline
            2018-07-13  Richard Biener  <rguenther@suse.de>
    
            PR middle-end/85974
            * match.pd (addr1 - addr2): Allow either of the operand to
            have a conversion.
    
            * gcc.c-torture/compile/930326-1.c: Adjust to cover widening.
    
            2018-06-15  Richard Biener  <rguenther@suse.de>
    
            PR middle-end/86076
            * tree-cfg.c (move_stmt_op): unshare invariant addresses
            before adjusting their block.
    
            * gcc.dg/pr86076.c: New testcase.
    
            2018-06-06  Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/85935
            * graphite-scop-detection.c (find_params_in_bb): Analyze
            condition operands with respect to the correct loop.  Assert
            the analysis doesn't fail.
    
            * gcc.dg/graphite/pr85935.c: New testcase.
    
    From-SVN: r262690

commit 00a82bc0b49958937938cb62fce7e8d780876875
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Mon Jul 16 09:02:03 2018 +0000

    re PR tree-optimization/86514 (wrong manipulation of 2-dimensional packed array at -O)
    
            PR tree-optimization/86514
            * tree-ssa-reassoc.c (init_range_entry) <CASE_CONVERT>: Return for a
            conversion to a boolean type from a type with greater precision.
    
    From-SVN: r262685

commit d71c859d7fac3818a8a0eedc0dae2bbb5d772b47
Author: Andreas Krebbel <krebbel@linux.ibm.com>
Date:   Mon Jul 16 08:02:09 2018 +0000

    S/390: libstdc++: 32 and 64 bit abi baseline refresh
    
    libstdc++-v3/ChangeLog:
    
    2018-07-16  Andreas Krebbel  <krebbel@linux.ibm.com>
    
            * config/abi/post/s390-linux-gnu/baseline_symbols.txt: Update.
            * config/abi/post/s390x-linux-gnu/32/baseline_symbols.txt: Update.
            * config/abi/post/s390x-linux-gnu/baseline_symbols.txt: Update.
    
    From-SVN: r262682

commit 3aa76947bb549764b131b1777a96324cf4b59568
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Mon Jul 16 09:44:48 2018 +0200

    re PR c++/3698 (improper handling of an extern declared inline function)
    
            PR c++/3698
            PR c++/86208
            * cp-gimplify.c (cp_genericize_r): When using extern_decl_map, or
            in TREE_USED flag from stmt to h->to.
    
            * g++.dg/opt/pr3698.C: New test.
    
    From-SVN: r262679

commit b2aaf3b6d2c1d04ad531df96ef5f275f34019551
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Jul 16 00:16:30 2018 +0000

    Daily bump.
    
    From-SVN: r262674

commit 38467a3b6b510f5644abbdf070ed46437fe72eed
Author: Bill Schmidt <wschmidt@linux.ibm.com>
Date:   Sun Jul 15 17:55:44 2018 +0000

    backport: emmintrin.h (_mm_and_si128): New function.
    
    [gcc]
    
    2018-07-15  Bill Schmidt  <wschmidt@linux.ibm.com>
    
            Backport from mainline
            2018-07-13  Bill Schmidt  <wschmidt@linux.ibm.com>
                        Steve Munroe  <munroesj52@gmail.com>
    
            * config/rs6000/emmintrin.h (_mm_and_si128): New function.
            (_mm_andnot_si128): Likewise.
            (_mm_or_si128): Likewise.
            (_mm_xor_si128): Likewise.
    
    [gcc/testsuite]
    
    2018-07-15  Bill Schmidt  <wschmidt@linux.ibm.com>
    
            Backport from mainline
            2018-07-13  Bill Schmidt  <wschmidt@linux.ibm.com>
                        Steve Munroe  <munroesj52@gmail.com>
    
            * gcc.target/powerpc/sse2-pand-1.c: New file.
            * gcc.target/powerpc/sse2-pandn-1.c: Likewise.
            * gcc.target/powerpc/sse2-por-1.c: Likewise.
            * gcc.target/powerpc/sse2-pxor-1.c: Likewise.
    
    From-SVN: r262669

commit 1083fece6f3cc99e5452614c08f2d789324461a8
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Jul 15 00:16:14 2018 +0000

    Daily bump.
    
    From-SVN: r262664

commit e331e95b6df928e4d2d8bed58a347af87e8b5f54
Author: Martin Sebor <msebor@redhat.com>
Date:   Sat Jul 14 21:32:10 2018 +0000

    PR tree-optimization/86274 - SEGFAULT when logging std::to_string(NAN)
    
    gcc/ChangeLog:
    
            PR tree-optimization/86274
            * gimple-ssa-sprintf.c (fmtresult::type_max_digits): Verify
            precondition.
            (format_floating): Correct handling of infinities and NaNs.
    
    gcc/testsuite/ChangeLog:
    
            PR tree-optimization/86274
            * gcc.dg/tree-ssa/builtin-sprintf-9.c: New test.
            * gcc.dg/tree-ssa/builtin-sprintf-warn-1.c: Adjust.
            * gcc.dg/tree-ssa/builtin-sprintf-warn-10.c: Same.
            * gcc.dg/tree-ssa/builtin-sprintf-warn-15.c: Same.
            * gcc.dg/tree-ssa/builtin-sprintf-warn-7.c: Same.
            * gcc.dg/tree-ssa/builtin-sprintf.c: Same.
            * gcc.dg/tree-ssa/pr83198.c: Same.
    
    From-SVN: r262661

commit ec08469d2b88cbbc5c95b1ae348f2b05298e784c
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Jul 14 00:16:24 2018 +0000

    Daily bump.
    
    From-SVN: r262657

commit bcc60b70b40787e8cca75df4ad0b0a49afb77929
Author: H.J. Lu <hongjiu.lu@intel.com>
Date:   Fri Jul 13 20:36:01 2018 +0000

    x86: Tune Skylake, Cannonlake and Icelake as Haswell
    
    r259399, which added PROCESSOR_SKYLAKE, disabled many x86 optimizations
    which are enabled by PROCESSOR_HASWELL.  As the result, -mtune=skylake
    generates slower codes on Skylake than before.  The same also applies
    to Cannonlake and Icelak tuning.
    
    This patch changes -mtune={skylake|cannonlake|icelake} to tune like
    -mtune=haswell for until their tuning is properly adjusted. It also
    enables -mprefer-vector-width=256 for -mtune=haswell, which has no
    impact on codegen when AVX512 isn't enabled.
    
    Performance impacts on SPEC CPU 2017 rate with 1 copy using
    
    -march=native -mfpmath=sse -O2 -m64
    
    are
    
    1. On Broadwell server:
    
    500.perlbench_r         -0.56%
    502.gcc_r               -0.18%
    505.mcf_r               0.24%
    520.omnetpp_r           0.00%
    523.xalancbmk_r         -0.32%
    525.x264_r              -0.17%
    531.deepsjeng_r         0.00%
    541.leela_r             0.00%
    548.exchange2_r         0.12%
    557.xz_r                0.00%
    Geomean                 0.00%
    
    503.bwaves_r            0.00%
    507.cactuBSSN_r         0.21%
    508.namd_r              0.00%
    510.parest_r            0.19%
    511.povray_r            -0.48%
    519.lbm_r               0.00%
    521.wrf_r               0.28%
    526.blender_r           0.19%
    527.cam4_r              0.39%
    538.imagick_r           0.00%
    544.nab_r               -0.36%
    549.fotonik3d_r         0.51%
    554.roms_r              0.00%
    Geomean                 0.17%
    
    On Skylake client:
    
    500.perlbench_r         0.96%
    502.gcc_r               0.13%
    505.mcf_r               -1.03%
    520.omnetpp_r           -1.11%
    523.xalancbmk_r         1.02%
    525.x264_r              0.50%
    531.deepsjeng_r         2.97%
    541.leela_r             0.50%
    548.exchange2_r         -0.95%
    557.xz_r                2.41%
    Geomean                 0.56%
    
    503.bwaves_r            0.49%
    507.cactuBSSN_r         3.17%
    508.namd_r              4.05%
    510.parest_r            0.15%
    511.povray_r            0.80%
    519.lbm_r               3.15%
    521.wrf_r               10.56%
    526.blender_r           2.97%
    527.cam4_r              2.36%
    538.imagick_r           46.40%
    544.nab_r               2.04%
    549.fotonik3d_r         0.00%
    554.roms_r              1.27%
    Geomean                 5.49%
    
    On Skylake server:
    
    500.perlbench_r         0.71%
    502.gcc_r               -0.51%
    505.mcf_r               -1.06%
    520.omnetpp_r           -0.33%
    523.xalancbmk_r         -0.22%
    525.x264_r              1.72%
    531.deepsjeng_r         -0.26%
    541.leela_r             0.57%
    548.exchange2_r         -0.75%
    557.xz_r                -1.28%
    Geomean                 -0.21%
    
    503.bwaves_r            0.00%
    507.cactuBSSN_r         2.66%
    508.namd_r              3.67%
    510.parest_r            1.25%
    511.povray_r            2.26%
    519.lbm_r               1.69%
    521.wrf_r               11.03%
    526.blender_r           3.39%
    527.cam4_r              1.69%
    538.imagick_r           64.59%
    544.nab_r               -0.54%
    549.fotonik3d_r         2.68%
    554.roms_r              0.00%
    Geomean                 6.19%
    
    This patch improves -march=native performance on Skylake up to 60% and
    leaves -march=native performance unchanged on Haswell.
    
    gcc/
    
            Backport from mainline
            2018-07-13  H.J. Lu  <hongjiu.lu@intel.com>
                        Sunil K Pandey  <sunil.k.pandey@intel.com>
    
            PR target/84413
            * config/i386/i386.c (m_CORE_AVX512): New.
            (m_CORE_AVX2): Likewise.
            (m_CORE_ALL): Add m_CORE_AVX2.
            * config/i386/x86-tune.def: Replace m_HASWELL with m_CORE_AVX2.
            Replace m_SKYLAKE_AVX512 with m_CORE_AVX512 on avx256_optimal
            and remove the rest of m_SKYLAKE_AVX512.
    
    gcc/testsuite/
    
            Backport from mainline
            2018-07-13  H.J. Lu  <hongjiu.lu@intel.com>
                        Sunil K Pandey  <sunil.k.pandey@intel.com>
    
            PR target/84413
            * gcc.target/i386/pr84413-1.c: New test.
            * gcc.target/i386/pr84413-2.c: Likewise.
            * gcc.target/i386/pr84413-3.c: Likewise.
    
    From-SVN: r262650

commit 3485d089a515a6c349695cd677aa7632b3a1e6cf
Author: Nathan Sidwell <nathan@acm.org>
Date:   Fri Jul 13 16:46:08 2018 +0000

    [PR c++/86374] Name lookup failure in enclosing template
    
    https://gcc.gnu.org/ml/gcc-patches/2018-07/msg00701.html
            PR c++/86374
            * pt.c (lookup_template_class_1): Use tsubst_aggr_type for
            contexts that are classes.
    
            PR c++/86374
            * g++.dg/pr86374.C: New.
    
    From-SVN: r262639

commit dbb0d4f1f1abc51cb4ef2b3f8ed87bf82101524f
Author: Marek Polacek <polacek@redhat.com>
Date:   Fri Jul 13 13:36:35 2018 +0000

    re PR middle-end/86202 (ICE in get_range_info calling an invalid memcpy() declaration)
    
            PR middle-end/86202
            * gimple-fold.c (size_must_be_zero_p): Check the type of the size.
    
            * gcc.dg/Wint-conversion-2.c: New test.
    
    From-SVN: r262635

commit 4a63999874d4b438f16681bcc56f872f6309bc3a
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Jul 13 00:16:26 2018 +0000

    Daily bump.
    
    From-SVN: r262619

commit 621f2ee3a0b8a76a086f1a72635c83979a375b0c
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Jul 12 21:37:11 2018 +0200

    c-attribs.c (c_common_attribute_table): Add "omp declare target implicit" attribute.
    
            * c-attribs.c (c_common_attribute_table): Add
            "omp declare target implicit" attribute.
    
            * c-decl.c (c_decl_attributes): Don't diagnose vars without mappable
            type here, instead add "omp declare target implicit" attribute.
            (finish_decl): Diagnose vars without mappable type here.
    
            * decl2.c (cplus_decl_attributes): Don't diagnose vars without mappable
            type here, instead add "omp declare target implicit" attribute.  Add
            that attribute instead of "omp declare target" also when
            processing_template_decl.
            * decl.c (cp_finish_decl): Diagnose vars without mappable type here,
            and before calling cp_omp_mappable_type call complete_type.
    
            * c-c++-common/gomp/declare-target-3.c: New test.
            * g++.dg/gomp/declare-target-2.C: New test.
    
    From-SVN: r262606

commit 5517bcf3f256a50b86ec7007d9711bbec7c2fc57
Author: Richard Biener <rguenther@suse.de>
Date:   Thu Jul 12 12:47:48 2018 +0000

    re PR target/84829 (-mieee-fp causes to link with -lieee but that is no longer available)
    
    2018-07-12  Richard Biener  <rguenther@suse.de>
    
            PR target/84829
            * config/gnu-user.h (GNU_USER_TARGET_NO_PTHREADS_LIB_SPEC):
            Remove -mieee-fp handling.
    
            * gcc.target/i386/pr84829.c: New testcase.
    
    From-SVN: r262584

commit 7d4eb4cc4b0ad65405bdbb12fa618542d66fd308
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Jul 12 09:46:04 2018 +0200

    re PR tree-optimization/86492 (store-merging wrong-code)
    
            PR tree-optimization/86492
            * gimple-ssa-store-merging.c
            (imm_store_chain_info::coalesce_immediate_stores): Call
            check_no_overlap even for the merge_overlapping case.
    
            * gcc.c-torture/execute/pr86492.c: New test.
    
    From-SVN: r262577

commit 979bb941d80a60b6b350b49ef965ca6cde9a5a87
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Jul 12 00:16:15 2018 +0000

    Daily bump.
    
    From-SVN: r262570

commit 42fb7f70e9d802f620d467ce744eaae5ca39a780
Author: Jakub Jelinek <jakub@gcc.gnu.org>
Date:   Wed Jul 11 23:02:54 2018 +0200

    avx512bitalgintrin.h (_mm512_mask_bitshuffle_epi64_mask): Use __mmask64 type instead of __mmask8 for __M argument.
    
            * config/i386/avx512bitalgintrin.h (_mm512_mask_bitshuffle_epi64_mask):
            Use __mmask64 type instead of __mmask8 for __M argument.
            * config/i386/avx512fintrin.h (_mm512_mask_xor_epi64,
            _mm512_maskz_xor_epi64): Use __mmask8 type instead of __mmask16 for
            __U argument.
            (_mm512_mask_cmpneq_epi64_mask): Use __mmask8 type instead of
            __mmask16 for __M argument.
            (_mm512_maskz_insertf32x4, _mm512_maskz_inserti32x4,
            _mm512_mask_insertf32x4, _mm512_mask_inserti32x4): Cast last argument
            to __mmask16 instead of __mmask8.
            * config/i386/avx512vlintrin.h (_mm_mask_add_ps, _mm_maskz_add_ps,
            _mm256_mask_add_ps, _mm256_maskz_add_ps, _mm_mask_sub_ps,
            _mm_maskz_sub_ps, _mm256_mask_sub_ps, _mm256_maskz_sub_ps,
            _mm256_maskz_cvtepi32_ps, _mm_maskz_cvtepi32_ps): Use __mmask8 type
            instead of __mmask16 for __U argument.
            * config/i386/avx512vlbwintrin.h (_mm_mask_cmp_epi8_mask): Use
            __mmask16 instead of __mmask8 for __U argument.
            (_mm256_mask_cmp_epi8_mask): Use __mmask32 instead of __mmask16 for
            __U argument.
            (_mm256_cmp_epi8_mask): Use __mmask32 return type instead of
            __mmask16.
            (_mm_mask_cmp_epu8_mask): Use __mmask16 instead of __mmask8 for __U
            argument.
            (_mm256_mask_cmp_epu8_mask): Use __mmask32 instead of __mmask16 for
            __U argument.
            (_mm256_cmp_epu8_mask): Use __mmask32 return type instead of
            __mmask16.
            (_mm_mask_cmp_epi16_mask): Cast last argument to __mmask8 instead
            of __mmask16.
            (_mm256_mask_cvtepi8_epi16): Use __mmask16 instead of __mmask32 for
            __U argument.
            (_mm_mask_cvtepi8_epi16): Use __mmask8 instead of __mmask32 for
            __U argument.
            (_mm256_mask_cvtepu8_epi16): Use __mmask16 instead of __mmask32 for
            __U argument.
            (_mm_mask_cvtepu8_epi16): Use __mmask8 instead of __mmask32 for
            __U argument.
            (_mm256_mask_cmpneq_epu8_mask, _mm256_mask_cmplt_epu8_mask,
            _mm256_mask_cmpge_epu8_mask, _mm256_mask_cmple_epu8_mask): Change
            return type as well as __M argument type and all casts from __mmask8
            to __mmask32.
            (_mm256_mask_cmpneq_epu16_mask, _mm256_mask_cmplt_epu16_mask,
            _mm256_mask_cmpge_epu16_mask, _mm256_mask_cmple_epu16_mask): Change
            return type as well as __M argument type and all casts from __mmask8
            to __mmask16.
            (_mm256_mask_cmpneq_epi8_mask, _mm256_mask_cmplt_epi8_mask,
            _mm256_mask_cmpge_epi8_mask, _mm256_mask_cmple_epi8_mask): Change
            return type as well as __M argument type and all casts from __mmask8
            to __mmask32.
            (_mm256_mask_cmpneq_epi16_mask, _mm256_mask_cmplt_epi16_mask,
            _mm256_mask_cmpge_epi16_mask, _mm256_mask_cmple_epi16_mask): Change
            return type as well as __M argument type and all casts from __mmask8
            to __mmask16.
            * config/i386/avx512vbmi2vlintrin.h (_mm_mask_shrdi_epi32,
            _mm_mask_shldi_epi32): Cast last argument to __mmask8 instead of
            __mmask16.
    
            * gcc.target/i386/avx512bw-vpcmpb-2.c (CMP): Use SIZE macro instead
            of hardcoding size.  Cast (rel) to MASK_TYPE.
            * gcc.target/i386/avx512bw-vpcmpub-2.c (CMP): Likewise.
            * gcc.target/i386/avx512f-vinserti32x4-3.c: New test.
            * gcc.target/i386/avx512f-vinsertf32x4-3.c: New test.
            * gcc.target/i386/avx512vl-vpcmpnequb-2.c: New test.
            * gcc.target/i386/avx512vl-vpcmpgeub-2.c: New test.
            * gcc.target/i386/avx512vl-vpcmpleb-2.c: New test.
            * gcc.target/i386/avx512vl-vpcmpgeb-2.c: New test.
            * gcc.target/i386/avx512vl-vpcmpltb-2.c: New test.
            * gcc.target/i386/avx512vl-vpcmpltub-2.c: New test.
            * gcc.target/i386/avx512vl-vpcmpleub-2.c: New test.
            * gcc.target/i386/avx512vl-vpcmpneqb-2.c: New test.
            * gcc.target/i386/avx512vl-vpcmpnequw-2.c: New test.
            * gcc.target/i386/avx512vl-vpcmpgeuw-2.c: New test.
            * gcc.target/i386/avx512vl-vpcmplew-2.c: New test.
            * gcc.target/i386/avx512vl-vpcmpgew-2.c: New test.
            * gcc.target/i386/avx512vl-vpcmpltw-2.c: New test.
            * gcc.target/i386/avx512vl-vpcmpltuw-2.c: New test.
            * gcc.target/i386/avx512vl-vpcmpleuw-2.c: New test.
            * gcc.target/i386/avx512vl-vpcmpneqw-2.c: New test.
    
    2018-07-11  Grazvydas Ignotas  <notasas@gmail.com>
    
            * config/i386/avx512bwintrin.h: (_mm512_mask_cmp_epi8_mask,
            _mm512_mask_cmp_epu8_mask): Use __mmask64 type instead of __mmask32
            for __U argument.
    
            * gcc.target/i386/avx512bw-vpcmpb-2.c (SIZE): Define to
            (AVX512F_LEN / 8) instead of (AVX512F_LEN / 16).
            * gcc.target/i386/avx512bw-vpcmpub-2.c (SIZE): Likewise.
    
    From-SVN: r262567

commit 0ee8f2934406bf88360ace5d11a2e9c190390869
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Jul 11 00:16:53 2018 +0000

    Daily bump.
    
    From-SVN: r262548

commit 3a94668bde2a244a5672bf1a6a666ef060747a6d
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Jul 10 10:15:15 2018 +0200

    re PR sanitizer/86406 ([UBSAN] -fcompare-debug failure with -fsanitize=undefined)
    
            PR sanitizer/86406
            * cp-gimplify.c (cp_maybe_instrument_return): Skip trailing
            DEBUG_BEGIN_STMTs.
    
            * g++.dg/ubsan/pr86406.C: New test.
    
    From-SVN: r262537

commit 266914387961883c9743bbb78493f71fc3d83131
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Jul 10 00:16:41 2018 +0000

    Daily bump.
    
    From-SVN: r262531

commit 584d527a459596c485fbdf95b2a39d6086f27544
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Jul 9 00:16:45 2018 +0000

    Daily bump.
    
    From-SVN: r262508

commit e07bca0235d7bc5f43f882a59e6f1b7e07c117e3
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Jul 8 00:16:45 2018 +0000

    Daily bump.
    
    From-SVN: r262504

commit 65e1571061f8b488ed2eabb9d257c0b1569217b9
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Jul 7 00:16:14 2018 +0000

    Daily bump.
    
    From-SVN: r262491

commit 5666f55b4a5a578154acc983f47e8060f76159d9
Author: Sebastian Huber <sebastian.huber@embedded-brains.de>
Date:   Fri Jul 6 06:06:44 2018 +0000

    RTEMS/Ada: Change system configuration
    
    The previous system configuration led to undefined references to
    __gnat_raise_nodefer_with_msg().
    
    gcc/ada
            * libgnat/system-rtems.ads (Frontend_Exceptions): Set to False.
            (ZCX_By_Default): Set to True.
    
    From-SVN: r262468

commit 23c82ca51396926969352fd77befff6191caac95
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Jul 6 00:16:40 2018 +0000

    Daily bump.
    
    From-SVN: r262461

commit 418be8984510edebc02b6bb50f6e2af7f43c1505
Author: Martin Sebor <msebor@redhat.com>
Date:   Thu Jul 5 16:42:50 2018 +0000

    backport: PR tree-optimization/86400 - set<string>::set<char (*)[2]) constructor does not
    
    Backport from trunk.
    
    PR tree-optimization/86400 - set<string>::set<char (*)[2]) constructor does not
    work with array argument.
    
    gcc/ChangeLog:
            * gcc.dg/strlenopt-47.c: New test.
            * gcc.dg/strlenopt-48.c: New test.
    
    gcc/testsuite/ChangeLog:
            * gcc.dg/strlenopt-47.c: New test.
            * gcc.dg/strlenopt-48.c: New test.
    
    From-SVN: r262446

commit e98b932866136d452f55fafdcdef7748e799be83
Author: Carl Love <cel@us.ibm.com>
Date:   Thu Jul 5 15:04:27 2018 +0000

    backport: rs6000-c.c: Map ALTIVEC_BUILTIN_VEC_UNPACKH for float argument to VSX_BUILTIN_DOUBLEH_V4SF.
    
    gcc/ChangeLog:
    
    2018-07-03  Carl Love  <cel@us.ibm.com>
    
            Backport from trunk
            2018-07-03  Carl Love  <cel@us.ibm.com>
    
            * config/rs6000/rs6000-c.c: Map ALTIVEC_BUILTIN_VEC_UNPACKH for
            float argument to VSX_BUILTIN_DOUBLEH_V4SF.
            Map ALTIVEC_BUILTIN_VEC_UNPACKL for float argument to
            VSX_BUILTIN_DOUBLEL_V4SF.
    
    gcc/testsuite/ChangeLog:
    
    2018-07-03  Carl Love  <cel@us.ibm.com>
    
            Backport from trunk
            2018-07-03  Carl Love  <cel@us.ibm.com>
    
            * gcc.target/altivec-1-runnable.c: New test file.
            * gcc.target/altivec-2-runnable.c: New test file.
            * gcc.target/vsx-7.c (main2):  Test file changes not backported from
            mainline since test file does not exist in GCC 8.
    
    From-SVN: r262440

commit 7bfc19be2030df7161502a54ac820928a2b4f04e
Author: François Dumont <fdumont@gcc.gnu.org>
Date:   Thu Jul 5 05:14:36 2018 +0000

    backport: re PR libstdc++/86272 (__gnu_debug::string uses undefined __glibcxx_check_insert_range2)
    
    2018-07-05  François Dumont  <fdumont@gcc.gnu.org>
    
            Backport from mainline
            2018-07-04  François Dumont  <fdumont@gcc.gnu.org>
    
            PR libstdc++/86272
            * include/debug/string
            (__gnu_debug::basic_string<>::insert<_Ite>(const_iterator, _Ite, _Ite)):
            Use __glibcxx_check_insert_range.
    
    From-SVN: r262430

commit e9e4a2f42504a112de3b398b6f3627fc09aef258
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Jul 5 00:16:55 2018 +0000

    Daily bump.
    
    From-SVN: r262427

commit 4fc3e3382d6ed1afc0c8d23b71d51e94fffebad2
Author: Ville Voutilainen <ville.voutilainen@gmail.com>
Date:   Wed Jul 4 23:56:12 2018 +0300

    backport: re PR c++/86398 (is_trivially_constructible always returns true even when is_constructible returns false)
    
    Backport from mainline
    
    2018-07-04  Ville Voutilainen  <ville.voutilainen@gmail.com>
    
    gcc/cp/
    
    PR c++/86398
    * method.c (is_trivially_xible): Return false
    if is_xible_helper returns a NULL_TREE.
    
    testsuite/
    
    PR c++/86398
    * g++.dg/ext/is_trivially_constructible1.C: Add new tests.
    
    From-SVN: r262424

commit e691d077adad0cb84a47c76973fa67f5ffeb2ba6
Author: Luis Machado <luis.machado@linaro.org>
Date:   Wed Jul 4 20:05:23 2018 +0000

    [AArch64, Falkor] Falkor address costs tuning
    
    Switch from using generic address costs to using Falkor-specific ones, which
    give Falkor better results overall.
    
    gcc/ChangeLog:
    2018-07-04  Luis Machado  <luis.machado@linaro.org>
    
            * config/aarch64/aarch64.c (qdf24xx_addrcost_table): New static
            global.
            (qdf24xx_tunings) <addr_costs>: Set to qdf24xx_addrcost_table.
    
    From-SVN: r262422

commit 69366282dc9c8ed59b8ca718483bd0783a0665fc
Author: Martin Jambor <mjambor@suse.cz>
Date:   Wed Jul 4 14:20:26 2018 +0200

    Remove spurious $HOME include from BRIG FE Makefile
    
    2018-07-04  Martin Jambor  <mjambor@suse.cz>
    
            PR hsa/86371
            * Make-lang.in (BRIGINCLUDES): Remove erroneous include path in $HOME.
    
    From-SVN: r262399

commit 94d1cc7ec1c28e2c82b446c068359d0ef77676d2
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Wed Jul 4 12:47:04 2018 +0100

    Fix std::codecvt_utf8<wchar_t> for Mingw
    
    Backport from mainline
    2018-05-19  Jonathan Wakely  <jwakely@redhat.com>
    
            * src/c++11/codecvt.cc (__codecvt_utf8_base<wchar_t>::do_in)
            [__SIZEOF_WCHAR_T__==2 && __BYTE_ORDER__!=__ORDER_BIG_ENDIAN__]: Set
            little_endian element in bitmask.
            * testsuite/22_locale/codecvt/codecvt_utf8/69703.cc: Run all tests.
            * testsuite/22_locale/codecvt/codecvt_utf8/wchar_t/1.cc: New.
    
    From-SVN: r262397

commit 95c99eef87f517645f51a29e9750d8ff7ba3b67b
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Wed Jul 4 12:46:58 2018 +0100

    Remove redundant #if conditional
    
    The whole file is guarded by the same check already.
    
    Backport from mainline
    2018-07-03  Jonathan Wakely  <jwakely@redhat.com>
    
            * include/bits/alloc_traits.h: Remove redundant preprocessor
            condition.
    
    From-SVN: r262396

commit fe484b5c05d26cf6543a7d2cec2d0e60e2b5185f
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Wed Jul 4 12:46:54 2018 +0100

    Add std::__is_byte<std::byte> specialization
    
    Backport from mainline
    2018-06-27  Jonathan Wakely  <jwakely@redhat.com>
    
            * include/bits/cpp_type_traits.h [__cplusplus >= 201703]
            (__is_byte<byte>): Define specialization for std::byte.
    
    From-SVN: r262395

commit 9215bcfce4ecbc8119e198155e37c20e4981b08c
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Wed Jul 4 12:46:49 2018 +0100

    LWG 3050 Fix cv-qualification of convertibility constraints
    
    Backport from mainline
    2018-06-18  Jonathan Wakely  <jwakely@redhat.com>
    
            * include/std/chrono (duration, operator*, operator/, operator%): Use
            const-qualified type as source type in is_convertible constraints.
            * testsuite/20_util/duration/arithmetic/dr3050.cc: New.
            * testsuite/20_util/duration/cons/dr3050.cc: New.
            * testsuite/20_util/duration/literals/range.cc: Rename to...
            * testsuite/20_util/duration/literals/range_neg.cc: Here. Adjust
            dg-error lineno.
    
    From-SVN: r262394

commit 0034a8c50ffb61f13f9025e7d37076db5d0a4bef
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Wed Jul 4 12:46:43 2018 +0100

    PR libstdc++/86127 avoid unnecessary allocator conversions
    
    There is no need to use an allocator of the correct value_type when
    calling allocator_traits::construct and allocator_traits::destroy. The
    existing node allocator can be used, instead of constructing a new
    allocator object every time.
    
    There's also no benefit to using __gnu_cxx::__alloc_traits instead of
    std::allocator_traits to get the pointer and const_pointer types.
    std::forward_list is only available for C++11 and later, when
    std::allocator_traits is available too.
    
    Backport from mainline
    2018-06-13  Jonathan Wakely  <jwakely@redhat.com>
    
            PR libstdc++/86127
            * include/bits/forward_list.h (_Fwd_list_base::_Tp_alloc_type): Remove
            unused typedef.
            (_Fwd_list_base::_M_create_node, _Fwd_list_base::_M_erase_after):
            Use node allocator to create and destroy elements.
            (forward_list::_Tp_alloc_type): Remove unused typedef.
            (forward_list::_Alloc_traits): Use allocator_traits instead of
            __gnu_cxx::__alloc_traits.
    
    From-SVN: r262393

commit 39c17cfdb42cb0080a3929579980808e20dd0a7b
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Wed Jul 4 12:46:39 2018 +0100

    Qualify another call in <variant>
    
    Backport from mainline
    2018-05-29  Jonathan Wakely  <jwakely@redhat.com>
    
            * include/std/variant (__erased_dtor): Qualify call to __get.
    
    From-SVN: r262392

commit abcc3875a643fb0613d2fb18221dc762ec74523f
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Wed Jul 4 12:46:24 2018 +0100

    Qualify std::__invoke in <variant> to prevent ADL
    
    Backport from mainline
    2018-05-15  Jonathan Wakely  <jwakely@redhat.com>
    
            * include/std/variant (__gen_vtable_impl::__visit_invoke): Qualify
            __invoke to prevent ADL.
    
    From-SVN: r262391

commit 256632e04336f38745c9561d81c5d46dbaf87aae
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Wed Jul 4 12:45:51 2018 +0100

    PR target/85904 check for aligned_alloc on netbsd cross-compilation
    
    Backport from mainline
    2018-05-24  Maya Rashish  <coypu@sdf.org>
    
            PR target/85904
            * crossconfig.m4: Test for aligned_alloc on netbsd.
            * configure: Regenerate.
    
    From-SVN: r262390

commit ebfe1a8755731b845605000d2122ced7139765b8
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Wed Jul 4 12:45:04 2018 +0100

    PR libstdc++/85098 add missing definitions for static constants
    
    In C++11 and C++14 any odr-use of these constants requires a definition
    at namespace-scope.  In C++17 they are implicitly inline and so the
    namespace-scope redeclarations are redundant (and allowing them is
    deprecated).
    
    Backport from mainline
    2018-05-18  Jonathan Wakely  <jwakely@redhat.com>
    
            PR libstdc++/85098
            * include/bits/regex.h [__cplusplus < 201703L] (basic_regex::icase)
            (basic_regex::nosubs, basic_regex::optimize, basic_regex::collate)
            (basic_regex::ECMAScript, basic_regex::basic, basic_regex::extended)
            (basic_regex::awk, basic_regex::grep, basic_regex::egrep): Add
            definitions.
            * include/bits/regex_automaton.h (_NFA::_M_insert_state): Adjust
            whitespace.
            * include/bits/regex_compiler.tcc (__INSERT_REGEX_MATCHER): Add
            braces around body of do-while.
            * testsuite/28_regex/basic_regex/85098.cc: New
    
    From-SVN: r262389

commit 71cf23a22be1f4ac8c82b8a90e1b4660e7a61097
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Wed Jul 4 12:44:56 2018 +0100

    PR libstdc++/85671 allow copy elision in path concatenation
    
    By performing the /= operation on a named local variable instead of a
    temporary the copy made for the return value can be elided.
    
    Backport from mainline
    2018-05-07  Jonathan Wakely  <jwakely@redhat.com>
    
            PR libstdc++/85671
            * include/bits/fs_path.h (operator/): Permit copy elision.
            * include/experimental/bits/fs_path.h (operator/): Likewise.
    
    From-SVN: r262388

commit 4105b25dd95664e98e2fdfadac906e5666e977c4
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Wed Jul 4 12:44:51 2018 +0100

    PR libstdc++/83982 fix exception-safety guarantee of std::vector::resize
    
    Construct new elements before moving existing ones, so that if a default
    constructor throws, the existing elements are not left in a moved-from
    state.
    
    Backport from mainline
    2018-06-14  Daniel Trebbien <dtrebbien@gmail.com>
                Jonathan Wakely  <jwakely@redhat.com>
    
            PR libstdc++/83982
            * include/bits/vector.tcc (vector::_M_default_append(size_type)):
            Default-construct new elements before moving existing ones.
            * testsuite/23_containers/vector/capacity/resize/strong_guarantee.cc:
            New.
    
    From-SVN: r262387

commit 65b6f2a12584a2f8772547ba6600c4aa59e96f08
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Wed Jul 4 12:44:45 2018 +0100

    PR libstdc++/86292 fix exception safety of std::vector<InputIterator> constructor
    
    Backport from mainline
    2018-06-25  Jonathan Wakely  <jwakely@redhat.com>
    
            PR libstdc++/86292
            * include/bits/stl_vector.h (vector::_M_range_initialize<InputIter>):
            Add try-catch block.
            * testsuite/23_containers/vector/cons/86292.cc: New.
    
    From-SVN: r262386

commit cc98291bb8c58ad23f918ff61fd126907c5de537
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Wed Jul 4 12:44:39 2018 +0100

    Declare some explicit instantiations for strings in Debug Mode
    
    The empty reps and the I/O functions do not need to be implicitly
    instantiated to enable assertions, so declare the explicit
    instantiations when _GLIBCXX_EXTERN_TEMPLATE == -1 (i.e. when
    _GLIBCXX_ASSERTIONS is defined).
    
    Backport from mainline
    2018-06-27  Jonathan Wakely  <jwakely@redhat.com>
    
            PR libstdc++/86138
            * include/bits/basic_string.tcc: [_GLIBCXX_EXTERN_TEMPLATE < 0]
            Declare explicit instantiations of COW empty reps and I/O functions.
    
    From-SVN: r262385

commit ababbf838fab70583c2e1ef943f6a8dd9127e758
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Wed Jul 4 12:44:35 2018 +0100

    LWG 3076 basic_string CTAD ambiguity
    
    When deduction guides are supported by the compiler (i.e. for C++17 and
    later) replace two basic_string constructors by constrained function
    templates as required by LWG 3075. In order to ensure that the pre-C++17
    non-template constructors are still exported from the shared library
    define a macro in src/c++11/string-inst.cc to force the non-template
    declarations (this isn't strictly needed yet, because the string
    instantiations are compiled with -std=gnu++11, but that is likely to
    change).
    
    Backport from mainline
    2018-06-16  Jonathan Wakely  <jwakely@redhat.com>
    
            LWG 3076 basic_string CTAD ambiguity
            * doc/xml/manual/intro.xml: Document LWG 3076 change.
            * include/bits/basic_string.h
            [__cpp_deduction_guides && !_GLIBCXX_DEFINING_STRING_INSTANTIATIONS]
            (basic_string(const _CharT*, const _Alloc&)): Turn into a function
            template constrained by _RequireAllocator.
            (basic_string(size_type, _CharT, const _Alloc&)): Likewise.
            * src/c++11/string-inst.cc (_GLIBCXX_DEFINING_STRING_INSTANTIATIONS):
            Define.
            * testsuite/21_strings/basic_string/cons/char/deduction.cc: Test
            deduction
            * testsuite/21_strings/basic_string/cons/wchar_t/deduction.cc:
            Likewise.
    
    From-SVN: r262384

commit 8cccb9d5336d95f132c0e80a4bfe429f514893ca
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Wed Jul 4 12:44:29 2018 +0100

    LWG 3075 basic_string needs deduction guides from basic_string_view
    
    Backport from mainline
    2018-06-14  Jonathan Wakely  <jwakely@redhat.com>
    
            * include/bits/basic_string.h: Add deduction guides from string_view.
            * testsuite/21_strings/basic_string/cons/char/deduction.cc: Test
            deduction from string views.
            * testsuite/21_strings/basic_string/cons/wchar_t/deduction.cc:
            Likewise.
    
    From-SVN: r262383

commit 49f5cced6c58b3e10289471bf4499583f282e38d
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Wed Jul 4 12:44:24 2018 +0100

    PR libstdc++/84087 add default arguments to basic_string members (LWG 2268)
    
    This change was a DR against C++11 and so should have been implemented
    years ago.
    
    Backport from mainline
    2018-05-03  Jonathan Wakely  <jwakely@redhat.com>
    
            PR libstdc++/84087 LWG DR 2268 basic_string default arguments
            * include/bits/basic_string.h [_GLIBCXX_USE_CXX11_ABI=1]
            (append(const basic_string&, size_type, size_type)
            (assign(const basic_string&, size_type, size_type)
            (insert(size_type, const basic_string&, size_type, size_type)
            (replace(size_type,size_type,const basic_string&,size_type,size_type)
            (compare(size_type,size_type,constbasic_string&,size_type,size_type)):
            Add default arguments (LWG 2268).
            [_GLIBCXX_USE_CXX11_ABI=0]
            (append(const basic_string&, size_type, size_type)
            (assign(const basic_string&, size_type, size_type)
            (insert(size_type, const basic_string&, size_type, size_type)
            (replace(size_type,size_type,const basic_string&,size_type,size_type)
            (compare(size_type,size_type,constbasic_string&,size_type,size_type)):
            Likewise.
            * testsuite/21_strings/basic_string/dr2268.cc: New test.
    
    From-SVN: r262382

commit a0a50e3fced8cd60b2ef684fa3025de5f8e40d2a
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Wed Jul 4 12:44:11 2018 +0100

    PR libstdc++/86398 fix std::is_trivially_constructible regression
    
    The intrinsic doesn't check for allowed conversions between scalar
    types, so restore the std::is_constructible check.
    
    Also make some trivial whitespace changes.
    
            PR libstdc++/86398
            * include/std/type_traits (is_trivially_constructible): Check
            is_constructible before __is_trivially_constructible.
            * testsuite/20_util/is_trivially_constructible/value.cc: Add more
            tests, including negative cases.
            * testsuite/20_util/make_signed/requirements/typedefs_neg.cc: Use
            zero for dg-error lineno.
            * testsuite/20_util/make_unsigned/requirements/typedefs_neg.cc:
            Likewise.
    
    From-SVN: r262381

commit a7a95fdcc2258f2136fc56b52ab806157a1ff898
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Jul 4 00:16:56 2018 +0000

    Daily bump.
    
    From-SVN: r262363

commit fe378c62ba778867491cfdd211ad0448205f8a7c
Author: Jason Merrill <jason@redhat.com>
Date:   Tue Jul 3 12:25:55 2018 -0400

    PR c++/86378 - functional cast in noexcept-specifier.
    
            * tree.c (strip_typedefs_expr) [TREE_LIST]: Fix iteration.
    
    From-SVN: r262351

commit a1686e4679857c5f7ee43e18920667482ede7948
Author: Jason Merrill <jason@redhat.com>
Date:   Tue Jul 3 12:25:49 2018 -0400

    Reduce garbage from push_to_top_level.
    
            * name-lookup.c (do_push_to_top_level): Don't allocate
            current_lang_base.
            (do_pop_from_top_level): Release current_lang_base.
    
    From-SVN: r262350

commit c6d394e3fe69cfdc025223fee6c7f682d5da8f2d
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Jul 3 00:16:36 2018 +0000

    Daily bump.
    
    From-SVN: r262325

commit 4ce364063a73e3c92b2e4ee19e6a70d8c52b6832
Author: Segher Boessenkool <segher@kernel.crashing.org>
Date:   Mon Jul 2 23:25:10 2018 +0200

    rs6000: Set up ieee128_float_type_node correctly (PR86285)
    
    We shouldn't init __ieee128 to be the same as long double if the
    latter is not even a 128-bit type.
    
    This also reorders the nearby __ibm128 code so both types use similar
    logic.
    
    
            Backport from trunk
            2018-06-26  Segher Boessenkool  <segher@kernel.crashing.org>
    
            PR target/86285
            * config/rs6000/rs6000.c (rs6000_init_builtins): Do not set
            ieee128_float_type_node to long_double_type_node unless
            TARGET_LONG_DOUBLE_128 is set.
    
    From-SVN: r262320

commit ff9b55e2593e2b06f90ae6ae4e1fd2a6cc81e1f5
Author: Paul Thomas <pault@gcc.gnu.org>
Date:   Mon Jul 2 19:28:11 2018 +0000

    re PR fortran/45305 (Array-valued calles to elementals are not simplified)
    
    2018-07-02  Paul Thomas  <pault@gcc.gnu.org>
    
            PR fortran/45305
            * expr.c : Add a prototype for scalarize_intrinsic_call.
            (gfc_simplify_expr): Use scalarize_intrinsic_call for elemental
            intrinsic function calls.
            (scalarize_intrinsic_call): Add 'init_flag' argument. Check if
            the expression or any of the actual argument expressions are
            NULL. Before calling gfc_check_init_expr, check 'init_flag'.
            Only simplify the scalarized expressions if there are no errors
            on the stack.
            (gfc_check_init_expr): Set 'init_flag' true in the call to
            scalarize_intrinsic_call.
    
    2018-07-02  Paul Thomas  <pault@gcc.gnu.org>
    
            PR fortran/45305
            * gfortran.dg/scalarize_parameter_array_2.f90: New test.
    
    From-SVN: r262316

commit 1c45a5537b826b354f9f373c8300199ebca3dee0
Author: Ian Lance Taylor <ian@gcc.gnu.org>
Date:   Mon Jul 2 16:28:58 2018 +0000

    re PR go/86331 (the gccgo's "go" tool looks like failing to invoke any sub go command)
    
            PR go/86331
        os: check return value as well as error from waitid
    
        https://gcc.gnu.org/PR86331 indicates that if a signal handler runs it
        is possible for syscall.Syscall6 to return a non-zero errno value even
        if no error occurs. That is a problem in general, but this fix will
        let us work around the general problem for the specific case of
        calling waitid.
    
        Reviewed-on: https://go-review.googlesource.com/121595
    
    From-SVN: r262314

commit f9119c626e1087b483a02ed34e609926acf93c4b
Author: Eric Botcazou <ebotcazou@gcc.gnu.org>
Date:   Mon Jul 2 10:16:17 2018 +0000

    i386.c (ix86_finalize_stack_frame_flags): Do not overrule -fno-omit-frame-pointer when not optimizing.
    
            * config/i386/i386.c (ix86_finalize_stack_frame_flags): Do not overrule
            -fno-omit-frame-pointer when not optimizing.
    
    From-SVN: r262303

commit eb9c5fcb358d463a02206af65204bac51a48e1bc
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Jul 2 00:16:20 2018 +0000

    Daily bump.
    
    From-SVN: r262293

commit 35c79331b47bddb3ab57397d5bd5cb3fa335acaf
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Jul 1 00:16:14 2018 +0000

    Daily bump.
    
    From-SVN: r262281

commit f5e0010c4913b002a5aebbab0803b0779c586cfd
Author: Alexandre Oliva <aoliva@redhat.com>
Date:   Sat Jun 30 04:16:16 2018 +0000

    [PR86064] split single cross-partition range with nonzero locviews
    
    We didn't split cross-partition ranges in loclists to output a
    whole-function location expression, but with nonzero locviews, we
    force loclists, and then we have to split to avoid cross-partition
    list entries.
    
    for  gcc/ChangeLog
    
            PR debug/86064
            * dwarf2out.c (loc_list_has_views): Adjust comments.
            (dw_loc_list): Split single cross-partition range with
            nonzero locview.
    
    for  gcc/testsuite/ChangeLog
    
            PR debug/86064
            * gcc.dg/pr86064.c: New.
    
    From-SVN: r262268

commit 6a6d2b0dc9da7f39162e0b0a489ff99ea8eda9a6
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Jun 30 00:16:31 2018 +0000

    Daily bump.
    
    From-SVN: r262265

commit d79da20e8846a640562c18c8105d3b5d5ed86762
Author: Kelvin Nilsen <kelvin@gcc.gnu.org>
Date:   Fri Jun 29 21:36:07 2018 +0000

    backport: rs6000-c.c (altivec_overloaded_builtins): Change behavior of vec_pack (vector double...
    
    gcc/ChangeLog:
    
    2018-06-29  Kelvin Nilsen  <kelvin@gcc.gnu.org>
    
            Backport from mainline
            2018-06-22  Kelvin Nilsen  <kelvin@gcc.gnu.org>
    
            * config/rs6000/rs6000-c.c (altivec_overloaded_builtins): Change
            behavior of vec_pack (vector double, vector double) to match
            behavior of vec_float2 (vector double, vector double).
    
    gcc/testsuite/ChangeLog:
    
    2018-06-29  Kelvin Nilsen  <kelvin@gcc.gnu.org>
    
            Backport from mainline
            2018-06-22  Kelvin Nilsen  <kelvin@gcc.gnu.org>
    
            * gcc.target/powerpc/builtins-3-p8.c (test_pack_float): Remove
            this test.
            * gcc.target/powerpc/builtins-9.c: New test.
            * gcc.target/powerpc/fold-vec-pack-double.c: Modify dg directives
            to expect different code generation on big-endian vs.
            little-endian targets.
    
    From-SVN: r262261

commit 36362f95f61f0aaa763fa5e96b93d5ceefa59f76
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Fri Jun 29 09:39:43 2018 +0200

    * config/rs6000/t-rs6000: Append rs6000-modes.h to TM_H.
    
    From-SVN: r262242

commit 0e2ecef85f728f8892dbc624ef78c23bb20027e1
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Jun 29 00:16:29 2018 +0000

    Daily bump.
    
    From-SVN: r262239

commit 0e160b225dc63e9c4e140e7c51eddd4cb15001ea
Author: Kelvin Nilsen <kelvin@gcc.gnu.org>
Date:   Thu Jun 28 22:23:51 2018 +0000

    backport: sourcebuild.texi (Endianness): New subsubsection.
    
    gcc/ChangeLog:
    
    2018-06-28  Kelvin Nilsen  <kelvin@gcc.gnu.org>
    
            Backport from mainline
            2017-05-23  Segher Boessenkool  <segher@kernel.crashing.org>
    
            * doc/sourcebuild.texi (Endianness): New subsubsection.
    
    gcc/testsuite/ChangeLog:
    
    2018-06-28  Kelvin Nilsen  <kelvin@gcc.gnu.org>
    
            Backport from mainline
            2017-05-23  Segher Boessenkool  <segher@kernel.crashing.org>
    
            * lib/target-supports.exp (check_effective_target_be): New.
            (check_effective_target_le): New.
    
    From-SVN: r262236

commit 945b9c9e279eea8145940405106031e31b84a4e2
Author: Fritz Reese <fritzoreese@gmail.com>
Date:   Thu Jun 28 16:47:19 2018 +0000

    re PR fortran/82865 (Option -fdec collides with PDT)
    
    2018-06-28  Fritz Reese  <fritzoreese@gmail.com>
    
        gcc/testsuite/ChangeLog:
    
            PR fortran/82865
            Backport from trunk.
            * gfortran.dg/dec_type_print_2.f03: New testcase.
    
        gcc/fortran/ChangeLog:
    
            PR fortran/82865
            Backport from trunk.
            * decl.c (gfc_match_type): Refactor and check for PDT declarations.
    
    From-SVN: r262223

commit e7147db035b41d97dcca3e522304010e8027d1ea
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Jun 28 00:16:24 2018 +0000

    Daily bump.
    
    From-SVN: r262202

commit d548fe369e84a9fa4209d2eb5b905b2429781a54
Author: Carl Love <cel@us.ibm.com>
Date:   Wed Jun 27 21:54:17 2018 +0000

    Add test case that was supposed to be added in commit 255556 on 2017-12-11.
    
    gcc/testsuite/ChangeLog:
    
    2018-06-27  Carl Love  <cel@us.ibm.com>
    
    Add test case that was supposed to be added in commit 255556 on 2017-12-11.
    
            * gcc.target/vsx-vector-abss.c: New file to test vec_abss.
    
    From-SVN: r262197

commit d900c9caba89020cd384eac8c5550b44c8804129
Author: Kelvin Nilsen <kelvin@gcc.gnu.org>
Date:   Wed Jun 27 13:46:50 2018 +0000

    backport: rs6000-c.c (altivec_overloaded_builtins): Change behavior of vec_packsu (vector unsigned long long...
    
    gcc/ChangeLog:
    
    2018-06-27  Kelvin Nilsen  <kelvin@gcc.gnu.org>
    
            Backport from mainline
            2018-06-20  Kelvin Nilsen  <kelvin@gcc.gnu.org>
    
            * config/rs6000/rs6000-c.c (altivec_overloaded_builtins): Change
            behavior of vec_packsu (vector unsigned long long, vector unsigned
            long long) to match behavior of vec_packs with same signature.
    
    gcc/testsuite/ChangeLog:
    
    2018-06-27  Kelvin Nilsen  <kelvin@gcc.gnu.org>
    
            * gcc.target/powerpc/builtins-1-be.c: Adjust dg directives to scan
            for vpkudus in place of vpksdus.
            * gcc.target/powerpc/builtins-1-le.c: Likewise.
    
            Backport from mainline
            2018-06-20  Kelvin Nilsen  <kelvin@gcc.gnu.org>
    
            * gcc.target/powerpc/builtins-3-p8.c: Adjust dg directives to scan
            for vpkudus in place of vpksdus.
    
    From-SVN: r262184

commit 77663d33e75980aa61fa98a352106b024dc2d847
Author: Jason Merrill <jason@redhat.com>
Date:   Tue Jun 26 23:06:43 2018 -0400

    PR c++/86320 - memory-hog with std::array of pair
    
            * typeck2.c (process_init_constructor_array): If zero-initialization
            is fine for one element, we're done.
    
    From-SVN: r262175

commit 504c345c01bd0d7d99348517eb23f0e9e569278b
Author: Jason Merrill <jason@redhat.com>
Date:   Tue Jun 26 23:05:17 2018 -0400

    PR c++/80290 - memory-hog with std::pair.
    
            * pt.c (type_unification_real): Skip non-dependent conversion
            check for a nested list argument.
            (braced_init_depth): New.
    
    From-SVN: r262174

commit 11725328de839e15083729ab923802b99f9c330a
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Jun 27 00:16:49 2018 +0000

    Daily bump.
    
    From-SVN: r262170

commit 62be6ef4eb060e98b7636e9c8fd2997cdcdb021e
Author: Aaron Sawdey <acsawdey@linux.ibm.com>
Date:   Tue Jun 26 16:50:42 2018 +0000

    backport: rs6000-string.c (expand_block_clear): Don't use unaligned vsx for 16B memset.
    
    2018-06-26  Aaron Sawdey  <acsawdey@linux.ibm.com>
    
            Backport from trunk
            2018-06-26  Aaron Sawdey  <acsawdey@linux.ibm.com>
    
            * config/rs6000/rs6000-string.c (expand_block_clear): Don't use
            unaligned vsx for 16B memset.
    
    From-SVN: r262159

commit 0a0eec21f3eb7d01589d69b104d7e897e7792d55
Author: Aaron Sawdey <acsawdey@linux.ibm.com>
Date:   Tue Jun 26 16:43:38 2018 +0000

    backport: re PR target/86222 (ICE in final_scan_insn_1 calling strncmp() with a bound of PTRDIFF_MAX + 1)
    
    2018-06-26  Aaron Sawdey  <acsawdey@linux.ibm.com>
    
            Backport from trunk
            2018-06-22  Aaron Sawdey  <acsawdey@linux.ibm.com>
    
            PR target/86222
            * config/rs6000/rs6000-string.c (expand_strn_compare): Handle -m32
            correctly.
    
    From-SVN: r262157

commit 05bdcfd4b9c1b27f788c81eb2aad91480ed8655e
Author: Segher Boessenkool <segher@kernel.crashing.org>
Date:   Tue Jun 26 17:39:02 2018 +0200

    regrename: Don't rename the dest of a REG_CFA_REGISTER (PR85645)
    
    We should never change the destination of a REG_CFA_REGISTER, just
    like for insns with a REG_CFA_RESTORE, because we need to have the
    same control flow information on all branches that join.  It is very
    doubtful that renaming the scratch registers used for prologue/epilogue
    will help anything either.
    
    
            Backport from trunk
            2018-05-08  Segher Boessenkool  <segher@kernel.crashing.org>
    
            PR rtl-optimization/85645
            * regrename.c (build_def_use): Also kill the chains that include the
            destination of a REG_CFA_REGISTER note.
    
    From-SVN: r262155

commit f6b831edd3a53303aa6c921dc60707bb0578699e
Author: Segher Boessenkool <segher@kernel.crashing.org>
Date:   Tue Jun 26 17:36:21 2018 +0200

    regcprop: Avoid REG_CFA_REGISTER notes (PR85645)
    
    Changing a SET that has a REG_CFA_REGISTER note is wrong if we are
    changing the SET_DEST, or if the REG_CFA_REGISTER has nil as its
    argument, and maybe some other cases.  It's never really useful to
    propagate into such an instruction, so let's just bail whenever we
    see such a note.
    
    
            Backport from trunk
            2018-05-08  Segher Boessenkool  <segher@kernel.crashing.org>
    
            PR rtl-optimization/85645
            *  regcprop.c (copyprop_hardreg_forward_1): Don't propagate into an
            insn that has a REG_CFA_REGISTER note.
    
    From-SVN: r262154

commit 85efaf09384dcb5e358d9951a281d445220f9de8
Author: Robin Dapp <rdapp@linux.ibm.com>
Date:   Tue Jun 26 12:59:59 2018 +0000

    S/390: Fix mtune default.
    
    When building with --with-tune=zEC12 and calling the resulting gcc
    with --march=z13 (no extra -mtune), the binary would unexpectedly be compiled
    with -march=z13 -mtune=zEC12.  This patch avoids using the default tune
    parameter if -march is specified as argument but the user can still
    explicitly state -march=z13 -mtune=zEC12.
    
    gcc/ChangeLog:
    
    2018-06-26  Robin Dapp  <rdapp@linux.ibm.com>
    
            * config/s390/s390.h (enum processor_flags): Do not use
            default tune parameter when -march was specified.
    
    From-SVN: r262147

commit ea3604a6bb2a8da8343309743ca5efeaf2403d6a
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Jun 26 13:46:10 2018 +0200

    re PR target/86314 (GCC 7.x and 8.x zero out "eax" before using "rax" in "lock bts")
    
            PR target/86314
            * config/i386/i386.md (setcc + movzbl to xor + setcc peephole2s):
            Check reg_overlap_mentioned_p in addition to reg_set_p with the same
            operands.
    
            * gcc.dg/pr86314.c: New test.
    
    From-SVN: r262142

commit 8b44e08619d16fcf824d943e1a855235f95c9359
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue Jun 26 12:44:52 2018 +0200

    re PR c++/86291 (OpenMP incorrect for-loop collapsing with iterators and at least 5 nested loops)
    
            PR c++/86291
            * parser.c (cp_parser_omp_for_loop_init): Change for_block argument
            type from vec<tree, va_gc> * to vec<tree, va_gc> *&.
    
            * testsuite/libgomp.c++/pr86291.C: New test.
    
    From-SVN: r262138

commit 5cfb3e2a79bd63611ab26abcbc36cb5403352f33
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Jun 26 00:16:41 2018 +0000

    Daily bump.
    
    From-SVN: r262126

commit 19387beee800f99cf49e7e05400126dbf84b1d4a
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Mon Jun 25 22:06:56 2018 +0100

    PR libstdc++/86112 fix printers for Python 2.6
    
    Dict comprehensions are only supported since Python 2.7, so use an
    alternative syntax that is backwards compatible.
    
            PR libstdc++/86112
            * python/libstdcxx/v6/printers.py (add_one_template_type_printer):
            Replace dict comprehension.
    
    From-SVN: r262116

commit 863197e12fe385d91ec6dff5fa9cc04f9d3fcb57
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Mon Jun 25 21:37:05 2018 +0100

    Update powerpc64-linux-gnu/baseline_symbols.txt
    
            PR libstdc++/81092
            * config/abi/post/powerpc64-linux-gnu/baseline_symbols.txt: Update.
    
    From-SVN: r262113

commit 28deef64a8167132a7c6ae5a77a82cdcedf1632f
Author: Michael Meissner <meissner@linux.ibm.com>
Date:   Mon Jun 25 19:34:01 2018 +0000

    backport: config.gcc (powerpc64le*): Revert January 16th...
    
    2018-06-25  Michael Meissner  <meissner@linux.ibm.com>
    
            Back port from trunk
            2018-06-25  Michael Meissner  <meissner@linux.ibm.com>
    
            * config.gcc (powerpc64le*): Revert January 16th, 2018 patch that
            added IEEE/IBM long double multilib support on PowerPC little
            endian Linux systems.
            * config/rs6000/linux64.h (MULTILIB_DEFAULTS_IEEE): Likewise.
            (MULTILIB_DEFAULTS): Likewise.
            * config/rs6000/rs6000.c (rs6000_option_override_internal):
            Likewise.
            * config/rs6000/rs6000.h (TARGET_IEEEQUAD_MULTILIB): Likewise.
            * config/rs6000/t-ldouble-linux64le-ibm: Delete, no longer used.
            * config/rs6000/t-ldouble-linux64le-ieee: Delete, no longer used.
    
    From-SVN: r262108

commit 40a4fc216ee3564cca7d05117a5b2e3545c6a232
Author: Fritz Reese <fritzoreese@gmail.com>
Date:   Mon Jun 25 19:23:49 2018 +0000

    re PR fortran/82972 (ICE with -finit-derived in gfc_conv_structure, at fortran/trans-expr.c:7733 (and others))
    
    2018-06-25  Fritz Reese  <fritzoreese@gmail.com>
    
            PR fortran/82972
            PR fortran/83088
            PR fortran/85851
            Backport from trunk.
            * expr.c (component_initializer): Assign init expr to c->initializer.
            (generate_isocbinding_initializer): New.
            (gfc_generate_initializer): Call generate_isocbinding_initializer to
            generate initializers for c_ptr and c_funptr with -finit-derived.
    
    2018-06-25  Fritz Reese  <fritzoreese@gmail.com>
    
            PR fortran/82972
            PR fortran/83088
            PR fortran/85851
            Backport from trunk.
            * gfortran.dg/init_flag_17.f90: New testcase.
    
    From-SVN: r262107

commit 5f852c2b99bb3c9a723c5d445c6aad7aaf0cb650
Author: Jan Hubicka <jh@suse.cz>
Date:   Mon Jun 25 19:20:09 2018 +0200

    [multiple changes]
    
    
            2018-04-20  Jan Hubicka  <jh@suse.cz>
            * lto-partition.c (lto_balanced_map): Fix sanity check.
    
            2018-04-19  Jan Hubicka  <jh@suse.cz>
            * lto-partition.c: Include sreal.h
            (add_symbol_to_partition_1): Use size instead of self_size
            for size estimate.
            (account_reference_p): New.
            (lto_balanced_map): Use 64bit arithmetics for size calculatoins; cleanup;
            fix accounting errors in boundary size; add debug output; combine cost
            as cost/size instead of cost/internal; reduce the partitioning error to
            +- 1/8 of the parttion size.
    
    From-SVN: r262060

commit 6c7c60a9868ae200695079626c9def362f1ccbbf
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Mon Jun 25 14:58:03 2018 +0200

    re PR target/84786 ([miscompilation] vunpcklpd accessing xmm16-22 targeting KNL)
    
    2018-06-25  Jakub Jelinek  <jakub@redhat.com>
    
            PR target/84786
            * gcc.target/i386/avx512f-pr84786-3.c: New test.
    
    From-SVN: r262016

commit 7a3260004bb0cd7992fc1cf30255ee935c58497c
Author: Segher Boessenkool <segher@kernel.crashing.org>
Date:   Mon Jun 25 13:40:14 2018 +0200

    rs6000: Fix absif2
    
    Without this patch absif2 always FAILs.  There is no testcase for
    that, nor do we see it during bootstrap, but it is obvious.
    
    
            * config/rs6000/rs6000.md (abs<mode>2): Handle IFmode.
    
    From-SVN: r262012

commit 641419e282b3b3933b0708210856fe3d5441365d
Author: Jan Hubicka <jh@suse.cz>
Date:   Mon Jun 25 13:33:44 2018 +0200

    backport: lto-wrapper.c (ltrans_priorities): New static var.
    
    
            Backport from mainline
            2018-04-30  Jan Hubicka  <jh@suse.cz>
    
            * lto-wrapper.c (ltrans_priorities): New static var.
            (cmp_priority): New.
            (run_gcc): Read priorities and if doing parallel build order
            the Makefile by them.
            * lto.c (cmp_partitions_size): Remove.
            (lto_wpa_write_files): Also output priorities; do not sort partitions.
            (cmp_partition_order): Move to ...
            * lto-partition.c (cmp_partition_order): ...
            (lto_1_to_1_map): Sort partitions.
    
    From-SVN: r262011

commit 06054beebbcf3e549e4e4006fdc24f52aa526f96
Author: Segher Boessenkool <segher@kernel.crashing.org>
Date:   Mon Jun 25 13:31:45 2018 +0200

    rs6000: Fix vector homogeneous aggregates (PR86197)
    
    The existing code allows only 4 vectors worth of ieee128 homogeneous
    aggregates, but it should be 8.  This happens because at one spot it
    is mistakenly qualified as being passed in floating point registers.
    
    
            Backport from trunk
            2018-06-19  Segher Boessenkool  <segher@kernel.crashing.org>
    
            PR target/86197
            * config/rs6000/rs6000.md (rs6000_discover_homogeneous_aggregate): An
            ieee128 argument takes up only one (vector) register, not two (floating
            point) registers.
    
    From-SVN: r262010

commit 0ea08d3819a772913f9251541751dde5ed3b78a2
Author: Paul Thomas <pault@gcc.gnu.org>
Date:   Mon Jun 25 07:49:27 2018 +0000

    re PR fortran/83118 (Bad intrinsic assignment of class(*) array component of derived type)
    
    2018-06-25  Paul Thomas  <pault@gcc.gnu.org>
    
            PR fortran/83118
            Back port from trunk
            * resolve.c (resolve_ordinary_assign): Force the creation of a
            vtable for assignment of non-polymorphic expressions to an
            unlimited polymorphic object.
            * trans-array.c (gfc_alloc_allocatable_for_assignment): Use the
            size of the rhs type for such assignments. Set the dtype, _len
            and vptrs appropriately.
            * trans-expr.c (gfc_trans_assignment): Force the use of the
            _copy function for these assignments.
    
    2018-06-25  Paul Thomas  <pault@gcc.gnu.org>
    
            PR fortran/83118
            Back port from trunk
            * gfortran.dg/unlimited_polymorphic_30.f03: New test.
    
    From-SVN: r262004

commit 7c35568400166f130aae3b4a2a5a87cd3bd1dbe4
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Jun 25 00:17:00 2018 +0000

    Daily bump.
    
    From-SVN: r262001

commit 9fb5eb706ea461fb0ea2335d82fc5850e99af4c4
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Jun 24 00:16:29 2018 +0000

    Daily bump.
    
    From-SVN: r261991

commit f9796c831f54156b1efafbffc0347065876cb55f
Author: Richard Sandiford <richard.sandiford@linaro.org>
Date:   Sat Jun 23 08:07:31 2018 +0000

    Fix phi backedge detection in backprop (PR85989)
    
    Backport trunk r261064.
    
    2018-06-23  Richard Sandiford  <richard.sandiford@linaro.org>
    
    gcc/
            PR tree-optimization/85989
            * gimple-ssa-backprop.c (backprop::m_visited_phis): New member
            variable.
            (backprop::intersect_uses): Check it when deciding whether this
            is a backedge reference.
            (backprop::process_block): Add each phi to m_visited_phis
            after visiting it, then clear it at the end.
    
    gcc/testsuite/
            PR tree-optimization/85989
            * gcc.dg/torture/pr85989.c: New test.
    
    From-SVN: r261983

commit 33a2bb6dd390039d6d8dbd6514a9e015be5a481f
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Jun 23 00:16:51 2018 +0000

    Daily bump.
    
    From-SVN: r261978

commit bf3f882daf4bf54a537695c13c15783d1decc089
Author: Jason Merrill <jason@redhat.com>
Date:   Fri Jun 22 17:57:32 2018 -0400

    PR c++/86219 - ICE with erroneous initializer in template.
    
            * constexpr.c (fold_non_dependent_expr): Add complain parm.
            * typeck2.c (store_init_value): Pass tf_warning_or_error.
    
    From-SVN: r261973

commit 10e9ee4f1b149c5fc85f349ee0d3d5ee3ddf86db
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Fri Jun 22 19:26:44 2018 +0200

    re PR c++/85662 ("error: non-constant condition for static assertion" from __builtin_offsetof in C++)
    
            PR c++/85662
            * g++.dg/ext/offsetof3.C: New test.
    
    From-SVN: r261910

commit c315fb8d1c8c11c3a120c18795ec751ecdac215e
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Fri Jun 22 15:56:18 2018 +0100

    PR libstdc++/86138 prevent implicit instantiation of COW empty rep
    
    The explicit instantiation declarations for std::basic_string are
    disabled for C++17 (and later) so that basic_string symbols get
    implicitly instantiated in every translation unit that needs them.  On
    targets that don't support STB_GNU_UNIQUE this leads to multiple copies
    of the empty rep symbol for COW strings. In order to detect whether a
    COW string needs to deallocate its storage it compares the address with
    the empty rep.  When there are multiple copies of the empty rep object
    the address is not unique, and so string destructors try to delete the
    empty rep, which crashes.
    
    In order to guarantee uniqueness of the _S_empty_rep_storage symbol this
    patch adds an explicit instantiation declaration for just that symbol.
    This means the other symbols are still implicitly instantiated in C++17
    code, but for the empty rep the definition in the library gets used.
    
    Separately, there is no need for C++17 code to implicitly instantiate
    the I/O functions for strings, so this also restores the explicit
    instantiation declarations for those functions.
    
    Backport from mainline
    2018-06-22  Jonathan Wakely  <jwakely@redhat.com>
    
            PR libstdc++/86138
            * include/bits/basic_string.tcc:
            [__cplusplus > 201402 && !_GLIBCXX_USE_CXX11_ABI]
            (basic_string<char>::_Rep::_S_empty_rep_storage)
            (basic_string<wchar_t>::_Rep::_S_empty_rep_storage): Add explicit
            instantiation declarations.
            [__cplusplus > 201402] (operator>>, operator<<, getline): Re-enable
            explicit instantiation declarations.
            * testsuite/21_strings/basic_string/cons/char/86138.cc: New.
            * testsuite/21_strings/basic_string/cons/wchar_t/86138.cc: New.
    
    From-SVN: r261902

commit 286850b6ec0d6f9f66c191f2ec7917aa55c9b79d
Author: David Edelsohn <dje.gcc@gmail.com>
Date:   Fri Jun 22 14:52:11 2018 +0000

    collect2.c (static_obj): New variable.
    
    2018-06-19  Tony Reix  <tony.reix@atos.com>
                Damien Bergamini  <damien.bergamini@atos.com>
                David Edelsohn  <dje.gcc@gmail.com>
    
            * collect2.c (static_obj): New variable.
            (static_libs): New variable.
            (is_in_list): Uncomment declaration.
            (main): Track AIX libraries linked statically.
            (is_in_list): Uncomment definition.
            (scan_prog_file): Don't add AIX shared libraries initializer
            to constructor list if linking statically.
    
    From-SVN: r261901

commit 21c6130a1b633ee5ef0ef183007e842038c4c7ee
Author: Michael Meissner <meissner@linux.ibm.com>
Date:   Fri Jun 22 14:35:47 2018 +0000

    backport: rs6000.md (extendtfif2): Add missing 128-bit conversion insn that shows up when...
    
    [gcc]
    2018-06-22  Michael Meissner  <meissner@linux.ibm.com>
    
            Back port from trunk
            2018-06-21  Michael Meissner  <meissner@linux.ibm.com>
    
            * config/rs6000/rs6000.md (extendtfif2): Add missing 128-bit
            conversion insn that shows up when pr85657-3.c is compiled using
            IEEE 128-bit long double.
    
            Back port from trunk
            2018-06-21  Michael Meissner  <meissner@linux.ibm.com>
    
            * config/rs6000/rs6000.c (init_float128_ieee): Prevent complex
            multiply and divide external functions from being created more
            than once.
    
            Back port from trunk
            2018-06-21  Michael Meissner  <meissner@linux.ibm.com>
    
            * config/rs6000/rs6000.md (neg<mode>2_internal): Use the correct
            mode to check whether the mode is IBM extended.
    
    [gcc/testsuite]
    2018-06-22  Michael Meissner  <meissner@linux.ibm.com>
    
            Back port from trunk
            2018-06-21  Michael Meissner  <meissner@linux.ibm.com>
    
            * gcc.target/powerpc/pack02.c: Use __ibm128 instead of long double
            if the long double format is IEEE 128-bit for tests that are
            explicitly testing IBM extended double support.  Use the
            appropriate pack and unpack built-in functions.  Change calls from
            __builtin_isinfl to __builtin_isinf since the later supports all
            floating point types.
            * gcc.target/powerpc/pr57150.c: Likewise.
            * gcc.target/powerpc/pr60203.c: Likewise.
            * gcc.target/powerpc/pr67808.c: Likewise.
            * gcc.target/powerpc/pr70117.c: Likewise.
            * gcc.target/powerpc/tfmode_off.c: Likewise.
    
    From-SVN: r261899

commit 8e78ec7bfc841c36f59593f1a42272742c415439
Author: Ian Lance Taylor <ian@gcc.gnu.org>
Date:   Fri Jun 22 14:25:34 2018 +0000

    syscall: remove Ustat
    
        glibc 2.28 removes ustat.h and the ustat function entirely, which
        breaks syscall.Ustat.
    
        Updates golang/go#25990
    
        Reviewed-on: https://go-review.googlesource.com/120535
    
    From-SVN: r261895

commit daed4d8fb545612ea2ca9c1e43438424d0a38c70
Author: Michael Meissner <meissner@linux.ibm.com>
Date:   Fri Jun 22 14:19:45 2018 +0000

    backport: re PR target/85358 (PowerPC: Using -mabi=ieeelongdouble -mcpu=power9 breaks __ibm128)
    
    [gcc]
    2018-06-22  Michael Meissner  <meissner@linux.ibm.com>
    
            Back port from trunk
            2018-06-18  Michael Meissner  <meissner@linux.ibm.com>
    
            PR target/85358
            * config/rs6000/rs6000-modes.def (toplevel): Rework the 128-bit
            floating point modes, so that IFmode is numerically greater than
            TFmode, which is greater than KFmode using FRACTIONAL_FLOAT_MODE
            to declare the ordering.  This prevents IFmode from being
            converted to TFmode when long double is IEEE 128-bit on an ISA 3.0
            machine.  Include rs6000-modes.h to share the fractional values
            between genmodes* and the rest of the compiler.
            (IFmode): Likewise.
            (KFmode): Likewise.
            (TFmode): Likewise.
            * config/rs6000/rs6000-modes.h: New file.
            * config/rs6000/rs6000.c (rs6000_debug_reg_global): Change the
            meaning of rs6000_long_double_size so that 126..128 selects an
            appropriate 128-bit floating point type.
            (rs6000_option_override_internal): Likewise.
            * config/rs6000/rs6000.h (toplevel): Include rs6000-modes.h.
            (TARGET_LONG_DOUBLE_128): Change the meaning of
            rs6000_long_double_size so that 126..128 selects an appropriate
            128-bit floating point type.
            (LONG_DOUBLE_TYPE_SIZE): Update comment.
            * config/rs6000/rs6000.md (trunciftf2): Correct the modes of the
            source and destination to match the standard usage.
            (truncifkf2): Likewise.
            (copysign<mode>3, IEEE iterator): Rework copysign of float128 on
            ISA 2.07 to use an explicit clobber, instead of passing in a
            temporary.
            (copysign<mode>3_soft): Likewise.
    
    [libgcc]
    2018-06-22  Michael Meissner  <meissner@linux.ibm.com>
    
            Back port from trunk
            2018-06-18  Michael Meissner  <meissner@linux.ibm.com>
    
            * config/rs6000/t-float128 (FP128_CFLAGS_SW): Compile float128
            support modules with -mno-gnu-attribute.
            * config/rs6000/t-float128-hw (FP128_CFLAGS_HW): Likewise.
    
    From-SVN: r261893

commit d8f96ab114a977d97b8fee0e0b2c48573f3a2a94
Author: Michael Meissner <meissner@linux.ibm.com>
Date:   Fri Jun 22 14:11:56 2018 +0000

    backport: re PR target/85657 (Make __ibm128 a separate type, even if long double uses the IBM double-double format)
    
    [gcc]
    2018-06-22  Michael Meissner  <meissner@linux.ibm.com>
    
            Back port from trunk
            2018-06-08  David Edelsohn  <dje.gcc@gmail.com>
    
            * config/rs6000/rs6000.c (rs6000_passes_ieee128): Protect with #if
            TARGET_ELF.
    
            Back port from trunk
            2018-06-04  Michael Meissner  <meissner@linux.ibm.com>
    
            * config/rs6000/rs6000.c (rs6000_passes_ieee128): New boolean to
            track if we pass or return IEEE 128-bit floating point.
            (ieee128_mangling_gcc_8_1): New boolean to say whether to generate
            C++ mangling that is compatible with GCC 8.1.
            (TARGET_ASM_GLOBALIZE_DECL_NAME): Override target hook.
            (init_cumulative_args): Note if we pass or return IEEE 128-bit
            floating point types.
            (rs6000_function_arg_advance_1): Likewise.
            (rs6000_mangle_type): Optionally generate mangled names that match
            what GCC 8.1 generated for IEEE 128-bit floating point types.
            (rs6000_globalize_decl_name): If we have an external function that
            passes or returns IEEE 128-bit types, generate a weak reference
            from the mangled name used in GCC 8.1 to the current mangled
            name.
            (rs6000_init_builtins): Make __ibm128 use the long double type if
            long double is IBM extended double.  Make __float128 use the long
            double type if long double is IEEE 128-bit.
    
            PR target/85657
            * config/rs6000/rs6000-builtin.def (BU_IBM128_2): New helper
            macro for __ibm128 built-in functions.
            (PACK_IF): Add __ibm128 pack/unpack functions.
            (UNPACK_IF): Likewise.
            * config/rs6000/rs6000.c (rs6000_builtin_mask_calculate): Do not
            enable long double built-in functions if long double is IEEE
            128-bit floating point.
            (rs6000_invalid_builtin): Update long double built-in function
            error message.
            (rs6000_expand_builtin): For PACK_IF and UNPACK_IF built-in
            functions, adjust the built-in function to use the long double
            built-in function if __ibm128 and long double are the same type.
            * doc/extend.texi (PowerPC builtins): Update documention for
            __builtin_{,un}pack_longdouble.  Add documentation for
            __builtin_{,un}pack_ibm128.
    
            Back port from trunk
            2018-06-01  Segher Boessenkool  <segher@kernel.crashing.org>
    
            * config/rs6000/rs6000.c (rs6000_mangle_type): Change the mangling of
            the 128-bit floating point types.  Fix function comment.
    
    [gcc/testsuite]
    2018-06-18  Michael Meissner  <meissner@linux.ibm.com>
    
            Back port from trunk
            2018-06-06  Michael Meissner  <meissner@linux.ibm.com>
    
            PR target/85657
            * g++.dg/pr85657.C: Only test whether __ibm128 and long double can
            be used in templates.  Don't check for them in overloaded functions.
    
    From-SVN: r261891

commit f4cf70b93d31760e9edaeda011a5cab09757f073
Author: Michael Meissner <meissner@linux.ibm.com>
Date:   Fri Jun 22 14:07:11 2018 +0000

    backport: re PR target/85657 (Make __ibm128 a separate type, even if long double uses the IBM double-double format)
    
    [gcc]
    2018-06-22  Michael Meissner  <meissner@linux.ibm.com>
    
            Back port from trunk
            2018-05-21  Michael Meissner  <meissner@linux.ibm.com>
    
            PR target/85657
            * config/rs6000/rs6000-c.c (rs6000_cpu_cpp_builtins): Do not
            define __ibm128 as long double.
            * config/rs6000/rs6000.c (rs6000_init_builtins): Create __ibm128
            as a distinct type with IEEE 128-bit floating point is supported.
            (init_float128_ieee): Fix up conversions between IFmode and IEEE
            128-bit types to use the correct functions.
            (rs6000_expand_float128_convert): Use explicit FLOAT_EXTEND to
            convert between 128-bit floating point types that have different
            modes but the same representation, instead of using gen_lowpart to
            makean alias.
            * config/rs6000/rs6000.md (IFKF): New iterator for IFmode and
            KFmode.
            (IFKF_reg): New attributes to give the register constraints for
            IFmode and KFmode.
            (extend<mode>tf2_internal): New insns to mark an explicit
            conversion between 128-bit floating point types that have a
            different mode but share the same representation.
    
    [gcc/testsuite]
    2018-06-22  Michael Meissner  <meissner@linux.ibm.com>
    
            Back port from trunk
            2018-05-21  Michael Meissner  <meissner@linux.ibm.com>
    
            PR target/85657
            * gcc.target/powerpc/pr85657-1.c: New test for converting between
            __float128, __ibm128, and long double.
            * gcc.target/powerpc/pr85657-2.c: Likewise.
            * gcc.target/powerpc/pr85657-3.c: Likewise.
            * g++.dg/pr85667.C: New test to make sure __ibm128 is
            implementated as a separate type internally, and is not just an
            alias for long double.
    
    From-SVN: r261890

commit 95112b979a9db841ed7a2783f4aee4859f383150
Author: Rainer Orth <ro@CeBiTec.Uni-Bielefeld.DE>
Date:   Fri Jun 22 06:22:14 2018 +0000

    Don't preprocess .S files with -P on Solaris/x86 (PR target/85994)
    
            PR target/85994
            * config/i386/sol2.h (CPP_SPEC): Don't pass -P for
            -x assembler-with-cpp.
    
    From-SVN: r261881

commit eb6d7152c8e27e87449ee956746c1e8b81894053
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Jun 22 00:16:39 2018 +0000

    Daily bump.
    
    From-SVN: r261876

commit 961e00296f98ddbccb3015b74592855279355c40
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Thu Jun 21 21:40:06 2018 +0100

    * config/abi/post/x86_64-linux-gnu/baseline_symbols.txt: Update.
    
    From-SVN: r261863

commit fbe4956634e7b25d9ab4555873745c171ad38131
Author: Jason Merrill <jason@redhat.com>
Date:   Thu Jun 21 10:23:19 2018 -0400

    PR c++/86182 - ICE with anonymous union passed to template.
    
            * pt.c (tsubst_expr) [DECL_EXPR]: Handle an anonymous union type
            used to declare a named variable.
    
    From-SVN: r261850

commit fc29055d8a8db6632e52bb2e1e93e8b1d1ab2395
Author: Sebastian Huber <sebastian.huber@embedded-brains.de>
Date:   Thu Jun 21 09:34:32 2018 +0000

    RISC-V: Add custom RTEMS multilibs
    
    Add multilib variants for -march=rv64imafd, e.g. to support the BOOMv2 core.
    
    Add -mcmodel=medany as a variant of the 64-bit multilibs for RTEMS.  The
    rationale for this change is that several existing RISC-V chips map the
    RAM at 0x80000000.  In RTEMS, we do not use virtual memory, so
    applications will run at this location which is outside the +-2GiB range
    in a 64-bit configuration.
    
    gcc/
            * config.gcc (riscv*-*-elf* | riscv*-*-rtems*): Use custom
            multilibs for *-*-rtems*.
            * config/riscv/t-rtems: New file.
    
    From-SVN: r261837

commit ab313fb5dae09e0c90d08c54d1c113ba9dc5bf5c
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Jun 21 00:16:42 2018 +0000

    Daily bump.
    
    From-SVN: r261829

commit 924f317848192afc0fd32dac0129f34abe3ebdb2
Author: Than McIntosh <thanm@google.com>
Date:   Wed Jun 20 21:57:44 2018 +0000

    re PR libgcc/86213 (-fsplit-stack runtime may clobber SSE input param reg)
    
    libgcc/:
            PR libgcc/86213
            * generic-morestack.c (allocate_segment): Move calls to getenv and
            getpagesize to __morestack_load_mmap.
            (__morestack_load_mmap) Initialize static_pagesize and
            use_guard_page here so as to avoid clobbering SSE regs during a
            __morestack call.
    gcc/testsuite/:
            * gcc.dg/split-8.c: New.
    
    From-SVN: r261826

commit a2ec65cb09068a3320e6e888c4d6bc29b812b815
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Wed Jun 20 22:41:12 2018 +0200

    backport: re PR rtl-optimization/86108 (crash during unwinding with -O2)
    
            Backported from mainline
            2018-06-16  Jakub Jelinek  <jakub@redhat.com>
    
            PR rtl-optimization/86108
            * bb-reorder.c (create_forwarder_block): Renamed to ...
            (create_eh_forwarder_block): ... this.  Split OLD_BB after labels and
            jump from new landing pad to the second part.
            (sjlj_fix_up_crossing_landing_pad, dw2_fix_up_crossing_landing_pad):
            Adjust callers.
    
    From-SVN: r261821

commit 45a63d2c6cc827e2bddb0cadada700f3dfdc5249
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Wed Jun 20 22:40:33 2018 +0200

    backport: re PR c/86093 (volatile ignored on pointer in C)
    
            Backported from mainline
            2018-06-15  Jakub Jelinek  <jakub@redhat.com>
    
            PR c/86093
            * c-typeck.c (pointer_diff): Cast both pointers to unqualified types
            before doing POINTER_DIFF_EXPR.
    
            * c-c++-common/pr86093.c: New test.
    
    From-SVN: r261820

commit 571d91c02217c52e64b9a24d6bac7d7617677a5a
Author: Nathan Sidwell <nathan@acm.org>
Date:   Wed Jun 20 16:54:44 2018 +0000

    [PR c++/85634] Fix tsubst ICE
    
    https://gcc.gnu.org/ml/gcc-patches/2018-06/msg01269.html
            PR c++/85634 - tsubst ICE on unmarked lookup
            * parser.c (cp_parser_primary_expression): Keep lookup in template.
    
            PR c++/85634 - tsubst ICE on unmarked lookup
            * g++.dg/lookup/pr85634.C: New.
    
    From-SVN: r261814

commit cef49859d5e4b7d420583eb82e29e6aac60e860d
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Wed Jun 20 18:08:14 2018 +0200

    re PR c++/86210 (Missing -Wnonnull warning for function defined in the same TU)
    
            PR c++/86210
            * c-common.c (check_nonnull_arg): Use fold_for_warn.  Adjust obsolete
            comment.
    
            * g++.dg/warn/Wnonnull4.C: New test.
    
    From-SVN: r261812

commit 6ebc51019248905bd7cdc05470fa5ad79eb55789
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Wed Jun 20 16:57:55 2018 +0200

    re PR debug/86194 (ICE: SIGSEGV in avoid_constant_pool_reference (simplify-rtx.c:215) with -O -g -mavx512bw)
    
            PR debug/86194
            * var-tracking.c (use_narrower_mode_test): Check if shift amount can
            be narrowed.
    
            * gcc.target/i386/pr86194.c: New test.
    
    From-SVN: r261808

commit d78481586ad3e7fc292e22e4363d932eeaad7568
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Wed Jun 20 16:50:09 2018 +0200

    re PR tree-optimization/86231 (vrp_meet causes wrong-code)
    
            PR tree-optimization/86231
            * tree-vrp.c (union_ranges): For (  [  )  ] or (   )[   ] range and
            anti-range don't overwrite *vr0min before using it to compute *vr0max.
    
            * gcc.dg/tree-ssa/vrp119.c: New test.
            * gcc.c-torture/execute/pr86231.c: New test.
    
    From-SVN: r261806

commit 9beb9c8b7400412274b0df50d81533d3aa6bfd7a
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Jun 20 00:16:53 2018 +0000

    Daily bump.
    
    From-SVN: r261778

commit 1dd02d966df35855114a5289dc5e8242debcc30c
Author: Max Filippov <jcmvbkbc@gmail.com>
Date:   Tue Jun 19 20:57:46 2018 +0000

    xtensa: fix PR target/65416
    
    The issue is caused by reordering of stack pointer update after stack
    space allocation with instructions that write to the allocated stack
    space. In windowed ABI register spill area for the previous call frame
    is located just below the stack pointer and may be reloaded back into
    the register file on movsp.
    Implement allocate_stack pattern for windowed ABI configuration and
    insert an instruction that prevents reordering of frame memory access
    and stack pointer update.
    
    gcc/
    2018-06-19  Max Filippov  <jcmvbkbc@gmail.com>
    
            Backport from mainline
    
            2018-06-19  Max Filippov  <jcmvbkbc@gmail.com>
    
            * config/xtensa/xtensa.md (UNSPEC_FRAME_BLOCKAGE): New unspec
            constant.
            (allocate_stack, frame_blockage, *frame_blockage): New patterns.
    
    From-SVN: r261763

commit f4ebe170b2329e1e88da92eb0bf98e3cd05ff5d9
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Tue Jun 19 18:19:54 2018 +0100

    Remove unused <exception> header from <utility>
    
    This header was needed for the declaration of std::terminate but the
    calls to it were removed in r242401.
    
            * include/std/utility: Remove unused <exception> header.
    
    From-SVN: r261750

commit 2dc2bbe394fdc074936695fd42ef0dfa37efe273
Author: Joseph Myers <joseph@codesourcery.com>
Date:   Tue Jun 19 16:05:14 2018 +0100

    * es.po: Update.
    
    From-SVN: r261746

commit 408b4deb823763c3987d6badac2765f0f1d412db
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Tue Jun 19 14:16:44 2018 +0100

    PR libstdc++/82644 define TR1 hypergeometric functions in strict modes
    
    Following a recent change for PR 82644 the non-standard hypergeomtric
    functions are not defined by <cmath> when __STRICT_ANSI__ is defined
    (e.g. for -std=c++17, or -std=c++14 -D__STDCPP_WANT_MATH_SPEC_FUNCS__).
    That caused errors in <tr1/cmath> because the using-declarations for
    tr1::hyperg et al are invalid in strict modes.
    
    The solution is to define the TR1 hypergeometric functions inline in
    <tr1/cmath> if __STRICT_ANSI__ is defined.
    
    Backport from mainline
    2018-05-03  Jonathan Wakely  <jwakely@redhat.com>
    
            PR libstdc++/82644
            * include/tr1/cmath [__STRICT_ANSI__] (hypergf, hypergl, hyperg): Use
            inline definitions instead of using-declarations.
            [__STRICT_ANSI__] (conf_hypergf, conf_hypergl, conf_hyperg): Likewise.
            * testsuite/tr1/5_numerical_facilities/special_functions/
            07_conf_hyperg/compile_cxx17.cc: New.
            * testsuite/tr1/5_numerical_facilities/special_functions/
            17_hyperg/compile_cxx17.cc: New.
    
    From-SVN: r261743

commit 35870d2639aca049518c886a3a7060a85a6f8d94
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Tue Jun 19 09:44:33 2018 +0000

    gimplify.c (gimplify_init_constructor): Really never clear for an incomplete constructor if CONSTRUCTOR_NO_CLEARING is set.
    
            * gimplify.c (gimplify_init_constructor): Really never clear for an
            incomplete constructor if CONSTRUCTOR_NO_CLEARING is set.
    
    From-SVN: r261736

commit 29478133c8fad5f4b00c6269f553aba7fa610dbf
Author: Jason Merrill <jason@redhat.com>
Date:   Mon Jun 18 20:38:58 2018 -0400

    PR c++/86200 - ICE with unexpanded pack in lambda parameter.
    
            * pt.c (find_parameter_packs_r) [LAMBDA_EXPR]: Also look into the
            function type.
    
    From-SVN: r261730

commit 1371007aa0e1857b75b935074961d6cb227e8cbf
Author: Jason Merrill <jason@redhat.com>
Date:   Mon Jun 18 20:38:52 2018 -0400

    PR c++/81060 - ICE with unexpanded parameter pack.
    
            * pt.c (check_for_bare_parameter_packs): Add loc parameter.
            * decl.c (grokdeclarator): Call it for qualifying_scope.
    
    From-SVN: r261729

commit 818010666c84961437fb9e4f66066d293d914f6f
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Jun 19 00:16:36 2018 +0000

    Daily bump.
    
    From-SVN: r261723

commit 14c73cee97f8df78efb3cc5f54baeeed8a2674af
Author: Martin Sebor <msebor@redhat.com>
Date:   Mon Jun 18 23:31:53 2018 +0000

    PR c/82063 - issues with arguments enabled by -Wall
    
    gcc/ChangeLog:
    
            PR c/82063
            * calls.c (alloc_max_size): Correct a logic error/typo.
            Treat excessive arguments as infinite.  Warn for invalid arguments.
            * doc/invoke.texi (-Walloc-size-larger-than): Update.
    
    gcc/testsuite/ChangeLog:
    
            PR c/82063
            * gcc.dg/Walloc-size-larger-than-1.c: New test.
            * gcc.dg/Walloc-size-larger-than-10.c: New test.
            * gcc.dg/Walloc-size-larger-than-11.c: New test.
            * gcc.dg/Walloc-size-larger-than-12.c: New test.
            * gcc.dg/Walloc-size-larger-than-13.c: New test.
            * gcc.dg/Walloc-size-larger-than-14.c: New test.
            * gcc.dg/Walloc-size-larger-than-15.c: New test.
            * gcc.dg/Walloc-size-larger-than-16.c: New test.
            * gcc.dg/Walloc-size-larger-than-2.c: New test.
            * gcc.dg/Walloc-size-larger-than-3.c: New test.
            * gcc.dg/Walloc-size-larger-than-4.c: New test.
            * gcc.dg/Walloc-size-larger-than-5.c: New test.
            * gcc.dg/Walloc-size-larger-than-6.c: New test.
            * gcc.dg/Walloc-size-larger-than-7.c: New test.
            * gcc.dg/Walloc-size-larger-than-8.c: New test.
            * gcc.dg/Walloc-size-larger-than-9.c: New test.
            * gcc.dg/Walloc-size-larger-than.c: New test.
    
    From-SVN: r261719

commit 8afb4a65f1c917a7cfa55d61b258f0bda8f05a25
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Jun 18 00:16:37 2018 +0000

    Daily bump.
    
    From-SVN: r261694

commit 73f573692d761e3df55a41c99583d1a69d562572
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Jun 17 00:16:21 2018 +0000

    Daily bump.
    
    From-SVN: r261685

commit 3539eb7245e03001571a257e950964b96ab7dd27
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Sat Jun 16 08:52:17 2018 +0200

    re PR middle-end/86095 (documentation for -Wunsafe-loop-optimizations references options which have no effect any more)
    
            PR middle-end/86095
            * common.opt (Wunsafe-loop-optimizations): Add Ignore, remove Var,
            documented as preserved for backward compatibility only.
            * doc/invoke.texi: Remove -Wunsafe-loop-optimizations documentation.
    
    From-SVN: r261680

commit 23689a157e1911631517c21477b7cfe8590247af
Author: Jason Merrill <jason@redhat.com>
Date:   Sat Jun 16 02:36:19 2018 -0400

    PR c++/86147 - wrong capture for template argument.
    
            * expr.c (mark_use): Look through NOP_EXPR.
    
    From-SVN: r261677

commit 8d726a9fba51bbe05f32b57b04c2e5d5ecae793e
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Jun 16 00:16:34 2018 +0000

    Daily bump.
    
    From-SVN: r261673

commit ac1327915df70518693d5a1c3cf788f7639698d9
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Fri Jun 15 22:37:46 2018 +0200

    re PR middle-end/85878 (ICE in convert_mode_scalar, at expr.c:287)
    
            PR middle-end/85878
            * expr.c (expand_assignment): Remove now redundant COMPLEX_MODE_P
            check from first store_expr, use to_mode instead of GET_MODE (to_rtx).
            Only call store_expr for halves if the mode is the same.
    
            * gfortran.fortran-torture/compile/pr85878.f90: New test.
    
    From-SVN: r261660

commit 81e209fa51aba11027ed457d7f28e87a6f3d9151
Author: Jason Merrill <jason@redhat.com>
Date:   Fri Jun 15 16:23:13 2018 -0400

    PR c++/82882 - ICE with lambda in template default argument.
    
            * lambda.c (record_null_lambda_scope): New.
            * pt.c (tsubst_lambda_expr): Use it.
            * name-lookup.c (do_pushtag): Don't give a lambda DECL_CONTEXT of a
            function that isn't open.
    
    From-SVN: r261658

commit a0df74de13ca559f2085f758c377636b18355c1f
Author: Jason Merrill <jason@redhat.com>
Date:   Fri Jun 15 16:23:08 2018 -0400

    * tree.c (maybe_warn_parm_abi): Inform the location of the class.
    
    From-SVN: r261657

commit cc326e85cc0a9b0076803c10151d16aea6827d7f
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Fri Jun 15 21:34:11 2018 +0200

    re PR middle-end/86123 (ICE in prepare_cmp_insn, at optabs.c:3967)
    
            PR middle-end/86123
            * match.pd ((X / Y) == 0 -> X < Y): Don't transform complex divisions.
            Fix up comment formatting.
    
            * gcc.c-torture/compile/pr86123.c: New test.
    
    From-SVN: r261648

commit ae3ce8dc414e49a7497f9a7b4ca3426a993fa0f6
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Fri Jun 15 20:01:39 2018 +0100

    PR libstdc++/86169 unshare COW string when non-const data() called
    
            PR libstdc++/86169
            * include/bits/basic_string.h [!_GLIBCXX_USE_CXX11_ABI]
            (basic_string::data()): Unshare string.
            * testsuite/21_strings/basic_string/operations/data/char/86169.cc:
            New.
    
    From-SVN: r261644

commit 20b5e17c6f6731e94e9a91958b20914f09088aea
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Fri Jun 15 18:15:54 2018 +0100

    Only define __cpp_lib_constexpr_char_traits for C++17
    
            * include/bits/char_traits.h (__cpp_lib_constexpr_char_traits): Only
            define for C++17 and above.
    
    From-SVN: r261639

commit 53f37cfed5181af1885cd3a31b1ce99bdc445fa0
Author: Cesar Philippidis <cesar@codesourcery.com>
Date:   Fri Jun 15 07:03:00 2018 -0700

    re PR fortran/85703 ([openacc] ICE in resolve_fntype, at fortran/resolve.c:16313)
    
    PR fortran/85703
    
            Backport from mainline
            2018-06-13  Cesar Philippidis  <cesar@codesourcery.com>
    
            PR fortran/85703
    
            gcc/fortran/
            * parse.c (decode_oacc_directive): Set gfc_matching_function
            to false.
            (decode_omp_directive): Likewise.
    
            gcc/testsuite/
            * gfortran.dg/goacc/pr85703.f90: New test.
            * gfortran.dg/gomp/pr85703.f90: New test.
    
    From-SVN: r261631

commit 3a8d64941438eb81a525b4bb63edcd950623cf7c
Author: Cesar Philippidis <cesar@codesourcery.com>
Date:   Fri Jun 15 07:01:00 2018 -0700

    re PR fortran/85702 ([openacc] ICE in gfc_format_decoder, at fortran/error.c:943)
    
    PR fortran/85702
    
            Backport from mainline
            2018-06-13  Cesar Philippidis  <cesar@codesourcery.com>
    
            PR fortran/85702
    
            gcc/fortran/
            * openmp.c (gfc_match_oacc_wait): Use %C to report error location.
    
            gcc/testsuite/
            * gfortran.dg/goacc/pr85702.f90: New test.
    
    From-SVN: r261630

commit 26a5c9ea19b7a6b804714be261d65920ef908395
Author: Cesar Philippidis <cesar@codesourcery.com>
Date:   Fri Jun 15 06:59:14 2018 -0700

    re PR fortran/85701 ([openacc] ICE in mark_scope_block_unused, at tree-ssa-live.c:364)
    
    PR fortran/85701
    
            Backport from mainline
            2018-06-05  Cesar Philippidis  <cesar@codesourcery.com>
    
            PR fortran/85701
    
            gcc/fortran/
            * openmp.c (gfc_resolve_oacc_declare): Error on functions and
            subroutine data clause arguments.
    
            gcc/testsuite/
            * gfortran.dg/goacc/pr85701.f90: New test.
    
    From-SVN: r261629

commit f82702c3f77b7b83f79b72247644d2aa6c0e97ab
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Jun 15 00:16:41 2018 +0000

    Daily bump.
    
    From-SVN: r261616

commit 96ef207b5beb144516d8e5faace92c969f8727ed
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Jun 14 21:16:52 2018 +0200

    re PR target/86048 (.seh_savexmm offset is negative error when compiling libpng)
    
            PR target/86048
            * gcc.target/i386/pr86048.c: Require sse2 effective target.  Add
            -msse2 to dg-options.
    
    From-SVN: r261609

commit 1d18ddb6182bcbdf185ae40fcbeeac82d59d2b6e
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Jun 14 21:11:21 2018 +0200

    re PR middle-end/86122 (ICE in useless_type_conversion_p, at gimple-expr.c:87)
    
            PR middle-end/86122
            * match.pd ((A +- CST1) +- CST2): Punt if last resort
            unsigned_type_for returns NULL.
    
            * gcc.c-torture/compile/pr86122.c: New test.
    
    From-SVN: r261607

commit b260b6245ed653a1f57ecd790e0cb24307703c27
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu Jun 14 15:36:43 2018 +0200

    re PR target/85945 (ICE in resolve_subreg_use, at lower-subreg.c:751)
    
            PR target/85945
            * lower-subreg.c (find_decomposable_subregs): Don't decompose float
            subregs of multi-word pseudos unless the float mode has word size.
    
            * gcc.c-torture/compile/pr85945.c: New test.
    
    From-SVN: r261594

commit 36462f4ef43c760da871795b69e19e3b643ffc1c
Author: Richard Biener <rguenther@suse.de>
Date:   Thu Jun 14 12:31:46 2018 +0000

    re PR target/86139 (ICE in in store_constructor, at expr.c:6849 on arm-linux-gnueabihf)
    
    2018-06-14  Richard Biener  <rguenther@suse.de>
    
            PR middle-end/86139
            * tree-vect-generic.c (build_word_mode_vector_type): Remove
            duplicate and harmful type_hash_canon.
            * tree.c (type_hash_canon): Assert we didn't find ourselves.
    
    From-SVN: r261591

commit e63eaa37e8441d47810e1eba4a85ed1d97d1a129
Author: Sebastian Huber <sebastian.huber@embedded-brains.de>
Date:   Thu Jun 14 05:17:50 2018 +0000

    RTEMS: Prefer int for int32_t
    
    Common systems like glibc and FreeBSD define int32_t to int.  This means
    a lot of third party code works well in these cases:
    
      #include <stdint.h>
    
      void f(int32_t);
    
      void f(int);
    
      void g(int32_t *);
    
      void h(void)
      {
        int i;
        g(&i);
      }
    
    On RTEMS you got however in C
    
      test.c:5:6: error: conflicting types for 'f'
        void f(int);
            ^
      test.c:3:6: note: previous declaration of 'f' was here
        void f(int32_t);
            ^
      test.c: In function 'h':
      test.c:12:4: warning: passing argument 1 of 'g' from incompatible
      pointer type [-Wincompatible-pointer-types]
        g(&i);
          ^
      test.c:7:6: note: expected 'int32_t * {aka long int *}' but argument
      is of type 'int *' void g(int32_t *);
    
    and C++
    
      test.c: In function 'void h()':
      test.c:12:4: error: invalid conversion from 'int*' to 'int32_t* {aka
      long int*}' [-fpermissive]
        g(&i);
          ^~
      test.c:7:6: note:   initializing argument 1 of 'void g(int32_t*)'
        void g(int32_t *);
          ^
    
    This was due to a Newlib speciality which uses long for int32_t if long
    is a 32-bit type.  To ease the use of third party software in RTEMS we
    override this Newlib option now and use int for int32_t if int is a
    32-bit type.
    
    gcc/
            * config/rtems.h (STDINT_LONG32): Define.
    
    From-SVN: r261583

commit cfca5b925b52737df177b0e6b6e7c48bf20a0e3f
Author: Roland McGrath <mcgrathr@google.com>
Date:   Thu Jun 14 01:18:59 2018 +0000

    PR other/77609: Let the assembler choose ELF section types for miscellaneous named sections
    
    gcc/
            PR other/77609
            * varasm.c (default_section_type_flags): Set SECTION_NOTYPE for
            any section for which we don't know a specific type it should have,
            regardless of name.  Previously this was done only for the exact
            names ".init_array", ".fini_array", and ".preinit_array".
            (default_elf_asm_named_section): Add comment about
            relationship with default_section_type_flags and SECTION_NOTYPE.
            (get_section): Don't consider it a type conflict if one side has
            SECTION_NOTYPE and the other doesn't, as long as neither has the
            SECTION_BSS et al used in the default_section_type_flags logic.
    
    (cherry picked from commit db7548a2771bbf34cf7430712af7ac670b429958)
    
    From-SVN: r261581

commit ade13e59be840eb6e5d9fe91e82c5ff9589b90d3
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Jun 14 00:16:14 2018 +0000

    Daily bump.
    
    From-SVN: r261579

commit a7cab6ac7a637d41645f57df4bf5d2855b7d5f9b
Author: Jason Merrill <jason@redhat.com>
Date:   Wed Jun 13 17:05:46 2018 -0400

    c-opts.c (c_common_post_options): Warn about useless -Wabi.
    
            * c-opts.c (c_common_post_options): Warn about useless -Wabi.
    
            (c_common_handle_option) [OPT_Wabi_]: Remove flag_abi_compat_version
            handling.
    
    From-SVN: r261572

commit 142ef2178ac3880279eef225db26b20095399387
Author: Martin Sebor <msebor@redhat.com>
Date:   Wed Jun 13 20:39:50 2018 +0000

    PR tree-optimization/86114 - ICE in gimple_fold_builtin_strlen with an invalid call to strnlen
    
    gcc/testsuite/ChangeLog:
    
            PR tree-optimization/86114
            * gcc.dg/pr86114.c: New test.
    
    gcc/ChangeLog:
    
            PR tree-optimization/86114
            * gimple-fold.c (gimple_fold_builtin_strlen): Only handle LHS
            of integer types.
            * tree-ssa-strlen.c (maybe_set_strlen_range): Same.
    
    From-SVN: r261569

commit c575c6d2289d0bfa3944b9f7de6188abdfca7a6d
Author: Steven G. Kargl <kargl@gcc.gnu.org>
Date:   Wed Jun 13 20:17:58 2018 +0000

    re PR fortran/86110 (ICE in gfc_resolve_character_array_constructor, at fortran/array.c:2044)
    
    2018-06-13  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/86110
            * array.c (gfc_resolve_character_array_constructor): Avoid NULL
            pointer dereference.
    
    2018-06-13  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/86110
            * gfortran.dg/pr86110.f90: New test.
    
    From-SVN: r261565

commit 1a5fe576c8d0269a0ce1d74082b936eb79c67d1f
Author: Jason Merrill <jason@redhat.com>
Date:   Wed Jun 13 15:39:53 2018 -0400

    PR c++/86094 - wrong code with defaulted move ctor.
    
    gcc/c-family/
            * c-opts.c (c_common_post_options): Bump the current ABI version to
            13.  Set warn_abi_version and flag_abi_compat_version to the current
            version rather than 0.  Fix defaulting flag_abi_compat_version from
            warn_abi_version.
    gcc/cp/
            * class.c (classtype_has_non_deleted_move_ctor): New.
            * tree.c (maybe_warn_parm_abi, type_has_nontrivial_copy_init):
            Handle v12 breakage.
    
    From-SVN: r261563

commit 3620ca7f60850554b6780be0dff1427f25ac8e3b
Author: Ian Lance Taylor <ian@gcc.gnu.org>
Date:   Wed Jun 13 13:51:01 2018 +0000

    libgo: update to Go 1.10.3 release
    
        Reviewed-on: https://go-review.googlesource.com/118495
    
    From-SVN: r261548

commit 5b56c920d749ccda3e457f34ec529e2e190c393a
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Wed Jun 13 11:22:17 2018 +0000

    re PR target/86048 (.seh_savexmm offset is negative error when compiling libpng)
    
            PR target/86048
            * config/i386/winnt.c (i386_pe_seh_cold_init): Do not emit negative
            offsets for register save directives.  Emit a second batch of save
            directives, if need be, when the function accesses prior frames.
    
    From-SVN: r261545

commit 6d7d7b4952afb4be2ff4d0287a2ef6ce9846396e
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Jun 13 00:16:47 2018 +0000

    Daily bump.
    
    From-SVN: r261534

commit ffea8a51a70b06dd3c23a27a99fa204aaf6fd9b5
Author: Steven G. Kargl <kargl@gcc.gnu.org>
Date:   Tue Jun 12 18:19:03 2018 +0000

    re PR fortran/44491 (Diagnostic just shows "<During initialization>" instead of a locus)
    
    2018-06-12  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/44491
            * gfortran.dg/pr44491.f90: Add dg-options omitted in previous commit.
    
    From-SVN: r261519

commit 09c6ee64a5db5cf879c960c817e4f55a194c5c77
Author: Steven G. Kargl <kargl@gcc.gnu.org>
Date:   Tue Jun 12 18:05:05 2018 +0000

    re PR fortran/44491 (Diagnostic just shows "<During initialization>" instead of a locus)
    
    2018-06-12  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/44491
            * expr.c (gfc_check_assign): Select non-NULL locus.
    
    2018-06-12  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/44491
            * gfortran.dg/pr44491.f90: New testcase
    
    From-SVN: r261517

commit e743fefa17a9b102997bc41eaa88b138521ab543
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Tue Jun 12 10:34:41 2018 +0000

    ada-tree.h (TYPE_RETURN_BY_DIRECT_REF_P): Change from using TYPE_LANG_FLAG_4 to using TYPE_LANG_FLAG_0.
    
            * gcc-interface/ada-tree.h (TYPE_RETURN_BY_DIRECT_REF_P): Change from
            using TYPE_LANG_FLAG_4 to using TYPE_LANG_FLAG_0.
            (TYPE_ALIGN_OK): Move around.
            (TYPE_PADDING_FOR_COMPONENT): Remove superfluous parentheses.
            * gcc-interface/decl.c (change_qualified_type): Move to...
            (gnat_to_gnu_entity): Adjust comment.
            * gcc-interface/gigi.h (change_qualified_type): ...here; make inline.
            (ceil_pow2): Use ceil_log2.
            * gcc-interface/utils.c (finish_subprog_decl): Add couple of comments
            and do not set TREE_SIDE_EFFECTS.
            (handle_noreturn_attribute): Use change_qualified_type.
    
    From-SVN: r261487

commit 5d314b25dc6f854e6b7f22b2a5fed79f9df56dc4
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Tue Jun 12 10:19:54 2018 +0000

    decl.c (gnat_to_gnu_entity): Do not get the expression of a dispatch table that is not being defined.
    
            * gcc-interface/decl.c (gnat_to_gnu_entity) <E_Constant>: Do not get
            the expression of a dispatch table that is not being defined.
            <E_Record_Subtype>: Remove obsolete kludge.
    
    From-SVN: r261484

commit ef2612dc45c88dd03a376d5982d228cc78705a81
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Tue Jun 12 10:01:39 2018 +0000

    decl.c (warn_on_field_placement): Use specific wording for discriminants.
    
            * gcc-interface/decl.c (warn_on_field_placement): Use specific wording
            for discriminants.
            (warn_on_list_placement): New static function.
            (components_to_record): Use it to warn on multiple fields in list.
    
    From-SVN: r261481

commit 9ecac955ba7675857e9816a38a21ce1dee41657b
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Tue Jun 12 09:31:32 2018 +0000

    backport: decl.c (gnat_to_gnu_entity): Reuse the existing fields of a dummy fat pointer type, if any.
    
            Backport from mainline
            2018-06-11  Eric Botcazou  <ebotcazou@adacore.com>
    
            * gcc-interface/decl.c (gnat_to_gnu_entity) <E_Array_Type>: Reuse the
            existing fields of a dummy fat pointer type, if any.  Clear the
            TYPE_DECL_SUPPRESS_DEBUG on the fat pointer type after completing it.
    
    From-SVN: r261477

commit 384c017e2689adbb71de849f179a469d79a3536b
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Jun 12 00:16:26 2018 +0000

    Daily bump.
    
    From-SVN: r261471

commit ce9c5057ba697da799015562563261249b4c3d67
Author: Jason Merrill <jason@redhat.com>
Date:   Mon Jun 11 18:02:37 2018 -0400

    PR c++/85792 -Wctor-dtor-privacy and inherited constructor.
    
            * class.c (maybe_warn_about_overly_private_class): Handle inherited
            constructors.
    
    From-SVN: r261467

commit fbdf9d22d252655bacde5427342b8376be8e0917
Author: Jason Merrill <jason@redhat.com>
Date:   Mon Jun 11 18:02:31 2018 -0400

    PR c++/85963 - -Wunused-but-set with ?: in template.
    
            * pt.c (tsubst_copy_and_build) [COND_EXPR]: Call mark_rvalue_use.
    
    From-SVN: r261466

commit 0efd850159f4dd5b90afa668647cb0d0199de5ff
Author: Jason Merrill <jason@redhat.com>
Date:   Mon Jun 11 18:02:25 2018 -0400

    PR c++/85710 - ICE with -Wmemset-elt-size.
    
    c-family/
            * c-warn.c (warn_for_memset): Don't crash on incomplete elt type.
    
    From-SVN: r261465

commit 39aa877fb225eeddc5e0047e20413b44fc347298
Author: Jason Merrill <jason@redhat.com>
Date:   Mon Jun 11 18:02:19 2018 -0400

    PR c++/61806 - missed SFINAE with partial specialization.
    
            * cp-tree.h (deferring_access_check_sentinel): Add deferring_kind
            parameter to constructor.
            * pt.c (instantiate_class_template_1): Enable access checking
            before call to most_specialized_partial_spec.
    
    From-SVN: r261464

commit 5d71dff7a6f0234c1ea9985e8e6682f4759e8d3a
Author: Jason Merrill <jason@redhat.com>
Date:   Mon Jun 11 18:02:13 2018 -0400

    PR c++/85765 - SFINAE and non-type default template arg.
    
            * pt.c (type_unification_real): Do full semantic processing if
            substituting a partial args list replaces all template parms.
    
    From-SVN: r261463

commit 9fe8e5e169cfec2516221048fcae8666f882f7b5
Author: Jason Merrill <jason@redhat.com>
Date:   Mon Jun 11 18:02:07 2018 -0400

    PR c++/85764 - bogus 'this' not captured error.
    
            * lambda.c (resolvable_dummy_lambda): Use nonlambda_method_basetype.
            (nonlambda_method_basetype): Handle NSDMI.
    
    From-SVN: r261462

commit c0c8c912a5acd22c966202200703872f90b08d6a
Author: Jason Merrill <jason@redhat.com>
Date:   Mon Jun 11 18:02:01 2018 -0400

    PR c++/85807 - ICE with call in template NSDMI.
    
            * init.c (get_nsdmi): Use push_to/pop_from_top_level.
            * tree.c (bot_manip): Don't set_flags_from_callee in a template.
    
    From-SVN: r261461

commit 4c2125ba18f40e57987a828bfd60e83024850e10
Author: Jason Merrill <jason@redhat.com>
Date:   Mon Jun 11 18:01:55 2018 -0400

    PR c++/85815 - reference to member of enclosing template.
    
            * search.c (lookup_base): Use currently_open_class.
            (lookup_member): Use it regardless of -fconcepts.
            * parser.c (cp_parser_postfix_dot_deref_expression): Check it.
    
    From-SVN: r261460

commit b91623a98b03de99f2ce153d6790da84ce3a7690
Author: Jason Merrill <jason@redhat.com>
Date:   Mon Jun 11 14:56:56 2018 -0400

    PR c++/80485 - inline function non-zero address.
    
            * symtab.c (nonzero_address): Check DECL_COMDAT.
    
    From-SVN: r261449

commit b0a2eb409995a993bce25633400f1d8872c3abf7
Author: Jason Merrill <jason@gcc.gnu.org>
Date:   Mon Jun 11 14:42:15 2018 -0400

    * doc/invoke.texi: Document -fabi-version=12.
    
    From-SVN: r261447

commit 6f29ea8a41f69ffc437066ab825e0600f737e657
Author: Marek Polacek <polacek@redhat.com>
Date:   Mon Jun 11 18:41:33 2018 +0000

    * g++.dg/cpp0x/range-for9.C: Adjust dg-error.
    
    From-SVN: r261446

commit 4655a7d5121f092bb60b80f75ab3884c2c00f169
Author: Jason Merrill <jason@redhat.com>
Date:   Mon Jun 11 14:40:14 2018 -0400

    PR c++/86094 - wrong code with defaulted move ctor.
    
            * tree.c (type_has_nontrivial_copy_init): Fix move ctor handling.
    
    From-SVN: r261445

commit d0315412425f692dbaabe3f6f8b67390ac111541
Author: Peter Bergner <bergner@vnet.ibm.com>
Date:   Mon Jun 11 13:23:28 2018 -0500

    backport: re PR target/85755 (PowerPC Gcc's -mupdate produces inefficient code on power8/power9 machines)
    
    gcc/
            Backport from mainline
            2018-06-08  Peter Bergner  <bergner@vnet.ibm.com>
    
            PR target/85755
            * config/rs6000/rs6000.c (mem_operand_gpr): Enable PRE_INC and PRE_DEC
            addresses.
    
    gcc/testsuite/
            Backport from mainline
            2018-06-08  Peter Bergner  <bergner@vnet.ibm.com>
    
            PR target/85755
            * gcc.target/powerpc/pr85755.c: New test.
    
    From-SVN: r261441

commit 652dfa076cdcef865f87f16a9ff99da0fb140f72
Author: Joseph Myers <joseph@codesourcery.com>
Date:   Mon Jun 11 18:08:26 2018 +0100

    * fr.po: Update.
    
    From-SVN: r261440

commit 8436701337b39e287fc1a1278bd1a8a6f4e6c095
Author: Segher Boessenkool <segher@kernel.crashing.org>
Date:   Mon Jun 11 18:06:49 2018 +0200

    backport: re PR target/85755 (PowerPC Gcc's -mupdate produces inefficient code on power8/power9 machines)
    
            Backport from trunk
            2018-06-11  Segher Boessenkool  <segher@kernel.crashing.org>
    
            PR target/85755
            * config/rs6000/rs6000.md (*movdi_internal32): Put constraint modifiers
            on the correct operand.
            (*movdi_internal64): Ditto.
    
    From-SVN: r261436

commit 8173229f04b6cf7f4d489372223939a2d8ba26d3
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Jun 11 00:16:56 2018 +0000

    Daily bump.
    
    From-SVN: r261392

commit f42e589e9106123acc5fe10000e40578002c0b96
Author: Jerry DeLisle <jvdelisle@gcc.gnu.org>
Date:   Sun Jun 10 02:26:57 2018 +0000

    re PR libfortran/86070 (gfortran.dg/fmt_zero_digits.f90 segmentation fault starting with r261077)
    
    2018-06-09  Jerry DeLisle  <jvdelisle@gcc.gnu.org>
    
            PR libgfortran/86070
            * io/write_float.def (build_float_string): Initialize *len.
    
    From-SVN: r261383

commit cd07d5adfd81f072f7c61b086eac837eda4e8f44
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Jun 10 00:17:07 2018 +0000

    Daily bump.
    
    From-SVN: r261380

commit 04d26d0e4e9bd262407efc0d07da6d3a2db5244b
Author: Steven G. Kargl <kargl@gcc.gnu.org>
Date:   Sat Jun 9 18:09:00 2018 +0000

    re PR fortran/85138 (ICE with generic function)
    
    2018-06-09  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/85138
            PR fortran/85996
            PR fortran/86051
            * decl.c (gfc_match_char_spec): Use private namespace in attempt to
            reduce a charlen to a constant.
    
    2018-06-09  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/85138
            PR fortran/85996
            PR fortran/86051
            * gfortran.dg/pr85138_1.f90: New test.
            * gfortran.dg/pr85138_2.f90: Ditto.
            * gfortran.dg/pr85996.f90: Ditto.
    
    From-SVN: r261370

commit 994774fcb22d97ce0085243f1c9156481525f85f
Author: Steven G. Kargl <kargl@gcc.gnu.org>
Date:   Sat Jun 9 18:06:04 2018 +0000

    re PR fortran/86059 (ICE in reduce_binary_ac, at fortran/arith.c:1308 (and others))
    
    2018-06-09  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/86059
            * array.c (match_array_cons_element): NULL() cannot be in an
            array constructor.
    
    2018-06-09  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/86059
            * gfortran.dg/associate_30.f90: Remove code tested ...
            * gfortran.dg/pr67803.f90: Ditto.
            * gfortran.dg/pr67805.f90: Ditto.
            * gfortran.dg/pr86059.f90: ... here.  New test.
    
    From-SVN: r261369

commit 3068f997d20a7d527a45e1d5e95b46f4f4677889
Author: Steven G. Kargl <kargl@gcc.gnu.org>
Date:   Sat Jun 9 18:02:56 2018 +0000

    re PR fortran/63514 (functions containing volatile are considered pure)
    
    2018-06-09  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/63514
            * symbol.c (gfc_add_volatile): Enforce F2008:C1282 and F2018:C1588.
    
    
    2018-06-09  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/63514
            * gfortran.dg/pr63514.f90: New test.
    
    From-SVN: r261368

commit dd7b828f56e9ecfec6261a362f4cb284191cc2e7
Author: Steven G. Kargl <kargl@gcc.gnu.org>
Date:   Sat Jun 9 17:47:06 2018 +0000

    Commit testcases ommitted in last commit.
    
    2018-06-09  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/78278
            * gfortran.dg/data_bounds_1.f90: Add -std=gnu option.
            * gfortran.dg/data_char_1.f90: Ditto.
            * gfortran.dg/pr78278.f90: New test.
    
    From-SVN: r261367

commit 211f93e39bce954bba687ebf66f6cf2601a8b778
Author: Steven G. Kargl <kargl@gcc.gnu.org>
Date:   Sat Jun 9 17:46:07 2018 +0000

    re PR fortran/78278 (ICE in gfc_wide_memset, at fortran/scanner.c:153)
    
    2018-06-09  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/78278
            Committed as part of r261364
            * data.c (gfc_assign_data_value): Re-arrange code to allow for
            an error for double initialization of CHARACTER entities.
    
    2018-06-09  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/78278
            * gfortran.dg/data_bounds_1.f90: Add -std=gnu option.
            * gfortran.dg/data_char_1.f90: Ditto.
            * gfortran.dg/pr78278.f90: New test.
    
    From-SVN: r261366

commit 68d2262fec1234f37b071ecb98552f5c76521ef5
Author: Steven G. Kargl <kargl@gcc.gnu.org>
Date:   Sat Jun 9 17:38:24 2018 +0000

    re PR fortran/38351 (Poor error message for rank mismatch in operator args)
    
    2018-06-09  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/38351
            * resolve.c (resolve_operator): Provide better error message for
            derived type entity used in an binary intrinsic numeric operator.
    
    2018-06-09  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/38351
            * gfortran.dg/pr38351.f90: New test.
            * gfortran.dg/typebound_operator_4.f03: Adjust for new error message.
    
    From-SVN: r261365

commit fe4f79c0096ee40eea82d5bc7e306745af1f94c6
Author: Steven G. Kargl <kargl@gcc.gnu.org>
Date:   Sat Jun 9 17:34:59 2018 +0000

    re PR fortran/78571 (ICE in create_character_initializer, at fortran/data.c:191)
    
    2018-06-08  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/78571
            * data.c (create_character_initializer): Return early if type is
            incompatible with CHARACTER.
    
    2018-06-08  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/78571
            * gfortran.dg/pr78571.f90: New test.
    
    From-SVN: r261364

commit 84f486e712a1e06d9fca456d8d94e86afd97546d
Author: Thomas Koenig <tkoenig@gcc.gnu.org>
Date:   Sat Jun 9 14:15:53 2018 +0000

    re PR fortran/85631 (Runtime error message array bound mismatch with nonzero optimization)
    
    2018-06-09  Thomas Koenig  <tkoenig@gcc.gnu.org>
    
            PR fortran/85631
            Backport from trunk.
            * trans.h (gfc_ss): Add field no_bounds_check.
            * trans-array.c (gfc_conv_ss_startstride): If flag_realloc_lhs and
            ss->no_bounds_check is set, do not use runtime checks.
            * trans-expr.c (gfc_trans_assignment_1): Set lss->no_bounds_check
            for reallocatable lhs.
    
    2018-06-09  Thomas Koenig  <tkoenig@gcc.gnu.org>
    
            PR fortran/85631
            Backport from trunk.
            * gfortran.dg/bounds_check_20.f90: New test.
    
    From-SVN: r261359

commit 459bd1b280097d06010cb79e1b130e02975a35f8
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Jun 9 00:16:29 2018 +0000

    Daily bump.
    
    From-SVN: r261356

commit 59f4678807427b51be26b909783894dc3dda3ec5
Author: Carl Love <cel@us.ibm.com>
Date:   Fri Jun 8 23:12:35 2018 +0000

    backport: vsx.md (vextract_fp_from_shorth, [...]): Add BE support.
    
    gcc/ChangeLog:
    
    2018-06-08  Carl Love  <cel@us.ibm.com>
    
            Backport from mainline
            * gcc/config/rs6000/vsx.md (vextract_fp_from_shorth,
            vextract_fp_from_shortl): Add BE support.
    
    gcc/testsuite/ChangeLog:
    
    2018-06-08  Carl Love  <cel@us.ibm.com>
    
            Backport from mainline.
            * gcc.target/powerpc/builtins-3-p9-runnable.c: Add debug print
            statements.
    
    From-SVN: r261351

commit a934eec5ab03f42408010ce9625647b28de24358
Author: Carl Love <cel@us.ibm.com>
Date:   Fri Jun 8 23:07:55 2018 +0000

    backport: vsx.md (first_match_index_<mode>): Calculate index using natureal element order.
    
    gcc/ChangeLog:
    
    2018-06-08  Carl Love  <cel@us.ibm.com>
    
            Backport from mainline
            * gcc/config/rs6000/vsx.md (first_match_index_<mode>):
            Calculate index using natureal element order.
            (first_match_or_eos_index_<mode>):
            Calculate index using natural element order.
            (first_match_index_<mode>):
            Calculate index using natural element order.
            (first_match_or_eos_index_<mode>):
            Calculate index using natural order.
            (define_insn vclzlsbb): Change to define_insn vclzlsbb_<mode>.
            for BE and LE modes.
            * gcc/config/rs6000/rs6000-c.c: Rename P9V_BUILTIN_VCLZLSBB,
            P9V_BUILTIN_VCLZLSBB_V16QI.
            * gcc/config/rs6000/rs6000-builtin.def: Make VCLZLSBB mode
            specific.
    
    gcc/testsuite/ChangeLog:
    
    2018-06-08  Carl Love  <cel@us.ibm.com>
    
            Backport from mainline
            * gcc.target/powerpc/builtins-8-p9-runnable.c: New test file.
            * gcc.target/powerpc/vsu/vec-cntlz-lsbb-2.c (dg-error): Update expected
            error message.
    
    From-SVN: r261349

commit 7a3cacd5d8052a262d9686b7a0833bbf16115959
Author: Joseph Myers <joseph@codesourcery.com>
Date:   Fri Jun 8 16:16:31 2018 +0100

    * es.po: Update.
    
    From-SVN: r261332

commit 3930fffa13a05fb756f59a2d93c80d02a036bfb4
Author: Kyrylo Tkachov <kyrylo.tkachov@arm.com>
Date:   Fri Jun 8 08:18:43 2018 +0000

    [arm] PR target/81497: Fix arm_acle.h for C++
    
            Backport from mainline
            2018-06-05  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>
    
            PR target/81497
            * config/arm/arm-builtins.c (arm_type_qualifiers): Add
            qualifier_void_pointer and qualifier_const_void_pointer.
            (arm_ldc_qualifiers, arm_stc_qualifiers): Use the above.
            (arm_init_builtins): Handle the above.
            * config/arm/arm_acle.h (__arm_cdp, __arm_ldc, __arm_ldcl, __arm_stc,
            __arm_stcl, __arm_mcr, __arm_cdp2, __arm_ldc2, __arm_ldcl2, __arm_stc2,
            __arm_stcl2,__arm_mcr2, __arm_mcrr, __arm_mcrr2): Remove return for
            void intrinsics.
    
            * g++.target/arm/arm.exp: New file.
            * g++.target/arm/pr81497.C: Likewise.
    
    From-SVN: r261305

commit 17890c42b5b8e836961b472d5e87dab47837207f
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Jun 8 00:16:24 2018 +0000

    Daily bump.
    
    From-SVN: r261302

commit 638fab73a6a76862ee21a4ff3bdbd9eaf21f44d1
Author: Steven G. Kargl <kargl@gcc.gnu.org>
Date:   Thu Jun 7 18:17:49 2018 +0000

    re PR fortran/86045 (ICE in reduce_binary_ac, at fortran/arith.c:1308)
    
    2018-06-07  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/86045
            * simplify.c (gfc_simplify_mod): Re-arrange code to test whether
            'P' is zero and issue an error if it is.
    
    2018-06-07  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/86045
            * gfortran.dg/pr86045.f90: New test.
    
    From-SVN: r261290

commit 83b578b1b4711222a10c52c1a84f2228c37b0ba2
Author: Thomas Koenig <tkoenig@gcc.gnu.org>
Date:   Thu Jun 7 17:33:44 2018 +0000

    re PR fortran/85641 (ICE with string concatenate)
    
    2018-06-07  Thomas Koenig  <tkoenig@gcc.gnu.org>
    
            PR fortran/85641
            Backport from trunk.
            * frontend-passes.c (is_fe_temp): Add prototype.
            (realloc_string_callback): Early return for frontend-generated
            temporary.
    
    2018-06-07  Thomas Koenig  <tkoenig@gcc.gnu.org>
    
            PR fortran/85641
            Backport from trunk.
            * gfortran.dg/realloc_on_assign_30.f90: New test.
    
    From-SVN: r261285

commit 3529fc985f626cd47d5006786d046a712d6ab7b8
Author: Uros Bizjak <ubizjak@gmail.com>
Date:   Thu Jun 7 18:37:01 2018 +0200

    re PR target/85684 (output of instrinsic _xgetbv is wrongly overwritten)
    
            PR target/85684
            * config/i386/i386.c (ix86_expand_builtin) <case IX86_BUILTIN_RDPID>:
            Generate SImode target register for null target.
            <case IX86_BUILTIN_XGETBV>: Ditto.
            <case IX86_BUILTIN_XSETBV>: Optimize LSHIFTRT generation.
            * config/i386/xsaveintrin.h (_xgetbv): Add missing return.
    
    testsuite/ChangeLog:
    
            PR target/85684
            * gcc.target/i386/xgetsetbv.c: Check also variable arguments.
    
    From-SVN: r261283

commit b1be04e3a255f1eae9120366426909cfd8f6eec2
Author: Joseph Myers <joseph@codesourcery.com>
Date:   Thu Jun 7 16:27:19 2018 +0100

    * eo.po: Update.
    
    From-SVN: r261281

commit 774d5fddbf827ca0cbf320eff4dcfabf43c70e83
Author: Peter Bergner <bergner@vnet.ibm.com>
Date:   Thu Jun 7 08:59:37 2018 -0500

    backport: re PR target/63177 (Powerpc no-vfa-vect-depend-2.c and no-vfa-vect-depend-3.c failures)
    
            Backport from mainline
            2018-06-06  Peter Bergner  <bergner@vnet.ibm.com>
    
            PR target/63177
            * /config/rs6000/rs6000.h (ASM_CPU_SPEC): Add support for -mpower9.
            Don't handle -mcpu=power8 if -mpower9-vector is also used.
    
    From-SVN: r261275

commit b3ac1ac222e9426582be3993e47d7214700a83ee
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Jun 7 00:16:17 2018 +0000

    Daily bump.
    
    From-SVN: r261258

commit 8b62d5dc4a8cdab041c6662c8e9788a045ca1ecb
Author: Jason Merrill <jason@redhat.com>
Date:   Wed Jun 6 13:48:35 2018 -0400

    PR c++/86060 - ICE on range for with -std=c++98.
    
            * parser.c (cp_parser_init_statement): Don't clobber *decl after
            pedwarn.
    
    From-SVN: r261240

commit f8c67f3d308f060e2f6d6ce6abce952867c2234c
Author: Richard Biener <rguenther@suse.de>
Date:   Wed Jun 6 15:06:50 2018 +0000

    Backport PRs 85863, 85934, 85964, 86038
    
    2018-06-06  Richard Biener  <rguenther@suse.de>
    
            Backport from mainline
            2018-06-04  Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/86038
            * tracer.c (find_best_successor): Check probability for
            being initialized, bail out if not.
    
            * gcc.dg/pr86038.c: New testcase.
    
            2018-05-30  Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/85964
            * tracer.c (better_p): Drop initialized count check, we only
            call the function with initialized counts now.
            (find_best_successor): Do find a best edge if one
            has uninitialized count.
            (find_best_predecessor): Likewise.  Do BB frequency check only
            if count is initialized.
    
            2018-05-28  Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/85934
            * tree-vect-generic.c (expand_vector_operations_1): Hoist
            vector boolean check before scalar optimization.
    
            * gcc.target/i386/pr85934.c: New testcase.
    
            2018-05-22  Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/85863
            * tree-vect-stmts.c (vect_is_simple_cond): Only widen invariant
            comparisons when vectype is specified.
            (vectorizable_condition): Do not specify vectype for
            vect_is_simple_cond when SLP vectorizing.
    
            * gfortran.fortran-torture/compile/pr85863.f: New testcase.
    
    From-SVN: r261237

commit d30117c96381b8b97b12506d3acc8ff12ab368e4
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Wed Jun 6 12:41:57 2018 +0100

    PR libstdc++/86008 add std::quoted support for string_view
    
            PR libstdc++/86008
            * include/bits/quoted_string.h (_Quoted_string<basic_string_view, C>):
            Define new partial specialization.
            * include/std/iomanip (quoted(basic_string_view<C,T>, C, C)): Define
            new overload.
            (operator<<(basic_ostream<C,T>&, const _Quoted_string<S,C>&)): Use
            value not reference for iteration.
            * testsuite/27_io/manipulators/standard/char/quoted.cc: Adjust
            comment.
            * testsuite/27_io/manipulators/standard/char/quoted_sv.cc: New test.
            * testsuite/27_io/manipulators/standard/wchar_t/quoted.cc: Adjust
            comment.
    
    From-SVN: r261228

commit c0ece816c59040e95e04b0b975f751635ca903cd
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed Jun 6 00:16:27 2018 +0000

    Daily bump.
    
    From-SVN: r261225

commit d9289502d025db0737cea8cd6312c77120966068
Author: Marek Polacek <polacek@redhat.com>
Date:   Tue Jun 5 15:41:34 2018 +0000

    re PR c++/85976 (ICE in cp_tree_equal when building Blitz. May be nested templates.)
    
            PR c++/85976
            * tree.c (cp_tree_equal): Handle USING_DECL.
    
            * g++.dg/cpp0x/alias-decl-64.C: New test.
    
    From-SVN: r261206

commit a782ce6a547bcdd58209fc5515254c0f2c72baac
Author: Marek Polacek <polacek@redhat.com>
Date:   Tue Jun 5 15:33:51 2018 +0000

    re PR c++/85847 (unexpected expression of kind template_id_expr)
    
            PR c++/85847
            * init.c (build_new_1): Use fold_non_dependent_expr.  Use a dedicated
            variable for its result.  Fix a condition.
            (build_new): Use fold_non_dependent_expr.  Tweak a condition.
    
    From-SVN: r261205

commit 5c0b7e66cffb43e3b7ac7ea28de30b4342d90fb7
Author: Jason Merrill <jason@redhat.com>
Date:   Tue Jun 5 07:27:15 2018 -0400

    PR c++/85731 - wrong error with qualified-id in template.
    
            * semantics.c (finish_qualified_id_expr): build_qualified_name
            for unbound names in the current class.
    
    From-SVN: r261197

commit d655569ac2efa44602df54108a54c945961c2f7a
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Tue Jun 5 08:39:59 2018 +0100

    * include/std/type_traits: Fix comment typo.
    
    From-SVN: r261187

commit b105a4fc5d687efa4863c9723221c6df23d07452
Author: Andreas Krebbel <krebbel@linux.ibm.com>
Date:   Tue Jun 5 07:30:59 2018 +0000

    S/390: Fix __builtin_tbeginc signature
    
    The builtin was accidentally defined to have an integer return value.
    Fixed with the attached patch.
    
    gcc/ChangeLog:
    
    2018-06-05  Andreas Krebbel  <krebbel@linux.ibm.com>
    
            Backport from mainline
            2018-06-05  Andreas Krebbel  <krebbel@linux.ibm.com>
    
            * config/s390/s390-builtin-types.def: Add void function type.
            * config/s390/s390-builtins.def: Use the function type for the
            tbeginc builtin.
    
    gcc/testsuite/ChangeLog:
    
    2018-06-05  Andreas Krebbel  <krebbel@linux.ibm.com>
    
            Backport from mainline
            2018-06-05  Andreas Krebbel  <krebbel@linux.ibm.com>
    
            * gcc.target/s390/htm-builtins-compile-4.c: New test.
    
    From-SVN: r261184

commit c05dbb7adef20525712d50e5f48055b48550e9d6
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue Jun 5 00:16:17 2018 +0000

    Daily bump.
    
    From-SVN: r261179

commit feb0d2548e947b4d8957d2d1b6f34caba094b6ef
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Mon Jun 4 23:34:39 2018 +0100

    PR libstdc++/85930 fix misaligned reference
    
            PR libstdc++/85930
            * include/bits/shared_ptr_base.h [!__cpp_rtti]: Include <typeinfo>
            unconditionally. Remove redundant declaration.
            [!__cpp_rtti] (_Sp_make_shared_tag::_S_ti): Align the static variable
            correctly.
    
    From-SVN: r261174

commit 2c95c0ff2e9c1d4b2868f69a93c873851e5b53a8
Author: Jason Merrill <jason@gcc.gnu.org>
Date:   Mon Jun 4 14:46:45 2018 -0400

    * g++.dg/warn/string1.C: Prune extra warning with -std=c++17.
    
    From-SVN: r261166

commit 1862985a6cb8d10096850da3f0db850ff6e5d594
Author: Joseph Myers <joseph@codesourcery.com>
Date:   Mon Jun 4 17:41:55 2018 +0100

    * es.po, fr.po: Update.
    
    From-SVN: r261161

commit 463f60d0c196764ddc2d5d843f5387fccbbc62f8
Author: Steven G. Kargl <kargl@gcc.gnu.org>
Date:   Mon Jun 4 16:41:31 2018 +0000

    re PR fortran/85981 (ICE in gfc_trans_string_copy, at fortran/trans-expr.c:6539)
    
    2018-06-04  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/85981
            * resolve.c (resolve_allocate_deallocate): Check errmsg is default
            character kind.
    
    2018-06-04  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/85981
            * gfortran.dg/allocate_alloc_opt_14.f90: New test.
            * gfortran.dg/allocate_alloc_opt_1.f90: Update error string.
            * gfortran.dg/allocate_stat_2.f90: Ditto.
            * gfortran.dg/deallocate_alloc_opt_1.f90: Ditto.
    
    From-SVN: r261160

commit 42bea197e1117efe25b807777133e59d3f7025b5
Author: Martin Sebor <msebor@redhat.com>
Date:   Mon Jun 4 15:35:49 2018 +0000

    PR c/85623 - strncmp() warns about attribute 'nonstring' incorrectly
    
    PR c/85623 - strncmp() warns about attribute 'nonstring' incorrectly
            in -Wstringop-overflow
    
    gcc/ChangeLog:
    
            PR c/85623
            * calls.c (maybe_warn_nonstring_arg): Use string length to set
            or ajust the presumed bound on an operation to avoid unnecessary
            warnings.
    
    gcc/testsuite/ChangeLog:
    
            PR c/85623
            * c-c++-common/attr-nonstring-3.c: Adjust.
            * c-c++-common/attr-nonstring-4.c: Adjust.
            * c-c++-common/attr-nonstring-6.c: New test.
    
    From-SVN: r261152

commit 433bb258901704bccf64e7ad23be837814804f08
Author: Richard Earnshaw <rearnsha@arm.com>
Date:   Mon Jun 4 08:46:04 2018 +0000

    [arm] PR target/86003 build failures with --with-cpu=xscale
    
    The XScale cpu configuration in GCC has always been somewhat
    non-conforming.  Although XScale isn't an architecture (it's simply an
    implementation of ARMv5te), we do by tradition emit a specific
    pre-define for it.  We achieve this effect by adding an additional
    feature bit to the xscale CPU definition that isn't part of the base
    architecture.
    
    When I restructured the options last year I overlooked this oddity and
    the result, of course, is that this configuration now fails to build
    as intended.
    
    What happens is that the driver (correctly) constructs an architecture
    for the xscale cpu name (as armv5te) and passes it in addition to the
    CPU name.  The backend code, on finding both a cpu and an architecture
    specifies attempts to correlate the two and finds a difference due to
    the additional feature bit and reports an inconsistency (fatally if
    -werror is specified).
    
    I think the best fix to this is to treat the xscale feature bit using
    the same mechanism that we use for other 'quirks' in CPU
    implementations and simply filter it out before comparing the
    capabilities.  It has the additional benefit that it's also the
    simplest fix.
    
            PR target/86003
            * config/arm/arm-cpus.in (ALL_QUIRKS): Add xscale feature to the list
            of bits to ignore when comparing architectures.
    
    From-SVN: r261141

commit 5b34304bc7f2ec7486bab4ea336c3b95e1337121
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Mon Jun 4 09:34:06 2018 +0200

    re PR c++/86025 (ICE with -Wduplicated-branches and OpenMP critical)
    
            PR c++/86025
            * tree.c (inchash::add_expr): Handle IDENTIFIER_NODE.
    
            * c-c++-common/gomp/pr86025.c: New test.
    
    From-SVN: r261138

commit edd0b05ec4a452dbfb737722c6b48c7107a06231
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Jun 4 00:16:37 2018 +0000

    Daily bump.
    
    From-SVN: r261135

commit 172be6569d2e5133217989bf2bbc2760634ed9ec
Author: Jason Merrill <jason@redhat.com>
Date:   Sun Jun 3 16:01:37 2018 -0400

    PR c++/85739 - ICE with pointer to member template parm.
    
            * cvt.c (perform_qualification_conversions): Use cp_fold_convert.
    
    From-SVN: r261132

commit 88157803cbf48725af8407916b7f00ffd3987a1b
Author: Jason Merrill <jason@redhat.com>
Date:   Sun Jun 3 16:01:28 2018 -0400

    PR c++/85761 - ICE with ill-formed use of const outer variable.
    
            * expr.c (mark_use): Handle location wrappers.
    
    From-SVN: r261131

commit 437504e932d5db900a592528df27786841a99eff
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Jun 3 00:16:18 2018 +0000

    Daily bump.
    
    From-SVN: r261119

commit 85f030fdf3935c08a13cbe41d7544bde0d50f883
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Sat Jun 2 11:12:13 2018 +0000

    decl.c (gnat_to_gnu_entity): If this is not a definition...
    
            * gcc-interface/decl.c (gnat_to_gnu_entity) <E_Constant>: If this is
            not a definition, retrieve the expression only if it's a compile-time
            known value if we are just annotating types.
    
            * gcc-interface/utils.c (convert): Do not try to upcast properly for a
            conversion between tagged types in type_annotate_only mode.
    
    From-SVN: r261114

commit 867d5389e56531177982e3793ec6ede445716729
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Sat Jun 2 11:07:39 2018 +0000

    backport: trans.c (Call_to_gnu): In the by-reference case...
    
            Backport from mainline
            2018-05-31  Eric Botcazou  <ebotcazou@adacore.com>
    
            * gcc-interface/trans.c (Call_to_gnu): In the by-reference case, if
            the type of the parameter is an unconstrained array type, convert
            to the type of the actual before the type of the formal only if the
            conversion was suppressed earlier.  Use in_param and gnu_actual_type
            local variables throughout, and uniform spelling for In Out or Out.
            Also remove dead code in the component-by-reference case.
    
    From-SVN: r261112

commit f5078878359896f6a7321ecb2d138adf9d0cad37
Author: Eric Botcazou <ebotcazou@gcc.gnu.org>
Date:   Sat Jun 2 10:58:08 2018 +0000

    Add missing directive
    
    From-SVN: r261110

commit 97ec095ad66476f22beec65037c60073eb74ba03
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Sat Jun 2 10:49:22 2018 +0000

    ada-tree.h (TYPE_PADDING_FOR_COMPONENT): New macro.
    
            * gcc-interface/ada-tree.h (TYPE_PADDING_FOR_COMPONENT): New macro.
            * gcc-interface/decl.c (gnat_to_gnu_component_type): Cache the padding
            type built for an aliased component with variable size.
    
    From-SVN: r261107

commit 363179bd4cf8c53b635c73a0b6464052186a75d9
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Sat Jun 2 09:46:55 2018 +0000

    backport: trans.c (Call_to_gnu): If this is a function call and there is no target...
    
            Backport from mainline
            2018-05-31  Eric Botcazou  <ebotcazou@adacore.com>
    
            * gcc-interface/trans.c (Call_to_gnu): If this is a function call and
            there is no target, also create a temporary for the return value for
            an allocator if the type is an unconstrained record type with default
            discriminant.
    
    From-SVN: r261103

commit 42686fb7aa9c0b91e7cb94a19af074435ac35f4b
Author: Steven G. Kargl <kargl@gcc.gnu.org>
Date:   Sat Jun 2 01:07:46 2018 +0000

    re PR fortran/85816 (nested spread fails with "Integer overflow in xmallocarray")
    
    2018-06-01  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/85816
            PR fortran/85975
            Backport from trunk
            * libgfortran.h: Remove the GFC_DTYPE_COPY_SETRANK macro.
            * m4/iforeach-s.m4: Directly set rank.
            * m4/iforeach.m4: Ditto.
            * m4/ifunction-s.m4: Ditto.
            * m4/ifunction-s2.m4: Ditto.
            * m4/ifunction.m4: Ditto.
            * m4/ifunction_logical.m4: Ditto.
            * m4/reshape.m4: Ditto.
            * m4/spread.m4: Ditto.
            * generated/all_l1.c: Regenerated.
            * generated/all_l16.c: Ditto.
            * generated/all_l2.c: Ditto.
            * generated/all_l4.c: Ditto.
            * generated/all_l8.c: Ditto.
            * generated/any_l1.c: Ditto.
            * generated/any_l16.c: Ditto.
            * generated/any_l2.c: Ditto.
            * generated/any_l4.c: Ditto.
            * generated/any_l8.c: Ditto.
            * generated/count_16_l.c: Ditto.
            * generated/count_1_l.c: Ditto.
            * generated/count_2_l.c: Ditto.
            * generated/count_4_l.c: Ditto.
            * generated/count_8_l.c: Ditto.
            * generated/iall_i1.c: Ditto.
            * generated/iall_i16.c: Ditto.
            * generated/iall_i2.c: Ditto.
            * generated/iall_i4.c: Ditto.
            * generated/iall_i8.c: Ditto.
            * generated/iany_i1.c: Ditto.
            * generated/iany_i16.c: Ditto.
            * generated/iany_i2.c: Ditto.
            * generated/iany_i4.c: Ditto.
            * generated/iany_i8.c: Ditto.
            * generated/iparity_i1.c: Ditto.
            * generated/iparity_i16.c: Ditto.
            * generated/iparity_i2.c: Ditto.
            * generated/iparity_i4.c: Ditto.
            * generated/iparity_i8.c: Ditto.
            * generated/maxloc0_16_i1.c: Ditto.
            * generated/maxloc0_16_i16.c: Ditto.
            * generated/maxloc0_16_i2.c: Ditto.
            * generated/maxloc0_16_i4.c: Ditto.
            * generated/maxloc0_16_i8.c: Ditto.
            * generated/maxloc0_16_r10.c: Ditto.
            * generated/maxloc0_16_r16.c: Ditto.
            * generated/maxloc0_16_r4.c: Ditto.
            * generated/maxloc0_16_r8.c: Ditto.
            * generated/maxloc0_16_s1.c: Ditto.
            * generated/maxloc0_16_s4.c: Ditto.
            * generated/maxloc0_4_i1.c: Ditto.
            * generated/maxloc0_4_i16.c: Ditto.
            * generated/maxloc0_4_i2.c: Ditto.
            * generated/maxloc0_4_i4.c: Ditto.
            * generated/maxloc0_4_i8.c: Ditto.
            * generated/maxloc0_4_r10.c: Ditto.
            * generated/maxloc0_4_r16.c: Ditto.
            * generated/maxloc0_4_r4.c: Ditto.
            * generated/maxloc0_4_r8.c: Ditto.
            * generated/maxloc0_4_s1.c: Ditto.
            * generated/maxloc0_4_s4.c: Ditto.
            * generated/maxloc0_8_i1.c: Ditto.
            * generated/maxloc0_8_i16.c: Ditto.
            * generated/maxloc0_8_i2.c: Ditto.
            * generated/maxloc0_8_i4.c: Ditto.
            * generated/maxloc0_8_i8.c: Ditto.
            * generated/maxloc0_8_r10.c: Ditto.
            * generated/maxloc0_8_r16.c: Ditto.
            * generated/maxloc0_8_r4.c: Ditto.
            * generated/maxloc0_8_r8.c: Ditto.
            * generated/maxloc0_8_s1.c: Ditto.
            * generated/maxloc0_8_s4.c: Ditto.
            * generated/maxloc1_16_i1.c: Ditto.
            * generated/maxloc1_16_i16.c: Ditto.
            * generated/maxloc1_16_i2.c: Ditto.
            * generated/maxloc1_16_i4.c: Ditto.
            * generated/maxloc1_16_i8.c: Ditto.
            * generated/maxloc1_16_r10.c: Ditto.
            * generated/maxloc1_16_r16.c: Ditto.
            * generated/maxloc1_16_r4.c: Ditto.
            * generated/maxloc1_16_r8.c: Ditto.
            * generated/maxloc1_16_s1.c: Ditto.
            * generated/maxloc1_16_s4.c: Ditto.
            * generated/maxloc1_4_i1.c: Ditto.
            * generated/maxloc1_4_i16.c: Ditto.
            * generated/maxloc1_4_i2.c: Ditto.
            * generated/maxloc1_4_i4.c: Ditto.
            * generated/maxloc1_4_i8.c: Ditto.
            * generated/maxloc1_4_r10.c: Ditto.
            * generated/maxloc1_4_r16.c: Ditto.
            * generated/maxloc1_4_r4.c: Ditto.
            * generated/maxloc1_4_r8.c: Ditto.
            * generated/maxloc1_4_s1.c: Ditto.
            * generated/maxloc1_4_s4.c: Ditto.
            * generated/maxloc1_8_i1.c: Ditto.
            * generated/maxloc1_8_i16.c: Ditto.
            * generated/maxloc1_8_i2.c: Ditto.
            * generated/maxloc1_8_i4.c: Ditto.
            * generated/maxloc1_8_i8.c: Ditto.
            * generated/maxloc1_8_r10.c: Ditto.
            * generated/maxloc1_8_r16.c: Ditto.
            * generated/maxloc1_8_r4.c: Ditto.
            * generated/maxloc1_8_r8.c: Ditto.
            * generated/maxloc1_8_s1.c: Ditto.
            * generated/maxloc1_8_s4.c: Ditto.
            * generated/maxval1_s1.c: Ditto.
            * generated/maxval1_s4.c: Ditto.
            * generated/maxval_i1.c: Ditto.
            * generated/maxval_i16.c: Ditto.
            * generated/maxval_i2.c: Ditto.
            * generated/maxval_i4.c: Ditto.
            * generated/maxval_i8.c: Ditto.
            * generated/maxval_r10.c: Ditto.
            * generated/maxval_r16.c: Ditto.
            * generated/maxval_r4.c: Ditto.
            * generated/maxval_r8.c: Ditto.
            * generated/minloc0_16_i1.c: Ditto.
            * generated/minloc0_16_i16.c: Ditto.
            * generated/minloc0_16_i2.c: Ditto.
            * generated/minloc0_16_i4.c: Ditto.
            * generated/minloc0_16_i8.c: Ditto.
            * generated/minloc0_16_r10.c: Ditto.
            * generated/minloc0_16_r16.c: Ditto.
            * generated/minloc0_16_r4.c: Ditto.
            * generated/minloc0_16_r8.c: Ditto.
            * generated/minloc0_16_s1.c: Ditto.
            * generated/minloc0_16_s4.c: Ditto.
            * generated/minloc0_4_i1.c: Ditto.
            * generated/minloc0_4_i16.c: Ditto.
            * generated/minloc0_4_i2.c: Ditto.
            * generated/minloc0_4_i4.c: Ditto.
            * generated/minloc0_4_i8.c: Ditto.
            * generated/minloc0_4_r10.c: Ditto.
            * generated/minloc0_4_r16.c: Ditto.
            * generated/minloc0_4_r4.c: Ditto.
            * generated/minloc0_4_r8.c: Ditto.
            * generated/minloc0_4_s1.c: Ditto.
            * generated/minloc0_4_s4.c: Ditto.
            * generated/minloc0_8_i1.c: Ditto.
            * generated/minloc0_8_i16.c: Ditto.
            * generated/minloc0_8_i2.c: Ditto.
            * generated/minloc0_8_i4.c: Ditto.
            * generated/minloc0_8_i8.c: Ditto.
            * generated/minloc0_8_r10.c: Ditto.
            * generated/minloc0_8_r16.c: Ditto.
            * generated/minloc0_8_r4.c: Ditto.
            * generated/minloc0_8_r8.c: Ditto.
            * generated/minloc0_8_s1.c: Ditto.
            * generated/minloc0_8_s4.c: Ditto.
            * generated/minloc1_16_i1.c: Ditto.
            * generated/minloc1_16_i16.c: Ditto.
            * generated/minloc1_16_i2.c: Ditto.
            * generated/minloc1_16_i4.c: Ditto.
            * generated/minloc1_16_i8.c: Ditto.
            * generated/minloc1_16_r10.c: Ditto.
            * generated/minloc1_16_r16.c: Ditto.
            * generated/minloc1_16_r4.c: Ditto.
            * generated/minloc1_16_r8.c: Ditto.
            * generated/minloc1_16_s1.c: Ditto.
            * generated/minloc1_16_s4.c: Ditto.
            * generated/minloc1_4_i1.c: Ditto.
            * generated/minloc1_4_i16.c: Ditto.
            * generated/minloc1_4_i2.c: Ditto.
            * generated/minloc1_4_i4.c: Ditto.
            * generated/minloc1_4_i8.c: Ditto.
            * generated/minloc1_4_r10.c: Ditto.
            * generated/minloc1_4_r16.c: Ditto.
            * generated/minloc1_4_r4.c: Ditto.
            * generated/minloc1_4_r8.c: Ditto.
            * generated/minloc1_4_s1.c: Ditto.
            * generated/minloc1_4_s4.c: Ditto.
            * generated/minloc1_8_i1.c: Ditto.
            * generated/minloc1_8_i16.c: Ditto.
            * generated/minloc1_8_i2.c: Ditto.
            * generated/minloc1_8_i4.c: Ditto.
            * generated/minloc1_8_i8.c: Ditto.
            * generated/minloc1_8_r10.c: Ditto.
            * generated/minloc1_8_r16.c: Ditto.
            * generated/minloc1_8_r4.c: Ditto.
            * generated/minloc1_8_r8.c: Ditto.
            * generated/minloc1_8_s1.c: Ditto.
            * generated/minloc1_8_s4.c: Ditto.
            * generated/minval1_s1.c: Ditto.
            * generated/minval1_s4.c: Ditto.
            * generated/minval_i1.c: Ditto.
            * generated/minval_i16.c: Ditto.
            * generated/minval_i2.c: Ditto.
            * generated/minval_i4.c: Ditto.
            * generated/minval_i8.c: Ditto.
            * generated/minval_r10.c: Ditto.
            * generated/minval_r16.c: Ditto.
            * generated/minval_r4.c: Ditto.
            * generated/minval_r8.c: Ditto.
            * generated/norm2_r10.c: Ditto.
            * generated/norm2_r16.c: Ditto.
            * generated/norm2_r4.c: Ditto.
            * generated/norm2_r8.c: Ditto.
            * generated/parity_l1.c: Ditto.
            * generated/parity_l16.c: Ditto.
            * generated/parity_l2.c: Ditto.
            * generated/parity_l4.c: Ditto.
            * generated/parity_l8.c: Ditto.
            * generated/product_c10.c: Ditto.
            * generated/product_c16.c: Ditto.
            * generated/product_c4.c: Ditto.
            * generated/product_c8.c: Ditto.
            * generated/product_i1.c: Ditto.
            * generated/product_i16.c: Ditto.
            * generated/product_i2.c: Ditto.
            * generated/product_i4.c: Ditto.
            * generated/product_i8.c: Ditto.
            * generated/product_r10.c: Ditto.
            * generated/product_r16.c: Ditto.
            * generated/product_r4.c: Ditto.
            * generated/product_r8.c: Ditto.
            * generated/reshape_c10.c: Ditto.
            * generated/reshape_c16.c: Ditto.
            * generated/reshape_c4.c: Ditto.
            * generated/reshape_c8.c: Ditto.
            * generated/reshape_i16.c: Ditto.
            * generated/reshape_i4.c: Ditto.
            * generated/reshape_i8.c: Ditto.
            * generated/reshape_r10.c: Ditto.
            * generated/reshape_r16.c: Ditto.
            * generated/reshape_r4.c: Ditto.
            * generated/reshape_r8.c: Ditto.
            * generated/spread_c10.c: Ditto.
            * generated/spread_c16.c: Ditto.
            * generated/spread_c4.c: Ditto.
            * generated/spread_c8.c: Ditto.
            * generated/spread_i1.c: Ditto.
            * generated/spread_i16.c: Ditto.
            * generated/spread_i2.c: Ditto.
            * generated/spread_i4.c: Ditto.
            * generated/spread_i8.c: Ditto.
            * generated/spread_r10.c: Ditto.
            * generated/spread_r16.c: Ditto.
            * generated/spread_r4.c: Ditto.
            * generated/spread_r8.c: Ditto.
            * generated/sum_c10.c: Ditto.
            * generated/sum_c16.c: Ditto.
            * generated/sum_c4.c: Ditto.
            * generated/sum_c8.c: Ditto.
            * generated/sum_i1.c: Ditto.
            * generated/sum_i16.c: Ditto.
            * generated/sum_i2.c: Ditto.
            * generated/sum_i4.c: Ditto.
            * generated/sum_i8.c: Ditto.
            * generated/sum_r10.c: Ditto.
            * generated/sum_r16.c: Ditto.
            * generated/sum_r4.c: Ditto.
            * generated/sum_r8.c: Ditto.
            * intrinsics/reshape_generic.c: Ditto.
            * intrinsics/spread_generic.c: Ditto.
    
    2018-06-01  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/85816
            PR fortran/85975
            Backport from trunk
            * gfortran.dg/pr85816.f90: New test.
            * gfortran.dg/pr85975.f90: New test.
    
    From-SVN: r261099

commit b3b6833347d00a1c0eac96a797d86917d0e99c3d
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Jun 2 00:16:25 2018 +0000

    Daily bump.
    
    From-SVN: r261095

commit bdc2c1ea35c16d3bbd3711430d8035dd54cfcf20
Author: Jason Merrill <jason@redhat.com>
Date:   Fri Jun 1 18:48:58 2018 -0400

    PR c++/85873 - constant initializer_list array not in .rodata.
    
            * call.c (convert_like_real): Treat the backing array for an
            initializer_list like a C99 compound literal.
    
    From-SVN: r261091

commit 884d4d1167b0014eb0cf21fda21cd5759a9a5bbb
Author: Bill Schmidt <wschmidt@linux.ibm.com>
Date:   Fri Jun 1 12:55:06 2018 +0000

    backport: [multiple changes]
    
    2018-06-01  Bill Schmidt  <wschmidt@linux.ibm.com>
    
            PR tree-optimization/85712
            Backport from mainline:
            2018-05-23  Bill Schmidt  <wschmidt@linux.ibm.com>
    
            PR tree-optimization/85712
            * gimple-ssa-strength-reduction.c (struct slsr_cand_d): Add
            first_interp field.
            (alloc_cand_and_find_basis): Initialize first_interp field.
            (slsr_process_mul): Modify first_interp field.
            (slsr_process_add): Likewise.
            (slsr_process_cast): Modify first_interp field for each new
            interpretation.
            (slsr_process_copy): Likewise.
            (dump_candidate): Dump first_interp field.
            (replace_mult_candidate): Process all interpretations, not just
            subsequent ones.
            (replace_rhs_if_not_dup): Likewise.
            (replace_one_candidate): Likewise.
    
            Backport from mainline:
            2018-05-25  Bill Schmidt  <wschmidt@linux.ibm.com>
    
            PR tree-optimization/85712
            * gimple-ssa-strength-reduction.c (replace_one_candidate): Skip if
            this candidate has already been replaced in-situ by a copy.
    
    From-SVN: r261065

commit 494ccd66000c2e6b57497e5228b4ba6f0058338f
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Fri Jun 1 08:36:35 2018 +0000

    c-ada-spec.c (dump_ada_declaration): Generate a forward declaration for a typedef independently of whether the...
    
            * c-ada-spec.c (dump_ada_declaration) <TYPE_DECL>: Generate a forward
            declaration for a typedef independently of whether the declaration of
            the subtype is generated.
    
    From-SVN: r261059

commit 07f1cb1b4269d4ea311b6579ca86ad5dfa0b9cec
Author: Jerry DeLisle <jvdelisle@gcc.gnu.org>
Date:   Fri Jun 1 02:14:53 2018 +0000

    backport: re PR fortran/85840 (Memory leak in write.c)
    
    2018-05-31  Jerry DeLisle  <jvdelisle@gcc.gnu.org>
    
            Backport from trunk.
            PR libgfortran/85840
            * io/write.c (write_real, write_real_g0, write_complex): Use
            separate local variables for the float string length.
    
    From-SVN: r261054

commit bbd5c6784e67ab4f274c50fda67ccc01ffd437a8
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Jun 1 00:16:14 2018 +0000

    Daily bump.
    
    From-SVN: r261049

commit 8cebf4323879b67f7a3376098355b6a3b96496ae
Author: Ian Lance Taylor <iant@golang.org>
Date:   Thu May 31 22:46:52 2018 +0000

    re PR go/85429 (Several gotools tests FAIL with Solaris as)
    
            PR go/85429
    
    Various backports from mainline:
    
        libgo: update to Go 1.10.2 release
    
        cmd/go: support more Solaris assembler syntaxes
    
        Patch by Rainer Orth.
    
        cmd/go: update to match recent changes to gc
    
        In https://golang.org/cl/111097 the gc version of cmd/go was updated
        to include some gofrontend-specific changes. The gofrontend code
        already has different versions of those changes; this CL makes the
        gofrontend match the upstream code.
    
        cmd/go, cmd/vet: make vet work with gccgo
    
        Backport https://golang.org/cl/113715 and https://golang.org/cl/113716:
    
        cmd/go: don't pass -compiler flag to vet
    
        Without this running go vet -compiler=gccgo causes vet to fail.
        The vet tool does need to know the compiler, but it is passed in
        vetConfig.Compiler.
    
        cmd/go, cmd/vet, go/internal/gccgoimport: make vet work with gccgo
    
        When using gccgo/GoLLVM, there is no package file for a standard
        library package. Since it is impossible for the go tool to rebuild the
        package, and since the package file exists only in the form of a .gox
        file, this seems like the best choice. Unfortunately it was confusing
        vet, which wanted to see a real file. This caused vet to report errors
        about missing package files for standard library packages. The
        gccgoimporter knows how to correctly handle this case. Fix this by
    
        1) telling vet which packages are standard;
        2) letting vet skip those packages;
        3) letting the gccgoimporter handle this case.
    
        As a separate required fix, gccgo/GoLLVM has no runtime/cgo package,
        so don't try to depend on it (as it happens, this fixes golang/go#25324).
    
        The result is that the cmd/go vet tests pass when using -compiler=gccgo.
    
        crypto/x509: specify path to AIX certificate file
    
        go/build, cmd/go: update to match recent changes to gc
    
        Several recent changes to the gc version of cmd/go improve the
        gofrontend support. These changes are partially copies of existing
        gofrontend differences, and partially new code. This CL makes the
        gofrontend match the upstream code.
    
        The changes included here come from:
            https://golang.org/cl/111575
            https://golang.org/cl/111595
            https://golang.org/cl/111635
            https://golang.org/cl/111636
    
        For the record, the following recent gc changes are based on code
        already present in the gofrontend repo:
            https://golang.org/cl/110915
            https://golang.org/cl/111615
    
        For the record, a gc change, partially based on earlier gofrontend
        work, also with new gc code, was already copied to gofrontend repo in
        CL 111099:
    
        https://golang.org/cl/111097
    
        This moves the generated list of standard library packages from
        cmd/go/internal/load to go/build.
    
    gotools/ChangeLog:
    
            Backport from mainline:
            2018-05-09  Ian Lance Taylor  <iant@golang.org>
            * Makefile.am (check-go-tool): Don't copy zstdpkglist.go.
            * Makefile.in: Rebuild.
    
    From-SVN: r261045

commit e90d301259fd9f8cd909e3f535c197d111f0c450
Author: Uros Bizjak <ubizjak@gmail.com>
Date:   Fri Jun 1 00:09:39 2018 +0200

    re PR target/85950 (Unsafe-math-optimizations regresses optimization using SSE4.1 roundss)
    
            PR target/85950
            * config/i386/i386.md (l<rounding_insn><MODEF:mode><SWI48:mode>2):
            Enable for TARGET_SSE4_1 and generate rounds{s,d} and cvtts{s,d}2si{,q}
            sequence.
            (sse4_1_round<mode>2): Use nonimmediate_operand
            for operand 1 predicate.
    
    testsuite/ChangeLog:
    
            PR target/85950
            * gcc.target/i386/pr85950.c: New test.
    
    From-SVN: r261043

commit 0444c9cc69ea1a7e6a55469a4d42dbc59024146a
Author: Uros Bizjak <ubizjak@gmail.com>
Date:   Fri Jun 1 00:04:22 2018 +0200

    re PR target/85591 (__builtin_cpu_is() is not detecting bdver2 with Model = 0x02)
    
            PR target/85591
            * config/i386/cpuinfo.c (get_amd_cpu): Return
            AMDFAM15H_BDVER2 for AMDFAM15H model 0x2.
    
    From-SVN: r261042

commit 67e177e0d9139683413453998a1b5264f4aa7784
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Thu May 31 21:51:50 2018 +0200

    re PR target/85984 (ICE in create_pseudo_cfg, at dwarf2cfi.c:2874)
    
            PR target/85984
            * bb-reorder.c (pass_partition_blocks::gate): Return false for
            functions with naked attribute.
    
            * gcc.target/i386/pr85984.c: New test.
    
    From-SVN: r261038

commit 20dc0bfaafebe776203ee59c854f667f7e8d469c
Author: H.J. Lu <hongjiu.lu@intel.com>
Date:   Thu May 31 15:02:36 2018 +0000

    x86: Re-enable partial_reg_dependency and movx for Haswell
    
    r254152 disabled partial_reg_dependency and movx for Haswell and newer
    Intel processors.  r258972 restored them for skylake-avx512.  For Haswell,
    movx improves performance.  But partial_reg_stall may be better than
    partial_reg_dependency in theory.  We will investigate performance impact
    of partial_reg_stall vs partial_reg_dependency on Haswell for GCC 9.  In
    the meantime, this patch restores both partial_reg_dependency and mox for
    Haswell in GCC 8.
    
    On Haswell, improvements for EEMBC benchmarks with
    
    -mtune-ctrl=movx,partial_reg_dependency -Ofast -march=haswell
    
    vs
    
    -Ofast -mtune=haswell
    
    are
    
    automotive
    =========
      aifftr01 (default) - goodperf: Runtime improvement of   2.6% (time).
      aiifft01 (default) - goodperf: Runtime improvement of   2.2% (time).
    
    networking
    =========
      ip_pktcheckb1m (default) - goodperf: Runtime improvement of   3.8% (time).
      ip_pktcheckb2m (default) - goodperf: Runtime improvement of   5.2% (time).
      ip_pktcheckb4m (default) - goodperf: Runtime improvement of   4.4% (time).
      ip_pktcheckb512k (default) - goodperf: Runtime improvement of   4.2% (time).
    
    telecom
    =========
      fft00data_1 (default) - goodperf: Runtime improvement of   8.4% (time).
      fft00data_2 (default) - goodperf: Runtime improvement of   8.6% (time).
      fft00data_3 (default) - goodperf: Runtime improvement of   9.0% (time).
    
            PR target/85829
            * config/i386/x86-tune.def: Re-enable partial_reg_dependency
            and movx for Haswell.
    
    From-SVN: r261026

commit 2e5c12c7088474fc6fa085ba0d87f2c5623ab5e3
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Thu May 31 15:07:22 2018 +0100

    PR libstdc++/85951 for make_signed/make_unsigned for character types
    
    Because the wide character types are neither signed integer types nor
    unsigned integer types they need to be transformed to an integral type
    of the correct size and the lowest rank (which is not necessarily the
    underlying type). Reuse the helpers for enumeration types to select the
    correct integer.
    
            PR libstdc++/85951
            * include/std/type_traits [_GLIBCXX_USE_C99_STDINT_TR1]: Do not define
            uint_least16_t and uint_least32_t.
            (__make_unsigned<wchar_t>): Define unconditionally.
            (__make_unsigned<char16_t>, __make_unsigned<char32_t>): Define.
            (__make_signed<wchar_t>, __make_signed<char16_t>)
            (__make_signed<char32_t>)): Define unconditionally.
            * testsuite/20_util/make_signed/requirements/typedefs-3.cc: Check
            wchar_t, char16_t and char32_t are transformed correctly.
            * testsuite/20_util/make_signed/requirements/typedefs_neg.cc: Adjust
            dg-error lineno.
            * testsuite/20_util/make_unsigned/requirements/typedefs-3.cc: Check
            wchar_t, char16_t and char32_t are transformed correctly.
            * testsuite/20_util/make_unsigned/requirements/typedefs_neg.cc: Adjust
            dg-error lineno.
    
    From-SVN: r261024

commit cbc5d926cae333cd65c1f1bfd5e55b1b19e55692
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Thu May 31 11:31:03 2018 +0000

    stack_usage1.adb: Replace -fstack-usage with -Wstack-usage.
    
            * gnat.dg/stack_usage1.adb: Replace -fstack-usage with -Wstack-usage.
            * gnat.dg/stack_usage1b.adb: Likewise.
            * gnat.dg/stack_usage1c.adb: Likewise.
            * gnat.dg/stack_usage3.adb: Likewise.
            * gnat.dg/stack_usage1_pkg.adb: Delete.
    
    From-SVN: r261022

commit 0521b269ee1e8ca185ad1b1e0fee473f5c6e12fc
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Thu May 31 11:21:28 2018 +0000

    store_merging_10.c: Turn dg-do compile into dg-do run.
    
            * gcc.dg/store_merging_10.c: Turn dg-do compile into dg-do run.
            * gcc.dg/store_merging_11.c: Likewise.
            * gcc.dg/store_merging_13.c: Likewise.
            * gcc.dg/store_merging_14.c: Likewise.
            * gcc.dg/store_merging_15.c: Likewise.
            * gcc.dg/store_merging_16.c: Likewise.  Remove local variable.
    
    From-SVN: r261020

commit 850fec373f9bc3eb9a698e288679750589dbcb47
Author: Matthias Klose <doko@ubuntu.com>
Date:   Thu May 31 09:58:32 2018 +0000

    re PR sanitizer/86012 (libsanitizer build failure on sparc64-linux-gnu)
    
    2018-05-31  Matthias Klose  <doko@ubuntu.com>
    
            PR sanitizer/86012
            * sanitizer_common/sanitizer_platform_limits_posix.cc: Define
            SIZEOF_STRUCT_USTAT for 32bit sparc.
    
    From-SVN: r260991

commit ba56b11ccfe767e7708ca70a62a55cee885fd2f4
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu May 31 00:16:41 2018 +0000

    Daily bump.
    
    From-SVN: r260987

commit d2c9bbd59c7451be066be418161d852b0797ae3c
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Wed May 30 09:36:49 2018 +0200

    backport: re PR c++/85952 (Bogus -Wunused-but-set-variable warning with array structured binding)
    
            Backported from mainline
            2018-05-29  Jakub Jelinek  <jakub@redhat.com>
    
            PR c++/85952
            * init.c (build_aggr_init): For structured binding initialized from
            array call mark_rvalue_use on the initializer.
    
            * g++.dg/warn/Wunused-var-33.C: New test.
    
    From-SVN: r260919

commit 9bc1dd279e4d22d89bade6a73dfbda5be2cb97aa
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Wed May 30 09:35:48 2018 +0200

    backport: re PR target/85756 (wrong code at -Os on x86-64-linux-gnu in 32-bit mode)
    
            Backported from mainline
            2018-05-14  Jakub Jelinek  <jakub@redhat.com>
    
            PR target/85756
            * config/i386/i386.md: Disallow non-commutative arithmetics in
            last twpeephole for mem {+,-,&,|,^}= x; mem != 0 after cmpelim
            optimization.  Use COMMUTATIVE_ARITH_P test rather than != MINUS
            in the peephole2 before it.
    
            * gcc.c-torture/execute/pr85756.c: New test.
    
    From-SVN: r260918

commit ed5a27fa3d718cc5729e5ea8124bf57bbab020a2
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Wed May 30 09:34:56 2018 +0200

    backport: re PR c/85696 (OpenMP with variably modified and default(none) won't compile)
    
            Backported from mainline
            2018-05-11  Jakub Jelinek  <jakub@redhat.com>
    
            PR c/85696
            * c-omp.c (c_omp_predetermined_sharing): Return
            OMP_CLAUSE_DEFAULT_SHARED for artificial vars with integral type.
    
            * cp-tree.h (cxx_omp_predetermined_sharing_1): New prototype.
            * cp-gimplify.c (cxx_omp_predetermined_sharing): New wrapper around
            cxx_omp_predetermined_sharing_1.  Rename old function to ...
            (cxx_omp_predetermined_sharing_1): ... this.
            * semantics.c (finish_omp_clauses): Use cxx_omp_predetermined_sharing_1
            instead of cxx_omp_predetermined_sharing.
    
            * c-c++-common/gomp/pr85696.c: New test.
    
    From-SVN: r260917

commit 69fbbaed6fa9126b7a19e11c526e9cf9b093ed52
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Wed May 30 09:20:58 2018 +0200

    backport: re PR c++/85662 ("error: non-constant condition for static assertion" from __builtin_offsetof in C++)
    
            Backported from mainline
            2018-05-10  Jakub Jelinek  <jakub@redhat.com>
    
            PR c++/85662
            * c-common.h (fold_offsetof_1): Removed.
            (fold_offsetof): Add TYPE argument defaulted to size_type_node and
            CTX argument defaulted to ERROR_MARK.
            * c-common.c (fold_offsetof_1): Renamed to ...
            (fold_offsetof): ... this.  Remove wrapper function.  Add TYPE
            argument, convert the pointer constant to TYPE and use size_binop
            with PLUS_EXPR instead of fold_build_pointer_plus if type is not
            a pointer type.  Adjust recursive calls.
    
            * c-fold.c (c_fully_fold_internal): Use fold_offsetof rather than
            fold_offsetof_1, pass TREE_TYPE (expr) as TYPE to it and drop the
            fold_convert_loc.
            * c-typeck.c (build_unary_op): Use fold_offsetof rather than
            fold_offsetof_1, pass argtype as TYPE to it and drop the
            fold_convert_loc.
    
            * cp-gimplify.c (cp_fold): Use fold_offsetof rather than
            fold_offsetof_1, pass TREE_TYPE (x) as TYPE to it and drop the
            fold_convert.
    
            * g++.dg/ext/offsetof2.C: New test.
    
    From-SVN: r260916

commit 83f83dda597a985924644bb260c16d62158fb529
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Wed May 30 09:19:24 2018 +0200

    backport: re PR target/85683 (GCC 8 stopped using RMW (Read Modify Write) instructions on x86[_64])
    
            Backported from mainline
            2018-05-08  Jakub Jelinek  <jakub@redhat.com>
    
            PR target/85683
            * config/i386/i386.md: Add peepholes for mem {+,-,&,|,^}= x; mem != 0
            after cmpelim optimization.
    
            * gcc.target/i386/pr49095.c: Add -masm=att to dg-options.  Add
            scan-assembler-times checking that except for [fh]*xor other functions
            don't use any load instructions.
    
    From-SVN: r260915

commit 64a5afb76caa2232e14be2052a56c5683fbe828e
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed May 30 00:16:34 2018 +0000

    Daily bump.
    
    From-SVN: r260911

commit b8b8e502e553ac4063c980bc500806c256360a9a
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue May 29 00:16:34 2018 +0000

    Daily bump.
    
    From-SVN: r260855

commit fed0325cf7beed5d15b2491b37420ceb4c6f2bbd
Author: H.J. Lu <hongjiu.lu@intel.com>
Date:   Mon May 28 13:44:18 2018 +0000

    Don't mark IFUNC resolver as only called directly
    
    Since IFUNC resolver is called indirectly, don't mark IFUNC resolver as
    only called directly.  This patch adds ifunc_resolver to cgraph_node,
    sets ifunc_resolver for ifunc attribute and checks ifunc_resolver
    instead of looking up ifunc attribute.
    
    gcc/
    
            Backport from mainline
            2018-05-26  H.J. Lu  <hongjiu.lu@intel.com>
    
            PR target/85900
            PR target/85345
            * varasm.c (assemble_alias): Lookup ifunc attribute on error.
    
            2018-05-24  H.J. Lu  <hongjiu.lu@intel.com>
    
            PR target/85900
            PR target/85345
            * varasm.c (assemble_alias): Check ifunc_resolver only on
            FUNCTION_DECL.
    
            2018-05-22  H.J. Lu  <hongjiu.lu@intel.com>
    
            PR target/85345
            * cgraph.h (cgraph_node::create): Set ifunc_resolver for ifunc
            attribute.
            (cgraph_node::create_alias): Likewise.
            (cgraph_node::get_availability): Check ifunc_resolver instead
            of looking up ifunc attribute.
            * cgraphunit.c (maybe_diag_incompatible_alias): Likewise.
            * varasm.c (do_assemble_alias): Likewise.
            (assemble_alias): Likewise.
            (default_binds_local_p_3): Likewise.
            * cgraph.h (cgraph_node): Add ifunc_resolver.
            (cgraph_node::only_called_directly_or_aliased_p): Return false
            for IFUNC resolver.
            * lto-cgraph.c (input_node): Set ifunc_resolver for ifunc
            attribute.
            * symtab.c (symtab_node::verify_base): Verify that ifunc_resolver
            is equivalent to lookup_attribute ("ifunc", DECL_ATTRIBUTES (decl)).
            (symtab_node::binds_to_current_def_p): Check ifunc_resolver
            instead of looking up ifunc attribute.
    
    gcc/testsuite/
    
            Backport from mainline
            2018-05-24  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>
    
            * gcc.target/i386/pr85345.c: Require ifunc support.
    
            2018-05-22  H.J. Lu  <hongjiu.lu@intel.com>
    
            PR target/85345
            * gcc.target/i386/pr85345.c: New test.
    
    From-SVN: r260849

commit 1c40e05b72604621eb33b5102d2055f87f6779eb
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon May 28 00:16:30 2018 +0000

    Daily bump.
    
    From-SVN: r260813

commit a6c937d0f4f0c9590d31940b13174e47cd728f56
Author: John David Anglin <danglin@gcc.gnu.org>
Date:   Sun May 27 21:54:27 2018 +0000

    pa-linux.h (NEED_INDICATE_EXEC_STACK): Define to 0.
    
            * config/pa/pa-linux.h (NEED_INDICATE_EXEC_STACK): Define to 0.
    
    From-SVN: r260810

commit 246581b81c99fc1cb8aede7912d04cc733675e57
Author: Jerry DeLisle <jvdelisle@gcc.gnu.org>
Date:   Sun May 27 03:22:11 2018 +0000

    backport: re PR libfortran/85906 (Conditional jump depends on uninitialized value in write_decimal / write_integer)
    
    2018-05-26  Jerry DeLisle  <jvdelisle@gcc.gnu.org>
    
            Backport from trunk.
            PR libgfortran/85906
            * io/write.c (write_integer): Initialise the fnode format to
            FMT_NONE, used for list directed write.
            (BUF_STACK_SZ): Bump default buffer size up to avoid allocs on
            small stuff.
    
    2018-05-26  Jerry DeLisle  <jvdelisle@gcc.gnu.org>
    
            Backport from trunk.
            PR libgfortran/85840
            * io/write.c (write_float_0): Use separate local variable for
            the float string length.
    
    From-SVN: r260802

commit 3879c2720a4cd5977081a031532914aade3ba5cc
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun May 27 00:16:22 2018 +0000

    Daily bump.
    
    From-SVN: r260800

commit 87ced96bf3e8c0e520b4eb1325b2af27c35dd1b5
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Sat May 26 08:56:41 2018 +0200

    re PR bootstrap/85921 (/gcc/c-family/c-warn.c fails to build)
    
            PR bootstrap/85921
            * c-warn.c (diagnose_mismatched_attributes): Remove unnecessary
            noinline variable to workaround broken kernel headers.
    
    From-SVN: r260791

commit 047c0175e6913bf346204b5e19a94e68b5fd7e44
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat May 26 00:16:44 2018 +0000

    Daily bump.
    
    From-SVN: r260788

commit ad0fbf0de14d64fdc90117f07dcc220be6535bf8
Author: Steven G. Kargl <kargl@gcc.gnu.org>
Date:   Fri May 25 22:06:57 2018 +0000

    re PR fortran/85786 (Segfault in associated intrinsic)
    
    2018-05-25  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/85786
            * trans-intrinsic.c (gfc_conv_associated): Add arg1se to the block.
    
    2018-05-25  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/85786
            * gfortran.dg/pr85786.f90: New test.
    
    From-SVN: r260784

commit 43de19a65774d48787292432eee4805b85576e26
Author: Steven G. Kargl <kargl@gcc.gnu.org>
Date:   Fri May 25 18:40:13 2018 +0000

    re PR fortran/85895 (ICE in gfc_conv_array_ref, at fortran/trans-array.c:3518)
    
    2018-05-25  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/85895
            Backport from trunk
            * resolve.c (resolve_sync): Resolve expression before checking for
            an error.
    
    2018-05-25  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/85895
            Backport from trunk
            * gfortran.dg/coarray_3.f90: Fix invalid testcase.
            * gfortran.dg/pr85895.f90: New test.
    
    From-SVN: r260769

commit 16d584b3b907da443470cf6e4b1b50f85d743a36
Author: Steven G. Kargl <kargl@gcc.gnu.org>
Date:   Fri May 25 18:28:51 2018 +0000

    re PR fortran/85780 (ICE in resolve_fl_procedure, at fortran/resolve.c:12504)
    
    2018-05-25  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/85780
            Backport from trunk
            * resolve.c (resolve_fl_procedure): Avoid NULL dereference.
    
    2018-05-25  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/85780
            Backport from trunk
            * gfortran.dg/pr85780.f90: New test.
    
    From-SVN: r260768

commit 6505ea023d7b7a5452adcc4f7b6fdfcc404707e3
Author: Steven G. Kargl <kargl@gcc.gnu.org>
Date:   Fri May 25 18:17:35 2018 +0000

    re PR fortran/85779 (ICE in gfc_typename, at fortran/misc.c:156)
    
    2018-05-25  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/85779
            Backport from trunk
            * decl.c (gfc_match_derived_decl): Fix NULL point dereference.
    
    2018-05-25  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/85779
            Backport from trunk
            * gfortran.dg/pr85779_1.f90: New test.
            * gfortran.dg/pr85779_2.f90: Ditto.
            * gfortran.dg/pr85779_3.f90: Ditto.
    
    From-SVN: r260767

commit d7a190759989a1aa3641052f0decff853a14c863
Author: Steven G. Kargl <kargl@gcc.gnu.org>
Date:   Fri May 25 18:04:42 2018 +0000

    re PR fortran/85543 (ICE in update_current_proc_array_outer_dependency, at fortran/resolve.c:3060)
    
    2018-05-25  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/85543
            Backport from trunk
            * resolve.c (update_current_proc_array_outer_dependency): Avoid NULL
            pointer dereference.
    
    
    2018-05-25  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/85543
            Backport from trunk
            * gfortran.dg/pr85543.f90: New test.
    
    From-SVN: r260766

commit 29f9d02571d8440eb6bd71061d0b36be05552462
Author: Richard Biener <rguenther@suse.de>
Date:   Fri May 25 09:43:07 2018 +0000

    re PR c++/85912 (-fdump-lang-raw ICE on valid code)
    
    2018-05-25  Richard Biener  <rguenther@suse.de>
    
            PR c++/85912
            * tree-dump.c (dequeue_and_dump): Remove access to removed
            operand 2 of a SWITCH_EXPR.
    
    From-SVN: r260745

commit e9c5600569a7939bf90958c9baddbf5cc554a2f1
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri May 25 00:16:25 2018 +0000

    Daily bump.
    
    From-SVN: r260702

commit 8c75c739b0ce91d90b9eacee3a670488a2e78e2f
Author: Uros Bizjak <uros@gcc.gnu.org>
Date:   Thu May 24 23:32:02 2018 +0200

    * ChangeLog: Fix last entry.
    
    From-SVN: r260694

commit 21b90ffaf83b29b5acd15a1bf4851c9b9a580924
Author: Uros Bizjak <ubizjak@gmail.com>
Date:   Thu May 24 23:27:24 2018 +0200

    sse.md (cvtusi2<ssescalarmodesuffix>64<round_name>): Add {q} suffix to insn mnemonic.
    
            * config/i386/sse.md (cvtusi2<ssescalarmodesuffix>64<round_name>):
            Add {q} suffix to insn mnemonic.
    
    testsuite/Changelog:
    
            * gcc.target/i386/avx512f-vcvtusi2sd64-1.c: Update scan string.
            * gcc.target/i386/avx512f-vcvtusi2ss64-1.c: Ditto.
    
    From-SVN: r260693

commit 58ffa4a5a60416d8746efee6faca3c92e6717a3a
Author: Uros Bizjak <ubizjak@gmail.com>
Date:   Thu May 24 23:25:49 2018 +0200

    re PR target/85903 (FAIL: gcc.target/i386/avx512dq-vcvtuqq2pd-2.c)
    
            PR target/85903
            * config/i386/sse.md (movdi_to_sse): Do not generate pseudo
            when memory input operand is handled.
    
    From-SVN: r260692

commit 03fee6cef255dec3b50f97f99eb3e68f452a1517
Author: H.J. Lu <hongjiu.lu@intel.com>
Date:   Thu May 24 20:07:25 2018 +0000

    libsanitizer: Use pre-computed size of struct ustat for Linux
    
    Cherry-pick compiler-rt revision 333213:
    
    <sys/ustat.h> has been removed from glibc 2.28 by:
    
    commit cf2478d53ad7071e84c724a986b56fe17f4f4ca7
    Author: Adhemerval Zanella <adhemerval.zanella@linaro.org>
    Date:   Sun Mar 18 11:28:59 2018 +0800
    
        Deprecate ustat syscall interface
    
    This patch uses pre-computed size of struct ustat for Linux.
    
            PR sanitizer/85835
            * sanitizer_common/sanitizer_platform_limits_posix.cc: Don't
            include <sys/ustat.h> for Linux.
            (SIZEOF_STRUCT_USTAT): New.
            (struct_ustat_sz): Use SIZEOF_STRUCT_USTAT for Linux.
    
    From-SVN: r260687

commit 83f47a1d6a458c4336f0a736cb243235e6ed9185
Author: Jason Merrill <jason@redhat.com>
Date:   Thu May 24 16:03:56 2018 -0400

    PR c++/85842 - -Wreturn-type, constexpr if and generic lambda.
    
            * pt.c (tsubst_lambda_expr): Copy current_function_returns_* to
            generic lambda.
    
    From-SVN: r260686

commit a1dd0b9b02d5d513abf2f0be7035277978080458
Author: Jason Merrill <jason@redhat.com>
Date:   Thu May 24 10:29:05 2018 -0400

    PR c++/85864 - literal template and default template arg.
    
            * pt.c (instantiation_dependent_r): Handle NONTYPE_ARGUMENT_PACK.
    
    From-SVN: r260674

commit 76b312c07f761f92ffb82ef6b2973f2cc0b659f0
Author: Jason Merrill <jason@redhat.com>
Date:   Thu May 24 10:28:59 2018 -0400

    PR c++/81420 - not extending temporary lifetime.
    
            * call.c (extend_ref_init_temps_1): Handle ARRAY_REF.
            * class.c (build_base_path): Avoid redundant move of an rvalue.
    
    From-SVN: r260673

commit 62e076aa820d5a15448f16af700deebb9aacb92b
Author: Bin Cheng <bin.cheng@arm.com>
Date:   Thu May 24 09:49:43 2018 +0000

    backport: re PR tree-optimization/85793 ([AARCH64] ICE in verify_gimple during GIMPLE pass vect.)
    
            Backport from mainline
            2018-05-17  Bin Cheng  <bin.cheng@arm.com>
                Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/85793
            * tree-vect-stmts.c (vectorizable_load): Handle 1 element-wise load
            for VMAT_ELEMENTWISE.
    
            gcc/testsuite
            2018-05-17  Bin Cheng  <bin.cheng@arm.com>
    
            PR tree-optimization/85793
            * gcc.dg/vect/pr85793.c: New test.
    
    From-SVN: r260636

commit 4dda7118fbab300f1bea091a7badf4c3d5d96c73
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu May 24 00:16:40 2018 +0000

    Daily bump.
    
    From-SVN: r260632

commit 66604d4af701d928a024a46ebb7754c9e99e61a4
Author: Richard Biener <rguenther@suse.de>
Date:   Wed May 23 09:07:30 2018 +0000

    re PR middle-end/85874 (gcc points to wrong location when displaying warning for strict overflow warning)
    
    2018-05-23  Richard Biener  <rguenther@suse.de>
    
            PR middle-end/85874
            * tree-data-ref.c (create_runtime_alias_checks): Defer
            and ignore overflow warnings.
    
            * gcc.dg/Wstrict-overflow-27.c: New testcase.
    
    From-SVN: r260570

commit 85e37d80973d7320db2f0dcc13019f7bbb355323
Author: Martin Liska <mliska@suse.cz>
Date:   Wed May 23 10:27:14 2018 +0200

    Subject: Backport r260566
    
    2018-05-23  Martin Liska  <mliska@suse.cz>
    
            Backport from mainline
            2018-05-23  Yury Gribov  <tetra2005@gmail.com>
    
            PR tree-optimization/85822
            * tree-vrp.c (is_masked_range_test): Fix handling of negative
            constants.
    2018-05-23  Martin Liska  <mliska@suse.cz>
    
            Backport from mainline
            2018-05-23  Yury Gribov  <tetra2005@gmail.com>
    
            PR tree-optimization/85822
            * c-c++-common/pr85822.c: New test.
    
    From-SVN: r260568

commit 620f045aed1961e493900f5e0d967aa505bf64ff
Author: Martin Liska <mliska@suse.cz>
Date:   Wed May 23 10:26:10 2018 +0200

    Subject: Backport r260154
    
    2018-05-23  Martin Liska  <mliska@suse.cz>
    
            Backport from mainline
            2018-05-11  Martin Liska  <mliska@suse.cz>
    
            PR sanitizer/85556
            * doc/extend.texi: Document LLVM style format for no_sanitize
            attribute.
    2018-05-23  Martin Liska  <mliska@suse.cz>
    
            Backport from mainline
            2018-05-11  Martin Liska  <mliska@suse.cz>
    
            PR sanitizer/85556
            * c-attribs.c (handle_no_sanitize_attribute): Iterate all
            TREE_LIST values.
    2018-05-23  Martin Liska  <mliska@suse.cz>
    
            Backport from mainline
            2018-05-11  Martin Liska  <mliska@suse.cz>
    
            PR sanitizer/85556
            * c-c++-common/ubsan/attrib-6.c: New test.
    
    From-SVN: r260567

commit f793f22f0178f4df409b1b8973f12208a4b2b686
Author: Jason Merrill <jason@redhat.com>
Date:   Tue May 22 23:53:14 2018 -0400

    PR c++/85866 - error with .* in default template arg.
    
            * pt.c (tsubst_copy_and_build): Handle partial instantiation.
    
    From-SVN: r260564

commit 215bfae4d1b503f1838a54d43e501aa2de443e5d
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed May 23 00:16:15 2018 +0000

    Daily bump.
    
    From-SVN: r260560

commit e2c132a8bf1a97fc6341c0cf2d32e0dcb7a97785
Author: Martin Sebor <msebor@redhat.com>
Date:   Tue May 22 19:46:44 2018 +0000

    PR middle-end/85643 - attribute nonstring fails to squash -Wstringop-truncation warning
    
    gcc/ChangeLog:
    
            PR middle-end/85643
            * calls.c (get_attr_nonstring_decl): Handle MEM_REF.
    
    gcc/testsuite/ChangeLog:
    
            PR middle-end/85643
            * c-c++-common/attr-nonstring-7.c: New test.
    
    From-SVN: r260553

commit 394f3c2259cf0c9bb62b218456b5c0b4d5ce61ce
Author: Richard Sandiford <richard.sandiford@linaro.org>
Date:   Tue May 22 17:32:37 2018 +0000

    Fix tree-ssa-strlen handling of partial clobbers (PR85814)
    
    Backport trunk fix (r260488).
    
    2018-05-22  Richard Sandiford  <richard.sandiford@linaro.org>
    
    gcc/
            PR tree-optimization/85814
            * tree-ssa-strlen.c (get_stridx_plus_constant): Cope with
            a null return from get_strinfo when unsharing the next
            strinfo in the chain.
    
    gcc/testsuite/
            PR tree-optimization/85814
            * gcc.dg/torture/pr85814.c: New test.
    
    From-SVN: r260540

commit 703f049e2493fd012abdbddad4d7e48b71f5ed9f
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue May 22 00:16:37 2018 +0000

    Daily bump.
    
    From-SVN: r260496

commit 332323c95bab8fea4ee41e4132f597917496e949
Author: Joseph Myers <joseph@codesourcery.com>
Date:   Tue May 22 00:40:20 2018 +0100

    * es.po: Update.
    
    From-SVN: r260493

commit 8128dae8487840697d0c5d1101a48153d2321c64
Author: François Dumont <fdumont@gcc.gnu.org>
Date:   Mon May 21 19:48:52 2018 +0000

    2018-05-21  François Dumont  <fdumont@gcc.gnu.org>
    
            * include/debug/map.h
            (map(map&&, const_allocator_type&)): Add noexcept qualitication.
            * include/debug/multimap.h
            (multimap(multimap&&, const_allocator_type&)): Likewise.
            * include/debug/set.h
            (set(set&&, const_allocator_type&)): Likewise.
            * include/debug/multiset.h
            (multiset(multiset&&, const_allocator_type&)): Likewise.
    
    From-SVN: r260483

commit 597c06196238a0e25ed9c9589457e3eeb0224634
Author: Pat Haugen <pthaugen@us.ibm.com>
Date:   Mon May 21 16:41:09 2018 +0000

    re PR tree-optimization/85698 (CPU2017 525.x264_r fails starting with r257581)
    
            PR target/85698
            * gcc.target/powerpc/vec-setup-be-long.c: Remove XFAIL.
    
    From-SVN: r260477

commit 9a044f00ed5a58d7ad3fdec4332157ff1085971b
Author: Pat Haugen <pthaugen@us.ibm.com>
Date:   Mon May 21 16:23:20 2018 +0000

    re PR tree-optimization/85698 (CPU2017 525.x264_r fails starting with r257581)
    
            PR target/85698
            * config/rs6000/rs6000.c (rs6000_output_move_128bit): Check dest operand.
    
            * gcc.target/powerpc/pr85698.c: New test.
    
    From-SVN: r260475

commit dcab1d136fa3d3edd299ace22a6f1b6099648ed7
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Mon May 21 13:29:33 2018 +0100

    PR libstdc++/85818 make new test require Filesystem support
    
            PR libstdc++/85818
            * testsuite/experimental/filesystem/path/preferred_separator.cc: Add
            dg-require-filesystem-ts.
    
    From-SVN: r260440

commit 0d6e7d4e2d3c8d8a5d5d464507e8152739a77baf
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon May 21 00:16:40 2018 +0000

    Daily bump.
    
    From-SVN: r260430

commit 81f4f4d71b28daa545445af6ff5b7b06656fb887
Author: Paul Thomas <pault@gcc.gnu.org>
Date:   Sun May 20 11:29:17 2018 +0000

    Remove accidental doubling up of associate_38.f90
    
    From-SVN: r260420

commit 9d7cd37cec48d837e9c179f07d8bffec1b2ae48e
Author: Paul Thomas <pault@gcc.gnu.org>
Date:   Sun May 20 11:12:53 2018 +0000

    re PR fortran/80657 (Loop in character function declaration)
    
    2018-05-20  Paul Thomas  <pault@gcc.gnu.org>
    
            PR fortran/80657
            Backport from trunk
            * resolve.c (flag_fn_result_spec): Use the 'sym' argument to
            test for self refs to the function result in the character len
            expression. If a self reference is found, emit an error and
            return true.
            (resolve_fntype): Use the function symbol in the calls to the
            above.
    
    2018-05-20  Paul Thomas  <pault@gcc.gnu.org>
    
            PR fortran/80657
            Backport from trunk
            * gfortran.dg/char_result_18.f90: New test.
    
    From-SVN: r260419

commit 9b2b476699589e628a4d8f56222f151ffac9fd19
Author: Paul Thomas <pault@gcc.gnu.org>
Date:   Sun May 20 11:07:44 2018 +0000

    re PR fortran/49636 ([F03] ASSOCIATE construct confused with slightly complicated case)
    
    2018-05-20  Paul Thomas  <pault@gcc.gnu.org>
    
            PR fortran/49636
            Backport from trunk
            * trans-array.c (gfc_get_array_span): Renamed from
            'get_array_span'.
            (gfc_conv_expr_descriptor): Change references to above.
            * trans-array.h : Add prototype for 'gfc_get_array_span'.
            * trans-stmt.c (trans_associate_var): If the associate name is
            a subref array pointer, use gfc_get_array_span for the span.
    
    2018-05-20  Paul Thomas  <pault@gcc.gnu.org>
    
            PR fortran/49636
            Backport from trunk
            * gfortran.dg/associate_38.f90: New test.
    
    From-SVN: r260418

commit 3ddfcb2398eafe06e9cd7d7a2f9703b58a6beedb
Author: Paul Thomas <pault@gcc.gnu.org>
Date:   Sun May 20 11:04:14 2018 +0000

    re PR fortran/82275 (gfortran rejects valid & accepts invalid reference to dimension-remapped type SELECT TYPE selector)
    
    2018-05-20  Paul Thomas  <pault@gcc.gnu.org>
    
            PR fortran/82275
            Backport from trunk
            * match.c (gfc_match_type_spec): Go through the array ref and
            decrement 'rank' for every dimension that is an element.
    
    2018-05-20  Paul Thomas  <pault@gcc.gnu.org>
    
            PR fortran/82275
            Backport from trunk
            * gfortran.dg/select_type_42.f90: New test.
    
    From-SVN: r260417

commit b0928e815e4283ee08b78c4e2fc03b9c52ee058e
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun May 20 00:16:32 2018 +0000

    Daily bump.
    
    From-SVN: r260407

commit 65e3cafd0bbc592f74a6516736e7b8093b359d34
Author: Paul Thomas <pault@gcc.gnu.org>
Date:   Sat May 19 11:32:30 2018 +0000

    re PR fortran/82923 (Automatic allocation of deferred length character using function result)
    
    2018-05-19  Paul Thomas  <pault@gcc.gnu.org>
    
            PR fortran/82923
            PR fortran/66694
            PR fortran/82617
            * trans-array.c (gfc_alloc_allocatable_for_assignment): Set the
            charlen backend_decl of the rhs expr to ss->info->string_length
            so that the value in the current scope is used.
    
    2018-05-19  Paul Thomas  <pault@gcc.gnu.org>
    
            PR fortran/82923
            * gfortran.dg/allocate_assumed_charlen_4.f90: New test. Note
            that the patch fixes PR66694 & PR82617, although the testcases
            are not explicitly included.
    
    From-SVN: r260395

commit 11ecc6a3c74f2cec8c3b5b4ff255fccd021b615f
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat May 19 00:16:43 2018 +0000

    Daily bump.
    
    From-SVN: r260387

commit 6f365ed5fd8cb0d6e782a130abc3863f503d0491
Author: Cesar Philippidis <cesar@codesourcery.com>
Date:   Fri May 18 08:46:56 2018 -0700

    re PR c++/85782 (acc loops with continue statements ICE in c++)
    
    PR c++/85782
    
            Backport from mainline
            2018-05-18  Cesar Philippidis  <cesar@codesourcery.com>
    
            PR c++/85782
    
            gcc/cp/
            * cp-gimplify.c (cp_genericize_r): Call genericize_omp_for_stmt for
            OACC_LOOPs.
    
            gcc/testsuite/
            * c-c++-common/goacc/pr85782.c: New test.
    
            libgomp/
            * testsuite/libgomp.oacc-c-c++-common/pr85782.c: New test.
    
    From-SVN: r260370

commit 8600ce0bb793d0e0a36c771c322bddf0226328e8
Author: Toon Moene <toon@moene.org>
Date:   Fri May 18 09:10:02 2018 +0000

    invoke.texi: Move -floop-unroll-and-jam documentation directly after that of -floop-interchange.
    
    2018-05-18  Toon Moene  <toon@moene.org>
    
            * doc/invoke.texi: Move -floop-unroll-and-jam documentation
            directly after that of -floop-interchange. Indicate that both
            options are enabled by default when specifying -O3.
    
    From-SVN: r260353

commit c33b9cf5fc8101d0dedfa2990263c32342c277f3
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri May 18 00:16:32 2018 +0000

    Daily bump.
    
    From-SVN: r260346

commit 991069370955d85d3cc6d614842a5f4c5a74343c
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Thu May 17 17:10:26 2018 +0100

    PR libstdc++/85818 ensure path::preferred_separator is defined
    
    Because path.cc is compiled with -std=gnu++17 the static constexpr
    data member is implicitly 'inline' and so no definition gets emitted
    unless it gets used in that translation unit. Other translation units
    built as C++11 or C++14 still require a namespace-scope definition of
    the variable, so mark the definition as used.
    
            PR libstdc++/85818
            * src/filesystem/path.cc (path::preferred_separator): Add used
            attribute.
            * testsuite/experimental/filesystem/path/preferred_separator.cc: New.
    
    From-SVN: r260328

commit c3a4aad8606fbb06477e29f07bda4d072c6dd17a
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Thu May 17 17:10:20 2018 +0100

    PR libstdc++/85812 fix memory leak in std::make_exception_ptr
    
            PR libstdc++/85812
            * libsupc++/cxxabi_init_exception.h (__cxa_free_exception): Declare.
            * libsupc++/exception_ptr.h (make_exception_ptr) [__cpp_exceptions]:
            Refactor to separate non-throwing and throwing implementations.
            [__cpp_rtti && !_GLIBCXX_HAVE_CDTOR_CALLABI]: Deallocate the memory
            if constructing the object throws.
    
    From-SVN: r260327

commit 85cbb701daed1442e28180a0b73546e11f96187a
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu May 17 00:16:13 2018 +0000

    Daily bump.
    
    From-SVN: r260303

commit 0fa3a975d960b1dbd5c352558d25869c837ab38f
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed May 16 00:16:20 2018 +0000

    Daily bump.
    
    From-SVN: r260276

commit 3d7f98ab2e39ad03e6024935fd5cb9a62937a0a9
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Tue May 15 14:51:03 2018 +0100

    PR libstdc++/83891 fix path::is_absolute() for non-POSIX targets
    
    The correct definition seems to be has_root_directory() for all systems
    we care about.
    
            PR libstdc++/83891
            * include/bits/fs_path.h (path::is_absolute()): Use same definition
            for all operating systems.
            * include/experimental/bits/fs_path.h (path::is_absolute()): Likewise.
            * testsuite/27_io/filesystem/path/query/is_absolute.cc: New.
            * testsuite/27_io/filesystem/path/query/is_relative.cc: Fix comment.
            * testsuite/experimental/filesystem/path/query/is_absolute.cc: New.
    
    From-SVN: r260260

commit 0ae0457f843249f6750512e1dc762e53968dde0c
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Tue May 15 13:57:34 2018 +0100

    Remove unused headers from tests
    
            * testsuite/27_io/filesystem/path/decompose/extension.cc: Remove
            unused <vector> header.
            * testsuite/27_io/filesystem/path/query/empty.cc: Likewise.
            * testsuite/27_io/filesystem/path/query/has_extension.cc: Likewise.
            * testsuite/27_io/filesystem/path/query/has_filename.cc: Likewise.
            * testsuite/27_io/filesystem/path/query/has_parent_path.cc: Likewise.
            * testsuite/27_io/filesystem/path/query/has_relative_path.cc:
            Likewise.
            * testsuite/27_io/filesystem/path/query/has_root_directory.cc:
            Likewise.
            * testsuite/27_io/filesystem/path/query/has_root_name.cc: Likewise.
            * testsuite/27_io/filesystem/path/query/has_root_path.cc: Likewise.
            * testsuite/27_io/filesystem/path/query/has_stem.cc: Likewise.
            * testsuite/27_io/filesystem/path/query/is_relative.cc: Likewise.
            * testsuite/experimental/filesystem/path/decompose/extension.cc:
            Likewise.
            * testsuite/experimental/filesystem/path/query/empty.cc: Likewise.
            * testsuite/experimental/filesystem/path/query/has_extension.cc:
            Likewise.
            * testsuite/experimental/filesystem/path/query/has_filename.cc:
            Likewise.
            * testsuite/experimental/filesystem/path/query/has_parent_path.cc:
            Likewise.
            * testsuite/experimental/filesystem/path/query/has_relative_path.cc:
            Likewise.
            * testsuite/experimental/filesystem/path/query/has_root_directory.cc:
            Likewise.
            * testsuite/experimental/filesystem/path/query/has_root_name.cc:
            Likewise.
            * testsuite/experimental/filesystem/path/query/has_root_path.cc:
            Likewise.
            * testsuite/experimental/filesystem/path/query/has_stem.cc: Likewise.
            * testsuite/experimental/filesystem/path/query/is_relative.cc:
            Likewise.
    
    From-SVN: r260258

commit 1a68152edae3be4c4e440c0c19b67cc2c869c90d
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Tue May 15 13:57:25 2018 +0100

    PR libstdc++/84159 fix appending strings to paths
    
    The path::operator/=(const Source&) and path::append overloads were
    still following the semantics of the Filesystem TS not C++17. Only
    the path::operator/=(const path&) overload was correct.
    
    This change adds more tests for path::operator/=(const path&) and adds
    new tests to verify that the other append operations have equivalent
    behaviour.
    
            PR libstdc++/84159
            * include/bits/fs_path.h (path::operator/=, path::append): Construct
            temporary path before calling _M_append.
            (path::_M_append): Change parameter to path and implement C++17
            semantics.
            * testsuite/27_io/filesystem/path/append/path.cc: Add helper function
            and more examples from the standard.
            * testsuite/27_io/filesystem/path/append/source.cc: New.
            * testsuite/27_io/filesystem/path/decompose/filename.cc: Add comment.
            * testsuite/27_io/filesystem/path/nonmember/append.cc: New.
    
    From-SVN: r260257

commit f9e0c631f40e06f53da81e270abd54abd6afaa23
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue May 15 00:16:21 2018 +0000

    Daily bump.
    
    From-SVN: r260247

commit 7c6ac50126611de3ef7ac6c8c5646185dcea9f4b
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Mon May 14 22:51:51 2018 +0100

    PR libstdc++/67554 Do not pass null pointers to memcpy
    
            PR libstdc++/67554
            * include/bits/valarray_array.h (_Array_copy_ctor<_Tp, true>)
            (_Array_copier<_Tp, true>): Do not pass null pointers to memcpy.
    
    From-SVN: r260241

commit 349e28d7a5df80f3db66a59c8aa8dcf6140e5900
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Mon May 14 22:51:46 2018 +0100

    PR libstdc++/82966 fix swapping of node handles
    
            PR libstdc++/82966
            * include/bits/node_handle.h (_Node_handle_common::_M_swap): Use value
            instead of type.
            * testsuite/23_containers/set/modifiers/node_swap.cc: New.
    
    From-SVN: r260240

commit af6e8a22371a3759d53511207b5d2eb688026e8d
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon May 14 00:16:26 2018 +0000

    Daily bump.
    
    From-SVN: r260220

commit 491f0d877136f4559695b68978e7347598d7c927
Author: Paul Thomas <pault@gcc.gnu.org>
Date:   Sun May 13 18:07:54 2018 +0000

    re PR fortran/85742 (sizeof allocatable arrays returning wrong value)
    
    2018-05-13  Paul Thomas  <pault@gcc.gnu.org>
    
            PR fortran/85742
            * trans-types.c (gfc_get_dtype_rank_type): Reorder evaluation
            of 'size'. If the element type is a pointer use the size of the
            TREE_TYPE of the type, unless it is VOID_TYPE. In this latter
            case, set the size to zero.
    
    2018-05-13  Paul Thomas  <pault@gcc.gnu.org>
    
            PR fortran/85742
            * gfortran.dg/assumed_type_9.f90 : New test.
    
    From-SVN: r260215

commit 6cccad3515a5e37c48262be119ef039512d7ed9c
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun May 13 00:16:46 2018 +0000

    Daily bump.
    
    From-SVN: r260204

commit 02e4b9e1e820e96380632bcf99d1cc380e19bd95
Author: Steven G. Kargl <kargl@gcc.gnu.org>
Date:   Sat May 12 16:39:57 2018 +0000

    re PR fortran/85542 (ICE in check_inquiry, at fortran/expr.c:2426)
    
    2018-05-12  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/85542
            Backport from trunk
            * expr.c (check_inquiry): Avoid NULL pointer dereference.
    
    2018-05-11  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/85542
            Backport from trunk
            * gfortran.dg/pr85542.f90: New test.
    
    From-SVN: r260196

commit c5d354fe516697b43709ae9961ba8d82a1fcb799
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat May 12 00:16:25 2018 +0000

    Daily bump.
    
    From-SVN: r260193

commit e41047ce5cf4f18a7cec424dddd326cd84951f2c
Author: Steven G. Kargl <kargl@gcc.gnu.org>
Date:   Fri May 11 17:32:28 2018 +0000

    re PR fortran/70870 (Segmentation violation in gfc_assign_data_value)
    
    2018-05-11  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/70870
            Backport from trunk
            * data.c (gfc_assign_data_value): Check that a data object does
            not also have default initialization.
    
    2018-05-11  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/70870
            Backport from trunk
            * gfortran.dg/pr70870_1.f90: New test.
    
    From-SVN: r260171

commit 3eee1299201cf542fe25524eed61041ecda983ca
Author: Steven G. Kargl <kargl@gcc.gnu.org>
Date:   Fri May 11 17:30:57 2018 +0000

    re PR fortran/85521 (ICE in gfc_resolve_character_array_constructor, at fortran/array.c:2049)
    
    2018-05-11  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/85521
            Backport from trunk
            * array.c (gfc_resolve_character_array_constructor): Substrings
            with upper bound smaller than lower bound are zero length strings.
    
    2018-05-11  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/85521
            Backport from trunk
            * gfortran.dg/pr85521_1.f90: New test.
            * gfortran.dg/pr85521_2.f90: New test.
    
    From-SVN: r260170

commit c46d6cbbdb7dea7d89b5548e53ab961b2d5476f9
Author: Steven G. Kargl <kargl@gcc.gnu.org>
Date:   Fri May 11 17:29:14 2018 +0000

    re PR fortran/85687 (ICE in gfc_sym_identifier, at fortran/trans-decl.c:351)
    
    2018-05-11  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/85687
            Backport from trunk
            * check.c (gfc_check_rank): Check that the argument is a data object.
    
    2018-05-11  Steven G. Kargl  <kargl@gcc.gnu.org>
    
            PR fortran/85687
            Backport from trunk
            * gfortran.dg/pr85687.f90: new test.
    
    From-SVN: r260169

commit bf410e18d55a680ef1c590c681db248530d2ec93
Author: Martin Jambor <mjambor@suse.cz>
Date:   Fri May 11 17:58:29 2018 +0200

    Check is_single_const in intersect_with_plats
    
    2018-05-11  Martin Jambor  <mjambor@suse.cz>
    
            PR ipa/85655
            * ipa-cp.c (intersect_with_plats): Check that the lattice contains
            single const.
    
    testsuite/
            * g++.dg/lto/pr85655_0.C: New test.
    
    From-SVN: r260166

commit fc0f5040641f2312f1b33f07e633731682654764
Author: Richard Earnshaw <rearnsha@arm.com>
Date:   Fri May 11 13:30:55 2018 +0000

    [arm] PR target/85733 Restore be8 linking behaviour for ARMv6-M and products deriving from its capabilities
    
    My patch last year to automate passing the be8 flag to the linker had
    a nasty flaw in that I forgot entirely that the ARMv6-M architecture
    did not derive its capabilities directly from the ARMv6 capability
    list, but was a new group of capabilities (since it needs to leave out
    the ARM -- notm -- feature bit).  The feature list defined was thus
    missing the be8 bit.  Furthermore, any product derived from that
    feature group consequently lacked the be8 feature as well and this
    included all ARMv7 and ARMv8 parts.
    
    The fix is embarrassingly simple...
    
            PR target/85733
            * config/arm/arm-cpus.in (fgroup ARMv6m): Add be8 feature.
    
    From-SVN: r260163

commit 408be5fcfc53e2c8f3bdf0f3170c7d5a231eb79c
Author: Paul Thomas <pault@gcc.gnu.org>
Date:   Fri May 11 09:35:55 2018 +0000

    re PR fortran/68846 (Pointer function as LValue doesn't work when the assignment regards a dummy argument.)
    
    2018-05-11  Paul Thomas  <pault@gcc.gnu.org>
    
            PR fortran/68846
            PR fortran/70864
            backport from trunk
            * resolve.c (get_temp_from_expr): The temporary must not have
            dummy or intent attributes.
    
    2018-05-11  Paul Thomas  <pault@gcc.gnu.org>
    
            PR fortran/68846
            backport from trunk
            * gfortran.dg/temporary_3.f90 : New test.
    
            PR fortran/70864
            backport from trunk
            * gfortran.dg/temporary_2.f90 : New test.
    
    From-SVN: r260160

commit 1355ec954a3012850bb7905757c314882c14a95f
Author: Richard Earnshaw <rearnsha@arm.com>
Date:   Fri May 11 09:30:49 2018 +0000

    [arm] PR target/85606 prefer armv6s-m for armv6-m parts
    
    When Arm introduced ARMv6-M there were two variants, ARMv6-M and
    ARMv6S-M.  The two differed only in support for the SVC instruction.
    Later on SVC was then made a mandatory part of ARMv6-M and the
    ARMv6S-M name was dropped.  GCC and GAS, however still recognize both
    names and at least some versions of GAS still distinguish between the
    two.
    
    To address this, this patch changes the architecture for the ARMv6-m
    cortex parts (m0, m0plus, m1 and the variants will small multiply
    units) to use the ARMv6S-M name in conjunction with the assembler.
    This avoids problems with them rejecting code that was previously
    accepted with older versions of GCC where we did not pass an explicit
    architecture string through to the compiler when using -mcpu on the
    command line.
    
            PR target/85606
            * config/arm/arm-cpus.in: Add comment that ARMv6-m and ARMv6S-m are now
            equivalent.
            (cortex-m0): Use armv6s-m isa.
            (cortex-m0plus): Likewise.
            (cortex-m1): Likewise.
            (cortex-m0.small-multiply): Likewise.
            (cortex-m0plus.small-multiply): Likewise.
            (cortex-m1.small-multiply): Likewise.
    
    From-SVN: r260158

commit 69d481f21f6d9b0196ef35b4467a3c0616211cb9
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri May 11 00:16:17 2018 +0000

    Daily bump.
    
    From-SVN: r260146

commit 52af5c36532fe519fe1cc40ffd64cfb58745e554
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Thu May 10 20:18:18 2018 +0100

    Document Dual ABI for std::ios_base::failure
    
            * doc/xml/faq.xml: Link to C++17 status. Add note to outdated answer.
            * doc/xml/manual/debug_mode.xml: Add array and forward_list to list
            of C++11 containers with Debug Mode support.
            * doc/xml/manual/using.xml: Document that the C++17 Filesystem
            implementation also needs -lstdc++fs. Document Dual ABI for
            ios_base::failure.
            * doc/html/*: Regenerate.
    
    From-SVN: r260130

commit 930a725d34c40232a8c4286a098f61074cc447a9
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu May 10 00:16:16 2018 +0000

    Daily bump.
    
    From-SVN: r260103

commit aa4240089185c44a458c5c39fcbb36ace277e4f3
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Wed May 9 07:59:46 2018 +0000

    re PR rtl-optimization/85638 (build failure for Ada runtime with SJLJ exceptions on x86)
    
            PR rtl-optimization/85638
            * bb-reorder.c: Include common/common-target.h.
            (create_forwarder_block): New function extracted from...
            (fix_up_crossing_landing_pad): ...here.  Rename into...
            (dw2_fix_up_crossing_landing_pad): ...this.
            (sjlj_fix_up_crossing_landing_pad): New function.
            (find_rarely_executed_basic_blocks_and_crossing_edges): In SJLJ mode,
            call sjlj_fix_up_crossing_landing_pad if there are incoming EH edges
            from both partitions and exit the loop after one iteration.
    
    From-SVN: r260071

commit 25ca60aa27d2c63c4b7230f657bf5e1d93679051
Author: Jason Merrill <jason@redhat.com>
Date:   Tue May 8 22:08:59 2018 -0400

    PR c++/85706 - class deduction under decltype
    
            * pt.c (for_each_template_parm_r): Handle DECLTYPE_TYPE.  Clear
            *walk_subtrees whether or not we walked into the operand.
            (type_uses_auto): Only look at deduced contexts.
    
    From-SVN: r260067

commit f926040df9d2cfdc8378f817adacf85b01b61e4f
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed May 9 00:16:30 2018 +0000

    Daily bump.
    
    From-SVN: r260062

commit 527405cd32006d61f7597cd8f05f3421f99d26b9
Author: Joseph Myers <joseph@codesourcery.com>
Date:   Wed May 9 00:15:58 2018 +0100

    * de.po, sv.po: Update.
    
    From-SVN: r260058

commit e5fae8071a4c2f07a81e77fccf514d8f45bf74bd
Author: Marek Polacek <polacek@redhat.com>
Date:   Tue May 8 19:38:51 2018 +0000

    re PR c++/85695 (if constexpr misevaluates typedefed type value)
    
            PR c++/85695
            * semantics.c (finish_if_stmt_cond): See through typedefs.
    
            * g++.dg/cpp1z/constexpr-if22.C: New test.
    
    From-SVN: r260051

commit ecfeabd44ac1ed31a7ab27192a36df1974a18132
Author: Richard Biener <rguenther@suse.de>
Date:   Tue May 8 13:33:54 2018 +0000

    Backport PRs 85567, 85588, 85597, 85615
    
    2018-05-08  Richard Biener  <rguenther@suse.de>
    
            Backport from mainline
            2018-05-04  Richard Biener  <rguenther@suse.de>
    
            PR middle-end/85588
            * fold-const.c (negate_expr_p): Restrict negation of operand
            zero of a division to when we know that can happen without
            overflow.
            (fold_negate_expr_1): Likewise.
    
            * gcc.dg/torture/pr85588.c: New testcase.
            * gcc.dg/torture/pr57656.c: Use dg-additional-options.
    
            2018-05-03  Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/85615
            * tree-ssa-threadupdate.c (thread_block_1): Only allow exits
            to loops not nested in BBs loop father to avoid creating multi-entry
            loops.
    
            * gcc.dg/torture/pr85615.c: New testcase.
    
            2018-05-02  Richard Biener  <rguenther@suse.de>
    
            PR middle-end/85567
            * gimplify.c (gimplify_save_expr): When in SSA form allow
            SAVE_EXPRs to compute to SSA vars.
    
            * gcc.dg/torture/pr85567.c: New testcase.
    
            2018-05-02  Richard Biener  <rguenther@suse.de>
    
            PR tree-optimization/85597
            * tree-vect-stmts.c (vectorizable_operation): For ternary SLP
            do not use split vect_get_vec_defs call but call vect_get_slp_defs
            directly.
    
            * gcc.dg/vect/pr85597.c: New testcase.
    
    From-SVN: r260044

commit 4263dd51d034531ac48b4120738ef6c77861c989
Author: Richard Sandiford <richard.sandiford@linaro.org>
Date:   Tue May 8 11:18:40 2018 +0000

    Tighten condition in vect/pr85586.c (PR 85654)
    
    2018-05-08  Richard Sandiford  <richard.sandiford@linaro.org>
    
    gcc/testsuite/
            PR testsuite/85586
            * gcc.dg/vect/pr85586.c: Restrict LOOP VECTORIZED test to
            !vect_no_align.
    
    From-SVN: r260037

commit c93435657e2c38f4e06730fefc1a8ce6ad57a81d
Author: Richard Earnshaw <rearnsha@arm.com>
Date:   Tue May 8 10:33:33 2018 +0000

    [arm] PR target/85658 Fix operator precedence errors in parsecpu.awk
    
    There are a number of places in parsecpu.awk where I've managed to get
    the operator precedence between ! and 'in' incorrect (! binds more
    tightly).  In most cases this just makes a consistency test
    ineffective, but in a few cases it means we fail to correctly diagnose
    errors by the user (for example, when passing an invalid cpu or
    architecture name to configure.  This patch fixes all the cases I
    could find, based on searching for all uses of the two operators in
    the same expression.  The tweak to the API of check_fpu is to bring it
    into line with the other check functions - it now returns the result
    rather than printing it directly.  The caller now does the printing,
    in the same way that the chkarch and chkcpu commands do.
    
            PR target/85658
            * config/arm/parsecpu.awk (check_cpu): Fix operator precedence.
            (check_arch): Likewise.
            (check_fpu): Return the result rather than printing it.
            (end arch): Fix operator precedence.
            (end cpu): Likewise.
            (END): Print the result from check_fpu.
    
    From-SVN: r260034

commit e9f001d22fef98aeb17ab6940011c5a8ace0be79
Author: Richard Biener <rguenther@suse.de>
Date:   Tue May 8 08:32:46 2018 +0000

    backport: re PR tree-optimization/85627 (ICE in update_phi_components in tree-complex.c)
    
    2018-05-08  Richard Biener  <rguenther@suse.de>
    
            Backport from mainline
            2018-05-04  Richard Biener  <rguenther@suse.de>
    
            * bb-reorder.c (sanitize_hot_paths): Release hot_bbs_to_check.
            * gimple-ssa-store-merging.c
            (imm_store_chain_info::output_merged_store): Remove redundant create,
            release split_store vector contents on failure.
            * tree-vect-slp.c (vect_schedule_slp_instance): Avoid leaking
            scalar stmt vector on cache hit.
    
            2018-05-04  Richard Biener  <rguenther@suse.de>
    
            PR middle-end/85627
            * tree-complex.c (tree_lower_complex): Handle removed blocks.
    
            * g++.dg/torture/pr85627.C: New testcase.
    
    From-SVN: r260025

commit 31f576d697630e2e5e8d49e14669b3a9fa528aa4
Author: Jason Merrill <jason@redhat.com>
Date:   Mon May 7 23:13:09 2018 -0400

    PR c++/85646 - lambda visibility.
    
            * decl2.c (determine_visibility): Don't mess with template arguments
            from the containing scope.
            (vague_linkage_p): Check DECL_ABSTRACT_P before looking at a 'tor
            thunk.
    
    From-SVN: r260022

commit 9eae64d6fe67662bbae78ac23f12759b06b3c7eb
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue May 8 00:16:32 2018 +0000

    Daily bump.
    
    From-SVN: r260020

commit d599090110e261ef964d3adaf027db2a3056370f
Author: Jason Merrill <jason@redhat.com>
Date:   Mon May 7 15:34:59 2018 -0400

    PR c++/85618 - ICE with initialized VLA.
    
            * tree.c (vla_type_p): New.
            * typeck2.c (store_init_value, split_nonconstant_init_1): Check it
            rather than array_of_runtime_bound_p.
    
    From-SVN: r260013

commit 118ed6a5952b8f900cdc2f0985b15b7825444c42
Author: Edward Smith-Rowland <3dw4rd@verizon.net>
Date:   Mon May 7 16:19:34 2018 +0000

    backport: Moar PR libstdc++/80506
    
    2018-05-07  Edward Smith-Rowland  <3dw4rd@verizon.net>
    
            Backport from mainline
            2018-05-07  Edward Smith-Rowland  <3dw4rd@verizon.net>
    
            Moar PR libstdc++/80506
            * include/bits/random.tcc (gamma_distribution::__generate_impl()):
            Fix magic number used in loop condition.
    
    From-SVN: r260005

commit 7d2d253c1b4a048802f824eb055ddeef798ac323
Author: Chung-Ju Wu <jasonwucj@gmail.com>
Date:   Mon May 7 02:22:07 2018 +0000

    [NDS32] Fix bug in bit-instruction checking functions.
    
    gcc/
            Backport from mainline.
            2018-04-25  Chung-Ju Wu  <jasonwucj@gmail.com>
    
            * config/nds32/nds32-predicates.c (nds32_can_use_bclr_p): Mask with
            GET_MODE_MASK before any checking.
            (nds32_can_use_bset_p): Likewise.
            (nds32_can_use_btgl_p): Likewise.
    
    From-SVN: r259991

commit c4ce8336f8756b2ee7182650b28d07caa31250d9
Author: Chung-Ju Wu <jasonwucj@gmail.com>
Date:   Mon May 7 02:09:58 2018 +0000

    [NDS32] Split movdi/df if reigster number is illegal.
    
    gcc/
            Backport from mainline.
            2018-04-25  Chung-Ju Wu  <jasonwucj@gmail.com>
    
            * config/nds32/nds32-doubleword.md: New define_split pattern for
            illegal register number.
    
    From-SVN: r259990

commit 1023e8de4253ece92c0445b262fdcaf563d815bf
Author: Chung-Ju Wu <jasonwucj@gmail.com>
Date:   Mon May 7 01:51:40 2018 +0000

    [NDS32] Fix incorrect settings in sfp-machine.h and t-nds32-newlib for hard fp.
    
    libgcc/
            Backport from mainline.
            2018-04-25  Chung-Ju Wu  <jasonwucj@gmail.com>
    
            * config/nds32/sfp-machine.h: Fix settings for NDS32_ABI_2FP_PLUS.
            * config/nds32/t-nds32-newlib (HOST_LIBGCC2_CFLAGS): Use -fwrapv.
    
    From-SVN: r259989

commit 400e9fec0d99d926bdd04d261bf09c242e33fe4a
Author: Chung-Ju Wu <jasonwucj@gmail.com>
Date:   Mon May 7 01:38:02 2018 +0000

    [NDS32] Fix print operand for cctl register.
    
    gcc/
            Backport from mainline.
            2018-04-25  Chung-Ju Wu  <jasonwucj@gmail.com>
    
            * config/nds32/nds32.c (nds32_print_operand): Set op_value ealier.
    
    From-SVN: r259988

commit bb1cff1182e27fbca263ca1afd9f1938eebbfbb0
Author: Chung-Ju Wu <jasonwucj@gmail.com>
Date:   Mon May 7 01:27:52 2018 +0000

    [NDS32] Add missing newline character into ASM_APP_ON macro.
    
    gcc/
            Backport from mainline.
            2018-04-25  Chung-Ju Wu  <jasonwucj@gmail.com>
    
            * config/nds32/nds32.h (ASM_APP_ON): Add missing newline character.
    
    From-SVN: r259987

commit 44162f85f9012b6df0a1a6a025531470cb6656bc
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon May 7 00:16:14 2018 +0000

    Daily bump.
    
    From-SVN: r259985

commit 7b7a3fd62735459aa10c988c591241958380e3be
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Sun May 6 23:52:25 2018 +0200

    re PR c++/85659 (ICE with inline assembly inside virtual function)
    
            PR c++/85659
            * cfgexpand.c (expand_asm_stmt): Don't create a temporary if
            the type is addressable.  Don't force op into register if it has
            BLKmode.
    
            * g++.dg/ext/asm14.C: New test.
            * g++.dg/ext/asm15.C: New test.
            * g++.dg/ext/asm16.C: New test.
    
    From-SVN: r259982

commit 238b4836f6904bd3bfaa33dea9e078625bc8ecb3
Author: Andre Vehreschild <vehre@gcc.gnu.org>
Date:   Sun May 6 14:33:07 2018 +0200

    re PR fortran/85507 (ICE in gfc_dep_resolver, at fortran/dependency.c:2258)
    
    gcc/fortran/ChangeLog:
    
    2018-05-06  Andre Vehreschild  <vehre@gcc.gnu.org>
    
            PR fortran/85507
            Backport from trunk.
            * dependency.c (gfc_dep_resolver): Revert looking at coarray dimension
            introduced by r259385.
            * trans-intrinsic.c (conv_caf_send): Always report a dependency for
            same variables in coarray assignments.
    
    gcc/testsuite/ChangeLog:
    
    2018-05-06  Andre Vehreschild  <vehre@gcc.gnu.org>
    
            PR fortran/85507
            Backport from trunk.
            * gfortran.dg/coarray_dependency_1.f90: New test.
            * gfortran.dg/coarray_lib_comm_1.f90: Fix counting caf-expressions.
    
    From-SVN: r259979

commit bda15270950cdf383613a17821c70e8122047317
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun May 6 00:16:29 2018 +0000

    Daily bump.
    
    From-SVN: r259972

commit ade0919feda826d07e9bb2a45a9b972fce09ca92
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat May 5 00:16:28 2018 +0000

    Daily bump.
    
    From-SVN: r259964

commit d44c974dac204e7324bffb4c36a9fd68a68828e0
Author: Jason Merrill <jason@redhat.com>
Date:   Fri May 4 16:20:16 2018 -0400

    PR c++/85305 - pack in lambda init-capture.
    
            * parser.c (cp_parser_initializer): Add subexpression_p parm; don't
            check_for_bare_parameter_packs in a subexpression.
            (cp_parser_lambda_introducer): Use it.
    
    From-SVN: r259959

commit 145979ae24d73d15b4e8ac2f4f7137e25a73594d
Author: Ian Lance Taylor <ian@gcc.gnu.org>
Date:   Fri May 4 17:53:30 2018 +0000

    cmd/go: on AIX, pass -X64 first when invoking ar
    
        Reviewed-on: https://go-review.googlesource.com/111535
    
    From-SVN: r259947

commit ed6dfce102e463c7c8f9d9005ff8937b5c4897a9
Author: Ian Lance Taylor <iant@golang.org>
Date:   Fri May 4 17:07:20 2018 +0000

    re PR go/85630 (GCC 8.1.0: Filesystem pollution during build: .cache dir in $HOME)
    
            PR go/85630
            * Makefile.am (CHECK_ENV): Set GOCACHE.
            (ECHO_ENV): Update for setting of GOCACHE.
            * Makefile.in: Rebuild.
    
    From-SVN: r259945

commit d10401cb2909a671305f2455019cb62edcb2f1ca
Author: Kyrylo Tkachov <kyrylo.tkachov@arm.com>
Date:   Fri May 4 16:37:30 2018 +0000

    [AArch64] PR target/85512: Tighten SIMD right shift immediate constraints pt2
    
            Backport from trunk.
            2018-04-27  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>
    
            PR target/85512
            * config/aarch64/constraints.md (Usg): Limit to 31.
            (Usj): Limit to 63.
    
    From-SVN: r259941

commit 492c095149529433f567b4d0a6576fa93d489630
Author: Kyrylo Tkachov <kyrylo.tkachov@arm.com>
Date:   Fri May 4 16:35:32 2018 +0000

    [arm] PR target/82518: Return false in ARRAY_MODE_SUPPORTED_P for BYTES_BIG_ENDIAN pt2
    
            Backport from trunk
            2018-04-27  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>
    
            PR target/82518
            * lib/target-supports.exp (check_effective_target_vect_load_lanes):
            Use check_effective_target_arm_little_endian.
    
    From-SVN: r259940

commit d1f6f04d73ca322100bf889115de68dc985284cf
Author: Joseph Myers <joseph@codesourcery.com>
Date:   Fri May 4 17:27:33 2018 +0100

    * uk.po: Update.
    
    From-SVN: r259939

commit 64ef31970a6783b10ea5b69285f5ad3476150f9e
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Fri May 4 10:57:42 2018 +0100

    PR libstdc++/85642 fix is_nothrow_default_constructible<optional<T>>
    
    Add missing noexcept keyword to default constructor of each
    _Optional_payload specialization.
    
            PR libstdc++/85642 fix is_nothrow_default_constructible<optional<T>>
            * include/std/optional (_Optional_payload): Add noexcept to default
            constructor. Re-indent.
            (_Optional_payload<_Tp, true, true, true>): Likewise. Add noexcept to
            constructor for copying disengaged payloads.
            (_Optional_payload<_Tp, true, false, true>): Likewise.
            (_Optional_payload<_Tp, true, true, false>): Likewise.
            (_Optional_payload<_Tp, true, false, false>): Likewise.
            * testsuite/20_util/optional/cons/85642.cc: New.
            * testsuite/20_util/optional/cons/value_neg.cc: Adjust dg-error lines.
    
    From-SVN: r259930

commit 477f943ce67621aa239d1936cdd3a21a6298aa08
Author: John Marino <gnugcc@marino.st>
Date:   Fri May 4 08:32:48 2018 +0100

    re PR ada/85635 (typo in link.c for BSD platforms)
    
            PR ada/85635
            * link.c (BSD platforms): Add missing backslash.
    
    From-SVN: r259926

commit 94ae9057aedb1fb734e02bd3ae2a5150e240ff07
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Fri May 4 07:31:43 2018 +0000

    re PR ada/85540 (gcc/ada/init.c:1282: suspicious expression ?)
    
            PR ada/85540
            * init.c (__gnat_handle_vms_condition): Add missing parentheses.
    
    From-SVN: r259924

commit 2abda7ad546e90cb8b245e88fb1c48138505d4df
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri May 4 00:16:16 2018 +0000

    Daily bump.
    
    From-SVN: r259916

commit 0d62ac02b490d7c43900033af94378d500e755d3
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Thu May 3 20:53:46 2018 +0100

    PR libstdc++/84769 qualify call to std::get<0>
    
            PR libstdc++/84769
            * include/std/variant (visit): Qualify std::get call.
    
    From-SVN: r259907

commit 08b960a06b5be0c143803d0e11ebd2b57e40a8fc
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Thu May 3 20:53:42 2018 +0100

    PR libstdc++/85632 fix wraparound in filesystem::space
    
    On 32-bit targets any values over 4GB would wrap and produce the wrong
    result.
    
            PR libstdc++/85632 use uintmax_t for arithmetic
            * src/filesystem/ops.cc (experimental::filesystem::space): Perform
            arithmetic in result type.
            * src/filesystem/std-ops.cc (filesystem::space): Likewise.
            * testsuite/27_io/filesystem/operations/space.cc: Check total capacity
            is greater than free space.
            * testsuite/experimental/filesystem/operations/space.cc: New.
    
    From-SVN: r259906

commit e0fb5d381d478c86cde19767d17141037535f581
Author: Joseph Myers <joseph@codesourcery.com>
Date:   Thu May 3 17:10:38 2018 +0100

    Update .po files.
    
            * be.po, da.po, de.po, el.po, es.po, fi.po, fr.po, hr.po, id.po,
            ja.po, nl.po, ru.po, sr.po, sv.po, tr.po, uk.po, vi.po, zh_CN.po,
            zh_TW.po: Update.
    
    From-SVN: r259898

commit c56197715f27e0ff415ec0c76192d48fa206e729
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu May 3 00:16:17 2018 +0000

    Daily bump.
    
    From-SVN: r259873

commit 4e14dc94a28b003c27594593157040b3213ac7d4
Author: Joseph Myers <joseph@codesourcery.com>
Date:   Wed May 2 18:01:40 2018 +0100

    * es.po: Update.
    
    From-SVN: r259846

commit 04796cf26b1ef868c06365ac9c941298d3fcd6b9
Author: Tom de Vries <tom@codesourcery.com>
Date:   Wed May 2 10:55:07 2018 +0000

    backport "[nvptx, libgomp, testsuite] Reduce recursion depth in declare_target-{1,2}.f90"
    
    2018-05-02  Tom de Vries  <tom@codesourcery.com>
    
            backport from trunk:
            2018-04-26  Tom de Vries  <tom@codesourcery.com>
    
            PR target/85519
            * testsuite/libgomp.fortran/examples-4/declare_target-1.f90: Reduce
            recursion depth from 25 to 23.
            * testsuite/libgomp.fortran/examples-4/declare_target-2.f90: Same.
    
    From-SVN: r259834

commit eefbae1c9ebcf445cea36ab7eb68e001e05aca7c
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Wed May 2 11:32:16 2018 +0200

    * BASE-VER: Set to 8.1.1.
    
    From-SVN: r259831

commit 406c2abec3f998e9064919b22db62f38a7c0e7b9
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Wed May 2 10:13:49 2018 +0200

    * gennews (files): Add files for GCC 8.
    
    From-SVN: r259829

commit 730af51196dacf831ebcf8dbbfe0cab4c52c5ee3
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed May 2 08:07:22 2018 +0000

    Update ChangeLog and version files for release
    
    From-SVN: r259827

commit 9b646cb298fa7159c600f040daa7dbc2ea96504d
Author: Jason Merrill <jason@redhat.com>
Date:   Wed May 2 03:50:28 2018 -0400

    PR c++/85587 - error with scoped enum in template.
    
            * semantics.c (finish_qualified_id_expr): Don't return an
            unqualified IDENTIFIER_NODE.
    
    From-SVN: r259824

commit ca5901ac34ae32d515d48c656d682207eebf5106
Author: Richard Sandiford <richard.sandiford@linaro.org>
Date:   Wed May 2 07:43:49 2018 +0000

    Tighten early exit in vect_analyze_data_ref_dependence (PR85586)
    
    The problem in this PR was that we didn't consider aliases between
    writes in the same strided group.  After tightening the early exit
    we get the expected abs(step) >= 2 versioning check.
    
    2018-05-02  Richard Sandiford  <richard.sandiford@linaro.org>
    
    gcc/
            PR tree-optimization/85586
            * tree-vect-data-refs.c (vect_analyze_data_ref_dependence): Only
            exit early for statements in the same group if the accesses are
            not strided.
    
    gcc/testsuite/
            PR tree-optimization/85586
            * gcc.dg/vect/pr85586.c: New test.
    
    From-SVN: r259823

commit 880aec2653d27db3cfd573eb648a7d31a398af15
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Wed May 2 00:16:28 2018 +0000

    Daily bump.
    
    From-SVN: r259817

commit 8c59c81b3d4c5c398fb8cb22fb967806d8b04c0b
Author: Joseph Myers <joseph@codesourcery.com>
Date:   Tue May 1 21:34:14 2018 +0100

    * gcc.pot: Regenerate.
    
    From-SVN: r259811

commit 149a9beb4dfaf81e673526c7c383669245062f19
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Tue May 1 17:29:05 2018 +0200

    re PR web/85578 (broken links in gcc-8.0.1-RC-20180427/INSTALL/specific.html, and out of date prerequisites.html)
    
            PR web/85578
            * doc/install.texi2html: Replace _002d with - and _002a with * in
            generated html files using sed.
    
    From-SVN: r259801

commit 835ab4e6862ef94fad839159b194e91edd36f965
Author: Jason Merrill <jason@redhat.com>
Date:   Tue May 1 09:29:52 2018 -0400

    PR c++/85580 - extern "C" and local variables
    
            * name-lookup.c (check_extern_c_conflict): Ignore local decls.
    
    From-SVN: r259796

commit 293030934e570ecad35f5d20d8a91e8893106f43
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Tue May 1 00:16:15 2018 +0000

    Daily bump.
    
    From-SVN: r259786

commit 5fb37d0621c09a80b3f41dfa9f702b99c6d5c3a7
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Mon Apr 30 00:16:18 2018 +0000

    Daily bump.
    
    From-SVN: r259752

commit 56352b670a7fb0b38272ffa5b34646af452410f4
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sun Apr 29 00:16:19 2018 +0000

    Daily bump.
    
    From-SVN: r259746

commit bf8431c89049916314bb0bcdda6c9bca076812a8
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Sat Apr 28 00:16:19 2018 +0000

    Daily bump.
    
    From-SVN: r259736

commit 175fe26e8034ef0e4bf79c7d8672aebd250bc488
Author: Martin Jambor <mjambor@suse.cz>
Date:   Fri Apr 27 22:32:53 2018 +0200

    re PR ipa/85549 (Infinite loop in ilmbase package)
    
            PR ipa/85549
            * ipa-cp.c (find_aggregate_values_for_callers_subset): Make sure
            the jump function allows for passing through aggregate values.
    
            * g++.dg/ipa/pr85549.C: New test.
    
    From-SVN: r259731

commit de805da02b3165e339c6d7c1c20208e209d8259f
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Fri Apr 27 22:30:56 2018 +0200

    re PR c++/85553 (cannot list-initialize a variable of type std::nullptr_t)
    
            PR c++/85553
            * init.c (build_zero_init_1): For zero initialization of
            NULLPTR_TYPE_P type use build_int_cst directly.
    
            * g++.dg/cpp0x/Wzero-as-null-pointer-constant-3.C: Add dg-bogus
            directive.
            * g++.dg/cpp0x/constexpr-85553.C: New test.
    
    From-SVN: r259729

commit 2ed332fb874498f5c46e6a442ca944933b3c0bc5
Author: Jeff Law <law@redhat.com>
Date:   Fri Apr 27 13:31:35 2018 -0600

    * config.gcc: Mark tile* targets as deprecated/obsolete.
    
    From-SVN: r259725

commit 1ff66e706878453e881e1121771a1079e4540526
Author: Ian Lance Taylor <ian@gcc.gnu.org>
Date:   Fri Apr 27 18:44:28 2018 +0000

    re PR go/85429 (Several gotools tests FAIL with Solaris as)
    
            PR go/85429
        cmd/go: add Solaris assembler syntax for gccgo buildid file
    
        The Solaris assembler uses a different syntax for section directives.
    
        This is https://golang.org/cl/109140 ported over to gccgo.
    
        Reviewed-on: https://go-review.googlesource.com/109141
    
    From-SVN: r259721

commit 21cdb808372b58424def746d128deb99024b1489
Author: Jason Merrill <jason@redhat.com>
Date:   Fri Apr 27 11:06:14 2018 -0400

    PR c++/85545 - ICE with noexcept PMF conversion.
    
            * cvt.c (cp_fold_convert): Pass PMF CONSTRUCTORs to
            build_ptrmemfunc.
            * typeck.c (build_ptrmemfunc): Don't build a NOP_EXPR for zero
            adjustment.
            (build_ptrmemfunc_access_expr): Special-case CONSTRUCTORs.
    
    From-SVN: r259713

commit b15cc31d80c897e6cc7f94d840f4f45050511b7b
Author: Alan Modra <amodra@gmail.com>
Date:   Fri Apr 27 18:47:49 2018 +0930

    PR85532, crtend.o built without --enable-initfini-array has bad .eh_frame
    
            PR libgcc/85532
            * config/rs6000/t-crtstuff (CRTSTUFF_T_CFLAGS): Add
            -fno-asynchronous-unwind-tables.
    
    From-SVN: r259703

commit 6d881ce68dab0f935436f32974bc67f7f9e75c03
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Fri Apr 27 09:11:44 2018 +0200

    re PR tree-optimization/85529 (wrong code at -O2 and -O3 on x86_64-linux-gnu)
    
            PR tree-optimization/85529
            * tree-ssa-reassoc.c (optimize_range_tests_var_bound): Add FIRST_BB
            argument.  Don't call get_nonzero_bits if opcode is ERROR_MARK_NODE,
            rhs2 def stmt's bb is dominated by first_bb and it isn't an obvious
            zero extension or masking of the MSB bit.
            (optimize_range_tests): Add FIRST_BB argument, pass it through
            to optimize_range_tests_var_bound.
            (maybe_optimize_range_tests, reassociate_bb): Adjust
            optimize_range_tests callers.
    
            * gcc.c-torture/execute/pr85529-1.c: New test.
            * gcc.c-torture/execute/pr85529-2.c: New test.
            * gcc.dg/pr85529.c: New test.
    
    From-SVN: r259697

commit 6c6079beffeff142a62e1cb276ae0e83fa09b561
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Fri Apr 27 00:16:21 2018 +0000

    Daily bump.
    
    From-SVN: r259694

commit 31365cfd9fa0a305d98dc18dd683cee94c259ce5
Author: Richard Biener <rguenther@suse.de>
Date:   Thu Apr 26 20:05:09 2018 +0000

    cgraph.h (symbol_table): Just declare debug method here.
    
            * cgraph.h (symbol_table): Just declare debug method here.
            * symtab.c (symbol_table::debug): Define.
    
    Co-Authored-By: Jakub Jelinek <jakub@redhat.com>
    
    From-SVN: r259686

commit 7f03f6772a28a04f9a2f015d6a720c961c67517b
Author: Jonathan Wakely <jwakely@redhat.com>
Date:   Thu Apr 26 14:52:59 2018 +0100

    Document that -Wreturn-type is enabled by default for C++
    
            * doc/invoke.texi (-Wreturn-type): Document default status for C++.
    
    From-SVN: r259680

commit 9f38f13d16681f157003c959fc1641004c5d3e9d
Author: GCC Administrator <gccadmin@gcc.gnu.org>
Date:   Thu Apr 26 00:16:30 2018 +0000

    Daily bump.
    
    From-SVN: r259661

commit b235217d1f242147755f4271f7b17a5b3f2229d6
Author: H.J. Lu <hongjiu.lu@intel.com>
Date:   Wed Apr 25 17:31:20 2018 +0000

    x86: Correct movdir64b builtin function
    
    gcc/ChangeLog:
    
            Backport from mainline
            2018-04-25  Sebastian Peryt  <sebastian.peryt@intel.com>
    
            PR target/85473
            * config/i386/i386.c (ix86_expand_builtin): Change memory
            operand to XI, extend p0 to Pmode.
            * config/i386/i386.md: Change unspec volatile and operand
            1 mode to XI, change operand 0 mode to P.
    
    gcc/testsuite/ChangeLog:
    
            Backport from mainline
            2018-04-25  Sebastian Peryt  <sebastian.peryt@intel.com>
    
            PR target/85473
            * gcc.target/i386/pr85473-1.c: New test.
            * gcc.target/i386/pr85473-2.c: New test.
    
    From-SVN: r259654

commit d4e26182bb4d6d3b6d9ef591ac5332ae5c45b336
Author: Eric Botcazou <ebotcazou@adacore.com>
Date:   Wed Apr 25 10:01:55 2018 +0000

    re PR ada/85007 (-b flag to gnatlink not recognized)
    
            PR ada/85007
            * gnat_ugn.texi: Regenerate.
    
    From-SVN: r259640

commit dc5c5ba5bd88e52b0b7b7ef1f555d7150dd5c450
Author: Jakub Jelinek <jakub@redhat.com>
Date:   Wed Apr 25 09:43:46 2018 +0200

    * DEV-PHASE: Set to prerelease.
    
    From-SVN: r259636
