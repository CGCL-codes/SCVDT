<?xml version="1.0" encoding="UTF-8"?>

<!-- Generated by maven-plugin-tools 3.5 -->

<plugin>
  <name>jqf-maven-plugin</name>
  <description>JQF: Feedback-directed Quickcheck for Java - Maven plugin</description>
  <groupId>edu.berkeley.cs.jqf</groupId>
  <artifactId>jqf-maven-plugin</artifactId>
  <version>1.4-SNAPSHOT</version>
  <goalPrefix>jqf</goalPrefix>
  <isolatedRealm>false</isolatedRealm>
  <inheritedByDefault>true</inheritedByDefault>
  <mojos>
    <mojo>
      <goal>fuzz</goal>
      <description>Maven plugin for feedback-directed fuzzing using JQF.

&lt;p&gt;Performs code-coverage-guided generator-based fuzz testing
using a provided entry point.&lt;/p&gt;</description>
      <requiresDependencyResolution>test</requiresDependencyResolution>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <phase>verify</phase>
      <implementation>edu.berkeley.cs.jqf.plugin.FuzzGoal</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>blind</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to generate inputs blindly without taking into
account coverage feedback. Blind input generation is equivalent
to running QuickCheck.

&lt;p&gt;If this property is set to &lt;tt&gt;true&lt;/tt&gt;, then the fuzzing
algorithm does not maintain a queue. Every input is randomly
generated from scratch. The program under test is still instrumented
in order to provide coverage statistics. This mode is mainly useful
for comparing coverage-guided fuzzing with plain-old QuickCheck. &lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>excludes</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Comma-separated list of FQN prefixes to exclude from
coverage instrumentation.

&lt;p&gt;Example: &lt;tt&gt;org/mozilla/javascript/gen,org/slf4j/logger&lt;/tt&gt;,
will exclude classes auto-generated by Mozilla Rhino&apos;s CodeGen and
logging classes.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>exitOnCrash</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to stop fuzzing once a crash is found.

&lt;p&gt;If this property is set to &lt;tt&gt;true&lt;/tt&gt;, then the fuzzing
will exit on first crash. Useful for continuous fuzzing when you dont wont to consume resource
once a crash is found. Also fuzzing will be more effective once the crash is fixed.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>includes</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Comma-separated list of FQN prefixes to forcibly include,
even if they match an exclude.

&lt;p&gt;Typically, these will be a longer prefix than a prefix
in the excludes clauses.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>inputDirectory</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The name of the input directory containing seed files.

&lt;p&gt;If not provided, then fuzzing starts with randomly generated
initial inputs.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>libFuzzerCompatOutput</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Weather to use libFuzzer like output instead of AFL like stats
screen

&lt;p&gt;If this property is set to &lt;tt&gt;true&lt;/&gt;, then output will look like libFuzzer output
https://llvm.org/docs/LibFuzzer.html#output
.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>outputDirectory</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The name of the output directory where fuzzing results will
be stored.

&lt;p&gt;The directory will be created inside the standard Maven
project build directory.&lt;/p&gt;

&lt;p&gt;If not provided, defaults to
&lt;em&gt;jqf-fuzz/${testClassName}/${$testMethod}&lt;/em&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>project</name>
          <type>org.apache.maven.project.MavenProject</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>quiet</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to avoid printing fuzzing statistics progress in the console.

&lt;p&gt;If not provided, defaults to {@code false}.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>runTimeout</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>The timeout for each individual trial, in milliseconds.

&lt;p&gt;If not provided, defaults to 0 (unlimited).&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>target</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>testClassName</name>
          <type>java.lang.String</type>
          <required>true</required>
          <editable>true</editable>
          <description>The fully-qualified name of the test class containing methods
to fuzz.

&lt;p&gt;This class will be loaded using the Maven project&apos;s test
classpath. It must be annotated with {@code @RunWith(JQF.class)}&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>testMethod</name>
          <type>java.lang.String</type>
          <required>true</required>
          <editable>true</editable>
          <description>The name of the method to fuzz.

&lt;p&gt;This method must be annotated with {@code @Fuzz}, and take
one or more arguments (with optional junit-quickcheck
annotations) whose values will be fuzzed by JQF.&lt;/p&gt;

&lt;p&gt;If more than one method of this name exists in the
test class or if the method is not declared
{@code public void}, then the fuzzer will not launch.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>time</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The duration of time for which to run fuzzing.

&lt;p&gt;If this property is not provided, the fuzzing session is
run for an unlimited time until the process is terminated
by the user (e.g. via kill or CTRL+C).&lt;/p&gt;

&lt;p&gt;Valid time durations are non-empty strings in the format
[Nh][Nm][Ns], such as &quot;60s&quot; or &quot;2h30m&quot;.&lt;/p&gt;</description>
        </parameter>
      </parameters>
      <configuration>
        <blind implementation="boolean">${blind}</blind>
        <excludes implementation="java.lang.String">${excludes}</excludes>
        <exitOnCrash implementation="java.lang.String">${exitOnCrash}</exitOnCrash>
        <includes implementation="java.lang.String">${includes}</includes>
        <inputDirectory implementation="java.lang.String">${in}</inputDirectory>
        <libFuzzerCompatOutput implementation="java.lang.String">${libFuzzerCompatOutput}</libFuzzerCompatOutput>
        <outputDirectory implementation="java.lang.String">${out}</outputDirectory>
        <project implementation="org.apache.maven.project.MavenProject" default-value="${project}"/>
        <quiet implementation="boolean">${quiet}</quiet>
        <runTimeout implementation="int">${runTimeout}</runTimeout>
        <target implementation="java.io.File" default-value="${project.build.directory}"/>
        <testClassName implementation="java.lang.String">${class}</testClassName>
        <testMethod implementation="java.lang.String">${method}</testMethod>
        <time implementation="java.lang.String">${time}</time>
      </configuration>
    </mojo>
    <mojo>
      <goal>repro</goal>
      <description>Maven plugin for replaying a test case produced by JQF.</description>
      <requiresDependencyResolution>test</requiresDependencyResolution>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <implementation>edu.berkeley.cs.jqf.plugin.ReproGoal</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>excludes</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Comma-separated list of FQN prefixes to exclude from
coverage instrumentation.

&lt;p&gt;This property is only useful if {@link #logCoverage} is
set. The semantics are similar to the similarly named
property in the goal &lt;tt&gt;jqf:fuzz&lt;/tt&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>includes</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Comma-separated list of FQN prefixes to forcibly include,
even if they match an exclude.

&lt;p&gt;Typically, these will be a longer prefix than a prefix
in the excludes clauses.&lt;/p&gt;

&lt;p&gt;This property is only useful if {@link #logCoverage} is
set. The semantics are similar to the similarly named
property in the goal &lt;tt&gt;jqf:fuzz&lt;/tt&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>input</name>
          <type>java.lang.String</type>
          <required>true</required>
          <editable>true</editable>
          <description>Input file or directory to reproduce test case(s).

&lt;p&gt;These files will typically be taken from the test corpus
(&quot;queue&quot;) directory or the failures (&quot;crashes&quot;) directory
generated by JQF in a previous fuzzing run, for the same
test class and method.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>logCoverage</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Output file to dump coverage info.

&lt;p&gt;This is an optional parameter. If set, the value is the name
of a file where JQF will dump code coverage information for
the test inputs being replayed.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>printArgs</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to print the args to each test case.

&lt;p&gt;The input file being repro&apos;d is usually a sequence of bytes
that is decoded by the junit-quickcheck generators corresponding
to the parameters declared in the test method. Unless the test method
contains just one arg of type InputStream, the input file itself
does not directly correspond to the args sent to the test method.&lt;/p&gt;

&lt;p&gt;If this file is set, then the args decoded from a repro&apos;d input
file are first printed to standard output before invoking the test
method.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>project</name>
          <type>org.apache.maven.project.MavenProject</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>target</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>testClassName</name>
          <type>java.lang.String</type>
          <required>true</required>
          <editable>true</editable>
          <description>The fully-qualified name of the test class containing methods
to fuzz.

&lt;p&gt;This class will be loaded using the Maven project&apos;s test
classpath. It must be annotated with {@code @RunWith(JQF.class)}&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>testMethod</name>
          <type>java.lang.String</type>
          <required>true</required>
          <editable>true</editable>
          <description>The name of the method to fuzz.

&lt;p&gt;This method must be annotated with {@code @Fuzz}, and take
one or more arguments (with optional junit-quickcheck
annotations) whose values will be fuzzed by JQF.&lt;/p&gt;

&lt;p&gt;If more than one method of this name exists in the
test class or if the method is not declared
{@code public void}, then the fuzzer will not launch.&lt;/p&gt;</description>
        </parameter>
      </parameters>
      <configuration>
        <excludes implementation="java.lang.String">${excludes}</excludes>
        <includes implementation="java.lang.String">${includes}</includes>
        <input implementation="java.lang.String">${input}</input>
        <logCoverage implementation="java.lang.String">${logCoverage}</logCoverage>
        <printArgs implementation="boolean">${printArgs}</printArgs>
        <project implementation="org.apache.maven.project.MavenProject" default-value="${project}"/>
        <target implementation="java.io.File" default-value="${project.build.directory}"/>
        <testClassName implementation="java.lang.String">${class}</testClassName>
        <testMethod implementation="java.lang.String">${method}</testMethod>
      </configuration>
    </mojo>
  </mojos>
  <dependencies>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-plugin-api</artifactId>
      <type>jar</type>
      <version>3.5.3</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-model</artifactId>
      <type>jar</type>
      <version>3.5.3</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-artifact</artifactId>
      <type>jar</type>
      <version>3.5.3</version>
    </dependency>
    <dependency>
      <groupId>org.eclipse.sisu</groupId>
      <artifactId>org.eclipse.sisu.plexus</artifactId>
      <type>jar</type>
      <version>0.3.3</version>
    </dependency>
    <dependency>
      <groupId>javax.enterprise</groupId>
      <artifactId>cdi-api</artifactId>
      <type>jar</type>
      <version>1.0</version>
    </dependency>
    <dependency>
      <groupId>javax.annotation</groupId>
      <artifactId>jsr250-api</artifactId>
      <type>jar</type>
      <version>1.0</version>
    </dependency>
    <dependency>
      <groupId>org.codehaus.plexus</groupId>
      <artifactId>plexus-utils</artifactId>
      <type>jar</type>
      <version>3.1.0</version>
    </dependency>
    <dependency>
      <groupId>org.codehaus.plexus</groupId>
      <artifactId>plexus-classworlds</artifactId>
      <type>jar</type>
      <version>2.5.2</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-core</artifactId>
      <type>jar</type>
      <version>3.5.3</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-settings</artifactId>
      <type>jar</type>
      <version>3.5.3</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-settings-builder</artifactId>
      <type>jar</type>
      <version>3.5.3</version>
    </dependency>
    <dependency>
      <groupId>org.codehaus.plexus</groupId>
      <artifactId>plexus-interpolation</artifactId>
      <type>jar</type>
      <version>1.24</version>
    </dependency>
    <dependency>
      <groupId>org.sonatype.plexus</groupId>
      <artifactId>plexus-sec-dispatcher</artifactId>
      <type>jar</type>
      <version>1.4</version>
    </dependency>
    <dependency>
      <groupId>org.sonatype.plexus</groupId>
      <artifactId>plexus-cipher</artifactId>
      <type>jar</type>
      <version>1.4</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-builder-support</artifactId>
      <type>jar</type>
      <version>3.5.3</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-repository-metadata</artifactId>
      <type>jar</type>
      <version>3.5.3</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-model-builder</artifactId>
      <type>jar</type>
      <version>3.5.3</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-resolver-provider</artifactId>
      <type>jar</type>
      <version>3.5.3</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven.resolver</groupId>
      <artifactId>maven-resolver-impl</artifactId>
      <type>jar</type>
      <version>1.1.1</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven.resolver</groupId>
      <artifactId>maven-resolver-api</artifactId>
      <type>jar</type>
      <version>1.1.1</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven.resolver</groupId>
      <artifactId>maven-resolver-spi</artifactId>
      <type>jar</type>
      <version>1.1.1</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven.resolver</groupId>
      <artifactId>maven-resolver-util</artifactId>
      <type>jar</type>
      <version>1.1.1</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven.shared</groupId>
      <artifactId>maven-shared-utils</artifactId>
      <type>jar</type>
      <version>3.2.1</version>
    </dependency>
    <dependency>
      <groupId>commons-io</groupId>
      <artifactId>commons-io</artifactId>
      <type>jar</type>
      <version>2.5</version>
    </dependency>
    <dependency>
      <groupId>org.eclipse.sisu</groupId>
      <artifactId>org.eclipse.sisu.inject</artifactId>
      <type>jar</type>
      <version>0.3.3</version>
    </dependency>
    <dependency>
      <groupId>com.google.inject</groupId>
      <artifactId>guice</artifactId>
      <type>jar</type>
      <version>4.0</version>
    </dependency>
    <dependency>
      <groupId>aopalliance</groupId>
      <artifactId>aopalliance</artifactId>
      <type>jar</type>
      <version>1.0</version>
    </dependency>
    <dependency>
      <groupId>com.google.guava</groupId>
      <artifactId>guava</artifactId>
      <type>jar</type>
      <version>20.0</version>
    </dependency>
    <dependency>
      <groupId>javax.inject</groupId>
      <artifactId>javax.inject</artifactId>
      <type>jar</type>
      <version>1</version>
    </dependency>
    <dependency>
      <groupId>org.codehaus.plexus</groupId>
      <artifactId>plexus-component-annotations</artifactId>
      <type>jar</type>
      <version>1.7.1</version>
    </dependency>
    <dependency>
      <groupId>org.apache.commons</groupId>
      <artifactId>commons-lang3</artifactId>
      <type>jar</type>
      <version>3.5</version>
    </dependency>
    <dependency>
      <groupId>edu.berkeley.cs.jqf</groupId>
      <artifactId>jqf-instrument</artifactId>
      <type>jar</type>
      <version>1.4-SNAPSHOT</version>
    </dependency>
    <dependency>
      <groupId>org.ow2.asm</groupId>
      <artifactId>asm</artifactId>
      <type>jar</type>
      <version>7.2</version>
    </dependency>
    <dependency>
      <groupId>edu.berkeley.cs.jqf</groupId>
      <artifactId>jqf-fuzz</artifactId>
      <type>jar</type>
      <version>1.4-SNAPSHOT</version>
    </dependency>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <type>jar</type>
      <version>4.12</version>
    </dependency>
    <dependency>
      <groupId>org.hamcrest</groupId>
      <artifactId>hamcrest-core</artifactId>
      <type>jar</type>
      <version>1.3</version>
    </dependency>
    <dependency>
      <groupId>com.pholser</groupId>
      <artifactId>junit-quickcheck-generators</artifactId>
      <type>jar</type>
      <version>0.8</version>
    </dependency>
    <dependency>
      <groupId>com.pholser</groupId>
      <artifactId>junit-quickcheck-core</artifactId>
      <type>jar</type>
      <version>0.8</version>
    </dependency>
    <dependency>
      <groupId>org.javaruntype</groupId>
      <artifactId>javaruntype</artifactId>
      <type>jar</type>
      <version>1.3</version>
    </dependency>
    <dependency>
      <groupId>org.antlr</groupId>
      <artifactId>antlr-runtime</artifactId>
      <type>jar</type>
      <version>3.1.2</version>
    </dependency>
    <dependency>
      <groupId>ognl</groupId>
      <artifactId>ognl</artifactId>
      <type>jar</type>
      <version>3.1.12</version>
    </dependency>
    <dependency>
      <groupId>org.javassist</groupId>
      <artifactId>javassist</artifactId>
      <type>jar</type>
      <version>3.20.0-GA</version>
    </dependency>
    <dependency>
      <groupId>ru.vyarus</groupId>
      <artifactId>generics-resolver</artifactId>
      <type>jar</type>
      <version>2.0.1</version>
    </dependency>
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-api</artifactId>
      <type>jar</type>
      <version>1.7.25</version>
    </dependency>
    <dependency>
      <groupId>org.jacoco</groupId>
      <artifactId>org.jacoco.report</artifactId>
      <type>jar</type>
      <version>0.8.2</version>
    </dependency>
    <dependency>
      <groupId>org.jacoco</groupId>
      <artifactId>org.jacoco.core</artifactId>
      <type>jar</type>
      <version>0.8.2</version>
    </dependency>
    <dependency>
      <groupId>org.ow2.asm</groupId>
      <artifactId>asm-commons</artifactId>
      <type>jar</type>
      <version>6.2.1</version>
    </dependency>
    <dependency>
      <groupId>org.ow2.asm</groupId>
      <artifactId>asm-analysis</artifactId>
      <type>jar</type>
      <version>6.2.1</version>
    </dependency>
    <dependency>
      <groupId>org.ow2.asm</groupId>
      <artifactId>asm-tree</artifactId>
      <type>jar</type>
      <version>6.2.1</version>
    </dependency>
    <dependency>
      <groupId>info.picocli</groupId>
      <artifactId>picocli</artifactId>
      <type>jar</type>
      <version>4.0.4</version>
    </dependency>
    <dependency>
      <groupId>org.antlr</groupId>
      <artifactId>antlr4-runtime</artifactId>
      <type>jar</type>
      <version>4.7.2</version>
    </dependency>
    <dependency>
      <groupId>org.codehaus.mojo</groupId>
      <artifactId>exec-maven-plugin</artifactId>
      <type>maven-plugin</type>
      <version>3.0.0</version>
    </dependency>
    <dependency>
      <groupId>org.apache.commons</groupId>
      <artifactId>commons-exec</artifactId>
      <type>jar</type>
      <version>1.3</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven.shared</groupId>
      <artifactId>maven-artifact-transfer</artifactId>
      <type>jar</type>
      <version>0.10.1</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven.shared</groupId>
      <artifactId>maven-common-artifact-filters</artifactId>
      <type>jar</type>
      <version>3.0.1</version>
    </dependency>
    <dependency>
      <groupId>org.sonatype.sisu</groupId>
      <artifactId>sisu-inject-plexus</artifactId>
      <type>jar</type>
      <version>1.4.2</version>
    </dependency>
    <dependency>
      <groupId>org.sonatype.sisu</groupId>
      <artifactId>sisu-inject-bean</artifactId>
      <type>jar</type>
      <version>1.4.2</version>
    </dependency>
    <dependency>
      <groupId>org.sonatype.sisu</groupId>
      <artifactId>sisu-guice</artifactId>
      <type>jar</type>
      <version>2.1.7</version>
    </dependency>
    <dependency>
      <groupId>commons-codec</groupId>
      <artifactId>commons-codec</artifactId>
      <type>jar</type>
      <version>1.11</version>
    </dependency>
    <dependency>
      <groupId>org.pytorch</groupId>
      <artifactId>pytorch_java_only</artifactId>
      <type>jar</type>
      <version>1.7.1</version>
    </dependency>
    <dependency>
      <groupId>com.facebook.soloader</groupId>
      <artifactId>nativeloader</artifactId>
      <type>jar</type>
      <version>0.8.0</version>
    </dependency>
    <dependency>
      <groupId>com.facebook.fbjni</groupId>
      <artifactId>fbjni-java-only</artifactId>
      <type>jar</type>
      <version>0.0.3</version>
    </dependency>
    <dependency>
      <groupId>org.python</groupId>
      <artifactId>jython-standalone</artifactId>
      <type>jar</type>
      <version>2.7.0</version>
    </dependency>
    <dependency>
      <groupId>com.alibaba</groupId>
      <artifactId>fastjson</artifactId>
      <type>jar</type>
      <version>1.2.59</version>
    </dependency>
  </dependencies>
</plugin>