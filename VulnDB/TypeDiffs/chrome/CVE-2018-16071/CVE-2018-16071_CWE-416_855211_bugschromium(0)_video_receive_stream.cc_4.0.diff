diff -ur src2/call/video_receive_stream.cc src/call/video_receive_stream.cc
--- src2/call/video_receive_stream.cc	2018-05-22 14:42:52.355094265 -0700
+++ src/call/video_receive_stream.cc	2018-05-22 14:46:10.478324791 -0700
@@ -15,6 +15,19 @@
 
 VideoReceiveStream::Decoder::Decoder() = default;
 VideoReceiveStream::Decoder::Decoder(const Decoder&) = default;
+
+VideoReceiveStream::Decoder::Decoder(const Json::Value& json)
+    : payload_type(json["payload_type"].asInt64()),
+      payload_name(json["payload_name"].asString()) {
+  Json::StyledWriter writer;
+  std::string raw_json = writer.write(json);
+  for (const auto& params_json : json["codec_params"]) {
+    std::vector<std::string> members = params_json.getMemberNames();
+    RTC_CHECK_EQ(members.size(), 1);
+    codec_params[members[0]] = params_json[members[0]].asString();
+  }
+}
+
 VideoReceiveStream::Decoder::~Decoder() = default;
 
 std::string VideoReceiveStream::Decoder::ToString() const {
@@ -32,6 +45,21 @@
   return ss.str();
 }
 
+Json::Value VideoReceiveStream::Decoder::ToJson() const {
+  Json::Value root;
+
+  root["payload_type"] = payload_type;
+  root["payload_name"] = payload_name;
+  root["codec_params"] = Json::Value(Json::arrayValue);
+  for (const auto& it : codec_params) {
+    Json::Value val;
+    val[it.first] = it.second;
+    root["codec_params"].append(val);
+  }
+
+  return root;
+}
+
 VideoReceiveStream::Stats::Stats() = default;
 VideoReceiveStream::Stats::~Stats() = default;
 
@@ -69,6 +97,16 @@
 VideoReceiveStream::Config::Config(Transport* rtcp_send_transport)
     : rtcp_send_transport(rtcp_send_transport) {}
 
+VideoReceiveStream::Config::Config(Transport* rtcp_send_transport,
+                                   const Json::Value& json)
+    : rtp(json["rtp"]), rtcp_send_transport(rtcp_send_transport) {
+  for (const auto& dec : json["decoders"])
+    decoders.push_back(Decoder(dec));
+
+  render_delay_ms = json["render_delay_ms"].asInt64();
+  target_delay_ms = json["target_delay_ms"].asInt64();
+}
+
 VideoReceiveStream::Config& VideoReceiveStream::Config::operator=(Config&&) =
     default;
 VideoReceiveStream::Config::Config::~Config() = default;
@@ -96,8 +134,48 @@
   return ss.str();
 }
 
+Json::Value VideoReceiveStream::Config::ToJson() const {
+  Json::Value root;
+
+  root["decoders"] = Json::Value(Json::arrayValue);
+  for (const auto& dec : decoders)
+    root["decoders"].append(dec.ToJson());
+
+  root["rtp"] = rtp.ToJson();
+  root["render_delay_ms"] = render_delay_ms;
+  root["target_delay_ms"] = target_delay_ms;
+
+  return root;
+}
+
 VideoReceiveStream::Config::Rtp::Rtp() = default;
 VideoReceiveStream::Config::Rtp::Rtp(const Rtp&) = default;
+
+VideoReceiveStream::Config::Rtp::Rtp(const Json::Value& json) {
+  remote_ssrc = json["remote_ssrc"].asInt64();
+  local_ssrc = json["local_ssrc"].asInt64();
+  rtcp_mode = json["rtcp_mode"].asString() == "RtcpMode::kCompound"
+                  ? RtcpMode::kCompound
+                  : RtcpMode::kReducedSize;
+  remb = json["remb"].asBool();
+  transport_cc = json["transport_cc"].asBool();
+  nack.rtp_history_ms = json["nack"]["rtp_history_ms"].asInt64();
+  ulpfec_payload_type = json["ulpfec_payload_type"].asInt64();
+  red_payload_type = json["red_payload_type"].asInt64();
+  rtx_ssrc = json["rtx_ssrc"].asInt64();
+
+  for (const auto& pl_json : json["rtx_payload_types"]) {
+    std::vector<std::string> members = pl_json.getMemberNames();
+    RTC_CHECK_EQ(members.size(), 1);
+    Json::Value wut = pl_json[members[0]];
+    rtx_associated_payload_types[std::stoi(members[0])] = wut.asInt64();
+  }
+
+  for (const auto& ext_json : json["extensions"])
+    extensions.emplace_back(ext_json["uri"].asString(), ext_json["id"].asInt64(),
+                            ext_json["encrypt"].asBool());
+}
+
 VideoReceiveStream::Config::Rtp::~Rtp() = default;
 
 std::string VideoReceiveStream::Config::Rtp::ToString() const {
@@ -134,4 +212,37 @@
   return ss.str();
 }
 
+Json::Value VideoReceiveStream::Config::Rtp::ToJson() const {
+  Json::Value root;
+  root["remote_ssrc"] = remote_ssrc;
+  root["local_ssrc"] = local_ssrc;
+  root["rtcp_mode"] = rtcp_mode == RtcpMode::kCompound
+                          ? "RtcpMode::kCompound"
+                          : "RtcpMode::kReducedSize";
+  root["remb"] = remb;
+  root["transport_cc"] = transport_cc;
+  root["nack"]["rtp_history_ms"] = nack.rtp_history_ms;
+  root["ulpfec_payload_type"] = ulpfec_payload_type;
+  root["red_payload_type"] = red_payload_type;
+  root["rtx_ssrc"] = rtx_ssrc;
+
+  root["rtx_payload_types"] = Json::Value(Json::arrayValue);
+  for (auto& kv : rtx_associated_payload_types) {
+    Json::Value val;
+    val[std::to_string(kv.first)] = kv.second;
+    root["rtx_payload_types"].append(val);
+  }
+
+  root["extensions"] = Json::Value(Json::arrayValue);
+  for (auto& ext : extensions) {
+    Json::Value ext_json;
+    ext_json["uri"] = ext.uri;
+    ext_json["id"] = ext.id;
+    ext_json["encrypt"] = ext.encrypt;
+    root["extensions"].append(ext_json);
+  }
+
+  return root;
+}
+
 }  // namespace webrtc
