diff -ur src2/call/call.cc src/call/call.cc
--- src2/call/call.cc	2018-05-22 14:42:52.355094265 -0700
+++ src/call/call.cc	2018-05-22 14:46:10.478324791 -0700
@@ -10,6 +10,8 @@
 
 #include <string.h>
 #include <algorithm>
+#include <atomic>
+#include <fstream>
 #include <map>
 #include <memory>
 #include <set>
@@ -61,6 +63,7 @@
 #include "system_wrappers/include/clock.h"
 #include "system_wrappers/include/cpu_info.h"
 #include "system_wrappers/include/metrics.h"
+#include "test/rtp_file_writer.h"
 #include "video/call_stats.h"
 #include "video/send_delay_stats.h"
 #include "video/stats_counter.h"
@@ -376,6 +379,11 @@
   // Declared last since it will issue callbacks from a task queue. Declaring it
   // last ensures that it is destroyed first and any running tasks are finished.
   std::unique_ptr<RtpTransportControllerSendInterface> transport_send_;
+
+  std::unique_ptr<test::RtpFileWriter> rtp_file_writer_;
+  std::vector<webrtc::VideoReceiveStream::Config> receive_configs_;
+  std::string record_path_;
+
   RTC_DISALLOW_COPY_AND_ASSIGN(Call);
 };
 }  // namespace internal
@@ -446,6 +454,13 @@
       receive_time_calculator_(ReceiveTimeCalculator::CreateFromFieldTrial()),
       video_send_delay_stats_(new SendDelayStats(clock_)),
       start_ms_(clock_->TimeInMilliseconds()) {
+  static std::atomic<int> num_writers{};
+  int n = num_writers.fetch_add(1);
+  std::stringstream ss;
+  ss << "/usr/local/google/home/natashenka/dumps/";
+  ss << clock_->TimeInMilliseconds() << "_" << n << "_" << this;
+  record_path_ = ss.str();
+
   RTC_DCHECK(config.event_log != nullptr);
   transport_send->RegisterTargetTransferRateObserver(this);
   transport_send_ = std::move(transport_send);
@@ -803,6 +818,21 @@
 webrtc::VideoReceiveStream* Call::CreateVideoReceiveStream(
     webrtc::VideoReceiveStream::Config configuration) {
   TRACE_EVENT0("webrtc", "Call::CreateVideoReceiveStream");
+
+  if (config_.dump_rtp) {
+    receive_configs_.push_back(configuration.Copy());
+    Json::Value configs(Json::arrayValue);
+    for (const auto& conf : receive_configs_)
+      configs.append(conf.ToJson());
+
+    std::string config_path = record_path_;
+    config_path += "_config";
+    std::ofstream receive_configs_file(config_path);
+    Json::StyledWriter writer;
+    std::string raw_json = writer.write(configs);
+    receive_configs_file.write(raw_json.c_str(), raw_json.size());
+  }
+
   RTC_DCHECK_CALLED_SEQUENTIALLY(&configuration_sequence_checker_);
 
   VideoReceiveStream* receive_stream = new VideoReceiveStream(
@@ -1312,6 +1342,22 @@
   if (RtpHeaderParser::IsRtcp(packet.cdata(), packet.size()))
     return DeliverRtcp(media_type, packet.cdata(), packet.size());
 
+  if (config_.dump_rtp && media_type == MediaType::VIDEO) {
+    if (!rtp_file_writer_) {
+      std::string rtp_path = record_path_;
+      rtp_path += "_rtpdump";
+      printf("RTP dump: %s\n", rtp_path.c_str());
+      rtp_file_writer_.reset(test::RtpFileWriter::Create(
+          test::RtpFileWriter::kRtpDump, rtp_path.c_str()));
+    }
+
+    test::RtpPacket p;
+    memcpy(p.data, packet.data(), packet.size());
+    p.length = packet.size();
+    p.original_length = packet.size();
+    p.time_ms = clock_->TimeInMilliseconds() - start_ms_;
+    RTC_CHECK(rtp_file_writer_->WritePacket(&p));
+  }
   return DeliverRtp(media_type, std::move(packet), packet_time);
 }
 
