--- trunk/Source/core/rendering/svg/SVGRenderSupport.cpp	2013/09/28 04:00:31	158479
+++ trunk/Source/core/rendering/svg/SVGRenderSupport.cpp	2013/09/28 04:17:17	158480
@@ -242,9 +242,15 @@
         }
 
         SubtreeLayoutScope layoutScope(child);
-        if (needsLayout)
+        // Resource containers are nasty: they can invalidate clients outside the current SubtreeLayoutScope.
+        // Since they only care about viewport size changes (to resolve their relative lengths), we trigger
+        // their invalidation directly from SVGSVGElement::svgAttributeChange() or at a higher
+        // SubtreeLayoutScope (in RenderView::layout()).
+        if (needsLayout && !child->isSVGResourceContainer())
             layoutScope.setNeedsLayout(child);
 
+        layoutResourcesIfNeeded(child);
+
         if (child->needsLayout()) {
             child->layout();
             // Renderers are responsible for repainting themselves when changing, except
@@ -268,6 +274,15 @@
         invalidateResourcesOfChildren(*it);
 }
 
+void SVGRenderSupport::layoutResourcesIfNeeded(const RenderObject* object)
+{
+    ASSERT(object);
+
+    SVGResources* resources = SVGResourcesCache::cachedResourcesForRenderObject(object);
+    if (resources)
+        resources->layoutIfNeeded();
+}
+
 bool SVGRenderSupport::isOverflowHidden(const RenderObject* object)
 {
     // SVG doesn't support independent x/y overflow
