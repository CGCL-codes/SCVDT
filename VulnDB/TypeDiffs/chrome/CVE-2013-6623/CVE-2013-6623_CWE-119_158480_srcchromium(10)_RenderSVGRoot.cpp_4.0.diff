--- trunk/Source/core/rendering/svg/RenderSVGRoot.cpp	2013/09/28 04:00:31	158479
+++ trunk/Source/core/rendering/svg/RenderSVGRoot.cpp	2013/09/28 04:17:17	158480
@@ -197,8 +197,6 @@
 {
     ASSERT(needsLayout());
 
-    m_resourcesNeedingToInvalidateClients.clear();
-
     // Arbitrary affine transforms are incompatible with LayoutState.
     LayoutStateDisabler layoutStateDisabler(view());
 
@@ -210,21 +208,13 @@
     updateLogicalHeight();
     buildLocalToBorderBoxTransform();
 
+    SVGRenderSupport::layoutResourcesIfNeeded(this);
+
     SVGSVGElement* svg = toSVGSVGElement(node());
     ASSERT(svg);
     m_isLayoutSizeChanged = needsLayout || (svg->hasRelativeLengths() && oldSize != size());
     SVGRenderSupport::layoutChildren(this, needsLayout || SVGRenderSupport::filtersForceContainerLayout(this));
 
-    if (!m_resourcesNeedingToInvalidateClients.isEmpty()) {
-        // Invalidate resource clients, which may mark some nodes for layout.
-        HashSet<RenderSVGResourceContainer*>::iterator end = m_resourcesNeedingToInvalidateClients.end();
-        for (HashSet<RenderSVGResourceContainer*>::iterator it = m_resourcesNeedingToInvalidateClients.begin(); it != end; ++it)
-            (*it)->removeAllClientsFromCache();
-
-        m_isLayoutSizeChanged = false;
-        SVGRenderSupport::layoutChildren(this, false);
-    }
-
     // At this point LayoutRepainter already grabbed the old bounds,
     // recalculate them now so repaintAfterLayout() uses the new bounds.
     if (m_needsBoundariesOrTransformUpdate) {
@@ -465,14 +455,4 @@
     return svg->intrinsicHeight(SVGSVGElement::IgnoreCSSProperties).isPercent();
 }
 
-void RenderSVGRoot::addResourceForClientInvalidation(RenderSVGResourceContainer* resource)
-{
-    RenderObject* svgRoot = resource->parent();
-    while (svgRoot && !svgRoot->isSVGRoot())
-        svgRoot = svgRoot->parent();
-    if (!svgRoot)
-        return;
-    toRenderSVGRoot(svgRoot)->m_resourcesNeedingToInvalidateClients.add(resource);
-}
-
 }
