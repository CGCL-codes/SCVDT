--- trunk/Source/core/svg/SVGAnimateElement.cpp	2014/05/28 02:32:51	174922
+++ trunk/Source/core/svg/SVGAnimateElement.cpp	2014/05/28 02:40:15	174923
@@ -177,23 +177,22 @@
 
     if (shouldApply == ApplyXMLAnimation) {
         // SVG DOM animVal animation code-path.
-        m_animatedElements = findElementInstances(targetElement);
-        ASSERT(!m_animatedElements.isEmpty());
+        WillBeHeapVector<RawPtrWillBeMember<SVGElement> > animatedElements = findElementInstances(targetElement);
+        ASSERT(!animatedElements.isEmpty());
 
-        WillBeHeapVector<RawPtrWillBeMember<SVGElement> >::const_iterator end = m_animatedElements.end();
-        for (WillBeHeapVector<RawPtrWillBeMember<SVGElement> >::const_iterator it = m_animatedElements.begin(); it != end; ++it)
+        WillBeHeapVector<RawPtrWillBeMember<SVGElement> >::const_iterator end = animatedElements.end();
+        for (WillBeHeapVector<RawPtrWillBeMember<SVGElement> >::const_iterator it = animatedElements.begin(); it != end; ++it)
             document().accessSVGExtensions().addElementReferencingTarget(this, *it);
 
         if (!m_animatedProperty)
-            m_animatedProperty = animator->startAnimValAnimation(m_animatedElements);
+            m_animatedProperty = animator->startAnimValAnimation(animatedElements);
         else
-            m_animatedProperty = animator->resetAnimValToBaseVal(m_animatedElements);
+            m_animatedProperty = animator->resetAnimValToBaseVal(animatedElements);
 
         return;
     }
 
     // CSS properties animation code-path.
-    ASSERT(m_animatedElements.isEmpty());
     String baseValue;
 
     if (shouldApply == ApplyCSSAnimation) {
@@ -302,7 +301,7 @@
         return;
     }
 
-    if (m_animatedElements.isEmpty()) {
+    if (ensureAnimator()->isAnimatingCSSProperty()) {
         // CSS properties animation code-path.
         removeCSSPropertyFromTargetAndInstances(targetElement, attributeName());
         m_animatedProperty.clear();
@@ -311,11 +310,11 @@
 
     // SVG DOM animVal animation code-path.
     if (m_animator) {
-        m_animator->stopAnimValAnimation(m_animatedElements);
+        WillBeHeapVector<RawPtrWillBeMember<SVGElement> > animatedElements = findElementInstances(targetElement);
+        m_animator->stopAnimValAnimation(animatedElements);
         notifyTargetAndInstancesAboutAnimValChange(targetElement, attributeName());
     }
 
-    m_animatedElements.clear();
     m_animatedProperty.clear();
 }
 
@@ -329,7 +328,7 @@
     if (!m_animatedProperty)
         return;
 
-    if (m_animatedElements.isEmpty()) {
+    if (ensureAnimator()->isAnimatingCSSProperty()) {
         // CSS properties animation code-path.
         // Convert the result of the animation to a String and apply it as CSS property on the target & all instances.
         applyCSSPropertyToTargetAndInstances(targetElement(), attributeName(), m_animatedProperty->valueAsString());
@@ -408,9 +407,6 @@
 
 void SVGAnimateElement::trace(Visitor* visitor)
 {
-#if ENABLE(OILPAN)
-    visitor->trace(m_animatedElements);
-#endif
     visitor->trace(m_animator);
     SVGAnimationElement::trace(visitor);
 }
