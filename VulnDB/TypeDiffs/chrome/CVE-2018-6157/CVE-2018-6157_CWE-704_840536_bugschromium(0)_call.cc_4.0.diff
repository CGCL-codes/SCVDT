diff --git a/call/call.cc b/call/call.cc
index aadc27e123..72ff751027 100644
--- a/call/call.cc
+++ b/call/call.cc
@@ -10,6 +10,7 @@
 
 #include <string.h>
 #include <algorithm>
+#include <atomic>
 #include <map>
 #include <memory>
 #include <set>
@@ -54,14 +55,15 @@
 #include "rtc_base/ptr_util.h"
 #include "rtc_base/rate_limiter.h"
 #include "rtc_base/sequenced_task_checker.h"
-#include "rtc_base/synchronization/rw_lock_wrapper.h"
 #include "rtc_base/strings/string_builder.h"
+#include "rtc_base/synchronization/rw_lock_wrapper.h"
 #include "rtc_base/task_queue.h"
 #include "rtc_base/thread_annotations.h"
 #include "rtc_base/trace_event.h"
 #include "system_wrappers/include/clock.h"
 #include "system_wrappers/include/cpu_info.h"
 #include "system_wrappers/include/metrics.h"
+#include "test/rtp_file_writer.h"
 #include "video/call_stats.h"
 #include "video/send_delay_stats.h"
 #include "video/stats_counter.h"
@@ -377,6 +379,9 @@ class Call final : public webrtc::Call,
   // Declared last since it will issue callbacks from a task queue. Declaring it
   // last ensures that it is destroyed first and any running tasks are finished.
   std::unique_ptr<RtpTransportControllerSendInterface> transport_send_;
+
+  std::unique_ptr<test::RtpFileWriter> rtp_file_writer_;
+
   RTC_DISALLOW_COPY_AND_ASSIGN(Call);
 };
 }  // namespace internal
@@ -1313,6 +1318,26 @@ PacketReceiver::DeliveryStatus Call::DeliverPacket(
   if (RtpHeaderParser::IsRtcp(packet.cdata(), packet.size()))
     return DeliverRtcp(media_type, packet.cdata(), packet.size());
 
+  if (config_.dump_rtp &&
+      media_type == MediaType::VIDEO) {
+    if (!rtp_file_writer_) {
+      static std::atomic<int> num_writers{};
+      int n = num_writers.fetch_add(1);
+      std::stringstream ss;
+      ss << "/path/to/where/you/want/to/create/rtp/dumps/"
+         <<"rtp_dump" << n << "_" << this;
+      printf("RTP dump: %s\n", ss.str().c_str());
+      rtp_file_writer_.reset(
+          test::RtpFileWriter::Create(test::RtpFileWriter::kRtpDump, ss.str()));
+    }
+
+    test::RtpPacket p;
+    memcpy(p.data, packet.data(), packet.size());
+    p.length = packet.size();
+    p.original_length = packet.size();
+    p.time_ms = clock_->TimeInMilliseconds() - start_ms_;
+    RTC_CHECK(rtp_file_writer_->WritePacket(&p));
+  }
   return DeliverRtp(media_type, std::move(packet), packet_time);
 }
 
