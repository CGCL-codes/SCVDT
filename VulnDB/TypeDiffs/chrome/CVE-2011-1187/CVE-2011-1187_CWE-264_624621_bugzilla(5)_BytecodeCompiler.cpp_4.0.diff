diff --git a/js/src/frontend/BytecodeCompiler.cpp b/js/src/frontend/BytecodeCompiler.cpp
--- a/js/src/frontend/BytecodeCompiler.cpp
+++ b/js/src/frontend/BytecodeCompiler.cpp
@@ -151,17 +151,18 @@ DefineGlobals(JSContext *cx, GlobalScope
         }
     }
 
     return true;
 }
 
 JSScript *
 frontend::CompileScript(JSContext *cx, JSObject *scopeChain, StackFrame *callerFrame,
-                        JSPrincipals *principals, uint32 tcflags,
+                        JSPrincipals *principals, JSPrincipals *originPrincipals,
+                        uint32 tcflags,
                         const jschar *chars, size_t length,
                         const char *filename, uintN lineno, JSVersion version,
                         JSString *source /* = NULL */,
                         uintN staticLevel /* = 0 */)
 {
     TokenKind tt;
     ParseNode *pn;
     JSScript *script;
@@ -172,17 +173,17 @@ frontend::CompileScript(JSContext *cx, J
 
     /*
      * The scripted callerFrame can only be given for compile-and-go scripts
      * and non-zero static level requires callerFrame.
      */
     JS_ASSERT_IF(callerFrame, tcflags & TCF_COMPILE_N_GO);
     JS_ASSERT_IF(staticLevel != 0, callerFrame);
 
-    Parser parser(cx, principals, callerFrame);
+    Parser parser(cx, principals, originPrincipals, callerFrame);
     if (!parser.init(chars, length, filename, lineno, version))
         return NULL;
 
     TokenStream &tokenStream = parser.tokenStream;
 
     BytecodeEmitter bce(&parser, tokenStream.getLineno());
     if (!bce.init(cx, TreeContext::USED_AS_TREE_CONTEXT))
         return NULL;
@@ -376,21 +377,22 @@ frontend::CompileScript(JSContext *cx, J
     goto out;
 }
 
 /*
  * Compile a JS function body, which might appear as the value of an event
  * handler attribute in an HTML <INPUT> tag.
  */
 bool
-frontend::CompileFunctionBody(JSContext *cx, JSFunction *fun, JSPrincipals *principals,
+frontend::CompileFunctionBody(JSContext *cx, JSFunction *fun,
+                              JSPrincipals *principals, JSPrincipals *originPrincipals,
                               Bindings *bindings, const jschar *chars, size_t length,
                               const char *filename, uintN lineno, JSVersion version)
 {
-    Parser parser(cx, principals);
+    Parser parser(cx, principals, originPrincipals);
     if (!parser.init(chars, length, filename, lineno, version))
         return false;
 
     TokenStream &tokenStream = parser.tokenStream;
 
     BytecodeEmitter funbce(&parser, tokenStream.getLineno());
     if (!funbce.init(cx, TreeContext::USED_AS_TREE_CONTEXT))
         return false;
