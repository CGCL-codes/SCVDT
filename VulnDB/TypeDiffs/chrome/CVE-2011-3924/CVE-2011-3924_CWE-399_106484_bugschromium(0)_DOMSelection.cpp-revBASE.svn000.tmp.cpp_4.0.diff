--- C:/Temp/TMPSKY~1/DOMSelection.cpp-revBASE.svn000.tmp.cpp	Mon Dec 12 12:53:43 2011
+++ C:/src/Chromium/src/third_party/WebKit/Source/WebCore/page/DOMSelection.cpp	Mon Dec 12 12:44:53 2011
@@ -407,26 +407,23 @@
 
     RefPtr<Range> range = selection->selection().toNormalizedRange();
     ExceptionCode ec = 0;
+    // We don't support discontiguous selection. We don't do anything if r and range don't intersect.
     if (r->compareBoundaryPoints(Range::START_TO_START, range.get(), ec) == -1) {
-        // We don't support discontiguous selection. We don't do anything if r and range don't intersect.
-        if (r->compareBoundaryPoints(Range::START_TO_END, range.get(), ec) > -1) {
-            if (r->compareBoundaryPoints(Range::END_TO_END, range.get(), ec) == -1)
+        if (ec == 0 && r->compareBoundaryPoints(Range::START_TO_END, range.get(), ec) > -1) {
+            if (ec == 0 && r->compareBoundaryPoints(Range::END_TO_END, range.get(), ec) == -1)
                 // The original range and r intersect.
                 selection->setSelection(VisibleSelection(r->startPosition(), range->endPosition(), DOWNSTREAM));
-            else
+            else if (ec == 0)
                 // r contains the original range.
                 selection->setSelection(VisibleSelection(r));
         }
-    } else {
-        // We don't support discontiguous selection. We don't do anything if r and range don't intersect.
-        if (r->compareBoundaryPoints(Range::END_TO_START, range.get(), ec) < 1) {
-            if (r->compareBoundaryPoints(Range::END_TO_END, range.get(), ec) == -1)
-                // The original range contains r.
-                selection->setSelection(VisibleSelection(range.get()));
-            else
-                // The original range and r intersect.
-                selection->setSelection(VisibleSelection(range->startPosition(), r->endPosition(), DOWNSTREAM));
-        }
+    } else if (ec == 0 && r->compareBoundaryPoints(Range::END_TO_START, range.get(), ec) < 1) {
+        if (ec == 0 && r->compareBoundaryPoints(Range::END_TO_END, range.get(), ec) == -1)
+            // The original range contains r.
+            selection->setSelection(VisibleSelection(range.get()));
+        else if (ec == 0)
+            // The original range and r intersect.
+            selection->setSelection(VisibleSelection(range->startPosition(), r->endPosition(), DOWNSTREAM));
     }
 }
 
