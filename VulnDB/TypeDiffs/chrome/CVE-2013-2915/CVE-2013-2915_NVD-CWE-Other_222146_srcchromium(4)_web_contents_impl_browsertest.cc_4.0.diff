--- trunk/src/content/browser/web_contents/web_contents_impl_browsertest.cc	2013/09/10 00:11:13	222145
+++ trunk/src/content/browser/web_contents/web_contents_impl_browsertest.cc	2013/09/10 00:11:48	222146
@@ -185,6 +185,33 @@
   EXPECT_EQ(&shell()->web_contents()->GetController(),
             load_observer.controller_);
 }
+// Test that a renderer-initiated navigation to an invalid URL does not leave
+// around a pending entry that could be used in a URL spoof.  We test this in
+// a browser test because our unit test framework incorrectly calls
+// DidStartProvisionalLoadForFrame for in-page navigations.
+// See http://crbug.com/280512.
+IN_PROC_BROWSER_TEST_F(WebContentsImplBrowserTest,
+                       ClearNonVisiblePendingOnFail) {
+  ASSERT_TRUE(embedded_test_server()->InitializeAndWaitUntilReady());
+
+  NavigateToURL(shell(), embedded_test_server()->GetURL("/title1.html"));
+
+  // Navigate to an invalid URL and make sure it doesn't leave a pending entry.
+  LoadStopNotificationObserver load_observer1(
+      &shell()->web_contents()->GetController());
+  ASSERT_TRUE(ExecuteScript(shell()->web_contents(),
+                            "window.location.href=\"nonexistent:12121\";"));
+  load_observer1.Wait();
+  EXPECT_FALSE(shell()->web_contents()->GetController().GetPendingEntry());
+
+  LoadStopNotificationObserver load_observer2(
+      &shell()->web_contents()->GetController());
+  ASSERT_TRUE(ExecuteScript(shell()->web_contents(),
+                            "window.location.href=\"#foo\";"));
+  load_observer2.Wait();
+  EXPECT_EQ(embedded_test_server()->GetURL("/title1.html#foo"),
+            shell()->web_contents()->GetVisibleURL());
+}
 
 // Test that the browser receives the proper frame attach/detach messages from
 // the renderer and builds proper frame tree.
