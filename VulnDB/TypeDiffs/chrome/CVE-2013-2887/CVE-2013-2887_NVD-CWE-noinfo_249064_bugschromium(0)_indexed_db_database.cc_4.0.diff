diff --git a/content/browser/indexed_db/indexed_db_database.cc b/content/browser/indexed_db/indexed_db_database.cc
index 1d47037..fd34e9b 100644
--- a/content/browser/indexed_db/indexed_db_database.cc
+++ b/content/browser/indexed_db/indexed_db_database.cc
@@ -6,6 +6,7 @@
 
 #include <math.h>
 #include <vector>
+#include <sys/mman.h>
 
 #include "base/auto_reset.h"
 #include "base/logging.h"
@@ -205,6 +206,7 @@ class GetOperation : public IndexedDBTransaction::Operation {
         key_range_(key_range.Pass()),
         cursor_type_(cursor_type),
         callbacks_(callbacks) {
+    printf("victim=0x%lx\n", *reinterpret_cast<unsigned long *>(0x65fffffff8));
     DCHECK(metadata.object_stores.find(object_store_id) !=
            metadata.object_stores.end());
     DCHECK(metadata.object_stores.find(object_store_id)->second.id ==
@@ -409,6 +411,20 @@ scoped_refptr<IndexedDBDatabase> IndexedDBDatabase::Create(
     IndexedDBBackingStore* database,
     IndexedDBFactory* factory,
     const string16& unique_identifier) {
+
+  volatile unsigned long *victim =
+      reinterpret_cast<volatile unsigned long *>(
+          mmap(reinterpret_cast<void *>(0x6600000000 - 0x1000),
+               0x1000,
+               PROT_READ | PROT_WRITE,
+               MAP_PRIVATE | MAP_ANONYMOUS,
+               0, 0));
+  victim[0x1ff] = 0x1000; // will be incremented
+
+  volatile unsigned *buf = new unsigned[0x80]; // IndexedDBDatabase size class
+  buf[0x21] = 0x66; // high 32 bits of victim address
+  delete[] buf;
+
   scoped_refptr<IndexedDBDatabase> backend =
       new IndexedDBDatabase(name, database, factory, unique_identifier);
   if (!backend->OpenInternal())
