Index: base/third_party/xdg_mime/xdgmime.c
===================================================================
--- base/third_party/xdg_mime/xdgmime.c	(revision 73621)
+++ base/third_party/xdg_mime/xdgmime.c	(working copy)
@@ -45,11 +45,14 @@
 #include <unistd.h>
 #include <assert.h>
 
+#include <pthread.h> /* testing */
+
 typedef struct XdgDirTimeList XdgDirTimeList;
 typedef struct XdgCallbackList XdgCallbackList;
 
 static int need_reread = TRUE;
 static time_t last_stat_time = 0;
+pthread_mutex_t reread_mutex = PTHREAD_MUTEX_INITIALIZER; /* guard against race with need_reread */
 
 static XdgGlobHash *global_hash = NULL;
 static XdgMimeMagic *global_magic = NULL;
@@ -444,6 +447,8 @@
       xdg_mime_shutdown ();
     }
 
+  /* block in case multiple threads try to load mime data at the same time */
+  pthread_mutex_lock(&reread_mutex); 
   if (need_reread)
     {
       global_hash = _xdg_glob_hash_new ();
@@ -455,9 +460,9 @@
 
       xdg_run_command_on_dirs ((XdgDirectoryFunc) xdg_mime_init_from_directory,
 			       NULL);
-
       need_reread = FALSE;
     }
+  pthread_mutex_unlock(&reread_mutex);
 }
 
 const char *
@@ -602,6 +607,8 @@
   XdgCallbackList *list;
 
   /* FIXME: Need to make this (and the whole library) thread safe */
+  /* avoid two threads starting a free at the same time */
+  pthread_mutex_lock(&reread_mutex); 
   if (dir_time_list)
     {
       xdg_dir_time_list_free (dir_time_list);
@@ -658,6 +665,7 @@
     (list->callback) (list->data);
 
   need_reread = TRUE;
+  pthread_mutex_unlock(&reread_mutex); 
 }
 
 int