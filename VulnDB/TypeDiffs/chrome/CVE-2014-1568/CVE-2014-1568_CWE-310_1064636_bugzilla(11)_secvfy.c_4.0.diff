diff --git a/lib/cryptohi/secvfy.c b/lib/cryptohi/secvfy.c
--- a/lib/cryptohi/secvfy.c
+++ b/lib/cryptohi/secvfy.c
@@ -103,18 +103,27 @@ struct VFYContextStr {
      *
      * Use the "buffer" union member to reference the buffer.
      * Note: do not take the size of the "buffer" union member.  Take
      * the size of the union or some other union member instead.
      */
     union {
 	unsigned char buffer[1];
 
-	/* the encoded DigestInfo from a RSA PKCS#1 signature */
-	unsigned char pkcs1DigestInfo[SGN_PKCS1_DIGESTINFO_LENGTH_MAX];
+	/* The maximum encoded DigestInfo from a RSA PKCS#1 signature is:
+     * 10 + HASH_LENGTH_MAX + the largest encoding of an supported digest Oid.
+     * At the time of writing, this number was 9.
+     * Should the set of allowed digests ever get extended beyond this set:
+     *   SEC_OID_MD5, SEC_OID_SHA1, SEC_OID_SHA224, SEC_OID_SHA256,
+     *   SEC_OID_SHA384, SEC_OID_SHA512
+     * then the maximum number will have to be recalculated.
+     * For now we assume that 99 bytes should be a safe maximum.
+     * See also the implementation of SGN_VerifyPKCS1DigestInfo.
+     */
+	unsigned char pkcs1DigestInfo[10 + HASH_LENGTH_MAX + 99];
 	/* the full DSA signature... 40 bytes */
 	unsigned char dsasig[DSA_MAX_SIGNATURE_LEN];
 	/* the full ECDSA signature */
 	unsigned char ecdsasig[2 * MAX_ECKEY_LEN];
     } u;
     unsigned int pkcs1DigestInfoLen;
     void * wincx;
     void *hashcx;
