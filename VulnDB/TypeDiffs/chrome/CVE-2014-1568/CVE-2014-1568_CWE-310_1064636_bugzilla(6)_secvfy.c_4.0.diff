diff --git a/lib/cryptohi/secvfy.c b/lib/cryptohi/secvfy.c
--- a/lib/cryptohi/secvfy.c
+++ b/lib/cryptohi/secvfy.c
@@ -21,16 +21,21 @@
 ** Recover the DigestInfo from an RSA PKCS#1 signature.
 **
 ** If givenDigestAlg != SEC_OID_UNKNOWN, copy givenDigestAlg to digestAlgOut.
 ** Otherwise, parse the DigestInfo structure and store the decoded digest
 ** algorithm into digestAlgOut.
 **
 ** Store the encoded DigestInfo into digestInfo.
 ** Store the DigestInfo length into digestInfoLen.
+**
+** This function does *not* verify that the AlgorithmIdentifier in the
+** DigestInfo identifies givenDigestAlg or that the DigestInfo is encoded
+** correctly; verifyPKCS1DigestInfo does that.
+**
 ** XXX this is assuming that the signature algorithm has WITH_RSA_ENCRYPTION
 */
 static SECStatus
 recoverPKCS1DigestInfo(SECOidTag givenDigestAlg,
                        /*out*/ SECOidTag* digestAlgOut,
                        /*out*/ unsigned char* digestInfo,
                        /*out*/ unsigned int* digestInfoLen,
                        unsigned int maxDigestInfoLen, SECKEYPublicKey* key,
@@ -53,20 +58,30 @@ recoverPKCS1DigestInfo(SECOidTag givenDi
     if (PK11_VerifyRecover(key, sig, &digestInfoItem, wincx) != SECSuccess) {
         PORT_SetError(SEC_ERROR_BAD_SIGNATURE);
         return SECFailure;
     }
 
     *digestInfoLen = digestInfoItem.len;
 
     if (givenDigestAlg != SEC_OID_UNKNOWN) {
+        /* We don't need to parse the DigestInfo if the caller gave us the
+         * digest algorithm to use. Later verifyPKCS1DigestInfo will verify
+         * that the DigestInfo identifies the given digest algorithm and that
+         * the DigestInfo is encoded absolutely correctly.
+         */
         *digestAlgOut = givenDigestAlg;
         return SECSuccess;
     }
 
+    /* The caller didn't specify a digest algorithm to use, so choose the
+     * digest algorithm by parsing the AlgorithmIdentifier within the
+     * DigestInfo.
+     */
+
     di = SGN_DecodeDigestInfo(&digestInfoItem);
     if (!di) {
         PORT_SetError(SEC_ERROR_BAD_SIGNATURE);
         return SECFailure;
     }
 
     *digestAlgOut = SECOID_GetAlgorithmTag(&di->digestAlgorithm);
     SGN_DestroyDigestInfo(di);
