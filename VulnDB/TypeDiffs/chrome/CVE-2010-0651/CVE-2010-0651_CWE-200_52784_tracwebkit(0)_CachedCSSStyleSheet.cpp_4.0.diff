Index: /trunk/WebCore/loader/CachedCSSStyleSheet.cpp

===================================================================

--- /trunk/WebCore/loader/CachedCSSStyleSheet.cpp	(revision 52783)

+++ /trunk/WebCore/loader/CachedCSSStyleSheet.cpp	(revision 52784)

@@ -72,9 +72,9 @@

 }

     

-const String CachedCSSStyleSheet::sheetText(bool enforceMIMEType) const 

+const String CachedCSSStyleSheet::sheetText(bool enforceMIMEType, bool* hasValidMIMEType) const 

 { 

     ASSERT(!isPurgeable());

 

-    if (!m_data || m_data->isEmpty() || !canUseSheet(enforceMIMEType))

+    if (!m_data || m_data->isEmpty() || !canUseSheet(enforceMIMEType, hasValidMIMEType))

         return String();

     

@@ -123,10 +123,10 @@

 }

 

-bool CachedCSSStyleSheet::canUseSheet(bool enforceMIMEType) const

+bool CachedCSSStyleSheet::canUseSheet(bool enforceMIMEType, bool* hasValidMIMEType) const

 {

     if (errorOccurred())

         return false;

         

-    if (!enforceMIMEType)

+    if (!enforceMIMEType && !hasValidMIMEType)

         return true;

 

@@ -139,5 +139,10 @@

     // folks can use standards mode for local HTML documents.

     String mimeType = extractMIMETypeFromMediaType(response().httpHeaderField("Content-Type"));

-    return mimeType.isEmpty() || equalIgnoringCase(mimeType, "text/css") || equalIgnoringCase(mimeType, "application/x-unknown-content-type");

+    bool typeOK = mimeType.isEmpty() || equalIgnoringCase(mimeType, "text/css") || equalIgnoringCase(mimeType, "application/x-unknown-content-type");

+    if (hasValidMIMEType)

+        *hasValidMIMEType = typeOK;

+    if (!enforceMIMEType)

+        return true;

+    return typeOK;

 }

  

