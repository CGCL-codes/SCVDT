diff --git a/Source/WebCore/svg/SVGLength.cpp b/Source/WebCore/svg/SVGLength.cpp
index 281ee14..d3c2139 100644
--- a/Source/WebCore/svg/SVGLength.cpp
+++ b/Source/WebCore/svg/SVGLength.cpp
@@ -160,30 +160,40 @@ float SVGLength::value(const SVGElement* context) const
 
 float SVGLength::value(const SVGElement* context, ExceptionCode& ec) const
 {
+    float val = 0;
+
     switch (extractType(m_unit)) {
     case LengthTypeUnknown:
         ec = NOT_SUPPORTED_ERR;
         return 0;
     case LengthTypeNumber:
-        return m_valueInSpecifiedUnits;
+        val = m_valueInSpecifiedUnits;
     case LengthTypePercentage:
-        return convertValueFromPercentageToUserUnits(m_valueInSpecifiedUnits / 100, context, ec);
+        val = convertValueFromPercentageToUserUnits(m_valueInSpecifiedUnits / 100, context, ec);
     case LengthTypeEMS:
-        return convertValueFromEMSToUserUnits(m_valueInSpecifiedUnits, context, ec);
+        val = convertValueFromEMSToUserUnits(m_valueInSpecifiedUnits, context, ec);
     case LengthTypeEXS:
-        return convertValueFromEXSToUserUnits(m_valueInSpecifiedUnits, context, ec);
+        val = convertValueFromEXSToUserUnits(m_valueInSpecifiedUnits, context, ec);
     case LengthTypePX:
-        return m_valueInSpecifiedUnits;
+        val = m_valueInSpecifiedUnits;
     case LengthTypeCM:
-        return m_valueInSpecifiedUnits / 2.54f * cssPixelsPerInch;
+        val = m_valueInSpecifiedUnits / 2.54f * cssPixelsPerInch;
     case LengthTypeMM:
-        return m_valueInSpecifiedUnits / 25.4f * cssPixelsPerInch;
+        val = m_valueInSpecifiedUnits / 25.4f * cssPixelsPerInch;
     case LengthTypeIN:
-        return m_valueInSpecifiedUnits * cssPixelsPerInch;
+        val = m_valueInSpecifiedUnits * cssPixelsPerInch;
     case LengthTypePT:
-        return m_valueInSpecifiedUnits / 72 * cssPixelsPerInch;
+        val = m_valueInSpecifiedUnits / 72 * cssPixelsPerInch;
     case LengthTypePC:
-        return m_valueInSpecifiedUnits / 6 * cssPixelsPerInch;
+        val = m_valueInSpecifiedUnits / 6 * cssPixelsPerInch;
+    }
+
+    static const float max = std::numeric_limits<float>::max();
+    if (val >= -max && val <= max)
+        return val;
+    else {
+        ec = NOT_SUPPORTED_ERR;
+        return 0;
     }
 
     ASSERT_NOT_REACHED();