Index: /trunk/Source/WebCore/loader/HistoryController.cpp

===================================================================

--- /trunk/Source/WebCore/loader/HistoryController.cpp	(revision 77704)

+++ /trunk/Source/WebCore/loader/HistoryController.cpp	(revision 77705)

@@ -237,5 +237,5 @@

     // - plus, it only makes sense for the top level of the operation through the frametree,

     // as opposed to happening for some/one of the page commits that might happen soon

-    HistoryItem* currentItem = page->backForward()->currentItem();    

+    RefPtr<HistoryItem> currentItem = page->backForward()->currentItem();

     page->backForward()->setCurrentItem(targetItem);

     Settings* settings = m_frame->settings();

@@ -246,7 +246,7 @@

     // navigations can commit immediately (such as about:blank).  We must be sure that

     // all frames have provisional items set before the commit.

-    recursiveSetProvisionalItem(targetItem, currentItem, type);

+    recursiveSetProvisionalItem(targetItem, currentItem.get(), type);

     // Now that all other frames have provisional items, do the actual navigation.

-    recursiveGoToItem(targetItem, currentItem, type);

+    recursiveGoToItem(targetItem, currentItem.get(), type);

 }

 

@@ -403,6 +403,7 @@

 #endif

     FrameLoadType type = frameLoader->loadType();

-    if (isBackForwardLoadType(type) ||

-        ((type == FrameLoadTypeReload || type == FrameLoadTypeReloadFromOrigin) && !frameLoader->provisionalDocumentLoader()->unreachableURL().isEmpty())) {

+    if (isBackForwardLoadType(type)

+        || isReplaceLoadTypeWithProvisionalItem(type)

+        || ((type == FrameLoadTypeReload || type == FrameLoadTypeReloadFromOrigin) && !frameLoader->provisionalDocumentLoader()->unreachableURL().isEmpty())) {

         // Once committed, we want to use current item for saving DocState, and

         // the provisional item for restoring state.

@@ -424,4 +425,11 @@

 }

 

+bool HistoryController::isReplaceLoadTypeWithProvisionalItem(FrameLoadType type)

+{

+    // Going back to an error page in a subframe can trigger a FrameLoadTypeReplace

+    // while m_provisionalItem is set, so we need to commit it.

+    return type == FrameLoadTypeReplace && m_provisionalItem;

+}

+

 void HistoryController::recursiveUpdateForCommit()

 {

@@ -472,4 +480,23 @@

 

     addVisitedLink(page, m_frame->document()->url());

+    page->mainFrame()->loader()->history()->recursiveUpdateForSameDocumentNavigation();

+}

+

+void HistoryController::recursiveUpdateForSameDocumentNavigation()

+{

+    // The frame that navigated will now have a null provisional item.

+    // Ignore it and its children.

+    if (!m_provisionalItem)

+        return;

+

+    // Commit the provisional item.

+    m_frameLoadComplete = false;

+    m_previousItem = m_currentItem;

+    m_currentItem = m_provisionalItem;

+    m_provisionalItem = 0;

+

+    // Iterate over the rest of the tree.

+    for (Frame* child = m_frame->tree()->firstChild(); child; child = child->tree()->nextSibling())

+        child->loader()->history()->recursiveUpdateForSameDocumentNavigation();

 }

 

@@ -621,15 +648,4 @@

 

         int size = childItems.size();

-

-        // Sanity checks for http://webkit.org/b/52819.

-        if (size > 0) {

-            // fromItem should have same number of children according to hasSameFrames,

-            // but crash dumps suggest it might have 0.

-            if (!fromItem->children().size())

-                CRASH();

-            // itemsAreClones checked fromItem->hasSameFrames(item). Check vice versa.

-            if (!item->hasSameFrames(fromItem))

-                CRASH();

-        }

 

         for (int i = 0; i < size; ++i) {

@@ -671,12 +687,4 @@

 bool HistoryController::itemsAreClones(HistoryItem* item1, HistoryItem* item2) const

 {

-    // It appears that one of the items can be null in release builds, leading

-    // to the crashes seen in http://webkit.org/b/52819.  For now, try to

-    // narrow it down with a more specific crash.

-    if (!item1)

-        CRASH();

-    if (!item2)

-        CRASH();

-

     // If the item we're going to is a clone of the item we're at, then we do

     // not need to load it again.  The current frame tree and the frame tree

