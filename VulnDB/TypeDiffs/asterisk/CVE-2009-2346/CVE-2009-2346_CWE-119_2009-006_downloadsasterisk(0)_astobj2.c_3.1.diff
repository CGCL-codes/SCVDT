Index: astobj2.c
===================================================================
--- astobj2.c	(revision 215957)
+++ astobj2.c	(revision 217888)
@@ -413,7 +413,7 @@
 	const enum search_flags flags,
 	ao2_callback_fn cb_fn, void *arg)
 {
-	int i, last;	/* search boundaries */
+	int i, start, last;	/* search boundaries */
 	void *ret = NULL;
 
 	if (INTERNAL_OBJ(c) == NULL)	/* safety check on the argument */
@@ -443,14 +443,16 @@
 	 * (this only for the time being. We need to optimize this.)
 	 */
 	if ((flags & OBJ_POINTER))	/* we know hash can handle this case */
-		i = c->hash_fn(arg, flags & OBJ_POINTER) % c->n_buckets;
+		start = i = c->hash_fn(arg, flags & OBJ_POINTER) % c->n_buckets;
 	else			/* don't know, let's scan all buckets */
 		i = -1;		/* XXX this must be fixed later. */
 
 	/* determine the search boundaries: i..last-1 */
 	if (i < 0) {
-		i = 0;
+		start = i = 0;
 		last = c->n_buckets;
+	} else if ((flags & OBJ_CONTINUE)) {
+		last = c->n_buckets;
 	} else {
 		last = i + 1;
 	}
@@ -505,6 +507,17 @@
 			}
 		}
 		AST_LIST_TRAVERSE_SAFE_END
+
+		if (ret) {
+			/* This assumes OBJ_MULTIPLE with !OBJ_NODATA is still not implemented */
+			break;
+		}
+
+		if (i == c->n_buckets - 1 && (flags & OBJ_POINTER) && (flags & OBJ_CONTINUE)) {
+			/* Move to the beginning to ensure we check every bucket */
+			i = -1;
+			last = start;
+		}
 	}
 	ao2_unlock(c);
 	return ret;
