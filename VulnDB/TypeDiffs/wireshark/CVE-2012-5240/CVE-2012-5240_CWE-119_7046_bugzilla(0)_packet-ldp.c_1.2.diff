Index: epan/dissectors/packet-ldp.c
===================================================================
--- epan/dissectors/packet-ldp.c	(revision 42839)
+++ epan/dissectors/packet-ldp.c	(working copy)
@@ -11,6 +11,8 @@
  * (c) Copyright 2011, Shobhank Sharma <ssharma5@ncsu.edu>
  *   -  update the VCCV bitmaps as per RFC 5885
  *
+ * (c) Copyright 2012, Aditya Ambadkar and Diana Chris <arambadk,dvchris@ncsu.edu>
+ *   -  support for the flowlabel sub-tlv as per RFC 6391
  *
  * Wireshark - Network traffic analyzer
  * By Gerald Combs <gerald@wireshark.org>
@@ -184,6 +186,9 @@
 static int hf_ldp_tlv_fec_vc_intparam_vccv_cvtype_bfd2 = -1;
 static int hf_ldp_tlv_fec_vc_intparam_vccv_cvtype_bfd3 = -1;
 static int hf_ldp_tlv_fec_vc_intparam_vccv_cvtype_bfd4 = -1;
+static int hf_ldp_tlv_fec_vc_intparam_flowlabel_t = -1;                    /* Flow label interface parameter RFC6391 */
+static int hf_ldp_tlv_fec_vc_intparam_flowlabel_r = -1;                    /* Flow label interface parameter RFC6391 */
+static int hf_ldp_tlv_fec_vc_intparam_flowlabel_res = -1;                  /* Flow label interface parameter RFC6391 */
 static int hf_ldp_tlv_lspid_act_flg = -1;
 static int hf_ldp_tlv_lspid_cr_lsp = -1;
 static int hf_ldp_tlv_lspid_ldpid = -1;
@@ -275,7 +280,6 @@
 static int hf_ldp_tlv_intparam_vccv_cvtype_lspping = -1;
 static int hf_ldp_tlv_intparam_vccv_cvtype_bfd = -1;
 
-
 static int ett_ldp = -1;
 static int ett_ldp_header = -1;
 static int ett_ldp_ldpid = -1;
@@ -587,9 +591,8 @@
 #define FEC_VC_INTERFACEPARAM_FCSRETENT    0x0A
 #define FEC_VC_INTERFACEPARAM_TDMOPTION    0x0B
 #define FEC_VC_INTERFACEPARAM_VCCV         0x0C
+#define FEC_VC_INTERFACEPARAM_FLOWLABEL    0x17
 
-
-
 static const value_string fec_vc_interfaceparm[] = {
   {FEC_VC_INTERFACEPARAM_MTU,           "MTU"},
   {FEC_VC_INTERFACEPARAM_MAXCATMCELLS,  "Max Concatenated ATM cells"},
@@ -603,6 +606,7 @@
   {FEC_VC_INTERFACEPARAM_FCSRETENT,     "FCS retention indicator"},
   {FEC_VC_INTERFACEPARAM_TDMOPTION,     "TDM options"},
   {FEC_VC_INTERFACEPARAM_VCCV,          "VCCV"},
+  {FEC_VC_INTERFACEPARAM_FLOWLABEL,     "Flow Label"},
   {0, NULL},
 };
 
@@ -611,8 +615,11 @@
     "Control Word NOT Present"
 };
 
+static const true_false_string fec_vc_ = {
+    "Control Word Present",
+    "Control Word NOT Present"
+};
 
-
 static const value_string tlv_atm_merge_vals[] = {
     {0, "Merge not supported"},
     {1, "VP merge supported"},
@@ -877,7 +884,10 @@
         &hf_ldp_tlv_fec_vc_intparam_vccv_cvtype_bfd1,
         &hf_ldp_tlv_fec_vc_intparam_vccv_cvtype_bfd2,
         &hf_ldp_tlv_fec_vc_intparam_vccv_cvtype_bfd3,
-        &hf_ldp_tlv_fec_vc_intparam_vccv_cvtype_bfd4
+        &hf_ldp_tlv_fec_vc_intparam_vccv_cvtype_bfd4,
+        &hf_ldp_tlv_fec_vc_intparam_flowlabel_t,
+        &hf_ldp_tlv_fec_vc_intparam_flowlabel_r,
+        &hf_ldp_tlv_fec_vc_intparam_flowlabel_res,
     };
 
     proto_tree *ti, *val_tree, *fec_tree=NULL;
@@ -2760,7 +2770,10 @@
         32 - hf_ldp_tlv_fec_vc_intparam_vccv_cvtype_bfd1,
         33 - hf_ldp_tlv_fec_vc_intparam_vccv_cvtype_bfd2,
         34 - hf_ldp_tlv_fec_vc_intparam_vccv_cvtype_bfd3,
-        35 - hf_ldp_tlv_fec_vc_intparam_vccv_cvtype_bfd4
+        35 - hf_ldp_tlv_fec_vc_intparam_vccv_cvtype_bfd4,
+        36 - hf_ldp_tlv_fec_vc_intparam_flowlabel_t,
+        37 - hf_ldp_tlv_fec_vc_intparam_flowlabel_r,
+        38 - hf_ldp_tlv_fec_vc_intparam_flowlabel_res
     };
 #endif
     proto_tree *ti = proto_tree_add_text(tree, tvb, offset, rem, "Interface Parameter");
@@ -2855,6 +2868,12 @@
         proto_tree_add_item(vccvtype_tree, *interface_parameters_hf[31], tvb, offset+3, 1, ENC_BIG_ENDIAN);
         proto_tree_add_item(vccvtype_tree, *interface_parameters_hf[32], tvb, offset+3, 1, ENC_BIG_ENDIAN);
         break;
+    case FEC_VC_INTERFACEPARAM_FLOWLABEL:
+        proto_item_append_text(ti,": Flow Label for Pseudowire");
+        proto_tree_add_item(vcintparam_tree, *interface_parameters_hf[36], tvb, offset+2, 1, ENC_BIG_ENDIAN);
+        proto_tree_add_item(vcintparam_tree, *interface_parameters_hf[37], tvb, offset+2, 1, ENC_BIG_ENDIAN);
+        proto_tree_add_item(vcintparam_tree, *interface_parameters_hf[38], tvb, offset+2, 2, ENC_BIG_ENDIAN);
+        break;
     default: /* unknown */
         proto_item_append_text(ti," unknown");
         proto_tree_add_text(vcintparam_tree,tvb, offset+2, (intparam_len -2), "Unknown data");
@@ -3561,6 +3580,15 @@
           { "BFD BFD PW-ACH-encapsulated, for PW Fault Detection and AC/PW Fault Status Signaling", "ldp.msg.tlv.fec.vc.intparam.vccv.cvtype_bfd4", FT_BOOLEAN, 8,
             NULL, 0x20, "VC FEC Interface Param VCCV CV Type BFD PW-ACH-encapsulated, for PW Fault Detection and AC/PW Fault Status Signaling", HFILL }},
 
+	{ &hf_ldp_tlv_fec_vc_intparam_flowlabel_t,
+          { "Flow Label Transmit bit", "ldp.msg.tlv.fec.vc.intparam.flowlabel.t", FT_UINT8, BASE_DEC, NULL, 0x80, NULL, HFILL}},
+
+	{ &hf_ldp_tlv_fec_vc_intparam_flowlabel_r,
+          { "Flow Label Receive bit", "ldp.msg.tlv.fec.vc.intparam.flowlabel.r", FT_UINT8, BASE_DEC, NULL, 0x40, NULL, HFILL}},
+
+    { &hf_ldp_tlv_fec_vc_intparam_flowlabel_res,
+          { "Flow Label Reserved", "ldp.msg.tlv.fec.vc.intparam.flowlabel.res", FT_UINT16, BASE_HEX, NULL, 0x3FFF, NULL, HFILL}},
+
         { &hf_ldp_tlv_lspid_act_flg,
           { "Action Indicator Flag", "ldp.msg.tlv.lspid.actflg", FT_UINT16, BASE_HEX,
             VALS(ldp_act_flg_vals), 0x000F, NULL, HFILL}},
