Index: epan/dissectors/packet-etch.c

===================================================================

--- epan/dissectors/packet-etch.c	(revision 48313)

+++ epan/dissectors/packet-etch.c	(working copy)

@@ -40,6 +40,7 @@

 #include <wsutil/file_util.h>
 #include <epan/packet.h>
 #include <epan/prefs.h>
+#include <epan/expert.h>
 #include <epan/report_err.h>
 #include <epan/dissectors/packet-tcp.h>
 
@@ -153,11 +154,10 @@

 /*
  * forward declared dissector methods
  */
-static void read_key_value(unsigned int *offset, tvbuff_t *tvb,
-                          proto_tree *etch_tree);
-static void read_struct(unsigned int *offset, tvbuff_t *tvb,
-                        proto_tree *etch_tree, int add_type_field);
-static int read_value(unsigned int *offset, tvbuff_t *tvb, proto_tree *etch_tree,
+static void read_key_value(unsigned int *offset, tvbuff_t *tvb, proto_tree *etch_tree, packet_info *pinfo);
+static void read_struct(unsigned int *offset, tvbuff_t *tvb, proto_tree *etch_tree,
+                        packet_info *pinfo, int add_type_field);
+static int read_value(unsigned int *offset, tvbuff_t *tvb, proto_tree *etch_tree, packet_info *pinfo, 
                       int asWhat);
 void proto_reg_handoff_etch(void);
 
@@ -409,11 +409,12 @@

  * read the length of an array and add it to tree
  */
 static guint32
-read_length(unsigned int *offset, tvbuff_t *tvb, proto_tree *etch_tree)
+read_length(unsigned int *offset, tvbuff_t *tvb, proto_tree *etch_tree, packet_info *pinfo)
 {
   guint32 length;
   int     length_of_array_length_type;
   guint8  tiny;
+  proto_item* ti;
 
   tiny = tvb_get_guint8(tvb, *offset);
 
@@ -441,9 +442,14 @@

       return 0;             /* error! */
     }
   }
-  proto_tree_add_item(etch_tree, hf_etch_length, tvb, *offset,
+  ti = proto_tree_add_item(etch_tree, hf_etch_length, tvb, *offset,
                       length_of_array_length_type, ENC_BIG_ENDIAN);
   (*offset) += length_of_array_length_type;
+  if (tvb_reported_length_remaining(tvb, *offset + length) < 0) {
+    expert_add_info_format(pinfo, ti, PI_MALFORMED, PI_ERROR, "Length bigger than packet size");
+    length = tvb_reported_length_remaining(tvb, *offset);
+  }
+
   return length;
 }
 
@@ -452,9 +458,9 @@

  * read an array from tvb and add it to tree
  */
 static void
-read_array(unsigned int *offset, tvbuff_t *tvb, proto_tree *etch_tree)
+read_array(unsigned int *offset, tvbuff_t *tvb, proto_tree *etch_tree, packet_info *pinfo)
 {
-  int length;
+  guint32 length;
 
   /*  array type */
   read_type(offset, tvb, etch_tree);
@@ -467,10 +473,10 @@

   (*offset)++;
 
   /*  Array length */
-  length = read_length(offset, tvb, etch_tree);
+  length = read_length(offset, tvb, etch_tree, pinfo);
 
   for (; length > 0; length--) {
-    read_value(offset, tvb, etch_tree, hf_etch_value);
+    read_value(offset, tvb, etch_tree, pinfo, hf_etch_value);
   }
   /*  terminaton */
   read_type(offset, tvb, etch_tree);
@@ -481,12 +487,12 @@

  * read a sequence of bytes and add them to tree
  */
 static void
-read_bytes(unsigned int *offset, tvbuff_t *tvb, proto_tree *etch_tree)
+read_bytes(unsigned int *offset, tvbuff_t *tvb, proto_tree *etch_tree, packet_info *pinfo)
 {
   int length;
 
   read_type(offset, tvb, etch_tree);
-  length = read_length(offset, tvb, etch_tree);
+  length = read_length(offset, tvb, etch_tree, pinfo);
   proto_tree_add_item(etch_tree, hf_etch_bytes, tvb, *offset, length,
                       ENC_NA);
   (*offset) += length;
@@ -496,13 +502,13 @@

  * read a string and add it to tree
  */
 static void
-read_string(unsigned int *offset, tvbuff_t *tvb, proto_tree *etch_tree)
+read_string(unsigned int *offset, tvbuff_t *tvb, proto_tree *etch_tree, packet_info *pinfo)
 {
   int byteLength;
 
   read_type(offset, tvb, etch_tree);
 
-  byteLength = read_length(offset, tvb, etch_tree);
+  byteLength = read_length(offset, tvb, etch_tree, pinfo);
 
   proto_tree_add_item(etch_tree, hf_etch_string, tvb, *offset,
                       byteLength, ENC_ASCII|ENC_NA);
@@ -548,7 +554,7 @@

  * read a value and add it to tree
  */
 static int
-read_value(unsigned int *offset, tvbuff_t *tvb, proto_tree *etch_tree,
+read_value(unsigned int *offset, tvbuff_t *tvb, proto_tree *etch_tree, packet_info *pinfo, 
            int asWhat)
 {
   guint8 type_code;
@@ -564,13 +570,13 @@

 
   switch(type_code) {
   case ETCH_TC_CUSTOM:
-    read_struct(offset, tvb, etch_tree, 1);
+    read_struct(offset, tvb, etch_tree, pinfo, 1);
     break;
   case ETCH_TC_ARRAY:
-    read_array(offset, tvb, etch_tree);
+    read_array(offset, tvb, etch_tree, pinfo);
     break;
   case ETCH_TC_STRING:
-    read_string(offset, tvb, etch_tree);
+    read_string(offset, tvb, etch_tree, pinfo);
     break;
   case ETCH_TC_FLOAT:
     read_number(offset, tvb, etch_tree, hf_etch_float, type_code);
@@ -591,7 +597,7 @@

     read_number(offset, tvb, etch_tree, hf_etch_byte, type_code);
     break;
   case ETCH_TC_BYTES:
-    read_bytes(offset, tvb, etch_tree);
+    read_bytes(offset, tvb, etch_tree, pinfo);
     break;
   default:
     read_number(offset, tvb, etch_tree, asWhat, type_code);
@@ -603,7 +609,7 @@

  * read a struct and add it to tree
  */
 static void
-read_struct(unsigned int *offset, tvbuff_t *tvb, proto_tree *etch_tree,
+read_struct(unsigned int *offset, tvbuff_t *tvb, proto_tree *etch_tree, packet_info *pinfo,
             int add_type_field)
 {
   proto_item *ti;
@@ -619,13 +625,13 @@

     read_type(offset, tvb, new_tree);
   }
   /* struct type as hash */
-  read_value(offset, tvb, new_tree, hf_etch_value);
+  read_value(offset, tvb, new_tree, pinfo, hf_etch_value);
 
   /* struct length */
-  length = read_value(offset, tvb, new_tree, hf_etch_length);
+  length = read_value(offset, tvb, new_tree, pinfo, hf_etch_length);
 
   for (i = 0; i < length; i++) {
-    read_key_value(offset, tvb, new_tree);
+    read_key_value(offset, tvb, new_tree, pinfo);
   }
 
   /* termination */
@@ -636,7 +642,7 @@

  * read a key value pair and add it to tree
  */
 static void
-read_key_value(unsigned int *offset, tvbuff_t *tvb, proto_tree *etch_tree)
+read_key_value(unsigned int *offset, tvbuff_t *tvb, proto_tree *etch_tree, packet_info *pinfo)
 {
   proto_tree *new_tree;
   proto_tree *new_tree_bck;
@@ -653,7 +659,7 @@

   ti = proto_tree_add_item(new_tree, hf_etch_keyname, tvb, *offset, 0,
                            ENC_NA);
   new_tree = proto_item_add_subtree(ti, ett_etch_key);
-  read_value(offset, tvb, new_tree, hf_etch_value);
+  read_value(offset, tvb, new_tree, pinfo, hf_etch_value);
 
   /* append the symbol of the key */
   if(gbl_have_symbol == TRUE){
@@ -665,7 +671,7 @@

   ti = proto_tree_add_item(new_tree_bck, hf_etch_valuename, tvb, *offset,
                            0, ENC_NA);
   new_tree = proto_item_add_subtree(ti, ett_etch_value);
-  read_value(offset, tvb, new_tree, hf_etch_value);
+  read_value(offset, tvb, new_tree, pinfo, hf_etch_value);
 }
 
 /*************************************************************************/
@@ -710,45 +716,35 @@

 static void
 dissect_etch_message(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree)
 {
+  unsigned int offset;
+  proto_item *ti;
+  proto_tree *etch_tree;
+
   /* We've a full PDU: 8 bytes + pdu_packetlen bytes  */
-  emem_strbuf_t *colInfo = NULL;
+  emem_strbuf_t *colInfo = get_column_info(tvb);    /* get current symbol */
 
-  if (pinfo->cinfo || tree) {
-    colInfo = get_column_info(tvb);    /* get current symbol */
-  }
+  col_set_str(pinfo->cinfo, COL_PROTOCOL, "ETCH");
+  gbl_pdu_counter++;
 
-  if (pinfo->cinfo) {
-    col_set_str(pinfo->cinfo, COL_PROTOCOL, "ETCH");
-    gbl_pdu_counter++;
-
-    /* Switch to another frame? => Clear column */
-    if (pinfo->fd->num != gbl_old_frame_num) {
-      col_clear(pinfo->cinfo, COL_INFO);
-      gbl_pdu_counter = 0;
-    }
-    gbl_old_frame_num = pinfo->fd->num;
-
-    col_set_writable(pinfo->cinfo, TRUE);
-    col_append_fstr(pinfo->cinfo, COL_INFO, "%s ", colInfo->str);
+  /* Switch to another frame? => Clear column */
+  if (pinfo->fd->num != gbl_old_frame_num) {
+    col_clear(pinfo->cinfo, COL_INFO);
+    gbl_pdu_counter = 0;
   }
+  gbl_old_frame_num = pinfo->fd->num;
 
-  if (tree) {
-    /* we are being asked for details */
-    unsigned int offset;
-    proto_item *ti;
-    proto_tree *etch_tree;
+  col_append_fstr(pinfo->cinfo, COL_INFO, "%s ", colInfo->str);
 
-    ti = proto_tree_add_protocol_format(tree, proto_etch, tvb, 0, -1,
+  /* we are being asked for details */  
+  ti = proto_tree_add_protocol_format(tree, proto_etch, tvb, 0, -1,
                                         "ETCH Protocol: %s", colInfo->str);
 
-    offset = 9;
-    etch_tree = proto_item_add_subtree(ti, ett_etch);
-    proto_tree_add_item(etch_tree, hf_etch_sig, tvb, 0, 4, ENC_BIG_ENDIAN);
-    proto_tree_add_item(etch_tree, hf_etch_length, tvb, 4, 4, ENC_BIG_ENDIAN);
-    proto_tree_add_item(etch_tree, hf_etch_version, tvb, 8, 1, ENC_NA);
-    read_struct(&offset, tvb, etch_tree, 0);
-  }
-
+  offset = 9;
+  etch_tree = proto_item_add_subtree(ti, ett_etch);
+  proto_tree_add_item(etch_tree, hf_etch_sig, tvb, 0, 4, ENC_BIG_ENDIAN);
+  proto_tree_add_item(etch_tree, hf_etch_length, tvb, 4, 4, ENC_BIG_ENDIAN);
+  proto_tree_add_item(etch_tree, hf_etch_version, tvb, 8, 1, ENC_NA);
+  read_struct(&offset, tvb, etch_tree, pinfo, 0);
 }
 
 /*
