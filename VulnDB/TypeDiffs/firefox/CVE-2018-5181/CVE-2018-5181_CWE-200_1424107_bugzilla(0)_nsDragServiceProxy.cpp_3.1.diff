diff -r 21f73ed97e6a -r fc5cbc7e0d7f widget/nsDragServiceProxy.cpp
--- a/widget/nsDragServiceProxy.cpp	Wed Feb 07 15:46:57 2018 -0800
+++ b/widget/nsDragServiceProxy.cpp	Fri Feb 09 10:43:53 2018 +0900
@@ -29,6 +29,25 @@
 {
 }
 
+static void
+GetPrincipalURIFromNode(nsCOMPtr<nsIDOMNode>& sourceNode,
+                        nsCString& aPrincipalURISpec)
+{
+  nsCOMPtr<nsINode> node = do_QueryInterface(sourceNode);
+  if (!node) {
+    return;
+  }
+
+  nsCOMPtr<nsIPrincipal> principal = node->NodePrincipal();
+  nsCOMPtr<nsIURI> principalURI;
+  nsresult rv = principal->GetURI(getter_AddRefs(principalURI));
+  if (NS_FAILED(rv)) {
+    return;
+  }
+
+  principalURI->GetSpec(aPrincipalURISpec);
+}
+
 nsresult
 nsDragServiceProxy::InvokeDragSessionImpl(nsIArray* aArrayTransferables,
                                           nsIScriptableRegion* aRegion,
@@ -45,6 +64,9 @@
                                                   child->Manager(),
                                                   nullptr);
 
+  nsCString principalURISpec;
+  GetPrincipalURIFromNode(mSourceNode, principalURISpec);
+
   LayoutDeviceIntRect dragRect;
   if (mHasImage || mSelection) {
     nsPresContext* pc;
@@ -76,7 +98,7 @@
         mozilla::Unused <<
           child->SendInvokeDragSession(dataTransfers, aActionType, surfaceData,
                                        stride, static_cast<uint8_t>(dataSurface->GetFormat()),
-                                       dragRect);
+                                       dragRect, principalURISpec);
         StartDragSession();
         return NS_OK;
       }
@@ -84,7 +106,8 @@
   }
 
   mozilla::Unused << child->SendInvokeDragSession(dataTransfers, aActionType,
-                                                  mozilla::void_t(), 0, 0, dragRect);
+                                                  mozilla::void_t(), 0, 0, dragRect,
+                                                  principalURISpec);
   StartDragSession();
   return NS_OK;
 }
