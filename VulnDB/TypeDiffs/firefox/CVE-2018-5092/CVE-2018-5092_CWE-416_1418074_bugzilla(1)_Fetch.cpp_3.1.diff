diff -r 1b3d0019f65e -r f47b24dad390 dom/fetch/Fetch.cpp
--- a/dom/fetch/Fetch.cpp	Mon Jan 08 15:12:31 2018 +0200
+++ b/dom/fetch/Fetch.cpp	Fri Dec 22 10:05:48 2017 +0100
@@ -164,14 +164,11 @@
 
 class WorkerFetchResolver final : public FetchDriverObserver
 {
-  friend class MainThreadFetchRunnable;
-  friend class WorkerDataAvailableRunnable;
-  friend class WorkerFetchResponseEndBase;
-  friend class WorkerFetchResponseEndRunnable;
-  friend class WorkerFetchResponseRunnable;
-
+  // Thread-safe:
   RefPtr<PromiseWorkerProxy> mPromiseProxy;
   RefPtr<AbortSignalProxy> mSignalProxy;
+
+  // Touched only on the worker thread.
   RefPtr<FetchObserver> mFetchObserver;
 
 public:
@@ -223,6 +220,31 @@
     return mSignalProxy->GetSignalForTargetThread();
   }
 
+  PromiseWorkerProxy*
+  PromiseProxy() const
+  {
+    MOZ_ASSERT(NS_IsMainThread());
+    return mPromiseProxy;
+  }
+
+  Promise*
+  WorkerPromise(WorkerPrivate* aWorkerPrivate) const
+  {
+    MOZ_ASSERT(aWorkerPrivate);
+    aWorkerPrivate->AssertIsOnWorkerThread();
+
+    return mPromiseProxy->WorkerPromise();
+  }
+
+  FetchObserver*
+  GetFetchObserver(WorkerPrivate* aWorkerPrivate) const
+  {
+    MOZ_ASSERT(aWorkerPrivate);
+    aWorkerPrivate->AssertIsOnWorkerThread();
+
+    return mFetchObserver;
+  }
+
   void
   OnResponseAvailableInternal(InternalResponse* aResponse) override;
 
@@ -235,6 +257,22 @@
   void
   OnDataAvailable() override;
 
+  void
+  Shutdown(WorkerPrivate* aWorkerPrivate)
+  {
+    MOZ_ASSERT(aWorkerPrivate);
+    aWorkerPrivate->AssertIsOnWorkerThread();
+
+    mPromiseProxy->CleanUp();
+
+    mFetchObserver = nullptr;
+
+    if (mSignalProxy) {
+      mSignalProxy->Shutdown();
+      mSignalProxy = nullptr;
+    }
+  }
+
 private:
    WorkerFetchResolver(PromiseWorkerProxy* aProxy,
                        AbortSignalProxy* aSignalProxy,
@@ -327,7 +365,7 @@
   {
     AssertIsOnMainThread();
     RefPtr<FetchDriver> fetch;
-    RefPtr<PromiseWorkerProxy> proxy = mResolver->mPromiseProxy;
+    RefPtr<PromiseWorkerProxy> proxy = mResolver->PromiseProxy();
 
     {
       // Acquire the proxy mutex while getting data from the WorkerPrivate...
@@ -554,11 +592,13 @@
     MOZ_ASSERT(aWorkerPrivate);
     aWorkerPrivate->AssertIsOnWorkerThread();
 
-    RefPtr<Promise> promise = mResolver->mPromiseProxy->WorkerPromise();
+    RefPtr<Promise> promise = mResolver->WorkerPromise(aWorkerPrivate);
+    RefPtr<FetchObserver> fetchObserver =
+      mResolver->GetFetchObserver(aWorkerPrivate);
 
     if (mInternalResponse->Type() != ResponseType::Error) {
-      if (mResolver->mFetchObserver) {
-        mResolver->mFetchObserver->SetState(FetchState::Complete);
+      if (fetchObserver) {
+        fetchObserver->SetState(FetchState::Complete);
       }
 
       RefPtr<nsIGlobalObject> global = aWorkerPrivate->GlobalScope();
@@ -567,8 +607,8 @@
                      mResolver->GetAbortSignalForTargetThread());
       promise->MaybeResolve(response);
     } else {
-      if (mResolver->mFetchObserver) {
-        mResolver->mFetchObserver->SetState(FetchState::Errored);
+      if (fetchObserver) {
+        fetchObserver->SetState(FetchState::Errored);
       }
 
       ErrorResult result;
@@ -596,9 +636,12 @@
     MOZ_ASSERT(aWorkerPrivate);
     aWorkerPrivate->AssertIsOnWorkerThread();
 
-    if (mResolver->mFetchObserver &&
-        mResolver->mFetchObserver->State() == FetchState::Requesting) {
-      mResolver->mFetchObserver->SetState(FetchState::Responding);
+    RefPtr<FetchObserver> fetchObserver =
+      mResolver->GetFetchObserver(aWorkerPrivate);
+
+    if (fetchObserver &&
+        fetchObserver->State() == FetchState::Requesting) {
+      fetchObserver->SetState(FetchState::Responding);
     }
 
     return true;
@@ -620,17 +663,7 @@
   void
   WorkerRunInternal(WorkerPrivate* aWorkerPrivate)
   {
-    MOZ_ASSERT(aWorkerPrivate);
-    aWorkerPrivate->AssertIsOnWorkerThread();
-
-    mResolver->mPromiseProxy->CleanUp();
-
-    mResolver->mFetchObserver = nullptr;
-
-    if (mResolver->mSignalProxy) {
-      mResolver->mSignalProxy->Shutdown();
-      mResolver->mSignalProxy = nullptr;
-    }
+    mResolver->Shutdown(aWorkerPrivate);
   }
 };
 
@@ -653,8 +686,7 @@
   WorkerRun(JSContext* aCx, WorkerPrivate* aWorkerPrivate) override
   {
     if (mReason == FetchDriverObserver::eAborted) {
-      RefPtr<Promise> promise = mResolver->mPromiseProxy->WorkerPromise();
-      promise->MaybeReject(NS_ERROR_DOM_ABORT_ERR);
+      mResolver->WorkerPromise(aWorkerPrivate)->MaybeReject(NS_ERROR_DOM_ABORT_ERR);
     }
 
     WorkerRunInternal(aWorkerPrivate);
