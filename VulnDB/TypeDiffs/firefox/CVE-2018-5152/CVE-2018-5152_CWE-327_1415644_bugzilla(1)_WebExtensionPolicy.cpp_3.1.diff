diff -r f96e8d3c0225 -r 39e131181d44 toolkit/components/extensions/WebExtensionPolicy.cpp
--- a/toolkit/components/extensions/WebExtensionPolicy.cpp	Mon Feb 26 12:03:55 2018 -0800
+++ b/toolkit/components/extensions/WebExtensionPolicy.cpp	Sat Mar 03 16:28:18 2018 -0800
@@ -11,6 +11,7 @@
 #include "mozilla/ResultExtensions.h"
 #include "nsEscape.h"
 #include "nsIDocShell.h"
+#include "nsIObserver.h"
 #include "nsISubstitutingProtocolHandler.h"
 #include "nsNetUtil.h"
 #include "nsPrintfCString.h"
@@ -34,6 +35,9 @@
   <body>\n\
 </html>";
 
+static const char kRestrictedDomainPref[] =
+  "extensions.webextensions.restrictedDomains";
+
 static inline ExtensionPolicyService&
 EPS()
 {
@@ -265,6 +269,106 @@
   return EPS().IsExtensionProcess();
 }
 
+namespace {
+  /**
+   * Maintains a dynamically updated AtomSet based on the comma-separated
+   * values in the given string pref.
+   */
+  class AtomSetPref : public nsIObserver
+                    , public nsSupportsWeakReference
+  {
+  public:
+    NS_DECL_ISUPPORTS
+    NS_DECL_NSIOBSERVER
+
+    static already_AddRefed<AtomSetPref>
+    Create(const char* aPref)
+    {
+      RefPtr<AtomSetPref> self = new AtomSetPref(aPref);
+      Preferences::AddWeakObserver(self, aPref);
+      return self.forget();
+    }
+
+    const AtomSet& Get() const;
+
+    bool Contains(const nsAtom* aAtom) const
+    {
+      return Get().Contains(aAtom);
+    }
+
+  protected:
+    virtual ~AtomSetPref() = default;
+
+    AtomSetPref(const char* aPref) : mPref(aPref)
+    {}
+
+  private:
+    mutable Maybe<AtomSet> mAtomSet;
+    const char* mPref;
+  };
+
+  const AtomSet&
+  AtomSetPref::Get() const
+  {
+    if (mAtomSet.isNothing()) {
+      nsAutoCString eltsString;
+      Unused << Preferences::GetCString(mPref, eltsString);
+
+      AutoTArray<nsString, 32> elts;
+      for (const nsACString& elt : eltsString.Split(',')) {
+        elts.AppendElement(NS_ConvertUTF8toUTF16(elt));
+        elts.LastElement().StripWhitespace();
+      }
+      mAtomSet.emplace(elts);
+    }
+
+    return mAtomSet.ref();
+  }
+
+  NS_IMETHODIMP
+  AtomSetPref::Observe(nsISupports *aSubject, const char *aTopic,
+                       const char16_t *aData)
+  {
+    mAtomSet.reset();
+    return NS_OK;
+  }
+
+  NS_IMPL_ISUPPORTS(AtomSetPref, nsIObserver, nsISupportsWeakReference)
+};
+
+/* static */ bool
+WebExtensionPolicy::IsRestrictedDoc(const DocInfo& aDoc)
+{
+  // With the exception of top-level about:blank documents with null
+  // principals, we never match documents that have non-codebase principals,
+  // including those with null principals or system principals.
+  if (aDoc.Principal() && !aDoc.Principal()->GetIsCodebasePrincipal()) {
+    return true;
+  }
+
+  return IsRestrictedURI(aDoc.PrincipalURL());
+}
+
+/* static */ bool
+WebExtensionPolicy::IsRestrictedURI(const URLInfo &aURI)
+{
+  static RefPtr<AtomSetPref> domains;
+  if (!domains) {
+    domains = AtomSetPref::Create(kRestrictedDomainPref);
+    ClearOnShutdown(&domains);
+  }
+
+  if (domains->Contains(aURI.HostAtom())) {
+    return true;
+  }
+
+  if (AddonManagerWebAPI::IsValidSite(aURI.URI())) {
+    return true;
+  }
+
+  return false;
+}
+
 nsCString
 WebExtensionPolicy::BackgroundPageHTML() const
 {
@@ -363,7 +467,6 @@
   }
 }
 
-
 bool
 WebExtensionContentScript::Matches(const DocInfo& aDoc) const
 {
@@ -390,20 +493,11 @@
     return true;
   }
 
-  // With the exception of top-level about:blank documents with null
-  // principals, we never match documents that have non-codebase principals,
-  // including those with null principals or system principals.
-  if (aDoc.Principal() && !aDoc.Principal()->GetIsCodebasePrincipal()) {
+  if (mExtension->IsRestrictedDoc(aDoc)) {
     return false;
   }
 
-  // Content scripts are not allowed on pages that have elevated
-  // privileges via mozAddonManager (see bug 1280234)
-  if (AddonManagerWebAPI::IsValidSite(aDoc.PrincipalURL().URI())) {
-    return false;
-  }
-
-  URLInfo urlinfo(aDoc.PrincipalURL());
+  auto& urlinfo = aDoc.PrincipalURL();
   if (mHasActiveTabPermission && aDoc.ShouldMatchActiveTabPermission() &&
       MatchPattern::MatchesAllURLs(urlinfo)) {
     return true;
@@ -431,7 +525,7 @@
     return false;
   }
 
-  if (AddonManagerWebAPI::IsValidSite(aURL.URI())) {
+  if (mExtension->IsRestrictedURI(aURL)) {
     return false;
   }
 
