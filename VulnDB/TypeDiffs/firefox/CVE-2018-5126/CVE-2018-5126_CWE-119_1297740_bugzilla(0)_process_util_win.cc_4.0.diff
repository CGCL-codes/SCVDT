diff -r 31fb2dec46ba -r 8fdd1dda7efc ipc/chromium/src/base/process_util_win.cc
--- a/ipc/chromium/src/base/process_util_win.cc	Mon Jan 08 10:47:06 2018 -0500
+++ b/ipc/chromium/src/base/process_util_win.cc	Mon Jan 08 10:07:16 2018 +0100
@@ -271,6 +271,63 @@
   free(lpAttributeList);
 }
 
+// The next two functions are from chromium/base/environment.cc
+//
+// Parses a null-terminated input string of an environment block. The key is
+// placed into the given string, and the total length of the line, including
+// the terminating null, is returned.
+static size_t ParseEnvLine(const NativeEnvironmentString::value_type* input,
+                    NativeEnvironmentString* key) {
+  // Skip to the equals or end of the string, this is the key.
+  size_t cur = 0;
+  while (input[cur] && input[cur] != '=')
+    cur++;
+  *key = NativeEnvironmentString(&input[0], cur);
+
+  // Now just skip to the end of the string.
+  while (input[cur])
+    cur++;
+  return cur + 1;
+}
+
+std::wstring AlterEnvironment(const wchar_t* env,
+                              const EnvironmentMap& changes) {
+  std::wstring result;
+
+  // First copy all unmodified values to the output.
+  size_t cur_env = 0;
+  std::wstring key;
+  while (env[cur_env]) {
+    const wchar_t* line = &env[cur_env];
+    size_t line_length = ParseEnvLine(line, &key);
+
+    // Keep only values not specified in the change vector.
+    EnvironmentMap::const_iterator found_change = changes.find(key);
+    if (found_change == changes.end())
+      result.append(line, line_length);
+
+    cur_env += line_length;
+  }
+
+  // Now append all modified and new values.
+  for (EnvironmentMap::const_iterator i = changes.begin();
+       i != changes.end(); ++i) {
+    if (!i->second.empty()) {
+      result.append(i->first);
+      result.push_back('=');
+      result.append(i->second);
+      result.push_back(0);
+    }
+  }
+
+  // An additional null marks the end of the list. We always need a double-null
+  // in case nothing was added above.
+  if (result.empty())
+    result.push_back(0);
+  result.push_back(0);
+  return result;
+}
+
 bool LaunchApp(const std::wstring& cmdline,
                const LaunchOptions& options,
                ProcessHandle* process_handle) {
@@ -323,10 +380,18 @@
     }
   }
 
+  dwCreationFlags |= CREATE_UNICODE_ENVIRONMENT;
+  LPTCH original_environment = GetEnvironmentStrings();
+  base::NativeEnvironmentString new_environment =
+    AlterEnvironment(original_environment, options.env_map);
+  // Ignore return value? What can we do?
+  FreeEnvironmentStrings(original_environment);
+  LPVOID new_env_ptr = (void*)new_environment.data();
+
   PROCESS_INFORMATION process_info;
   BOOL createdOK = CreateProcess(NULL,
                      const_cast<wchar_t*>(cmdline.c_str()), NULL, NULL,
-                     bInheritHandles, dwCreationFlags, NULL, NULL,
+                     bInheritHandles, dwCreationFlags, new_env_ptr, NULL,
                      &startup_info, &process_info);
   if (lpAttributeList)
     FreeThreadAttributeList(lpAttributeList);
