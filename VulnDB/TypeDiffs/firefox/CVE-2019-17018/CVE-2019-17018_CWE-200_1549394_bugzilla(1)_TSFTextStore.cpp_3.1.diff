diff -r 4cbaf7e27c2e -r f081bea8c605 widget/windows/TSFTextStore.cpp
--- a/widget/windows/TSFTextStore.cpp	Thu Nov 21 06:23:40 2019 +0000
+++ b/widget/windows/TSFTextStore.cpp	Thu Nov 21 06:23:40 2019 +0000
@@ -906,6 +906,11 @@
         case IS_XML:
           AppendLiteral("IS_XML");
           break;
+#ifndef __MINGW32__
+        case IS_PRIVATE:
+          AppendLiteral("IS_PRIVATE");
+          break;
+#endif
         default:
           AppendPrintf("Unknown Value(%d)", inputScope);
           break;
@@ -1913,7 +1918,8 @@
     return false;
   }
 
-  SetInputScope(aContext.mHTMLInputType, aContext.mHTMLInputInputmode);
+  SetInputScope(aContext.mHTMLInputType, aContext.mHTMLInputInputmode,
+                aContext.mInPrivateBrowsing);
 
   // Create document manager
   RefPtr<ITfThreadMgr> threadMgr = sThreadMgr;
@@ -3958,8 +3964,17 @@
 }
 
 void TSFTextStore::SetInputScope(const nsString& aHTMLInputType,
-                                 const nsString& aHTMLInputInputMode) {
+                                 const nsString& aHTMLInputInputMode,
+                                 bool aInPrivateBrowsing) {
   mInputScopes.Clear();
+
+#ifndef __MINGW32__
+  // MinGW build environment doesn't have IS_PRIVATE yet.
+  if (aInPrivateBrowsing) {
+    mInputScopes.AppendElement(IS_PRIVATE);
+  }
+#endif
+
   if (aHTMLInputType.IsEmpty() || aHTMLInputType.EqualsLiteral("text")) {
     if (aHTMLInputInputMode.EqualsLiteral("url")) {
       mInputScopes.AppendElement(IS_URL);
@@ -6718,7 +6733,8 @@
     if (sEnabledTextStore) {
       RefPtr<TSFTextStore> textStore(sEnabledTextStore);
       textStore->SetInputScope(aContext.mHTMLInputType,
-                               aContext.mHTMLInputInputmode);
+                               aContext.mHTMLInputInputmode,
+                               aContext.mInPrivateBrowsing);
     }
     return;
   }
