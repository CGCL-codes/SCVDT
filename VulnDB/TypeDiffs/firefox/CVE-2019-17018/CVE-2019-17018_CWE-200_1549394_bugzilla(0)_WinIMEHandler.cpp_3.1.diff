diff -r 3688c3274a4d -r 4cbaf7e27c2e widget/windows/WinIMEHandler.cpp
--- a/widget/windows/WinIMEHandler.cpp	Wed Nov 20 18:05:42 2019 +0000
+++ b/widget/windows/WinIMEHandler.cpp	Thu Nov 21 06:23:40 2019 +0000
@@ -639,14 +639,12 @@
   if (sIsInTSFMode || !sSetInputScopes || aWindow->Destroyed()) {
     return;
   }
-  UINT arraySize = 0;
-  const InputScope* scopes = nullptr;
+  AutoTArray<InputScope, 3> scopes;
+
   // http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html
   if (aHTMLInputType.IsEmpty() || aHTMLInputType.EqualsLiteral("text")) {
     if (aHTMLInputInputmode.EqualsLiteral("url")) {
-      static const InputScope inputScopes[] = {IS_URL};
-      scopes = &inputScopes[0];
-      arraySize = ArrayLength(inputScopes);
+      scopes.AppendElement(IS_URL);
     } else if (aHTMLInputInputmode.EqualsLiteral("mozAwesomebar")) {
       // Even if Awesomebar has focus, user may not input URL directly.
       // However, on-screen keyboard for URL should be shown because it has
@@ -665,77 +663,47 @@
       //      been updated yet even after the OS is upgraded to Win8 or later,
       //      it's installed as IMM-IME.
       if (TSFTextStore::ShouldSetInputScopeOfURLBarToDefault()) {
-        static const InputScope inputScopes[] = {IS_DEFAULT};
-        scopes = &inputScopes[0];
-        arraySize = ArrayLength(inputScopes);
+        scopes.AppendElement(IS_DEFAULT);
       } else {
-        static const InputScope inputScopes[] = {IS_URL};
-        scopes = &inputScopes[0];
-        arraySize = ArrayLength(inputScopes);
+        scopes.AppendElement(IS_URL);
       }
     } else if (aHTMLInputInputmode.EqualsLiteral("email")) {
-      static const InputScope inputScopes[] = {IS_EMAIL_SMTPEMAILADDRESS};
-      scopes = &inputScopes[0];
-      arraySize = ArrayLength(inputScopes);
+      scopes.AppendElement(IS_EMAIL_SMTPEMAILADDRESS);
     } else if (aHTMLInputInputmode.EqualsLiteral("tel")) {
-      static const InputScope inputScopes[] = {
-          IS_TELEPHONE_LOCALNUMBER, IS_TELEPHONE_FULLTELEPHONENUMBER};
-      scopes = &inputScopes[0];
-      arraySize = ArrayLength(inputScopes);
+      scopes.AppendElement(IS_TELEPHONE_LOCALNUMBER);
+      scopes.AppendElement(IS_TELEPHONE_FULLTELEPHONENUMBER);
     } else if (aHTMLInputInputmode.EqualsLiteral("numeric")) {
-      static const InputScope inputScopes[] = {IS_NUMBER};
-      scopes = &inputScopes[0];
-      arraySize = ArrayLength(inputScopes);
+      scopes.AppendElement(IS_NUMBER);
     } else {
-      static const InputScope inputScopes[] = {IS_DEFAULT};
-      scopes = &inputScopes[0];
-      arraySize = ArrayLength(inputScopes);
+      scopes.AppendElement(IS_DEFAULT);
     }
   } else if (aHTMLInputType.EqualsLiteral("url")) {
-    static const InputScope inputScopes[] = {IS_URL};
-    scopes = &inputScopes[0];
-    arraySize = ArrayLength(inputScopes);
+    scopes.AppendElement(IS_URL);
   } else if (aHTMLInputType.EqualsLiteral("search")) {
-    static const InputScope inputScopes[] = {IS_SEARCH};
-    scopes = &inputScopes[0];
-    arraySize = ArrayLength(inputScopes);
+    scopes.AppendElement(IS_SEARCH);
   } else if (aHTMLInputType.EqualsLiteral("email")) {
-    static const InputScope inputScopes[] = {IS_EMAIL_SMTPEMAILADDRESS};
-    scopes = &inputScopes[0];
-    arraySize = ArrayLength(inputScopes);
+    scopes.AppendElement(IS_EMAIL_SMTPEMAILADDRESS);
   } else if (aHTMLInputType.EqualsLiteral("password")) {
-    static const InputScope inputScopes[] = {IS_PASSWORD};
-    scopes = &inputScopes[0];
-    arraySize = ArrayLength(inputScopes);
+    scopes.AppendElement(IS_PASSWORD);
   } else if (aHTMLInputType.EqualsLiteral("datetime") ||
              aHTMLInputType.EqualsLiteral("datetime-local")) {
-    static const InputScope inputScopes[] = {IS_DATE_FULLDATE,
-                                             IS_TIME_FULLTIME};
-    scopes = &inputScopes[0];
-    arraySize = ArrayLength(inputScopes);
+    scopes.AppendElement(IS_DATE_FULLDATE);
+    scopes.AppendElement(IS_TIME_FULLTIME);
   } else if (aHTMLInputType.EqualsLiteral("date") ||
              aHTMLInputType.EqualsLiteral("month") ||
              aHTMLInputType.EqualsLiteral("week")) {
-    static const InputScope inputScopes[] = {IS_DATE_FULLDATE};
-    scopes = &inputScopes[0];
-    arraySize = ArrayLength(inputScopes);
+    scopes.AppendElement(IS_DATE_FULLDATE);
   } else if (aHTMLInputType.EqualsLiteral("time")) {
-    static const InputScope inputScopes[] = {IS_TIME_FULLTIME};
-    scopes = &inputScopes[0];
-    arraySize = ArrayLength(inputScopes);
+    scopes.AppendElement(IS_TIME_FULLTIME);
   } else if (aHTMLInputType.EqualsLiteral("tel")) {
-    static const InputScope inputScopes[] = {IS_TELEPHONE_FULLTELEPHONENUMBER,
-                                             IS_TELEPHONE_LOCALNUMBER};
-    scopes = &inputScopes[0];
-    arraySize = ArrayLength(inputScopes);
+    scopes.AppendElement(IS_TELEPHONE_FULLTELEPHONENUMBER);
+    scopes.AppendElement(IS_TELEPHONE_LOCALNUMBER);
   } else if (aHTMLInputType.EqualsLiteral("number")) {
-    static const InputScope inputScopes[] = {IS_NUMBER};
-    scopes = &inputScopes[0];
-    arraySize = ArrayLength(inputScopes);
+    scopes.AppendElement(IS_NUMBER);
   }
-  if (scopes && arraySize > 0) {
-    sSetInputScopes(aWindow->GetWindowHandle(), scopes, arraySize, nullptr, 0,
-                    nullptr, nullptr);
+  if (!scopes.IsEmpty()) {
+    sSetInputScopes(aWindow->GetWindowHandle(), scopes.Elements(),
+                    scopes.Length(), nullptr, 0, nullptr, nullptr);
   }
 }
 
