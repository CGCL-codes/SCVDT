diff -r 4cbaf7e27c2e -r f081bea8c605 widget/windows/WinIMEHandler.cpp
--- a/widget/windows/WinIMEHandler.cpp	Thu Nov 21 06:23:40 2019 +0000
+++ b/widget/windows/WinIMEHandler.cpp	Thu Nov 21 06:23:40 2019 +0000
@@ -452,7 +452,7 @@
   if (!sIsInTSFMode) {
     // MSDN says we need to set IS_DEFAULT to avoid memory leak when we use
     // SetInputScopes API. Use an empty string to do this.
-    SetInputScopeForIMM32(aWindow, EmptyString(), EmptyString());
+    SetInputScopeForIMM32(aWindow, EmptyString(), EmptyString(), false);
   }
 #endif  // #ifdef NS_ENABLE_TSF
   AssociateIMEContext(aWindow, true);
@@ -513,7 +513,8 @@
   } else {
     // Set at least InputScope even when TextStore is not available.
     SetInputScopeForIMM32(aWindow, aInputContext.mHTMLInputType,
-                          aInputContext.mHTMLInputInputmode);
+                          aInputContext.mHTMLInputInputmode,
+                          aInputContext.mInPrivateBrowsing);
   }
 #endif  // #ifdef NS_ENABLE_TSF
 
@@ -635,12 +636,19 @@
 // static
 void IMEHandler::SetInputScopeForIMM32(nsWindow* aWindow,
                                        const nsAString& aHTMLInputType,
-                                       const nsAString& aHTMLInputInputmode) {
+                                       const nsAString& aHTMLInputInputmode,
+                                       bool aInPrivateBrowsing) {
   if (sIsInTSFMode || !sSetInputScopes || aWindow->Destroyed()) {
     return;
   }
   AutoTArray<InputScope, 3> scopes;
 
+#ifndef __MINGW32__
+  if (aInPrivateBrowsing) {
+    scopes.AppendElement(IS_PRIVATE);
+  }
+#endif
+
   // http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html
   if (aHTMLInputType.IsEmpty() || aHTMLInputType.EqualsLiteral("text")) {
     if (aHTMLInputInputmode.EqualsLiteral("url")) {
