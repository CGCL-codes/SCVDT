diff -r 86e5424380a2 -r aeb7865ac419 gfx/thebes/gfxFcPlatformFontList.cpp
--- a/gfx/thebes/gfxFcPlatformFontList.cpp	Sat May 26 16:23:36 2018 +0200
+++ b/gfx/thebes/gfxFcPlatformFontList.cpp	Mon May 28 10:09:25 2018 +0100
@@ -2429,8 +2429,7 @@
 
 void
 gfxFcPlatformFontList::GetSampleLangForGroup(nsAtom* aLanguage,
-                                             nsACString& aLangStr,
-                                             bool aCheckEnvironment)
+                                             nsACString& aLangStr)
 {
     aLangStr.Truncate();
     if (!aLanguage) {
@@ -2459,32 +2458,30 @@
 
     // -- check the environment for the user's preferred language that
     //    corresponds to this mozilla lang group.
-    if (aCheckEnvironment) {
-        const char *languages = getenv("LANGUAGE");
-        if (languages) {
-            const char separator = ':';
+    const char *languages = getenv("LANGUAGE");
+    if (languages) {
+        const char separator = ':';
 
-            for (const char *pos = languages; true; ++pos) {
-                if (*pos == '\0' || *pos == separator) {
-                    if (languages < pos &&
-                        TryLangForGroup(Substring(languages, pos),
-                                        aLanguage, aLangStr)) {
-                        return;
-                    }
+        for (const char *pos = languages; true; ++pos) {
+            if (*pos == '\0' || *pos == separator) {
+                if (languages < pos &&
+                    TryLangForGroup(Substring(languages, pos),
+                                    aLanguage, aLangStr)) {
+                    return;
+                }
 
-                    if (*pos == '\0') {
-                        break;
-                    }
+                if (*pos == '\0') {
+                    break;
+                }
 
-                    languages = pos + 1;
-                }
+                languages = pos + 1;
             }
         }
-        const char *ctype = setlocale(LC_CTYPE, nullptr);
-        if (ctype &&
-            TryLangForGroup(nsDependentCString(ctype), aLanguage, aLangStr)) {
-            return;
-        }
+    }
+    const char *ctype = setlocale(LC_CTYPE, nullptr);
+    if (ctype &&
+        TryLangForGroup(nsDependentCString(ctype), aLanguage, aLangStr)) {
+        return;
     }
 
     if (mozLangGroup->defaultLang) {
