diff -r aeb7865ac419 -r 7a238a859158 gfx/thebes/gfxFcPlatformFontList.cpp
--- a/gfx/thebes/gfxFcPlatformFontList.cpp	Mon May 28 10:09:25 2018 +0100
+++ b/gfx/thebes/gfxFcPlatformFontList.cpp	Mon May 28 10:09:28 2018 +0100
@@ -1759,7 +1759,8 @@
     // add the lang to the pattern
     nsAutoCString fcLang;
     gfxFcPlatformFontList* pfl = gfxFcPlatformFontList::PlatformFontList();
-    pfl->GetSampleLangForGroup(aLangGroup, fcLang);
+    pfl->GetSampleLangForGroup(aLangGroup, fcLang,
+                               /*aForFontEnumerationThread*/ true);
     if (!fcLang.IsEmpty()) {
         FcPatternAddString(pat, FC_LANG, ToFcChar8Ptr(fcLang.get()));
     }
@@ -2396,7 +2397,8 @@
 bool
 gfxFcPlatformFontList::TryLangForGroup(const nsACString& aOSLang,
                                        nsAtom* aLangGroup,
-                                       nsACString& aFcLang)
+                                       nsACString& aFcLang,
+                                       bool aForFontEnumerationThread)
 {
     // Truncate at '.' or '@' from aOSLang, and convert '_' to '-'.
     // aOSLang is in the form "language[_territory][.codeset][@modifier]".
@@ -2423,13 +2425,26 @@
         ++pos;
     }
 
-    nsAtom *atom = mLangService->LookupLanguage(aFcLang);
-    return atom == aLangGroup;
+    if (!aForFontEnumerationThread) {
+        nsAtom *atom = mLangService->LookupLanguage(aFcLang);
+        return atom == aLangGroup;
+    }
+
+    // If we were called by the font enumeration thread, we can't use
+    // mLangService->LookupLanguage because it is not thread-safe.
+    // Use GetUncachedLanguageGroup to avoid unsafe access to the lang-group
+    // mapping cache hashtable.
+    nsAutoCString lowered(aFcLang);
+    ToLowerCase(lowered);
+    RefPtr<nsAtom> lang = NS_Atomize(lowered);
+    RefPtr<nsAtom> group = mLangService->GetUncachedLanguageGroup(lang);
+    return group.get() == aLangGroup;
 }
 
 void
 gfxFcPlatformFontList::GetSampleLangForGroup(nsAtom* aLanguage,
-                                             nsACString& aLangStr)
+                                             nsACString& aLangStr,
+                                             bool aForFontEnumerationThread)
 {
     aLangStr.Truncate();
     if (!aLanguage) {
@@ -2466,7 +2481,8 @@
             if (*pos == '\0' || *pos == separator) {
                 if (languages < pos &&
                     TryLangForGroup(Substring(languages, pos),
-                                    aLanguage, aLangStr)) {
+                                    aLanguage, aLangStr,
+                                    aForFontEnumerationThread)) {
                     return;
                 }
 
@@ -2480,7 +2496,8 @@
     }
     const char *ctype = setlocale(LC_CTYPE, nullptr);
     if (ctype &&
-        TryLangForGroup(nsDependentCString(ctype), aLanguage, aLangStr)) {
+        TryLangForGroup(nsDependentCString(ctype), aLanguage, aLangStr,
+                        aForFontEnumerationThread)) {
         return;
     }
 
