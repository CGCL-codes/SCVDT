diff -r 522a5434e0a4 -r f65ddbf6c005 js/src/vm/Debugger.cpp
--- a/js/src/vm/Debugger.cpp	Mon Nov 05 21:35:44 2018 -0500
+++ b/js/src/vm/Debugger.cpp	Mon Oct 29 18:55:17 2018 +0100
@@ -618,14 +618,16 @@
 }
 
 void
-Breakpoint::destroy(FreeOp* fop)
+Breakpoint::destroy(FreeOp* fop, MayDestroySite mayDestroySite /* true */)
 {
     if (debugger->enabled) {
         site->dec(fop);
     }
     debugger->breakpoints.remove(this);
     site->breakpoints.remove(this);
-    site->destroyIfEmpty(fop);
+    if (mayDestroySite == MayDestroySite::True) {
+        site->destroyIfEmpty(fop);
+    }
     fop->delete_(this);
 }
 
@@ -4351,8 +4353,8 @@
         }
     }
 
-    auto *globalDebuggersVector = global->getDebuggers();
-    auto *zoneDebuggersVector = global->zone()->getDebuggers();
+    auto* globalDebuggersVector = global->getDebuggers();
+    auto* zoneDebuggersVector = global->zone()->getDebuggers();
 
     // The relation must be removed from up to three places:
     // globalDebuggersVector and debuggees for sure, and possibly the
@@ -4392,6 +4394,8 @@
                 bp->destroy(fop);
             }
             break;
+          default:
+            MOZ_CRASH("unknown breakpoint type");
         }
     }
     MOZ_ASSERT_IF(debuggees.empty(), !firstBreakpoint());
@@ -7386,7 +7390,11 @@
     JSObject* handler_;
 
   public:
-    explicit DebuggerScriptClearBreakpointMatcher(JSContext* cx, Debugger* dbg, JSObject* handler) : cx_(cx), dbg_(dbg), handler_(handler) { }
+    DebuggerScriptClearBreakpointMatcher(JSContext* cx, Debugger* dbg, JSObject* handler)
+      : cx_(cx),
+        dbg_(dbg),
+        handler_(handler)
+    { }
     using ReturnType = bool;
 
     ReturnType match(HandleScript script) {
@@ -7405,7 +7413,9 @@
         if (!instance.debugEnabled()) {
             return true;
         }
-        return instance.debug().clearBreakpointsIn(cx_, instanceObj, dbg_, handler_);
+        instance.debug().clearBreakpointsIn(cx_->runtime()->defaultFreeOp(), instanceObj, dbg_,
+                                            handler_);
+        return true;
     }
 };
 
