diff -r 13e0088b85fd -r fd15c14e5efb gfx/tests/gtest/TestTextureCompatibility.cpp
--- a/gfx/tests/gtest/TestTextureCompatibility.cpp	Wed Feb 07 12:01:00 2018 +0100
+++ b/gfx/tests/gtest/TestTextureCompatibility.cpp	Wed Feb 07 09:33:12 2018 -0500
@@ -14,6 +14,7 @@
 #include "mozilla/layers/TextureClient.h"
 #include "mozilla/layers/TextureHost.h"
 #include "mozilla/RefPtr.h"
+#include "TestLayers.h"
 #include "TextureHelper.h"
 
 using mozilla::gfx::Feature;
@@ -22,6 +23,7 @@
 using mozilla::layers::Compositor;
 using mozilla::layers::CompositorOptions;
 using mozilla::layers::LayersBackend;
+using mozilla::layers::TestSurfaceAllocator;
 using mozilla::layers::TextureClient;
 using mozilla::layers::TextureHost;
 using mozilla::widget::CompositorWidget;
@@ -31,8 +33,9 @@
  * This function will create the possible TextureClient and TextureHost pairs
  * according to the given backend.
  */
-void
+static void
 CreateTextureWithBackend(LayersBackend& aLayersBackend,
+                         ISurfaceAllocator* aDeallocator,
                          nsTArray<RefPtr<TextureClient>>& aTextureClients,
                          nsTArray<RefPtr<TextureHost>>& aTextureHosts)
 {
@@ -43,7 +46,8 @@
 
   for (uint32_t i = 0; i < aTextureClients.Length(); i++) {
     aTextureHosts.AppendElement(
-      CreateTextureHostWithBackend(aTextureClients[i], aLayersBackend));
+      CreateTextureHostWithBackend(aTextureClients[i], aDeallocator,
+                                   aLayersBackend));
   }
 }
 
@@ -115,13 +119,15 @@
 TEST(Gfx, TestTextureCompatibility)
 {
   nsTArray<LayersBackend> backendHints;
+  RefPtr<TestSurfaceAllocator> deallocator = new TestSurfaceAllocator();
 
   GetPlatformBackends(backendHints);
   for (uint32_t i = 0; i < backendHints.Length(); i++) {
     nsTArray<RefPtr<TextureClient>> textureClients;
     nsTArray<RefPtr<TextureHost>> textureHosts;
 
-    CreateTextureWithBackend(backendHints[i], textureClients, textureHosts);
+    CreateTextureWithBackend(backendHints[i], deallocator,
+                             textureClients, textureHosts);
     CheckCompatibilityWithBasicCompositor(backendHints[i], textureHosts);
   }
 }
