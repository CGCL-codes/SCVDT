diff -r e5aa76e4c83c -r 544bb8b63a3e dom/events/EventStateManager.cpp
--- a/dom/events/EventStateManager.cpp	Tue Aug 20 15:03:26 2019 +0000
+++ b/dom/events/EventStateManager.cpp	Tue Aug 20 12:43:02 2019 +0000
@@ -1290,10 +1290,13 @@
       uint32_t dropEffect = nsIDragService::DRAGDROP_ACTION_NONE;
       uint32_t action = nsIDragService::DRAGDROP_ACTION_NONE;
       nsCOMPtr<nsIPrincipal> principal;
+      nsCOMPtr<nsIContentSecurityPolicy> csp;
+
       if (dragSession) {
         dragSession->DragEventDispatchedToChildProcess();
         dragSession->GetDragAction(&action);
         dragSession->GetTriggeringPrincipal(getter_AddRefs(principal));
+        dragSession->GetCsp(getter_AddRefs(csp));
         RefPtr<DataTransfer> initialDataTransfer =
             dragSession->GetDataTransfer();
         if (initialDataTransfer) {
@@ -1302,7 +1305,8 @@
       }
 
       browserParent->SendRealDragEvent(*aEvent->AsDragEvent(), action,
-                                       dropEffect, IPC::Principal(principal));
+                                       dropEffect, IPC::Principal(principal),
+                                       csp);
       return;
     }
     case ePluginEventClass: {
@@ -1794,6 +1798,7 @@
       RefPtr<RemoteDragStartData> remoteDragStartData;
       nsCOMPtr<nsIContent> eventContent, targetContent;
       nsCOMPtr<nsIPrincipal> principal;
+      nsCOMPtr<nsIContentSecurityPolicy> csp;
       mCurrentTarget->GetContentForEvent(aEvent, getter_AddRefs(eventContent));
       if (eventContent) {
         // If the content is a text node in a password field, we shouldn't
@@ -1817,7 +1822,7 @@
         DetermineDragTargetAndDefaultData(
             window, eventContent, dataTransfer, getter_AddRefs(selection),
             getter_AddRefs(remoteDragStartData), getter_AddRefs(targetContent),
-            getter_AddRefs(principal));
+            getter_AddRefs(principal), getter_AddRefs(csp));
       }
 
       // Stop tracking the drag gesture now. This should stop us from
@@ -1872,7 +1877,8 @@
 
       nsCOMPtr<nsIObserverService> observerService =
           mozilla::services::GetObserverService();
-      // Emit observer event to allow addons to modify the DataTransfer object.
+      // Emit observer event to allow addons to modify the DataTransfer
+      // object.
       if (observerService) {
         observerService->NotifyObservers(dataTransfer,
                                          "on-datatransfer-available", nullptr);
@@ -1881,7 +1887,7 @@
       if (status != nsEventStatus_eConsumeNoDefault) {
         bool dragStarted =
             DoDefaultDragStart(aPresContext, event, dataTransfer, targetContent,
-                               selection, remoteDragStartData, principal);
+                               selection, remoteDragStartData, principal, csp);
         if (dragStarted) {
           sActiveESM = nullptr;
           MaybeFirePointerCancel(aEvent);
@@ -1903,7 +1909,7 @@
     nsPIDOMWindowOuter* aWindow, nsIContent* aSelectionTarget,
     DataTransfer* aDataTransfer, Selection** aSelection,
     RemoteDragStartData** aRemoteDragStartData, nsIContent** aTargetNode,
-    nsIPrincipal** aPrincipal) {
+    nsIPrincipal** aPrincipal, nsIContentSecurityPolicy** aCsp) {
   *aTargetNode = nullptr;
 
   nsCOMPtr<nsIContent> dragDataNode;
@@ -1918,7 +1924,8 @@
     if (mGestureDownDragStartData) {
       // A child process started a drag so use any data it assigned for the dnd
       // session.
-      mGestureDownDragStartData->AddInitialDnDDataTo(aDataTransfer, aPrincipal);
+      mGestureDownDragStartData->AddInitialDnDDataTo(aDataTransfer, aPrincipal,
+                                                     aCsp);
       mGestureDownDragStartData.forget(aRemoteDragStartData);
     }
   } else {
@@ -1934,7 +1941,7 @@
     bool wasAlt = (mGestureModifiers & MODIFIER_ALT) != 0;
     nsresult rv = nsContentAreaDragDrop::GetDragData(
         aWindow, mGestureDownContent, aSelectionTarget, wasAlt, aDataTransfer,
-        &canDrag, aSelection, getter_AddRefs(dragDataNode), aPrincipal);
+        &canDrag, aSelection, getter_AddRefs(dragDataNode), aPrincipal, aCsp);
     if (NS_FAILED(rv) || !canDrag) {
       return;
     }
@@ -1996,7 +2003,8 @@
 bool EventStateManager::DoDefaultDragStart(
     nsPresContext* aPresContext, WidgetDragEvent* aDragEvent,
     DataTransfer* aDataTransfer, nsIContent* aDragTarget, Selection* aSelection,
-    RemoteDragStartData* aDragStartData, nsIPrincipal* aPrincipal) {
+    RemoteDragStartData* aDragStartData, nsIPrincipal* aPrincipal,
+    nsIContentSecurityPolicy* aCsp) {
   nsCOMPtr<nsIDragService> dragService =
       do_GetService("@mozilla.org/widget/dragservice;1");
   if (!dragService) return false;
@@ -2069,16 +2077,16 @@
   // other than a selection is being dragged.
   if (!dragImage && aSelection) {
     dragService->InvokeDragSessionWithSelection(
-        aSelection, aPrincipal, transArray, action, event, dataTransfer);
+        aSelection, aPrincipal, aCsp, transArray, action, event, dataTransfer);
   } else if (aDragStartData) {
     MOZ_ASSERT(XRE_IsParentProcess());
     dragService->InvokeDragSessionWithRemoteImage(
-        dragTarget, aPrincipal, transArray, action, aDragStartData, event,
+        dragTarget, aPrincipal, aCsp, transArray, action, aDragStartData, event,
         dataTransfer);
   } else {
-    dragService->InvokeDragSessionWithImage(dragTarget, aPrincipal, transArray,
-                                            action, dragImage, imageX, imageY,
-                                            event, dataTransfer);
+    dragService->InvokeDragSessionWithImage(
+        dragTarget, aPrincipal, aCsp, transArray, action, dragImage, imageX,
+        imageY, event, dataTransfer);
   }
 
   return true;
