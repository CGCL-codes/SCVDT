diff -r c843f2f3085e -r 3b4d18da6b10 js/src/jit/SharedIC.cpp
--- a/js/src/jit/SharedIC.cpp	Tue Dec 12 14:52:54 2017 -0600
+++ b/js/src/jit/SharedIC.cpp	Sat Dec 16 16:22:13 2017 -0600
@@ -1157,19 +1157,19 @@
         break;
       }
       case JSOP_BITOR: {
-        masm.orPtr(rhsReg, lhsReg);
+        masm.or32(rhsReg, lhsReg);
         masm.tagValue(JSVAL_TYPE_INT32, lhsReg, R0);
         EmitReturnFromIC(masm);
         break;
       }
       case JSOP_BITXOR: {
-        masm.xorPtr(rhsReg, lhsReg);
+        masm.xor32(rhsReg, lhsReg);
         masm.tagValue(JSVAL_TYPE_INT32, lhsReg, R0);
         EmitReturnFromIC(masm);
         break;
       }
       case JSOP_BITAND: {
-        masm.andPtr(rhsReg, lhsReg);
+        masm.and32(rhsReg, lhsReg);
         masm.tagValue(JSVAL_TYPE_INT32, lhsReg, R0);
         EmitReturnFromIC(masm);
         break;
@@ -1219,7 +1219,7 @@
         masm.passABIArg(FloatReg0, MoveOp::DOUBLE);
         masm.callWithABI(mozilla::BitwiseCast<void*, int32_t(*)(double)>(JS::ToInt32),
                          MoveOp::GENERAL, CheckUnsafeCallWithABI::DontCheckOther);
-        masm.storeCallWordResult(scratchReg);
+        masm.storeCallInt32Result(scratchReg);
         masm.pop(intReg);
 
         masm.bind(&doneTruncate);
@@ -1229,13 +1229,13 @@
     // All handled ops commute, so no need to worry about ordering.
     switch(op) {
       case JSOP_BITOR:
-        masm.orPtr(intReg, intReg2);
+        masm.or32(intReg, intReg2);
         break;
       case JSOP_BITXOR:
-        masm.xorPtr(intReg, intReg2);
+        masm.xor32(intReg, intReg2);
         break;
       case JSOP_BITAND:
-        masm.andPtr(intReg, intReg2);
+        masm.and32(intReg, intReg2);
         break;
       default:
        MOZ_CRASH("Unhandled op for BinaryArith_DoubleWithInt32.");
@@ -1373,7 +1373,7 @@
         masm.passABIArg(FloatReg0, MoveOp::DOUBLE);
         masm.callWithABI(BitwiseCast<void*, int32_t(*)(double)>(JS::ToInt32),
                          MoveOp::GENERAL, CheckUnsafeCallWithABI::DontCheckOther);
-        masm.storeCallWordResult(scratchReg);
+        masm.storeCallInt32Result(scratchReg);
 
         masm.bind(&doneTruncate);
         masm.not32(scratchReg);
