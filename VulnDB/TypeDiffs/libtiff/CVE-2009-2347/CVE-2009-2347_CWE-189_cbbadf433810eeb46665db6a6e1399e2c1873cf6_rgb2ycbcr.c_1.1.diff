diff --git a/tools/rgb2ycbcr.c b/tools/rgb2ycbcr.c
index 0c41c3e9..84c30009 100644
--- a/tools/rgb2ycbcr.c
+++ b/tools/rgb2ycbcr.c
@@ -34,6 +34,7 @@
 # include <unistd.h>
 #endif
 
+#include "tiffiop.h"
 #include "tiffio.h"
 
 #define	streq(a,b)	(strcmp(a,b) == 0)
@@ -279,13 +280,30 @@ tiffcvt(TIFF* in, TIFF* out)
 	char *stringv;
 	uint32 longv;
 
+	size_t pixel_count;
 	TIFFGetField(in, TIFFTAG_IMAGEWIDTH, &width);
 	TIFFGetField(in, TIFFTAG_IMAGELENGTH, &height);
-	raster = (uint32*)_TIFFmalloc(width * height * sizeof (uint32));
+	pixel_count = width * height;
+
+	/* XXX: Check the integer overflow. */
+	if (!width || !height || pixel_count / width != height) {
+		TIFFError(TIFFFileName(in),
+			  "Malformed input file; "
+			  "can't allocate buffer for raster of %lux%lu size",
+			  (unsigned long)width, (unsigned long)height);
+		return 0;
+	}
+
+	raster = (uint32*)_TIFFCheckMalloc(in, pixel_count, sizeof(uint32),
+					   "raster buffer");
 	if (raster == 0) {
-		TIFFError(TIFFFileName(in), "No space for raster buffer");
+		TIFFError(TIFFFileName(in),
+			  "Requested buffer size is %lu elements %lu each",
+			  (unsigned long)pixel_count,
+			  (unsigned long)sizeof(uint32));
 		return (0);
 	}
+
 	if (!TIFFReadRGBAImage(in, width, height, raster, 0)) {
 		_TIFFfree(raster);
 		return (0);
