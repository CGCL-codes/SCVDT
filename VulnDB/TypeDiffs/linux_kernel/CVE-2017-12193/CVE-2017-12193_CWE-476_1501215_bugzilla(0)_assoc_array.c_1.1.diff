diff --git a/lib/assoc_array.c b/lib/assoc_array.c
index 155c55d8db5f..e2b870e350e3 100644
--- a/lib/assoc_array.c
+++ b/lib/assoc_array.c
@@ -719,8 +719,9 @@ static bool assoc_array_insert_into_terminal_node(struct assoc_array_edit *edit,
 
 present_leaves_cluster_but_not_new_leaf:
 	/* All the old leaves cluster in the same slot, but the new leaf wants
-	 * to go into a different slot, so we create a new node to hold the new
-	 * leaf and a pointer to a new node holding all the old leaves.
+	 * to go into a different slot, so we create a new node (N0) to hold
+	 * the new leaf and a pointer to a new node (N1) holding all the old
+	 * leaves.
 	 */
 	pr_devel("present leaves cluster but not new leaf\n");
 
@@ -735,10 +736,16 @@ static bool assoc_array_insert_into_terminal_node(struct assoc_array_edit *edit,
 	for (i = 0; i < ASSOC_ARRAY_FAN_OUT; i++)
 		new_n1->slots[i] = node->slots[i];
 
-	new_n0->slots[edit->segment_cache[0]] = assoc_array_node_to_ptr(new_n0);
+	new_n0->slots[edit->segment_cache[0]] = assoc_array_node_to_ptr(new_n1);
 	edit->leaf_p = &new_n0->slots[edit->segment_cache[ASSOC_ARRAY_FAN_OUT]];
 
-	edit->set[0].ptr = &assoc_array_ptr_to_node(node->back_pointer)->slots[node->parent_slot];
+	ptr = node->back_pointer;
+	if (!ptr)
+		edit->set[0].ptr = &edit->array->root;
+	else if (assoc_array_ptr_is_node(ptr))
+		edit->set[0].ptr = &assoc_array_ptr_to_node(ptr)->slots[node->parent_slot];
+	else
+		edit->set[0].ptr = &assoc_array_ptr_to_shortcut(ptr)->next_node;
 	edit->set[0].to = assoc_array_node_to_ptr(new_n0);
 	edit->excised_meta[0] = assoc_array_node_to_ptr(node);
 	pr_devel("<--%s() = ok [insert node before]\n", __func__);

