diff --git a/util/decompile.c b/util/decompile.c
index 2cb3fbd..878a4f8 100644
--- a/util/decompile.c
+++ b/util/decompile.c
@@ -46,6 +46,7 @@
 
 
 static char **pool;
+static unsigned short poolcounter;
 struct SWF_ACTIONPUSHPARAM *regs[256];
 
 static char *getName(struct SWF_ACTIONPUSHPARAM *act);
@@ -346,12 +347,22 @@ getString(struct SWF_ACTIONPUSHPARAM *act)
 		sprintf(t,"%ld", act->p.Integer );
 		return t;
 	case PUSH_CONSTANT: /* CONSTANT8 */
+		if (act->p.Constant8 > poolcounter)
+		{
+		        SWF_warn("WARNING: retrieving constants not present in the pool.\n");
+		        break;
+		}
 		t=malloc(strlenext(pool[act->p.Constant8])+3); /* 2 "'"s and a NULL */
 		strcpy(t,"'");
 		strcatext(t,pool[act->p.Constant8]);
 		strcat(t,"'");
 		return t;
 	case PUSH_CONSTANT16: /* CONSTANT16 */
+		if (act->p.Constant16 > poolcounter)
+		{
+		        SWF_warn("WARNING: retrieving constants not present in the pool.\n");
+		        break;
+		}
 		t=malloc(strlenext(pool[act->p.Constant16])+3); /* 2 '\"'s and a NULL */
 		strcpy(t,"'");
 		strcatext(t,pool[act->p.Constant16]);
@@ -366,7 +377,11 @@ getString(struct SWF_ACTIONPUSHPARAM *act)
 		fprintf (stderr,"  Can't get string for type: %d\n", act->Type);
 		break;
 	}
-	return "";
+
+	t = malloc(sizeof(char));
+	strcpyext(t,"");
+
+	return t;
 }
 
 static char *
@@ -395,6 +410,11 @@ getName(struct SWF_ACTIONPUSHPARAM *act)
   		return t;
 #endif
 	case PUSH_CONSTANT: /* CONSTANT8 */
+		if (act->p.Constant8 > poolcounter)
+		{
+		        SWF_warn("WARNING: retrieving constants not present in the pool.\n");
+		        break;
+		}
 		t=malloc(strlenext(pool[act->p.Constant8])+1);
 		strcpyext(t,pool[act->p.Constant8]);
 		if(strlen(t)) /* Not a zero length string */
@@ -405,6 +425,11 @@ getName(struct SWF_ACTIONPUSHPARAM *act)
 			return strcpy(t,"this");
 		}
 	case PUSH_CONSTANT16: /* CONSTANT16 */
+		if (act->p.Constant16 > poolcounter)
+		{
+		        SWF_warn("WARNING: retrieving constants not present in the pool.\n");
+		        break;
+		}
 		t=malloc(strlenext(pool[act->p.Constant16])+1);
 		strcpyext(t,pool[act->p.Constant16]);
 		if(strlen(t)) /* Not a zero length string */
@@ -417,6 +442,11 @@ getName(struct SWF_ACTIONPUSHPARAM *act)
 	default: 
 		return getString(act);
 	}
+
+	t = malloc(sizeof(char));
+	strcpyext(t,"");
+
+	return t;
 }
 
 static int
@@ -736,6 +766,7 @@ decompileCONSTANTPOOL (SWF_ACTION *act)
 {
 	OUT_BEGIN(SWF_ACTIONCONSTANTPOOL);
 	pool=sact->ConstantPool;
+	poolcounter = sact->Count;
 }
 
 static void
@@ -793,12 +824,22 @@ decompilePUSHPARAM (struct SWF_ACTIONPUSHPARAM *act, int wantstring)
 
 #if 0
 	  case 8: /* CONSTANT8 */
+		if (act->p.Constant8 > poolcounter)
+		{
+		        SWF_warn("WARNING: retrieving constants not present in the pool.\n");
+		        break;
+		}
 		if( wantstring )
   		  printf ("'%s'", pool[act->p.Constant8]);
 		else
   		  printf ("%s", pool[act->p.Constant8]);
 		break;
 	  case 9: /* CONSTANT16 */
+		if (act->p.Constant16 > poolcounter)
+		{
+		        SWF_warn("WARNING: retrieving constants not present in the pool.\n");
+		        break;
+		}
 		if( wantstring )
   		  printf ("'%s'", pool[act->p.Constant16]);
 		else
@@ -3429,6 +3470,7 @@ decompile5Action(int n, SWF_ACTION *actions,int indent)
 		return NULL;
 
 	pool = NULL;
+	poolcounter = 0;
 
 	dcinit();
 
