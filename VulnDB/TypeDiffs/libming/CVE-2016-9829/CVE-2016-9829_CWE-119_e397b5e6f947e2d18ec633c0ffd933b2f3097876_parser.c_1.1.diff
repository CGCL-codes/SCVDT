diff --git a/util/parser.c b/util/parser.c
index aded57e..caa9cad 100644
--- a/util/parser.c
+++ b/util/parser.c
@@ -18,9 +18,11 @@
  *
  ****************************************************************************/
 
+#include <stdint.h>
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
+#include <sys/param.h>
 #include "blocks/blocktypes.h"
 #include "abctypes.h"
 #include "action.h"
@@ -239,12 +241,13 @@ parseSWF_CXFORMWITHALPHA (FILE * f, struct SWF_CXFORMWITHALPHA *cxform)
 void
 parseSWF_GLYPHENTRY (FILE * f, SWF_GLYPHENTRY *gerec, int glyphbits, int advancebits)
 {
-  int i;
+  unsigned int i;
 
   size_t nmalloc = ( glyphbits < 1 ? 1 : ((glyphbits+31)/32) ) * sizeof(UI32);
   gerec->GlyphIndex = malloc(nmalloc);
   gerec->GlyphIndex[0] = 0; /* for glyphbits == 0 */
   for( i=0; glyphbits; i++ ) {
+    if (i < (nmalloc / sizeof(UI32))) {
 	  if( glyphbits > 32 ) {
 	  	gerec->GlyphIndex[i] = readBits(f, 32);
 	  	glyphbits -= 32;
@@ -252,12 +255,16 @@ parseSWF_GLYPHENTRY (FILE * f, SWF_GLYPHENTRY *gerec, int glyphbits, int advance
 	 	gerec->GlyphIndex[i] = readBits(f, glyphbits);
 	 	glyphbits = 0;
   	}
+    } else {
+      SWF_error("unexpected end of file");
+    }
   }
 
   nmalloc = ( advancebits < 1 ? 1 : ((advancebits+31)/32) ) * sizeof(UI32);
   gerec->GlyphAdvance = malloc(nmalloc);
   gerec->GlyphAdvance[0] = 0; /* for advancebits == 0 */
   for( i=0; advancebits; i++ ) {
+    if (i < (nmalloc / sizeof(UI32))) {
 	  if( advancebits > 32 ) {
 	  	gerec->GlyphAdvance[i] = readBits(f, 32);
 	  	advancebits -= 32;
@@ -265,13 +272,16 @@ parseSWF_GLYPHENTRY (FILE * f, SWF_GLYPHENTRY *gerec, int glyphbits, int advance
 	 	gerec->GlyphAdvance[i] = readBits(f, advancebits);
 	 	advancebits = 0;
   	}
+    } else {
+      SWF_error("unexpected end of file");
+    }
   }
 }
 
 int
 parseSWF_TEXTRECORD (FILE * f, struct SWF_TEXTRECORD *brec, int glyphbits, int advancebits, int level)
 {
-  int i;
+  int i, glyph_count;
 
   byteAlign ();
 
@@ -297,13 +307,19 @@ parseSWF_TEXTRECORD (FILE * f, struct SWF_TEXTRECORD *brec, int glyphbits, int a
     brec->YOffset = readSInt16 (f);
   if( brec->StyleFlagHasFont )
     brec->TextHeight = readUInt16 (f);
-  brec->GlyphCount = readUInt8 (f);
-  brec->GlyphEntries = malloc(brec->GlyphCount * sizeof(SWF_GLYPHENTRY) );
-  byteAlign ();
-  for(i=0;i<brec->GlyphCount;i++)
-	  parseSWF_GLYPHENTRY(f, &(brec->GlyphEntries[i]), glyphbits, advancebits );
+  glyph_count = readUInt8 (f);
+  if (glyph_count == EOF) {
+    SWF_error("unexpected end of file");
+    return 0;
+  } else {
+    brec->GlyphCount = glyph_count;
+    brec->GlyphEntries = malloc(brec->GlyphCount * sizeof(SWF_GLYPHENTRY) );
+    byteAlign ();
+    for(i=0;i<brec->GlyphCount;i++)
+            parseSWF_GLYPHENTRY(f, &(brec->GlyphEntries[i]), glyphbits, advancebits );
 
-  return 1;
+    return 1;
+  }
 }
 
 int
@@ -648,6 +664,11 @@ parseSWF_LINESTYLEARRAY (FILE * f, SWF_LINESTYLEARRAY * linestyle, int level)
     {
       count = readUInt16(f);
     }
+  if (count == EOF)
+  {
+    SWF_error("unexpected end of file");
+  }
+
   linestyle->LineStyleCount = count;
 
   if(level == 4)
@@ -721,6 +742,10 @@ parseSWF_MORPHLINESTYLES (FILE * f, SWF_MORPHLINESTYLES * linestyle,
       linestyle->LineStyleCountExtended = readUInt16 (f);
       count = linestyle->LineStyleCountExtended;
     }
+  if (count == EOF)
+  {
+    SWF_error("unexpected end of file");
+  }
   if(version == 1)
     linestyle->LineStyles =
       (SWF_MORPHLINESTYLE *) malloc (count * sizeof (SWF_MORPHLINESTYLE));
@@ -1086,10 +1111,15 @@ parseSWF_ACTIONRECORD(FILE * f, int *thisactionp, SWF_ACTION *actions)
 		/* v5 actions */
 	case SWFACTION_CONSTANTPOOL:
 		{
-		int i;
+		int i, count;
 		ACT_BEGIN(SWF_ACTIONCONSTANTPOOL)
 
-		act->Count = readUInt16(f);
+		count = readUInt16(f);
+		if (count == EOF)
+                {
+                  SWF_error("unexpected end of file");
+                }
+		act->Count = count;
 		act->ConstantPool = malloc(act->Count*sizeof(char *));
 		for(i=0;i<act->Count;i++) {
 			act->ConstantPool[i] = readString(f);
@@ -1098,11 +1128,16 @@ parseSWF_ACTIONRECORD(FILE * f, int *thisactionp, SWF_ACTION *actions)
 		}
 	case SWFACTION_DEFINEFUNCTION:
 		{
-		int i, end2;
+		int i, end2, num_params;
 		ACT_BEGIN(SWF_ACTIONDEFINEFUNCTION)
 
 		act->FunctionName = readString(f);
-		act->NumParams = readSInt16(f);
+                num_params = readUInt16(f);
+                if (num_params == EOF) {
+                  SWF_error("unexpected end of file");
+                }
+		act->NumParams = num_params;
+
 		act->Params = (STRING *)malloc(act->NumParams*sizeof(char *));
 		for(i=0;i<act->NumParams;i++) {
 			act->Params[i] = readString(f);
@@ -1151,11 +1186,15 @@ parseSWF_ACTIONRECORD(FILE * f, int *thisactionp, SWF_ACTION *actions)
 		/* v7 actions */
 	case SWFACTION_DEFINEFUNCTION2:
 		{
-		int i, end2;
+		int i, end2, num_params;
 		ACT_BEGIN(SWF_ACTIONDEFINEFUNCTION2)
 
 		act->FunctionName = readString(f);
-		act->NumParams = readSInt16(f);
+		num_params = readUInt16(f);
+		if (num_params == EOF) {
+		  SWF_error("unexpected end of file");
+		}
+		act->NumParams = num_params;
 		act->RegisterCount = readSInt8(f);
 		act->PreloadParentFlag = readBits(f,1);
 		act->PreloadRootFlag = readBits(f,1);
@@ -1301,9 +1340,13 @@ parseSWF_BEVELFILTER(FILE *f, SWF_BEVELFILTER *filter)
 void 
 parseSWF_GRADIENTFILTER(FILE *f, SWF_GRADIENTFILTER *filter)
 {
-	int i, size;
+	int i, size, num_colors;
 
-	filter->NumColors = readUInt8(f);
+	num_colors = readUInt8(f);
+        if (num_colors == EOF) {
+          SWF_error("unexpected end of file");
+        }
+	filter->NumColors = num_colors;
 	size = filter->NumColors * sizeof(SWF_RGBA);
 	filter->GradientColors = (SWF_RGBA *)malloc(size);
 	for(i = 0; i < filter->NumColors; i++)
@@ -1329,10 +1372,15 @@ parseSWF_GRADIENTFILTER(FILE *f, SWF_GRADIENTFILTER *filter)
 void 
 parseSWF_CONVOLUTIONFILTER(FILE *f, SWF_CONVOLUTIONFILTER *filter)
 {
-	int size, i;
+	int size, i, x, y;
 
-	filter->MatrixX = readUInt8(f);
-	filter->MatrixY = readUInt8(f);
+	x = readUInt8(f);
+	y = readUInt8(f);
+        if (x == EOF || y == EOF) {
+          SWF_error("unexpected end of file");
+        }
+	filter->MatrixX = x;
+	filter->MatrixY = y;
 	filter->Divisor = readUInt32(f);
 	filter->Bias = readUInt32(f);
 
@@ -1395,8 +1443,14 @@ parseSWF_FILTER(FILE *f, SWF_FILTER *filter)
 void 
 parseSWF_FILTERLIST(FILE *f, SWF_FILTERLIST *list)
 {
-	int i, size;
-	list->NumberOfFilters = readUInt8(f);
+	int i, size, number_of_filters;
+	number_of_filters = readUInt8(f);
+        if (number_of_filters == EOF) {
+          list->NumberOfFilters = 0;
+          SWF_error("unexpected end of file");
+          return;
+        }
+	list->NumberOfFilters = number_of_filters;
 	size = list->NumberOfFilters * sizeof(SWF_FILTER);
 	list->Filter = (SWF_FILTER *)malloc(size);
 
@@ -1645,14 +1699,19 @@ SWF_Parserstruct *
 parseSWF_DEFINEFONT (FILE * f, int length)
 {
   int i;
-  UI16  firstOffset;
+  int  firstOffset;
   PAR_BEGIN (SWF_DEFINEFONT);
 
   parserrec->FontID = readUInt16 (f);
   firstOffset = readUInt16 (f);
+  if (firstOffset == EOF) {
+    SWF_error("unexpected end of file");
+  }
+
   parserrec->NumGlyphs = (firstOffset/2);
   Movie_addFontInfo(&m, parserrec->FontID, parserrec->NumGlyphs);
-  parserrec->OffsetTable = (UI16 *)malloc((firstOffset/2) * sizeof( UI16 ) );
+  // store at least a 0 in the first offset table element if there are no glyphs
+  parserrec->OffsetTable = (UI16 *)malloc(MAX(1, (firstOffset/2)) * sizeof( UI16 ) );
   parserrec->OffsetTable[0] = firstOffset;
   for(i=1;i<firstOffset/2;i++) {
   	parserrec->OffsetTable[i] = readUInt16 (f);
@@ -1672,7 +1731,7 @@ parseSWF_DEFINEFONT (FILE * f, int length)
 SWF_Parserstruct *
 parseSWF_DEFINEFONT2 (FILE * f, int length)
 {
-  int i;
+  int i, num_glyphs;
   PAR_BEGIN (SWF_DEFINEFONT2);
 
   byteAlign ();
@@ -1689,7 +1748,11 @@ parseSWF_DEFINEFONT2 (FILE * f, int length)
   parserrec->LanguageCode = readUInt8 (f);
   parserrec->FontNameLen = readUInt8 (f);
   parserrec->FontName = readSizedString (f, parserrec->FontNameLen);
-  parserrec->NumGlyphs = readUInt16 (f);
+  num_glyphs = readUInt16 (f);
+  if (num_glyphs == EOF) {
+    SWF_error("unexpected end of file");
+  }
+  parserrec->NumGlyphs = num_glyphs;
   Movie_addFontInfo(&m, parserrec->FontID, parserrec->NumGlyphs);
   if (parserrec->FontFlagsWideOffsets)
     {
@@ -1759,6 +1822,7 @@ parseSWF_DEFINEFONT2 (FILE * f, int length)
     }
 
   if( parserrec->FontFlagsHasLayout ) {
+	  int kerning_count;
 	  parserrec->FontAscent = readSInt16(f);
 	  parserrec->FontDecent = readSInt16(f);
 	  parserrec->FontLeading = readSInt16(f);
@@ -1776,7 +1840,11 @@ parseSWF_DEFINEFONT2 (FILE * f, int length)
 	  {
 	    parseSWF_RECT (f, &(parserrec->FontBoundsTable[i]));
 	  }
-	  parserrec->KerningCount = readUInt16(f);
+	  kerning_count = readUInt16(f);
+          if (kerning_count == EOF) {
+            SWF_error("unexpected end of file");
+          }
+	  parserrec->KerningCount = kerning_count;
 	  /* FontKerningTable */
 	  parserrec->FontKerningTable =
 	     (struct SWF_KERNINGRECORD *) malloc (parserrec->KerningCount * sizeof (struct SWF_KERNINGRECORD));
@@ -1799,7 +1867,7 @@ parseSWF_DEFINEFONT2 (FILE * f, int length)
 SWF_Parserstruct *
 parseSWF_DEFINEFONT3 (FILE * f, int length)
 {
-  int i;
+  int i, num_glyphs;
   PAR_BEGIN (SWF_DEFINEFONT3);
 
   byteAlign ();
@@ -1816,7 +1884,11 @@ parseSWF_DEFINEFONT3 (FILE * f, int length)
   parserrec->LanguageCode = readUInt8 (f);
   parserrec->FontNameLen = readUInt8 (f);
   parserrec->FontName = readSizedString (f, parserrec->FontNameLen);
-  parserrec->NumGlyphs = readUInt16 (f);
+  num_glyphs = readUInt16 (f);
+  if (num_glyphs == EOF) {
+    SWF_error("unexpected end of file");
+  }
+  parserrec->NumGlyphs = num_glyphs;
   Movie_addFontInfo(&m, parserrec->FontID, parserrec->NumGlyphs);
   if (parserrec->FontFlagsWideOffsets)
     {
@@ -1886,6 +1958,7 @@ parseSWF_DEFINEFONT3 (FILE * f, int length)
     }
 
   if( parserrec->FontFlagsHasLayout ) {
+	  int kerning_count;
 	  parserrec->FontAscent = readSInt16(f);
 	  parserrec->FontDecent = readSInt16(f);
 	  parserrec->FontLeading = readSInt16(f);
@@ -1903,7 +1976,11 @@ parseSWF_DEFINEFONT3 (FILE * f, int length)
 	  {
 	    parseSWF_RECT (f, &(parserrec->FontBoundsTable[i]));
 	  }
-	  parserrec->KerningCount = readUInt16(f);
+	  kerning_count = readUInt16(f);
+          if (kerning_count == EOF) {
+            SWF_error("unexpected end of file");
+          }
+	  parserrec->KerningCount = kerning_count;
 	  /* FontKerningTable */
 	  parserrec->FontKerningTable =
 	     (struct SWF_KERNINGRECORD *) malloc (parserrec->KerningCount * sizeof (struct SWF_KERNINGRECORD));
@@ -1945,6 +2022,9 @@ parseSWF_DEFINEFONTINFO (FILE * f, int length)
   else
 	  parserrec->nGlyph = end-fileOffset;
 
+  if (parserrec->nGlyph < 0 || parserrec->nGlyph > (INT_MAX / sizeof(UI16))) {
+    SWF_error("invalid Glyph count");
+  }
   parserrec->CodeTable = (UI16 *)malloc(parserrec->nGlyph*sizeof(UI16));
   for(i=0;i<parserrec->nGlyph;i++)
   if( parserrec->FontFlagsWideCodes )
@@ -1974,6 +2054,9 @@ parseSWF_DEFINEFONTINFO2 (FILE * f, int length)
   parserrec->FontFlagsWideCodes = readBits (f, 1);
   parserrec->LanguageCode = readUInt8(f);
   parserrec->nGlyph = (end-fileOffset)/2;
+  if (parserrec->nGlyph < 0 || parserrec->nGlyph > (INT_MAX / sizeof(UI16))) {
+    SWF_error("invalid Glyph count");
+  }
 
   parserrec->CodeTable = (UI16 *)malloc(parserrec->nGlyph*sizeof(UI16));
   for(i=0;i<parserrec->nGlyph;i++)
@@ -2006,8 +2089,12 @@ parseSWF_ZONEDATA(FILE *f, struct SWF_ZONEDATA *data)
 void 
 parseSWF_ZONERECORD(FILE *f, struct SWF_ZONERECORD *table)
 {
-  int i;
-  table->NumZoneData = readUInt8(f);
+  int i, num_zone_data;
+  num_zone_data = readUInt8(f);
+  if (num_zone_data == EOF) {
+    SWF_error("unexpeced end of file");
+  }
+  table->NumZoneData = num_zone_data;
   table->ZoneData = (struct SWF_ZONEDATA *)
     malloc(table->NumZoneData * sizeof(struct SWF_ZONEDATA));
   for(i = 0; i < table->NumZoneData; i++)
@@ -3058,39 +3145,53 @@ void parseABC_CONSTANT_POOL(struct ABC_CONSTANT_POOL *cpool, FILE *f)
   size_t s;
  
   cpool->IntCount = readEncUInt30(f);
+  if (cpool->IntCount > INT_MAX / sizeof(S32))
+    SWF_error("value is too big");
   cpool->Integers = malloc(cpool->IntCount * sizeof(S32));
   for(i = 1; i < cpool->IntCount; i++)
       cpool->Integers[i] = readEncSInt32(f);
 
   cpool->UIntCount = readEncUInt30(f);
+  if (cpool->UIntCount > INT_MAX / sizeof(U32))
+    SWF_error("value is too big");
   cpool->UIntegers = malloc(cpool->UIntCount * sizeof(U32));
   for(i = 1; i < cpool->UIntCount; i++)
     cpool->UIntegers[i] = readEncUInt32(f);
 
   cpool->DoubleCount = readEncUInt30(f);
+  if (cpool->DoubleCount > INT_MAX / sizeof(DOUBLE))
+    SWF_error("value is too big");
   cpool->Doubles = malloc(cpool->DoubleCount * sizeof(DOUBLE));
   for(i = 1; i < cpool->DoubleCount; i++)
     cpool->Doubles[i] = readDouble(f);
 
   cpool->StringCount = readEncUInt30(f);
+  if (cpool->StringCount > INT_MAX / sizeof(struct ABC_STRING_INFO))
+    SWF_error("value is too big");
   s = cpool->StringCount * sizeof(struct ABC_STRING_INFO);
   cpool->Strings = malloc(s);
   for(i = 1; i < cpool->StringCount; i++)
     parseABC_STRING_INFO(cpool->Strings + i, f);
 
   cpool->NamespaceCount = readEncUInt30(f); 
+  if (cpool->NamespaceCount > INT_MAX / sizeof(struct ABC_NS_INFO))
+    SWF_error("value is too big");
   s = cpool->NamespaceCount * sizeof(struct ABC_NS_INFO);
   cpool->Namespaces = malloc(s);
   for(i = 1; i < cpool->NamespaceCount; i++)
     parseABC_NS_INFO(cpool->Namespaces + i, f);
 
   cpool->NamespaceSetCount = readEncUInt30(f);
+  if (cpool->NamespaceSetCount > INT_MAX / sizeof(struct ABC_NS_SET_INFO))
+    SWF_error("value is too big");
   s = cpool->NamespaceSetCount * sizeof(struct ABC_NS_SET_INFO);
   cpool->NsSets = malloc(s);
   for(i = 1; i < cpool->NamespaceSetCount; i++)
     parseABC_NS_SET_INFO(cpool->NsSets + i, f);
 
   cpool->MultinameCount = readEncUInt30(f);
+  if (cpool->MultinameCount > INT_MAX / sizeof(struct ABC_MULTINAME_INFO))
+    SWF_error("value is too big");
   s = cpool->MultinameCount * sizeof(struct ABC_MULTINAME_INFO);
   cpool->Multinames = malloc(s);
   for(i = 1; i < cpool->MultinameCount; i++)
@@ -3101,6 +3202,8 @@ void parseABC_OPTION_INFO(struct ABC_OPTION_INFO *oinfo, FILE *f)
 {
   int i;
   oinfo->OptionCount = readEncUInt30(f);
+  if (oinfo->OptionCount > INT_MAX / sizeof(struct ABC_OPTION_INFO))
+    SWF_error("%s: line %d: OptionCount is too big", __FUNCTION__, __LINE__);
   oinfo->Option = malloc(sizeof(struct ABC_OPTION_INFO) * oinfo->OptionCount);
   for(i = 0; i < oinfo->OptionCount; i++)
   {
@@ -3123,6 +3226,8 @@ void parseABC_METHOD_INFO(struct ABC_METHOD_INFO *method, FILE *f)
 
   method->ParamCount = readEncUInt30(f);
   method->ReturnType = readEncUInt30(f);
+  if (method->ParamCount > INT_MAX / sizeof(U30))
+    SWF_error("parseABC_METHOD_INFO: ParamCount is too big");
   method->ParamType = malloc(sizeof(U30) * method->ParamCount);
   for(i = 0; i < method->ParamCount; i++)
     method->ParamType[i] = readEncUInt30(f);
@@ -3140,6 +3245,8 @@ void parseABC_METADATA_INFO(struct ABC_METADATA_INFO *meta, FILE *f)
 
   meta->Name = readEncUInt30(f);
   meta->ItemCount = readEncUInt30(f);
+  if (meta->ItemCount > INT_MAX / sizeof(struct ABC_ITEM_INFO))
+    SWF_error("parseABC_METADATA_INFO: ItemCount is too big");
   meta->Items = malloc(sizeof(struct ABC_ITEM_INFO) * meta->ItemCount);
   for(i = 0; i < meta->ItemCount; i++)
   {
@@ -3206,6 +3313,10 @@ void parseABC_TRAITS_INFO(struct ABC_TRAITS_INFO *trait, FILE *f)
   if(trait->Attr & ABC_TRAIT_ATTR_METADATA)
   {
     trait->MetadataCount = readEncUInt30(f);
+    if (trait->MetadataCount > INT_MAX / sizeof(U30)) {
+      SWF_error("parseABC_TRAITS_INFO: MetadataCount is too big");
+      return;
+    }
     trait->Metadata = malloc(trait->MetadataCount * sizeof(U30));
     for(i = 0; i < trait->MetadataCount; i++)
       trait->Metadata[i] = readEncUInt30(f);
@@ -3218,6 +3329,8 @@ void parseABC_CLASS_INFO(struct ABC_CLASS_INFO *cinfo, FILE *f)
 
   cinfo->CInit = readEncUInt30(f);
   cinfo->TraitCount = readEncUInt30(f);
+  if (cinfo->TraitCount > INT_MAX / sizeof(struct ABC_TRAITS_INFO))
+    SWF_error("%s: value is too big, ", __FUNCTION__);
   cinfo->Traits = malloc(sizeof(struct ABC_TRAITS_INFO) * cinfo->TraitCount);
   for(i = 0; i < cinfo->TraitCount; i++)
     parseABC_TRAITS_INFO(cinfo->Traits + i, f);
@@ -3229,6 +3342,8 @@ void parseABC_SCRIPT_INFO(struct ABC_SCRIPT_INFO *sinfo, FILE *f)
 
   sinfo->Init = readEncUInt30(f);
   sinfo->TraitCount = readEncUInt30(f);
+  if (sinfo->TraitCount > INT_MAX / sizeof(struct ABC_TRAITS_INFO))
+    SWF_error("%s: value is too big, ", __FUNCTION__);
   sinfo->Traits = malloc(sizeof(struct ABC_TRAITS_INFO) * sinfo->TraitCount);
   for(i = 0; i < sinfo->TraitCount; i++)
     parseABC_TRAITS_INFO(sinfo->Traits + i, f);
@@ -3247,6 +3362,8 @@ void parseABC_INSTANCE_INFO(struct ABC_INSTANCE_INFO *inst, FILE *f)
     inst->ProtectedNs = readEncUInt30(f);
 
   inst->InterfaceCount = readEncUInt30(f);
+  if (inst->InterfaceCount > INT_MAX / sizeof(U30))
+    SWF_error("%s: value is too big, ", __FUNCTION__);
   inst->Interfaces = malloc(inst->InterfaceCount * sizeof(U30));
   for(i = 0; i < inst->InterfaceCount; i++)
     inst->Interfaces[i] = readEncUInt30(f);
@@ -3254,6 +3371,8 @@ void parseABC_INSTANCE_INFO(struct ABC_INSTANCE_INFO *inst, FILE *f)
   inst->IInit = readEncUInt30(f);
 
   inst->TraitCount = readEncUInt30(f);
+  if (inst->TraitCount > INT_MAX / sizeof(struct ABC_TRAITS_INFO))
+    SWF_error("%s: value is too big, ", __FUNCTION__);
   inst->Traits = malloc(inst->TraitCount * sizeof(struct ABC_TRAITS_INFO));
   for(i = 0; i < inst->TraitCount; i++)
     parseABC_TRAITS_INFO(inst->Traits + i, f);
@@ -3281,11 +3400,15 @@ void parseABC_METHOD_BODY_INFO(struct ABC_METHOD_BODY_INFO *minfo, FILE *f)
   minfo->Code = (UI8 *)readBytes(f, minfo->CodeLength);
  
   minfo->ExceptionCount = readEncUInt30(f);
+  if (minfo->ExceptionCount > INT_MAX / sizeof(struct ABC_EXCEPTION_INFO))
+    SWF_error("%s: value is too big, ", __FUNCTION__);
   minfo->Exceptions = malloc(minfo->ExceptionCount * sizeof(struct ABC_EXCEPTION_INFO));
   for(i = 0; i < minfo->ExceptionCount; i++)
     parseABC_EXCEPTION_INFO(minfo->Exceptions + i, f);
 
   minfo->TraitCount = readEncUInt30(f);
+  if (minfo->TraitCount > INT_MAX / sizeof(struct ABC_TRAITS_INFO))
+    SWF_error("%s: value is too big, ", __FUNCTION__);
   minfo->Traits = malloc(sizeof(struct ABC_TRAITS_INFO) * minfo->TraitCount);
   for(i = 0; i < minfo->TraitCount; i++)
     parseABC_TRAITS_INFO(minfo->Traits + i, f);
@@ -3302,20 +3425,28 @@ void parseABC_FILE(struct ABC_FILE *abcFile, FILE *f)
   parseABC_CONSTANT_POOL(&abcFile->ConstantPool, f);
    
   abcFile->MethodCount = readEncUInt30(f);
+  if (abcFile->MethodCount > INT_MAX / sizeof(struct ABC_METHOD_INFO))
+    SWF_error("%s: value is too big, ", __FUNCTION__);
   size = abcFile->MethodCount * sizeof(struct ABC_METHOD_INFO);
   abcFile->Methods = malloc(size);
   for(i = 0; i < abcFile->MethodCount; i++)
     parseABC_METHOD_INFO(abcFile->Methods + i, f);
   
   abcFile->MetadataCount = readEncUInt30(f);
+  if (abcFile->MetadataCount > INT_MAX / sizeof(struct ABC_METADATA_INFO))
+    SWF_error("%s: value is too big, ", __FUNCTION__);
   size = abcFile->MetadataCount * sizeof(struct ABC_METADATA_INFO);
   abcFile->Metadata = malloc(size);
   for(i = 0; i < abcFile->MetadataCount; i++)
     parseABC_METADATA_INFO(abcFile->Metadata + i, f);
 
   abcFile->ClassCount = readEncUInt30(f);
+  if (abcFile->ClassCount > INT_MAX / sizeof(struct ABC_INSTANCE_INFO))
+    SWF_error("%s: value is too big, ", __FUNCTION__);
   size = abcFile->ClassCount * sizeof(struct ABC_INSTANCE_INFO);
   abcFile->Instances = malloc(size);
+  if (abcFile->ClassCount > INT_MAX / sizeof(struct ABC_CLASS_INFO))
+    SWF_error("%s: value is too big, ", __FUNCTION__);
   size = abcFile->ClassCount * sizeof(struct ABC_CLASS_INFO);
   abcFile->Classes = malloc(size);
   for(i = 0; i < abcFile->ClassCount; i++)
@@ -3324,12 +3455,16 @@ void parseABC_FILE(struct ABC_FILE *abcFile, FILE *f)
     parseABC_CLASS_INFO(abcFile->Classes + i, f);
 
   abcFile->ScriptCount = readEncUInt30(f);
+  if (abcFile->ScriptCount > INT_MAX / sizeof(struct ABC_SCRIPT_INFO))
+    SWF_error("%s: value is too big, ", __FUNCTION__);
   size = abcFile->ScriptCount * sizeof(struct ABC_SCRIPT_INFO);
   abcFile->Scripts = malloc(size);
   for(i = 0; i < abcFile->ScriptCount; i++)
     parseABC_SCRIPT_INFO(abcFile->Scripts + i, f);
 
   abcFile->MethodBodyCount = readEncUInt30(f);
+  if (abcFile->MethodBodyCount > INT_MAX / sizeof(struct ABC_METHOD_BODY_INFO))
+    SWF_error("%s: value is too big, ", __FUNCTION__);
   size = abcFile->MethodBodyCount * sizeof(struct ABC_METHOD_BODY_INFO);
   abcFile->MethodBodies = malloc(size);
   for(i = 0; i < abcFile->MethodBodyCount; i++)
@@ -3353,7 +3488,9 @@ parseSWF_SYMBOLCLASS (FILE *f, int length)
   PAR_BEGIN(SWF_SYMBOLCLASS);
   count = readUInt16(f);
   parserrec->SymbolCount = count;
-  parserrec->SymbolList = malloc(count * sizeof(struct SWF_SYMBOLCLASS));
+  if (parserrec->SymbolCount > INT_MAX / sizeof(struct SWF_SYMBOLCLASS))
+    SWF_error("%s: value is too big, ", __FUNCTION__);
+  parserrec->SymbolList = malloc(parserrec->SymbolCount * sizeof(struct SWF_SYMBOLCLASS));
   for(i = 0; i < count; i++)
   {
      parserrec->SymbolList[i].SymbolId = readUInt16(f);
@@ -3378,6 +3515,8 @@ parseSWF_DEFINESCENEANDFRAMEDATA(FILE *f, int length)
   int i;
   PAR_BEGIN(SWF_DEFINESCENEANDFRAMEDATA);
   parserrec->SceneCount = readEncUInt32(f);
+  if (parserrec->SceneCount > INT_MAX / sizeof(struct SCENE_DATA))
+    SWF_error("%s: value is too big, ", __FUNCTION__);
   parserrec->Scenes = malloc(sizeof(struct SCENE_DATA) * parserrec->SceneCount);
   for(i = 0; i < parserrec->SceneCount; i++)
   {
@@ -3385,6 +3524,8 @@ parseSWF_DEFINESCENEANDFRAMEDATA(FILE *f, int length)
     parserrec->Scenes[i].Name = readString(f);
   }
   parserrec->FrameLabelCount = readEncUInt32(f);
+  if (parserrec->FrameLabelCount > INT_MAX / sizeof(struct FRAME_DATA))
+    SWF_error("%s: value is too big, ", __FUNCTION__);
   parserrec->Frames = malloc(sizeof(struct FRAME_DATA) * parserrec->FrameLabelCount);
   for(i = 0; i < parserrec->FrameLabelCount; i++)
   {
