static void ast_rtp_on_ice_complete(pj_ice_sess *ice, pj_status_t status)
{
	struct ast_rtp_instance *instance = ice->user_data;
	struct ast_rtp *rtp = ast_rtp_instance_get_data(instance);

	if (status == PJ_SUCCESS) {
		struct ast_sockaddr remote_address;

		/* Symmetric RTP must be disabled for the remote address to not get overwritten */
		ast_rtp_instance_set_prop(instance, AST_RTP_PROPERTY_NAT, 0);

		update_address_with_ice_candidate(rtp, AST_RTP_ICE_COMPONENT_RTP, &remote_address);
		ast_rtp_instance_set_remote_address(instance, &remote_address);

		if (rtp->rtcp) {
			update_address_with_ice_candidate(rtp, AST_RTP_ICE_COMPONENT_RTCP, &rtp->rtcp->them);
		}
	}
 
#ifdef HAVE_OPENSSL_SRTP
	dtls_perform_handshake(instance, &rtp->dtls, 0);

	if (rtp->rtcp) {
		dtls_perform_handshake(instance, &rtp->rtcp->dtls, 1);
	}
#endif

	if (!strictrtp) {
		return;
	}

	ast_verb(4, "%p -- Strict RTP learning after ICE completion\n", rtp);
	rtp_learning_start(rtp);
}
