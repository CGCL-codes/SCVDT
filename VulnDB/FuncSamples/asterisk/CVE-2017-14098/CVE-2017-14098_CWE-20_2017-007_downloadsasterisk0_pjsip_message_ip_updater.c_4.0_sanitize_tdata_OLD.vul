static void sanitize_tdata(pjsip_tx_data *tdata)
{
	static const pj_str_t x_name = { AST_SIP_X_AST_TXP, AST_SIP_X_AST_TXP_LEN };
	pjsip_param *x_transport;
	pjsip_sip_uri *uri;
	pjsip_fromto_hdr *fromto;
	pjsip_contact_hdr *contact;
	pjsip_hdr *hdr;

	if (tdata->msg->type == PJSIP_REQUEST_MSG) {
		uri = pjsip_uri_get_uri(tdata->msg->line.req.uri);
		x_transport = pjsip_param_find(&uri->other_param, &x_name);
		if (x_transport) {
			pj_list_erase(x_transport);
		}
	}

	for (hdr = tdata->msg->hdr.next; hdr != &tdata->msg->hdr; hdr = hdr->next) {
		if (hdr->type == PJSIP_H_TO || hdr->type == PJSIP_H_FROM) {
			fromto = (pjsip_fromto_hdr *) hdr;
			uri = pjsip_uri_get_uri(fromto->uri);
			x_transport = pjsip_param_find(&uri->other_param, &x_name);
			if (x_transport) {
				pj_list_erase(x_transport);
			}
		} else if (hdr->type == PJSIP_H_CONTACT) {
			contact = (pjsip_contact_hdr *) hdr;
			uri = pjsip_uri_get_uri(contact->uri);
			x_transport = pjsip_param_find(&uri->other_param, &x_name);
			if (x_transport) {
				pj_list_erase(x_transport);
			}
		}
	}

	pjsip_tx_data_invalidate_msg(tdata);
}
