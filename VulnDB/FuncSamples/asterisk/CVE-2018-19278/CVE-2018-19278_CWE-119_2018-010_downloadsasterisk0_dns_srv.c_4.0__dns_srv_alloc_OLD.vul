struct ast_dns_record *dns_srv_alloc(struct ast_dns_query *query, const char *data, const size_t size)
{
	uint16_t priority;
	uint16_t weight;
	uint16_t port;
	const char *ptr;
	const char *end_of_record;
	struct ast_dns_srv_record *srv;
	int host_size;
	char host[NI_MAXHOST] = "";

	ptr = dns_find_record(data, size, query->result->answer, query->result->answer_size);
	ast_assert(ptr != NULL);

	end_of_record = ptr + size;

	/* PRIORITY */
	ptr += dns_parse_short((unsigned char *) ptr, &priority);
	if (ptr >= end_of_record) {
		return NULL;
	}

	/* WEIGHT */
	ptr += dns_parse_short((unsigned char *) ptr, &weight);
	if (ptr >= end_of_record) {
		return NULL;
	}

	/* PORT */
	ptr += dns_parse_short((unsigned char *) ptr, &port);
	if (ptr >= end_of_record) {
		return NULL;
	}

	host_size = dn_expand((unsigned char *)query->result->answer, (unsigned char *) end_of_record, (unsigned char *) ptr, host, sizeof(host) - 1);
	if (host_size < 0) {
		ast_log(LOG_ERROR, "Failed to expand domain name: %s\n", strerror(errno));
		return NULL;
	}

	if (!strcmp(host, ".")) {
		return NULL;
	}

	srv = ast_calloc(1, sizeof(*srv) + size + host_size + 1);
	if (!srv) {
		return NULL;
	}

	srv->priority = priority;
	srv->weight = weight;
	srv->port = port;

	srv->host = srv->data + size;
	strcpy((char *)srv->host, host); /* SAFE */
	((char *)srv->host)[host_size] = '\0';

	srv->generic.data_ptr = srv->data;

	return (struct ast_dns_record *)srv;
}
