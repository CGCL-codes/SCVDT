static void ReloadPrefsCallback(const char* pref, XPCJSContext* xpccx) {
  JSContext* cx = xpccx->Context();

  bool useBaseline = Preferences::GetBool(JS_OPTIONS_DOT_STR "baselinejit");
  bool useIon = Preferences::GetBool(JS_OPTIONS_DOT_STR "ion");
  bool useAsmJS = Preferences::GetBool(JS_OPTIONS_DOT_STR "asmjs");
  bool useWasm = Preferences::GetBool(JS_OPTIONS_DOT_STR "wasm");
  bool useWasmIon = Preferences::GetBool(JS_OPTIONS_DOT_STR "wasm_ionjit");
  bool useWasmBaseline =
      Preferences::GetBool(JS_OPTIONS_DOT_STR "wasm_baselinejit");
#ifdef ENABLE_WASM_CRANELIFT
  bool useWasmCranelift =
      Preferences::GetBool(JS_OPTIONS_DOT_STR "wasm_cranelift");
#endif
#ifdef ENABLE_WASM_REFTYPES
  bool useWasmGc = Preferences::GetBool(JS_OPTIONS_DOT_STR "wasm_gc");
#endif
  bool useWasmVerbose = Preferences::GetBool(JS_OPTIONS_DOT_STR "wasm_verbose");
  bool throwOnAsmJSValidationFailure = Preferences::GetBool(
      JS_OPTIONS_DOT_STR "throw_on_asmjs_validation_failure");
  bool useNativeRegExp =
      Preferences::GetBool(JS_OPTIONS_DOT_STR "native_regexp");

  bool parallelParsing =
      Preferences::GetBool(JS_OPTIONS_DOT_STR "parallel_parsing");
  bool offthreadIonCompilation =
      Preferences::GetBool(JS_OPTIONS_DOT_STR "ion.offthread_compilation");
  bool useBaselineEager = Preferences::GetBool(
      JS_OPTIONS_DOT_STR "baselinejit.unsafe_eager_compilation");
  bool useIonEager =
      Preferences::GetBool(JS_OPTIONS_DOT_STR "ion.unsafe_eager_compilation");
#ifdef DEBUG
  bool fullJitDebugChecks =
      Preferences::GetBool(JS_OPTIONS_DOT_STR "jit.full_debug_checks");
#endif

  int32_t baselineThreshold =
      Preferences::GetInt(JS_OPTIONS_DOT_STR "baselinejit.threshold", -1);
  int32_t ionThreshold =
      Preferences::GetInt(JS_OPTIONS_DOT_STR "ion.threshold", -1);
  int32_t ionFrequentBailoutThreshold = Preferences::GetInt(
      JS_OPTIONS_DOT_STR "ion.frequent_bailout_threshold", -1);

  sDiscardSystemSource =
      Preferences::GetBool(JS_OPTIONS_DOT_STR "discardSystemSource");

  bool useAsyncStack = Preferences::GetBool(JS_OPTIONS_DOT_STR "asyncstack");

#ifdef ENABLE_BIGINT
  sBigIntEnabled = Preferences::GetBool(JS_OPTIONS_DOT_STR "bigint");
#endif

  bool throwOnDebuggeeWouldRun =
      Preferences::GetBool(JS_OPTIONS_DOT_STR "throw_on_debuggee_would_run");

  bool dumpStackOnDebuggeeWouldRun = Preferences::GetBool(
      JS_OPTIONS_DOT_STR "dump_stack_on_debuggee_would_run");

  bool werror = Preferences::GetBool(JS_OPTIONS_DOT_STR "werror");

  bool extraWarnings = Preferences::GetBool(JS_OPTIONS_DOT_STR "strict");

  bool spectreIndexMasking =
      Preferences::GetBool(JS_OPTIONS_DOT_STR "spectre.index_masking");
  bool spectreObjectMitigationsBarriers = Preferences::GetBool(
      JS_OPTIONS_DOT_STR "spectre.object_mitigations.barriers");
  bool spectreObjectMitigationsMisc = Preferences::GetBool(
      JS_OPTIONS_DOT_STR "spectre.object_mitigations.misc");
  bool spectreStringMitigations =
      Preferences::GetBool(JS_OPTIONS_DOT_STR "spectre.string_mitigations");
  bool spectreValueMasking =
      Preferences::GetBool(JS_OPTIONS_DOT_STR "spectre.value_masking");
  bool spectreJitToCxxCalls =
      Preferences::GetBool(JS_OPTIONS_DOT_STR "spectre.jit_to_C++_calls");

  bool unboxedObjects =
      Preferences::GetBool(JS_OPTIONS_DOT_STR "unboxed_objects");

  sSharedMemoryEnabled =
      Preferences::GetBool(JS_OPTIONS_DOT_STR "shared_memory");
  sStreamsEnabled = Preferences::GetBool(JS_OPTIONS_DOT_STR "streams");

#ifdef DEBUG
  sExtraWarningsForSystemJS =
      Preferences::GetBool(JS_OPTIONS_DOT_STR "strict.debug");
#endif

#ifdef JS_GC_ZEAL
  int32_t zeal = Preferences::GetInt(JS_OPTIONS_DOT_STR "gczeal", -1);
  int32_t zeal_frequency = Preferences::GetInt(
      JS_OPTIONS_DOT_STR "gczeal.frequency", JS_DEFAULT_ZEAL_FREQ);
  if (zeal >= 0) {
    JS_SetGCZeal(cx, (uint8_t)zeal, zeal_frequency);
  }
#endif  // JS_GC_ZEAL

#ifdef FUZZING
  bool fuzzingEnabled = StaticPrefs::fuzzing_enabled();
#endif

  JS::ContextOptionsRef(cx)
      .setBaseline(useBaseline)
      .setIon(useIon)
      .setAsmJS(useAsmJS)
      .setWasm(useWasm)
      .setWasmIon(useWasmIon)
      .setWasmBaseline(useWasmBaseline)
#ifdef ENABLE_WASM_CRANELIFT
      .setWasmCranelift(useWasmCranelift)
#endif
#ifdef ENABLE_WASM_REFTYPES
      .setWasmGc(useWasmGc)
#endif
      .setWasmVerbose(useWasmVerbose)
      .setThrowOnAsmJSValidationFailure(throwOnAsmJSValidationFailure)
      .setNativeRegExp(useNativeRegExp)
      .setAsyncStack(useAsyncStack)
      .setThrowOnDebuggeeWouldRun(throwOnDebuggeeWouldRun)
      .setDumpStackOnDebuggeeWouldRun(dumpStackOnDebuggeeWouldRun)
      .setWerror(werror)
#ifdef FUZZING
      .setFuzzing(fuzzingEnabled)
#endif
      .setExtraWarnings(extraWarnings);

  nsCOMPtr<nsIXULRuntime> xr = do_GetService("@mozilla.org/xre/runtime;1");
  if (xr) {
    bool safeMode = false;
    xr->GetInSafeMode(&safeMode);
    if (safeMode) {
      JS::ContextOptionsRef(cx).disableOptionsForSafeMode();
    }
  }

  JS_SetParallelParsingEnabled(cx, parallelParsing);
  JS_SetOffthreadIonCompilationEnabled(cx, offthreadIonCompilation);
  JS_SetGlobalJitCompilerOption(cx, JSJITCOMPILER_BASELINE_WARMUP_TRIGGER,
                                useBaselineEager ? 0 : baselineThreshold);
  JS_SetGlobalJitCompilerOption(cx, JSJITCOMPILER_ION_WARMUP_TRIGGER,
                                useIonEager ? 0 : ionThreshold);
  JS_SetGlobalJitCompilerOption(cx,
                                JSJITCOMPILER_ION_FREQUENT_BAILOUT_THRESHOLD,
                                ionFrequentBailoutThreshold);

#ifdef DEBUG
  JS_SetGlobalJitCompilerOption(cx, JSJITCOMPILER_FULL_DEBUG_CHECKS,
                                fullJitDebugChecks);
#endif

  JS_SetGlobalJitCompilerOption(cx, JSJITCOMPILER_SPECTRE_INDEX_MASKING,
                                spectreIndexMasking);
  JS_SetGlobalJitCompilerOption(
      cx, JSJITCOMPILER_SPECTRE_OBJECT_MITIGATIONS_BARRIERS,
      spectreObjectMitigationsBarriers);
  JS_SetGlobalJitCompilerOption(cx,
                                JSJITCOMPILER_SPECTRE_OBJECT_MITIGATIONS_MISC,
                                spectreObjectMitigationsMisc);
  JS_SetGlobalJitCompilerOption(cx, JSJITCOMPILER_SPECTRE_STRING_MITIGATIONS,
                                spectreStringMitigations);
  JS_SetGlobalJitCompilerOption(cx, JSJITCOMPILER_SPECTRE_VALUE_MASKING,
                                spectreValueMasking);
  JS_SetGlobalJitCompilerOption(cx, JSJITCOMPILER_SPECTRE_JIT_TO_CXX_CALLS,
                                spectreJitToCxxCalls);

  JS_SetGlobalJitCompilerOption(cx, JSJITCOMPILER_UNBOXED_OBJECTS,
                                unboxedObjects);
}
