static void*
WasmHandleExecutionInterrupt()
{
    WasmActivation* activation = JSContext::innermostWasmActivation();

    // wasm::Compartment requires notification when execution is interrupted in
    // the compartment. Only the innermost compartment has been interrupted;
    // enclosing compartments necessarily exited through an exit stub.
    activation->compartment()->wasm.setInterrupted(true);
    bool success = CheckForInterrupt(activation->cx());
    activation->compartment()->wasm.setInterrupted(false);

    // Preserve the invariant that having a non-null resumePC means that we are
    // handling an interrupt.
    void* resumePC = activation->resumePC();
    activation->setResumePC(nullptr);

    // Return the resumePC if execution can continue or null if execution should
    // jump to the throw stub.
    return success ? resumePC : nullptr;
}
