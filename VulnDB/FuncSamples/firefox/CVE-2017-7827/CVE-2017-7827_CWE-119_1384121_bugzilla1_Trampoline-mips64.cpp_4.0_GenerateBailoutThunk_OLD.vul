static void
GenerateBailoutThunk(JSContext* cx, MacroAssembler& masm, uint32_t frameClass)
{
    PushBailoutFrame(masm, a0);

    // Put pointer to BailoutInfo
    static const uint32_t sizeOfBailoutInfo = sizeof(uintptr_t) * 2;
    masm.subPtr(Imm32(sizeOfBailoutInfo), StackPointer);
    masm.movePtr(StackPointer, a1);

    masm.setupAlignedABICall();
    masm.passABIArg(a0);
    masm.passABIArg(a1);
    masm.callWithABI(JS_FUNC_TO_DATA_PTR(void*, Bailout));

    // Get BailoutInfo pointer
    masm.loadPtr(Address(StackPointer, 0), a2);

    // Stack is:
    //     [frame]
    //     snapshotOffset
    //     frameSize
    //     [bailoutFrame]
    //     [bailoutInfo]
    //
    // Remove both the bailout frame and the topmost Ion frame's stack.
    // Load frameSize from stack
    masm.loadPtr(Address(StackPointer,
                         sizeOfBailoutInfo + BailoutStack::offsetOfFrameSize()), a1);
    // Remove complete BailoutStack class and data after it
    masm.addPtr(Imm32(sizeof(BailoutStack) + sizeOfBailoutInfo), StackPointer);
    // Remove frame size srom stack
    masm.addPtr(a1, StackPointer);

    // Jump to shared bailout tail. The BailoutInfo pointer has to be in a2.
    JitCode* bailoutTail = cx->runtime()->jitRuntime()->getBailoutTail();
    masm.branch(bailoutTail);
}
