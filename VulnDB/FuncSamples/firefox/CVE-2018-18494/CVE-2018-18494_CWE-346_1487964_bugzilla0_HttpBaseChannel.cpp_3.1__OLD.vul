#undef IMPL_TIMING_ATTR

mozilla::dom::PerformanceStorage*
HttpBaseChannel::GetPerformanceStorage()
{
  // If performance timing is disabled, there is no need for the Performance
  // object anymore.
  if (!mTimingEnabled) {
    return nullptr;
  }

  // There is no point in continuing, since the performance object in the parent
  // isn't the same as the one in the child which will be reporting resource performance.
  if (XRE_IsE10sParentProcess()) {
    return nullptr;
  }

  if (!mLoadInfo) {
    return nullptr;
  }

  // If a custom performance storage is set, let's use it.
  mozilla::dom::PerformanceStorage* performanceStorage = mLoadInfo->GetPerformanceStorage();
  if (performanceStorage) {
    return performanceStorage;
  }

  nsCOMPtr<nsIDocument> loadingDocument;
  mLoadInfo->GetLoadingDocument(getter_AddRefs(loadingDocument));
  if (!loadingDocument) {
    return nullptr;
  }

  // We only add to the document's performance object if it has the same
  // principal as the one triggering the load. This is to prevent navigations
  // triggered _by_ the iframe from showing up in the parent document's
  // performance entries if they have different origins.
  if (!mLoadInfo->TriggeringPrincipal()->Equals(loadingDocument->NodePrincipal())) {
    return nullptr;
  }

  nsCOMPtr<nsPIDOMWindowInner> innerWindow = loadingDocument->GetInnerWindow();
  if (!innerWindow) {
    return nullptr;
  }

  mozilla::dom::Performance* performance = innerWindow->GetPerformance();
  if (!performance) {
    return nullptr;
  }

  return performance->AsPerformanceStorage();
}
