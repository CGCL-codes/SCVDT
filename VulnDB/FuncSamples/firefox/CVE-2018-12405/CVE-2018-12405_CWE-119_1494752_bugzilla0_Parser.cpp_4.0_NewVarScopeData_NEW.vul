Maybe<VarScope::Data*>
NewVarScopeData(JSContext* context, ParseContext::Scope& scope, LifoAlloc& alloc, ParseContext* pc)
{
    BindingNameVector vars(context);

    bool allBindingsClosedOver = pc->sc()->allBindingsClosedOver();

    for (BindingIter bi = scope.bindings(pc); bi; bi++) {
        if (bi.kind() == BindingKind::Var) {
            BindingName binding(bi.name(), allBindingsClosedOver || bi.closedOver());
            if (!vars.append(binding)) {
                return Nothing();
            }
        }
    }

    VarScope::Data* bindings = nullptr;
    uint32_t numBindings = vars.length();

    if (numBindings > 0) {
        bindings = NewEmptyBindingData<VarScope>(context, alloc, numBindings);
        if (!bindings) {
            return Nothing();
        }

        InitializeBindingData(bindings, numBindings, vars);
    }

    return Some(bindings);
}
