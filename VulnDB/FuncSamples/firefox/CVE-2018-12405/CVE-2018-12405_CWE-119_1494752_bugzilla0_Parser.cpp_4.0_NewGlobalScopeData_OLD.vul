Maybe<GlobalScope::Data*>
NewGlobalScopeData(JSContext* context, ParseContext::Scope& scope, LifoAlloc& alloc, ParseContext* pc)
{
    BindingNameVector vars(context);
    BindingNameVector lets(context);
    BindingNameVector consts(context);

    bool allBindingsClosedOver = pc->sc()->allBindingsClosedOver();
    for (BindingIter bi = scope.bindings(pc); bi; bi++) {
        bool closedOver = allBindingsClosedOver || bi.closedOver();

        switch (bi.kind()) {
          case BindingKind::Var: {
            bool isTopLevelFunction = bi.declarationKind() == DeclarationKind::BodyLevelFunction;
            BindingName binding(bi.name(), closedOver, isTopLevelFunction);
            if (!vars.append(binding)) {
                return Nothing();
            }
            break;
          }
          case BindingKind::Let: {
            BindingName binding(bi.name(), closedOver);
            if (!lets.append(binding)) {
                return Nothing();
            }
            break;
          }
          case BindingKind::Const: {
            BindingName binding(bi.name(), closedOver);
            if (!consts.append(binding)) {
                return Nothing();
            }
            break;
          }
          default:
            MOZ_CRASH("Bad global scope BindingKind");
        }
    }

    GlobalScope::Data* bindings = nullptr;
    uint32_t numBindings = vars.length() + lets.length() + consts.length();

    if (numBindings > 0) {
        bindings = NewEmptyBindingData<GlobalScope>(context, alloc, numBindings);
        if (!bindings) {
            return Nothing();
        }

        // The ordering here is important. See comments in GlobalScope.
        BindingName* start = bindings->trailingNames.start();
        BindingName* cursor = start;

        cursor = FreshlyInitializeBindings(cursor, vars);

        bindings->letStart = cursor - start;
        cursor = FreshlyInitializeBindings(cursor, lets);

        bindings->constStart = cursor - start;
        Unused << FreshlyInitializeBindings(cursor, consts);

        bindings->length = numBindings;
    }

    return Some(bindings);
}
