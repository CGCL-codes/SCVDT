Maybe<ModuleScope::Data*>
NewModuleScopeData(JSContext* context, ParseContext::Scope& scope, LifoAlloc& alloc, ParseContext* pc)
{
    BindingNameVector imports(context);
    BindingNameVector vars(context);
    BindingNameVector lets(context);
    BindingNameVector consts(context);

    bool allBindingsClosedOver = pc->sc()->allBindingsClosedOver();
    for (BindingIter bi = scope.bindings(pc); bi; bi++) {
        // Imports are indirect bindings and must not be given known slots.
        BindingName binding(bi.name(), (allBindingsClosedOver || bi.closedOver()) &&
                                       bi.kind() != BindingKind::Import);
        switch (bi.kind()) {
          case BindingKind::Import:
            if (!imports.append(binding)) {
                return Nothing();
            }
            break;
          case BindingKind::Var:
            if (!vars.append(binding)) {
                return Nothing();
            }
            break;
          case BindingKind::Let:
            if (!lets.append(binding)) {
                return Nothing();
            }
            break;
          case BindingKind::Const:
            if (!consts.append(binding)) {
                return Nothing();
            }
            break;
          default:
            MOZ_CRASH("Bad module scope BindingKind");
        }
    }

    ModuleScope::Data* bindings = nullptr;
    uint32_t numBindings = imports.length() + vars.length() + lets.length() + consts.length();

    if (numBindings > 0) {
        bindings = NewEmptyBindingData<ModuleScope>(context, alloc, numBindings);
        if (!bindings) {
            return Nothing();
        }

        // The ordering here is important. See comments in ModuleScope.
        InitializeBindingData(bindings, numBindings,
                              imports,
                              &ModuleScope::Data::varStart, vars,
                              &ModuleScope::Data::letStart, lets,
                              &ModuleScope::Data::constStart, consts);
    }

    return Some(bindings);
}
