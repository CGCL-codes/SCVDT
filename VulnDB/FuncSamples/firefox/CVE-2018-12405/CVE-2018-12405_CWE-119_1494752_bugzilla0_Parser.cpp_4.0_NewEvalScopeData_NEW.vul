Maybe<EvalScope::Data*>
NewEvalScopeData(JSContext* context, ParseContext::Scope& scope, LifoAlloc& alloc, ParseContext* pc)
{
    BindingNameVector vars(context);

    for (BindingIter bi = scope.bindings(pc); bi; bi++) {
        // Eval scopes only contain 'var' bindings. Make all bindings aliased
        // for now.
        MOZ_ASSERT(bi.kind() == BindingKind::Var);
        bool isTopLevelFunction = bi.declarationKind() == DeclarationKind::BodyLevelFunction;
        BindingName binding(bi.name(), true, isTopLevelFunction);
        if (!vars.append(binding)) {
            return Nothing();
        }
    }

    EvalScope::Data* bindings = nullptr;
    uint32_t numBindings = vars.length();

    if (numBindings > 0) {
        bindings = NewEmptyBindingData<EvalScope>(context, alloc, numBindings);
        if (!bindings) {
            return Nothing();
        }

        InitializeBindingData(bindings, numBindings, vars);
    }

    return Some(bindings);
}
