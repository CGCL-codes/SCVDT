static nsresult
FindObjectForHasInstance(JSContext* cx, HandleObject objArg, MutableHandleObject target)
{
    using namespace mozilla::jsipc;
    RootedObject obj(cx, objArg), proto(cx);
    while (true) {
        // Try the object, or the wrappee if allowed.
        JSObject* o = js::IsWrapper(obj) ? js::CheckedUnwrap(obj, false) : obj;
        if (o && (IS_WN_REFLECTOR(o) || IsDOMObject(o) || IsCPOW(o))) {
            target.set(o);
            return NS_OK;
        }

        // Walk the prototype chain from the perspective of the callee (i.e.
        // respecting Xrays if they exist).
        if (!js::GetObjectProto(cx, obj, &proto))
            return NS_ERROR_FAILURE;
        if (!proto) {
            target.set(nullptr);
            return NS_OK;
        }
        obj = proto;
    }
}
