uint8_t*
SurfaceToPackedBGR(DataSourceSurface *aSurface)
{
  SurfaceFormat format = aSurface->GetFormat();
  MOZ_ASSERT(format == SurfaceFormat::B8G8R8X8, "Format not supported");

  if (format != SurfaceFormat::B8G8R8X8) {
    // To support B8G8R8A8 we'd need to un-pre-multiply alpha
    return nullptr;
  }

  IntSize size = aSurface->GetSize();
  if (size.width < 0 || size.width >= INT32_MAX / 3) {
    return nullptr;
  }
  int32_t stride = size.width * 3;
  CheckedInt<size_t> bufferSize =
    CheckedInt<size_t>(stride) * CheckedInt<size_t>(size.height);
  if (!bufferSize.isValid()) {
    return nullptr;
  }
  uint8_t* imageBuffer = new (std::nothrow) uint8_t[bufferSize.value()];
  if (!imageBuffer) {
    return nullptr;
  }

  DataSourceSurface::MappedSurface map;
  if (!aSurface->Map(DataSourceSurface::MapType::READ, &map)) {
    delete [] imageBuffer;
    return nullptr;
  }

  SwizzleData(map.mData, map.mStride, SurfaceFormat::B8G8R8X8,
              imageBuffer, stride, SurfaceFormat::B8G8R8,
              size);

  aSurface->Unmap();

  return imageBuffer;
}
