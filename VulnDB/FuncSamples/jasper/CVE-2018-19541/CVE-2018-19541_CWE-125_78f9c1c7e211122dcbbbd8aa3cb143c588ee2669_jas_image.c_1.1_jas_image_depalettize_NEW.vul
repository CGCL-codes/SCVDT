int jas_image_depalettize(jas_image_t *image, unsigned cmptno, unsigned numlutents,
  const int_fast32_t *lutents, unsigned dtype, unsigned newcmptno)
{
	jas_image_cmptparm_t cmptparms;
	const jas_image_cmpt_t *cmpt = image->cmpts_[cmptno];

	const uint_least32_t width = cmpt->width_;
	const uint_least32_t height = cmpt->height_;

	cmptparms.tlx = cmpt->tlx_;
	cmptparms.tly = cmpt->tly_;
	cmptparms.hstep = cmpt->hstep_;
	cmptparms.vstep = cmpt->vstep_;
	cmptparms.width = width;
	cmptparms.height = height;
	cmptparms.prec = JAS_IMAGE_CDT_GETPREC(dtype);
	cmptparms.sgnd = JAS_IMAGE_CDT_GETSGND(dtype);

	if (jas_image_addcmpt(image, newcmptno, &cmptparms)) {
		return -1;
	}
	if (newcmptno <= cmptno) {
		++cmptno;
		cmpt = image->cmpts_[cmptno];
	}

	for (uint_least32_t j = 0; j < height; ++j) {
		for (uint_least32_t i = 0; i < width; ++i) {
			int v = jas_image_readcmptsample(image, cmptno, i, j);
			if (v < 0) {
				v = 0;
			} else if ((unsigned)v >= numlutents) {
				assert(numlutents > 0);
				v = numlutents - 1;
			}
			jas_image_writecmptsample(image, newcmptno, i, j,
			  lutents[v]);
		}
	}
	return 0;
}
