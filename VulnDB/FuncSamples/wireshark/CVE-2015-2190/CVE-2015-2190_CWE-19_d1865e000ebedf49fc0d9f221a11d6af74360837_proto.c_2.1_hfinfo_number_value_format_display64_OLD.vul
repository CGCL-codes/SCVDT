static const char *
hfinfo_number_value_format_display64(const header_field_info *hfinfo, int display, char buf[32], guint64 value)
{
	char *ptr = &buf[31];
	gboolean isint = IS_FT_INT(hfinfo->type);

	*ptr = '\0';
	/* Properly format value */
		switch (display) {
			case BASE_DEC:
				return isint ? int64_to_str_back(ptr, (gint64) value) : uint64_to_str_back(ptr, value);

			case BASE_DEC_HEX:
				*(--ptr) = ')';
				ptr = hex64_to_str_back(ptr, _hfinfo_type_hex_octet(hfinfo->type), value);
				*(--ptr) = '(';
				*(--ptr) = ' ';
				ptr = isint ? int64_to_str_back(ptr, (gint64) value) : uint64_to_str_back(ptr, value);
				return ptr;

			case BASE_OCT:
				return oct64_to_str_back(ptr, value);

			case BASE_HEX:
				return hex64_to_str_back(ptr, _hfinfo_type_hex_octet(hfinfo->type), value);

			case BASE_HEX_DEC:
				*(--ptr) = ')';
				ptr = isint ? int64_to_str_back(ptr, (gint64) value) : uint64_to_str_back(ptr, value);
				*(--ptr) = '(';
				*(--ptr) = ' ';
				ptr = hex64_to_str_back(ptr, _hfinfo_type_hex_octet(hfinfo->type), value);
				return ptr;

			default:
				DISSECTOR_ASSERT_NOT_REACHED();
				;
		}
	return ptr;
}
