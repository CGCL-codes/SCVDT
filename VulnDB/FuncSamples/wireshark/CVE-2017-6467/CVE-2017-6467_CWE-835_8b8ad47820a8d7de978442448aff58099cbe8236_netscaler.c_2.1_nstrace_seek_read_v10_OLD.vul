static gboolean nstrace_seek_read_v10(wtap *wth, gint64 seek_off,
    struct wtap_pkthdr *phdr, Buffer *buf, int *err, gchar **err_info)
{
    nspr_hd_v10_t hdr;
    int bytes_read;
    guint record_length;
    guint8 *pd;
    unsigned int bytes_to_read;
    nspr_pktracefull_v10_t *fp;
    nspr_pktracepart_v10_t *pp;

    *err = 0;

    if (file_seek(wth->random_fh, seek_off, SEEK_SET, err) == -1)
        return FALSE;

    /*
    ** Read the record header.
    */
    bytes_read = file_read((void *)&hdr, sizeof hdr, wth->random_fh);
    if (bytes_read != sizeof hdr) {
        *err = file_error(wth->random_fh, err_info);
        if (*err == 0)
            *err = WTAP_ERR_SHORT_READ;
        return FALSE;
    }

    /*
    ** Get the record length.
    */
    record_length = nspr_getv10recordsize(&hdr);

    /*
    ** Copy the header to the buffer and read the rest of the record..
    */
    buffer_assure_space(buf, record_length);
    pd = buffer_start_ptr(buf);
    memcpy(pd, (void *)&hdr, sizeof hdr);
    if (record_length > sizeof hdr) {
    	bytes_to_read = (unsigned int)(record_length - sizeof hdr);
        bytes_read = file_read(pd + sizeof hdr, bytes_to_read, wth->random_fh);
        if (bytes_read < 0 || (unsigned int)bytes_read != bytes_to_read) {
            *err = file_error(wth->random_fh, err_info);
            if (*err == 0)
                *err = WTAP_ERR_SHORT_READ;
            return FALSE;
        }
    }

    /*
    ** Fill in what part of the struct wtap_pkthdr we can.
    */
#define GENERATE_CASE_FULL(phdr,type,acttype) \
        case NSPR_PDPKTRACEFULLTX_V##type:\
        case NSPR_PDPKTRACEFULLTXB_V##type:\
        case NSPR_PDPKTRACEFULLRX_V##type:\
            fp = (nspr_pktracefull_v10_t *) pd;\
            TRACE_FULL_V##type##_REC_LEN_OFF(phdr,v##type##_full,fp,pktracefull_v##type);\
            (phdr)->pseudo_header.nstr.rec_type = NSPR_HEADER_VERSION##acttype;\
            break;

#define GENERATE_CASE_PART(phdr,type,acttype) \
        case NSPR_PDPKTRACEPARTTX_V##type:\
        case NSPR_PDPKTRACEPARTTXB_V##type:\
        case NSPR_PDPKTRACEPARTRX_V##type:\
            pp = (nspr_pktracepart_v10_t *) pd;\
            TRACE_PART_V##type##_REC_LEN_OFF(phdr,v##type##_part,pp,pktracepart_v##type);\
            (phdr)->pseudo_header.nstr.rec_type = NSPR_HEADER_VERSION##acttype;\
            break;

    switch (pletoh16(&(( nspr_header_v10_t*)pd)->ph_RecordType))
    {
        GENERATE_CASE_FULL(phdr,10,100)
        GENERATE_CASE_PART(phdr,10,100)
    }

#undef GENERATE_CASE_FULL
#undef GENERATE_CASE_PART

    return TRUE;
}
