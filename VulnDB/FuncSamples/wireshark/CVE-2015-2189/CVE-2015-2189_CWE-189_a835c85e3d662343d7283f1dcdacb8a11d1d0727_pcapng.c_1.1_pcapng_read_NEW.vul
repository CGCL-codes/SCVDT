static gboolean
pcapng_read(wtap *wth, int *err, gchar **err_info, gint64 *data_offset)
{
    pcapng_t *pcapng = (pcapng_t *)wth->priv;
    wtapng_block_t wblock;
    wtapng_if_descr_t *wtapng_if_descr;
    wtapng_if_stats_t if_stats;

    wblock.frame_buffer  = wth->frame_buffer;
    wblock.packet_header = &wth->phdr;

    pcapng->add_new_ipv4 = wth->add_new_ipv4;
    pcapng->add_new_ipv6 = wth->add_new_ipv6;

    /* read next block */
    while (1) {
        *data_offset = file_tell(wth->fh);
        pcapng_debug1("pcapng_read: data_offset is %" G_GINT64_MODIFIER "d", *data_offset);
        if (pcapng_read_block(wth, wth->fh, pcapng, &wblock, err, err_info) != PCAPNG_BLOCK_OK) {
            pcapng_debug1("pcapng_read: data_offset is finally %" G_GINT64_MODIFIER "d", *data_offset);
            pcapng_debug0("pcapng_read: couldn't read packet block");
            return FALSE;
        }

        switch (wblock.type) {

            case(BLOCK_TYPE_SHB):
                /* We don't currently support multi-section files. */
                wth->phdr.pkt_encap = WTAP_ENCAP_UNKNOWN;
                wth->phdr.pkt_tsprec = WTAP_TSPREC_UNKNOWN;
                *err = WTAP_ERR_UNSUPPORTED;
                *err_info = g_strdup_printf("pcapng: multi-section files not currently supported");
                return FALSE;

            case(BLOCK_TYPE_PB):
            case(BLOCK_TYPE_SPB):
            case(BLOCK_TYPE_EPB):
                /* packet block - we've found a packet */
                goto got_packet;

            case(BLOCK_TYPE_IDB):
                /* A new interface */
                pcapng_debug0("pcapng_read: block type BLOCK_TYPE_IDB");
                pcapng_process_idb(wth, pcapng, &wblock);
                break;

            case(BLOCK_TYPE_NRB):
                /* More name resolution entries */
                pcapng_debug0("pcapng_read: block type BLOCK_TYPE_NRB");
                break;

            case(BLOCK_TYPE_ISB):
                /* Another interface statistics report */
                pcapng_debug0("pcapng_read: block type BLOCK_TYPE_ISB");
                if (wth->interface_data->len <= wblock.data.if_stats.interface_id) {
                    pcapng_debug1("pcapng_read: BLOCK_TYPE_ISB wblock.if_stats.interface_id %u >= number_of_interfaces", wblock.data.if_stats.interface_id);
                } else {
                    /* Get the interface description */
                    wtapng_if_descr = &g_array_index(wth->interface_data, wtapng_if_descr_t, wblock.data.if_stats.interface_id);
                    if (wtapng_if_descr->num_stat_entries == 0) {
                        /* First ISB found, no previous entry */
                        pcapng_debug0("pcapng_read: block type BLOCK_TYPE_ISB. First ISB found, no previous entry");
                        wtapng_if_descr->interface_statistics = g_array_new(FALSE, FALSE, sizeof(wtapng_if_stats_t));
                    }

                    if_stats.interface_id       = wblock.data.if_stats.interface_id;
                    if_stats.ts_high            = wblock.data.if_stats.ts_high;
                    if_stats.ts_low             = wblock.data.if_stats.ts_low;
                    /* options */
                    if_stats.opt_comment        = wblock.data.if_stats.opt_comment;     /* NULL if not available */
                    if_stats.isb_starttime      = wblock.data.if_stats.isb_starttime;
                    if_stats.isb_endtime        = wblock.data.if_stats.isb_endtime;
                    if_stats.isb_ifrecv         = wblock.data.if_stats.isb_ifrecv;
                    if_stats.isb_ifdrop         = wblock.data.if_stats.isb_ifdrop;
                    if_stats.isb_filteraccept   = wblock.data.if_stats.isb_filteraccept;
                    if_stats.isb_osdrop         = wblock.data.if_stats.isb_osdrop;
                    if_stats.isb_usrdeliv       = wblock.data.if_stats.isb_usrdeliv;

                    g_array_append_val(wtapng_if_descr->interface_statistics, if_stats);
                    wtapng_if_descr->num_stat_entries++;
                }
                break;

            default:
                /* XXX - improve handling of "unknown" blocks */
                pcapng_debug1("pcapng_read: Unknown block type 0x%08x", wblock.type);
                break;
        }
    }

got_packet:

    /*pcapng_debug2("Read length: %u Packet length: %u", bytes_read, wth->phdr.caplen);*/
    pcapng_debug1("pcapng_read: data_offset is finally %" G_GINT64_MODIFIER "d", *data_offset);

    return TRUE;
}
