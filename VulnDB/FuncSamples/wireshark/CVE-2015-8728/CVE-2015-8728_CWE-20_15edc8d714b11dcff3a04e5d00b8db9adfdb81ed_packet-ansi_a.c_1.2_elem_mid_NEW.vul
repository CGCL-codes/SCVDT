static guint8
elem_mid(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 offset, guint len, ansi_a_shared_data_t *data_p)
{
    guint8      oct;
    guint32     value;
    guint32     curr_offset;
    const gchar *str;

    curr_offset = offset;

    oct = tvb_get_guint8(tvb, curr_offset);

    switch (oct & 0x07)
    {
    case 1:     /* MEID */
        proto_tree_add_item(tree, hf_ansi_a_meid_mid_digit_1, tvb, curr_offset, 1, ENC_BIG_ENDIAN);
        proto_tree_add_item(tree, hf_ansi_a_mid_odd_even_ind, tvb, curr_offset, 1, ENC_BIG_ENDIAN);
        proto_tree_add_item(tree, hf_ansi_a_mid_type_of_id, tvb, curr_offset, 1, ENC_BIG_ENDIAN);

        if (curr_offset - offset >= len) /* Sanity check */
            return (curr_offset - offset);

        str = tvb_bcd_dig_to_wmem_packet_str(tvb, curr_offset, len - (curr_offset - offset), &Dgt_meid, TRUE);
        proto_tree_add_string(tree, hf_ansi_a_meid, tvb, curr_offset, len - (curr_offset - offset), str);

        proto_item_append_text(data_p->elem_item, " - MEID (%s)", str);
        curr_offset += len - (curr_offset - offset);
        break;

    case 2:     /* Broadcast Address */
        proto_tree_add_item(tree, hf_ansi_a_reserved_bits_8_f8, tvb, curr_offset, 1, ENC_BIG_ENDIAN);
        proto_tree_add_item(tree, hf_ansi_a_mid_type_of_id, tvb, curr_offset, 1, ENC_BIG_ENDIAN);

        curr_offset++;

        proto_tree_add_item(tree, hf_ansi_a_mid_broadcast_priority, tvb, curr_offset, 1, ENC_BIG_ENDIAN);
        proto_tree_add_item(tree, hf_ansi_a_mid_broadcast_message_id, tvb, curr_offset, 1, ENC_BIG_ENDIAN);

        curr_offset++;

        proto_tree_add_item(tree, hf_ansi_a_mid_broadcast_zone_id, tvb, curr_offset, 1, ENC_BIG_ENDIAN);

        oct = tvb_get_guint8(tvb, curr_offset);

        proto_item_append_text(data_p->elem_item, " - Broadcast (Zone ID: %u)", oct);

        curr_offset++;

        value = tvb_get_ntohs(tvb, curr_offset);

        str = val_to_str_ext_const(value, &ansi_tsb58_srvc_cat_vals_ext, "Reserved");

        proto_tree_add_uint_format_value(tree, hf_ansi_a_mid_broadcast_srvc_cat, tvb, curr_offset, 2,
            value,
            "%s (%u)",
            str,
            value);

        curr_offset += 2;

        oct = tvb_get_guint8(tvb, curr_offset);

        str = val_to_str_ext_const(oct, &ansi_tsb58_language_ind_vals_ext, "Reserved");

        proto_tree_add_uint_format_value(tree, hf_ansi_a_mid_broadcast_language, tvb, curr_offset, 1,
            oct,
            "%s (%u)",
            str,
            oct);

        curr_offset++;
        break;

    case 5:     /* ESN */
        proto_tree_add_item(tree, hf_ansi_a_mid_unused, tvb, curr_offset, 1, ENC_BIG_ENDIAN);
        proto_tree_add_item(tree, hf_ansi_a_mid_odd_even_ind, tvb, curr_offset, 1, ENC_BIG_ENDIAN);
        proto_tree_add_item(tree, hf_ansi_a_mid_type_of_id, tvb, curr_offset, 1, ENC_BIG_ENDIAN);

        curr_offset++;

        value = tvb_get_ntohl(tvb, curr_offset);

        proto_tree_add_uint(tree, hf_ansi_a_esn,
            tvb, curr_offset, 4,
            value);

        proto_item_append_text(data_p->elem_item, " - %sESN (0x%04x)",
            data_p->meid_configured ? "p" : "",
            value);

        curr_offset += 4;
        break;

    case 6:     /* IMSI */
        proto_tree_add_uint_format_value(tree, hf_ansi_a_imsi_mid_digit_1, tvb, curr_offset, 1,
            oct, "%c", Dgt_msid.out[(oct & 0xf0) >> 4]);

        proto_tree_add_item(tree, hf_ansi_a_mid_odd_even_ind, tvb, curr_offset, 1, ENC_BIG_ENDIAN);
        proto_tree_add_item(tree, hf_ansi_a_mid_type_of_id, tvb, curr_offset, 1, ENC_BIG_ENDIAN);

        if (curr_offset - offset >= len) /* Sanity check */
            return (curr_offset - offset);

        str = tvb_bcd_dig_to_wmem_packet_str(tvb, curr_offset, len - (curr_offset - offset), &Dgt_msid, TRUE);
        proto_tree_add_string_format(tree, hf_ansi_a_imsi, tvb, curr_offset, len - (curr_offset - offset),
                                     str, "BCD Digits: %s", str);

        proto_item_append_text(data_p->elem_item, " - IMSI (%s)", str);
        if (data_p->message_item)
        {
            proto_item_append_text(data_p->message_item, " MID=%s", str);
        }
        if (global_a_info_display)
        {
            col_append_fstr(pinfo->cinfo, COL_INFO, "MID=%s ", str);
        }

        curr_offset += len - (curr_offset - offset);
        break;

    default:
        proto_tree_add_expert_format(tree, pinfo, &ei_ansi_a_unknown_format, tvb, curr_offset, len,
            "Mobile Identity ID type, %u, unknown/unsupported",
            (oct & 0x07));

        proto_item_append_text(data_p->elem_item, " - Format Unknown/Unsupported");

        curr_offset += len;
        break;
    }

    EXTRANEOUS_DATA_CHECK(len, curr_offset - offset);

    return(curr_offset - offset);
}
