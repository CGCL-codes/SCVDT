int dissect_wassp_tlv(proto_tree *wassp_tree, tvbuff_t *tvb, packet_info *pinfo, int offset, wassp_ru_msg_t rumsg_type)
{
	proto_item *tlvi = NULL;
	proto_tree *tlv_tree;
	guint16 tlv_type = WASSP_RU_UNUSED_0;
	guint16 length;
	guint32 value;
	int suboffset;
	wassp_ru_msg_t ru_msg_type = rumsg_type;
	char *label;



	SET_WASSP_TLV_VERSION(0);
	while ((value = tvb_reported_length_remaining(tvb, offset)) >= 4)
	{
		tlv_type = tvb_get_ntohs(tvb, offset + TLV_TYPE);
		length = tvb_get_ntohs(tvb, offset + TLV_LENGTH);
		label = (char*)try_val_to_str(tlv_type, wassp_tlv_types);
		label = (label == NULL) ? "Unknown Type" : label;

		if (length > value)
		{
			tlvi = proto_tree_add_item(wassp_tree, hf_wassp_tlv_invalid, tvb, offset, 4, ENC_BIG_ENDIAN);
			tlv_type = EID_UNUSED_0;
		}
		else if (length < 4)
		{
			tlvi = proto_tree_add_item(wassp_tree, hf_wassp_tlv_invalid, tvb, offset, 4, ENC_BIG_ENDIAN);
			tlv_type = EID_UNUSED_0;
		}
		else
		{
			tlvi = proto_tree_add_item(wassp_tree, hf_wassp_tlv_value, tvb, offset, length, ENC_NA);
			proto_item_append_text(tlvi, " : %s (%d)", label, tlv_type);

		}

		tlv_tree = proto_item_add_subtree(tlvi, ett_wassp_tlv);
		proto_tree_add_item(tlv_tree, hf_wassp_tlv_type_main, tvb, offset + TLV_TYPE, 2, ENC_BIG_ENDIAN);
		proto_tree_add_item(tlv_tree, hf_wassp_tlv_length, tvb, offset + TLV_LENGTH, 2, ENC_BIG_ENDIAN);

		switch (tlv_type)
		{
		case EID_UNUSED_0:                  // 0
			offset += 4;
			break;

		case EID_STATUS:                    // 1
			ru_msg_type = (wassp_ru_msg_t) tvb_get_guint8(tvb, WASSP_HDR_TYPE);

			/*this is an action TLV*/
			if (WASSP_RU_SW_Version_Validate_Rsp == ru_msg_type)
			{
				proto_item_append_text(tlvi, " (upgrade action)");
				proto_tree_add_item(tlv_tree, hf_wassp_tlv_eid_action, tvb, offset + TLV_VALUE, length - 4, ENC_BIG_ENDIAN);
			}
			else  /*assume status TLV*/
			{
				proto_item_append_text(tlvi, " (status)");
				proto_tree_add_item(tlv_tree, hf_wassp_tlv_eid_status, tvb, offset + TLV_VALUE, length - 4, ENC_BIG_ENDIAN);
			}
			offset += length;
			break;

		/* display as string */
		case EID_RU_SW_VERSION:                       // 2
		case EID_RU_SERIAL_NUMBER:                    // 3
		case EID_IMAGE_PATH:                          // 9
		case EID_RANDOM_NUMBER:                       // 14
		case EID_RU_MODEL:                            // 17
		case EID_RU_TRAP:                             // 24
		case EID_RU_SSID_NAME:                        // 37
		case EID_AC_REG_CHALLENGE:                    // 41
		case EID_AC_REG_RESPONSE:                     // 42
		case EID_STATS:                               // 43
		case EID_CERTIFICATE:                         // 44
		case EID_RADIO_INFO:                          // 51
		case EID_NETWORK_INFO:                        // 52
		case EID_PRODUCT_ID:                          // 54
		case EID_RADIO_INFO_ACK:                      // 55
		case EID_SSID:                                // 58
		case EID_MU_PMKID_LIST:                       // 72
		case EID_MU_PMK_BP:                           // 73
		case EID_MU_PMKID_BP:                         // 74
		case EID_LOG_FILE:                            // 83
		case EID_ALARM_DESCRIPTION:                   // 85
		case EID_RU_BACKUP_VERSION:                   // 93
		case EID_AC_SW_VERSION:                       // 94
		case EID_MCAST_LAMG_LIST:                     // 95
		case EID_FILTER_NAME:                         // 96
		case EID_SENSOR_IMG_VERSION:                  // 104
		case EID_RATECTRL_NAME_UL:                    // 111
		case EID_RATECTRL_NAME_DL:                    // 112
		case EID_POLICY_NAME:                         // 113
		case EID_SIAPP_AP_NAME:                       // 120
		case EID_SIAPP_USER_IDENTITY:                 // 151
		case EID_MU_FILTER_POLICY_NAME:               // 162
		case EID_MU_TOPOLOGY_POLICY_NAME:             // 163
		case EID_MU_COS_POLICY_NAME:                  // 164
		case EID_SITE_NAME:                           // 175
		case EID_SSS_SSID:                            // 191
		case EID_POLICY_ZONE_NAME:                    // 193
		case EID_MU_USER_NAME:                        // 196
		case EID_SCAN_SSID:                           // 237
		case EID_THREAT_NAME:                         // 248
		case EID_LOCATION:                            // 249
		case EID_MU_EVENT_STRING:                     // 254
		case EID_LOCATOR_FLOOR_NAME:                  // 288
		case EID_MU_RFS_NAME:                         // 296
		case EID_MU_URL:                              // 301
		case EID_MU_ACCT_SESSION_ID_STRING:           // 304
		case EID_MU_ACCT_POLICY_NAME:                 // 305
		case EID_MU_TUNNEL_PRIVATE_GROUP_ID_STRING:   // 309
		case EID_MU_USER_ID_STRING:                   // 310
		case EID_MU_LOCATION:                         // 331
		case EID_AREA_NAME:                           // 335
		case EID_CUI:                                 // 363
		case EID_WFA_HS20_URL:                        // 368
		case EID_DHCP_HOST_NAME:                      // 382
		case EID_MU_ECP_PW:                           // 385
		case EID_MU_ECP_TOKEN:                        // 386
			proto_tree_add_item(tlv_tree, hf_wassp_tlv_value_string, tvb, offset + TLV_VALUE, length - 4, ENC_ASCII|ENC_NA);
			offset += length;
			break;

		/* display as octext string */
		case EID_RU_REG_CHALLENGE:                      // 4
		case EID_RU_REG_RESPONSE:                       // 5
		case EID_RU_VNSID:                              // 7
		case EID_SESSION_KEY:                           // 12
		case EID_RU_PREAUTH:                            // 39
		case EID_RU_PMK:                                // 40
		case EID_SIAPP_PMKID:                           // 115
		case EID_SIAPP_PMK_REAUTH:                      // 116
		case EID_SIAPP_PMK_LIFETIME:                    // 117
		case EID_SIAPP_PMKID_FLAG:                      // 118
		case EID_SIAPP_MU_PMK:                          // 119
		case EID_SIAPP_CLUSTER_ACS_REQ:                 // 122
		case EID_SIAPP_PACKET_RETRIES:                  // 124
		case EID_SIAPP_ASSOC_IN_WLAN:                   // 125
		case EID_SIAPP_ASSOC_IN_CLUSTER:                // 126
		case EID_SIAPP_REASSOC_IN_CLUSTER:              // 127
		case EID_SIAPP_NEWAP_BSSID:                     // 129
		case EID_SIAPP_OLDAP_BSSID:                     // 130
		case EID_SIAPP_RAD_CACS_REQ:                    // 131
		case EID_SIAPP_CLIENT_COUNT:                    // 133
		case EID_SIAPP_MU_TransmittedFrameCount:        // 135
		case EID_SIAPP_MU_ReceivedFrameCount:           // 136
		case EID_SIAPP_MU_TransmittedBytes:             // 137
		case EID_SIAPP_MU_ReceivedBytes:                // 138
		case EID_SIAPP_MU_UL_DroppedRateControlPackets: // 139
		case EID_SIAPP_MU_DL_DroppedRateControlPackets: // 140
		case EID_SIAPP_MU_DL_DroppedBufferFullPackets:  // 141
		case EID_SIAPP_MU_DL_LostRetriesPackets:        // 142
		case EID_SIAPP_MU_UL_DroppedRateControlBytes:   // 143
		case EID_SIAPP_MU_DL_DroppedRateControlBytes:   // 144
		case EID_SIAPP_MU_DL_DroppedBufferFullBytes:    // 145
		case EID_SIAPP_MU_DL_LostRetriesBytes:          // 146
		case EID_SIAPP_BP_BSSID:                        // 147
		case EID_SIAPP_RADIO_ID:                        // 148
		case EID_SIAPP_PREAUTH_REQ:                     // 150
		case EID_SIAPP_LOADBAL_LOADGROUP_ID:            // 154
		case EID_MU_ACCOUNTING_CLASS:                   // 169
		case EID_SSS_TS64_MU_UPDATE:                    // 183
		case EID_SSS_TS64_AP_CURRENT:                   // 184
		case EID_SSS_AP_HOMEHASH:                       // 186
		case EID_EVENT_ARRAY:                           // 189
		case EID_INFORM_MU_PMK:                         // 199
		case EID_ARP_PROXY:                             // 201
		case EID_MCAST_FILTER_RULES:                    // 202
		case EID_AP_PARAMS:                             // 203
		case EID_THREAT_STATS_F:                        // 220
		case EID_THREAT_PATTERN:                        // 224
		case EID_LOCATOR_LOC_POINT:                     // 265
		case EID_MU_EVENT_DETAILS:                      // 266
		case EID_MU_EVENT_LOC_BLOCK:                    // 268
		case EID_AP_REDIRECT:                           // 291
		case EID_MU_CVLAN_BAP:                          // 292
		case EID_MU_SESSION_ID:                         // 295
		case EID_MU_FLAGS:                              // 297
		case EID_MU_ASSOC_TIME:                         // 298
		case EID_MU_ACTIVE_TIME:                        // 299
		case EID_REPORT_REQ:                            // 300
		case EID_MU_SESSION_LIFETIME:                   // 302
		case EID_MU_REAUTH_TIMER:                       // 303
		case EID_MU_ACCT_START_TIME:                    // 306
		case EID_MU_ACCT_CLASS:                         // 307
		case EID_MU_LOGIN_LAT_GROUP:                    // 308
		case EID_MU_DEFENDED_STATE:                     // 311
		case EID_MU_MOD_MASK:                           // 312
		case EID_LOCATOR_TRACKED:                       // 313
		case EID_PORT:                                  // 314
		case EID_RETRIES_COUNT:                         // 315
		case EID_MODULATION_TYPE:                       // 316
		case EID_ROGUE_DETECTION:                       // 319
		case EID_TTL:                                   // 324
		case EID_LOCATOR_STATE_DATA:                    // 326
		case EID_LOCATOR_POINT_SET:                     // 327
		case EID_FILTER_RULE_FIXED_APP_ID:              // 328
		case EID_MU_AREA_BLOCK:                         // 330
		case EID_IN_SERVICE_AP_LIST:                    // 334
		case EID_OUT_SERVICE_AP_LIST:                   // 335
		case EID_LAST_RD_AP:                            // 336
		case EID_ROGUE_INFO:                            // 337
		case EID_MU_PMK_R1:                             // 339
		case EID_SIAPP_R0KHID:                          // 340
		case EID_SIAPP_R1KHID:                          // 341
		case EID_SIAPP_FT_NONCE:                        // 342
		case EID_SIAPP_FT_PMKR0NAME:                    // 343
		case EID_SIAPP_FT_R1KHID:                       // 344
		case EID_SIAPP_FT_S1KHID:                       // 345
		case EID_SIAPP_FT_PMKR1:                        // 346
		case EID_SIAPP_FT_PMKR1NAME:                    // 347
		case EID_SIAPP_FT_PAIRWISE:                     // 348
		case EID_SIAPP_FT_LIFETIME:                     // 349
		case EID_MU_POWER_CAP:                          // 350
		case EID_PERIODIC_NEIGHBOUR_REPORT:             // 352
		case EID_NEIGHBOUR_ENTRY:                       // 354
		case EID_MU_PMK_R0NAME:                         // 362
		case EID_IPV6_ADDR:                             // 373
		case EID_MU_DEV_IDENTITY:                       // 376
		case EID_NEIGHBOUR_ENTRY_2:                     // 383
		case EID_CHANNEL_ENTRY:                         // 384
		case EID_PKT_F_WIRELESS:                        // 391
		case EID_PKT_F_WIREDCLIENT:                     // 392
		case EID_PKT_F_DIRECTION:                       // 393
		case EID_PKT_F_IP_ARRAY:                        // 396
		case EID_PKT_F_RADIO:                           // 394
		case EID_VSA_SSID_ID:                           // 400
			proto_tree_add_item(tlv_tree, hf_wassp_tlv_value_octext, tvb, offset + TLV_VALUE, length - 4, ENC_NA);
			offset += length;
			break;

		/* display as IP address format */
		case EID_AC_IPADDR:                    // 6
		case EID_TFTP_SERVER:                  // 8
		case EID_STATIC_BP_IPADDR:             // 30
		case EID_STATIC_BP_NETMASK:            // 31
		case EID_STATIC_BP_GATEWAY:            // 32
		case EID_STATIC_BM_IPADDR:             // 33
		case EID_AP_IPADDR:                    // 89
		case EID_AP_NETMASK:                   // 90
		case EID_AP_GATEWAY:                   // 91
		case EID_MU_IP_ADDR:                   // 173
		case EID_PEER_SITE_IP:                 // 176
		case EID_COLLECTOR_IP_ADDR:            // 200
		case EID_IP_ADDR_TX:                   // 322
		case EID_IP_ADDR_RX:                   // 323
		case EID_GW_IP_ADDR:                   // 325
		case EID_STATIC_VSA_IPADDR:            // 387
		case EID_STATIC_VSA_NETMASK:           // 388
			proto_tree_add_item(tlv_tree, hf_wassp_tlv_value_ip, tvb, offset, 4, ENC_BIG_ENDIAN);
			offset += length;
			break;

		case EID_CONFIG:                       // 10
		case EID_ALARM:                        // 38
			/* Dissect SNMP encoded configuration */
			dissector_try_uint(wassp_dissector_table, WASSP_SNMP, tvb_new_subset_length_caplen(tvb, offset + TLV_VALUE, -1, length - 4), pinfo, tlv_tree);
			offset += length;
			break;

		case EID_RU_STATE:                     // 11
			proto_tree_add_item(tlv_tree, hf_wassp_tlv_eid_rustate, tvb, offset + TLV_VALUE, length - 4, ENC_BIG_ENDIAN);
			proto_item_append_text(tlvi, ": %s",
					       (tvb_get_guint8(tvb, offset + TLV_VALUE) ?
						wassp_eid_rustate_types.true_string :
						wassp_eid_rustate_types.false_string));
			offset += length;
			break;

		/* display as int */
		case EID_RU_PROTOCOL:                     // 13
		case EID_STANDBY_TIMEOUT:                 // 15
		case EID_RU_CHALLENGE_ID:                 // 16
		case EID_RU_SCAN_MODE:                    // 18
		case EID_RU_SCAN_TYPE:                    // 19
		case EID_RU_SCAN_INTERVAL:                // 20
		case EID_RU_RADIO_TYPE:                   // 21
		case EID_RU_CHANNEL_DWELL_TIME:           // 22
		case EID_RU_CHANNEL_LIST:                 // 23
		case EID_RU_SCAN_TIMES:                   // 25
		case EID_RU_SCAN_DELAY:                   // 26
		case EID_RU_SCAN_REQ_ID:                  // 27
		case EID_STATIC_CONFIG:                   // 28
		case EID_LOCAL_BRIDGING:                  // 29
		case EID_RU_CAPABILITY:                   // 36
		case EID_RADIO_ID:                        // 45
		case EID_REQ_ID:                          // 46
		case EID_NETWORK_ID:                      // 47
		case EID_TIME:                            // 49
		case EID_NUM_RADIOS:                      // 50
		case EID_VENDOR_ID:                       // 53
		case EID_SECURE_TUNNEL:                   // 56
		case EID_MU_TOPOLOGY_ID:                  // 57
		case EID_SNMP_ERROR_STATUS:               // 60
		case EID_SNMP_ERROR_INDEX:                // 61
		case EID_RU_REAUTH_TIMER:                 // 62
		case EID_AP_IMG_TO_RAM:                   // 63
		case EID_AP_IMG_ROLE:                     // 64
		case EID_STATS_REQUEST_TYPE:              // 67
		case EID_STATS_LAST:                      // 68
		case EID_COUNTDOWN_TIME:                  // 75
		case EID_WASSP_VLAN_TAG:                  // 76
		case EID_SSID_ID:                         // 77
		case EID_PORT_OPEN_FLAG:                  // 80
		case EID_WASSP_TUNNEL_TYPE:               // 81
		case EID_LOG_TYPE:                        // 82
		case EID_ALARM_SEVERITY:                  // 84
		case EID_AP_DHCP_MODE:                    // 88
		case EID_AUTH_STATE:                      // 98
		case EID_MU_DISC_AFTER_AUTH:              // 99
		case EID_TRANS_ID:                        // 101
		case EID_TIMEZONE_OFFSET:                 // 102
		case EID_SENSOR_FORCE_DOWNLOAD:           // 103
		case EID_BRIDGE_MODE:                     // 105
		case EID_MU_VLAN_TAG:                     // 106
		case EID_RATECTRL_CIR_UL:                 // 107
		case EID_RATECTRL_CIR_DL:                 // 108
		case EID_RATECTRL_CBS_UL:                 // 109
		case EID_RATECTRL_CBS_DL:                 // 110
		case EID_SIAPP_LOADBAL_PKT_TYPE:          // 153
		case EID_SIAPP_LOADBAL_LOAD_VALUE:        // 155
		case EID_SIAPP_FILTER_COS:                // 157
		case EID_UCAST_FILTER_DISABLE:            // 160
		case EID_MU_INFORM_REASON:                // 161
		case EID_MU_FILTER_KEY:                   // 165
		case EID_MU_TOPOLOGY_KEY:                 // 166
		case EID_MU_COS_KEY:                      // 167
		case EID_MU_SESSION_TIMEOUT:              // 168
		case EID_MU_LOGIN_LAT_PORT:               // 170
		case EID_MU_IDLE_TIMEOUT:                 // 171
		case EID_MU_ACCT_INTERIM_INTERVAL:        // 172
		case EID_MU_TERMINATE_ACTION:             // 174
		case EID_INTERFERENCE_EVENTS_ENABLE:      // 177
		case EID_EVENT_TYPE:                      // 178
		case EID_EVENT_CHANNEL:                   // 179
		case EID_EVENT_VALUE:                     // 180
		case EID_SSS_MU_ASSOC_TIME:               // 182
		case EID_SSS_MU_AUTH_STATE:               // 185
		case EID_TIME_FIRST_DETECTED:             // 187
		case EID_TIME_LAST_REPORTED:              // 188
		case EID_SSS_DEFAULT_SESSION_TIMEOUT:     // 190
		case EID_SSS_PRIVACY_TYPE:                // 192
		case EID_RU_AC_EVENT_COMPONENT_ID:        // 194
		case EID_MU_AUTH_STATE:                   // 195
		case EID_BULK_TYPE:                       // 197
		case EID_SENT_TIME:                       // 198
		case EID_SCAN_PROFILE_ID:                 // 209
		case EID_ACTION_REQ:                      // 210
		case EID_COUNTERMEASURES_MAX_CH:          // 212
		case EID_COUNTERMEASURES_SET:             // 213
		case EID_SEQ_NUM:                         // 215
		case EID_THREAT_TYPE:                     // 218
		case EID_THREAT_ID:                       // 219
		case EID_THREAT_FR_SFR:                   // 221
		case EID_THREAT_ALERT_TH_DUR:             // 225
		case EID_THREAT_CLEAR_TH_DUR:             // 226
		case EID_THREAT_PRIORITY:                 // 227
		case EID_THREAT_MITIGATION_LIST:          // 228
		case EID_PARAMS:                          // 235
		case EID_MU_EVENT_TYPE:                   // 260
		case EID_SSS_MU_IS_PORT_CLOSED:           // 229
		case EID_FULL_UPDATE:                     // 230
		case EID_REASON:                          // 231
		case EID_SCAN_CAP:                        // 238
		case EID_THREAT_CLASSIFICATION:           // 239
		case EID_STATE:                           // 242
		case EID_DROP_FR_CNT:                     // 243
		case EID_STOP_ROAM_CNT:                   // 244
		case EID_SPOOF_CNT:                       // 245
		case EID_ENCRYPTION_TYPE:                 // 250
		case EID_COMPONENT_ID:                    // 253
		case EID_BYPASS_BMCAST:                   // 255
		case EID_GETTIMEOFDAY:                    // 256
		case EID_COUNTRY_ID:                      // 257
		case EID_LOCATOR_FLOOR_ID:                // 261
		case EID_LOCATOR_LOC_TYPE:                // 262
		case EID_MU_EVENT_FROM_AP:                // 267
		case EID_LOCATOR_LOC_AP_DISTANCE:         // 269
		case EID_LOCATOR_LOC_PRECISION:           // 270
		case EID_LOCATOR_MU_ACTION:               // 273
		case EID_EFFECTIVE_EGRESS_VLAN:           // 274
		case EID_REBOOT_ACK:                      // 275
		case EID_AUTH_FLAG:                       // 277
		case EID_ROAMED_FLAG:                     // 278
		case EID_MU_RSS:                          // 279
		case EID_FILTER_RULES_VER:                // 280
		case EID_FILTER_TYPE:                     // 281
		case EID_DEFAULT_ACTION_TYPE:             // 284
		case EID_DEFAULT_CONTAIN_TO_VLAN:         // 285
		case EID_DEFAULT_BRIDGE_MODE:             // 286
		case EID_INVALID_POLICY:                  // 287
		case EID_AP_FLAGS:                        // 289
		case EID_AP_PVID:                         // 290
		case EID_MU_LOCATION_TS:                  // 332
		case EID_MU_IS_FT:                        // 338
		case EID_TIMESTAMP:                       // 353
		case EID_MU_REQ:                          // 355
		case EID_RU_REQ:                          // 356
		case EID_NEIGHBOUR_REQ:                   // 357
		case EID_SSS_FT_ASSOC:                    // 358
		case EID_DEFAULT_MIRRORN:                 // 359
		case EID_FILTER_RULE_EXT_ACT_FLAGS:       // 360
		case EID_TOPO_GROUP_MAPPING:              // 361
		case EID_SSS_CAPINFO:                     // 364
		case EID_SSS_CAPPOWER:                    // 365
		case EID_WFA_VSA:                         // 366
		case EID_WFA_HS20_REMED_METHOD:           // 367
		case EID_WFA_HS20_DEAUTH_CODE:            // 369
		case EID_WFA_HS20_REAUTH_DELAY:           // 370
		case EID_WFA_HS20_SWT:                    // 371
		case EID_POWER_STATUS:                    // 372
		case EID_FILTER_RULES_APP_SIG_GROUP_ID:   // 374
		case EID_FILTER_RULES_APP_SIG_DISP_ID:    // 375
		case EID_APPL_STATS_REQ:                  // 377
		case EID_PKT_CAPTURE_STATUS:              // 389
		case EID_PKT_CAPTURE_FILTERS:             // 390
		case EID_PKT_F_FLAGS:                     // 395
		case EID_PKT_F_PROTOCOL:                  // 398
		case EID_PKT_F_PORT:                      // 399
		case EID_MU_AUTH_TYPE:                    // 401
		case EID_PKT_F_MAX_PKT_COUNT:             // 402
		case EID_PKT_F_FLAG_2:                    // 403
		case EID_IMAGE_PORT:                      // 404
			proto_tree_add_item(tlv_tree, hf_wassp_tlv_value_int, tvb, offset + TLV_VALUE, length - 4, ENC_NA);
			offset += length;
			break;
		/* display as Mac address */
		case EID_BP_BPSSID:                 // 34
		case EID_BP_WIRED_MACADDR:          // 35
		case EID_SIAPP_MACADDR:             // 149
		case EID_SIAPP_AC_MGMT_MAC:         // 156
		case EID_MAC_ADDR:                  // 208
		case EID_SCAN_BSSID:                // 233
		case EID_MU_BSSID:                  // 276
		case EID_MAC_ADDR_TX:               // 320
		case EID_MAC_ADDR_RX:               // 321
			proto_tree_add_item(tlv_tree, hf_wassp_macaddr, tvb, offset + TLV_VALUE, length - 4, ENC_NA);
			offset += length;
			break;
		case EID_MU_MAC:                    // 48
		case EID_PKT_F_MAC:                 // 397
			proto_tree_add_item(tlv_tree, hf_wassp_mu_mac, tvb, offset + TLV_VALUE, length - 4, ENC_NA);
			offset += length;
			break;

		/*  call sub tlv  */
		case EID_EVENT_BLOCK:                                // 59
			offset = dissect_wassp_sub_tlv(tlv_tree, tvb, pinfo, offset + TLV_VALUE, length - TLV_VALUE, EVENT_BLOCK, ru_msg_type);
			break;
		case EID_AP_STATS_BLOCK:                             // 65
			offset = dissect_wassp_sub_tlv(tlv_tree, tvb, pinfo, offset + TLV_VALUE, length - TLV_VALUE, AP_STATS_BLOCK, ru_msg_type);
			break;
		case EID_MU_RF_STATS_BLOCK:                          // 66
			offset = dissect_wassp_sub_tlv(tlv_tree, tvb, pinfo, offset + TLV_VALUE, length - TLV_VALUE, MU_RF_STATS_BLOCK, ru_msg_type);
			break;
		case EID_TLV_CONFIG:                                 // 69
		case EID_BSSID2IP_BLOCK:                             // 92
			offset = dissect_wassp_sub_tlv(tlv_tree, tvb, pinfo, offset + TLV_VALUE, length - TLV_VALUE, CONFIG_GLOBAL_BLOCK, ru_msg_type);
			break;
		case EID_CONFIG_ERROR_BLOCK:                         // 70
			offset = dissect_wassp_sub_tlv(tlv_tree, tvb, pinfo, offset + TLV_VALUE, length - TLV_VALUE, CONFIG_ERROR_BLOCK, ru_msg_type);
			break;
		case EID_CONFIG_MODIFIED_BLOCK:                      // 71
			offset = dissect_wassp_sub_tlv(tlv_tree, tvb, pinfo, offset + TLV_VALUE, length - TLV_VALUE, TAB_CONFIG_MODIFIED, ru_msg_type);
			break;
		case EID_BULK_MU_BLOCK:                              // 78
			offset = dissect_wassp_sub_tlv(tlv_tree, tvb, pinfo, offset + TLV_VALUE, length - TLV_VALUE, BULK_MU_BLOCK, ru_msg_type);
			break;
		case EID_MU_BLOCK:                                   // 79
			offset = dissect_wassp_sub_tlv(tlv_tree, tvb, pinfo, offset + TLV_VALUE, length - TLV_VALUE, MU_BLOCK, ru_msg_type);
			break;
		case EID_BULK_VNS_BLOCK:                             // 86
			offset = dissect_wassp_sub_tlv(tlv_tree, tvb, pinfo, offset + TLV_VALUE, length - TLV_VALUE, BULK_VNS_BLOCK, ru_msg_type);
			break;
		case EID_VNS_BLOCK:                                  // 87
			offset = dissect_wassp_sub_tlv(tlv_tree, tvb, pinfo, offset + TLV_VALUE, length - TLV_VALUE, VNS_BLOCK, ru_msg_type);
			break;
		case EID_SIAPP_PMK_BLOCK:                            // 114
			offset = dissect_wassp_sub_tlv(tlv_tree, tvb, pinfo, offset + TLV_VALUE, length - TLV_VALUE, TAB_SIAPP_PMK_BLOCK, ru_msg_type);
			break;
		case EID_SIAPP_RADIO_CONFIG_BLOCK:                   // 121
			offset = dissect_wassp_sub_tlv(tlv_tree, tvb, pinfo, offset + TLV_VALUE, length - TLV_VALUE, TAB_SIAPP_RADIO_CONFIG_BLOCK, ru_msg_type);
			break;
		case EID_SIAPP_SIAPP_MU_STATS_BLOCK:                 // 123
			offset = dissect_wassp_sub_tlv(tlv_tree, tvb, pinfo, offset + TLV_VALUE, length - TLV_VALUE, TAB_SIAPP_MU_STATS_BLOCK, ru_msg_type);
			break;
		case EID_SIAPP_THIN_BLOCK:                           // 128
			offset = dissect_wassp_sub_tlv(tlv_tree, tvb, pinfo, offset + TLV_VALUE, length - TLV_VALUE, TAB_SIAPP_THIN_BLOCK, ru_msg_type);
			break;
		case EID_SIAPP_RADIOBLOCK:                           // 132
			offset = dissect_wassp_sub_tlv(tlv_tree, tvb, pinfo, offset + TLV_VALUE, length - TLV_VALUE, TAB_SIAPP_MU_STATS_BLOCK, ru_msg_type);
			break;
		case EID_SIAPP_BLOCK:                                // 134
			offset = dissect_wassp_sub_tlv(tlv_tree, tvb, pinfo, offset + TLV_VALUE, length - TLV_VALUE, TAB_SIAPP_BLOCK, ru_msg_type);
			break;
		case EID_SIAPP_LOADBAL_BLOCK:                        // 152
			offset = dissect_wassp_sub_tlv(tlv_tree, tvb, pinfo, offset + TLV_VALUE, length - TLV_VALUE, VNS_BLOCK, ru_msg_type);
			break;
		case EID_SSS_MU_BLOCK:                               // 181
			offset = dissect_wassp_sub_tlv(tlv_tree, tvb, pinfo, offset + TLV_VALUE, length - TLV_VALUE, TAB_SSS_MU_BLOCK, ru_msg_type);
			break;
		case EID_ASSOC_SSID_ARRAY:                           // 204
			offset = dissect_wassp_sub_tlv(tlv_tree, tvb, pinfo, offset + TLV_VALUE, length - TLV_VALUE, TAB_ASSOC_SSID_ARRAY, ru_msg_type);
			break;
		case EID_ASSOC_SSID_BLOCK:                           // 205
			offset = dissect_wassp_sub_tlv(tlv_tree, tvb, pinfo, offset + TLV_VALUE, length - TLV_VALUE, TAB_ASSOC_SSID_BLOCK, ru_msg_type);
			break;
		case EID_AP_LIST_BLOCK:                              // 206
			offset = dissect_wassp_sub_tlv(tlv_tree, tvb, pinfo, offset + TLV_VALUE, length - TLV_VALUE, TAB_AP_LIST_BLOCK, ru_msg_type);
			break;
		case EID_AP_LIST_ARRAY:                              // 207
			offset = dissect_wassp_sub_tlv(tlv_tree, tvb, pinfo, offset + TLV_VALUE, length - TLV_VALUE, TAB_AP_LIST_ARRAY, ru_msg_type);
			break;
		case EID_SCAN_PROFILE_BLOCK:                         // 214
			offset = dissect_wassp_sub_tlv(tlv_tree, tvb, pinfo, offset + TLV_VALUE, length - TLV_VALUE, TAB_SCAN_PROFILE_BLOCK, ru_msg_type);
			break;
		case EID_THREAT_DEF_ARRAY:                           // 216
			offset = dissect_wassp_sub_tlv(tlv_tree, tvb, pinfo, offset + TLV_VALUE, length - TLV_VALUE, TAB_THREAT_DEF_ARRAY, ru_msg_type);
			break;
		case EID_THREAT_DEF_BLOCK:                           // 217
			offset = dissect_wassp_sub_tlv(tlv_tree, tvb, pinfo, offset + TLV_VALUE, length - TLV_VALUE, TAB_THREAT_DEF_BLOCK, ru_msg_type);
			break;
		case EID_THREAT_PATTERN_ARRAY:                       // 222
			offset = dissect_wassp_sub_tlv(tlv_tree, tvb, pinfo, offset + TLV_VALUE, length - TLV_VALUE, TAB_THREAT_PATTERN_ARRAY, ru_msg_type);
			break;
		case EID_THREAT_PATTERN_BLOCK:                       // 223
			offset = dissect_wassp_sub_tlv(tlv_tree, tvb, pinfo, offset + TLV_VALUE, length - TLV_VALUE, TAB_THREAT_PATTERN_BLOCK, ru_msg_type);
			break;
		case EID_SURVEILLANCE_DATA_ARRAY:                    // 231
			offset = dissect_wassp_sub_tlv(tlv_tree, tvb, pinfo, offset + TLV_VALUE, length - TLV_VALUE, TAB_SURVEILLANCE_DATA_ARRAY, ru_msg_type);
			break;
		case EID_SURVEILLANCE_DATA_BLOCK:                    // 232
			offset = dissect_wassp_sub_tlv(tlv_tree, tvb, pinfo, offset + TLV_VALUE, length - TLV_VALUE, TAB_SURVEILLANCE_DATA_BLOCK, ru_msg_type);
			break;
		case EID_THREAT_DATA_ARRAY:                          // 239
			offset = dissect_wassp_sub_tlv(tlv_tree, tvb, pinfo, offset + TLV_VALUE, length - TLV_VALUE, TAB_THREAT_DATA_ARRAY, ru_msg_type);
			break;
		case EID_THREAT_DATA_BLOCK:                          // 240
			offset = dissect_wassp_sub_tlv(tlv_tree, tvb, pinfo, offset + TLV_VALUE, length - TLV_VALUE, TAB_THREAT_DATA_BLOCK, ru_msg_type);
			break;
		case EID_THREAT_CLASSIFY_ARRAY:                      // 245
			offset = dissect_wassp_sub_tlv(tlv_tree, tvb, pinfo, offset + TLV_VALUE, length - TLV_VALUE, TAB_THREAT_CLASSIFY_ARRAY, ru_msg_type);
			break;
		case EID_THREAT_CLASSIFY_BLOCK:                      // 246
			offset = dissect_wassp_sub_tlv(tlv_tree, tvb, pinfo, offset + TLV_VALUE, length - TLV_VALUE, TAB_THREAT_CLASSIFY_BLOCK, ru_msg_type);
			break;
		case EID_MU_EVENT_ARRAY:                             // 251
			offset = dissect_wassp_sub_tlv(tlv_tree, tvb, pinfo, offset + TLV_VALUE, length - TLV_VALUE, TAB_MU_EVENT_ARRAY, ru_msg_type);
			break;
		case EID_MU_EVENT_BLOCK:                             // 252
			offset = dissect_wassp_sub_tlv(tlv_tree, tvb, pinfo, offset + TLV_VALUE, length - TLV_VALUE, TAB_MU_EVENT_BLOCK, ru_msg_type);
			break;
		case EID_COUNTRY_ARRAY:                              // 258
			offset = dissect_wassp_sub_tlv(tlv_tree, tvb, pinfo, offset + TLV_VALUE, length - TLV_VALUE, TAB_COUNTRY_ARRAY, ru_msg_type);
			break;
		case EID_COUNTRY_BLOCK:                              // 259
			offset = dissect_wassp_sub_tlv(tlv_tree, tvb, pinfo, offset + TLV_VALUE, length - TLV_VALUE, TAB_COUNTRY_BLOCK, ru_msg_type);
			break;
		case EID_LOCATOR_LOC_BLOCK:                          // 263
			offset = dissect_wassp_sub_tlv(tlv_tree, tvb, pinfo, offset + TLV_VALUE, length - TLV_VALUE, TAB_LOCATOR_LOC_BLOCK, ru_msg_type);
			break;
		case EID_LOCATOR_LOC_ARRAY:                          // 264
			offset = dissect_wassp_sub_tlv(tlv_tree, tvb, pinfo, offset + TLV_VALUE, length - TLV_VALUE, TAB_LOCATOR_LOC_ARRAY, ru_msg_type);
			break;
		case EID_RSS_DATA_ARRAY:                             // 271
			offset = dissect_wassp_sub_tlv(tlv_tree, tvb, pinfo, offset + TLV_VALUE, length - TLV_VALUE, TAB_RSS_DATA_ARRAY, ru_msg_type);
			break;
		case EID_RSS_DATA_BLOCK:                             // 272
			offset = dissect_wassp_sub_tlv(tlv_tree, tvb, pinfo, offset + TLV_VALUE, length - TLV_VALUE, TAB_RSS_DATA_BLOCK, ru_msg_type);
			break;
		case EID_MCAST_FILTER_BLOCK:                         // 282
			offset = dissect_wassp_sub_tlv(tlv_tree, tvb, pinfo, offset + TLV_VALUE, length - TLV_VALUE, TAB_MCAST_FILTER_BLOCK, ru_msg_type);
			break;
		case EID_MCAST_FILTER_BLOCK_ENTRY:                   // 283
			offset = dissect_wassp_sub_tlv(tlv_tree, tvb, pinfo, offset + TLV_VALUE, length - TLV_VALUE, TAB_MCAST_FILTER_BLOCK_ENTRY, ru_msg_type);
			break;
		case EID_MU_SESSION_ARRAY:                           // 293
			offset = dissect_wassp_sub_tlv(tlv_tree, tvb, pinfo, offset + TLV_VALUE, length - TLV_VALUE, TAB_MU_SESSION_ARRAY, ru_msg_type);
			break;
		case EID_MU_SESSION_BLOCK:                           // 294
			offset = dissect_wassp_sub_tlv(tlv_tree, tvb, pinfo, offset + TLV_VALUE, length - TLV_VALUE, TAB_MU_SESSION_BLOCK, ru_msg_type);
			break;
		case EID_DETECTED_ROGUE_ARRAY:                       // 317
			offset = dissect_wassp_sub_tlv(tlv_tree, tvb, pinfo, offset + TLV_VALUE, length - TLV_VALUE, TAB_DETECTED_ROGUE_ARRAY, ru_msg_type);
			break;
		case EID_DETECTED_ROGUE_BLOCK:                       // 318
			offset = dissect_wassp_sub_tlv(tlv_tree, tvb, pinfo, offset + TLV_VALUE, length - TLV_VALUE, TAB_DETECTED_ROGUE_BLOCK, ru_msg_type);
			break;
		case EID_FILTER_RULES_EXT_BLOCK:                     // 329
			offset = dissect_wassp_sub_tlv(tlv_tree, tvb, pinfo, offset + TLV_VALUE, length - TLV_VALUE, TAB_FILTER_RULES_EXT_BLOCK, ru_msg_type);
			break;
		case EID_TOPOLOGY_ARRAY:                             // 379
			offset = dissect_wassp_sub_tlv(tlv_tree, tvb, pinfo, offset + TLV_VALUE, length - TLV_VALUE, TAB_TOPOLOGY_ARRAY_BLOCK, ru_msg_type);
			break;
		case EID_TOPOLOGY_STRUCT:                            // 380
			offset = dissect_wassp_sub_tlv(tlv_tree, tvb, pinfo, offset + TLV_VALUE, length - TLV_VALUE, TAB_TOPOLOGY_STRUCT_BLOCK, ru_msg_type);
			break;
		case EID_FILTER_CONFIG_STRUCT:                       // 381
			offset = dissect_wassp_sub_tlv(tlv_tree, tvb, pinfo, offset + TLV_VALUE, length - TLV_VALUE, TAB_FILTER_CONFIG_STRUCT_BLOCK, ru_msg_type);
			break;

		case EID_FILTER_RULES:                              // 97
			proto_tree_add_item(tlv_tree, hf_wassp_tlv_value_octext, tvb, offset + TLV_VALUE, length - 4, ENC_NA);
			decode_filter_rule_octext_string(tlv_tree, tvb, offset + 4, length );
			offset += length;
			break;
		case EID_MU_MAC_LIST:                              // 100
			proto_tree_add_item(tlv_tree, hf_wassp_tlv_value_octext, tvb, offset + TLV_VALUE, length - 4, ENC_NA);
			decode_mac_list_struct(tlv_tree, tvb, offset + 4,  length -4 );
			offset += length;
			break;
		case EID_COS:                                      // 158
			proto_tree_add_item(tlv_tree, hf_wassp_tlv_value_octext, tvb, offset + TLV_VALUE, length - 4, ENC_NA);
			decode_cos_struct(tlv_tree, tvb, offset + 4 );
			offset += length;
			break;
		case EID_RATE_LIMIT_RESOURCE_TBL:                  // 159
			proto_tree_add_item(tlv_tree, hf_wassp_tlv_value_octext, tvb, offset + TLV_VALUE, length - 4, ENC_NA);
			decode_rate_limit_struct(tlv_tree,tvb,  offset + 4,length-4 );
			offset += length;
			break;
		case EID_CHANNEL_LIST:                             // 211
			proto_tree_add_item(tlv_tree, hf_wassp_tlv_value_octext, tvb, offset + TLV_VALUE, length - 4, ENC_NA);
			decode_Channel_list(tlv_tree, tvb, offset + 4,  length -4 );
			offset += length;
			break;
		case EID_DNS_IP_ADDR:                              // 333
			proto_tree_add_item(tlv_tree, hf_wassp_tlv_value_octext, tvb, offset + TLV_VALUE, length - 4, ENC_NA);
			decode_ipv4_list_struct(tlv_tree, tvb, offset + 4,  length -4 );
			offset += length;
			break;
		case EID_MU_APPL_STATS_BLOCK:                      // 378
			proto_tree_add_item(tlv_tree, hf_wassp_tlv_value_octext, tvb, offset + TLV_VALUE, length - 4, ENC_NA);
			decode_mu_appl_stats_block(tlv_tree, tvb, offset + 4 );
			offset += length;
			break;

		case EID_SCAN_RSS_RSSI:                            // 236
			proto_tree_add_item(tlv_tree, hf_wassp_tlv_value_int, tvb, offset + TLV_VALUE, length - 4, ENC_NA);
			suboffset = offset + 4;
			proto_tree_add_item(tlv_tree, hf_wassp_rss, tvb, suboffset, 2, ENC_BIG_ENDIAN);
			suboffset += 2;
			proto_tree_add_item(tlv_tree, hf_wassp_rssi, tvb, suboffset, 2, ENC_BIG_ENDIAN);
			offset += length;
			break;

		default:
			/* If tlv isn't in the list, then just display the raw data*/
			proto_tree_add_item(tlv_tree, hf_wassp_tlv_value_octext, tvb, offset + TLV_VALUE, length - 4, ENC_NA);
			call_dissector(data_handle, tvb_new_subset_length_caplen(tvb, offset + TLV_VALUE, -1, length - 4), pinfo, wassp_tree);
			offset += length;
		}

		if (tlv_type == EID_UNUSED_0)
		{
			proto_tree_add_item(wassp_tree, hf_wassp_tlv_invalid, tvb, offset, value, ENC_BIG_ENDIAN);
			offset += length;
		}
	}
	return offset;
}
