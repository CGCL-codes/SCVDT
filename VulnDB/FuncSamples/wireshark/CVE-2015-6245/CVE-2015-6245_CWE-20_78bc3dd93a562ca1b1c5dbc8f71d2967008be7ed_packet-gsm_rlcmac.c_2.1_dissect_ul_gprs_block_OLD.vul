static void
dissect_ul_gprs_block(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, RlcMacUplink_t * data)
{
  csnStream_t ar;
  guint8      payload_type = tvb_get_bits8(tvb, 0, 2);
  guint16     bit_length   = tvb_reported_length(tvb) * 8;
  guint16     bit_offset   = 0;

  col_set_str(pinfo->cinfo, COL_PROTOCOL, "GSM RLC/MAC");
  col_append_sep_str(pinfo->cinfo, COL_INFO, ":", "GPRS UL");
  if (payload_type == PAYLOAD_TYPE_DATA)
  {
    proto_item *ti;
    proto_tree *rlcmac_tree;
    guint64     e;
    length_indicator_t li_array[10];
    guint8             li_count = array_length(li_array);

    ti = proto_tree_add_protocol_format(tree, proto_gsm_rlcmac, tvb, bit_offset >> 3, -1,
                                        "GPRS UL DATA (CS%d)",
                                        data->block_format & 0x0F);
    rlcmac_tree = proto_item_add_subtree(ti, ett_gsm_rlcmac);
    data->u.UL_Data_Block_GPRS.TI = 0;
    data->u.UL_Data_Block_GPRS.PI = 0;

    csnStreamInit(&ar, 0, bit_length);

    /* dissect the RLC header */
    csnStreamDissector(rlcmac_tree, &ar, CSNDESCR(UL_Data_Block_GPRS_t), tvb, &data->u.UL_Data_Block_GPRS, ett_gsm_rlcmac);
    bit_offset = ar.bit_offset;

    /* build the array of data segment descriptors */
    e = data->u.UL_Data_Block_GPRS.E;
    bit_offset += 8 * construct_gprs_data_segment_li_array(tvb, rlcmac_tree, pinfo,
                                                           bit_offset / 8,
                                                           &li_count,
                                                           li_array,
                                                           &e);

    /* the next fields are present according to earlier flags */
    if (data->u.UL_Data_Block_GPRS.TI)
    {
      proto_tree_add_bits_item(rlcmac_tree, hf_tlli, tvb, bit_offset, 32, ENC_BIG_ENDIAN);
      bit_offset += 32;
    }
    if (data->u.UL_Data_Block_GPRS.PI)
    {
      proto_tree_add_bits_item(rlcmac_tree, hf_pfi, tvb, bit_offset, 7, ENC_BIG_ENDIAN);
      bit_offset += 7;
      proto_tree_add_bits_ret_val(rlcmac_tree, hf_e, tvb, bit_offset, 1, &e, ENC_BIG_ENDIAN);
      bit_offset ++;
    }

    if (e)
    {
      /* dissect the data segments */
      /*bit_offset += 8 * */ dissect_gprs_data_segments(tvb, pinfo, rlcmac_tree, bit_offset / 8, bit_length / 8,
                                                        li_count,
                                                        li_array);
    }
    else
    {
      proto_tree_add_expert(tree, pinfo, &ei_gsm_rlcmac_unexpected_header_extension, tvb, bit_offset >> 3, 1);
    }
  }
  else if (payload_type == PAYLOAD_TYPE_RESERVED)
  {
    proto_tree_add_protocol_format(tree, proto_gsm_rlcmac, tvb, bit_offset >> 3, -1, "Payload Type: RESERVED (3)");
    col_append_sep_str(pinfo->cinfo, COL_INFO, ":",  "GSM RLC/MAC RESERVED MESSAGE TYPE");
  }
  else if (data->block_format == RLCMAC_CS1)
  {
    dissect_ul_rlc_control_message(tvb, pinfo, tree, data, bit_length);
  }
  else
  {
    proto_tree_add_expert_format(tree, pinfo, &ei_gsm_rlcmac_coding_scheme_invalid, tvb, bit_offset >> 3, -1, "GPRS UL block with Coding Scheme CS%d and incompatible payload type",
                        data->block_format &0x0F);
  }
}
