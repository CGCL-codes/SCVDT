int
add_tagged_field(packet_info *pinfo, proto_tree *tree, tvbuff_t *tvb, int offset, int ftype)
{
  guint32       oui;
  tvbuff_t     *tag_tvb;
  const guint8 *tag_data_ptr;
  guint32       tag_no, tag_len;
  int           n, ret;
  char          print_buff[SHORT_STR];
  proto_tree   *orig_tree = tree;
  proto_item   *ti        = NULL;
  proto_item   *ti_len, *ti_tag;
  int           tag_end;
  gboolean      isDMG;

  gboolean     *p_isDMG = ((gboolean*)(p_get_proto_data(wmem_file_scope(), pinfo, proto_wlan, IS_DMG_KEY)));

  isDMG   = p_isDMG ? *p_isDMG : FALSE;
  tag_no  = tvb_get_guint8(tvb, offset);
  tag_len = tvb_get_guint8(tvb, offset + 1);
  tag_end = offset + 2 + tag_len;

  if (tree) {
    ti = proto_tree_add_item(orig_tree, hf_ieee80211_tag, tvb, offset, 2 + tag_len , ENC_NA);
    proto_item_append_text(ti, ": %s", val_to_str_ext(tag_no, &tag_num_vals_ext, "Reserved (%d)"));

    tree = proto_item_add_subtree(ti, ett_80211_mgt_ie);

  }

  ti_tag = proto_tree_add_item(tree, hf_ieee80211_tag_number, tvb, offset, 1, ENC_LITTLE_ENDIAN);
  ti_len = proto_tree_add_uint(tree, hf_ieee80211_tag_length, tvb, offset + 1, 1, tag_len);
  if (tag_len > (guint)tvb_reported_length_remaining(tvb, offset)) {
    expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length,
                           "Tag Length is longer than remaining payload");
  }

  switch (tag_no) {
  case TAG_SSID:
    offset += ieee80211_tag_ssid(pinfo, tree, ti, ti_len, tag_len, tvb,
                                 offset);
    break;
  case TAG_SUPP_RATES:
    offset += ieee80211_tag_supp_rates(pinfo, tree, ti, ti_len, tag_len, tvb,
                                       offset, tag_end);
    break;
  case TAG_FH_PARAMETER:
    offset += ieee80211_tag_fh_parameter(pinfo, tree, ti_len, tag_len, tvb,
                                         offset);
    break;
  case TAG_DS_PARAMETER:
    offset += ieee80211_tag_ds_parameter(pinfo, tree, ti, ti_len, tag_len, tvb,
                                         offset);
    break;
  case TAG_CF_PARAMETER:
    offset += ieee80211_tag_cf_parameter(pinfo, tree, ti, ti_len, tag_len, tvb,
                                         offset);
    break;
  case TAG_TIM:
    offset += ieee80211_tag_tim(pinfo, tree, ti, ti_len, tag_len, tvb, offset);
    break;
  case TAG_IBSS_PARAMETER:
    offset += ieee80211_tag_ibss_parameter(pinfo, tree, ti, ti_len, tag_len,
                                           tvb, offset);
    break;
  case TAG_COUNTRY_INFO:
    offset += ieee80211_tag_country_info(pinfo, tree, ti, ti_len, tag_len, tvb,
                                         offset, tag_end);
    break;
  case TAG_FH_HOPPING_PARAMETER:
    offset += ieee80211_tag_fh_hopping_parameter(pinfo, tree, ti, ti_len,
                                                 tag_len, tvb, offset);
    break;
  case TAG_FH_HOPPING_TABLE:
    offset += ieee80211_tag_fh_hopping_table(pinfo, tree, ti_len, tag_len,
                                             tvb, offset, tag_end);
    break;

    case TAG_REQUEST: /* 7.3.2.12 Request information element (10) */
      while (offset < tag_end)
      {
        proto_tree_add_item(tree, hf_ieee80211_tag_request, tvb, offset, 1, ENC_LITTLE_ENDIAN);
        offset += 1;
      }
      break;

    case TAG_QBSS_LOAD: /* 7.3.2.28 BSS Load element (11) */
                        /* 8.4.2.30 in 802.11-2012 */
      if ((tag_len < 4) || (tag_len > 5))
      {
        expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length, "Tag Length %u wrong, must be = 4 or 5", tag_len);
        break;
      }

      if (tag_len == 4)
      {
        /* QBSS Version 1 */
        proto_item_append_text(ti, " Cisco QBSS Version 1 - non CCA");

        /* Extract Values */
        proto_tree_add_uint(tree, hf_ieee80211_qbss_version, tvb, offset + 2, tag_len, 1);
        proto_tree_add_item(tree, hf_ieee80211_qbss_scount, tvb, offset + 2, 2, ENC_LITTLE_ENDIAN);
        proto_tree_add_item(tree, hf_ieee80211_qbss_cu, tvb, offset + 4, 1, ENC_LITTLE_ENDIAN);
        proto_tree_add_item(tree, hf_ieee80211_qbss_adc, tvb, offset + 5, 1, ENC_LITTLE_ENDIAN);
      }
      else if (tag_len == 5)

      {
        proto_item *base_item;

        /* QBSS Version 2 */
        proto_item_append_text(ti, " 802.11e CCA Version");

        /* Extract Values */
        proto_tree_add_uint(tree, hf_ieee80211_qbss_version, tvb, offset + 2, tag_len, 2);
        proto_tree_add_item(tree, hf_ieee80211_qbss_scount, tvb, offset + 2, 2, ENC_LITTLE_ENDIAN);
        base_item = proto_tree_add_item(tree, hf_ieee80211_qbss_cu, tvb, offset + 4, 1, ENC_LITTLE_ENDIAN);
        proto_item_append_text(base_item, " (%d%%)", 100*tvb_get_guint8(tvb, offset + 4)/255);
        base_item = proto_tree_add_item(tree, hf_ieee80211_qbss_adc, tvb, offset + 5, 2, ENC_LITTLE_ENDIAN);
        proto_item_append_text(base_item, " (%d us/s)", tvb_get_letohs(tvb, offset + 5)*32);
      }
      break;

#if 0 /* ToDo */
  case TAG_EDCA_PARAM_SET: /* 8.4.2.31 in 802-11-2012 */
    offset += add_fixed_field(tree, tvb, pinfo, offset, FIELD_QOS_INFO_AP);
    offset += 1;  /* reserved */
    offset += 4;  /* AC_BE */
    offset += 4;  /* AC_BK */
    offset += 4;  /* AC_VI */
    offset += 4;  /* AC_VO */
    break;
#endif

    case TAG_TSPEC: /* TSPEC element (13) */
      if (isDMG == FALSE && tag_len != 55)
      {
        expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length, "Tag Length %u wrong, must be = 55", tag_len);
        break;
      }
      if (isDMG == TRUE && tag_len != 57)
      {
        expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length, "Tag Length %u wrong, must be = 57", tag_len);
        break;
      }
      offset += 2;

      add_fixed_field(tree, tvb, pinfo, offset, FIELD_QOS_TS_INFO);
      offset += 3;

      proto_tree_add_item(tree, hf_ieee80211_tspec_nor_msdu, tvb, offset, 2, ENC_LITTLE_ENDIAN);
      offset += 2;

      proto_tree_add_item(tree, hf_ieee80211_tspec_max_msdu, tvb, offset, 2, ENC_LITTLE_ENDIAN);
      offset += 2;

      proto_tree_add_item(tree, hf_ieee80211_tspec_min_srv, tvb, offset, 4, ENC_LITTLE_ENDIAN);
      offset += 4;

      proto_tree_add_item(tree, hf_ieee80211_tspec_max_srv, tvb, offset, 4, ENC_LITTLE_ENDIAN);
      offset += 4;

      proto_tree_add_item(tree, hf_ieee80211_tspec_inact_int, tvb, offset, 4, ENC_LITTLE_ENDIAN);
      offset += 4;

      proto_tree_add_item(tree, hf_ieee80211_tspec_susp_int, tvb, offset, 4, ENC_LITTLE_ENDIAN);
      offset += 4;

      proto_tree_add_item(tree, hf_ieee80211_tspec_srv_start, tvb, offset, 4, ENC_LITTLE_ENDIAN);
      offset += 4;

      proto_tree_add_item(tree, hf_ieee80211_tspec_min_data, tvb, offset, 4, ENC_LITTLE_ENDIAN);
      offset += 4;

      proto_tree_add_item(tree, hf_ieee80211_tspec_mean_data, tvb, offset, 4, ENC_LITTLE_ENDIAN);
      offset += 4;

      proto_tree_add_item(tree, hf_ieee80211_tspec_peak_data, tvb, offset, 4, ENC_LITTLE_ENDIAN);
      offset += 4;

      proto_tree_add_item(tree, hf_ieee80211_tspec_burst_size, tvb, offset, 4, ENC_LITTLE_ENDIAN);
      offset += 4;

      proto_tree_add_item(tree, hf_ieee80211_tspec_delay_bound, tvb, offset, 4, ENC_LITTLE_ENDIAN);
      offset += 4;

      proto_tree_add_item(tree, hf_ieee80211_tspec_min_phy, tvb, offset, 4, ENC_LITTLE_ENDIAN);
      offset += 4;

      proto_tree_add_item(tree, hf_ieee80211_tspec_surplus, tvb, offset, 2, ENC_LITTLE_ENDIAN);
      offset += 2;

      proto_tree_add_item(tree, hf_ieee80211_tspec_medium, tvb, offset, 2, ENC_LITTLE_ENDIAN);
      offset += 2;

      if(isDMG == TRUE) {
        proto_tree_add_item(tree, hf_ieee80211_tspec_dmg, tvb, offset, 2, ENC_LITTLE_ENDIAN);
        offset +=2;
      }

      break;

    case TAG_TCLAS: /* 7.3.2.31 TCLAS element (14) */
      if (tag_len < 6)
      {
        expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length, "Tag length %u too short, must be >= 6", tag_len);
        break;
      }
      {
      guint8 type;
      guint8 version;
      proto_item *class_mask;
      proto_tree *mask_tree;

      offset += 2;
      proto_tree_add_item(tree, hf_ieee80211_tclas_up, tvb, offset, 1, ENC_LITTLE_ENDIAN);
      offset += 1;

      type = tvb_get_guint8(tvb, offset);
      proto_tree_add_item(tree, hf_ieee80211_tclas_class_type, tvb, offset, 1, ENC_LITTLE_ENDIAN);
      offset += 1;

      class_mask = proto_tree_add_item(tree, hf_ieee80211_tclas_class_mask,
                                       tvb, offset, 1, ENC_LITTLE_ENDIAN);
      offset += 1;

      switch (type)
        {
          case 0:
            offset--;
            mask_tree = proto_item_add_subtree(class_mask,
                                               ett_tag_tclas_mask_tree);
            proto_tree_add_item(mask_tree,
                                hf_ieee80211_tclas_class_mask0_src_addr,
                                tvb, offset, 1, ENC_LITTLE_ENDIAN);
            proto_tree_add_item(mask_tree,
                                hf_ieee80211_tclas_class_mask0_dst_addr,
                                tvb, offset, 1, ENC_LITTLE_ENDIAN);
            proto_tree_add_item(mask_tree,
                                hf_ieee80211_tclas_class_mask0_type,
                                tvb, offset, 1, ENC_LITTLE_ENDIAN);
            offset++;

            proto_tree_add_item(tree, hf_ieee80211_tclas_src_mac_addr, tvb, offset, 6, ENC_NA);
            offset += 6;

            proto_tree_add_item(tree, hf_ieee80211_tclas_dst_mac_addr, tvb, offset, 6, ENC_NA);
            offset += 6;

            proto_tree_add_item(tree, hf_ieee80211_tclas_ether_type, tvb, offset, 2, ENC_LITTLE_ENDIAN);
            offset += 2;
            break;

          case 1:
            version = tvb_get_guint8(tvb, offset);
            offset--;

            mask_tree = proto_item_add_subtree(class_mask,
                                               ett_tag_tclas_mask_tree);
            proto_tree_add_item(mask_tree,
                                hf_ieee80211_tclas_class_mask1_ver,
                                tvb, offset, 1, ENC_LITTLE_ENDIAN);
            proto_tree_add_item(mask_tree,
                                hf_ieee80211_tclas_class_mask1_src_ip,
                                tvb, offset, 1, ENC_LITTLE_ENDIAN);
            proto_tree_add_item(mask_tree,
                                hf_ieee80211_tclas_class_mask1_dst_ip,
                                tvb, offset, 1, ENC_LITTLE_ENDIAN);
            proto_tree_add_item(mask_tree,
                                hf_ieee80211_tclas_class_mask1_src_port,
                                tvb, offset, 1, ENC_LITTLE_ENDIAN);
            proto_tree_add_item(mask_tree,
                                hf_ieee80211_tclas_class_mask1_dst_port,
                                tvb, offset, 1, ENC_LITTLE_ENDIAN);
            if (version == 4) {
              proto_tree_add_item(mask_tree,
                                  hf_ieee80211_tclas_class_mask1_ipv4_dscp,
                                  tvb, offset, 1, ENC_LITTLE_ENDIAN);
              proto_tree_add_item(mask_tree,
                                  hf_ieee80211_tclas_class_mask1_ipv4_proto,
                                  tvb, offset, 1, ENC_LITTLE_ENDIAN);
            } else {
              proto_tree_add_item(mask_tree,
                                  hf_ieee80211_tclas_class_mask1_ipv6_flow,
                                  tvb, offset, 1, ENC_LITTLE_ENDIAN);
            }
            offset += 1;

            proto_tree_add_item(tree, hf_ieee80211_tclas_version, tvb, offset, 1, ENC_LITTLE_ENDIAN);
            offset += 1;
            if (version == 4)
            {
              proto_tree_add_item(tree, hf_ieee80211_tclas_ipv4_src, tvb, offset, 4, ENC_BIG_ENDIAN);
              offset += 4;
              proto_tree_add_item(tree, hf_ieee80211_tclas_ipv4_dst, tvb, offset, 4, ENC_BIG_ENDIAN);
              offset += 4;
              proto_tree_add_item(tree, hf_ieee80211_tclas_src_port, tvb, offset, 2, ENC_BIG_ENDIAN);
              offset += 2;
              proto_tree_add_item(tree, hf_ieee80211_tclas_dst_port, tvb, offset, 2, ENC_BIG_ENDIAN);
              offset += 2;
              proto_tree_add_item(tree, hf_ieee80211_tclas_dscp, tvb, offset, 1, ENC_LITTLE_ENDIAN);
              offset += 1;
              proto_tree_add_item(tree, hf_ieee80211_tclas_protocol, tvb, offset, 1, ENC_LITTLE_ENDIAN);
              offset += 1;
            }
            else if (version == 6)
            {
              proto_tree_add_item(tree, hf_ieee80211_tclas_ipv6_src, tvb, offset, 16, ENC_NA);
              offset += 16;
              proto_tree_add_item(tree, hf_ieee80211_tclas_ipv6_dst, tvb, offset, 16, ENC_NA);
              offset += 16;
              proto_tree_add_item(tree, hf_ieee80211_tclas_src_port, tvb, offset, 2, ENC_BIG_ENDIAN);
              offset += 2;
              proto_tree_add_item(tree, hf_ieee80211_tclas_dst_port, tvb, offset, 2, ENC_BIG_ENDIAN);
              offset += 2;
              proto_tree_add_item(tree, hf_ieee80211_tclas_flow, tvb, offset, 3, ENC_BIG_ENDIAN);
              offset += 3;
            }
            break;

          case 2:
            offset--;
            mask_tree = proto_item_add_subtree(class_mask,
                                               ett_tag_tclas_mask_tree);
            proto_tree_add_item(mask_tree,
                                hf_ieee80211_tclas_class_mask2_tci,
                                tvb, offset, 1, ENC_LITTLE_ENDIAN);
            offset++;

            proto_tree_add_item(tree, hf_ieee80211_tclas_tag_type, tvb, offset, 2, ENC_LITTLE_ENDIAN);
            offset += 2;
            break;

          default:
            break;
        }
      }
      break;

    case TAG_SCHEDULE: /* 7.3.2.34 Schedule element (15) */
      if (tag_len != 14)
      {
        expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length, "Tag Length %u wrong, must be = 14", tag_len);
        break;
      }
      offset += 2;

      add_fixed_field(tree, tvb, pinfo, offset, FIELD_SCHEDULE_INFO);
      offset += 2;

      proto_tree_add_item(tree, hf_ieee80211_sched_srv_start, tvb, offset, 4, ENC_LITTLE_ENDIAN);
      offset += 4;

      proto_tree_add_item(tree, hf_ieee80211_sched_srv_int, tvb, offset, 4, ENC_LITTLE_ENDIAN);
      offset += 4;

      proto_tree_add_item(tree, hf_ieee80211_sched_spec_int, tvb, offset, 2, ENC_LITTLE_ENDIAN);
      offset += 2;
      break;

    case TAG_CHALLENGE_TEXT: /* 7.3.2.8 Challenge Text element (16) */
      offset += 2;
      proto_tree_add_item(tree, hf_ieee80211_tag_challenge_text, tvb, offset, tag_len, ENC_NA);
      break;

    case TAG_POWER_CONSTRAINT: /* 7.3.2.15 Power Constraint element (32) */
    {
      if (tag_len != 1)
      {
        expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length, "Tag Length %u wrong, must be = 1", tag_len);
        break;
      }
      offset += 2;

      proto_tree_add_item(tree, hf_ieee80211_tag_power_constraint_local, tvb, offset, 1, ENC_LITTLE_ENDIAN);
      proto_item_append_text(ti, ": %d", tvb_get_guint8(tvb, offset));
      offset += 1;

      break;
    }

    case TAG_POWER_CAPABILITY: /* 7.3.2.16 Power Capability element (33) */
    {
      if (tag_len != 2)
      {
        expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length, "Tag Length %u wrong, must be = 2", tag_len);
        break;
      }
      offset += 2;

      proto_tree_add_item(tree, hf_ieee80211_tag_power_capability_min, tvb, offset, 1, ENC_LITTLE_ENDIAN);
      proto_item_append_text(ti, " Min: %d", tvb_get_guint8(tvb, offset));
      offset += 1;

      proto_tree_add_item(tree, hf_ieee80211_tag_power_capability_max, tvb, offset, 1, ENC_LITTLE_ENDIAN);
      proto_item_append_text(ti, ", Max :%d", tvb_get_guint8(tvb, offset));
      offset += 1;
      break;
    }

    case TAG_TPC_REQUEST: /* 7.3.2.18 TPC Request element (34) */
    {
      if (tag_len != 0)
      {
        expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length, "Tag Length %u wrong, must be = 0", tag_len);
        break;
      }
      offset += 2;

      /* No Data */
      break;
    }

    case TAG_TPC_REPORT: /* 7.3.2.18 TPC Report element (35) */
    {
      if (tag_len != 2)
      {
        expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length, "Tag Length %u wrong, must be = 2", tag_len);
        break;
      }
      offset += 2;

      proto_tree_add_item(tree, hf_ieee80211_tag_tpc_report_trsmt_pow, tvb, offset, 1, ENC_LITTLE_ENDIAN);
      proto_item_append_text(ti, " Transmit Power: %d", tvb_get_guint8(tvb, offset));
      offset += 1;

      proto_tree_add_item(tree, hf_ieee80211_tag_tpc_report_link_mrg, tvb, offset, 1, ENC_LITTLE_ENDIAN);
      proto_item_append_text(ti, ", Link Margin: %d", tvb_get_guint8(tvb, offset));
      offset += 1;

      break;
    }

    case TAG_SUPPORTED_CHANNELS: /* 7.3.2.19 Supported Channels element (36) */
      {
        proto_item *chan_item;
        proto_tree *chan_tree;
        guint       i = 1;

        offset += 2;
        if (tag_len % 2 == 1) {
           expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length, "Tag length %u must be even", tag_len);
           break;
        }
        while (offset < tag_end)
        {
          chan_item = proto_tree_add_item(tree, hf_ieee80211_tag_supported_channels, tvb, offset, 2, ENC_NA);
          proto_item_append_text(chan_item, " #%d", i);
          i += 1;

          chan_tree = proto_item_add_subtree(chan_item , ett_tag_supported_channels);

          proto_tree_add_item(chan_tree, hf_ieee80211_tag_supported_channels_first, tvb, offset, 1, ENC_LITTLE_ENDIAN);
          proto_item_append_text(chan_item, " First: %d", tvb_get_guint8(tvb, offset));
          offset += 1;

          proto_tree_add_item(chan_tree, hf_ieee80211_tag_supported_channels_range, tvb, offset, 1, ENC_LITTLE_ENDIAN);
          proto_item_append_text(chan_item, ", Range: %d ", tvb_get_guint8(tvb, offset));
          offset += 1;

        }
        break;
      }
    case TAG_CHANNEL_SWITCH_ANN: /* 7.3.2.20 Channel Switch Announcement element (37) */
    {
      if (tag_len != 3)
      {
        expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length, "Tag Length %u wrong, must be = 3", tag_len);
        break;
      }
      offset += 2;

      proto_tree_add_item(tree, hf_ieee80211_csa_channel_switch_mode, tvb, offset, 1, ENC_LITTLE_ENDIAN);
      proto_item_append_text(ti, " Mode: %d", tvb_get_guint8(tvb, offset));
      offset += 1;

      proto_tree_add_item(tree, hf_ieee80211_csa_new_channel_number, tvb, offset, 1, ENC_LITTLE_ENDIAN);
      proto_item_append_text(ti, ", Number: %d ", tvb_get_guint8(tvb, offset));
      offset += 1;

      proto_tree_add_item(tree, hf_ieee80211_csa_channel_switch_count, tvb, offset, 1, ENC_LITTLE_ENDIAN);
      proto_item_append_text(ti, ", Count: %d ", tvb_get_guint8(tvb, offset));
      offset += 1;

      break;
    }

    case TAG_MEASURE_REQ: /* 7.3.2.21 Measurement Request element (38) with update from 802.11k-2008 */
      if (tag_len < 3)
      {
        expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length, "Tag length %u too short, must be >= 3", tag_len);
        break;
      }
      {
        guint8 request_type;
        proto_item *parent_item;
        proto_tree *sub_tree;

        offset += 2;

        proto_tree_add_item(tree, hf_ieee80211_tag_measure_request_token, tvb, offset, 1, ENC_NA);
        offset += 1;

        parent_item = proto_tree_add_item(tree, hf_ieee80211_tag_measure_request_mode, tvb, offset, 1, ENC_NA);
        sub_tree = proto_item_add_subtree(parent_item, ett_tag_measure_request_mode_tree);
        proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_mode_parallel, tvb, offset, 1, ENC_NA);
        proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_mode_enable, tvb, offset, 1, ENC_NA);
        proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_mode_request, tvb, offset, 1, ENC_NA);
        proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_mode_report, tvb, offset, 1, ENC_NA);
        proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_mode_duration_mandatory, tvb, offset, 1, ENC_NA);
        proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_mode_reserved, tvb, offset, 1, ENC_NA);
        offset += 1;


        parent_item = proto_tree_add_item(tree, hf_ieee80211_tag_measure_request_type, tvb, offset, 1, ENC_NA);
        sub_tree = proto_item_add_subtree(parent_item, ett_tag_measure_request_type_tree);
        request_type = tvb_get_guint8 (tvb, offset);
        offset += 1;

        switch (request_type) {
          case 0: /* Basic Request */
          case 1: /* Clear channel assessment (CCA) request */
          case 2: /* Receive power indication (RPI) histogram request */
          {

            proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_channel_number, tvb, offset, 1, ENC_NA);
            offset += 1;

            proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_start_time, tvb, offset, 8, ENC_LITTLE_ENDIAN);
            offset += 8;

            proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_duration, tvb, offset, 2, ENC_LITTLE_ENDIAN);
            offset += 2;
            break;
          }
          case 3: /* Channel Load Request */
          {
            proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_operating_class, tvb, offset, 1, ENC_NA);
            offset += 1;

            proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_channel_number, tvb, offset, 1, ENC_NA);
            offset += 1;

            proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_randomization_interval, tvb, offset, 2, ENC_LITTLE_ENDIAN);
            offset += 2;

            proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_duration, tvb, offset, 2, ENC_LITTLE_ENDIAN);
            offset += 2;

            while (offset < tag_end)
            {
              guint8 sub_id;
              proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_channel_load_sub_id, tvb, offset, 1, ENC_NA);
              sub_id = tvb_get_guint8(tvb, offset);
              offset += 1;

              proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_subelement_length, tvb, offset, 1, ENC_NA);
              offset += 1;

              switch (sub_id) {
                case MEASURE_REQ_CHANNEL_LOAD_SUB_REPORTING_INFO: /* Channel Load Reporting Information (1) */
                  proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_channel_load_sub_reporting_condition, tvb, offset, 1, ENC_NA);
                  offset += 1;
                  proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_channel_load_sub_reporting_ref, tvb, offset, 1, ENC_NA);
                  offset += 1;
                  break;
                default:
                  /* no default action */
                  break;
                }
              }
            break;
          }
          case 4: /* Noise Histogram Request */
          {
            proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_operating_class, tvb, offset, 1, ENC_NA);
            offset += 1;

            proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_channel_number, tvb, offset, 1, ENC_NA);
            offset += 1;

            proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_randomization_interval, tvb, offset, 2, ENC_LITTLE_ENDIAN);
            offset += 2;

            proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_duration, tvb, offset, 2, ENC_LITTLE_ENDIAN);
            offset += 2;

            while (offset < tag_end)
            {
              guint8 sub_id;
              proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_noise_histogram_sub_id, tvb, offset, 1, ENC_NA);
              sub_id = tvb_get_guint8(tvb, offset);
              offset += 1;

              proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_subelement_length, tvb, offset, 1, ENC_NA);
              offset += 1;

              switch (sub_id) {
                case MEASURE_REQ_NOISE_HISTOGRAM_SUB_REPORTING_INFO: /* Noise Histogram Reporting Information (1) */
                  proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_noise_histogram_sub_reporting_condition, tvb, offset, 1, ENC_NA);
                  offset += 1;
                  proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_noise_histogram_sub_reporting_anpi_ref, tvb, offset, 1, ENC_NA);
                  offset += 1;
                  break;
                default:
                  /* no default action */
                  break;
                }
              }
            break;
          }
          case 5: /* Beacon Request */
          {
            proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_operating_class, tvb, offset, 1, ENC_NA);
            offset += 1;

            proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_channel_number, tvb, offset, 1, ENC_NA);
            offset += 1;

            proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_randomization_interval, tvb, offset, 2, ENC_LITTLE_ENDIAN);
            offset += 2;

            proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_duration, tvb, offset, 2, ENC_LITTLE_ENDIAN);
            offset += 2;

            proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_measurement_mode, tvb, offset, 1, ENC_NA);
            offset += 1;

            proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_bssid, tvb, offset, 6, ENC_NA);
            offset += 6;

            while (offset < tag_end)
            {
              guint8 sub_id, sub_length, sub_tag_end;
              proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_beacon_sub_id, tvb, offset, 1, ENC_NA);
              sub_id = tvb_get_guint8(tvb, offset);
              offset += 1;

              proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_subelement_length, tvb, offset, 1, ENC_NA);
              sub_length = tvb_get_guint8(tvb, offset);
              offset += 1;
              sub_tag_end = offset + sub_length;

              switch (sub_id) {
                case MEASURE_REQ_BEACON_SUB_SSID: /* SSID (0) */
                  proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_beacon_sub_ssid, tvb, offset, sub_length, ENC_ASCII|ENC_NA);
                  offset += sub_length;
                  break;
                case MEASURE_REQ_BEACON_SUB_BRI: /* Beacon Reporting Information (1) */
                  proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_beacon_sub_bri_reporting_condition, tvb, offset, 1, ENC_LITTLE_ENDIAN);
                  offset += 1;
                  proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_beacon_sub_bri_threshold_offset, tvb, offset, 1, ENC_LITTLE_ENDIAN);
                  offset += 1;
                  break;
                case MEASURE_REQ_BEACON_SUB_RD: /* Reporting Detail (2) */
                  proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_beacon_sub_reporting_detail, tvb, offset, 1, ENC_LITTLE_ENDIAN);
                  offset += 1;
                  break;
                case MEASURE_REQ_BEACON_SUB_REQUEST: /* Request (10) */
                  proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_beacon_sub_request, tvb, offset, 1, ENC_LITTLE_ENDIAN);
                  offset += 1;
                  break;
                case MEASURE_REQ_BEACON_SUB_APCP: /* AP Channel Report (51) */
                  /* TODO */
                  break;
                default:
                  /* no default action */
                  break;
             }
             if (offset < sub_tag_end)
             {
               proto_item *tix;
               tix = proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_beacon_unknown, tvb, offset, sub_tag_end - offset, ENC_NA);
               expert_add_info(pinfo, tix, &ei_ieee80211_tag_measure_request_beacon_unknown);
               offset = sub_tag_end;
             }
            }

            break;
          }
          case 6: /* Frame Request */
          {
            proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_operating_class, tvb, offset, 1, ENC_NA);
            offset += 1;

            proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_channel_number, tvb, offset, 1, ENC_NA);
            offset += 1;

            proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_randomization_interval, tvb, offset, 2, ENC_LITTLE_ENDIAN);
            offset += 2;

            proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_duration, tvb, offset, 2, ENC_LITTLE_ENDIAN);
            offset += 2;

            proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_frame_request_type, tvb, offset, 1, ENC_NA);
            offset += 1;

            proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_mac_address, tvb, offset, 6, ENC_NA);
            offset += 6;

            /* TODO Add Optional Subelements */
            break;
          }
          case 7: /* BSTA Statistics Request */
          {
            proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_peer_mac_address, tvb, offset, 6, ENC_NA);
            offset += 6;

            proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_randomization_interval, tvb, offset, 2, ENC_LITTLE_ENDIAN);
            offset += 2;

            proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_duration, tvb, offset, 2, ENC_LITTLE_ENDIAN);
            offset += 2;

            proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_group_id, tvb, offset, 1, ENC_NA);
            offset += 1;

            /* TODO Add Optional Subelements */
            break;
          }
          case 8: /* Location Configuration Indication (LCI) Request */
            /* TODO */
          case 9: /* Transmit Stream Measurement Request */
            /* TODO */
          case 10: /* Multicast diagnostics request */
            /* TODO */
          case 11: /* Location Civic request */
            /* TODO */
          case 12: /* Location Identifier request */
            /* TODO */
          case 13: /* Directional channel quality request */
            /* TODO */
          case 14: /* Directional measurement request */
            /* TODO */
          case 15: /* Directional statistics request */
            /* TODO */
          case 255: /* Measurement Pause Request*/
            /* TODO */
          default: /* unknown */
            break;
        }
        if (offset < tag_end)
        {
          proto_item *tix;
          tix = proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_request_unknown, tvb, offset, tag_end - offset, ENC_NA);
          expert_add_info(pinfo, tix, &ei_ieee80211_tag_measure_request_unknown);
        }
      }

      break;
    case TAG_MEASURE_REP: /* 7.3.2.22 Measurement Report element (39) with update from 802.11k-2008 */
      if (tag_len < 3)
      {
        expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length, "Tag length %u too short, must be >= 3", tag_len);
        break;
      }
      {
        proto_item *parent_item;
        proto_tree *sub_tree;
        guint8 report_type;

        offset += 2;
        proto_tree_add_item(tree, hf_ieee80211_tag_measure_report_measurement_token, tvb, offset, 1, ENC_NA);
        offset += 1;

        parent_item = proto_tree_add_item(tree, hf_ieee80211_tag_measure_report_mode, tvb, offset, 1, ENC_NA);
        sub_tree = proto_item_add_subtree(parent_item, ett_tag_measure_report_mode_tree);
        proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_mode_late, tvb, offset, 1, ENC_NA);
        proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_mode_incapable, tvb, offset, 1, ENC_NA);
        proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_mode_refused, tvb, offset, 1, ENC_NA);
        proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_mode_reserved, tvb, offset, 1, ENC_NA);
        offset += 1;

        report_type = tvb_get_guint8(tvb, offset);
        parent_item = proto_tree_add_item(tree, hf_ieee80211_tag_measure_report_type, tvb, offset, 1, ENC_LITTLE_ENDIAN);
        sub_tree = proto_item_add_subtree(parent_item, ett_tag_measure_report_type_tree);
        offset += 1;

        if (tag_len == 3)
            break;
        switch (report_type) {
          case 0: /* Basic Report */
          {
            proto_tree *sub_tree_map_field;

            proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_channel_number, tvb, offset, 1, ENC_NA);
            offset += 1;

            proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_start_time, tvb, offset, 8, ENC_LITTLE_ENDIAN);
            offset += 8;

            proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_duration, tvb, offset, 2, ENC_LITTLE_ENDIAN);
            offset += 2;


            parent_item = proto_tree_add_item(tree, hf_ieee80211_tag_measure_basic_map_field, tvb, offset, 1, ENC_NA);
            sub_tree_map_field = proto_item_add_subtree(parent_item, ett_tag_measure_report_basic_map_tree);
            proto_tree_add_item(sub_tree_map_field, hf_ieee80211_tag_measure_map_field_bss, tvb, offset, 1, ENC_NA);
            proto_tree_add_item(sub_tree_map_field, hf_ieee80211_tag_measure_map_field_odfm, tvb, offset, 1, ENC_NA);
            proto_tree_add_item(sub_tree_map_field, hf_ieee80211_tag_measure_map_field_unident_signal, tvb, offset, 1, ENC_NA);
            proto_tree_add_item(sub_tree_map_field, hf_ieee80211_tag_measure_map_field_radar, tvb, offset, 1, ENC_NA);
            proto_tree_add_item(sub_tree_map_field, hf_ieee80211_tag_measure_map_field_unmeasured, tvb, offset, 1, ENC_NA);
            proto_tree_add_item(sub_tree_map_field, hf_ieee80211_tag_measure_map_field_reserved, tvb, offset, 1, ENC_NA);
            break;
          }
          case 1: /* Clear channel assessment (CCA) report */
            proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_channel_number, tvb, offset, 1, ENC_NA);
            offset += 1;

            proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_start_time, tvb, offset, 8, ENC_LITTLE_ENDIAN);
            offset += 8;

            proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_duration, tvb, offset, 2, ENC_LITTLE_ENDIAN);
            offset += 2;

            proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_cca_busy_fraction, tvb, offset, 1, ENC_NA);
            offset += 1;
            break;
          case 2: /* Receive power indication (RPI) histogram report */
            proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_channel_number, tvb, offset, 1, ENC_NA);
            offset += 1;

            proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_start_time, tvb, offset, 8, ENC_LITTLE_ENDIAN);
            offset += 8;

            proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_duration, tvb, offset, 2, ENC_LITTLE_ENDIAN);
            offset += 2;

            parent_item = proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_rpi_histogram_report, tvb, offset, 8, ENC_NA);
            sub_tree = proto_item_add_subtree(parent_item, ett_tag_measure_report_rpi_tree);

            proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_rpi_histogram_report_0, tvb, offset, 1, ENC_NA);
            offset += 1;

            proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_rpi_histogram_report_1, tvb, offset, 1, ENC_NA);
            offset += 1;

            proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_rpi_histogram_report_2, tvb, offset, 1, ENC_NA);
            offset += 1;

            proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_rpi_histogram_report_3, tvb, offset, 1, ENC_NA);
            offset += 1;

            proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_rpi_histogram_report_4, tvb, offset, 1, ENC_NA);
            offset += 1;

            proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_rpi_histogram_report_5, tvb, offset, 1, ENC_NA);
            offset += 1;

            proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_rpi_histogram_report_6, tvb, offset, 1, ENC_NA);
            offset += 1;

            proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_rpi_histogram_report_7, tvb, offset, 1, ENC_NA);
            offset += 1;
            break;
          case 3: /* Channel Load Report */
          {
            proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_operating_class, tvb, offset, 1, ENC_NA);
            offset += 1;

            proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_channel_number, tvb, offset, 1, ENC_NA);
            offset += 1;

            proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_start_time, tvb, offset, 8, ENC_LITTLE_ENDIAN);
            offset += 8;

            proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_duration, tvb, offset, 2, ENC_LITTLE_ENDIAN);
            offset += 2;

            proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_channel_load, tvb, offset, 1, ENC_NA);
            offset += 1;

            /* TODO Add Optional Subelements */
            break;
          }
          case 4: /* Noise Histogram Report */
            proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_operating_class, tvb, offset, 1, ENC_NA);
            offset += 1;

            proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_channel_number, tvb, offset, 1, ENC_NA);
            offset += 1;

            proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_start_time, tvb, offset, 8, ENC_LITTLE_ENDIAN);
            offset += 8;

            proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_duration, tvb, offset, 2, ENC_LITTLE_ENDIAN);
            offset += 2;

            proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_ant_id, tvb, offset, 1, ENC_NA);
            offset += 1;

            proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_anpi, tvb, offset, 1, ENC_NA);
            offset += 1;

            proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_ipi_density_0, tvb, offset, 1, ENC_NA);
            offset += 1;

            proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_ipi_density_1, tvb, offset, 1, ENC_NA);
            offset += 1;

            proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_ipi_density_2, tvb, offset, 1, ENC_NA);
            offset += 1;

            proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_ipi_density_3, tvb, offset, 1, ENC_NA);
            offset += 1;

            proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_ipi_density_4, tvb, offset, 1, ENC_NA);
            offset += 1;

            proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_ipi_density_5, tvb, offset, 1, ENC_NA);
            offset += 1;

            proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_ipi_density_6, tvb, offset, 1, ENC_NA);
            offset += 1;

            proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_ipi_density_7, tvb, offset, 1, ENC_NA);
            offset += 1;

            proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_ipi_density_8, tvb, offset, 1, ENC_NA);
            offset += 1;

            proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_ipi_density_9, tvb, offset, 1, ENC_NA);
            offset += 1;

            proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_ipi_density_10, tvb, offset, 1, ENC_NA);
            offset += 1;

            /* TODO Add Optional Subelements */
            break;
          case 5: /* Beacon Report */
          {
            proto_tree *sub_tree_frame_info;

            proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_operating_class, tvb, offset, 1, ENC_NA);
            offset += 1;

            proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_channel_number, tvb, offset, 1, ENC_NA);
            offset += 1;

            proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_start_time, tvb, offset, 8, ENC_LITTLE_ENDIAN);
            offset += 8;

            proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_duration, tvb, offset, 2, ENC_LITTLE_ENDIAN);
            offset += 2;

            parent_item = proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_frame_info, tvb, offset, 1, ENC_NA);
            sub_tree_frame_info = proto_item_add_subtree(parent_item, ett_tag_measure_report_frame_tree);
            proto_tree_add_item(sub_tree_frame_info, hf_ieee80211_tag_measure_report_frame_info_phy_type, tvb, offset, 1, ENC_NA);
            proto_tree_add_item(sub_tree_frame_info, hf_ieee80211_tag_measure_report_frame_info_frame_type, tvb, offset, 1, ENC_NA);
            offset += 1;

            proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_rcpi, tvb, offset, 1, ENC_NA);
            offset += 1;

            proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_rsni, tvb, offset, 1, ENC_NA);
            offset += 1;

            proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_bssid, tvb, offset, 6, ENC_NA);
            offset += 6;

            proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_ant_id, tvb, offset, 1, ENC_NA);
            offset += 1;

            proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_parent_tsf, tvb, offset, 4, ENC_LITTLE_ENDIAN);
            offset += 4;

            while (offset < tag_end)
            {
              guint8 sub_id, sub_length;
              proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_beacon_sub_id, tvb, offset, 1, ENC_NA);
              sub_id = tvb_get_guint8(tvb, offset);
              offset += 1;

              proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_subelement_length, tvb, offset, 1, ENC_NA);
              sub_length = tvb_get_guint8(tvb, offset);
              offset += 1;

              switch (sub_id) {
                case MEASURE_REP_REPORTED_FRAME_BODY: /* Reported Frame Body (1) */
                  {
                    proto_tree *rep_tree;

                    rep_tree = proto_tree_add_subtree(sub_tree, tvb, offset, sub_length, ett_tag_measure_reported_frame_tree, NULL, "Reported Frame Body");

                    add_fixed_field(rep_tree, tvb, pinfo, 0, FIELD_TIMESTAMP);
                    add_fixed_field(rep_tree, tvb, pinfo, 8, FIELD_BEACON_INTERVAL);
                    add_fixed_field(rep_tree, tvb, pinfo, 10, FIELD_CAP_INFO);
                    offset += 12;

                    ieee_80211_add_tagged_parameters (tvb, offset, pinfo, rep_tree, sub_length - 12, MGT_PROBE_RESP);
                    offset += (sub_length - 12);
                  }
                  break;
                default:
                  /* no default action */
                  break;
              }
            }
            break;
          }
          case 6: /* Frame Report */
            proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_operating_class, tvb, offset, 1, ENC_NA);
            offset += 1;

            proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_channel_number, tvb, offset, 1, ENC_NA);
            offset += 1;

            proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_start_time, tvb, offset, 8, ENC_LITTLE_ENDIAN);
            offset += 8;

            proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_duration, tvb, offset, 2, ENC_LITTLE_ENDIAN);
            offset += 2;

            /* TODO Add Optional Subelements */
            break;
          case 7: /* BSTA Statistics Report */
            /* TODO */
          case 8: /* Location Configuration Information Report element */
            /* TODO */
          case 9: /* Transmit Stream Measurement Report */
            /* TODO */
          case 10: /* Multicast diagnostics Report */
            /* TODO */
          case 11: /* Location Civic Report */
            /* TODO */
          case 12: /* Location Identifier Report */
            /* TODO */
          case 13: /* Directional channel quality Report */
            /* TODO */
          case 14: /* Directional measurement Report */
            /* TODO */
          case 15: /* Directional statistics Report */
            /* TODO */
          default: /* unknown */
            break;
        }
        if (offset < tag_end)
        {
          proto_item *tix;
          tix = proto_tree_add_item(sub_tree, hf_ieee80211_tag_measure_report_unknown, tvb, offset, tag_end - offset, ENC_NA);
          expert_add_info(pinfo, tix, &ei_ieee80211_tag_measure_report_unknown);
        }
      }
      break;

    case TAG_QUIET: /* 7.3.2.23 Quiet element (40) */
      if (tag_len != 6)
      {
        expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length, "Tag Length %u wrong, must be = 6", tag_len);
        break;
      }
      offset += 2;

      proto_tree_add_item(tree, hf_ieee80211_tag_quiet_count, tvb, offset, 1, ENC_NA);
      proto_item_append_text(ti, " Count: %d", tvb_get_guint8(tvb, offset));
      offset += 1;

      proto_tree_add_item(tree, hf_ieee80211_tag_quiet_period, tvb, offset, 1, ENC_NA);
      proto_item_append_text(ti, " Period: %d", tvb_get_guint8(tvb, offset));
      offset += 1;

      proto_tree_add_item(tree, hf_ieee80211_tag_quiet_duration, tvb, offset, 2, ENC_LITTLE_ENDIAN);
      proto_item_append_text(ti, " Duration: %d", tvb_get_letohs(tvb, offset));
      offset += 2;

      proto_tree_add_item(tree, hf_ieee80211_tag_quiet_offset, tvb, offset, 2, ENC_LITTLE_ENDIAN);
      proto_item_append_text(ti, " Offset: %d", tvb_get_letohs(tvb, offset));
      offset += 2;
      break;


    case TAG_IBSS_DFS: /* 7.3.2.24 IBSS DFS element (41) */
      if (tag_len < 7)
      {
        expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length, "Tag Length %u wrong, must be >= 7", tag_len);
        break;
      }
      {
        proto_item *ti_sup_map;
        proto_tree *sub_map_tree;
        offset += 2;

        proto_tree_add_item(tree, hf_ieee80211_tag_dfs_owner, tvb, offset, 6, ENC_NA);
        proto_item_append_text(ti, " Owner: %s", tvb_ether_to_str(tvb, offset));
        offset += 6;

        proto_tree_add_item(tree, hf_ieee80211_tag_dfs_recovery_interval, tvb, offset, 1, ENC_NA);
        offset += 1;

        while (offset < tag_end)
        {
          ti_sup_map = proto_tree_add_item(tree, hf_ieee80211_tag_dfs_channel_map, tvb, offset, 2, ENC_NA);
          sub_map_tree = proto_item_add_subtree(ti_sup_map, ett_tag_dfs_map_tree);
          proto_tree_add_item(sub_map_tree, hf_ieee80211_tag_dfs_channel_number, tvb, offset, 1, ENC_NA);
          proto_tree_add_item(sub_map_tree, hf_ieee80211_tag_dfs_map, tvb, offset, 1, ENC_NA);
          offset += 2;
        }
        break;
      }
    case TAG_ERP_INFO: /* 7.3.2.13 ERP Information element (42) */
    case TAG_ERP_INFO_OLD:
      if (tag_len != 1)
      {
        expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length, "Tag Length %u wrong, must be = 1", tag_len);
        break;
      }
      {
        proto_item *ti_erp;
        proto_tree *erp_tree;

        offset += 2;

        ti_erp = proto_tree_add_item(tree, hf_ieee80211_tag_erp_info, tvb, offset, 1, ENC_NA);
        erp_tree = proto_item_add_subtree(ti_erp, ett_tag_erp_info_tree);
        proto_tree_add_item(erp_tree, hf_ieee80211_tag_erp_info_erp_present, tvb, offset, 1, ENC_NA);
        proto_tree_add_item(erp_tree, hf_ieee80211_tag_erp_info_use_protection, tvb, offset, 1, ENC_NA);
        proto_tree_add_item(erp_tree, hf_ieee80211_tag_erp_info_barker_preamble_mode, tvb, offset, 1, ENC_NA);
        proto_tree_add_item(erp_tree, hf_ieee80211_tag_erp_info_reserved, tvb, offset, 1, ENC_NA);
        offset += 1;
        break;
      }

    case TAG_TS_DELAY: /* 7.3.2.32 TS Delay element (43) */
      if (tag_len != 4)
      {
        expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length, "Tag Length %u wrong, must be = 4", tag_len);
        break;
      }
      offset += 2;

      proto_tree_add_item(tree, hf_ieee80211_ts_delay, tvb, offset, 4, ENC_LITTLE_ENDIAN);
      proto_item_append_text(ti, " : %d", tvb_get_ntohl(tvb, offset));
      offset += 4;
      break;

    case TAG_TCLAS_PROCESS: /* 7.3.2.33 TCLAS Processing element (44) */
      if (tag_len != 1)
      {
        expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length, "Tag Length %u wrong, must be = 1", tag_len);
        break;
      }
      offset += 2;

      proto_tree_add_item(tree, hf_ieee80211_tclas_process, tvb, offset, 1, ENC_LITTLE_ENDIAN);
      proto_item_append_text(ti, " : %s", val_to_str(tvb_get_guint8(tvb, offset), ieee80211_tclas_process_flag, "Unknown %d"));
      offset += 1;
      break;

    case TAG_QOS_CAPABILITY: /* 802.11-2012 8.4.2.37 QoS Capability element (46) */
      if (tag_len != 1)
      {
        expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length, "Tag Length %u wrong, must be = 1", tag_len);
        break;
      }
      {
        offset += 2;
        offset = dissect_qos_capability(tree, tvb, pinfo, offset, ftype);
      }
      break;

    case TAG_RSN_IE: /* 7.3.2.25 RSN information element (48) */
      if (tag_len < 18)
      {
        expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length, "Tag Length %u wrong, must be >= 18", tag_len);
        break;
      }
      offset += 2;

      offset = dissect_rsn_ie(pinfo, tree, tvb, offset, tag_len);
      break;

    case TAG_EXT_SUPP_RATES: /* 7.3.2.14 Extended Supported Rates element (50) */
      if (tag_len < 1)
      {
        expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length, "Tag length %u too short, must be greater than 0", tag_len);
        break;
      }
      offset += 2;

      while (offset < tag_end)
      {
        proto_tree_add_item(tree, hf_ieee80211_tag_ext_supp_rates, tvb, offset, 1, ENC_NA);
        proto_item_append_text(ti, " %s,", val_to_str_ext_const(tvb_get_guint8(tvb, offset), &ieee80211_supported_rates_vals_ext, "Unknown Rate"));
        offset += 1;
      }
      proto_item_append_text(ti, " [Mbit/sec]");
      break;

    case TAG_EXTENDED_CAPABILITIES: /* 7.3.2.27 Extended Capabilities information element (127) */
      dissect_extended_capabilities_ie(pinfo, tree, ti, ti_len, tag_len, tvb, offset+2, tag_end);
      break;

    case TAG_CISCO_CCX1_CKIP: /* Cisco CCX1 CKIP + Device Name (133) */
      /* From WCS manual:
       * If Aironet IE support is enabled, the access point sends an Aironet
       * IE 0x85 (which contains the access point name, load, number of
       * associated clients, and so on) in the beacon and probe responses of
       * this WLAN, and the controller sends Aironet IEs 0x85 and 0x95
       * (which contains the management IP address of the controller and
       * the IP address of the access point) in the reassociation response
       * if it receives Aironet IE 0x85 in the reassociation request.
       */

      if (tag_len < 26)
      {
        expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length, "Tag Length %u too short, must be >= 26", tag_len);
        break;
      }
      offset += 2;
      proto_tree_add_item(tree, hf_ieee80211_tag_cisco_ccx1_unknown, tvb, offset, 10, ENC_NA);
      offset += 10;

      /* The Name of the sending device starts at offset 10 and is up to
         15 or 16 bytes in length, \0 padded */
      proto_tree_add_item(tree, hf_ieee80211_tag_cisco_ccx1_name, tvb, offset, 16, ENC_ASCII|ENC_NA);
      offset += 16;

      /* Total number off associated clients and repeater access points */
      proto_tree_add_item(tree, hf_ieee80211_tag_cisco_ccx1_clients, tvb, offset, 1, ENC_NA);
      offset += 1;
      proto_tree_add_item(tree, hf_ieee80211_tag_cisco_ccx1_unknown2, tvb, offset, 3, ENC_NA);
      offset += 3;
      break;

    case TAG_VHT_CAPABILITY:
      dissect_vht_capability_ie(tvb, pinfo, tree, offset+2, tag_len, ti_len);
      break;

    case TAG_VHT_OPERATION:
      dissect_vht_operation_ie(tvb, pinfo, tree, offset+2, tag_len, ti_len);
      break;

    case TAG_EXT_BSS_LOAD:
      dissect_ext_bss_load(tree, tvb, offset+2);
      break;

    case TAG_WIDE_BW_CHANNEL_SWITCH:
      dissect_wide_bw_channel_switch(tree, tvb, offset+2);
      break;

    case TAG_VHT_TX_PWR_ENVELOPE:
      dissect_vht_tx_pwr_envelope(tvb, pinfo, tree, offset+2, tag_len, ti_len);
      break;

    case TAG_CHANNEL_SWITCH_WRAPPER:
      dissect_channel_switch_wrapper(pinfo, tree, tvb, offset + 2, tag_len);
      break;

    case TAG_OPERATING_MODE_NOTIFICATION:
      dissect_operating_mode_notification(tree, tvb, offset + 2);
      break;

    case TAG_VENDOR_SPECIFIC_IE: /* 7.3.2.26 Vendor Specific information element (221) */
    case TAG_CISCO_VENDOR_SPECIFIC: /* This Cisco proprietary IE seems to mimic 221 */
    case TAG_SYMBOL_PROPRIETARY: /* This Symbol proprietary IE seems to mimic 221 */
      if (tag_len < 3)
      {
        expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length, "Tag Length %u wrong, must be >= 3", tag_len);
        break;
      }
      {
        guint32 tag_vs_len = tag_len;

        offset += 2;
        oui = tvb_get_ntoh24(tvb, offset);
        tag_tvb = tvb_new_subset_length(tvb, offset, tag_len);
        proto_tree_add_item(tree, hf_ieee80211_tag_oui, tvb, offset, 3, ENC_NA);
        proto_item_append_text(ti, ": %s", uint_get_manuf_name(oui));
        offset += 3;
        tag_vs_len -= 3;

        if (tag_len > 0) {
          proto_tree_add_item(ti, hf_ieee80211_tag_vendor_oui_type, tvb, offset, 1, ENC_LITTLE_ENDIAN);
        }

      switch (oui) {
        /* 802.11 specific vendor ids */
        case OUI_WPAWME:
          offset = dissect_vendor_ie_wpawme(tree, tvb, pinfo, offset, tag_vs_len, ftype);
          break;
        case OUI_RSN:
          dissect_vendor_ie_rsn(ti, tree, tvb, offset, tag_vs_len);
          break;
        case OUI_PRE11N:
          dissect_vendor_ie_ht(tvb, pinfo, tree, offset, ti, ti_len, tag_vs_len);
          break;
        case OUI_WFA:
          dissect_vendor_ie_wfa(pinfo, ti, tag_tvb);
          break;

        /* Normal IEEE vendor ids (from oui.h) */
        case OUI_CISCOWL:  /* Cisco Wireless (Aironet) */
          dissect_vendor_ie_aironet(ti, tree, tvb, offset, tag_vs_len);
          break;
        case OUI_MARVELL:
          dissect_vendor_ie_marvell(ti, tree, tvb, offset, tag_vs_len);
          break;
        case OUI_ATHEROS:
          dissect_vendor_ie_atheros(ti, tree, tvb, offset, tag_vs_len, pinfo, ti_len);
          break;
        case OUI_ARUBA:
          dissect_vendor_ie_aruba(ti, tree, tvb, offset, tag_vs_len);
          break;
        case OUI_NINTENDO:
          dissect_vendor_ie_nintendo(ti, tree, tvb, offset, tag_vs_len);
          break;
        default:
          proto_tree_add_item(tree, hf_ieee80211_tag_vendor_data, tvb, offset, tag_vs_len, ENC_NA);
          break;
        }

      }
      break;

    case TAG_MOBILITY_DOMAIN:
      dissect_mobility_domain(tree, tvb, offset + 2, tag_len);
      break;

    case TAG_FAST_BSS_TRANSITION:
      dissect_fast_bss_transition(tree, tvb, offset + 2, tag_len);
      break;

    case TAG_MMIE:
      dissect_mmie(tree, tvb, offset + 2, tag_len);
      break;

    case TAG_SSID_LIST:
      dissect_ssid_list(tree, tvb, offset + 2, tag_len);
      break;

    case TAG_TIME_ZONE:
      dissect_time_zone(tree, tvb, offset + 2, tag_len);
      break;

    case TAG_TIMEOUT_INTERVAL:
      dissect_timeout_interval(tree, tvb, pinfo, offset + 2, tag_len);
      break;

    case TAG_RIC_DATA: /* RIC Data (RDE) (57) */
     /* Assigning the return value will ensure that the IE after RIC is processed
      * only once. This gives us a good looking RIC IE :-)
      */
      tag_len = dissect_ric_data(pinfo, tree, tvb, offset + 2, tag_len, ti, ti_len, ftype);
      break;

    case TAG_LINK_IDENTIFIER:
      dissect_link_identifier(tree, tvb, offset + 2, tag_len);
      break;

    case TAG_WAKEUP_SCHEDULE:
      dissect_wakeup_schedule(tree, tvb, offset + 2, tag_len);
      break;

    case TAG_CHANNEL_SWITCH_TIMING:
      dissect_channel_switch_timing(tree, tvb, offset + 2, tag_len);
      break;

    case TAG_PTI_CONTROL:
      dissect_pti_control(tree, tvb, offset + 2, tag_len);
      break;

    case TAG_PU_BUFFER_STATUS:
      dissect_pu_buffer_status(tree, tvb, offset + 2, tag_len);
      break;

    case TAG_HT_CAPABILITY:
      dissect_ht_capability_ie(tvb, pinfo, tree, offset+2, tag_len, ti_len, FALSE);
      break;

    case TAG_HT_INFO:
      dissect_ht_info_ie_1_1(tvb, pinfo, tree, offset + 2, tag_len, ti_len);
      break;

    case TAG_SECONDARY_CHANNEL_OFFSET:
      dissect_secondary_channel_offset_ie(tvb, pinfo, tree, offset + 2, tag_len, ti_len);
      break;

    case TAG_BSS_AVG_ACCESS_DELAY: /* BSS Average Access Delay element (63) */
      dissect_bss_avg_access_delay_ie(tvb, pinfo, tree, offset + 2, tag_len, ti_len);
      break;

    case TAG_ANTENNA: /* Antenna element (64) */
      dissect_antenna_ie(tvb, pinfo, tree, offset + 2, tag_len, ti_len);
      break;

    case TAG_RSNI: /* RSNI element (65) */
      dissect_rsni_ie(tvb, pinfo, tree, offset + 2, tag_len, ti_len);
      break;

    case TAG_BSS_AVB_ADM_CAPACITY:
      dissect_bss_available_admission_capacity_ie(tvb, pinfo, tree, offset + 2, tag_len, ti_len);
      break;

    case TAG_IE_68_CONFLICT: /* Conflict: WAPI Vs. IEEE */
      if (tag_len >= 20) { /* It Might be WAPI*/
        dissect_wapi_param_set(tvb, pinfo, tree, offset + 2,tag_len, ti_len, ti, ftype);
      }
      else { /* BSS AC Access Delay (68) */
        dissect_bss_ac_access_delay_ie(tvb, pinfo, tree, offset + 2, tag_len, ti_len);
      }
      break;

    case TAG_BSS_MAX_IDLE_PERIOD:
      dissect_bss_max_idle_period(tree, tvb, offset + 2);
      break;

    case TAG_TFS_REQUEST:
      dissect_tfs_request(pinfo, tree, tvb, offset + 2, tag_len, ftype);
      break;

    case TAG_TFS_RESPONSE:
      dissect_tfs_response(pinfo, tree, tvb, offset + 2, tag_len, ftype);
      break;

    case TAG_WNM_SLEEP_MODE:
      dissect_wnm_sleep_mode(tree, tvb, offset + 2);
      break;

    case TAG_TIME_ADV:
      dissect_time_adv(tree, tvb, offset + 2);
      break;

    case TAG_RM_ENABLED_CAPABILITY: /* RM Enabled Capabilities (70) */
      dissect_rm_enabled_capabilities_ie(pinfo, tree, ti, ti_len, tag_len, tvb, offset+2, tag_end);
      break;

    case TAG_OVERLAP_BSS_SCAN_PAR: /* Overlapping BSS Scan Parameters (74) */
      dissect_overlap_bss_scan_par(pinfo, tree, tvb, offset + 2, tag_len, ti, ti_len);
      break;

    case TAG_RIC_DESCRIPTOR: /* RIC Descriptor (75) */
      dissect_ric_descriptor(pinfo, tree, tvb, offset + 2, tag_len, ti, ti_len);
      break;

    case TAG_MESH_PEERING_MGMT:
      {
        guint start = offset + 2;
        offset += 2;
        proto_tree_add_item (tree, hf_ieee80211_mesh_peering_proto, tvb, offset, 2, ENC_LITTLE_ENDIAN);
        offset += 2;
        proto_tree_add_item (tree, hf_ieee80211_mesh_peering_local_link_id, tvb, offset, 2, ENC_LITTLE_ENDIAN);
        offset += 2;
        switch (tvb_get_guint8(tvb, 1))
          {                                         /* Self-protected action field */
          case SELFPROT_ACTION_MESH_PEERING_OPEN:
            break;

          case SELFPROT_ACTION_MESH_PEERING_CONFIRM:
            proto_tree_add_item (tree, hf_ieee80211_mesh_peering_peer_link_id, tvb, offset, 2, ENC_LITTLE_ENDIAN);
            offset += 2;
            break;

          case SELFPROT_ACTION_MESH_PEERING_CLOSE:
            if ((tag_len == 8) || (tag_len == 24))
              {
                proto_tree_add_item (tree, hf_ieee80211_mesh_peering_peer_link_id, tvb, offset, 2, ENC_LITTLE_ENDIAN);
                offset += 2;
              }
            offset += add_fixed_field(tree, tvb, pinfo, offset, FIELD_REASON_CODE);
            break;

          /* unexpected values */
          default:
            proto_tree_add_expert(tree, pinfo, &ei_ieee80211_mesh_peering_unexpected , tvb, offset, tag_len);
            offset += tag_len;
            break;
          }
        if (tag_len - (offset - start) == 16)
          {
            proto_tree_add_item(tree, hf_ieee80211_rsn_pmkid, tvb, offset, 16, ENC_NA);
            offset += 16;
          }
        break;
      }

    case TAG_MESH_CONFIGURATION:
      {
        proto_item *item;
        proto_tree *subtree;
        offset += 2;
        proto_tree_add_item (tree, hf_ieee80211_mesh_config_path_sel_protocol, tvb, offset, 1, ENC_LITTLE_ENDIAN);
        proto_tree_add_item (tree, hf_ieee80211_mesh_config_path_sel_metric, tvb, offset + 1, 1, ENC_LITTLE_ENDIAN);
        proto_tree_add_item (tree, hf_ieee80211_mesh_config_congestion_control, tvb, offset + 2, 1, ENC_LITTLE_ENDIAN);
        proto_tree_add_item (tree, hf_ieee80211_mesh_config_sync_method, tvb, offset + 3, 1, ENC_LITTLE_ENDIAN);
        proto_tree_add_item (tree, hf_ieee80211_mesh_config_auth_protocol, tvb, offset + 4, 1, ENC_LITTLE_ENDIAN);
        item = proto_tree_add_item (tree, hf_ieee80211_mesh_config_formation_info, tvb, offset + 5, 1, ENC_LITTLE_ENDIAN);
        subtree = proto_item_add_subtree(item, ett_mesh_formation_info_tree);
        proto_tree_add_item (subtree, hf_ieee80211_mesh_form_info_num_of_peerings, tvb, offset + 5, 1, ENC_LITTLE_ENDIAN);
        item = proto_tree_add_item (tree, hf_ieee80211_mesh_config_capability, tvb, offset + 6, 1, ENC_LITTLE_ENDIAN);
        subtree = proto_item_add_subtree(item, ett_mesh_config_cap_tree);
        proto_tree_add_item (subtree, hf_ieee80211_mesh_config_cap_accepting, tvb, offset + 6, 1, ENC_LITTLE_ENDIAN);
        proto_tree_add_item (subtree, hf_ieee80211_mesh_config_cap_mcca_support, tvb, offset + 6, 1, ENC_LITTLE_ENDIAN);
        proto_tree_add_item (subtree, hf_ieee80211_mesh_config_cap_mcca_enabled, tvb, offset + 6, 1, ENC_LITTLE_ENDIAN);
        proto_tree_add_item (subtree, hf_ieee80211_mesh_config_cap_forwarding, tvb, offset + 6, 1, ENC_LITTLE_ENDIAN);
        proto_tree_add_item (subtree, hf_ieee80211_mesh_config_cap_mbca_enabled, tvb, offset + 6, 1, ENC_LITTLE_ENDIAN);
        proto_tree_add_item (subtree, hf_ieee80211_mesh_config_cap_tbtt_adjusting, tvb, offset + 6, 1, ENC_LITTLE_ENDIAN);
        proto_tree_add_item (subtree, hf_ieee80211_mesh_config_cap_power_save_level, tvb, offset + 6, 1, ENC_LITTLE_ENDIAN);
        break;
      }

    case TAG_MESH_ID:
      {
        offset += 2;

        proto_tree_add_item(tree, hf_ieee80211_mesh_id, tvb, offset, tag_len, ENC_ASCII|ENC_NA);
        if (tag_len > 0) {
            col_append_fstr(pinfo->cinfo, COL_INFO, ", MESHID=%s", format_text(tvb_get_string_enc(wmem_packet_scope(), tvb, offset, tag_len, ENC_ASCII), tag_len));
            proto_item_append_text(ti, ": %s", format_text(tvb_get_string_enc(wmem_packet_scope(), tvb, offset, tag_len, ENC_ASCII), tag_len));
        }

      break;
      }

    case TAG_MESH_PREQ:
      {
        guint8 flags = tvb_get_guint8(tvb, offset + 2);
        guint8 targs, i;

        offset += 2;
        proto_tree_add_item (tree, hf_ieee80211_ff_hwmp_flags, tvb, offset, 1, ENC_LITTLE_ENDIAN);
        offset += 1;
        proto_tree_add_item (tree, hf_ieee80211_ff_hwmp_hopcount, tvb, offset, 1, ENC_LITTLE_ENDIAN);
        offset += 1;
        proto_tree_add_item (tree, hf_ieee80211_ff_hwmp_ttl, tvb, offset, 1, ENC_LITTLE_ENDIAN);
        offset += 1;
        proto_tree_add_item (tree, hf_ieee80211_ff_hwmp_pdid, tvb, offset, 4, ENC_LITTLE_ENDIAN);
        offset += 4;
        proto_tree_add_item (tree, hf_ieee80211_ff_hwmp_orig_sta, tvb, offset, 6, ENC_NA);
        offset += 6;
        proto_tree_add_item (tree, hf_ieee80211_ff_hwmp_orig_sn, tvb, offset, 4, ENC_LITTLE_ENDIAN);
        offset += 4;

        if (flags & (1<<6)) {
          proto_tree_add_item (tree, hf_ieee80211_ff_hwmp_orig_ext, tvb, offset, 6, ENC_NA);
          offset += 6;
        }
        proto_tree_add_item (tree, hf_ieee80211_ff_hwmp_lifetime, tvb, offset, 4, ENC_LITTLE_ENDIAN);
        offset += 4;
        proto_tree_add_item (tree, hf_ieee80211_ff_hwmp_metric, tvb, offset, 4, ENC_LITTLE_ENDIAN);
        offset += 4;
        proto_tree_add_item (tree, hf_ieee80211_ff_hwmp_targ_count, tvb, offset, 1, ENC_LITTLE_ENDIAN);
        targs = tvb_get_guint8 (tvb, offset);
        offset += 1;
        for (i = 0; i < targs; i++) {
          const int * targ_flags[] = {
              &hf_ieee80211_ff_hwmp_targ_to_flags,
              &hf_ieee80211_ff_hwmp_targ_usn_flags,
              NULL
          };

          proto_tree_add_bitmask_with_flags(tree, tvb, offset, hf_ieee80211_ff_hwmp_targ_flags,
                                   ett_hwmp_targ_flags_tree, targ_flags, ENC_LITTLE_ENDIAN, BMT_NO_APPEND);

          offset += 1;
          proto_tree_add_item (tree, hf_ieee80211_ff_hwmp_targ_sta, tvb, offset, 6, ENC_NA);
          offset += 6;
          proto_tree_add_item (tree, hf_ieee80211_ff_hwmp_targ_sn, tvb, offset, 4, ENC_LITTLE_ENDIAN);
          offset += 4;
        }
        break;
      }

    case TAG_MESH_PREP:
      {
        guint8 flags = tvb_get_guint8(tvb, offset + 2);
        offset += 2;
        proto_tree_add_item (tree, hf_ieee80211_ff_hwmp_flags, tvb, offset, 1, ENC_LITTLE_ENDIAN);
        offset += 1;
        proto_tree_add_item (tree, hf_ieee80211_ff_hwmp_hopcount, tvb, offset, 1, ENC_LITTLE_ENDIAN);
        offset += 1;
        proto_tree_add_item (tree, hf_ieee80211_ff_hwmp_ttl, tvb, offset , 1, ENC_LITTLE_ENDIAN);
        offset += 1;
        proto_tree_add_item (tree, hf_ieee80211_ff_hwmp_targ_sta, tvb, offset, 6, ENC_NA);
        offset += 6;
        proto_tree_add_item (tree, hf_ieee80211_ff_hwmp_targ_sn, tvb, offset, 4, ENC_LITTLE_ENDIAN);
        offset += 4;
        if (flags & (1<<6)) {
          proto_tree_add_item (tree, hf_ieee80211_ff_hwmp_targ_ext, tvb, offset, 6, ENC_NA);
          offset += 6;
        }
        proto_tree_add_item (tree, hf_ieee80211_ff_hwmp_lifetime, tvb, offset, 4, ENC_LITTLE_ENDIAN);
        offset += 4;
        proto_tree_add_item (tree, hf_ieee80211_ff_hwmp_metric, tvb, offset, 4, ENC_LITTLE_ENDIAN);
        offset += 4;
        proto_tree_add_item (tree, hf_ieee80211_ff_hwmp_orig_sta, tvb, offset, 6, ENC_NA);
        offset += 6;
        proto_tree_add_item (tree, hf_ieee80211_ff_hwmp_orig_sn, tvb, offset, 4, ENC_LITTLE_ENDIAN);
        offset += 4;
        break;
      }

    case TAG_MESH_PERR:
      {
        guint8 targs, i;

        offset += 2;
        proto_tree_add_item (tree, hf_ieee80211_ff_hwmp_ttl, tvb, offset, 1, ENC_LITTLE_ENDIAN);
        offset += 1;
        proto_tree_add_item (tree, hf_ieee80211_ff_hwmp_targ_count, tvb, offset, 1, ENC_LITTLE_ENDIAN);
        targs = tvb_get_guint8 (tvb, offset);
        offset += 1;
        for (i = 0; i < targs; i++) {
          guint8 flags = tvb_get_guint8(tvb, offset);

          proto_tree_add_item (tree, hf_ieee80211_ff_hwmp_targ_flags, tvb, offset, 1, ENC_LITTLE_ENDIAN);
          offset += 1;
          proto_tree_add_item (tree, hf_ieee80211_ff_hwmp_targ_sta, tvb, offset, 6, ENC_NA);
          offset += 6;
          proto_tree_add_item (tree, hf_ieee80211_ff_hwmp_targ_sn, tvb, offset, 4, ENC_LITTLE_ENDIAN);
          offset += 4;
          if (flags & (1<<6)) {
            proto_tree_add_item (tree, hf_ieee80211_ff_hwmp_targ_ext, tvb, offset, 6, ENC_NA);
            offset += 6;
          }
          offset += add_fixed_field(tree, tvb, pinfo, offset, FIELD_REASON_CODE);
        }
        break;
      }

    case TAG_RANN:
      {
        offset += 2;
        proto_tree_add_item (tree, hf_ieee80211_rann_flags, tvb, offset, 1, ENC_LITTLE_ENDIAN);
        offset += 1;
        proto_tree_add_item (tree, hf_ieee80211_ff_hwmp_hopcount, tvb, offset, 1, ENC_LITTLE_ENDIAN);
        offset += 1;
        proto_tree_add_item (tree, hf_ieee80211_ff_hwmp_ttl, tvb, offset, 1, ENC_LITTLE_ENDIAN);
        offset += 1;
        proto_tree_add_item (tree, hf_ieee80211_rann_root_sta, tvb, offset, 6, ENC_NA);
        offset += 6;
        proto_tree_add_item (tree, hf_ieee80211_rann_sn, tvb, offset, 4, ENC_LITTLE_ENDIAN);
        offset += 4;
        proto_tree_add_item (tree, hf_ieee80211_rann_interval, tvb, offset, 4, ENC_LITTLE_ENDIAN);
        offset += 4;
        proto_tree_add_item (tree, hf_ieee80211_ff_hwmp_metric, tvb, offset, 4, ENC_LITTLE_ENDIAN);
        offset += 4;
        break;
      }

    case TAG_MESH_CHANNEL_SWITCH: /* Mesh Channel Switch Parameters (118) */
      {
        proto_item *item;
        proto_tree *subtree;
        if (tag_len != 6)
        {
          expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length, "Tag Length %u wrong, must be = 6", tag_len);
            break;
        }
        offset += 2;

        proto_tree_add_item(tree, hf_ieee80211_mesh_channel_switch_ttl, tvb, offset, 1, ENC_LITTLE_ENDIAN);
        proto_item_append_text(ti, " TTL: %d", tvb_get_guint8(tvb, offset));
        offset += 1;

        item = proto_tree_add_item(tree, hf_ieee80211_mesh_channel_switch_flag, tvb, offset, 1, ENC_LITTLE_ENDIAN);
        subtree = proto_item_add_subtree(item, ett_mesh_chswitch_flag_tree);
        proto_tree_add_item(subtree, hf_ieee80211_mesh_chswitch_flag_initiator, tvb, offset, 1, ENC_LITTLE_ENDIAN);
        proto_tree_add_item(subtree, hf_ieee80211_mesh_chswitch_flag_txrestrict, tvb, offset, 1, ENC_LITTLE_ENDIAN);
        offset += 1;

        proto_tree_add_item(tree, hf_ieee80211_mesh_channel_switch_reason_code, tvb, offset, 2, ENC_LITTLE_ENDIAN);
        offset += 2;

        proto_tree_add_item(tree, hf_ieee80211_mesh_channel_switch_precedence_value, tvb, offset, 2, ENC_LITTLE_ENDIAN);
        offset += 2;
        break;
     }

    case TAG_INTERWORKING:
      dissect_interworking(pinfo, tree, ti, tvb, offset);
      break;
    case TAG_ADVERTISEMENT_PROTOCOL:
    {
      dissect_advertisement_protocol(pinfo, tree, tvb, offset, NULL);
      break;
    }
    case TAG_QOS_MAP_SET:
      dissect_qos_map_set(pinfo, tree, ti, tvb, offset);
      break;
    case TAG_ROAMING_CONSORTIUM:
      dissect_roaming_consortium(pinfo, tree, ti, tvb, offset);
      break;
    case TAG_AP_CHANNEL_REPORT: /* 7.3.2.36 AP Channel Report element */
      dissect_ap_channel_report(tvb, pinfo, tree, offset + 2, tag_len, ti_len, tag_end, ti);
      break;
    case TAG_NEIGHBOR_REPORT:
      dissect_neighbor_report(tvb, pinfo, tree, offset + 2, tag_len, ti_len, tag_end, ti);
      break;

    case TAG_EXTENDED_CHANNEL_SWITCH_ANNOUNCEMENT:
    {
      if (tag_len != 4)
      {
        expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length, "Tag Length %u wrong, must be = 4", tag_len);
        break;
      }

      offset += 2;

      offset += add_fixed_field(tree, tvb, pinfo, offset, FIELD_EXTENDED_CHANNEL_SWITCH_ANNOUNCEMENT);

      break;
    }
    case TAG_SUPPORTED_OPERATING_CLASSES:
    {
      guint i;

      if (tag_len < 2) {
        expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length, "Tag Length %u wrong, must be >= 3", tag_len);
        break;
      } else if (tag_len > 32) {
        expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length, "Tag Length %u wrong, must be < 32", tag_len);
        break;
      }

      offset += 2;

      proto_tree_add_item(tree, hf_ieee80211_tag_supported_ope_classes_current, tvb, offset, 1, ENC_NA);

      offset += 1;
      /* Partially taken from the ssid section */
      tag_data_ptr = tvb_get_ptr (tvb, offset, tag_len);
      for (i = 0, n = 0; (i < tag_len) && (n < SHORT_STR); i++) {
        ret = g_snprintf (print_buff + n, SHORT_STR - n, (i == tag_len-1)?"%d":"%d, ", tag_data_ptr[i]);
        if (ret >= SHORT_STR - n) {
          /* ret >= <buf_size> means buffer truncated  */
          break;
        }
        n += ret;
      }
      proto_tree_add_string (tree, hf_ieee80211_tag_supported_ope_classes_alternate, tvb, offset, tag_len, print_buff);

      break;
    }
    case TAG_RELAY_CAPABILITIES:
    {
      add_tag_relay_capabilities(pinfo, ti_len, tag_len, tree, tvb, &offset);
      break;
    }
    case TAG_DMG_BSS_PRAMTER_CHANGE:
    {
      gboolean size;
      if (tag_len != 7)
      {
        expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length, "Tag Length %u wrong, must be = 7", tag_len);
        break;
      }
      offset += 2;
      size = (tvb_get_guint8(tvb, offset) & 0x02) >> 1;
      proto_tree_add_item(tree, hf_ieee80211_tag_move, tvb, offset, 1, ENC_NA);
      proto_tree_add_item(tree, hf_ieee80211_tag_size, tvb, offset, 1, ENC_NA);
      offset += 1;
      proto_tree_add_item(tree, hf_ieee80211_tag_tbtt_offset, tvb, offset, 4, ENC_LITTLE_ENDIAN);
      offset += 4;
      if(size == TRUE) { /* if size bit is 0, the field is reserved. */
        proto_tree_add_item(tree, hf_ieee80211_tag_bi_duration, tvb, offset, 2, ENC_LITTLE_ENDIAN);
      }
      offset += 2;
      break;
    }
    case TAG_DMG_CAPABILITIES:
    {
      if (tag_len != 17)
      {
        expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length, "Tag Length %u wrong, must be = 17", tag_len);
        break;
      }
      offset += 2;
      proto_tree_add_item(tree, hf_ieee80211_tag_dmg_capa_sta_addr, tvb, offset, 6, ENC_NA);
      offset += 6;
      proto_tree_add_item(tree, hf_ieee80211_tag_dmg_capa_aid, tvb, offset, 1, ENC_NA);
      offset += 1;
      proto_tree_add_item(tree, hf_ieee80211_tag_reverse_direction, tvb, offset, 3, ENC_LITTLE_ENDIAN);
      proto_tree_add_item(tree, hf_ieee80211_tag_hlts, tvb, offset, 3, ENC_LITTLE_ENDIAN);
      proto_tree_add_item(tree, hf_ieee80211_tag_tpc, tvb, offset, 3, ENC_LITTLE_ENDIAN);
      proto_tree_add_item(tree, hf_ieee80211_tag_spsh, tvb, offset, 3, ENC_LITTLE_ENDIAN);
      proto_tree_add_item(tree, hf_ieee80211_tag_rx_antenna, tvb, offset, 3, ENC_LITTLE_ENDIAN);
      proto_tree_add_item(tree, hf_ieee80211_tag_fast_link, tvb, offset, 3, ENC_LITTLE_ENDIAN);
      proto_tree_add_item(tree, hf_ieee80211_tag_num_sectors, tvb, offset, 3, ENC_LITTLE_ENDIAN);
      proto_tree_add_item(tree, hf_ieee80211_tag_rxss_length, tvb, offset, 3, ENC_LITTLE_ENDIAN);
      proto_tree_add_item(tree, hf_ieee80211_tag_reciprocity, tvb, offset, 3, ENC_LITTLE_ENDIAN);
      proto_tree_add_item(tree, hf_ieee80211_tag_max_ampdu_exp, tvb, offset, 3, ENC_LITTLE_ENDIAN);
      offset += 3;
      proto_tree_add_item(tree, hf_ieee80211_tag_min_mpdu_sapcing, tvb, offset, 3, ENC_LITTLE_ENDIAN);
      proto_tree_add_item(tree, hf_ieee80211_tag_ba_flow_control, tvb, offset, 3, ENC_LITTLE_ENDIAN);
      proto_tree_add_item(tree, hf_ieee80211_tag_max_sc_rx_mcs, tvb, offset, 3, ENC_LITTLE_ENDIAN);
      proto_tree_add_item(tree, hf_ieee80211_tag_max_ofdm_rx_mcs, tvb, offset, 3, ENC_LITTLE_ENDIAN);
      proto_tree_add_item(tree, hf_ieee80211_tag_max_sc_tx_mcs, tvb, offset, 3, ENC_LITTLE_ENDIAN);
      proto_tree_add_item(tree, hf_ieee80211_tag_max_ofdm_tx_mcs, tvb, offset, 3, ENC_LITTLE_ENDIAN);
      offset += 3;
      proto_tree_add_item(tree, hf_ieee80211_tag_low_power_supported, tvb, offset, 2, ENC_LITTLE_ENDIAN);
      proto_tree_add_item(tree, hf_ieee80211_tag_code_rate, tvb, offset, 2, ENC_LITTLE_ENDIAN);
      proto_tree_add_item(tree, hf_ieee80211_tag_dtp, tvb, offset, 2, ENC_LITTLE_ENDIAN);
      proto_tree_add_item(tree, hf_ieee80211_tag_appdu_supp, tvb, offset, 2, ENC_LITTLE_ENDIAN);
      proto_tree_add_item(tree, hf_ieee80211_tag_heartbeat, tvb, offset, 2, ENC_LITTLE_ENDIAN);
      proto_tree_add_item(tree, hf_ieee80211_tag_other_aid, tvb, offset, 2, ENC_LITTLE_ENDIAN);
      proto_tree_add_item(tree, hf_ieee80211_tag_pattern_recip, tvb, offset, 2, ENC_LITTLE_ENDIAN);
      proto_tree_add_item(tree, hf_ieee80211_tag_heartbeat_elapsed, tvb, offset, 2, ENC_LITTLE_ENDIAN);
      proto_tree_add_item(tree, hf_ieee80211_tag_grant_ack_supp, tvb, offset, 2, ENC_LITTLE_ENDIAN);
      proto_tree_add_item(tree, hf_ieee80211_tag_RXSSTxRate_supp, tvb, offset, 2, ENC_LITTLE_ENDIAN);
      offset += 2;
      proto_tree_add_item(tree, hf_ieee80211_tag_pcp_tddti, tvb, offset, 2, ENC_LITTLE_ENDIAN);
      proto_tree_add_item(tree, hf_ieee80211_tag_pcp_PSA, tvb, offset, 2, ENC_LITTLE_ENDIAN);
      proto_tree_add_item(tree, hf_ieee80211_tag_pcp_handover, tvb, offset, 2, ENC_LITTLE_ENDIAN);
      proto_tree_add_item(tree, hf_ieee80211_tag_pcp_max_assoc, tvb, offset, 2, ENC_LITTLE_ENDIAN);
      proto_tree_add_item(tree, hf_ieee80211_tag_pcp_power_src, tvb, offset, 2, ENC_LITTLE_ENDIAN);
      proto_tree_add_item(tree, hf_ieee80211_tag_pcp_decenter, tvb, offset, 2, ENC_LITTLE_ENDIAN);
      proto_tree_add_item(tree, hf_ieee80211_tag_pcp_forwarding, tvb, offset, 2, ENC_LITTLE_ENDIAN);
      proto_tree_add_item(tree, hf_ieee80211_tag_pcp_center, tvb, offset, 2, ENC_LITTLE_ENDIAN);
      offset += 2;
      break;
    }
    case TAG_DMG_OPERATION:
    {
      if (tag_len != 10)
      {
        expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length, "Tag Length %u wrong, must be = 10", tag_len);
        break;
      }
      offset += 2;
      proto_tree_add_item(tree, hf_ieee80211_tag_pcp_tddti, tvb, offset, 1, ENC_NA);
      proto_tree_add_item(tree, hf_ieee80211_tag_pcp_PSA, tvb, offset, 1, ENC_NA);
      proto_tree_add_item(tree, hf_ieee80211_tag_pcp_handover, tvb, offset, 1, ENC_NA);
      offset += 2;
      proto_tree_add_item(tree, hf_ieee80211_tag_PSRSI, tvb, offset, 1, ENC_NA);
      offset += 1;
      proto_tree_add_item(tree, hf_ieee80211_tag_min_BHI_duration, tvb, offset, 2, ENC_LITTLE_ENDIAN);
      offset += 2;
      proto_tree_add_item(tree, hf_ieee80211_tag_brdct_sta_info_dur, tvb, offset, 1, ENC_NA);
      offset += 1;
      proto_tree_add_item(tree, hf_ieee80211_tag_assoc_resp_confirm_time, tvb, offset, 1, ENC_NA);
      offset += 1;
      proto_tree_add_item(tree, hf_ieee80211_tag_min_pp_duration, tvb, offset, 1, ENC_NA);
      offset += 1;
      proto_tree_add_item(tree, hf_ieee80211_tag_SP_idle_timeout, tvb, offset, 1, ENC_NA);
      offset += 1;
      proto_tree_add_item(tree, hf_ieee80211_tag_max_lost_beacons, tvb, offset, 1, ENC_NA);
      offset += 1;
      break;
    }
    case TAG_ANTENNA_SECTOR_ID:
    {
      if (tag_len != 4)
      {
        expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length, "Tag Length %u wrong, must be = 4", tag_len);
        break;
      }
      offset += 2;
      proto_tree_add_item(tree, hf_ieee80211_tag_type, tvb, offset, 4, ENC_LITTLE_ENDIAN);
      proto_tree_add_item(tree, hf_ieee80211_tag_tap1, tvb, offset, 4, ENC_LITTLE_ENDIAN);
      proto_tree_add_item(tree, hf_ieee80211_tag_state1, tvb, offset, 4, ENC_LITTLE_ENDIAN);
      proto_tree_add_item(tree, hf_ieee80211_tag_tap2, tvb, offset, 4, ENC_LITTLE_ENDIAN);
      proto_tree_add_item(tree, hf_ieee80211_tag_state2, tvb, offset, 4, ENC_LITTLE_ENDIAN);
      offset += 4;
      break;
    }
    case TAG_EXTENDED_SCHEDULE:
    {
      guint32 i = 0;
      gboolean isGrant;
      proto_tree * alloc_tree;
      if ((tag_len%15) != 0)
      {
        expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length, "Tag Length %u wrong, must be N*15 where 0<=N<=17", tag_len);
        break;
      }
      offset += 2;
      isGrant = ((ftype==CTRL_GRANT)||(ftype==CTRL_GRANT_ACK));
      p_add_proto_data(wmem_file_scope(), pinfo, proto_wlan, IS_CTRL_GRANT_OR_GRANT_ACK_KEY, &isGrant);
      for(i=0; i < tag_len; i+=15) {
        alloc_tree = proto_tree_add_subtree_format(tree, tvb, offset, 15, ett_allocation_tree, NULL, "Allocation %d", i/15);
        proto_tree_add_item(alloc_tree, hf_ieee80211_tag_allocation_id, tvb, offset, 2, ENC_LITTLE_ENDIAN);
        proto_tree_add_item(alloc_tree, hf_ieee80211_tag_allocation_type, tvb, offset, 2, ENC_LITTLE_ENDIAN);
        proto_tree_add_item(alloc_tree, hf_ieee80211_tag_pseudo_static, tvb, offset, 2, ENC_LITTLE_ENDIAN);
        proto_tree_add_item(alloc_tree, hf_ieee80211_tag_truncatable, tvb, offset, 2, ENC_LITTLE_ENDIAN);
        proto_tree_add_item(alloc_tree, hf_ieee80211_tag_extendable, tvb, offset, 2, ENC_LITTLE_ENDIAN);
        proto_tree_add_item(alloc_tree, hf_ieee80211_tag_pcp_active, tvb, offset, 2, ENC_LITTLE_ENDIAN);
        proto_tree_add_item(alloc_tree, hf_ieee80211_tag_lp_sc_used, tvb, offset, 2, ENC_LITTLE_ENDIAN);
        offset += 2;
        offset += add_fixed_field(alloc_tree, tvb, pinfo, offset, FIELD_BEAMFORMING_CTRL);
        proto_tree_add_item(alloc_tree, hf_ieee80211_tag_src_aid, tvb, offset, 1, ENC_NA);
        offset += 1;
        proto_tree_add_item(alloc_tree, hf_ieee80211_tag_dest_aid, tvb, offset, 1, ENC_NA);
        offset += 1;
        proto_tree_add_item(alloc_tree, hf_ieee80211_tag_alloc_start, tvb, offset, 4, ENC_LITTLE_ENDIAN);
        offset += 4;
        proto_tree_add_item(alloc_tree, hf_ieee80211_tag_alloc_block_duration, tvb, offset, 2, ENC_LITTLE_ENDIAN);
        offset += 2;
        proto_tree_add_item(alloc_tree, hf_ieee80211_tag_num_blocks, tvb, offset, 1, ENC_NA);
        offset += 1;
        proto_tree_add_item(alloc_tree, hf_ieee80211_tag_alloc_block_period, tvb, offset, 2, ENC_LITTLE_ENDIAN);
        offset += 2;
      }
      break;
    }
    case TAG_STA_AVAILABILITY:
    {
      guint32 i = 0;
      proto_tree * sta_info_tree;
      if ((tag_len%2) != 0)
      {
        expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length, "Tag Length %u wrong, must be N*2 where N>=0", tag_len);
        break;
      }
      offset += 2;
      for(i=0; i < tag_len; i+=2) {
        sta_info_tree = proto_tree_add_subtree_format(tree, tvb, offset, 2, ett_sta_info, NULL, "STA Info %d", i/2);
        proto_tree_add_item(sta_info_tree, hf_ieee80211_tag_aid, tvb, offset, 2, ENC_LITTLE_ENDIAN);
        proto_tree_add_item(sta_info_tree, hf_ieee80211_tag_cbap, tvb, offset, 2, ENC_LITTLE_ENDIAN);
        proto_tree_add_item(sta_info_tree, hf_ieee80211_tag_pp_avail, tvb, offset, 2, ENC_LITTLE_ENDIAN);
        offset += 2;
      }
      break;
    }
    case TAG_NEXT_DMG_ATI:
    {
      if (tag_len != 6)
      {
        expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length, "Tag Length %u wrong, must be = 6", tag_len);
        break;
      }
      offset += 2;
      proto_tree_add_item(tree, hf_ieee80211_tag_next_ati_start_time, tvb, offset, 4, ENC_LITTLE_ENDIAN);
      offset += 4;
      proto_tree_add_item(tree, hf_ieee80211_tag_next_ati_duration, tvb, offset, 2, ENC_LITTLE_ENDIAN);
      offset += 2;
      break;
    }
    case TAG_NEXTPCP_LIST:
    {
      guint32 i = 0;
      if (tag_len < 1)
      {
        expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length, "Tag Length %u wrong, must be at least 1", tag_len);
        break;
      }
      offset += 2;
      proto_tree_add_item(tree, hf_ieee80211_tag_nextpcp_token, tvb, offset, 1, ENC_NA);
      offset += 1;
      for(i=0; i < tag_len-1; i+=1) {
        proto_tree_add_item(tree, hf_ieee80211_tag_nextpcp_list, tvb, offset, 1, ENC_NA);
        offset += 1;
      }
      break;
    }
    case TAG_PCP_HANDOVER:
    {
      if (tag_len != 13)
      {
        expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length, "Tag Length %u wrong, must be 13", tag_len);
        break;
      }
      offset += 2;
      proto_tree_add_item(tree, hf_ieee80211_tag_old_bssid, tvb, offset, 6, ENC_NA);
      offset += 6;
      proto_tree_add_item(tree, hf_ieee80211_tag_new_pcp_addr, tvb, offset, 6, ENC_NA);
      offset += 6;
      proto_tree_add_item(tree, hf_ieee80211_tag_reamaining_BI, tvb, offset, 1, ENC_NA);
      offset += 1;
      break;
    }
    case TAG_BEAMLINK_MAINTAINCE:
    {
      if (tag_len != 1)
      {
        expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length, "Tag Length %u wrong, must be 1", tag_len);
        break;
      }
      offset += 2;
      offset += add_ff_beamformed_link(tree, tvb, pinfo, offset);
      break;
    }
    case TAG_QUIET_PERIOD_RES:
    {
      if (tag_len != 10)
      {
        expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length, "Tag Length %u wrong, must be 10", tag_len);
        break;
      }
      offset += 2;
      proto_tree_add_item(tree, hf_ieee80211_tag_request_token, tvb, offset, 2, ENC_LITTLE_ENDIAN);
      offset += 2;
      proto_tree_add_item(tree, hf_ieee80211_tag_bssid, tvb, offset, 6, ENC_NA);
      offset += 6;
      offset += add_ff_sta_address(tree, tvb, pinfo, offset);
      break;
    }
    case TAG_RELAY_TRANSFER_PARAM:
    {
      if (tag_len != 8)
      {
        expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length, "Tag Length %u wrong, must be 8", tag_len);
        break;
      }
      offset += 2;
      proto_tree_add_item(tree, hf_ieee80211_tag_duplex_relay, tvb, offset, 1, ENC_NA);
      proto_tree_add_item(tree, hf_ieee80211_tag_cooperation_relay, tvb, offset, 1, ENC_NA);
      proto_tree_add_item(tree, hf_ieee80211_tag_tx_mode, tvb, offset, 1, ENC_NA);
      proto_tree_add_item(tree, hf_ieee80211_tag_link_change_interval, tvb, offset+1, 1, ENC_NA);
      proto_tree_add_item(tree, hf_ieee80211_tag_data_sensing_time, tvb, offset+2, 1, ENC_NA);
      proto_tree_add_item(tree, hf_ieee80211_tag_first_period, tvb, offset+3, 2, ENC_LITTLE_ENDIAN);
      proto_tree_add_item(tree, hf_ieee80211_tag_second_period, tvb, offset+5, 2, ENC_LITTLE_ENDIAN);
      offset += 8;
      break;
    }
    case TAG_DMG_BEAM_REFINEMENT:
    {
      if (tag_len != 5)
      {
        expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length, "Tag Length %u wrong, must be 5", tag_len);
        break;
      }
      offset += 2;
      proto_tree_add_item(tree, hf_ieee80211_tag_initiator, tvb, offset, 2, ENC_LITTLE_ENDIAN);
      proto_tree_add_item(tree, hf_ieee80211_tag_tx_train_res, tvb, offset, 2, ENC_LITTLE_ENDIAN);
      proto_tree_add_item(tree, hf_ieee80211_tag_rx_train_res, tvb, offset, 2, ENC_LITTLE_ENDIAN);
      proto_tree_add_item(tree, hf_ieee80211_tag_tx_trn_ok, tvb, offset, 2, ENC_LITTLE_ENDIAN);
      proto_tree_add_item(tree, hf_ieee80211_tag_txss_fbck_req, tvb, offset, 2, ENC_LITTLE_ENDIAN);
      proto_tree_add_item(tree, hf_ieee80211_tag_bs_fbck, tvb, offset, 2, ENC_LITTLE_ENDIAN);
      proto_tree_add_item(tree, hf_ieee80211_tag_bs_fbck_antenna_id, tvb, offset, 2, ENC_LITTLE_ENDIAN);
      proto_tree_add_item(tree, hf_ieee80211_tag_snr_requested, tvb, offset, 2, ENC_LITTLE_ENDIAN);
      proto_tree_add_item(tree, hf_ieee80211_tag_channel_measurement_requested, tvb, offset, 2, ENC_LITTLE_ENDIAN);

      /*
       * This is confusing.
       * We don't support bitfields in fields bigger than 32 bits, and none
       * of the bitfields boundaries line up with byte boundaries, so we have
       * to slice this 40-bit field into overlapping pieces.
       *
       * The preceding piece had 16 bits, but the uppermost bit is the low-
       * order bit of the 2-bit "Number of Taps Requested" bitfield, so
       * we've only dissected the low-order 15 bits above.
       *
       * So we skip the first byte of those 16 bits, and fetch a 4-byte field
       * that starts with the second byte of those 16 bits.
       */
      offset += 1;
      proto_tree_add_item(tree, hf_ieee80211_tag_number_of_taps_requested, tvb, offset, 4, ENC_LITTLE_ENDIAN);
      proto_tree_add_item(tree, hf_ieee80211_tag_sector_id_order_req, tvb, offset, 4, ENC_LITTLE_ENDIAN);
      proto_tree_add_item(tree, hf_ieee80211_tag_snr_present, tvb, offset, 4, ENC_LITTLE_ENDIAN);
      proto_tree_add_item(tree, hf_ieee80211_tag_channel_measurement_present, tvb, offset, 4, ENC_LITTLE_ENDIAN);
      proto_tree_add_item(tree, hf_ieee80211_tag_tap_delay_present, tvb, offset, 4, ENC_LITTLE_ENDIAN);
      proto_tree_add_item(tree, hf_ieee80211_tag_number_of_taps_present, tvb, offset, 4, ENC_LITTLE_ENDIAN);
      proto_tree_add_item(tree, hf_ieee80211_tag_number_of_measurement, tvb, offset, 4, ENC_LITTLE_ENDIAN);
      proto_tree_add_item(tree, hf_ieee80211_tag_sector_id_order_present, tvb, offset, 4, ENC_LITTLE_ENDIAN);
      proto_tree_add_item(tree, hf_ieee80211_tag_number_of_beams, tvb, offset, 4, ENC_LITTLE_ENDIAN);
      proto_tree_add_item(tree, hf_ieee80211_tag_mid_extension, tvb, offset, 4, ENC_LITTLE_ENDIAN);
      proto_tree_add_item(tree, hf_ieee80211_tag_capability_request, tvb, offset, 4, ENC_LITTLE_ENDIAN);
      offset += 4;
      break;
    }
    case TAG_WAKEUP_SCHEDULE_AD:
    {
      if (tag_len != 8)
      {
        expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length, "Tag Length %u wrong, must be 8", tag_len);
        break;
      }
      offset += 2;
      proto_tree_add_item(tree, hf_ieee80211_tag_bi_start_time, tvb, offset, 4, ENC_LITTLE_ENDIAN);
      offset += 4;
      proto_tree_add_item(tree, hf_ieee80211_tag_sleep_cycle, tvb, offset, 2, ENC_LITTLE_ENDIAN);
      offset += 2;
      proto_tree_add_item(tree, hf_ieee80211_tag_num_awake_bis, tvb, offset, 2, ENC_LITTLE_ENDIAN);
      offset += 2;
      break;
    }
    case TAG_DMG_TSPEC:
    {
      gboolean isGrant;
      int num_constraints;
      if (tag_len < 14)
      {
        expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length, "Tag Length %u wrong, must be at least 14", tag_len);
        break;
      }
      offset += 2;
      proto_tree_add_item(tree, hf_ieee80211_tag_tspec_allocation_id, tvb, offset, 3, ENC_LITTLE_ENDIAN);
      proto_tree_add_item(tree, hf_ieee80211_tag_tspec_allocation_type, tvb, offset, 3, ENC_LITTLE_ENDIAN);
      proto_tree_add_item(tree, hf_ieee80211_tag_tspec_allocation_format, tvb, offset, 3, ENC_LITTLE_ENDIAN);
      proto_tree_add_item(tree, hf_ieee80211_tag_tspec_pseudo_static, tvb, offset, 3, ENC_LITTLE_ENDIAN);
      proto_tree_add_item(tree, hf_ieee80211_tag_tspec_truncatable, tvb, offset, 3, ENC_LITTLE_ENDIAN);
      proto_tree_add_item(tree, hf_ieee80211_tag_tspec_extendable, tvb, offset, 3, ENC_LITTLE_ENDIAN);
      proto_tree_add_item(tree, hf_ieee80211_tag_tspec_lp_sc_used, tvb, offset, 3, ENC_LITTLE_ENDIAN);
      proto_tree_add_item(tree, hf_ieee80211_tag_tspec_up, tvb, offset, 3, ENC_LITTLE_ENDIAN);
      proto_tree_add_item(tree, hf_ieee80211_tag_tspec_dest_aid, tvb, offset, 3, ENC_LITTLE_ENDIAN);
      offset += 3;
      isGrant = ((ftype==CTRL_GRANT)||(ftype==CTRL_GRANT_ACK));
      p_add_proto_data(wmem_file_scope(), pinfo, proto_wlan, IS_CTRL_GRANT_OR_GRANT_ACK_KEY, &isGrant);
      offset += add_fixed_field(tree, tvb, pinfo, 2, FIELD_BEAMFORMING_CTRL);
      proto_tree_add_item(tree, hf_ieee80211_tag_tspec_allocation_period, tvb, offset, 2, ENC_LITTLE_ENDIAN);
      offset += 2;
      proto_tree_add_item(tree, hf_ieee80211_tag_tspec_min_allocation, tvb, offset, 2, ENC_LITTLE_ENDIAN);
      offset += 2;
      proto_tree_add_item(tree, hf_ieee80211_tag_tspec_max_allocation, tvb, offset, 2, ENC_LITTLE_ENDIAN);
      offset += 2;
      proto_tree_add_item(tree, hf_ieee80211_tag_tspec_min_duration, tvb, offset, 2, ENC_LITTLE_ENDIAN);
      offset += 2;
      num_constraints = tvb_get_guint8(tvb, offset);
      proto_tree_add_item(tree, hf_ieee80211_tag_tspec_num_of_constraints, tvb, offset, 1, ENC_NA);
      offset += 1;
      while(num_constraints > 0) {
        proto_tree_add_item(tree, hf_ieee80211_tag_tspec_tsconst_start_time, tvb, offset, 4, ENC_LITTLE_ENDIAN);
        offset += 4;
        proto_tree_add_item(tree, hf_ieee80211_tag_tspec_tsconst_duration, tvb, offset, 2, ENC_LITTLE_ENDIAN);
        offset += 2;
        proto_tree_add_item(tree, hf_ieee80211_tag_tspec_tsconst_period, tvb, offset, 2, ENC_LITTLE_ENDIAN);
        offset += 2;
        proto_tree_add_item(tree, hf_ieee80211_tag_tspec_tsconst_interferer_mac, tvb, offset, 2, ENC_NA);
        offset += 6;
        num_constraints--;
      }
      break;
    }
    case TAG_CHANNEL_MEASURMENT_FB:
    {
      int num_measurement;
      if (tag_len%5 != 0)
      {
        expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length, "Tag Length %u wrong, must be multiple of 5", tag_len);
        break;
      }
      num_measurement = tvb_get_guint8(tvb, offset+1);
      offset += 2;
      while(num_measurement > 0) {
        proto_tree_add_item(tree, hf_ieee80211_ff_snr, tvb, offset, 1, ENC_NA);
        offset += 1;
        proto_tree_add_item(tree, hf_ieee80211_tag_channel_measurement_feedback_realtive_I, tvb, offset, 1, ENC_NA);
        offset += 1;
        proto_tree_add_item(tree, hf_ieee80211_tag_channel_measurement_feedback_realtive_Q, tvb, offset, 1, ENC_NA);
        offset += 1;
        proto_tree_add_item(tree, hf_ieee80211_tag_channel_measurement_feedback_tap_delay, tvb, offset, 1, ENC_NA);
        offset += 1;
        proto_tree_add_item(tree, hf_ieee80211_tag_channel_measurement_feedback_sector_id, tvb, offset, 1, ENC_NA);
        proto_tree_add_item(tree, hf_ieee80211_tag_channel_measurement_feedback_antenna_id, tvb, offset, 1, ENC_NA);
        offset += 1;
        num_measurement--;
      }
      break;
    }
    case TAG_AWAKE_WINDOW:
    {
      if (tag_len != 2)
      {
        expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length, "Tag Length %u wrong, must be 2", tag_len);
        break;
      }
      offset += 2;
      proto_tree_add_item(tree, hf_ieee80211_tag_awake_window, tvb, offset, 2, ENC_LITTLE_ENDIAN);
      offset += 2;
      break;
    }
    case TAG_ADDBA_EXT:
    {
      if (tag_len != 1)
      {
        expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length, "Tag Length %u wrong, must be 1", tag_len);
        break;
      }
      offset += 2;
      proto_tree_add_item(tree, hf_ieee80211_tag_addba_ext_no_frag, tvb, offset, 1, ENC_NA);
      offset += 1;
      break;
    }
    case TAG_MULTI_BAND:
    {
      gboolean chiper_present, addr_present;
      if (tag_len < 22)
      {
        expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length, "Tag Length %u wrong, must be at least 22", tag_len);
        break;
      }
      offset += 2;
      chiper_present = (tvb_get_letohs(tvb, offset) & 0x08) >> 3;
      addr_present = (tvb_get_letohs(tvb, offset) & 0x10) >> 4;
      proto_tree_add_item(tree, hf_ieee80211_tag_multi_band_ctrl_sta_role, tvb, offset, 1, ENC_NA);
      proto_tree_add_item(tree, hf_ieee80211_tag_multi_band_ctrl_addr_present, tvb, offset, 1, ENC_NA);
      proto_tree_add_item(tree, hf_ieee80211_tag_multi_band_ctrl_cipher_present, tvb, offset, 1, ENC_NA);
      offset += 1;
      offset += add_fixed_field(tree, tvb, pinfo, 1, FIELD_BAND_ID);
      proto_tree_add_item(tree, hf_ieee80211_tag_multi_band_oper_class, tvb, offset, 1, ENC_NA);
      offset += 1;
      proto_tree_add_item(tree, hf_ieee80211_tag_multi_band_channel_number, tvb, offset, 1, ENC_NA);
      offset += 1;
      proto_tree_add_item(tree, hf_ieee80211_tag_bssid, tvb, offset, 6, ENC_NA);
      offset += 6;
      offset += add_fixed_field(tree, tvb, pinfo, 2, FIELD_BEACON_INTERVAL);
      proto_tree_add_item(tree, hf_ieee80211_tag_multi_band_tsf_offset, tvb, offset, 8, ENC_LITTLE_ENDIAN);
      offset += 8;
      proto_tree_add_item(tree, hf_ieee80211_tag_multi_band_conn_ap, tvb, offset, 1, ENC_NA);
      proto_tree_add_item(tree, hf_ieee80211_tag_multi_band_conn_pcp, tvb, offset, 1, ENC_NA);
      proto_tree_add_item(tree, hf_ieee80211_tag_multi_band_conn_dls, tvb, offset, 1, ENC_NA);
      proto_tree_add_item(tree, hf_ieee80211_tag_multi_band_conn_tdls, tvb, offset, 1, ENC_NA);
      proto_tree_add_item(tree, hf_ieee80211_tag_multi_band_conn_ibss, tvb, offset, 1, ENC_NA);
      offset += 1;
      proto_tree_add_item(tree, hf_ieee80211_tag_multi_band_fst_timeout, tvb, offset, 1, ENC_NA);
      offset += 1;
      if(addr_present)
      {
        proto_tree_add_item(tree, hf_ieee80211_tag_multi_band_sta_mac, tvb, offset, 6, ENC_NA);
        offset += 6;
      }
      if(chiper_present)
      {
        proto_item *rsn_pcs_count, *rsn_pcs_item, *rsn_sub_pcs_item;
        proto_tree *rsn_pcs_tree, *rsn_sub_pcs_tree;
        gint ii;
        guint16     pcs_count;
        rsn_pcs_count = proto_tree_add_item(tree, hf_ieee80211_rsn_pcs_count, tvb, offset, 2, ENC_LITTLE_ENDIAN);
        pcs_count = tvb_get_letohs(tvb, offset);
        offset += 2;

        if (offset + (pcs_count * 4) > tag_end)
        {
          expert_add_info_format(pinfo, rsn_pcs_count, &ei_ieee80211_rsn_pcs_count,
          "Pairwise Cipher Suite Count too large, 4*%u > %d", pcs_count, tag_end - offset);
          pcs_count = (tag_end - offset) / 4;
        }

        rsn_pcs_item = proto_tree_add_item(tree, hf_ieee80211_rsn_pcs_list, tvb, offset, pcs_count * 4, ENC_NA);
        rsn_pcs_tree = proto_item_add_subtree(rsn_pcs_item, ett_rsn_pcs_tree);
        for (ii = 0; ii < pcs_count; ii++)
        {
          rsn_sub_pcs_item = proto_tree_add_item(rsn_pcs_tree, hf_ieee80211_rsn_pcs, tvb, offset, 4, ENC_BIG_ENDIAN);
          rsn_sub_pcs_tree = proto_item_add_subtree(rsn_sub_pcs_item, ett_rsn_sub_pcs_tree);
          proto_tree_add_item(rsn_sub_pcs_tree, hf_ieee80211_rsn_pcs_oui, tvb, offset, 3, ENC_BIG_ENDIAN);

          /* Check if OUI is 00:0F:AC (ieee80211) */
          if (tvb_get_ntoh24(tvb, offset) == OUI_RSN)
          {
            proto_tree_add_item(rsn_sub_pcs_tree, hf_ieee80211_rsn_pcs_80211_type, tvb, offset+3, 1, ENC_LITTLE_ENDIAN);
            proto_item_append_text(rsn_pcs_item, " %s", rsn_pcs_return(tvb_get_ntohl(tvb, offset)));
          } else {
            proto_tree_add_item(rsn_sub_pcs_tree, hf_ieee80211_rsn_pcs_type, tvb, offset+3, 1, ENC_LITTLE_ENDIAN);
          }
          offset += 4;
        }
      }
      break;
    }
    case TAG_DMG_LINK_MARGIN:
    {
      if (tag_len != 8)
      {
        expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length, "Tag Length %u wrong, must be 8", tag_len);
        break;
      }
      offset += 2;
      proto_tree_add_item(tree, hf_ieee80211_tag_activity, tvb, offset, 1, ENC_NA);
      offset += 1;
      proto_tree_add_item(tree, hf_ieee80211_tag_dmg_link_adapt_mcs, tvb, offset, 1, ENC_NA);
      offset += 1;
      proto_tree_add_item(tree, hf_ieee80211_tag_dmg_link_adapt_link_margin, tvb, offset, 1, ENC_NA);
      offset += 1;
      proto_tree_add_item(tree, hf_ieee80211_ff_snr, tvb, offset, 1, ENC_NA);
      offset += 1;
      proto_tree_add_item(tree, hf_ieee80211_tag_ref_timestamp, tvb, offset, 3, ENC_LITTLE_ENDIAN);
      offset += 4;
      break;
    }
    case TAG_DMG_LINK_ADAPTION_ACK:
    {
      if (tag_len != 5)
      {
        expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length, "Tag Length %u wrong, must be 5", tag_len);
        break;
      }
      offset += 2;
      proto_tree_add_item(tree, hf_ieee80211_tag_activity, tvb, offset, 1, ENC_NA);
      offset += 1;
      proto_tree_add_item(tree, hf_ieee80211_tag_ref_timestamp, tvb, offset, 3, ENC_LITTLE_ENDIAN);
      offset += 4;
      break;
    }
    case TAG_SWITCHING_STREAM:
    {
      int param_num;
      if (tag_len < 4)
      {
        expert_add_info_format(pinfo, ti_len, &ei_ieee80211_tag_length, "Tag Length %u wrong, must be at least 4", tag_len);
        break;
      }
      offset += 2;
      offset += add_fixed_field(tree, tvb, pinfo, 1, FIELD_BAND_ID);
      offset += add_fixed_field(tree, tvb, pinfo, 1, FIELD_BAND_ID);
      proto_tree_add_item(tree, hf_ieee80211_tag_switching_stream_non_qos, tvb, offset, 1, ENC_NA);
      offset += 1;
      param_num = tvb_get_letohs(tvb, offset);
      proto_tree_add_item(tree, hf_ieee80211_tag_switching_stream_param_num, tvb, offset, 1, ENC_NA);
      offset += 1;
      while(param_num > 0)
      {
        proto_tree_add_item(tree, hf_ieee80211_tag_switching_stream_old_tid, tvb, offset, 1, ENC_NA);
        proto_tree_add_item(tree, hf_ieee80211_tag_switching_stream_old_direction, tvb, offset, 1, ENC_NA);
        proto_tree_add_item(tree, hf_ieee80211_tag_switching_stream_new_tid, tvb, offset, 1, ENC_NA);
        proto_tree_add_item(tree, hf_ieee80211_tag_switching_stream_new_direction, tvb, offset, 1, ENC_NA);
        proto_tree_add_item(tree, hf_ieee80211_tag_switching_stream_new_valid_id, tvb, offset, 1, ENC_NA);
        proto_tree_add_item(tree, hf_ieee80211_tag_switching_stream_llt_type, tvb, offset, 1, ENC_NA);
        param_num--;
        offset += 2;
      }
      break;
    }
    default:
      proto_tree_add_item(tree, hf_ieee80211_tag_data, tvb, offset + 1 + 1, tag_len, ENC_NA);
      expert_add_info_format(pinfo, ti_tag, &ei_ieee80211_tag_data,
                             "Dissector for 802.11 IE Tag"
                             " (%s) code not implemented, Contact"
                             " Wireshark developers if you want this supported", val_to_str_ext(tag_no,
                                            &tag_num_vals_ext, "(%d)"));
      proto_item_append_text(ti, ": Undecoded");
      break;
  }
  if (offset < tag_end) {
    /* TODO: add Expert info to indicate there is unknown data ! but all tagged option don't yet return offset.
      For the moment, this code only remove Clang Warnings about not used offset... */
  }
  return tag_len + 1 + 1;
}
