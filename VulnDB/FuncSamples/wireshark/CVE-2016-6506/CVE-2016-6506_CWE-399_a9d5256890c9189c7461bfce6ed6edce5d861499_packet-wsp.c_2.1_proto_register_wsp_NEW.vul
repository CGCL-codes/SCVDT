void
proto_register_wsp(void)
{

/* Setup list of header fields */
    static hf_register_info hf[] = {
        { &hf_wsp_header_tid,
          {     "Transaction ID",
                "wsp.TID",
                FT_UINT8, BASE_HEX, NULL, 0x00,
                "WSP Transaction ID (for connectionless WSP)", HFILL
          }
        },
        { &hf_wsp_header_pdu_type,
          {     "PDU Type",
                "wsp.pdu_type",
                FT_UINT8, BASE_HEX|BASE_EXT_STRING,  &wsp_vals_pdu_type_ext, 0x00,
                NULL, HFILL
          }
        },
        { &hf_wsp_version_major,
          {     "Version (Major)",
                "wsp.version.major",
                FT_UINT8, BASE_DEC, NULL, 0xF0,
                NULL, HFILL
          }
        },
        { &hf_wsp_version_minor,
          {     "Version (Minor)",
                "wsp.version.minor",
                FT_UINT8, BASE_DEC, NULL, 0x0F,
                NULL, HFILL
          }
        },
        { &hf_capabilities_length,
          {     "Capabilities Length",
                "wsp.capabilities.length",
                FT_UINT32, BASE_DEC, NULL, 0x00,
                "Length of Capabilities field (bytes)", HFILL
          }
        },
        { &hf_wsp_header_length,
          {     "Headers Length",
                "wsp.headers_length",
                FT_UINT32, BASE_DEC, NULL, 0x00,
                "Length of Headers field (bytes)", HFILL
          }
        },
        { &hf_capabilities_section,
          {     "Capabilities",
                "wsp.capabilities",
                FT_NONE, BASE_NONE, NULL, 0x00,
                NULL, HFILL
          }
        },
        { &hf_wsp_headers_section,
          {     "Headers",
                "wsp.headers",
                FT_NONE, BASE_NONE, NULL, 0x00,
                NULL, HFILL
          }
        },
        { &hf_wsp_header_uri_len,
          {     "URI Length",
                "wsp.uri_length",
                FT_UINT32, BASE_DEC, NULL, 0x00,
                "Length of URI field", HFILL
          }
        },
        { &hf_wsp_header_uri,
          {     "URI",
                "wsp.uri",
                FT_STRING, BASE_NONE, NULL, 0x00,
                NULL, HFILL
          }
        },
        { &hf_wsp_server_session_id,
          {     "Server Session ID",
                "wsp.server.session_id",
                FT_UINT32, BASE_DEC, NULL, 0x00,
                NULL, HFILL
          }
        },
        { &hf_wsp_header_status,
          {     "Status",
                "wsp.reply.status",
                FT_UINT8, BASE_HEX|BASE_EXT_STRING,  &wsp_vals_status_ext, 0x00,
                "Reply Status", HFILL
          }
        },
        { &hf_wsp_parameter_untype_quote_text,
          {     "Untyped quoted text",
                "wsp.untype.quote_text",
                FT_STRING, BASE_NONE, NULL, 0x00,
                NULL, HFILL
          }
        },
        { &hf_wsp_parameter_untype_text,
          {     "Untyped text",
                "wsp.untype.text",
                FT_STRING, BASE_NONE, NULL, 0x00,
                NULL, HFILL
          }
        },
        { &hf_wsp_parameter_untype_int,
          {     "Untyped integer",
                "wsp.untype.int",
                FT_UINT32, BASE_DEC, NULL, 0x00,
                NULL, HFILL
          }
        },
        { &hf_wsp_parameter_type,
          {     "Parameter Type",
                "wsp.parameter.type",
                FT_UINT32, BASE_DEC|BASE_EXT_STRING, &parameter_type_vals_ext, 0x00,
                NULL, HFILL
          }
        },
        { &hf_wsp_parameter_int_type,
          {     "Integer Type",
                "wsp.parameter.int_type",
                FT_UINT32, BASE_DEC, NULL, 0x00,
                "Type parameter", HFILL
          }
        },
        { &hf_wsp_parameter_name,
          {     "Name",
                "wsp.parameter.name",
                FT_STRING, BASE_NONE, NULL, 0x00,
                "Name parameter", HFILL
          }
        },
        { &hf_wsp_parameter_filename,
          {     "Filename",
                "wsp.parameter.filename",
                FT_STRING, BASE_NONE, NULL, 0x00,
                "Filename parameter", HFILL
          }
        },
        { &hf_wsp_parameter_start,
          {     "Start",
                "wsp.parameter.start",
                FT_STRING, BASE_NONE, NULL, 0x00,
                "Start parameter", HFILL
          }
        },
        { &hf_wsp_parameter_start_info,
          {     "Start-info",
                "wsp.parameter.start_info",
                FT_STRING, BASE_NONE, NULL, 0x00,
                "Start-info parameter", HFILL
          }
        },
        { &hf_wsp_parameter_comment,
          {     "Comment",
                "wsp.parameter.comment",
                FT_STRING, BASE_NONE, NULL, 0x00,
                "Comment parameter", HFILL
          }
        },
        { &hf_wsp_parameter_domain,
          {     "Domain",
                "wsp.parameter.domain",
                FT_STRING, BASE_NONE, NULL, 0x00,
                "Domain parameter", HFILL
          }
        },
        { &hf_wsp_parameter_path,
          {     "Path",
                "wsp.parameter.path",
                FT_STRING, BASE_NONE, NULL, 0x00,
                "Path parameter", HFILL
          }
        },
        { &hf_wsp_parameter_sec,
          {     "SEC",
                "wsp.parameter.sec",
                FT_UINT8, BASE_HEX|BASE_EXT_STRING, &vals_wsp_parameter_sec_ext, 0x00,
                "SEC parameter (Content-Type: application/vnd.wap.connectivity-wbxml)", HFILL
          }
        },
        { &hf_wsp_parameter_mac,
          {     "MAC",
                "wsp.parameter.mac",
                FT_STRING, BASE_NONE, NULL, 0x00,
                "MAC parameter (Content-Type: application/vnd.wap.connectivity-wbxml)", HFILL
          }
        },
        { &hf_wsp_parameter_upart_type,
          {     "Type",
                "wsp.parameter.upart.type",
                FT_STRING, BASE_NONE, NULL, 0x00,
                "Multipart type parameter", HFILL
          }
        },
        { &hf_wsp_parameter_level,
          {     "Level",
                "wsp.parameter.level",
                FT_STRING, BASE_NONE, NULL, 0x00,
                "Level parameter", HFILL
          }
        },
        { &hf_wsp_parameter_size,
          {     "Size",
                "wsp.parameter.size",
                FT_UINT32, BASE_DEC, NULL, 0x00,
                "Size parameter", HFILL
          }
        },
#if 0
        { &hf_wsp_reply_data,
          {     "Data",
                "wsp.reply.data",
                FT_NONE, BASE_NONE, NULL, 0x00,
                NULL, HFILL
          }
        },
#endif
        { &hf_wsp_header_shift_code,
          {     "Switching to WSP header code-page",
                "wsp.code_page",
                FT_UINT8, BASE_DEC, NULL, 0x00,
                "Header code-page shift code", HFILL
          }
        },
        /*
         * CO-WSP capability negotiation
         */
        { &hf_capa_client_sdu_size,
          { "Client SDU Size",
            "wsp.capability.client_sdu_size",
            FT_UINT8, BASE_DEC, NULL, 0x00,
            "Client Service Data Unit size (bytes)", HFILL
          }
        },
        { &hf_capa_server_sdu_size,
          { "Server SDU Size",
            "wsp.capability.server_sdu_size",
            FT_UINT8, BASE_DEC, NULL, 0x00,
            "Server Service Data Unit size (bytes)", HFILL
          }
        },
        { &hf_capa_protocol_options,
          { "Protocol Options",
            "wsp.capability.protocol_opt",
            FT_UINT8, BASE_HEX, NULL, 0x00,
            NULL, HFILL
          }
        },
        { &hf_capa_protocol_option_confirmed_push,
          { "Confirmed Push facility",
            "wsp.capability.protocol_option.confirmed_push",
            FT_BOOLEAN, 8, NULL, 0x80,
            "If set, this CO-WSP session supports the Confirmed Push facility", HFILL
          }
        },
        { &hf_capa_protocol_option_push,
          { "Push facility",
            "wsp.capability.protocol_option.push",
            FT_BOOLEAN, 8, NULL, 0x40,
            "If set, this CO-WSP session supports the Push facility", HFILL
          }
        },
        { &hf_capa_protocol_option_session_resume,
          { "Session Resume facility",
            "wsp.capability.protocol_option.session_resume",
            FT_BOOLEAN, 8, NULL, 0x20,
            "If set, this CO-WSP session supports the Session Resume facility", HFILL
          }
        },
        { &hf_capa_protocol_option_ack_headers,
          { "Acknowledgement headers",
            "wsp.capability.protocol_option.ack_headers",
            FT_BOOLEAN, 8, NULL, 0x10,
            "If set, this CO-WSP session supports Acknowledgement headers", HFILL
          }
        },
        { &hf_capa_protocol_option_large_data_transfer,
          { "Large data transfer",
            "wsp.capability.protocol_option.large_data_transfer",
            FT_BOOLEAN, 8, NULL, 0x08,
            "If set, this CO-WSP session supports Large data transfer", HFILL
          }
        },
        { &hf_capa_method_mor,
          { "Method MOR",
            "wsp.capability.method_mor",
            FT_UINT8, BASE_DEC, NULL, 0x00,
            NULL, HFILL
          }
        },
        { &hf_capa_push_mor,
          { "Push MOR",
            "wsp.capability.push_mor",
            FT_UINT8, BASE_DEC, NULL, 0x00,
            NULL, HFILL
          }
        },
        { &hf_capa_extended_method,
          { "Extended Method",
            "wsp.capability.extended_method",
            FT_UINT8, BASE_HEX, NULL, 0x00,
            NULL, HFILL
          }
        },
        { &hf_capa_header_code_page,
          { "Header Code Page",
            "wsp.capability.code_page",
            FT_UINT8, BASE_HEX, NULL, 0x00,
            NULL, HFILL
          }
        },
        { &hf_capa_aliases,
          { "Aliases",
            "wsp.capability.aliases",
            FT_BYTES, BASE_NONE, NULL, 0x00,
            NULL, HFILL
          }
        },
        { &hf_capa_client_message_size,
          { "Client Message Size",
            "wsp.capability.client_message_size",
            FT_UINT8, BASE_DEC, NULL, 0x00,
            "Client Message size (bytes)", HFILL
          }
        },
        { &hf_capa_server_message_size,
          { "Server Message Size",
            "wsp.capability.server_message_size",
            FT_UINT8, BASE_DEC, NULL, 0x00,
            "Server Message size (bytes)", HFILL
          }
        },
        { &hf_wsp_post_data,
          {     "Data (Post)",
                "wsp.post.data",
                FT_NONE, BASE_NONE, NULL, 0x00,
                "Post Data", HFILL
          }
        },
#if 0
        { &hf_wsp_push_data,
          {     "Push Data",
                "wsp.push.data",
                FT_NONE, BASE_NONE, NULL, 0x00,
                NULL, HFILL
          }
        },
        { &hf_wsp_multipart_data,
          {     "Data in this part",
                "wsp.multipart.data",
                FT_NONE, BASE_NONE, NULL, 0x00,
                "The data of 1 MIME-multipart part.", HFILL
          }
        },
#endif
        { &hf_wsp_mpart,
          {     "Part",
                "wsp.multipart",
                FT_UINT32, BASE_DEC, NULL, 0x00,
                "MIME part of multipart data.", HFILL
          }
        },
        { &hf_wsp_header_text_value,
          {     "Header textual value",
                "wsp.header_text_value",
                FT_STRING, BASE_NONE, NULL, 0x00,
                NULL, HFILL
          }
        },
        { &hf_wsp_variable_value,
          {     "Variable value",
                "wsp.variable_value",
                FT_STRING, BASE_NONE, NULL, 0x00,
                NULL, HFILL
          }
        },
        { &hf_wsp_default_int,
          {     "Default integer",
                "wsp.default_int",
                FT_UINT32, BASE_DEC, NULL, 0x00,
                NULL, HFILL
          }
        },
        { &hf_wsp_default_string,
          {     "Default string value",
                "wsp.default_string",
                FT_STRING, BASE_NONE, NULL, 0x00,
                NULL, HFILL
          }
        },
        { &hf_wsp_default_val_len,
          {     "Default value len",
                "wsp.default_val_len",
                FT_UINT32, BASE_DEC, NULL, 0x00,
                NULL, HFILL
          }
        },
        { &hf_wsp_redirect_flags,
          {     "Flags",
                "wsp.redirect.flags",
                FT_UINT8, BASE_HEX, NULL, 0x00,
                "Redirect Flags", HFILL
          }
        },
        { &hf_wsp_redirect_permanent,
          {     "Permanent Redirect",
                "wsp.redirect.flags.permanent",
                FT_BOOLEAN, 8, TFS(&tfs_yes_no), PERMANENT_REDIRECT,
                NULL, HFILL
          }
        },
        { &hf_wsp_redirect_reuse_security_session,
          {     "Reuse Security Session",
                "wsp.redirect.flags.reuse_security_session",
                FT_BOOLEAN, 8, TFS(&tfs_yes_no), REUSE_SECURITY_SESSION,
                "If set, the existing Security Session may be reused", HFILL
          }
        },
        { &hf_redirect_addresses,
          { "Redirect Addresses",
            "wsp.redirect.addresses",
            FT_NONE, BASE_NONE, NULL, 0x00,
            "List of Redirect Addresses", HFILL
          }
        },

        /*
         * Addresses
         */
        { &hf_address_entry,
          { "Address Record",
            "wsp.address",
            FT_UINT32, BASE_DEC, NULL, 0x00,
            NULL, HFILL
          }
        },
        { &hf_address_flags_length,
          {     "Flags/Length",
                "wsp.address.flags",
                FT_UINT8, BASE_HEX, NULL, 0x00,
                "Address Flags/Length", HFILL
          }
        },
        { &hf_address_flags_length_bearer_type_included,
          {     "Bearer Type Included",
                "wsp.address.flags.bearer_type_included",
                FT_BOOLEAN, 8, TFS(&tfs_yes_no), BEARER_TYPE_INCLUDED,
                "Address bearer type included", HFILL
          }
        },
        { &hf_address_flags_length_port_number_included,
          {     "Port Number Included",
                "wsp.address.flags.port_number_included",
                FT_BOOLEAN, 8, TFS(&tfs_yes_no), PORT_NUMBER_INCLUDED,
                "Address port number included", HFILL
          }
        },
        { &hf_address_flags_length_address_len,
          {     "Address Length",
                "wsp.address.flags.length",
                FT_UINT8, BASE_DEC, NULL, ADDRESS_LEN,
                NULL, HFILL
          }
        },
        { &hf_address_bearer_type,
          {     "Bearer Type",
                "wsp.address.bearer_type",
                FT_UINT8, BASE_HEX|BASE_EXT_STRING, &vals_bearer_types_ext, 0x0,
                NULL, HFILL
          }
        },
        { &hf_address_port_num,
          {     "Port Number",
                "wsp.address.port",
                FT_UINT16, BASE_DEC, NULL, 0x0,
                NULL, HFILL
          }
        },
        { &hf_address_ipv4_addr,
          {     "IPv4 Address",
                "wsp.address.ipv4",
                FT_IPv4, BASE_NONE, NULL, 0x0,
                "Address (IPv4)", HFILL
          }
        },
        { &hf_address_ipv6_addr,
          {     "IPv6 Address",
                "wsp.address.ipv6",
                FT_IPv6, BASE_NONE, NULL, 0x0,
                "Address (IPv6)", HFILL
          }
        },
        { &hf_address_addr,
          {     "Address",
                "wsp.address.unknown",
                FT_BYTES, BASE_NONE, NULL, 0x0,
                "Address (unknown)", HFILL
          }
        },


        /*
         * New WSP header fields
         */


        /* WSP header name */
        { &hf_hdr_name_value,
          { "Header name",
            "wsp.header.name_value",
            FT_UINT8, BASE_DEC|BASE_EXT_STRING, &vals_field_names_ext, 0x7F,
            "Name of the WSP header as numeric value", HFILL
          }
        },
        { &hf_hdr_name_string,
          { "Header name",
            "wsp.header.name_string",
            FT_STRING, BASE_NONE, NULL, 0x0,
            "Name of the WSP header as string", HFILL
          }
        },
        /* WSP headers start here */
        { &hf_hdr_accept,
          { "Accept",
            "wsp.header.accept",
            FT_STRING, BASE_NONE, NULL, 0x00,
            "WSP header Accept", HFILL
          }
        },
        { &hf_hdr_accept_charset,
          { "Accept-Charset",
            "wsp.header.accept_charset",
            FT_STRING, BASE_NONE, NULL, 0x00,
            "WSP header Accept-Charset", HFILL
          }
        },
        { &hf_hdr_accept_encoding,
          { "Accept-Encoding",
            "wsp.header.accept_encoding",
            FT_STRING, BASE_NONE, NULL, 0x00,
            "WSP header Accept-Encoding", HFILL
          }
        },
        { &hf_hdr_accept_language,
          { "Accept-Language",
            "wsp.header.accept_language",
            FT_STRING, BASE_NONE, NULL, 0x00,
            "WSP header Accept-Language", HFILL
          }
        },
        { &hf_hdr_accept_ranges,
          { "Accept-Ranges",
            "wsp.header.accept_ranges",
            FT_STRING, BASE_NONE, NULL, 0x00,
            "WSP header Accept-Ranges", HFILL
          }
        },
        { &hf_hdr_age,
          { "Age",
            "wsp.header.age",
            FT_STRING, BASE_NONE, NULL, 0x00,
            "WSP header Age", HFILL
          }
        },
        { &hf_hdr_allow,
          { "Allow",
            "wsp.header.allow",
            FT_STRING, BASE_NONE, NULL, 0x00,
            "WSP header Allow", HFILL
          }
        },
        { &hf_hdr_authorization,
          { "Authorization",
            "wsp.header.authorization",
            FT_STRING, BASE_NONE, NULL, 0x00,
            "WSP header Authorization", HFILL
          }
        },
        { &hf_hdr_authorization_scheme,
          { "Authorization Scheme",
            "wsp.header.authorization.scheme",
            FT_STRING, BASE_NONE, NULL, 0x00,
            "WSP header Authorization: used scheme", HFILL
          }
        },
        { &hf_hdr_authorization_user_id,
          { "User-id",
            "wsp.header.authorization.user_id",
            FT_STRING, BASE_NONE, NULL, 0x00,
            "WSP header Authorization: user ID for basic authorization", HFILL
          }
        },
        { &hf_hdr_authorization_password,
          { "Password",
            "wsp.header.authorization.password",
            FT_STRING, BASE_NONE, NULL, 0x00,
            "WSP header Authorization: password for basic authorization", HFILL
          }
        },
        { &hf_hdr_cache_control,
          { "Cache-Control",
            "wsp.header.cache_control",
            FT_STRING, BASE_NONE, NULL, 0x00,
            "WSP header Cache-Control", HFILL
          }
        },
        { &hf_hdr_connection,
          { "Connection",
            "wsp.header.connection",
            FT_STRING, BASE_NONE, NULL, 0x00,
            "WSP header Connection", HFILL
          }
        },
        { &hf_hdr_content_base,
          { "Content-Base",
            "wsp.header.content_base",
            FT_STRING, BASE_NONE, NULL, 0x00,
            "WSP header Content-Base", HFILL
          }
        },
        { &hf_hdr_content_encoding,
          { "Content-Encoding",
            "wsp.header.content_encoding",
            FT_STRING, BASE_NONE, NULL, 0x00,
            "WSP header Content-Encoding", HFILL
          }
        },
        { &hf_hdr_content_language,
          { "Content-Language",
            "wsp.header.content_language",
            FT_STRING, BASE_NONE, NULL, 0x00,
            "WSP header Content-Language", HFILL
          }
        },
        { &hf_hdr_content_length,
          { "Content-Length",
            "wsp.header.content_length",
            FT_STRING, BASE_NONE, NULL, 0x00,
            "WSP header Content-Length", HFILL
          }
        },
        { &hf_hdr_content_location,
          { "Content-Location",
            "wsp.header.content_location",
            FT_STRING, BASE_NONE, NULL, 0x00,
            "WSP header Content-Location", HFILL
          }
        },
        { &hf_hdr_content_md5,
          { "Content-Md5",
            "wsp.header.content_md5",
            FT_BYTES, BASE_NONE, NULL, 0x00,
            "WSP header Content-Md5", HFILL
          }
        },
        { &hf_hdr_content_range,
          { "Content-Range",
            "wsp.header.content_range",
            FT_STRING, BASE_NONE, NULL, 0x00,
            "WSP header Content-Range", HFILL
          }
        },
        { &hf_hdr_content_range_first_byte_pos,
          { "First-byte-position",
            "wsp.header.content_range.first_byte_pos",
            FT_UINT32, BASE_DEC, NULL, 0x00,
            "WSP header Content-Range: position of first byte", HFILL
          }
        },
        { &hf_hdr_content_range_entity_length,
          { "Entity-length",
            "wsp.header.content_range.entity_length",
            FT_UINT32, BASE_DEC, NULL, 0x00,
            "WSP header Content-Range: length of the entity", HFILL
          }
        },
        { &hf_hdr_content_type,
          { "Content-Type",
            "wsp.header.content_type",
            FT_STRING, BASE_NONE, NULL, 0x00,
            "WSP header Content-Type", HFILL
          }
        },
        { &hf_hdr_date,
          { "Date",
            "wsp.header.date",
            FT_STRING, BASE_NONE, NULL, 0x00,
            "WSP header Date", HFILL
          }
        },
        { &hf_hdr_etag,
          { "ETag",
            "wsp.header.etag",
            FT_STRING, BASE_NONE, NULL, 0x00,
            "WSP header ETag", HFILL
          }
        },
        { &hf_hdr_expires,
          { "Expires",
            "wsp.header.expires",
            FT_STRING, BASE_NONE, NULL, 0x00,
            "WSP header Expires", HFILL
          }
        },
        { &hf_hdr_from,
          { "From",
            "wsp.header.from",
            FT_STRING, BASE_NONE, NULL, 0x00,
            "WSP header From", HFILL
          }
        },
        { &hf_hdr_host,
          { "Host",
            "wsp.header.host",
            FT_STRING, BASE_NONE, NULL, 0x00,
            "WSP header Host", HFILL
          }
        },
        { &hf_hdr_if_modified_since,
          { "If-Modified-Since",
            "wsp.header.if_modified_since",
            FT_STRING, BASE_NONE, NULL, 0x00,
            "WSP header If-Modified-Since", HFILL
          }
        },
        { &hf_hdr_if_match,
          { "If-Match",
            "wsp.header.if_match",
            FT_STRING, BASE_NONE, NULL, 0x00,
            "WSP header If-Match", HFILL
          }
        },
        { &hf_hdr_if_none_match,
          { "If-None-Match",
            "wsp.header.if_none_match",
            FT_STRING, BASE_NONE, NULL, 0x00,
            "WSP header If-None-Match", HFILL
          }
        },
        { &hf_hdr_if_range,
          { "If-Range",
            "wsp.header.if_range",
            FT_STRING, BASE_NONE, NULL, 0x00,
            "WSP header If-Range", HFILL
          }
        },
        { &hf_hdr_if_unmodified_since,
          { "If-Unmodified-Since",
            "wsp.header.if_unmodified_since",
            FT_STRING, BASE_NONE, NULL, 0x00,
            "WSP header If-Unmodified-Since", HFILL
          }
        },
        { &hf_hdr_last_modified,
          { "Last-Modified",
            "wsp.header.last_modified",
            FT_STRING, BASE_NONE, NULL, 0x00,
            "WSP header Last-Modified", HFILL
          }
        },
        { &hf_hdr_location,
          { "Location",
            "wsp.header.location",
            FT_STRING, BASE_NONE, NULL, 0x00,
            "WSP header Location", HFILL
          }
        },
        { &hf_hdr_max_forwards,
          { "Max-Forwards",
            "wsp.header.max_forwards",
            FT_STRING, BASE_NONE, NULL, 0x00,
            "WSP header Max-Forwards", HFILL
          }
        },
        { &hf_hdr_pragma,
          { "Pragma",
            "wsp.header.pragma",
            FT_STRING, BASE_NONE, NULL, 0x00,
            "WSP header Pragma", HFILL
          }
        },
        { &hf_hdr_proxy_authenticate,
          { "Proxy-Authenticate",
            "wsp.header.proxy_authenticate",
            FT_STRING, BASE_NONE, NULL, 0x00,
            "WSP header Proxy-Authenticate", HFILL
          }
        },
        { &hf_hdr_proxy_authenticate_scheme,
          { "Authentication Scheme",
            "wsp.header.proxy_authenticate.scheme",
            FT_STRING, BASE_NONE, NULL, 0x00,
            "WSP header Proxy-Authenticate: used scheme", HFILL
          }
        },
        { &hf_hdr_proxy_authenticate_realm,
          { "Authentication Realm",
            "wsp.header.proxy_authenticate.realm",
            FT_STRING, BASE_NONE, NULL, 0x00,
            "WSP header Proxy-Authenticate: used realm", HFILL
          }
        },
        { &hf_hdr_proxy_authorization,
          { "Proxy-Authorization",
            "wsp.header.proxy_authorization",
            FT_STRING, BASE_NONE, NULL, 0x00,
            "WSP header Proxy-Authorization", HFILL
          }
        },
        { &hf_hdr_proxy_authorization_scheme,
          { "Authorization Scheme",
            "wsp.header.proxy_authorization.scheme",
            FT_STRING, BASE_NONE, NULL, 0x00,
            "WSP header Proxy-Authorization: used scheme", HFILL
          }
        },
        { &hf_hdr_proxy_authorization_user_id,
          { "User-id",
            "wsp.header.proxy_authorization.user_id",
            FT_STRING, BASE_NONE, NULL, 0x00,
            "WSP header Proxy-Authorization: user ID for basic authorization", HFILL
          }
        },
        { &hf_hdr_proxy_authorization_password,
          { "Password",
            "wsp.header.proxy_authorization.password",
            FT_STRING, BASE_NONE, NULL, 0x00,
            "WSP header Proxy-Authorization: password for basic authorization", HFILL
          }
        },
        { &hf_hdr_public,
          { "Public",
            "wsp.header.public",
            FT_STRING, BASE_NONE, NULL, 0x00,
            "WSP header Public", HFILL
          }
        },
        { &hf_hdr_range,
          { "Range",
            "wsp.header.range",
            FT_STRING, BASE_NONE, NULL, 0x00,
            "WSP header Range", HFILL
          }
        },
        { &hf_hdr_range_first_byte_pos,
          { "First-byte-position",
            "wsp.header.range.first_byte_pos",
            FT_UINT32, BASE_DEC, NULL, 0x00,
            "WSP header Range: position of first byte", HFILL
          }
        },
        { &hf_hdr_range_last_byte_pos,
          { "Last-byte-position",
            "wsp.header.range.last_byte_pos",
            FT_UINT32, BASE_DEC, NULL, 0x00,
            "WSP header Range: position of last byte", HFILL
          }
        },
        { &hf_hdr_range_suffix_length,
          { "Suffix-length",
            "wsp.header.range.suffix_length",
            FT_UINT32, BASE_DEC, NULL, 0x00,
            "WSP header Range: length of the suffix", HFILL
          }
        },
        { &hf_hdr_referer,
          { "Referer",
            "wsp.header.referer",
            FT_STRING, BASE_NONE, NULL, 0x00,
            "WSP header Referer", HFILL
          }
        },
        { &hf_hdr_retry_after,
          { "Retry-After",
            "wsp.header.retry_after",
            FT_STRING, BASE_NONE, NULL, 0x00,
            "WSP header Retry-After", HFILL
          }
        },
        { &hf_hdr_server,
          { "Server",
            "wsp.header.server",
            FT_STRING, BASE_NONE, NULL, 0x00,
            "WSP header Server", HFILL
          }
        },
        { &hf_hdr_transfer_encoding,
          { "Transfer-Encoding",
            "wsp.header.transfer_encoding",
            FT_STRING, BASE_NONE, NULL, 0x00,
            "WSP header Transfer-Encoding", HFILL
          }
        },
        { &hf_hdr_upgrade,
          { "Upgrade",
            "wsp.header.upgrade",
            FT_STRING, BASE_NONE, NULL, 0x00,
            "WSP header Upgrade", HFILL
          }
        },
        { &hf_hdr_user_agent,
          { "User-Agent",
            "wsp.header.user_agent",
            FT_STRING, BASE_NONE, NULL, 0x00,
            "WSP header User-Agent", HFILL
          }
        },
        { &hf_hdr_vary,
          { "Vary",
            "wsp.header.vary",
            FT_STRING, BASE_NONE, NULL, 0x00,
            "WSP header Vary", HFILL
          }
        },
        { &hf_hdr_via,
          { "Via",
            "wsp.header.via",
            FT_STRING, BASE_NONE, NULL, 0x00,
            "WSP header Via", HFILL
          }
        },
        { &hf_hdr_warning,
          { "Warning",
            "wsp.header.warning",
            FT_STRING, BASE_NONE, NULL, 0x00,
            "WSP header Warning", HFILL
          }
        },
        { &hf_hdr_warning_code,
          { "Warning code",
            "wsp.header.warning.code",
            FT_UINT8, BASE_HEX|BASE_EXT_STRING, &vals_wsp_warning_code_ext, 0x00,
            "WSP header Warning code", HFILL
          }
        },
        { &hf_hdr_warning_agent,
          { "Warning agent",
            "wsp.header.warning.agent",
            FT_STRING, BASE_NONE, NULL, 0x00,
            "WSP header Warning agent", HFILL
          }
        },
        { &hf_hdr_warning_text,
          { "Warning text",
            "wsp.header.warning.text",
            FT_STRING, BASE_NONE, NULL, 0x00,
            "WSP header Warning text", HFILL
          }
        },
        { &hf_hdr_www_authenticate,
          { "Www-Authenticate",
            "wsp.header.www_authenticate",
            FT_STRING, BASE_NONE, NULL, 0x00,
            "WSP header Www-Authenticate", HFILL
          }
        },
        { &hf_hdr_www_authenticate_scheme,
          { "Authentication Scheme",
            "wsp.header.www_authenticate.scheme",
            FT_STRING, BASE_NONE, NULL, 0x00,
            "WSP header WWW-Authenticate: used scheme", HFILL
          }
        },
        { &hf_hdr_www_authenticate_realm,
          { "Authentication Realm",
            "wsp.header.www_authenticate.realm",
            FT_STRING, BASE_NONE, NULL, 0x00,
            "WSP header WWW-Authenticate: used realm", HFILL
          }
        },
        { &hf_hdr_content_disposition,
          { "Content-Disposition",
            "wsp.header.content_disposition",
            FT_STRING, BASE_NONE, NULL, 0x00,
            "WSP header Content-Disposition", HFILL
          }
        },
        { &hf_hdr_application_id,
          { "Application-Id",
            "wsp.header.application_id",
            FT_STRING, BASE_NONE, NULL, 0x00,
            "WSP header Application-Id", HFILL
          }
        },
        { &hf_hdr_content_uri,
          { "Content-Uri",
            "wsp.header.content_uri",
            FT_STRING, BASE_NONE, NULL, 0x00,
            "WSP header Content-Uri", HFILL
          }
        },
        { &hf_hdr_initiator_uri,
          { "Initiator-Uri",
            "wsp.header.initiator_uri",
            FT_STRING, BASE_NONE, NULL, 0x00,
            "WSP header Initiator-Uri", HFILL
          }
        },
        { &hf_hdr_bearer_indication,
          { "Bearer-Indication",
            "wsp.header.bearer_indication",
            FT_STRING, BASE_NONE, NULL, 0x00,
            "WSP header Bearer-Indication", HFILL
          }
        },
        { &hf_hdr_push_flag,
          { "Push-Flag",
            "wsp.header.push_flag",
            FT_STRING, BASE_NONE, NULL, 0x00,
            "WSP header Push-Flag", HFILL
          }
        },
        { &hf_hdr_push_flag_auth,
          { "Initiator URI is authenticated",
            "wsp.header.push_flag.authenticated",
            FT_UINT8, BASE_DEC, VALS(vals_false_true), 0x01,
            "The X-Wap-Initiator-URI has been authenticated.", HFILL
          }
        },
        { &hf_hdr_push_flag_trust,
          { "Content is trusted",
            "wsp.header.push_flag.trusted",
            FT_UINT8, BASE_DEC, VALS(vals_false_true), 0x02,
            "The push content is trusted.", HFILL
          }
        },
        { &hf_hdr_push_flag_last,
          { "Last push message",
            "wsp.header.push_flag.last",
            FT_UINT8, BASE_DEC, VALS(vals_false_true), 0x04,
            "Indicates whether this is the last push message.", HFILL
          }
        },
        { &hf_hdr_profile,
          { "Profile",
            "wsp.header.profile",
            FT_STRING, BASE_NONE, NULL, 0x00,
            "WSP header Profile", HFILL
          }
        },
        { &hf_hdr_profile_diff,
          { "Profile-Diff",
            "wsp.header.profile_diff",
            FT_STRING, BASE_NONE, NULL, 0x00,
            "WSP header Profile-Diff", HFILL
          }
        },
        { &hf_hdr_profile_warning,
          { "Profile-Warning",
            "wsp.header.profile_warning",
            FT_STRING, BASE_NONE, NULL, 0x00,
            "WSP header Profile-Warning", HFILL
          }
        },
        { &hf_hdr_expect,
          { "Expect",
            "wsp.header.expect",
            FT_STRING, BASE_NONE, NULL, 0x00,
            "WSP header Expect", HFILL
          }
        },
        { &hf_hdr_te,
          { "Te",
            "wsp.header.te",
            FT_STRING, BASE_NONE, NULL, 0x00,
            "WSP header Te", HFILL
          }
        },
        { &hf_hdr_trailer,
          { "Trailer",
            "wsp.header.trailer",
            FT_STRING, BASE_NONE, NULL, 0x00,
            "WSP header Trailer", HFILL
          }
        },
        { &hf_hdr_x_wap_tod,
          { "X-Wap-Tod",
            "wsp.header.x_wap_tod",
            FT_ABSOLUTE_TIME, ABSOLUTE_TIME_LOCAL, NULL, 0x00,
            "WSP header X-Wap-Tod", HFILL
          }
        },
        { &hf_hdr_content_id,
          { "Content-Id",
            "wsp.header.content_id",
            FT_STRING, BASE_NONE, NULL, 0x00,
            "WSP header Content-Id", HFILL
          }
        },
        { &hf_hdr_set_cookie,
          { "Set-Cookie",
            "wsp.header.set_cookie",
            FT_STRING, BASE_NONE, NULL, 0x00,
            "WSP header Set-Cookie", HFILL
          }
        },
        { &hf_hdr_cookie,
          { "Cookie",
            "wsp.header.cookie",
            FT_STRING, BASE_NONE, NULL, 0x00,
            "WSP header Cookie", HFILL
          }
        },
        { &hf_hdr_encoding_version,
          { "Encoding-Version",
            "wsp.header.encoding_version",
            FT_STRING, BASE_NONE, NULL, 0x00,
            "WSP header Encoding-Version", HFILL
          }
        },
        { &hf_hdr_x_wap_security,
          { "X-Wap-Security",
            "wsp.header.x_wap_security",
            FT_STRING, BASE_NONE, NULL, 0x00,
            "WSP header X-Wap-Security", HFILL
          }
        },
        { &hf_hdr_x_wap_application_id,
          { "X-Wap-Application-Id",
            "wsp.header.x_wap_application_id",
            FT_STRING, BASE_NONE, NULL, 0x00,
            "WSP header X-Wap-Application-Id", HFILL
          }
        },
        { &hf_hdr_accept_application,
          { "Accept-Application",
            "wsp.header.accept_application",
            FT_STRING, BASE_NONE, NULL, 0x00,
            "WSP header Accept-Application", HFILL
          }
        },


        /*
         * Openwave headers
         * Header Code Page: x-up-1
         */
        { &hf_hdr_openwave_default_int,
          {     "Default integer",
                "wsp.default_int",
                FT_UINT32, BASE_DEC, NULL, 0x00,
                NULL, HFILL
          }
        },
        { &hf_hdr_openwave_default_string,
          {     "Default string value",
                "wsp.default_string",
                FT_STRING, BASE_NONE, NULL, 0x00,
                NULL, HFILL
          }
        },
        { &hf_hdr_openwave_default_val_len,
          {     "Default value len",
                "wsp.default_val_len",
                FT_UINT32, BASE_DEC, NULL, 0x00,
                NULL, HFILL
          }
        },
        { &hf_hdr_openwave_name_value,
          { "Header name",
            "wsp.header.name_value",
            FT_UINT8, BASE_DEC|BASE_EXT_STRING, &vals_openwave_field_names_ext, 0x7F,
            "WSP Openwave header as numeric value", HFILL
          }
        },

        /* Textual headers */
        { &hf_hdr_openwave_x_up_proxy_operator_domain,
          { "x-up-proxy-operator-domain",
            "wsp.header.x_up_1.x_up_proxy_operator_domain",
            FT_STRING, BASE_NONE, NULL, 0x00,
            "WSP Openwave header x-up-proxy-operator-domain", HFILL
          }
        },
        { &hf_hdr_openwave_x_up_proxy_home_page,
          { "x-up-proxy-home-page",
            "wsp.header.x_up_1.x_up_proxy_home_page",
            FT_STRING, BASE_NONE, NULL, 0x00,
            "WSP Openwave header x-up-proxy-home-page", HFILL
          }
        },
        { &hf_hdr_openwave_x_up_proxy_uplink_version,
          { "x-up-proxy-uplink-version",
            "wsp.header.x_up_1.x_up_proxy_uplink_version",
            FT_STRING, BASE_NONE, NULL, 0x00,
            "WSP Openwave header x-up-proxy-uplink-version", HFILL
          }
        },
        { &hf_hdr_openwave_x_up_proxy_ba_realm,
          { "x-up-proxy-ba-realm",
            "wsp.header.x_up_1.x_up_proxy_ba_realm",
            FT_STRING, BASE_NONE, NULL, 0x00,
            "WSP Openwave header x-up-proxy-ba-realm", HFILL
          }
        },
        { &hf_hdr_openwave_x_up_proxy_request_uri,
          { "x-up-proxy-request-uri",
            "wsp.header.x_up_1.x_up_proxy_request_uri",
            FT_STRING, BASE_NONE, NULL, 0x00,
            "WSP Openwave header x-up-proxy-request-uri", HFILL
          }
        },
        { &hf_hdr_openwave_x_up_proxy_bookmark,
          { "x-up-proxy-bookmark",
            "wsp.header.x_up_1.x_up_proxy_bookmark",
            FT_STRING, BASE_NONE, NULL, 0x00,
            "WSP Openwave header x-up-proxy-bookmark", HFILL
          }
        },
        /* Integer-value headers */
        { &hf_hdr_openwave_x_up_proxy_push_seq,
          { "x-up-proxy-push-seq",
            "wsp.header.x_up_1.x_up_proxy_push_seq",
            FT_STRING, BASE_NONE, NULL, 0x00,
            "WSP Openwave header x-up-proxy-push-seq", HFILL
          }
        },
        { &hf_hdr_openwave_x_up_proxy_notify,
          { "x-up-proxy-notify",
            "wsp.header.x_up_1.x_up_proxy_notify",
            FT_STRING, BASE_NONE, NULL, 0x00,
            "WSP Openwave header x-up-proxy-notify", HFILL
          }
        },
        { &hf_hdr_openwave_x_up_proxy_net_ask,
          { "x-up-proxy-net-ask",
            "wsp.header.x_up_1.x_up_proxy_net_ask",
            FT_STRING, BASE_NONE, NULL, 0x00,
            "WSP Openwave header x-up-proxy-net-ask", HFILL
          }
        },
        { &hf_hdr_openwave_x_up_proxy_tod,
          { "x-up-proxy-tod",
            "wsp.header.x_up_1.x_up_proxy_tod",
            FT_STRING, BASE_NONE, NULL, 0x00,
            "WSP Openwave header x-up-proxy-tod", HFILL
          }
        },
        { &hf_hdr_openwave_x_up_proxy_ba_enable,
          { "x-up-proxy-ba-enable",
            "wsp.header.x_up_1.x_up_proxy_ba_enable",
            FT_STRING, BASE_NONE, NULL, 0x00,
            "WSP Openwave header x-up-proxy-ba-enable", HFILL
          }
        },
        { &hf_hdr_openwave_x_up_proxy_redirect_enable,
          { "x-up-proxy-redirect-enable",
            "wsp.header.x_up_1.x_up_proxy_redirect_enable",
            FT_STRING, BASE_NONE, NULL, 0x00,
            "WSP Openwave header x-up-proxy-redirect-enable", HFILL
          }
        },
        { &hf_hdr_openwave_x_up_proxy_redirect_status,
          { "x-up-proxy-redirect-status",
            "wsp.header.x_up_1.x_up_proxy_redirect_status",
            FT_STRING, BASE_NONE, NULL, 0x00,
            "WSP Openwave header x-up-proxy-redirect-status", HFILL
          }
        },
        { &hf_hdr_openwave_x_up_proxy_linger,
          { "x-up-proxy-linger",
            "wsp.header.x_up_1.x_up_proxy_linger",
            FT_STRING, BASE_NONE, NULL, 0x00,
            "WSP Openwave header x-up-proxy-linger", HFILL
          }
        },
        { &hf_hdr_openwave_x_up_proxy_enable_trust,
          { "x-up-proxy-enable-trust",
            "wsp.header.x_up_1.x_up_proxy_enable_trust",
            FT_STRING, BASE_NONE, NULL, 0x00,
            "WSP Openwave header x-up-proxy-enable-trust", HFILL
          }
        },
        { &hf_hdr_openwave_x_up_proxy_trust,
          { "x-up-proxy-trust",
            "wsp.header.x_up_1.x_up_proxy_trust",
            FT_STRING, BASE_NONE, NULL, 0x00,
            "WSP Openwave header x-up-proxy-trust", HFILL
          }
        },
        { &hf_hdr_openwave_x_up_devcap_has_color,
          { "x-up-devcap-has-color",
            "wsp.header.x_up_1.x_up_devcap_has_color",
            FT_STRING, BASE_NONE, NULL, 0x00,
            "WSP Openwave header x-up-devcap-has-color", HFILL
          }
        },
        { &hf_hdr_openwave_x_up_devcap_num_softkeys,
          { "x-up-devcap-num-softkeys",
            "wsp.header.x_up_1.x_up_devcap_num_softkeys",
            FT_STRING, BASE_NONE, NULL, 0x00,
            "WSP Openwave header x-up-devcap-num-softkeys", HFILL
          }
        },
        { &hf_hdr_openwave_x_up_devcap_softkey_size,
          { "x-up-devcap-softkey-size",
            "wsp.header.x_up_1.x_up_devcap_softkey_size",
            FT_STRING, BASE_NONE, NULL, 0x00,
            "WSP Openwave header x-up-devcap-softkey-size", HFILL
          }
        },
        { &hf_hdr_openwave_x_up_devcap_screen_chars,
          { "x-up-devcap-screen-chars",
            "wsp.header.x_up_1.x_up_devcap_screen_chars",
            FT_STRING, BASE_NONE, NULL, 0x00,
            "WSP Openwave header x-up-devcap-screen-chars", HFILL
          }
        },
        { &hf_hdr_openwave_x_up_devcap_screen_pixels,
          { "x-up-devcap-screen-pixels",
            "wsp.header.x_up_1.x_up_devcap_screen_pixels",
            FT_STRING, BASE_NONE, NULL, 0x00,
            "WSP Openwave header x-up-devcap-screen-pixels", HFILL
          }
        },
        { &hf_hdr_openwave_x_up_devcap_em_size,
          { "x-up-devcap-em-size",
            "wsp.header.x_up_1.x_up_devcap_em_size",
            FT_STRING, BASE_NONE, NULL, 0x00,
            "WSP Openwave header x-up-devcap-em-size", HFILL
          }
        },
        { &hf_hdr_openwave_x_up_devcap_screen_depth,
          { "x-up-devcap-screen-depth",
            "wsp.header.x_up_1.x_up_devcap_screen_depth",
            FT_STRING, BASE_NONE, NULL, 0x00,
            "WSP Openwave header x-up-devcap-screen-depth", HFILL
          }
        },
        { &hf_hdr_openwave_x_up_devcap_immed_alert,
          { "x-up-devcap-immed-alert",
            "wsp.header.x_up_1.x_up_devcap_immed_alert",
            FT_STRING, BASE_NONE, NULL, 0x00,
            "WSP Openwave header x-up-devcap-immed-alert", HFILL
          }
        },
        { &hf_hdr_openwave_x_up_devcap_gui,
          { "x-up-devcap-gui",
            "wsp.header.x_up_1.x_up_devcap_gui",
            FT_STRING, BASE_NONE, NULL, 0x00,
            "WSP Openwave header x-up-devcap-gui", HFILL
          }
        },
        { &hf_hdr_openwave_x_up_proxy_trans_charset,
          { "x-up-proxy-trans-charset",
            "wsp.header.x_up_1.x_up_proxy_trans_charset",
            FT_STRING, BASE_NONE, NULL, 0x00,
            "WSP Openwave header x-up-proxy-trans-charset", HFILL
          }
        },
        { &hf_hdr_openwave_x_up_proxy_push_accept,
          { "x-up-proxy-push-accept",
            "wsp.header.x_up_1.x_up_proxy_push_accept",
            FT_STRING, BASE_NONE, NULL, 0x00,
            "WSP Openwave header x-up-proxy-push-accept", HFILL
          }
        },

#if 0
        /* Not used for now */
           { &hf_hdr_openwave_x_up_proxy_client_id,
           {    "x-up-proxy-client-id",
           "wsp.header.x_up_1.x_up_proxy_client_id",
           FT_STRING, BASE_NONE, NULL, 0x00,
           "WSP Openwave header x-up-proxy-client-id", HFILL
           }
           },
#endif

        /*
         * Header value parameters
         */

        { &hf_parameter_q,
          {     "Q",
                "wsp.parameter.q",
                FT_STRING, BASE_NONE, NULL, 0x00,
                "Q parameter", HFILL
          }
        },
        { &hf_parameter_charset,
          {     "Charset",
                "wsp.parameter.charset",
                FT_STRING, BASE_NONE, NULL, 0x00,
                "Charset parameter", HFILL
          }
        }
    };

/* Setup protocol subtree array */
    static gint *ett[] = {
        &ett_wsp,
        &ett_header, /* Header field subtree */
        &ett_headers, /* Subtree for WSP headers */
        &ett_content_type_header,
        &ett_wsp_parameter_type,
        &ett_capabilities, /* CO-WSP Session Capabilities */
        &ett_capabilities_entry,
        &ett_proto_option_capability, /* CO-WSP Session single Capability */
        &ett_capabilities_extended_methods,
        &ett_capabilities_header_code_pages,
        &ett_post,
        &ett_redirect_flags,
        &ett_address_flags,
        &ett_multiparts,
        &ett_mpartlist,
        &ett_addresses,     /* Addresses */
        &ett_address,       /* Single address */
        &ett_default,
        &ett_add_content_type,
        &ett_accept_x_q_header,
        &ett_push_flag,
        &ett_profile_diff_wbxml,
        &ett_allow,
        &ett_public,
        &ett_vary,
        &ett_x_wap_security,
        &ett_connection,
        &ett_transfer_encoding,
        &ett_accept_ranges,
        &ett_content_encoding,
        &ett_accept_encoding,
        &ett_content_disposition,
        &ett_text_header,
        &ett_content_id,
        &ett_text_or_date_value,
        &ett_date_value,
        &ett_tod_value,
        &ett_age,
        &ett_integer_lookup,
        &ett_challenge,
        &ett_credentials_value,
        &ett_content_md5,
        &ett_pragma,
        &ett_integer_value,
        &ett_integer_lookup_value,
        &ett_cache_control,
        &ett_warning,
        &ett_profile_warning,
        &ett_encoding_version,
        &ett_content_range,
        &ett_range,
        &ett_te_value,
        &ett_openwave_default,
    };

    static ei_register_info ei[] = {
      { &ei_wsp_capability_invalid, { "wsp.capability.invalid", PI_PROTOCOL, PI_WARN, "Invalid capability", EXPFILL }},
      { &ei_wsp_capability_encoding_invalid, { "wsp.capability_encoding.invalid", PI_PROTOCOL, PI_WARN, "Invalid capability encoding", EXPFILL }},
      { &ei_wsp_text_field_invalid, { "wsp.text_field_invalid", PI_PROTOCOL, PI_WARN, "Text field invalid", EXPFILL }},
      { &ei_wsp_invalid_parameter_value, { "wsp.invalid_parameter_value", PI_PROTOCOL, PI_WARN, "Invalid parameter value", EXPFILL }},
      { &ei_wsp_header_invalid_value, { "wsp.header_invalid_value", PI_PROTOCOL, PI_WARN, "Invalid header value", EXPFILL }},
      { &ei_hdr_x_wap_tod, { "wsp.header.x_wap_tod.not_text", PI_PROTOCOL, PI_WARN, "Should be encoded as a textual value", EXPFILL }},
      { &ei_wsp_undecoded_parameter, { "wsp.undecoded_parameter", PI_UNDECODED, PI_WARN, "Invalid parameter value", EXPFILL }},
      { &ei_wsp_trailing_quote, { "wsp.trailing_quote", PI_PROTOCOL, PI_WARN, "Quoted-string value has been encoded with a trailing quote", EXPFILL }},
      { &ei_wsp_header_invalid, { "wsp.header_invalid", PI_MALFORMED, PI_ERROR, "Malformed header", EXPFILL }},
    };

    expert_module_t* expert_wsp;

/* Register the protocol name and description */
    proto_wsp = proto_register_protocol(
        "Wireless Session Protocol",    /* protocol name for use by wireshark */
        "WSP",                          /* short version of name */
        "wsp"                           /* Abbreviated protocol name,
                                           should Match IANA:
                                           < URL:http://www.iana.org/assignments/port-numbers/ >
                                        */
        );
    wsp_tap = register_tap("wsp");
    /* Init the hash table */
/*  wsp_sessions = g_hash_table_new(
    (GHashFunc) wsp_session_hash,
    (GEqualFunc)wsp_session_equal);*/

/* Required function calls to register the header fields and subtrees used  */
    proto_register_field_array(proto_wsp, hf, array_length(hf));
    proto_register_subtree_array(ett, array_length(ett));
    expert_wsp = expert_register_protocol(proto_wsp);
    expert_register_field_array(expert_wsp, ei, array_length(ei));

    register_dissector("wsp-co", dissect_wsp_fromwap_co, proto_wsp);
    register_dissector("wsp-cl", dissect_wsp_fromwap_cl, proto_wsp);
    heur_subdissector_list = register_heur_dissector_list("wsp", proto_wsp);

    wsp_fromudp_handle = create_dissector_handle(dissect_wsp_fromudp,
                                                 proto_wsp);
}
