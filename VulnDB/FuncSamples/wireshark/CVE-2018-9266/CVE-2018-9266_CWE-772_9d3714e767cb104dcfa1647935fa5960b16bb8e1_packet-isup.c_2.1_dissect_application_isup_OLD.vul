static int
dissect_application_isup(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data)
{
/* Set up structures needed to add the protocol subtree and manage it */
  proto_item *ti;
  proto_tree *isup_tree = NULL;
  tvbuff_t   *message_tvb;
  guint8      message_type;
  char       *version, *base;
  guint8      itu_isup_variant = ISUP_ITU_STANDARD_VARIANT; /* Default */

  if (data) {
    http_message_info_t *message_info = (http_message_info_t *)data;
    if (message_info->media_str) {
      version = ws_find_media_type_parameter(message_info->media_str, "version");
      base = ws_find_media_type_parameter(message_info->media_str, "base");
      if ((version && g_ascii_strncasecmp(version, "ansi", 4) == 0) ||
          (base && g_ascii_strncasecmp(base, "ansi", 4) == 0)) {
        /*
         * "version" or "base" parameter begins with "ansi", so it's ANSI.
         */
        isup_standard = ANSI_STANDARD;
        col_append_str(pinfo->cinfo, COL_PROTOCOL, "/ISUP(ANSI)");
        message_type = tvb_get_guint8(tvb, 0);
        /* application/ISUP has no  CIC  */
        col_append_sep_fstr(pinfo->cinfo, COL_INFO, ", ",
                            "ISUP:%s",
                            val_to_str_ext_const(message_type, &ansi_isup_message_type_value_acro_ext, "reserved"));
        if (tree) {
          ti = proto_tree_add_item(tree, proto_isup, tvb, 0, -1, ENC_NA);
          isup_tree = proto_item_add_subtree(ti, ett_isup);
        }

        message_tvb = tvb_new_subset_remaining(tvb, 0);
        dissect_ansi_isup_message(message_tvb, pinfo, isup_tree, ISUP_ITU_STANDARD_VARIANT, 0);
        return tvb_reported_length(tvb);
      } else if ((version && g_ascii_strcasecmp(version, "spirou") == 0) ||
          (base && g_ascii_strcasecmp(base, "spirou") == 0)) {
        /*
         * "version" or "base" version is "spirou", so it's SPIROU.
         */
        isup_standard    = ITU_STANDARD;
        itu_isup_variant = ISUP_FRENCH_VARIANT;
      } else {
        isup_standard = ITU_STANDARD;
      }
      g_free(version);
      g_free(base);
    } else {
      /* default to ITU */
      isup_standard = ITU_STANDARD;
    }
  } else {
    /* default to ITU */
    isup_standard = ITU_STANDARD;
  }


  /* Extract message type field */
  message_type = tvb_get_guint8(tvb, 0);

  switch (itu_isup_variant) {
    case ISUP_ITU_STANDARD_VARIANT:
      /* Make entries in Protocol column and Info column on summary display */
      col_append_str(pinfo->cinfo, COL_PROTOCOL, "/ISUP(ITU)");

      /* application/ISUP has no  CIC  */
      col_append_sep_fstr(pinfo->cinfo, COL_INFO, ", ",
                          "ISUP:%s",
                          val_to_str_ext_const(message_type, &isup_message_type_value_acro_ext, "reserved"));
      break;
    case ISUP_FRENCH_VARIANT:
      /* Make entries in Protocol column and Info column on summary display */
      col_append_str(pinfo->cinfo, COL_PROTOCOL, "/ISUP(French)");

      /* application/ISUP has no  CIC  */
      col_append_sep_fstr(pinfo->cinfo, COL_INFO, ", ",
                          "ISUP:%s",
                          val_to_str_ext_const(message_type, &french_isup_message_type_value_acro_ext, "reserved"));
      break;
#if 0
      /* This case can't happen unless/until we can parse the Israeli variant
       * out of the content type
       */
    case ISUP_ISRAELI_VARIANT:
      /* Make entries in Protocol column and Info column on summary display */
      col_append_str(pinfo->cinfo, COL_PROTOCOL, "/ISUP(Israeli)");

      /* application/ISUP has no  CIC  */
      col_append_sep_fstr(pinfo->cinfo, COL_INFO, ", ",
                          "ISUP:%s",
                          val_to_str_ext_const(message_type, &israeli_isup_message_type_value_acro_ext, "reserved"));
      break;
#endif
    default:
      col_append_sep_fstr(pinfo->cinfo, COL_INFO, ", ",
                          "ISUP: Unknown variant %d", itu_isup_variant);
      break;
  }

  if (tree) {
    ti = proto_tree_add_item(tree, proto_isup, tvb, 0, -1, ENC_NA);
    isup_tree = proto_item_add_subtree(ti, ett_isup);
  }

  message_tvb = tvb_new_subset_remaining(tvb, 0);
  dissect_isup_message(message_tvb, pinfo, isup_tree, itu_isup_variant, 0);
  return tvb_reported_length(tvb);
}
