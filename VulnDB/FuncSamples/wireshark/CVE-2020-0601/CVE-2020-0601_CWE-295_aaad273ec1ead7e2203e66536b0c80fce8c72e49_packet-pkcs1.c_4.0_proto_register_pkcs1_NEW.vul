void proto_register_pkcs1(void) {

  /* List of fields */
  static hf_register_info hf[] = {

/*--- Included file: packet-pkcs1-hfarr.c ---*/
#line 1 "./asn1/pkcs1/packet-pkcs1-hfarr.c"
    { &hf_pkcs1_DSA_Params_PDU,
      { "DSA-Params", "pkcs1.DSA_Params_element",
        FT_NONE, BASE_NONE, NULL, 0,
        NULL, HFILL }},
    { &hf_pkcs1_DomainParameters_PDU,
      { "DomainParameters", "pkcs1.DomainParameters_element",
        FT_NONE, BASE_NONE, NULL, 0,
        NULL, HFILL }},
    { &hf_pkcs1_KEA_Params_Id_PDU,
      { "KEA-Params-Id", "pkcs1.KEA_Params_Id",
        FT_BYTES, BASE_NONE, NULL, 0,
        NULL, HFILL }},
    { &hf_pkcs1_HashAlgorithm_PDU,
      { "HashAlgorithm", "pkcs1.HashAlgorithm_element",
        FT_NONE, BASE_NONE, NULL, 0,
        NULL, HFILL }},
    { &hf_pkcs1_RSASSA_PSS_params_PDU,
      { "RSASSA-PSS-params", "pkcs1.RSASSA_PSS_params_element",
        FT_NONE, BASE_NONE, NULL, 0,
        NULL, HFILL }},
    { &hf_pkcs1_ECParameters_PDU,
      { "ECParameters", "pkcs1.ECParameters",
        FT_UINT32, BASE_DEC, VALS(pkcs1_ECParameters_vals), 0,
        NULL, HFILL }},
    { &hf_pkcs1_Prime_p_PDU,
      { "Prime-p", "pkcs1.Prime_p",
        FT_INT32, BASE_DEC, NULL, 0,
        NULL, HFILL }},
    { &hf_pkcs1_modulus,
      { "modulus", "pkcs1.modulus",
        FT_BYTES, BASE_NONE, NULL, 0,
        "INTEGER", HFILL }},
    { &hf_pkcs1_publicExponent,
      { "publicExponent", "pkcs1.publicExponent",
        FT_INT32, BASE_DEC, NULL, 0,
        "INTEGER", HFILL }},
    { &hf_pkcs1_digestAlgorithm,
      { "digestAlgorithm", "pkcs1.digestAlgorithm_element",
        FT_NONE, BASE_NONE, NULL, 0,
        "DigestAlgorithmIdentifier", HFILL }},
    { &hf_pkcs1_digest,
      { "digest", "pkcs1.digest",
        FT_BYTES, BASE_NONE, NULL, 0,
        NULL, HFILL }},
    { &hf_pkcs1_p,
      { "p", "pkcs1.p",
        FT_INT32, BASE_DEC, NULL, 0,
        "INTEGER", HFILL }},
    { &hf_pkcs1_q,
      { "q", "pkcs1.q",
        FT_INT32, BASE_DEC, NULL, 0,
        "INTEGER", HFILL }},
    { &hf_pkcs1_g,
      { "g", "pkcs1.g",
        FT_INT32, BASE_DEC, NULL, 0,
        "INTEGER", HFILL }},
    { &hf_pkcs1_j,
      { "j", "pkcs1.j",
        FT_INT32, BASE_DEC, NULL, 0,
        "INTEGER", HFILL }},
    { &hf_pkcs1_validationParams,
      { "validationParams", "pkcs1.validationParams_element",
        FT_NONE, BASE_NONE, NULL, 0,
        NULL, HFILL }},
    { &hf_pkcs1_seed,
      { "seed", "pkcs1.seed",
        FT_BYTES, BASE_NONE, NULL, 0,
        "BIT_STRING", HFILL }},
    { &hf_pkcs1_pgenCounter,
      { "pgenCounter", "pkcs1.pgenCounter",
        FT_INT32, BASE_DEC, NULL, 0,
        "INTEGER", HFILL }},
    { &hf_pkcs1_hashAlgorithm,
      { "hashAlgorithm", "pkcs1.hashAlgorithm_element",
        FT_NONE, BASE_NONE, NULL, 0,
        NULL, HFILL }},
    { &hf_pkcs1_maskGenAlgorithm,
      { "maskGenAlgorithm", "pkcs1.maskGenAlgorithm_element",
        FT_NONE, BASE_NONE, NULL, 0,
        NULL, HFILL }},
    { &hf_pkcs1_saltLength,
      { "saltLength", "pkcs1.saltLength",
        FT_INT32, BASE_DEC, NULL, 0,
        "INTEGER", HFILL }},
    { &hf_pkcs1_trailerField,
      { "trailerField", "pkcs1.trailerField",
        FT_INT32, BASE_DEC, NULL, 0,
        "INTEGER", HFILL }},
    { &hf_pkcs1_specifiedCurve,
      { "specifiedCurve", "pkcs1.specifiedCurve_element",
        FT_NONE, BASE_NONE, NULL, 0,
        "SpecifiedECDomain", HFILL }},
    { &hf_pkcs1_namedCurve,
      { "namedCurve", "pkcs1.namedCurve",
        FT_OID, BASE_NONE, NULL, 0,
        "OBJECT_IDENTIFIER", HFILL }},
    { &hf_pkcs1_version,
      { "version", "pkcs1.version",
        FT_INT32, BASE_DEC, VALS(pkcs1_ECPVer_vals), 0,
        "ECPVer", HFILL }},
    { &hf_pkcs1_fieldID,
      { "fieldID", "pkcs1.fieldID_element",
        FT_NONE, BASE_NONE, NULL, 0,
        NULL, HFILL }},
    { &hf_pkcs1_curve,
      { "curve", "pkcs1.curve_element",
        FT_NONE, BASE_NONE, NULL, 0,
        NULL, HFILL }},
    { &hf_pkcs1_base,
      { "base", "pkcs1.base",
        FT_BYTES, BASE_NONE, NULL, 0,
        "ECPoint", HFILL }},
    { &hf_pkcs1_order,
      { "order", "pkcs1.order",
        FT_INT32, BASE_DEC, NULL, 0,
        "INTEGER", HFILL }},
    { &hf_pkcs1_cofactor,
      { "cofactor", "pkcs1.cofactor",
        FT_INT32, BASE_DEC, NULL, 0,
        "INTEGER", HFILL }},
    { &hf_pkcs1_fieldType,
      { "fieldType", "pkcs1.fieldType",
        FT_OID, BASE_NONE, NULL, 0,
        NULL, HFILL }},
    { &hf_pkcs1_parameters,
      { "parameters", "pkcs1.parameters_element",
        FT_NONE, BASE_NONE, NULL, 0,
        NULL, HFILL }},
    { &hf_pkcs1_a,
      { "a", "pkcs1.a",
        FT_BYTES, BASE_NONE, NULL, 0,
        "FieldElement", HFILL }},
    { &hf_pkcs1_b,
      { "b", "pkcs1.b",
        FT_BYTES, BASE_NONE, NULL, 0,
        "FieldElement", HFILL }},
    { &hf_pkcs1_r,
      { "r", "pkcs1.r",
        FT_INT32, BASE_DEC, NULL, 0,
        "INTEGER", HFILL }},
    { &hf_pkcs1_s,
      { "s", "pkcs1.s",
        FT_INT32, BASE_DEC, NULL, 0,
        "INTEGER", HFILL }},

/*--- End of included file: packet-pkcs1-hfarr.c ---*/
#line 44 "./asn1/pkcs1/packet-pkcs1-template.c"
  };

  /* List of subtrees */
  static gint *ett[] = {

/*--- Included file: packet-pkcs1-ettarr.c ---*/
#line 1 "./asn1/pkcs1/packet-pkcs1-ettarr.c"
    &ett_pkcs1_RSAPublicKey,
    &ett_pkcs1_DigestInfo,
    &ett_pkcs1_DSA_Params,
    &ett_pkcs1_DomainParameters,
    &ett_pkcs1_ValidationParams,
    &ett_pkcs1_RSASSA_PSS_params,
    &ett_pkcs1_ECParameters,
    &ett_pkcs1_SpecifiedECDomain,
    &ett_pkcs1_FieldID,
    &ett_pkcs1_Curve,
    &ett_pkcs1_DSA_Sig_Value,
    &ett_pkcs1_ECDSA_Sig_Value,

/*--- End of included file: packet-pkcs1-ettarr.c ---*/
#line 49 "./asn1/pkcs1/packet-pkcs1-template.c"
  };

  /* Register protocol */
  proto_pkcs1 = proto_register_protocol(PNAME, PSNAME, PFNAME);

  /* Register fields and subtrees */
  proto_register_field_array(proto_pkcs1, hf, array_length(hf));
  proto_register_subtree_array(ett, array_length(ett));

}
