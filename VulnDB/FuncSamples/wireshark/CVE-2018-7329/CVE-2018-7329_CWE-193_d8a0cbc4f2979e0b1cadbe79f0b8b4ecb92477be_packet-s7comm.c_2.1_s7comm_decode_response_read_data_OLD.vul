static guint32
s7comm_decode_response_read_data(tvbuff_t *tvb,
                                 proto_tree *tree,
                                 guint8 item_count,
                                 guint32 offset)
{
    guint8 ret_val = 0;
    guint8 tsize = 0;
    guint16 len = 0, len2 = 0;
    guint16 head_len = 4;           /* 1 byte res-code, 1 byte transp-size, 2 bytes len */
    guint8 i = 0;
    proto_item *item = NULL;
    proto_tree *item_tree = NULL;

    for (i = 1; i <= item_count; i++) {
        ret_val = tvb_get_guint8(tvb, offset);
        if (ret_val == S7COMM_ITEM_RETVAL_RESERVED ||
            ret_val == S7COMM_ITEM_RETVAL_DATA_OK ||
            ret_val == S7COMM_ITEM_RETVAL_DATA_ERR
            ) {
            tsize = tvb_get_guint8(tvb, offset + 1);
            len = tvb_get_ntohs(tvb, offset + 2);
            /* calculate length in bytes */
            if (tsize == S7COMM_DATA_TRANSPORT_SIZE_BBIT ||
                tsize == S7COMM_DATA_TRANSPORT_SIZE_BBYTE ||
                tsize == S7COMM_DATA_TRANSPORT_SIZE_BINT
                ) {     /* given length is in number of bits */
                if (len % 8) { /* len is not a multiple of 8, then round up to next number */
                    len /= 8;
                    len = len + 1;
                } else {
                    len /= 8;
                }
            }

            /* the PLC places extra bytes at the end of all but last result, if length is not a multiple of 2 */
            if ((len % 2) && (i < item_count)) {
                len2 = len + 1;
            } else {
                len2 = len;
            }
        }
        /* Insert a new tree for every item */
        item = proto_tree_add_item(tree, hf_s7comm_data_item, tvb, offset, len + head_len, ENC_NA);
        item_tree = proto_item_add_subtree(item, ett_s7comm_data_item);
        proto_item_append_text(item, " [%d]: (%s)", i, val_to_str(ret_val, s7comm_item_return_valuenames, "Unknown code: 0x%02x"));

        proto_tree_add_uint(item_tree, hf_s7comm_data_returncode, tvb, offset, 1, ret_val);
        proto_tree_add_uint(item_tree, hf_s7comm_data_transport_size, tvb, offset + 1, 1, tsize);
        proto_tree_add_uint(item_tree, hf_s7comm_data_length, tvb, offset + 2, 2, len);
        offset += head_len;

        if (ret_val == S7COMM_ITEM_RETVAL_DATA_OK || ret_val == S7COMM_ITEM_RETVAL_RESERVED) {
            proto_tree_add_item(item_tree, hf_s7comm_readresponse_data, tvb, offset, len, ENC_NA);
            offset += len;
            if (len != len2) {
                proto_tree_add_item(item_tree, hf_s7comm_data_fillbyte, tvb, offset, 1, ENC_BIG_ENDIAN);
                offset += 1;
            }
        }
    }
    return offset;
}
