int
dissect_dcom_OBJREF(tvbuff_t *tvb, gint offset, packet_info *pinfo,
		       proto_tree *tree, dcerpc_info *di, guint8 *drep, int hfindex, dcom_interface_t **interf)
{
	guint32	u32Signature;
	guint32	u32Flags;
	e_guid_t iid;
	e_guid_t clsid;
	proto_item *sub_item;
	proto_tree *sub_tree;
	guint32	u32SubStart;
	guint64 oxid = 0;
	guint64 oid = 0;
	e_guid_t ipid;
	dcom_interface_t *dcom_if = NULL;
	gchar ip[4];

	memset(&ipid, 0, sizeof(ipid));
	memset(ip, 0, sizeof(ip));

	/* add subtree header */
	sub_item = proto_tree_add_item(tree, hf_dcom_objref, tvb, offset, 0, ENC_NA);
	sub_tree = proto_item_add_subtree(sub_item, ett_dcom_objref);

	offset = dissect_dcom_DWORD(tvb, offset, pinfo, sub_tree, di, drep,
			hf_dcom_objref_signature, &u32Signature);
	/* from here, alignment is ok */
	u32SubStart = offset - 4;
	offset = dissect_dcom_DWORD(tvb, offset, pinfo, sub_tree, di, drep,
			hf_dcom_objref_flags, &u32Flags);
	offset = dissect_dcom_UUID(tvb, offset, pinfo, sub_tree, di, drep,
			hf_dcom_iid, &iid);

	switch(u32Flags) {
		case(0x1):	/* standard */
			offset = dissect_dcom_STDOBJREF(tvb, offset, pinfo, sub_tree, di, drep, hfindex,
								&oxid, &oid, &ipid);
			offset = dissect_dcom_DUALSTRINGARRAY(tvb, offset, pinfo, sub_tree, di, drep,
								hf_dcom_objref_resolver_address, ip);
		break;
		case(0x2):	/* handler (untested) */
			offset = dissect_dcom_STDOBJREF(tvb, offset, pinfo, sub_tree, di, drep, hfindex,
								&oxid, &oid, &iid);
			offset = dissect_dcom_UUID(tvb, offset, pinfo, sub_tree, di, drep,
								hf_dcom_clsid, &clsid);
			offset = dissect_dcom_DUALSTRINGARRAY(tvb, offset, pinfo, sub_tree, di, drep,
								hf_dcom_objref_resolver_address, ip);
		break;
		case(0x4):	/* custom */
		    offset = dissect_dcom_CUSTOBJREF(tvb, offset, pinfo, sub_tree, di, drep, hfindex,
		                        &clsid, &iid);
		    break;
	}

	if(u32Flags == 0x1 || u32Flags == 0x2) {
		/* add interface instance to database (we currently only handle IPv4) */
		if(pinfo->net_src.type == AT_IPv4) {
			address addr;

			SET_ADDRESS(&addr, AT_IPv4, 4, ip);
			dcom_if = dcom_interface_new(pinfo,
						     &addr,
						     &iid, oxid, oid, &ipid);
		}
	}

	if(interf != NULL) {
		*interf = dcom_if;
	}

	/* append info to subtree header */
	proto_item_set_len(sub_item, offset - u32SubStart);

	return offset;
}
