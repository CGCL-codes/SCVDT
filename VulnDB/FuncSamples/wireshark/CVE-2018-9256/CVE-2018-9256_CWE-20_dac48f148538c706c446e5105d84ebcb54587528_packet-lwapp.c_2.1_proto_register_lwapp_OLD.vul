void
proto_register_lwapp(void)
{
    static hf_register_info hf[] = {
        { &hf_lwapp_version,
          { "Version", "lwapp.version", FT_UINT8, BASE_DEC, NULL, 0x00,
            NULL, HFILL }},
        { &hf_lwapp_slotid,
          { "slotId","lwapp.slotId", FT_UINT24, BASE_DEC, NULL, 0x0,
            NULL, HFILL }},
        { &hf_lwapp_flags,
          { "Flags", "lwapp.flags", FT_UINT8, BASE_HEX,
            NULL, 0x0, NULL, HFILL }},
        { &hf_lwapp_flags_type,
          { "Type", "lwapp.flags.type", FT_BOOLEAN, 8,
            TFS(&lwapp_flags_type), LWAPP_FLAGS_T, NULL, HFILL }},
        { &hf_lwapp_flags_fragment,
          { "Fragment", "lwapp.flags.fragment", FT_BOOLEAN, 8,
            TFS(&tfs_set_notset), LWAPP_FLAGS_F,
            NULL, HFILL }},
        { &hf_lwapp_flags_fragment_type,
          { "Fragment Type", "lwapp.flags.fragmentType", FT_BOOLEAN, 8,
            TFS(&tfs_set_notset), LWAPP_FLAGS_FT,
            NULL, HFILL }},
        { &hf_lwapp_fragment_id,
          { "Fragment Id","lwapp.fragmentId", FT_UINT8, BASE_HEX,
            NULL, 0x0, NULL, HFILL }},
        { &hf_lwapp_length,
          { "Length","lwapp.Length", FT_UINT16, BASE_DEC,
            NULL, 0x0, NULL, HFILL }},
        { &hf_lwapp_rssi,
          { "RSSI","lwapp.rssi", FT_UINT8, BASE_HEX,
            NULL, 0x0, NULL, HFILL }},
        { &hf_lwapp_snr,
          { "SNR","lwapp.snr", FT_UINT8, BASE_HEX,
            NULL, 0x0, NULL, HFILL }},
#if 0
        { &hf_lwapp_control,
          { "Control Data (not dissected yet)","lwapp.control", FT_BYTES, BASE_NONE,
            NULL, 0x0, NULL, HFILL }},
#endif
        { &hf_lwapp_control_mac,
          { "AP Identity", "lwapp.apid", FT_ETHER, BASE_NONE, NULL, 0x0,
              "Access Point Identity", HFILL }},
        { &hf_lwapp_control_type,
          { "Control Type", "lwapp.control.type", FT_UINT8, BASE_DEC|BASE_EXT_STRING, &control_msg_vals_ext, 0x00,
            NULL, HFILL }},
        { &hf_lwapp_control_seq_no,
          { "Control Sequence Number", "lwapp.control.seqno", FT_UINT8, BASE_DEC, NULL, 0x00,
            NULL, HFILL }},
        { &hf_lwapp_control_length,
          { "Control Length","lwapp.control.length", FT_UINT16, BASE_DEC,
            NULL, 0x0, NULL, HFILL }},
    };
    static gint *ett[] = {
        &ett_lwapp_l3,
        &ett_lwapp,
        &ett_lwapp_control,
        &ett_lwapp_flags
    };
    module_t *lwapp_module;

    proto_lwapp = proto_register_protocol ("LWAPP Encapsulated Packet",
                                         "LWAPP", "lwapp");

    proto_lwapp_l3 = proto_register_protocol ("LWAPP Layer 3 Packet",
                                         "LWAPP-L3", "lwapp-l3");

    proto_lwapp_control = proto_register_protocol ("LWAPP Control Message",
                                         "LWAPP-CNTL", "lwapp-cntl");
    proto_register_field_array(proto_lwapp, hf, array_length(hf));
    proto_register_subtree_array(ett, array_length(ett));

    lwapp_module = prefs_register_protocol(proto_lwapp, NULL);

    prefs_register_bool_preference(lwapp_module,"swap_fc","Swap Frame Control",
                                   "Swap frame control bytes (needed for some APs",
                                   &swap_frame_control);

}
