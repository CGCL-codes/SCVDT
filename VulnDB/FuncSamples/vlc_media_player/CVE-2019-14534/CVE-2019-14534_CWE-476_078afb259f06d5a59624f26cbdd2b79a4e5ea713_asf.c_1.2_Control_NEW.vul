static int Control( demux_t *p_demux, int i_query, va_list args )
{
    demux_sys_t *p_sys = p_demux->p_sys;
    vlc_meta_t  *p_meta;
    vlc_tick_t  i64;
    int         i;
    double      f, *pf;

    switch( i_query )
    {
    case DEMUX_GET_LENGTH:
        *va_arg( args, vlc_tick_t * ) = p_sys->i_length;
        return VLC_SUCCESS;

    case DEMUX_GET_TIME:
        if( p_sys->i_time == VLC_TICK_INVALID ) return VLC_EGENERIC;
        *va_arg( args, vlc_tick_t * ) = p_sys->i_time;
        return VLC_SUCCESS;

    case DEMUX_SET_TIME:
        if ( !p_sys->p_fp ||
             ! ( p_sys->p_fp->i_flags & ASF_FILE_PROPERTIES_SEEKABLE ) )
            return VLC_EGENERIC;

        SeekPrepare( p_demux );

        if( p_sys->b_index && p_sys->i_length != 0 )
        {
            va_list acpy;
            va_copy( acpy, args );
            i64 = va_arg( acpy, vlc_tick_t );
            va_end( acpy );

            if( !SeekIndex( p_demux, i64, -1 ) )
                return VLC_SUCCESS;
        }
        return SeekPercent( p_demux, i_query, args );

    case DEMUX_SET_ES:
    {
        i = va_arg( args, int );
        int i_ret;
        if ( i >= 0 )
        {
            msg_Dbg( p_demux, "Requesting access to enable stream %d", i );
            i_ret = vlc_stream_Control( p_demux->s,
                                        STREAM_SET_PRIVATE_ID_STATE, i, true );
        }
        else
        {  /* i contains -1 * es_category */
            msg_Dbg( p_demux, "Requesting access to disable stream %d", i );
            i_ret = vlc_stream_Control( p_demux->s,
                                        STREAM_SET_PRIVATE_ID_STATE, i,
                                        false );
        }

        if ( i_ret == VLC_SUCCESS )
        {
            asf_track_t *tk;
            if( i >= 0 )
            {
                tk = p_sys->track[i];
            }
            else
            {
                for( int j = 0; j < MAX_ASF_TRACKS ; j++ )
                {
                    tk = p_sys->track[j];
                    if( !tk || !tk->p_fmt || tk->i_cat != -1 * i )
                        continue;
                    FlushQueue( tk );
                    tk->i_time = VLC_TICK_INVALID;
                }
            }

            p_sys->i_seek_track = 0;
            if ( ( tk && tk->i_cat == VIDEO_ES ) || i == -1 * VIDEO_ES )
                WaitKeyframe( p_demux );
        }
        return i_ret;
    }

    case DEMUX_SET_ES_LIST:
        return VLC_EGENERIC; /* TODO */

    case DEMUX_GET_POSITION:
        if( p_sys->i_time == VLC_TICK_INVALID ) return VLC_EGENERIC;
        if( p_sys->i_length != 0 )
        {
            pf = va_arg( args, double * );
            *pf = p_sys->i_time / (double)p_sys->i_length;
            return VLC_SUCCESS;
        }
        return demux_vaControlHelper( p_demux->s,
                                       __MIN( INT64_MAX, p_sys->i_data_begin ),
                                       __MIN( INT64_MAX, p_sys->i_data_end ),
                                       __MIN( INT64_MAX, p_sys->i_bitrate ),
                                       __MIN( INT16_MAX, p_sys->p_fp->i_min_data_packet_size ),
                                       i_query, args );

    case DEMUX_SET_POSITION:
        if ( !p_sys->p_fp ||
             ( !( p_sys->p_fp->i_flags & ASF_FILE_PROPERTIES_SEEKABLE ) && !p_sys->b_index ) )
            return VLC_EGENERIC;

        SeekPrepare( p_demux );

        if( p_sys->b_index && p_sys->i_length != 0 )
        {
            va_list acpy;
            va_copy( acpy, args );
            f = va_arg( acpy, double );
            va_end( acpy );

            if( !SeekIndex( p_demux, -1, f ) )
                return VLC_SUCCESS;
        }
        return SeekPercent( p_demux, i_query, args );

    case DEMUX_GET_META:
        p_meta = va_arg( args, vlc_meta_t * );
        vlc_meta_Merge( p_meta, p_sys->meta );
        return VLC_SUCCESS;

    case DEMUX_CAN_SEEK:
        if ( !p_sys->p_fp ||
             ( !( p_sys->p_fp->i_flags & ASF_FILE_PROPERTIES_SEEKABLE ) && !p_sys->b_index ) )
        {
            bool *pb_bool = va_arg( args, bool * );
            *pb_bool = false;
            return VLC_SUCCESS;
        }
        /* fall through */
    default:
        return demux_vaControlHelper( p_demux->s,
                                      __MIN( INT64_MAX, p_sys->i_data_begin ),
                                      __MIN( INT64_MAX, p_sys->i_data_end),
                                      __MIN( INT64_MAX, p_sys->i_bitrate ),
                    ( p_sys->p_fp ) ? __MIN( INT_MAX, p_sys->p_fp->i_min_data_packet_size ) : 1,
                    i_query, args );
    }
}
