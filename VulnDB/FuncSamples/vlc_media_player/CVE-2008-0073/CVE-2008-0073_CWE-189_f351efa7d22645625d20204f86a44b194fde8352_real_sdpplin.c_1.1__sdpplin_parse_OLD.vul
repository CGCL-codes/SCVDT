sdpplin_t *sdpplin_parse(char *data) {

  sdpplin_t        *desc = malloc(sizeof(sdpplin_t));
  sdpplin_stream_t *stream;
  char             *buf=malloc(BUFLEN);
  char             *decoded=malloc(BUFLEN);
  int              handled;
  int              len;

  if( !desc ) return NULL;
  if( !buf ) {
    free( desc );
    return NULL;
  }
  if( !decoded ) {
    free( buf );
    free( desc );
    return NULL;
  }

  desc->stream = NULL;

  memset(desc, 0, sizeof(sdpplin_t));

  while (data && *data) {
    handled=0;

    if (filter(data, "m=", &buf, BUFLEN)) {
        if ( !desc->stream ) {
            fprintf(stderr, "sdpplin.c: stream identifier found before stream count, skipping.");
            continue;
        }
        stream=sdpplin_parse_stream(&data);
        lprintf("got data for stream id %u\n", stream->stream_id);
        desc->stream[stream->stream_id]=stream;
        continue;
    }
    if(filter(data,"a=Title:buffer;",&buf, BUFLEN)) {
      decoded=b64_decode(buf, decoded, &len);
	  if ( decoded != NULL ) {
          desc->title=strdup(decoded);
          handled=1;
          data=nl(data);
      }
    }
    if(filter(data,"a=Author:buffer;",&buf, BUFLEN)) {
      decoded=b64_decode(buf, decoded, &len);
	  if ( decoded != NULL ) {
          desc->author=strdup(decoded);
          handled=1;
          data=nl(data);
      }
    }
    if(filter(data,"a=Copyright:buffer;",&buf, BUFLEN)) {
      decoded=b64_decode(buf, decoded, &len);
	  if ( decoded != NULL ) {
          desc->copyright=strdup(decoded);
          handled=1;
          data=nl(data);
      }
    }
    if(filter(data,"a=Abstract:buffer;",&buf, BUFLEN)) {
      decoded=b64_decode(buf, decoded, &len);
      if ( decoded != NULL ) {
           desc->abstract=strdup(decoded);
           handled=1;
           data=nl(data);
      }
    }
    if(filter(data,"a=StreamCount:integer;",&buf, BUFLEN)) {
      desc->stream_count=atoi(buf);
      desc->stream = malloc(sizeof(sdpplin_stream_t*)*desc->stream_count);
      handled=1;
      data=nl(data);
    }
    if(filter(data,"a=Flags:integer;",&buf, BUFLEN)) {
      desc->flags=atoi(buf);
      handled=1;
      data=nl(data);
    }

    if(!handled) {
#ifdef LOG
      int len=strchr(data,'\n')-data;
      memcpy(buf, data, len+1);
      buf[len]=0;
      printf("libreal: sdpplin: not handled: '%s'\n", buf);
#endif
      data=nl(data);
    }
  }

  free( decoded );
  free( buf );
  return desc;
}
