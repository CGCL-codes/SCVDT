static int DemuxInit( demux_t *p_demux )
{
    demux_sys_t *p_sys = p_demux->p_sys;

    /* init context */
    p_sys->i_time   = VLC_TICK_INVALID;
    p_sys->i_sendtime    = -1;
    p_sys->i_length = 0;
    p_sys->b_eos = false;
    p_sys->b_eof = false;
    p_sys->i_bitrate = 0;
    p_sys->p_root   = NULL;
    p_sys->p_fp     = NULL;
    p_sys->b_index  = 0;
    p_sys->i_track  = 0;
    p_sys->i_seek_track = 0;
    p_sys->i_wait_keyframe = 0;
    for( int i = 0; i < MAX_ASF_TRACKS; i++ )
    {
        p_sys->track[i] = NULL;
    }
    p_sys->i_data_begin = 0;
    p_sys->i_data_end   = 0;
    p_sys->i_preroll_start = 0;
    p_sys->meta         = NULL;

    /* Now load all object ( except raw data ) */
    vlc_stream_Control( p_demux->s, STREAM_CAN_FASTSEEK,
                        &p_sys->b_canfastseek );
    if( !(p_sys->p_root = ASF_ReadObjectRoot(p_demux->s, p_sys->b_canfastseek)) )
    {
        msg_Warn( p_demux, "ASF plugin discarded (not a valid file)" );
        return VLC_EGENERIC;
    }
    p_sys->p_fp = p_sys->p_root->p_fp;

    if( p_sys->p_fp->i_min_data_packet_size != p_sys->p_fp->i_max_data_packet_size )
    {
        msg_Warn( p_demux, "ASF plugin discarded (invalid file_properties object)" );
        goto error;
    }

    if ( ASF_FindObject( p_sys->p_root->p_hdr,
                         &asf_object_content_encryption_guid, 0 ) != NULL
         || ASF_FindObject( p_sys->p_root->p_hdr,
                            &asf_object_extended_content_encryption_guid, 0 ) != NULL
         || ASF_FindObject( p_sys->p_root->p_hdr,
                         &asf_object_advanced_content_encryption_guid, 0 ) != NULL )
    {
        vlc_dialog_display_error( p_demux, _("Could not demux ASF stream"), "%s",
            ("DRM protected streams are not supported.") );
        goto error;
    }

    p_sys->i_track = ASF_CountObject( p_sys->p_root->p_hdr,
                                      &asf_object_stream_properties_guid );
    if( p_sys->i_track == 0 )
    {
        msg_Warn( p_demux, "ASF plugin discarded (cannot find any stream!)" );
        goto error;
    }
    msg_Dbg( p_demux, "found %u streams", p_sys->i_track );

    /* check if index is available */
    asf_object_index_t *p_index = ASF_FindObject( p_sys->p_root,
                                                  &asf_object_simple_index_guid, 0 );
    const bool b_index = p_index && p_index->i_index_entry_count;

    /* Find the extended header if any */
    asf_object_t *p_hdr_ext = ASF_FindObject( p_sys->p_root->p_hdr,
                                              &asf_object_header_extension_guid, 0 );

    asf_object_language_list_t *p_languages = NULL;
    asf_es_priorities_t fmt_priorities_ex = { NULL, 0 };
    asf_es_priorities_t fmt_priorities_bitrate_ex = { NULL, 0 };

    if( p_hdr_ext )
    {
        p_languages = ASF_FindObject( p_hdr_ext, &asf_object_language_list, 0 );

        ASF_fillup_es_priorities_ex( p_sys, p_hdr_ext, &fmt_priorities_ex );
        ASF_fillup_es_bitrate_priorities_ex( p_sys, p_hdr_ext, &fmt_priorities_bitrate_ex );
    }

    const bool b_mms = !strncasecmp( p_demux->psz_url, "mms:", 4 );
    bool b_dvrms = false;

    if( b_mms )
    {
        es_out_Control( p_demux->out, ES_OUT_SET_ES_CAT_POLICY,
                        VIDEO_ES, ES_OUT_ES_POLICY_EXCLUSIVE );
    }

    for( unsigned i_stream = 0; i_stream < p_sys->i_track; i_stream++ )
    {
        asf_track_t    *tk;
        asf_object_stream_properties_t *p_sp;
        asf_object_extended_stream_properties_t *p_esp;
        bool b_access_selected;

        p_sp = ASF_FindObject( p_sys->p_root->p_hdr,
                               &asf_object_stream_properties_guid,
                               i_stream );
        p_esp = NULL;

        /* Ignore duplicated streams numbers */
        if (p_sys->track[p_sp->i_stream_number])
            continue;

        tk = p_sys->track[p_sp->i_stream_number] = malloc( sizeof( asf_track_t ) );
        if (!tk)
            goto error;
        memset( tk, 0, sizeof( asf_track_t ) );

        tk->i_time = VLC_TICK_INVALID;
        tk->info.p_sp = p_sp;
        tk->p_es = NULL;
        tk->info.p_esp = NULL;
        tk->info.p_frame = NULL;
        tk->info.i_cat = UNKNOWN_ES;
        tk->queue.p_first = NULL;
        tk->queue.pp_last = &tk->queue.p_first;

        if ( !b_mms )
        {
            /* Check (not mms) if this track is selected (ie will receive data) */
            if( !vlc_stream_Control( p_demux->s, STREAM_GET_PRIVATE_ID_STATE,
                                     (int) p_sp->i_stream_number,
                                     &b_access_selected ) &&
                !b_access_selected )
            {
                tk->i_cat = UNKNOWN_ES;
                msg_Dbg( p_demux, "ignoring not selected stream(ID:%u) (by access)",
                         p_sp->i_stream_number );
                continue;
            }
        }

        /* Find the associated extended_stream_properties if any */
        if( p_hdr_ext )
        {
            int i_ext_stream = ASF_CountObject( p_hdr_ext,
                                                &asf_object_extended_stream_properties_guid );
            for( int i = 0; i < i_ext_stream; i++ )
            {
                asf_object_t *p_tmp =
                    ASF_FindObject( p_hdr_ext,
                                    &asf_object_extended_stream_properties_guid, i );
                if( p_tmp->ext_stream.i_stream_number == p_sp->i_stream_number )
                {
                    p_esp = &p_tmp->ext_stream;
                    tk->info.p_esp = p_esp;
                    break;
                }
            }
        }

        /* Check for DVR-MS */
        if( p_esp )
            for( uint16_t i=0; i<p_esp->i_payload_extension_system_count && !b_dvrms; i++ )
                b_dvrms = guidcmp( &p_esp->p_ext[i].i_extension_id, &asf_dvr_sampleextension_timing_rep_data_guid );

        es_format_t fmt;

        if( guidcmp( &p_sp->i_stream_type, &asf_object_stream_type_audio ) &&
            p_sp->i_type_specific_data_length >= sizeof( WAVEFORMATEX ) - 2 )
        {
            uint8_t *p_data = p_sp->p_type_specific_data;
            int i_format;

            es_format_Init( &fmt, AUDIO_ES, 0 );
            i_format = GetWLE( &p_data[0] );
            wf_tag_to_fourcc( i_format, &fmt.i_codec, NULL );

            GET_CHECKED( fmt.audio.i_channels,      GetWLE( &p_data[2] ),
                                                        255, uint16_t );
            GET_CHECKED( fmt.audio.i_rate,          GetDWLE( &p_data[4] ),
                                                        UINT_MAX, uint32_t );
            GET_CHECKED( fmt.i_bitrate,             GetDWLE( &p_data[8] ) * 8,
                                                        UINT_MAX, uint32_t );
            fmt.audio.i_blockalign      = GetWLE(  &p_data[12] );
            fmt.audio.i_bitspersample   = GetWLE(  &p_data[14] );

            if( p_sp->i_type_specific_data_length > sizeof( WAVEFORMATEX ) &&
                i_format != WAVE_FORMAT_MPEGLAYER3 &&
                i_format != WAVE_FORMAT_MPEG )
            {
                GET_CHECKED( fmt.i_extra, __MIN( GetWLE( &p_data[16] ),
                                     p_sp->i_type_specific_data_length -
                                     sizeof( WAVEFORMATEX ) ),
                             INT_MAX, uint32_t );
                fmt.p_extra = malloc( fmt.i_extra );
                memcpy( fmt.p_extra, &p_data[sizeof( WAVEFORMATEX )],
                        fmt.i_extra );
            }
            msg_Dbg( p_demux, "added new audio stream (codec:%4.4s(0x%x),ID:%d)",
                (char*)&fmt.i_codec, GetWLE( p_data ), p_sp->i_stream_number );
        }
        else if( guidcmp( &p_sp->i_stream_type,
                              &asf_object_stream_type_video ) &&
                 p_sp->i_type_specific_data_length >= 11 +
                 sizeof( VLC_BITMAPINFOHEADER ) )
        {
            uint8_t      *p_data = &p_sp->p_type_specific_data[11];

            es_format_Init( &fmt, VIDEO_ES,
                            VLC_FOURCC( p_data[16], p_data[17],
                                        p_data[18], p_data[19] ) );

            GET_CHECKED( fmt.video.i_width,      GetDWLE( p_data + 4 ),
                                                     UINT_MAX, uint32_t );
            GET_CHECKED( fmt.video.i_height,     GetDWLE( p_data + 8 ),
                                                     UINT_MAX, uint32_t );
            fmt.video.i_visible_width = fmt.video.i_width;
            fmt.video.i_visible_height = fmt.video.i_height;

            if( p_esp && p_esp->i_average_time_per_frame > 0 )
            {
                fmt.video.i_frame_rate = 10000000;
                GET_CHECKED( fmt.video.i_frame_rate_base,
                             p_esp->i_average_time_per_frame,
                             UINT_MAX, uint64_t );
            }

            if( fmt.i_codec == VLC_FOURCC( 'D','V','R',' ') )
            {
                /* DVR-MS special ASF */
                fmt.i_codec = VLC_CODEC_MPGV;
            }

            if( p_sp->i_type_specific_data_length > 11 +
                sizeof( VLC_BITMAPINFOHEADER ) )
            {
                GET_CHECKED( fmt.i_extra, __MIN( GetDWLE( p_data ),
                                     p_sp->i_type_specific_data_length - 11 -
                                     sizeof( VLC_BITMAPINFOHEADER ) ),
                             UINT_MAX, uint32_t );
                fmt.p_extra = malloc( fmt.i_extra );
                memcpy( fmt.p_extra, &p_data[sizeof( VLC_BITMAPINFOHEADER )],
                        fmt.i_extra );
            }

            /* Look for an aspect ratio */
            if( p_sys->p_root->p_metadata )
            {
                asf_object_metadata_t *p_meta = p_sys->p_root->p_metadata;
                unsigned int i_aspect_x = 0, i_aspect_y = 0;
                uint32_t i;
                for( i = 0; i < p_meta->i_record_entries_count; i++ )
                {
                    if( !p_meta->record[i].psz_name )
                        continue;
                    if( !strcmp( p_meta->record[i].psz_name, "AspectRatioX" ) )
                    {
                        if( (!i_aspect_x && !p_meta->record[i].i_stream) ||
                            p_meta->record[i].i_stream ==
                            p_sp->i_stream_number )
                            GET_CHECKED( i_aspect_x, p_meta->record[i].i_val,
                                         UINT_MAX, uint64_t );
                    }
                    if( !strcmp( p_meta->record[i].psz_name, "AspectRatioY" ) )
                    {
                        if( (!i_aspect_y && !p_meta->record[i].i_stream) ||
                            p_meta->record[i].i_stream ==
                            p_sp->i_stream_number )
                            GET_CHECKED( i_aspect_y, p_meta->record[i].i_val,
                                         UINT_MAX, uint64_t );
                    }
                }

                if( i_aspect_x && i_aspect_y )
                {
                    fmt.video.i_sar_num = i_aspect_x;
                    fmt.video.i_sar_den = i_aspect_y;
                }
            }

            /* If there is a video track then use the index for seeking */
            p_sys->b_index = b_index;

            msg_Dbg( p_demux, "added new video stream(codec:%4.4s,ID:%d)",
                     (char*)&fmt.i_codec, p_sp->i_stream_number );
        }
        else if( guidcmp( &p_sp->i_stream_type, &asf_object_stream_type_binary ) &&
            p_sp->i_type_specific_data_length >= 64 )
        {
            vlc_guid_t i_major_media_type;
            ASF_GetGUID( &i_major_media_type, p_sp->p_type_specific_data );
            msg_Dbg( p_demux, "stream(ID:%d) major type " GUID_FMT, p_sp->i_stream_number,
                     GUID_PRINT(i_major_media_type) );

            vlc_guid_t i_media_subtype;
            ASF_GetGUID( &i_media_subtype, &p_sp->p_type_specific_data[16] );
            msg_Dbg( p_demux, "stream(ID:%d) subtype " GUID_FMT, p_sp->i_stream_number,
                     GUID_PRINT(i_media_subtype) );

            //uint32_t i_fixed_size_samples = GetDWBE( &p_sp->p_type_specific_data[32] );
            //uint32_t i_temporal_compression = GetDWBE( &p_sp->p_type_specific_data[36] );
            //uint32_t i_sample_size = GetDWBE( &p_sp->p_type_specific_data[40] );

            vlc_guid_t i_format_type;
            ASF_GetGUID( &i_format_type, &p_sp->p_type_specific_data[44] );
            msg_Dbg( p_demux, "stream(ID:%d) format type " GUID_FMT, p_sp->i_stream_number,
                     GUID_PRINT(i_format_type) );

            //uint32_t i_format_data_size = GetDWBE( &p_sp->p_type_specific_data[60] );
            uint8_t *p_data = p_sp->p_type_specific_data + 64;
            unsigned int i_data = p_sp->i_type_specific_data_length - 64;

            msg_Dbg( p_demux, "Ext stream header detected. datasize = %d", p_sp->i_type_specific_data_length );
            if( guidcmp( &i_major_media_type, &asf_object_extended_stream_type_audio ) &&
                i_data >= sizeof( WAVEFORMATEX ) - 2)
            {
                uint16_t i_format;
                es_format_Init( &fmt, AUDIO_ES, 0 );

                i_format = GetWLE( &p_data[0] );
                if( i_format == 0 )
                    fmt.i_codec = VLC_CODEC_A52;
                else
                    wf_tag_to_fourcc( i_format, &fmt.i_codec, NULL );

                GET_CHECKED( fmt.audio.i_channels,      GetWLE( &p_data[2] ),
                                                            255, uint16_t );
                GET_CHECKED( fmt.audio.i_rate,          GetDWLE( &p_data[4] ),
                                                            UINT_MAX, uint32_t );
                GET_CHECKED( fmt.i_bitrate,             GetDWLE( &p_data[8] ) * 8,
                                                            UINT_MAX, uint32_t );
                fmt.audio.i_blockalign      = GetWLE(  &p_data[12] );
                fmt.audio.i_bitspersample   = GetWLE(  &p_data[14] );

                if( p_sp->i_type_specific_data_length > sizeof( WAVEFORMATEX ) &&
                    i_format != WAVE_FORMAT_MPEGLAYER3 &&
                    i_format != WAVE_FORMAT_MPEG && i_data >= 19 )
                {
                    GET_CHECKED( fmt.i_extra, __MIN( GetWLE( &p_data[16] ),
                                         p_sp->i_type_specific_data_length -
                                         sizeof( WAVEFORMATEX ) ),
                                 INT_MAX, uint32_t );
                    fmt.p_extra = malloc( fmt.i_extra );
                    if ( fmt.p_extra )
                        memcpy( fmt.p_extra, &p_data[sizeof( WAVEFORMATEX )], fmt.i_extra );
                    else
                        fmt.i_extra = 0;
                }

                msg_Dbg( p_demux, "added new audio stream (codec:%4.4s(0x%x),ID:%d)",
                    (char*)&fmt.i_codec, i_format, p_sp->i_stream_number );
            }
            else
            {
                es_format_Init( &fmt, UNKNOWN_ES, 0 );
            }
        }
        else
        {
            es_format_Init( &fmt, UNKNOWN_ES, 0 );
        }

        if( b_dvrms )
        {
            fmt.i_original_fourcc = VLC_FOURCC( 'D','V','R',' ');
            fmt.b_packetized = false;
        }

        if( fmt.i_codec == VLC_CODEC_MP4A )
            fmt.b_packetized = false;

        tk->i_cat = tk->info.i_cat = fmt.i_cat;
        if( fmt.i_cat != UNKNOWN_ES )
        {
            if( p_esp && p_languages &&
                p_esp->i_language_index < p_languages->i_language &&
                p_languages->ppsz_language[p_esp->i_language_index] )
            {
                fmt.psz_language = strdup( p_languages->ppsz_language[p_esp->i_language_index] );
                char *p;
                if( fmt.psz_language && (p = strchr( fmt.psz_language, '-' )) )
                    *p = '\0';
            }

            /* Set our priority so we won't get multiple videos */
            int i_priority = ES_PRIORITY_SELECTABLE_MIN;
            for( uint16_t i = 0; i < fmt_priorities_ex.i_count; i++ )
            {
                if ( fmt_priorities_ex.pi_stream_numbers[i] == p_sp->i_stream_number )
                {
                    i_priority = ES_PRIORITY_NOT_DEFAULTABLE;
                    break;
                }
            }
            for( uint16_t i = 0; i < fmt_priorities_bitrate_ex.i_count; i++ )
            {
                if ( fmt_priorities_bitrate_ex.pi_stream_numbers[i] == p_sp->i_stream_number )
                {
                    i_priority = ES_PRIORITY_NOT_DEFAULTABLE;
                    break;
                }
            }
            fmt.i_priority = i_priority;

            if ( i_stream <= INT_MAX )
                fmt.i_id = i_stream;
            else
                msg_Warn( p_demux, "Can't set fmt.i_id to match stream id %u", i_stream );

            if ( fmt.i_cat == VIDEO_ES )
            {
                /* Backup our video format */
                tk->p_fmt = malloc( sizeof( es_format_t ) );
                if ( tk->p_fmt )
                    es_format_Copy( tk->p_fmt, &fmt );
            }

            fmt.i_id = tk->info.p_sp->i_stream_number;

            tk->p_es = es_out_Add( p_demux->out, &fmt );

            if( !vlc_stream_Control( p_demux->s, STREAM_GET_PRIVATE_ID_STATE,
                                     (int) p_sp->i_stream_number,
                                     &b_access_selected ) &&
                b_access_selected )
            {
                p_sys->i_access_selected_track[fmt.i_cat] = p_sp->i_stream_number;
            }

        }
        else
        {
            msg_Dbg( p_demux, "ignoring unknown stream(ID:%d)",
                     p_sp->i_stream_number );
        }

        es_format_Clean( &fmt );
    }

    free( fmt_priorities_ex.pi_stream_numbers );
    free( fmt_priorities_bitrate_ex.pi_stream_numbers );

    p_sys->i_data_begin = p_sys->p_root->p_data->i_object_pos + 50;
    if( p_sys->p_root->p_data->i_object_size != 0 )
    { /* local file */
        p_sys->i_data_end = p_sys->p_root->p_data->i_object_pos +
                                    p_sys->p_root->p_data->i_object_size;
        p_sys->i_data_end = __MIN( (uint64_t)stream_Size( p_demux->s ), p_sys->i_data_end );
    }
    else
    { /* live/broacast */
        p_sys->i_data_end = 0;
    }

    /* go to first packet */
    if( vlc_stream_Seek( p_demux->s, p_sys->i_data_begin ) != VLC_SUCCESS )
        goto error;

    /* try to calculate movie time */
    if( p_sys->p_fp->i_data_packets_count > 0 )
    {
        uint64_t i_count;
        uint64_t i_size = stream_Size( p_demux->s );

        if( p_sys->i_data_end > 0 && i_size > p_sys->i_data_end )
        {
            i_size = p_sys->i_data_end;
        }

        /* real number of packets */
        i_count = ( i_size - p_sys->i_data_begin ) /
                  p_sys->p_fp->i_min_data_packet_size;

        /* calculate the time duration in micro-s */
        p_sys->i_length = VLC_TICK_FROM_MSFTIME(p_sys->p_fp->i_play_duration) *
                   (vlc_tick_t)i_count /
                   (vlc_tick_t)p_sys->p_fp->i_data_packets_count;
        if( p_sys->i_length <= p_sys->p_fp->i_preroll )
            p_sys->i_length = 0;
        else
        {
            p_sys->i_length  -= p_sys->p_fp->i_preroll;
            p_sys->i_bitrate = 8 * i_size * CLOCK_FREQ / p_sys->i_length;
        }
    }

    /* Create meta information */
    p_sys->meta = vlc_meta_New();

    asf_object_content_description_t *p_cd;
    if( ( p_cd = ASF_FindObject( p_sys->p_root->p_hdr,
                                 &asf_object_content_description_guid, 0 ) ) )
    {
        if( p_cd->psz_title && *p_cd->psz_title )
        {
            vlc_meta_SetTitle( p_sys->meta, p_cd->psz_title );
        }
        if( p_cd->psz_artist && *p_cd->psz_artist )
        {
             vlc_meta_SetArtist( p_sys->meta, p_cd->psz_artist );
        }
        if( p_cd->psz_copyright && *p_cd->psz_copyright )
        {
            vlc_meta_SetCopyright( p_sys->meta, p_cd->psz_copyright );
        }
        if( p_cd->psz_description && *p_cd->psz_description )
        {
            vlc_meta_SetDescription( p_sys->meta, p_cd->psz_description );
        }
        if( p_cd->psz_rating && *p_cd->psz_rating )
        {
            vlc_meta_SetRating( p_sys->meta, p_cd->psz_rating );
        }
    }
    asf_object_extended_content_description_t *p_ecd;
    if( ( p_ecd = ASF_FindObject( p_sys->p_root->p_hdr,
                                 &asf_object_extended_content_description, 0 ) ) )
    {
        for( int i = 0; i < p_ecd->i_count; i++ )
        {

#define set_meta( name, vlc_type ) \
            if( p_ecd->ppsz_name[i] && !strncmp( p_ecd->ppsz_name[i], name, strlen(name) ) ) \
                vlc_meta_Set( p_sys->meta, vlc_type, p_ecd->ppsz_value[i] );

            set_meta( "WM/AlbumTitle",   vlc_meta_Album )
            else set_meta( "WM/TrackNumber",  vlc_meta_TrackNumber )
            else set_meta( "WM/Year",         vlc_meta_Date )
            else set_meta( "WM/Genre",        vlc_meta_Genre )
            else set_meta( "WM/Genre",        vlc_meta_Genre )
            else set_meta( "WM/AlbumArtist",  vlc_meta_AlbumArtist )
            else set_meta( "WM/Publisher",    vlc_meta_Publisher )
            else set_meta( "WM/PartOfSet",    vlc_meta_DiscNumber )
            else if( p_ecd->ppsz_value[i] != NULL && p_ecd->ppsz_name[i] &&
                    *p_ecd->ppsz_value[i] != '\0' && /* no empty value */
                    *p_ecd->ppsz_value[i] != '{'  && /* no guid value */
                    *p_ecd->ppsz_name[i] != '{' )    /* no guid name */
                    vlc_meta_AddExtra( p_sys->meta, p_ecd->ppsz_name[i], p_ecd->ppsz_value[i] );
            /* TODO map WM/Composer, WM/Provider, WM/PartOfSet, PeakValue, AverageLevel  */
#undef set_meta
        }
    }

    /// \tood Fix Child meta for ASF tracks
#if 0
    for( i_stream = 0, i = 0; i < MAX_ASF_TRACKS; i++ )
    {
        asf_object_codec_list_t *p_cl = ASF_FindObject( p_sys->p_root->p_hdr,
                                                        &asf_object_codec_list_guid, 0 );

        if( p_sys->track[i] )
        {
            vlc_meta_t *tk = vlc_meta_New();
            TAB_APPEND( p_sys->meta->i_track, p_sys->meta->track, tk );

            if( p_cl && i_stream < p_cl->i_codec_entries_count )
            {
                if( p_cl->codec[i_stream].psz_name &&
                    *p_cl->codec[i_stream].psz_name )
                {
                    vlc_meta_Add( tk, VLC_META_CODEC_NAME,
                                  p_cl->codec[i_stream].psz_name );
                }
                if( p_cl->codec[i_stream].psz_description &&
                    *p_cl->codec[i_stream].psz_description )
                {
                    vlc_meta_Add( tk, VLC_META_CODEC_DESCRIPTION,
                                  p_cl->codec[i_stream].psz_description );
                }
            }
            i_stream++;
        }
    }
#endif

    p_sys->packet_sys.pi_preroll = &p_sys->p_fp->i_preroll;
    p_sys->packet_sys.pi_preroll_start = &p_sys->i_preroll_start;

    return VLC_SUCCESS;

error:
    DemuxEnd( p_demux );
    return VLC_EGENERIC;
}
