static void
outputSWF_TEXT_RECORD (SWF_TEXTRECORD *trec, int level,char *tname,char *buffer,int bsize,int id)
{
  int i=0;
  struct FONTINFO *fi=fip;
  if ( trec->TextRecordType == 0 )
    return;
  if (trec->StyleFlagHasFont)
  {
   printf("%s(" VAR "f%d);\n", methodcall (tname, "setFont"), trec->FontID);
   printf("%s(%d);\n",methodcall(tname,"setHeight"),trec->TextHeight);
  }
  if( trec->StyleFlagHasColor )
  {
   if (level==2)
    printf ("%s(0x%02x, 0x%02x, 0x%02x, 0x%02x);\n",methodcall (tname, "setColor"),
      trec->TextColor.red,trec->TextColor.green,trec->TextColor.blue, trec->TextColor.alpha);
   else
    printf ("%s(0x%02x, 0x%02x, 0x%02x);\n",methodcall (tname, "setColor"),
      trec->TextColor.red,trec->TextColor.green,trec->TextColor.blue);
  }
  if( trec->StyleFlagHasYOffset || trec->StyleFlagHasXOffset ) 
  {
    printf ("%s(%d, %d);\n", methodcall (tname, "moveTo"),trec->XOffset,trec->YOffset);
  }
  if (trec->FontID) 
  {
    id=trec->FontID;
  }
  if (!trec->StyleFlagHasFont)				/* always check flag before use data */
  {
   fi = fip_current;					/* so cont w current font */

   if (!fi)
      SWF_warn("outputSWF_TEXT_RECORD: can't process text record: fonts information list is NULL\n");
   else
      id = fi->fontcodeID;					/* trigger next if */
  }
  while (fi)
  {
   if (fi->fontcodeID==id)
   {
    fip_current=fi;					/* set current font */
    for(i=0;i<trec->GlyphCount && i<bsize-1 ;i++)	/* byte n-1 will be terminator '\0' */
    {
     unsigned long off=(&(trec->GlyphEntries[i]))->GlyphIndex[0];
     if (off<fi->fontcodearrsize)
      buffer[i]=fi->fontcodeptr[off];
     else
      buffer[i]='?';		/* fallback to dummy A */
     /* printf ( COMMSTART "GlyphIndex[0] = %d  char = %d " COMMEND"\n",off,fi->fontcodeptr[off] ); */
    } 
    buffer[i]='\0'; 
    return;
   }
   else
    fi=fi->next;
  }
  buffer[0]='X';		/* fallback to dummy B */
  buffer[1]='\0'; 
}
