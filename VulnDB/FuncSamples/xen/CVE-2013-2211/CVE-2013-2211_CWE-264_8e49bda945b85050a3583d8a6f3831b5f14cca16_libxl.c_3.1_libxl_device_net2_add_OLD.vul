int libxl_device_net2_add(libxl_ctx *ctx, uint32_t domid, libxl_device_net2 *net2)
{
    libxl__gc gc = LIBXL_INIT_GC(ctx);
    flexarray_t *front, *back;
    libxl__device device;
    char *dompath, *dom, **l;
    unsigned int nb;
    int rc;

    front = flexarray_make(16, 1);
    if (!front) {
        rc = ERROR_NOMEM;
        goto err;
    }
    back = flexarray_make(16, 1);
    if (!back) {
        rc = ERROR_NOMEM;
        goto err_free;
    }

    if (!(dompath = libxl__xs_get_dompath(&gc, domid))) {
        rc = ERROR_FAIL;
        goto err_free;
    }
    dom = libxl__xs_read(&gc, XBT_NULL, libxl__sprintf(&gc, "%s/name", dompath));

    if (net2->devid == -1) {
        if (!(l = libxl__xs_directory(&gc, XBT_NULL,
                                     libxl__sprintf(&gc, "%s/device/vif2", dompath), &nb))) {
            net2->devid = 0;
        } else {
            net2->devid = strtoul(l[nb - 1], NULL, 10) + 1;
        }
    }

    device.backend_devid = net2->devid;
    device.backend_domid = net2->backend_domid;
    device.backend_kind = DEVICE_VIF2;
    device.devid = net2->devid;
    device.domid = net2->domid;
    device.kind = DEVICE_VIF2;

    flexarray_append(back, "domain");
    flexarray_append(back, dom);
    flexarray_append(back, "frontend-id");
    flexarray_append(back, libxl__sprintf(&gc, "%d", net2->domid));

    flexarray_append(back, "local-trusted");
    flexarray_append(back, libxl__sprintf(&gc, "%d", net2->back_trusted));
    flexarray_append(back, "mac");
    flexarray_append(back, libxl__sprintf(&gc, "%02x:%02x:%02x:%02x:%02x:%02x",
                                                 net2->back_mac[0], net2->back_mac[1],
                                                 net2->back_mac[2], net2->back_mac[3],
                                                 net2->back_mac[4], net2->back_mac[5]));

    flexarray_append(back, "remote-trusted");
    flexarray_append(back, libxl__sprintf(&gc, "%d", net2->trusted));
    flexarray_append(back, "remote-mac");
    flexarray_append(back, libxl__sprintf(&gc, "%02x:%02x:%02x:%02x:%02x:%02x",
                                                 net2->front_mac[0], net2->front_mac[1],
                                                 net2->front_mac[2], net2->front_mac[3],
                                                 net2->front_mac[4], net2->front_mac[5]));

    flexarray_append(back, "max-bypasses");
    flexarray_append(back, libxl__sprintf(&gc, "%d", net2->max_bypasses));
    flexarray_append(back, "filter-mac");
    flexarray_append(back, libxl__sprintf(&gc, "%d", !!(net2->filter_mac)));
    flexarray_append(back, "handle");
    flexarray_append(back, libxl__sprintf(&gc, "%d", net2->devid));
    flexarray_append(back, "online");
    flexarray_append(back, "1");
    flexarray_append(back, "state");
    flexarray_append(back, "1");

    flexarray_append(front, "backend-id");
    flexarray_append(front, libxl__sprintf(&gc, "%d", net2->backend_domid));

    flexarray_append(front, "local-trusted");
    flexarray_append(front, libxl__sprintf(&gc, "%d", net2->trusted));
    flexarray_append(front, "mac");
    flexarray_append(front, libxl__sprintf(&gc, "%02x:%02x:%02x:%02x:%02x:%02x",
                                                  net2->front_mac[0], net2->front_mac[1],
                                                  net2->front_mac[2], net2->front_mac[3],
                                                  net2->front_mac[4], net2->front_mac[5]));

    flexarray_append(front, "remote-trusted");
    flexarray_append(front, libxl__sprintf(&gc, "%d", net2->back_trusted));
    flexarray_append(front, "remote-mac");
    flexarray_append(front, libxl__sprintf(&gc, "%02x:%02x:%02x:%02x:%02x:%02x",
                                                  net2->back_mac[0], net2->back_mac[1],
                                                  net2->back_mac[2], net2->back_mac[3],
                                                  net2->back_mac[4], net2->back_mac[5]));

    flexarray_append(front, "filter-mac");
    flexarray_append(front, libxl__sprintf(&gc, "%d", !!(net2->filter_mac)));
    flexarray_append(front, "state");
    flexarray_append(front, "1");

    libxl__device_generic_add(ctx, &device,
                             libxl__xs_kvs_of_flexarray(&gc, back, back->count),
                             libxl__xs_kvs_of_flexarray(&gc, front, front->count));

    /* FIXME: wait for plug */
    rc = 0;
err_free:
    flexarray_free(back);
    flexarray_free(front);
err:
    libxl__free_all(&gc);
    return rc;
}
