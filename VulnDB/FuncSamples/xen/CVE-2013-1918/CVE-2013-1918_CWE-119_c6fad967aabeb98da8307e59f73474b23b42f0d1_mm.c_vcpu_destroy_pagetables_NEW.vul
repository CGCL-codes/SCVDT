int vcpu_destroy_pagetables(struct vcpu *v)
{
    unsigned long mfn = pagetable_get_pfn(v->arch.guest_table);
    struct page_info *page;
    int rc = put_old_guest_table(v);

    if ( rc )
        return rc;

#ifdef __x86_64__
    if ( is_pv_32on64_vcpu(v) )
        mfn = l4e_get_pfn(*(l4_pgentry_t *)mfn_to_virt(mfn));
#endif

    if ( mfn )
    {
        page = mfn_to_page(mfn);
        if ( paging_mode_refcounts(v->domain) )
            put_page(page);
        else
            rc = put_page_and_type_preemptible(page, 1);
    }

#ifdef __x86_64__
    if ( is_pv_32on64_vcpu(v) )
    {
        if ( !rc )
            l4e_write(
                (l4_pgentry_t *)__va(pagetable_get_paddr(v->arch.guest_table)),
                l4e_empty());
    }
    else
#endif
    if ( !rc )
    {
        v->arch.guest_table = pagetable_null();

#ifdef __x86_64__
        /* Drop ref to guest_table_user (from MMUEXT_NEW_USER_BASEPTR) */
        mfn = pagetable_get_pfn(v->arch.guest_table_user);
        if ( mfn )
        {
            page = mfn_to_page(mfn);
            if ( paging_mode_refcounts(v->domain) )
                put_page(page);
            else
                rc = put_page_and_type_preemptible(page, 1);
        }
        if ( !rc )
            v->arch.guest_table_user = pagetable_null();
#endif
    }

    v->arch.cr3 = 0;

    return rc;
}
