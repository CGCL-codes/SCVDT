libxl_cpupoolinfo * libxl_list_cpupool(libxl_ctx *ctx, int *nb_pool_out)
{
    GC_INIT(ctx);
    libxl_cpupoolinfo info, *ptr, *tmp;
    int i;
    uint32_t poolid;

    ptr = NULL;

    poolid = 0;
    for (i = 0;; i++) {
        if (cpupool_info(gc, &info, poolid, false))
            break;
        tmp = realloc(ptr, (i + 1) * sizeof(libxl_cpupoolinfo));
        if (!tmp) {
            LIBXL__LOG_ERRNO(ctx, LIBXL__LOG_ERROR, "allocating cpupool info");
            libxl_cpupoolinfo_list_free(ptr, i);
            ptr = NULL;
            goto out;
        }
        ptr = tmp;
        ptr[i] = info;
        poolid = info.poolid + 1;
    }

    *nb_pool_out = i;
out:
    GC_FREE;
    return ptr;
}
